const T = Object.freeze({ displayName: "JSON", name: "json", patterns: [{ include: "#value" }], repository: { array: { begin: "\\[", beginCaptures: { 0: { name: "punctuation.definition.array.begin.json" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.array.end.json" } }, name: "meta.structure.array.json", patterns: [{ include: "#value" }, { match: ",", name: "punctuation.separator.array.json" }, { match: "[^\\s\\]]", name: "invalid.illegal.expected-array-separator.json" }] }, comments: { patterns: [{ begin: "/\\*\\*(?!/)", captures: { 0: { name: "punctuation.definition.comment.json" } }, end: "\\*/", name: "comment.block.documentation.json" }, { begin: "/\\*", captures: { 0: { name: "punctuation.definition.comment.json" } }, end: "\\*/", name: "comment.block.json" }, { captures: { 1: { name: "punctuation.definition.comment.json" } }, match: "(//).*$\\n?", name: "comment.line.double-slash.js" }] }, constant: { match: "\\b(?:true|false|null)\\b", name: "constant.language.json" }, number: { match: `(?x)
-?
(?:
0
|
[1-9]
\\d*
)
(?:
(?:
\\.
\\d+
)?
(?:
[eE]
[+-]?
\\d+
)?
)?`, name: "constant.numeric.json" }, object: { begin: "\\{", beginCaptures: { 0: { name: "punctuation.definition.dictionary.begin.json" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.dictionary.end.json" } }, name: "meta.structure.dictionary.json", patterns: [{ comment: "the JSON object key", include: "#objectkey" }, { include: "#comments" }, { begin: ":", beginCaptures: { 0: { name: "punctuation.separator.dictionary.key-value.json" } }, end: "(,)|(?=\\})", endCaptures: { 1: { name: "punctuation.separator.dictionary.pair.json" } }, name: "meta.structure.dictionary.value.json", patterns: [{ comment: "the JSON object value", include: "#value" }, { match: "[^\\s,]", name: "invalid.illegal.expected-dictionary-separator.json" }] }, { match: "[^\\s\\}]", name: "invalid.illegal.expected-dictionary-separator.json" }] }, objectkey: { begin: '"', beginCaptures: { 0: { name: "punctuation.support.type.property-name.begin.json" } }, end: '"', endCaptures: { 0: { name: "punctuation.support.type.property-name.end.json" } }, name: "string.json support.type.property-name.json", patterns: [{ include: "#stringcontent" }] }, string: { begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.json" } }, end: '"', endCaptures: { 0: { name: "punctuation.definition.string.end.json" } }, name: "string.quoted.double.json", patterns: [{ include: "#stringcontent" }] }, stringcontent: { patterns: [{ match: `(?x)
\\\\
(?:
["\\\\/bfnrt]
|
u
[0-9a-fA-F]{4})`, name: "constant.character.escape.json" }, { match: "\\\\.", name: "invalid.illegal.unrecognized-string-escape.json" }] }, value: { patterns: [{ include: "#constant" }, { include: "#number" }, { include: "#string" }, { include: "#array" }, { include: "#object" }, { include: "#comments" }] } }, scopeName: "source.json" });
var i = [
  T
];
const D = Object.freeze({ displayName: "JavaScript", name: "javascript", patterns: [{ include: "#directives" }, { include: "#statements" }, { include: "#shebang" }], repository: { "access-modifier": { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(abstract|declare|override|public|protected|private|readonly|static)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "storage.modifier.js" }, "after-operator-block-as-object-literal": { begin: "(?<!\\+\\+|--)(?<=[:=(,\\[?+!>]|^await|[^\\._$[:alnum:]]await|^return|[^\\._$[:alnum:]]return|^yield|[^\\._$[:alnum:]]yield|^throw|[^\\._$[:alnum:]]throw|^in|[^\\._$[:alnum:]]in|^of|[^\\._$[:alnum:]]of|^typeof|[^\\._$[:alnum:]]typeof|&&|\\|\\||\\*)\\s*(\\{)", beginCaptures: { 1: { name: "punctuation.definition.block.js" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.block.js" } }, name: "meta.objectliteral.js", patterns: [{ include: "#object-member" }] }, "array-binding-pattern": { begin: "(?:(\\.\\.\\.)\\s*)?(\\[)", beginCaptures: { 1: { name: "keyword.operator.rest.js" }, 2: { name: "punctuation.definition.binding-pattern.array.js" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.binding-pattern.array.js" } }, patterns: [{ include: "#binding-element" }, { include: "#punctuation-comma" }] }, "array-binding-pattern-const": { begin: "(?:(\\.\\.\\.)\\s*)?(\\[)", beginCaptures: { 1: { name: "keyword.operator.rest.js" }, 2: { name: "punctuation.definition.binding-pattern.array.js" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.binding-pattern.array.js" } }, patterns: [{ include: "#binding-element-const" }, { include: "#punctuation-comma" }] }, "array-literal": { begin: "\\s*(\\[)", beginCaptures: { 1: { name: "meta.brace.square.js" } }, end: "\\]", endCaptures: { 0: { name: "meta.brace.square.js" } }, name: "meta.array.literal.js", patterns: [{ include: "#expression" }, { include: "#punctuation-comma" }] }, "arrow-function": { patterns: [{ captures: { 1: { name: "storage.modifier.async.js" }, 2: { name: "variable.parameter.js" } }, match: "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(\\basync)\\s+)?([_$[:alpha:]][_$[:alnum:]]*)\\s*(?==>)", name: "meta.arrow.js" }, { begin: `(?x) (?:
(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(\\basync)
)? ((?<![})!\\]])\\s*
(?=

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |
(
[<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]
) |
# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
)
)`, beginCaptures: { 1: { name: "storage.modifier.async.js" } }, end: "(?==>|\\{|(^\\s*(export|function|class|interface|let|var|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|const|import|enum|namespace|module|type|abstract|declare)\\s+))", name: "meta.arrow.js", patterns: [{ include: "#comment" }, { include: "#type-parameters" }, { include: "#function-parameters" }, { include: "#arrow-return-type" }, { include: "#possibly-arrow-return-type" }] }, { begin: "=>", beginCaptures: { 0: { name: "storage.type.function.arrow.js" } }, end: "((?<=\\}|\\S)(?<!=>)|((?!\\{)(?=\\S)))(?!\\/[\\/\\*])", name: "meta.arrow.js", patterns: [{ include: "#single-line-comment-consuming-line-ending" }, { include: "#decl-block" }, { include: "#expression" }] }] }, "arrow-return-type": { begin: "(?<=\\))\\s*(:)", beginCaptures: { 1: { name: "keyword.operator.type.annotation.js" } }, end: "(?==>|\\{|(^\\s*(export|function|class|interface|let|var|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|const|import|enum|namespace|module|type|abstract|declare)\\s+))", name: "meta.return.type.arrow.js", patterns: [{ include: "#arrow-return-type-body" }] }, "arrow-return-type-body": { patterns: [{ begin: "(?<=[:])(?=\\s*\\{)", end: "(?<=\\})", patterns: [{ include: "#type-object" }] }, { include: "#type-predicate-operator" }, { include: "#type" }] }, "async-modifier": { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(async)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "storage.modifier.async.js" }, "binding-element": { patterns: [{ include: "#comment" }, { include: "#string" }, { include: "#numeric-literal" }, { include: "#regex" }, { include: "#object-binding-pattern" }, { include: "#array-binding-pattern" }, { include: "#destructuring-variable-rest" }, { include: "#variable-initializer" }] }, "binding-element-const": { patterns: [{ include: "#comment" }, { include: "#string" }, { include: "#numeric-literal" }, { include: "#regex" }, { include: "#object-binding-pattern-const" }, { include: "#array-binding-pattern-const" }, { include: "#destructuring-variable-rest-const" }, { include: "#variable-initializer" }] }, "boolean-literal": { patterns: [{ match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))true(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "constant.language.boolean.true.js" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))false(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "constant.language.boolean.false.js" }] }, brackets: { patterns: [{ begin: "{", end: "}|(?=\\*/)", patterns: [{ include: "#brackets" }] }, { begin: "\\[", end: "\\]|(?=\\*/)", patterns: [{ include: "#brackets" }] }] }, cast: { patterns: [{ include: "#jsx" }] }, "class-declaration": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(?:(abstract)\\s+)?\\b(class)\\b(?=\\s+|/[/*])", beginCaptures: { 1: { name: "keyword.control.export.js" }, 2: { name: "storage.modifier.js" }, 3: { name: "storage.modifier.js" }, 4: { name: "storage.type.class.js" } }, end: "(?<=\\})", name: "meta.class.js", patterns: [{ include: "#class-declaration-or-expression-patterns" }] }, "class-declaration-or-expression-patterns": { patterns: [{ include: "#comment" }, { include: "#class-or-interface-heritage" }, { captures: { 0: { name: "entity.name.type.class.js" } }, match: "[_$[:alpha:]][_$[:alnum:]]*" }, { include: "#type-parameters" }, { include: "#class-or-interface-body" }] }, "class-expression": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(abstract)\\s+)?(class)\\b(?=\\s+|[<{]|\\/[\\/*])", beginCaptures: { 1: { name: "storage.modifier.js" }, 2: { name: "storage.type.class.js" } }, end: "(?<=\\})", name: "meta.class.js", patterns: [{ include: "#class-declaration-or-expression-patterns" }] }, "class-or-interface-body": { begin: "\\{", beginCaptures: { 0: { name: "punctuation.definition.block.js" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.block.js" } }, patterns: [{ include: "#comment" }, { include: "#decorator" }, { begin: "(?<=:)\\s*", end: "(?=\\s|[;),}\\]:\\-\\+]|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))", patterns: [{ include: "#expression" }] }, { include: "#method-declaration" }, { include: "#indexer-declaration" }, { include: "#field-declaration" }, { include: "#string" }, { include: "#type-annotation" }, { include: "#variable-initializer" }, { include: "#access-modifier" }, { include: "#property-accessor" }, { include: "#async-modifier" }, { include: "#after-operator-block-as-object-literal" }, { include: "#decl-block" }, { include: "#expression" }, { include: "#punctuation-comma" }, { include: "#punctuation-semicolon" }] }, "class-or-interface-heritage": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(extends|implements)\\b)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", beginCaptures: { 1: { name: "storage.modifier.js" } }, end: "(?=\\{)", patterns: [{ include: "#comment" }, { include: "#class-or-interface-heritage" }, { include: "#type-parameters" }, { include: "#expressionWithoutIdentifiers" }, { captures: { 1: { name: "entity.name.type.module.js" }, 2: { name: "punctuation.accessor.js" }, 3: { name: "punctuation.accessor.optional.js" } }, match: "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))(?=\\s*[_$[:alpha:]][_$[:alnum:]]*(\\s*\\??\\.\\s*[_$[:alpha:]][_$[:alnum:]]*)*\\s*)" }, { captures: { 1: { name: "entity.other.inherited-class.js" } }, match: "([_$[:alpha:]][_$[:alnum:]]*)" }, { include: "#expressionPunctuations" }] }, comment: { patterns: [{ begin: "/\\*\\*(?!/)", beginCaptures: { 0: { name: "punctuation.definition.comment.js" } }, end: "\\*/", endCaptures: { 0: { name: "punctuation.definition.comment.js" } }, name: "comment.block.documentation.js", patterns: [{ include: "#docblock" }] }, { begin: "(/\\*)(?:\\s*((@)internal)(?=\\s|(\\*/)))?", beginCaptures: { 1: { name: "punctuation.definition.comment.js" }, 2: { name: "storage.type.internaldeclaration.js" }, 3: { name: "punctuation.decorator.internaldeclaration.js" } }, end: "\\*/", endCaptures: { 0: { name: "punctuation.definition.comment.js" } }, name: "comment.block.js" }, { begin: "(^[ \\t]+)?((//)(?:\\s*((@)internal)(?=\\s|$))?)", beginCaptures: { 1: { name: "punctuation.whitespace.comment.leading.js" }, 2: { name: "comment.line.double-slash.js" }, 3: { name: "punctuation.definition.comment.js" }, 4: { name: "storage.type.internaldeclaration.js" }, 5: { name: "punctuation.decorator.internaldeclaration.js" } }, contentName: "comment.line.double-slash.js", end: "(?=$)" }] }, "control-statement": { patterns: [{ include: "#switch-statement" }, { include: "#for-loop" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(catch|finally|throw|try)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.control.trycatch.js" }, { captures: { 1: { name: "keyword.control.loop.js" }, 2: { name: "entity.name.label.js" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(break|continue|goto)\\s+([_$[:alpha:]][_$[:alnum:]]*)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(break|continue|do|goto|while)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.control.loop.js" }, { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(return)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", beginCaptures: { 0: { name: "keyword.control.flow.js" } }, end: "(?=[;}]|$|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))", patterns: [{ include: "#expression" }] }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(case|default|switch)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.control.switch.js" }, { include: "#if-statement" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(else|if)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.control.conditional.js" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(with)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.control.with.js" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(package)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.control.js" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(debugger)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.other.debugger.js" }] }, "decl-block": { begin: "\\{", beginCaptures: { 0: { name: "punctuation.definition.block.js" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.block.js" } }, name: "meta.block.js", patterns: [{ include: "#statements" }] }, declaration: { patterns: [{ include: "#decorator" }, { include: "#var-expr" }, { include: "#function-declaration" }, { include: "#class-declaration" }, { include: "#interface-declaration" }, { include: "#enum-declaration" }, { include: "#namespace-declaration" }, { include: "#type-alias-declaration" }, { include: "#import-equals-declaration" }, { include: "#import-declaration" }, { include: "#export-declaration" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(declare|export)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "storage.modifier.js" }] }, decorator: { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))\\@", beginCaptures: { 0: { name: "punctuation.decorator.js" } }, end: "(?=\\s)", name: "meta.decorator.js", patterns: [{ include: "#expression" }] }, "destructuring-const": { patterns: [{ begin: "(?<!=|:|^of|[^\\._$[:alnum:]]of|^in|[^\\._$[:alnum:]]in)\\s*(?=\\{)", end: "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))", name: "meta.object-binding-pattern-variable.js", patterns: [{ include: "#object-binding-pattern-const" }, { include: "#type-annotation" }, { include: "#comment" }] }, { begin: "(?<!=|:|^of|[^\\._$[:alnum:]]of|^in|[^\\._$[:alnum:]]in)\\s*(?=\\[)", end: "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))", name: "meta.array-binding-pattern-variable.js", patterns: [{ include: "#array-binding-pattern-const" }, { include: "#type-annotation" }, { include: "#comment" }] }] }, "destructuring-parameter": { patterns: [{ begin: "(?<!=|:)\\s*(?:(\\.\\.\\.)\\s*)?(\\{)", beginCaptures: { 1: { name: "keyword.operator.rest.js" }, 2: { name: "punctuation.definition.binding-pattern.object.js" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.binding-pattern.object.js" } }, name: "meta.parameter.object-binding-pattern.js", patterns: [{ include: "#parameter-object-binding-element" }] }, { begin: "(?<!=|:)\\s*(?:(\\.\\.\\.)\\s*)?(\\[)", beginCaptures: { 1: { name: "keyword.operator.rest.js" }, 2: { name: "punctuation.definition.binding-pattern.array.js" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.binding-pattern.array.js" } }, name: "meta.paramter.array-binding-pattern.js", patterns: [{ include: "#parameter-binding-element" }, { include: "#punctuation-comma" }] }] }, "destructuring-parameter-rest": { captures: { 1: { name: "keyword.operator.rest.js" }, 2: { name: "variable.parameter.js" } }, match: "(?:(\\.\\.\\.)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)" }, "destructuring-variable": { patterns: [{ begin: "(?<!=|:|^of|[^\\._$[:alnum:]]of|^in|[^\\._$[:alnum:]]in)\\s*(?=\\{)", end: "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))", name: "meta.object-binding-pattern-variable.js", patterns: [{ include: "#object-binding-pattern" }, { include: "#type-annotation" }, { include: "#comment" }] }, { begin: "(?<!=|:|^of|[^\\._$[:alnum:]]of|^in|[^\\._$[:alnum:]]in)\\s*(?=\\[)", end: "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))", name: "meta.array-binding-pattern-variable.js", patterns: [{ include: "#array-binding-pattern" }, { include: "#type-annotation" }, { include: "#comment" }] }] }, "destructuring-variable-rest": { captures: { 1: { name: "keyword.operator.rest.js" }, 2: { name: "meta.definition.variable.js variable.other.readwrite.js" } }, match: "(?:(\\.\\.\\.)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)" }, "destructuring-variable-rest-const": { captures: { 1: { name: "keyword.operator.rest.js" }, 2: { name: "meta.definition.variable.js variable.other.constant.js" } }, match: "(?:(\\.\\.\\.)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)" }, directives: { begin: "^(///)\\s*(?=<(reference|amd-dependency|amd-module)(\\s+(path|types|no-default-lib|lib|name|resolution-mode)\\s*=\\s*((\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)))+\\s*/>\\s*$)", beginCaptures: { 1: { name: "punctuation.definition.comment.js" } }, end: "(?=$)", name: "comment.line.triple-slash.directive.js", patterns: [{ begin: "(<)(reference|amd-dependency|amd-module)", beginCaptures: { 1: { name: "punctuation.definition.tag.directive.js" }, 2: { name: "entity.name.tag.directive.js" } }, end: "/>", endCaptures: { 0: { name: "punctuation.definition.tag.directive.js" } }, name: "meta.tag.js", patterns: [{ match: "path|types|no-default-lib|lib|name|resolution-mode", name: "entity.other.attribute-name.directive.js" }, { match: "=", name: "keyword.operator.assignment.js" }, { include: "#string" }] }] }, docblock: { patterns: [{ captures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" }, 3: { name: "constant.language.access-type.jsdoc" } }, match: `(?x)
((@)(?:access|api))
\\s+
(private|protected|public)
\\b` }, { captures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" }, 3: { name: "entity.name.type.instance.jsdoc" }, 4: { name: "punctuation.definition.bracket.angle.begin.jsdoc" }, 5: { name: "constant.other.email.link.underline.jsdoc" }, 6: { name: "punctuation.definition.bracket.angle.end.jsdoc" } }, match: `(?x)
((@)author)
\\s+
(
[^@\\s<>*/]
(?:[^@<>*/]|\\*[^/])*
)
(?:
\\s*
(<)
([^>\\s]+)
(>)
)?` }, { captures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" }, 3: { name: "entity.name.type.instance.jsdoc" }, 4: { name: "keyword.operator.control.jsdoc" }, 5: { name: "entity.name.type.instance.jsdoc" } }, match: `(?x)
((@)borrows) \\s+
((?:[^@\\s*/]|\\*[^/])+)
\\s+ (as) \\s+
((?:[^@\\s*/]|\\*[^/])+)` }, { begin: "((@)example)\\s+", beginCaptures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" } }, end: "(?=@|\\*/)", name: "meta.example.jsdoc", patterns: [{ match: "^\\s\\*\\s+" }, { begin: "\\G(<)caption(>)", beginCaptures: { 0: { name: "entity.name.tag.inline.jsdoc" }, 1: { name: "punctuation.definition.bracket.angle.begin.jsdoc" }, 2: { name: "punctuation.definition.bracket.angle.end.jsdoc" } }, contentName: "constant.other.description.jsdoc", end: "(</)caption(>)|(?=\\*/)", endCaptures: { 0: { name: "entity.name.tag.inline.jsdoc" }, 1: { name: "punctuation.definition.bracket.angle.begin.jsdoc" }, 2: { name: "punctuation.definition.bracket.angle.end.jsdoc" } } }, { captures: { 0: { name: "source.embedded.js" } }, match: "[^\\s@*](?:[^*]|\\*[^/])*" }] }, { captures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" }, 3: { name: "constant.language.symbol-type.jsdoc" } }, match: "(?x) ((@)kind) \\s+ (class|constant|event|external|file|function|member|mixin|module|namespace|typedef) \\b" }, { captures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" }, 3: { name: "variable.other.link.underline.jsdoc" }, 4: { name: "entity.name.type.instance.jsdoc" } }, match: `(?x)
((@)see)
\\s+
(?:

(
(?=https?://)
(?:[^\\s*]|\\*[^/])+
)
|

(
(?!

https?://
|

(?:\\[[^\\[\\]]*\\])?
{@(?:link|linkcode|linkplain|tutorial)\\b
)

(?:[^@\\s*/]|\\*[^/])+
)
)` }, { captures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" }, 3: { name: "variable.other.jsdoc" } }, match: `(?x)
((@)template)
\\s+
# One or more valid identifiers
(
[A-Za-z_$]
[\\w$.\\[\\]]*
(?:
\\s* , \\s*
[A-Za-z_$]
[\\w$.\\[\\]]*
)*
)` }, { begin: "(?x)((@)template)\\s+(?={)", beginCaptures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" } }, end: "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])", patterns: [{ include: "#jsdoctype" }, { match: "([A-Za-z_$][\\w$.\\[\\]]*)", name: "variable.other.jsdoc" }] }, { captures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" }, 3: { name: "variable.other.jsdoc" } }, match: `(?x)
(
(@)
(?:arg|argument|const|constant|member|namespace|param|var)
)
\\s+
(
[A-Za-z_$]
[\\w$.\\[\\]]*
)` }, { begin: "((@)typedef)\\s+(?={)", beginCaptures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" } }, end: "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])", patterns: [{ include: "#jsdoctype" }, { match: "(?:[^@\\s*/]|\\*[^/])+", name: "entity.name.type.instance.jsdoc" }] }, { begin: "((@)(?:arg|argument|const|constant|member|namespace|param|prop|property|var))\\s+(?={)", beginCaptures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" } }, end: "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])", patterns: [{ include: "#jsdoctype" }, { match: "([A-Za-z_$][\\w$.\\[\\]]*)", name: "variable.other.jsdoc" }, { captures: { 1: { name: "punctuation.definition.optional-value.begin.bracket.square.jsdoc" }, 2: { name: "keyword.operator.assignment.jsdoc" }, 3: { name: "source.embedded.js" }, 4: { name: "punctuation.definition.optional-value.end.bracket.square.jsdoc" }, 5: { name: "invalid.illegal.syntax.jsdoc" } }, match: `(?x)
(\\[)\\s*
[\\w$]+
(?:
(?:\\[\\])?
\\.
[\\w$]+
)*
(?:
\\s*
(=)
\\s*
(

(?>
"(?:(?:\\*(?!/))|(?:\\\\(?!"))|[^*\\\\])*?" |
'(?:(?:\\*(?!/))|(?:\\\\(?!'))|[^*\\\\])*?' |
\\[ (?:(?:\\*(?!/))|[^*])*? \\] |
(?:(?:\\*(?!/))|\\s(?!\\s*\\])|\\[.*?(?:\\]|(?=\\*/))|[^*\\s\\[\\]])*
)*
)
)?
\\s*(?:(\\])((?:[^*\\s]|\\*[^\\s/])+)?|(?=\\*/))`, name: "variable.other.jsdoc" }] }, { begin: `(?x)
(
(@)
(?:define|enum|exception|export|extends|lends|implements|modifies
|namespace|private|protected|returns?|satisfies|suppress|this|throws|type
|yields?)
)
\\s+(?={)`, beginCaptures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" } }, end: "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])", patterns: [{ include: "#jsdoctype" }] }, { captures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" }, 3: { name: "entity.name.type.instance.jsdoc" } }, match: `(?x)
(
(@)
(?:alias|augments|callback|constructs|emits|event|fires|exports?
|extends|external|function|func|host|lends|listens|interface|memberof!?
|method|module|mixes|mixin|name|requires|see|this|typedef|uses)
)
\\s+
(
(?:
[^{}@\\s*] | \\*[^/]
)+
)` }, { begin: `((@)(?:default(?:value)?|license|version))\\s+(([''"]))`, beginCaptures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" }, 3: { name: "variable.other.jsdoc" }, 4: { name: "punctuation.definition.string.begin.jsdoc" } }, contentName: "variable.other.jsdoc", end: "(\\3)|(?=$|\\*/)", endCaptures: { 0: { name: "variable.other.jsdoc" }, 1: { name: "punctuation.definition.string.end.jsdoc" } } }, { captures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" }, 3: { name: "variable.other.jsdoc" } }, match: "((@)(?:default(?:value)?|license|tutorial|variation|version))\\s+([^\\s*]+)" }, { captures: { 1: { name: "punctuation.definition.block.tag.jsdoc" } }, match: "(?x) (@) (?:abstract|access|alias|api|arg|argument|async|attribute|augments|author|beta|borrows|bubbles |callback|chainable|class|classdesc|code|config|const|constant|constructor|constructs|copyright |default|defaultvalue|define|deprecated|desc|description|dict|emits|enum|event|example|exception |exports?|extends|extension(?:_?for)?|external|externs|file|fileoverview|final|fires|for|func |function|generator|global|hideconstructor|host|ignore|implements|implicitCast|inherit[Dd]oc |inner|instance|interface|internal|kind|lends|license|listens|main|member|memberof!?|method |mixes|mixins?|modifies|module|name|namespace|noalias|nocollapse|nocompile|nosideeffects |override|overview|package|param|polymer(?:Behavior)?|preserve|private|prop|property|protected |public|read[Oo]nly|record|require[ds]|returns?|see|since|static|struct|submodule|summary |suppress|template|this|throws|todo|tutorial|type|typedef|unrestricted|uses|var|variation |version|virtual|writeOnce|yields?) \\b", name: "storage.type.class.jsdoc" }, { include: "#inline-tags" }, { captures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" } }, match: "((@)(?:[_$[:alpha:]][_$[:alnum:]]*))(?=\\s+)" }] }, "enum-declaration": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?(?:\\b(const)\\s+)?\\b(enum)\\s+([_$[:alpha:]][_$[:alnum:]]*)", beginCaptures: { 1: { name: "keyword.control.export.js" }, 2: { name: "storage.modifier.js" }, 3: { name: "storage.modifier.js" }, 4: { name: "storage.type.enum.js" }, 5: { name: "entity.name.type.enum.js" } }, end: "(?<=\\})", name: "meta.enum.declaration.js", patterns: [{ include: "#comment" }, { begin: "\\{", beginCaptures: { 0: { name: "punctuation.definition.block.js" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.block.js" } }, patterns: [{ include: "#comment" }, { begin: "([_$[:alpha:]][_$[:alnum:]]*)", beginCaptures: { 0: { name: "variable.other.enummember.js" } }, end: "(?=,|\\}|$)", patterns: [{ include: "#comment" }, { include: "#variable-initializer" }] }, { begin: "(?=((\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\])))", end: "(?=,|\\}|$)", patterns: [{ include: "#string" }, { include: "#array-literal" }, { include: "#comment" }, { include: "#variable-initializer" }] }, { include: "#punctuation-comma" }] }] }, "export-declaration": { patterns: [{ captures: { 1: { name: "keyword.control.export.js" }, 2: { name: "keyword.control.as.js" }, 3: { name: "storage.type.namespace.js" }, 4: { name: "entity.name.type.module.js" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(export)\\s+(as)\\s+(namespace)\\s+([_$[:alpha:]][_$[:alnum:]]*)" }, { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(export)(?:\\s+(type))?(?:(?:\\s*(=))|(?:\\s+(default)(?=\\s+)))", beginCaptures: { 1: { name: "keyword.control.export.js" }, 2: { name: "keyword.control.type.js" }, 3: { name: "keyword.operator.assignment.js" }, 4: { name: "keyword.control.default.js" } }, end: "(?=$|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))", name: "meta.export.default.js", patterns: [{ include: "#interface-declaration" }, { include: "#expression" }] }, { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(export)(?:\\s+(type))?\\b(?!(\\$)|(\\s*:))((?=\\s*[\\{*])|((?=\\s*[_$[:alpha:]][_$[:alnum:]]*(\\s|,))(?!\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b)))", beginCaptures: { 1: { name: "keyword.control.export.js" }, 2: { name: "keyword.control.type.js" } }, end: "(?=$|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))", name: "meta.export.js", patterns: [{ include: "#import-export-declaration" }] }] }, expression: { patterns: [{ include: "#expressionWithoutIdentifiers" }, { include: "#identifiers" }, { include: "#expressionPunctuations" }] }, "expression-inside-possibly-arrow-parens": { patterns: [{ include: "#expressionWithoutIdentifiers" }, { include: "#comment" }, { include: "#string" }, { include: "#decorator" }, { include: "#destructuring-parameter" }, { captures: { 1: { name: "storage.modifier.js" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(override|public|protected|private|readonly)\\s+(?=(override|public|protected|private|readonly)\\s+)" }, { captures: { 1: { name: "storage.modifier.js" }, 2: { name: "keyword.operator.rest.js" }, 3: { name: "entity.name.function.js variable.language.this.js" }, 4: { name: "entity.name.function.js" }, 5: { name: "keyword.operator.optional.js" } }, match: `(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(override|public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*(\\??)(?=\\s*
# function assignment |
(=\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |
(
[<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]
) |
# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
)) |
# typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>
(:\\s*(
(<) |
([(]\\s*(
([)]) |
(\\.\\.\\.) |
([_$[:alnum:]]+\\s*(
([:,?=])|
([)]\\s*=>)
))
))
)) |
(:\\s*(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Function(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |
(:\\s*((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))) |
(:\\s*(=>|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(<[^<>]*>)|[^<>(),=])+=\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |
(
[<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]
) |
# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
)))` }, { captures: { 1: { name: "storage.modifier.js" }, 2: { name: "keyword.operator.rest.js" }, 3: { name: "variable.parameter.js variable.language.this.js" }, 4: { name: "variable.parameter.js" }, 5: { name: "keyword.operator.optional.js" } }, match: "(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(override|public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*(\\??)(?=\\s*[:,]|$)" }, { include: "#type-annotation" }, { include: "#variable-initializer" }, { match: ",", name: "punctuation.separator.parameter.js" }, { include: "#identifiers" }, { include: "#expressionPunctuations" }] }, "expression-operators": { patterns: [{ match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(await)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.control.flow.js" }, { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(yield)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?=\\s*\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*\\*)", beginCaptures: { 1: { name: "keyword.control.flow.js" } }, end: "\\*", endCaptures: { 0: { name: "keyword.generator.asterisk.js" } }, patterns: [{ include: "#comment" }] }, { captures: { 1: { name: "keyword.control.flow.js" }, 2: { name: "keyword.generator.asterisk.js" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(yield)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?:\\s*(\\*))?" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))delete(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.operator.expression.delete.js" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))in(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?!\\()", name: "keyword.operator.expression.in.js" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))of(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?!\\()", name: "keyword.operator.expression.of.js" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))instanceof(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.operator.expression.instanceof.js" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))new(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.operator.new.js" }, { include: "#typeof-operator" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))void(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.operator.expression.void.js" }, { captures: { 1: { name: "keyword.control.as.js" }, 2: { name: "storage.modifier.js" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(as)\\s+(const)(?=\\s*($|[;,:})\\]]))" }, { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(as)|(satisfies))\\s+", beginCaptures: { 1: { name: "keyword.control.as.js" }, 2: { name: "keyword.control.satisfies.js" } }, end: "(?=^|[;),}\\]:?\\-\\+\\>]|\\|\\||\\&\\&|\\!\\=\\=|$|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(as|satisfies)\\s+)|(\\s+\\<))", patterns: [{ include: "#type" }] }, { match: "\\.\\.\\.", name: "keyword.operator.spread.js" }, { match: "\\*=|(?<!\\()/=|%=|\\+=|\\-=", name: "keyword.operator.assignment.compound.js" }, { match: "\\&=|\\^=|<<=|>>=|>>>=|\\|=", name: "keyword.operator.assignment.compound.bitwise.js" }, { match: "<<|>>>|>>", name: "keyword.operator.bitwise.shift.js" }, { match: "===|!==|==|!=", name: "keyword.operator.comparison.js" }, { match: "<=|>=|<>|<|>", name: "keyword.operator.relational.js" }, { captures: { 1: { name: "keyword.operator.logical.js" }, 2: { name: "keyword.operator.assignment.compound.js" }, 3: { name: "keyword.operator.arithmetic.js" } }, match: "(?<=[_$[:alnum:]])(\\!)\\s*(?:(/=)|(?:(/)(?![/*])))" }, { match: "\\!|&&|\\|\\||\\?\\?", name: "keyword.operator.logical.js" }, { match: "\\&|~|\\^|\\|", name: "keyword.operator.bitwise.js" }, { match: "\\=", name: "keyword.operator.assignment.js" }, { match: "--", name: "keyword.operator.decrement.js" }, { match: "\\+\\+", name: "keyword.operator.increment.js" }, { match: "%|\\*|/|-|\\+", name: "keyword.operator.arithmetic.js" }, { begin: "(?<=[_$[:alnum:])\\]])\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)+(?:(/=)|(?:(/)(?![/*]))))", end: "(?:(/=)|(?:(/)(?!\\*([^\\*]|(\\*[^\\/]))*\\*\\/)))", endCaptures: { 1: { name: "keyword.operator.assignment.compound.js" }, 2: { name: "keyword.operator.arithmetic.js" } }, patterns: [{ include: "#comment" }] }, { captures: { 1: { name: "keyword.operator.assignment.compound.js" }, 2: { name: "keyword.operator.arithmetic.js" } }, match: "(?<=[_$[:alnum:])\\]])\\s*(?:(/=)|(?:(/)(?![/*])))" }] }, expressionPunctuations: { patterns: [{ include: "#punctuation-comma" }, { include: "#punctuation-accessor" }] }, expressionWithoutIdentifiers: { patterns: [{ include: "#jsx" }, { include: "#string" }, { include: "#regex" }, { include: "#comment" }, { include: "#function-expression" }, { include: "#class-expression" }, { include: "#arrow-function" }, { include: "#paren-expression-possibly-arrow" }, { include: "#cast" }, { include: "#ternary-expression" }, { include: "#new-expr" }, { include: "#instanceof-expr" }, { include: "#object-literal" }, { include: "#expression-operators" }, { include: "#function-call" }, { include: "#literal" }, { include: "#support-objects" }, { include: "#paren-expression" }] }, "field-declaration": { begin: `(?x)(?<!\\()(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(readonly)\\s+)?(?=\\s*((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$))|(\\#?[_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(?:(?:(\\?)|(\\!))\\s*)?(=|:|;|,|\\}|$))`, beginCaptures: { 1: { name: "storage.modifier.js" } }, end: `(?x)(?=\\}|;|,|$|(^(?!\\s*((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$))|(\\#?[_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(?:(?:(\\?)|(\\!))\\s*)?(=|:|;|,|$))))|(?<=\\})`, name: "meta.field.declaration.js", patterns: [{ include: "#variable-initializer" }, { include: "#type-annotation" }, { include: "#string" }, { include: "#array-literal" }, { include: "#numeric-literal" }, { include: "#comment" }, { captures: { 1: { name: "meta.definition.property.js entity.name.function.js" }, 2: { name: "keyword.operator.optional.js" }, 3: { name: "keyword.operator.definiteassignment.js" } }, match: `(?x)(\\#?[_$[:alpha:]][_$[:alnum:]]*)(?:(\\?)|(\\!))?(?=\\s*\\s*
# function assignment |
(=\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |
(
[<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]
) |
# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
)) |
# typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>
(:\\s*(
(<) |
([(]\\s*(
([)]) |
(\\.\\.\\.) |
([_$[:alnum:]]+\\s*(
([:,?=])|
([)]\\s*=>)
))
))
)) |
(:\\s*(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Function(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |
(:\\s*((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))) |
(:\\s*(=>|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(<[^<>]*>)|[^<>(),=])+=\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |
(
[<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]
) |
# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
)))` }, { match: "\\#?[_$[:alpha:]][_$[:alnum:]]*", name: "meta.definition.property.js variable.object.property.js" }, { match: "\\?", name: "keyword.operator.optional.js" }, { match: "\\!", name: "keyword.operator.definiteassignment.js" }] }, "for-loop": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))for(?=((\\s+|(\\s*\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*))await)?\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)?(\\())", beginCaptures: { 0: { name: "keyword.control.loop.js" } }, end: "(?<=\\))", patterns: [{ include: "#comment" }, { match: "await", name: "keyword.control.loop.js" }, { begin: "\\(", beginCaptures: { 0: { name: "meta.brace.round.js" } }, end: "\\)", endCaptures: { 0: { name: "meta.brace.round.js" } }, patterns: [{ include: "#var-expr" }, { include: "#expression" }, { include: "#punctuation-semicolon" }] }] }, "function-body": { patterns: [{ include: "#comment" }, { include: "#type-parameters" }, { include: "#function-parameters" }, { include: "#return-type" }, { include: "#type-function-return-type" }, { include: "#decl-block" }, { match: "\\*", name: "keyword.generator.asterisk.js" }] }, "function-call": { patterns: [{ begin: "(?=(((([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\\)]))\\s*(?:(\\?\\.\\s*)|(\\!))?((<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?\\())", end: "(?<=\\))(?!(((([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\\)]))\\s*(?:(\\?\\.\\s*)|(\\!))?((<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?\\())", patterns: [{ begin: "(?=(([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))", end: "(?=\\s*(?:(\\?\\.\\s*)|(\\!))?((<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?\\())", name: "meta.function-call.js", patterns: [{ include: "#function-call-target" }] }, { include: "#comment" }, { include: "#function-call-optionals" }, { include: "#type-arguments" }, { include: "#paren-expression" }] }, { begin: "(?=(((([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\\)]))(<\\s*[\\{\\[\\(]\\s*$))", end: "(?<=\\>)(?!(((([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\\)]))(<\\s*[\\{\\[\\(]\\s*$))", patterns: [{ begin: "(?=(([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))", end: "(?=(<\\s*[\\{\\[\\(]\\s*$))", name: "meta.function-call.js", patterns: [{ include: "#function-call-target" }] }, { include: "#comment" }, { include: "#function-call-optionals" }, { include: "#type-arguments" }] }] }, "function-call-optionals": { patterns: [{ match: "\\?\\.", name: "meta.function-call.js punctuation.accessor.optional.js" }, { match: "\\!", name: "meta.function-call.js keyword.operator.definiteassignment.js" }] }, "function-call-target": { patterns: [{ include: "#support-function-call-identifiers" }, { match: "(\\#?[_$[:alpha:]][_$[:alnum:]]*)", name: "entity.name.function.js" }] }, "function-declaration": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?(?:(async)\\s+)?(function\\b)(?:\\s*(\\*))?(?:(?:\\s+|(?<=\\*))([_$[:alpha:]][_$[:alnum:]]*))?\\s*", beginCaptures: { 1: { name: "keyword.control.export.js" }, 2: { name: "storage.modifier.js" }, 3: { name: "storage.modifier.async.js" }, 4: { name: "storage.type.function.js" }, 5: { name: "keyword.generator.asterisk.js" }, 6: { name: "meta.definition.function.js entity.name.function.js" } }, end: "(?=;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))|(?<=\\})", name: "meta.function.js", patterns: [{ include: "#function-name" }, { include: "#function-body" }] }, "function-expression": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(async)\\s+)?(function\\b)(?:\\s*(\\*))?(?:(?:\\s+|(?<=\\*))([_$[:alpha:]][_$[:alnum:]]*))?\\s*", beginCaptures: { 1: { name: "storage.modifier.async.js" }, 2: { name: "storage.type.function.js" }, 3: { name: "keyword.generator.asterisk.js" }, 4: { name: "meta.definition.function.js entity.name.function.js" } }, end: "(?=;)|(?<=\\})", name: "meta.function.expression.js", patterns: [{ include: "#function-name" }, { include: "#single-line-comment-consuming-line-ending" }, { include: "#function-body" }] }, "function-name": { match: "[_$[:alpha:]][_$[:alnum:]]*", name: "meta.definition.function.js entity.name.function.js" }, "function-parameters": { begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.parameters.begin.js" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.parameters.end.js" } }, name: "meta.parameters.js", patterns: [{ include: "#function-parameters-body" }] }, "function-parameters-body": { patterns: [{ include: "#comment" }, { include: "#string" }, { include: "#decorator" }, { include: "#destructuring-parameter" }, { include: "#parameter-name" }, { include: "#parameter-type-annotation" }, { include: "#variable-initializer" }, { match: ",", name: "punctuation.separator.parameter.js" }] }, identifiers: { patterns: [{ include: "#object-identifiers" }, { captures: { 1: { name: "punctuation.accessor.js" }, 2: { name: "punctuation.accessor.optional.js" }, 3: { name: "entity.name.function.js" } }, match: `(?x)(?:(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*)?([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*=\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |
(
[<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]
) |
# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
))` }, { captures: { 1: { name: "punctuation.accessor.js" }, 2: { name: "punctuation.accessor.optional.js" }, 3: { name: "variable.other.constant.property.js" } }, match: "(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(\\#?[[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])" }, { captures: { 1: { name: "punctuation.accessor.js" }, 2: { name: "punctuation.accessor.optional.js" }, 3: { name: "variable.other.property.js" } }, match: "(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*)" }, { match: "([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])", name: "variable.other.constant.js" }, { match: "[_$[:alpha:]][_$[:alnum:]]*", name: "variable.other.readwrite.js" }] }, "if-statement": { patterns: [{ begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?=\\bif\\s*(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))\\s*(?!\\{))", end: "(?=;|$|\\})", patterns: [{ include: "#comment" }, { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(if)\\s*(\\()", beginCaptures: { 1: { name: "keyword.control.conditional.js" }, 2: { name: "meta.brace.round.js" } }, end: "\\)", endCaptures: { 0: { name: "meta.brace.round.js" } }, patterns: [{ include: "#expression" }] }, { begin: "(?<=\\))\\s*\\/(?![\\/*])(?=(?:[^\\/\\\\\\[]|\\\\.|\\[([^\\]\\\\]|\\\\.)*\\])+\\/([dgimsuy]+|(?![\\/\\*])|(?=\\/\\*))(?!\\s*[a-zA-Z0-9_$]))", beginCaptures: { 0: { name: "punctuation.definition.string.begin.js" } }, end: "(/)([dgimsuy]*)", endCaptures: { 1: { name: "punctuation.definition.string.end.js" }, 2: { name: "keyword.other.js" } }, name: "string.regexp.js", patterns: [{ include: "#regexp" }] }, { include: "#statements" }] }] }, "import-declaration": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(import)(?:\\s+(type)(?!\\s+from))?(?!\\s*[:\\(])(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", beginCaptures: { 1: { name: "keyword.control.export.js" }, 2: { name: "storage.modifier.js" }, 3: { name: "keyword.control.import.js" }, 4: { name: "keyword.control.type.js" } }, end: "(?<!^import|[^\\._$[:alnum:]]import)(?=;|$|^)", name: "meta.import.js", patterns: [{ include: "#single-line-comment-consuming-line-ending" }, { include: "#comment" }, { include: "#string" }, { begin: `(?<=^import|[^\\._$[:alnum:]]import)(?!\\s*["'])`, end: "\\bfrom\\b", endCaptures: { 0: { name: "keyword.control.from.js" } }, patterns: [{ include: "#import-export-declaration" }] }, { include: "#import-export-declaration" }] }, "import-equals-declaration": { patterns: [{ begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(import)(?:\\s+(type))?\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*(=)\\s*(require)\\s*(\\()", beginCaptures: { 1: { name: "keyword.control.export.js" }, 2: { name: "storage.modifier.js" }, 3: { name: "keyword.control.import.js" }, 4: { name: "keyword.control.type.js" }, 5: { name: "variable.other.readwrite.alias.js" }, 6: { name: "keyword.operator.assignment.js" }, 7: { name: "keyword.control.require.js" }, 8: { name: "meta.brace.round.js" } }, end: "\\)", endCaptures: { 0: { name: "meta.brace.round.js" } }, name: "meta.import-equals.external.js", patterns: [{ include: "#comment" }, { include: "#string" }] }, { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(import)(?:\\s+(type))?\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*(=)\\s*(?!require\\b)", beginCaptures: { 1: { name: "keyword.control.export.js" }, 2: { name: "storage.modifier.js" }, 3: { name: "keyword.control.import.js" }, 4: { name: "keyword.control.type.js" }, 5: { name: "variable.other.readwrite.alias.js" }, 6: { name: "keyword.operator.assignment.js" } }, end: "(?=;|$|^)", name: "meta.import-equals.internal.js", patterns: [{ include: "#single-line-comment-consuming-line-ending" }, { include: "#comment" }, { captures: { 1: { name: "entity.name.type.module.js" }, 2: { name: "punctuation.accessor.js" }, 3: { name: "punctuation.accessor.optional.js" } }, match: "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))" }, { match: "([_$[:alpha:]][_$[:alnum:]]*)", name: "variable.other.readwrite.js" }] }] }, "import-export-assert-clause": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(with)|(assert))\\s*(\\{)", beginCaptures: { 1: { name: "keyword.control.with.js" }, 2: { name: "keyword.control.assert.js" }, 3: { name: "punctuation.definition.block.js" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.block.js" } }, patterns: [{ include: "#comment" }, { include: "#string" }, { match: "(?:[_$[:alpha:]][_$[:alnum:]]*)\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*:)", name: "meta.object-literal.key.js" }, { match: ":", name: "punctuation.separator.key-value.js" }] }, "import-export-block": { begin: "\\{", beginCaptures: { 0: { name: "punctuation.definition.block.js" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.block.js" } }, name: "meta.block.js", patterns: [{ include: "#import-export-clause" }] }, "import-export-clause": { patterns: [{ include: "#comment" }, { captures: { 1: { name: "keyword.control.type.js" }, 2: { name: "keyword.control.default.js" }, 3: { name: "constant.language.import-export-all.js" }, 4: { name: "variable.other.readwrite.js" }, 5: { name: "keyword.control.as.js" }, 6: { name: "keyword.control.default.js" }, 7: { name: "variable.other.readwrite.alias.js" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(?:(\\btype)\\s+)?(?:(\\bdefault)|(\\*)|(\\b[_$[:alpha:]][_$[:alnum:]]*)))\\s+(as)\\s+(?:(default(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))|([_$[:alpha:]][_$[:alnum:]]*))" }, { include: "#punctuation-comma" }, { match: "\\*", name: "constant.language.import-export-all.js" }, { match: "\\b(default)\\b", name: "keyword.control.default.js" }, { captures: { 1: { name: "keyword.control.type.js" }, 2: { name: "variable.other.readwrite.alias.js" } }, match: "(?:(\\btype)\\s+)?([_$[:alpha:]][_$[:alnum:]]*)" }] }, "import-export-declaration": { patterns: [{ include: "#comment" }, { include: "#string" }, { include: "#import-export-block" }, { match: "\\bfrom\\b", name: "keyword.control.from.js" }, { include: "#import-export-assert-clause" }, { include: "#import-export-clause" }] }, "indexer-declaration": { begin: "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(readonly)\\s*)?\\s*(\\[)\\s*([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=:)", beginCaptures: { 1: { name: "storage.modifier.js" }, 2: { name: "meta.brace.square.js" }, 3: { name: "variable.parameter.js" } }, end: "(\\])\\s*(\\?\\s*)?|$", endCaptures: { 1: { name: "meta.brace.square.js" }, 2: { name: "keyword.operator.optional.js" } }, name: "meta.indexer.declaration.js", patterns: [{ include: "#type-annotation" }] }, "indexer-mapped-type-declaration": { begin: "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))([+-])?(readonly)\\s*)?\\s*(\\[)\\s*([_$[:alpha:]][_$[:alnum:]]*)\\s+(in)\\s+", beginCaptures: { 1: { name: "keyword.operator.type.modifier.js" }, 2: { name: "storage.modifier.js" }, 3: { name: "meta.brace.square.js" }, 4: { name: "entity.name.type.js" }, 5: { name: "keyword.operator.expression.in.js" } }, end: "(\\])([+-])?\\s*(\\?\\s*)?|$", endCaptures: { 1: { name: "meta.brace.square.js" }, 2: { name: "keyword.operator.type.modifier.js" }, 3: { name: "keyword.operator.optional.js" } }, name: "meta.indexer.mappedtype.declaration.js", patterns: [{ captures: { 1: { name: "keyword.control.as.js" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(as)\\s+" }, { include: "#type" }] }, "inline-tags": { patterns: [{ captures: { 1: { name: "punctuation.definition.bracket.square.begin.jsdoc" }, 2: { name: "punctuation.definition.bracket.square.end.jsdoc" } }, match: "(\\[)[^\\]]+(\\])(?={@(?:link|linkcode|linkplain|tutorial))", name: "constant.other.description.jsdoc" }, { begin: "({)((@)(?:link(?:code|plain)?|tutorial))\\s*", beginCaptures: { 1: { name: "punctuation.definition.bracket.curly.begin.jsdoc" }, 2: { name: "storage.type.class.jsdoc" }, 3: { name: "punctuation.definition.inline.tag.jsdoc" } }, end: "}|(?=\\*/)", endCaptures: { 0: { name: "punctuation.definition.bracket.curly.end.jsdoc" } }, name: "entity.name.type.instance.jsdoc", patterns: [{ captures: { 1: { name: "variable.other.link.underline.jsdoc" }, 2: { name: "punctuation.separator.pipe.jsdoc" } }, match: "\\G((?=https?://)(?:[^|}\\s*]|\\*[/])+)(\\|)?" }, { captures: { 1: { name: "variable.other.description.jsdoc" }, 2: { name: "punctuation.separator.pipe.jsdoc" } }, match: "\\G((?:[^{}@\\s|*]|\\*[^/])+)(\\|)?" }] }] }, "instanceof-expr": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(instanceof)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", beginCaptures: { 1: { name: "keyword.operator.expression.instanceof.js" } }, end: "(?<=\\))|(?=[;),}\\]:?\\-\\+\\>]|\\|\\||\\&\\&|\\!\\=\\=|$|(===|!==|==|!=)|(([\\&\\~\\^\\|]\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s+instanceof(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))function((\\s+[_$[:alpha:]][_$[:alnum:]]*)|(\\s*[\\(]))))", patterns: [{ include: "#type" }] }, "interface-declaration": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(?:(abstract)\\s+)?\\b(interface)\\b(?=\\s+|/[/*])", beginCaptures: { 1: { name: "keyword.control.export.js" }, 2: { name: "storage.modifier.js" }, 3: { name: "storage.modifier.js" }, 4: { name: "storage.type.interface.js" } }, end: "(?<=\\})", name: "meta.interface.js", patterns: [{ include: "#comment" }, { include: "#class-or-interface-heritage" }, { captures: { 0: { name: "entity.name.type.interface.js" } }, match: "[_$[:alpha:]][_$[:alnum:]]*" }, { include: "#type-parameters" }, { include: "#class-or-interface-body" }] }, jsdoctype: { patterns: [{ begin: "\\G({)", beginCaptures: { 0: { name: "entity.name.type.instance.jsdoc" }, 1: { name: "punctuation.definition.bracket.curly.begin.jsdoc" } }, contentName: "entity.name.type.instance.jsdoc", end: "((}))\\s*|(?=\\*/)", endCaptures: { 1: { name: "entity.name.type.instance.jsdoc" }, 2: { name: "punctuation.definition.bracket.curly.end.jsdoc" } }, patterns: [{ include: "#brackets" }] }] }, jsx: { patterns: [{ include: "#jsx-tag-without-attributes-in-expression" }, { include: "#jsx-tag-in-expression" }] }, "jsx-children": { patterns: [{ include: "#jsx-tag-without-attributes" }, { include: "#jsx-tag" }, { include: "#jsx-evaluated-code" }, { include: "#jsx-entities" }] }, "jsx-entities": { patterns: [{ captures: { 1: { name: "punctuation.definition.entity.js" }, 3: { name: "punctuation.definition.entity.js" } }, match: "(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)", name: "constant.character.entity.js" }] }, "jsx-evaluated-code": { begin: "\\{", beginCaptures: { 0: { name: "punctuation.section.embedded.begin.js" } }, contentName: "meta.embedded.expression.js", end: "\\}", endCaptures: { 0: { name: "punctuation.section.embedded.end.js" } }, patterns: [{ include: "#expression" }] }, "jsx-string-double-quoted": { begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.js" } }, end: '"', endCaptures: { 0: { name: "punctuation.definition.string.end.js" } }, name: "string.quoted.double.js", patterns: [{ include: "#jsx-entities" }] }, "jsx-string-single-quoted": { begin: "'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.js" } }, end: "'", endCaptures: { 0: { name: "punctuation.definition.string.end.js" } }, name: "string.quoted.single.js", patterns: [{ include: "#jsx-entities" }] }, "jsx-tag": { begin: "(?=(<)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))(?=((<\\s*)|(\\s+))(?!\\?)|\\/?>))", end: "(/>)|(?:(</)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))?\\s*(>))", endCaptures: { 1: { name: "punctuation.definition.tag.end.js" }, 2: { name: "punctuation.definition.tag.begin.js" }, 3: { name: "entity.name.tag.namespace.js" }, 4: { name: "punctuation.separator.namespace.js" }, 5: { name: "entity.name.tag.js" }, 6: { name: "support.class.component.js" }, 7: { name: "punctuation.definition.tag.end.js" } }, name: "meta.tag.js", patterns: [{ begin: "(<)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))(?=((<\\s*)|(\\s+))(?!\\?)|\\/?>)", beginCaptures: { 1: { name: "punctuation.definition.tag.begin.js" }, 2: { name: "entity.name.tag.namespace.js" }, 3: { name: "punctuation.separator.namespace.js" }, 4: { name: "entity.name.tag.js" }, 5: { name: "support.class.component.js" } }, end: "(?=[/]?>)", patterns: [{ include: "#comment" }, { include: "#type-arguments" }, { include: "#jsx-tag-attributes" }] }, { begin: "(>)", beginCaptures: { 1: { name: "punctuation.definition.tag.end.js" } }, contentName: "meta.jsx.children.js", end: "(?=</)", patterns: [{ include: "#jsx-children" }] }] }, "jsx-tag-attribute-assignment": { match: `=(?=\\s*(?:'|"|{|/\\*|//|\\n))`, name: "keyword.operator.assignment.js" }, "jsx-tag-attribute-name": { captures: { 1: { name: "entity.other.attribute-name.namespace.js" }, 2: { name: "punctuation.separator.namespace.js" }, 3: { name: "entity.other.attribute-name.js" } }, match: `(?x)
\\s*
(?:([_$[:alpha:]][-_$[:alnum:].]*)(:))?
([_$[:alpha:]][-_$[:alnum:]]*)
(?=\\s|=|/?>|/\\*|//)` }, "jsx-tag-attributes": { begin: "\\s+", end: "(?=[/]?>)", name: "meta.tag.attributes.js", patterns: [{ include: "#comment" }, { include: "#jsx-tag-attribute-name" }, { include: "#jsx-tag-attribute-assignment" }, { include: "#jsx-string-double-quoted" }, { include: "#jsx-string-single-quoted" }, { include: "#jsx-evaluated-code" }, { include: "#jsx-tag-attributes-illegal" }] }, "jsx-tag-attributes-illegal": { match: "\\S+", name: "invalid.illegal.attribute.js" }, "jsx-tag-in-expression": { begin: `(?x)
(?<!\\+\\+|--)(?<=[({\\[,?=>:*]|&&|\\|\\||\\?|\\*\\/|^await|[^\\._$[:alnum:]]await|^return|[^\\._$[:alnum:]]return|^default|[^\\._$[:alnum:]]default|^yield|[^\\._$[:alnum:]]yield|^)\\s*
(?!<\\s*[_$[:alpha:]][_$[:alnum:]]*((\\s+extends\\s+[^=>])|,))
(?=(<)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))(?=((<\\s*)|(\\s+))(?!\\?)|\\/?>))`, end: "(?!(<)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))(?=((<\\s*)|(\\s+))(?!\\?)|\\/?>))", patterns: [{ include: "#jsx-tag" }] }, "jsx-tag-without-attributes": { begin: "(<)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))?\\s*(>)", beginCaptures: { 1: { name: "punctuation.definition.tag.begin.js" }, 2: { name: "entity.name.tag.namespace.js" }, 3: { name: "punctuation.separator.namespace.js" }, 4: { name: "entity.name.tag.js" }, 5: { name: "support.class.component.js" }, 6: { name: "punctuation.definition.tag.end.js" } }, contentName: "meta.jsx.children.js", end: "(</)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))?\\s*(>)", endCaptures: { 1: { name: "punctuation.definition.tag.begin.js" }, 2: { name: "entity.name.tag.namespace.js" }, 3: { name: "punctuation.separator.namespace.js" }, 4: { name: "entity.name.tag.js" }, 5: { name: "support.class.component.js" }, 6: { name: "punctuation.definition.tag.end.js" } }, name: "meta.tag.without-attributes.js", patterns: [{ include: "#jsx-children" }] }, "jsx-tag-without-attributes-in-expression": { begin: "(?<!\\+\\+|--)(?<=[({\\[,?=>:*]|&&|\\|\\||\\?|\\*\\/|^await|[^\\._$[:alnum:]]await|^return|[^\\._$[:alnum:]]return|^default|[^\\._$[:alnum:]]default|^yield|[^\\._$[:alnum:]]yield|^)\\s*(?=(<)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))?\\s*(>))", end: "(?!(<)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))?\\s*(>))", patterns: [{ include: "#jsx-tag-without-attributes" }] }, label: { patterns: [{ begin: "([_$[:alpha:]][_$[:alnum:]]*)\\s*(:)(?=\\s*\\{)", beginCaptures: { 1: { name: "entity.name.label.js" }, 2: { name: "punctuation.separator.label.js" } }, end: "(?<=\\})", patterns: [{ include: "#decl-block" }] }, { captures: { 1: { name: "entity.name.label.js" }, 2: { name: "punctuation.separator.label.js" } }, match: "([_$[:alpha:]][_$[:alnum:]]*)\\s*(:)" }] }, literal: { patterns: [{ include: "#numeric-literal" }, { include: "#boolean-literal" }, { include: "#null-literal" }, { include: "#undefined-literal" }, { include: "#numericConstant-literal" }, { include: "#array-literal" }, { include: "#this-literal" }, { include: "#super-literal" }] }, "method-declaration": { patterns: [{ begin: "(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(override)\\s+)?(?:\\b(public|private|protected)\\s+)?(?:\\b(abstract)\\s+)?(?:\\b(async)\\s+)?\\s*\\b(constructor)\\b(?!:)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", beginCaptures: { 1: { name: "storage.modifier.js" }, 2: { name: "storage.modifier.js" }, 3: { name: "storage.modifier.js" }, 4: { name: "storage.modifier.async.js" }, 5: { name: "storage.type.js" } }, end: "(?=\\}|;|,|$)|(?<=\\})", name: "meta.method.declaration.js", patterns: [{ include: "#method-declaration-name" }, { include: "#function-body" }] }, { begin: "(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(override)\\s+)?(?:\\b(public|private|protected)\\s+)?(?:\\b(abstract)\\s+)?(?:\\b(async)\\s+)?(?:(?:\\s*\\b(new)\\b(?!:)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))|(?:(\\*)\\s*)?)(?=\\s*((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*))?[\\(])", beginCaptures: { 1: { name: "storage.modifier.js" }, 2: { name: "storage.modifier.js" }, 3: { name: "storage.modifier.js" }, 4: { name: "storage.modifier.async.js" }, 5: { name: "keyword.operator.new.js" }, 6: { name: "keyword.generator.asterisk.js" } }, end: "(?=\\}|;|,|$)|(?<=\\})", name: "meta.method.declaration.js", patterns: [{ include: "#method-declaration-name" }, { include: "#function-body" }] }, { begin: `(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(override)\\s+)?(?:\\b(public|private|protected)\\s+)?(?:\\b(abstract)\\s+)?(?:\\b(async)\\s+)?(?:\\b(get|set)\\s+)?(?:(\\*)\\s*)?(?=\\s*(((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??))\\s*((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*))?[\\(])`, beginCaptures: { 1: { name: "storage.modifier.js" }, 2: { name: "storage.modifier.js" }, 3: { name: "storage.modifier.js" }, 4: { name: "storage.modifier.async.js" }, 5: { name: "storage.type.property.js" }, 6: { name: "keyword.generator.asterisk.js" } }, end: "(?=\\}|;|,|$)|(?<=\\})", name: "meta.method.declaration.js", patterns: [{ include: "#method-declaration-name" }, { include: "#function-body" }] }] }, "method-declaration-name": { begin: `(?x)(?=((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??)\\s*[\\(\\<])`, end: "(?=\\(|\\<)", patterns: [{ include: "#string" }, { include: "#array-literal" }, { include: "#numeric-literal" }, { match: "[_$[:alpha:]][_$[:alnum:]]*", name: "meta.definition.method.js entity.name.function.js" }, { match: "\\?", name: "keyword.operator.optional.js" }] }, "namespace-declaration": { begin: "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(namespace|module)\\s+(?=[_$[:alpha:]\"'`]))", beginCaptures: { 1: { name: "keyword.control.export.js" }, 2: { name: "storage.modifier.js" }, 3: { name: "storage.type.namespace.js" } }, end: "(?<=\\})|(?=;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))", name: "meta.namespace.declaration.js", patterns: [{ include: "#comment" }, { include: "#string" }, { match: "([_$[:alpha:]][_$[:alnum:]]*)", name: "entity.name.type.module.js" }, { include: "#punctuation-accessor" }, { include: "#decl-block" }] }, "new-expr": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(new)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", beginCaptures: { 1: { name: "keyword.operator.new.js" } }, end: "(?<=\\))|(?=[;),}\\]:?\\-\\+\\>]|\\|\\||\\&\\&|\\!\\=\\=|$|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))new(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))function((\\s+[_$[:alpha:]][_$[:alnum:]]*)|(\\s*[\\(]))))", name: "new.expr.js", patterns: [{ include: "#expression" }] }, "null-literal": { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))null(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "constant.language.null.js" }, "numeric-literal": { patterns: [{ captures: { 1: { name: "storage.type.numeric.bigint.js" } }, match: "\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$)", name: "constant.numeric.hex.js" }, { captures: { 1: { name: "storage.type.numeric.bigint.js" } }, match: "\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$)", name: "constant.numeric.binary.js" }, { captures: { 1: { name: "storage.type.numeric.bigint.js" } }, match: "\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$)", name: "constant.numeric.octal.js" }, { captures: { 0: { name: "constant.numeric.decimal.js" }, 1: { name: "meta.delimiter.decimal.period.js" }, 2: { name: "storage.type.numeric.bigint.js" }, 3: { name: "meta.delimiter.decimal.period.js" }, 4: { name: "storage.type.numeric.bigint.js" }, 5: { name: "meta.delimiter.decimal.period.js" }, 6: { name: "storage.type.numeric.bigint.js" }, 7: { name: "storage.type.numeric.bigint.js" }, 8: { name: "meta.delimiter.decimal.period.js" }, 9: { name: "storage.type.numeric.bigint.js" }, 10: { name: "meta.delimiter.decimal.period.js" }, 11: { name: "storage.type.numeric.bigint.js" }, 12: { name: "meta.delimiter.decimal.period.js" }, 13: { name: "storage.type.numeric.bigint.js" }, 14: { name: "storage.type.numeric.bigint.js" } }, match: `(?x)
(?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$)` }] }, "numericConstant-literal": { patterns: [{ match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))NaN(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "constant.language.nan.js" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Infinity(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "constant.language.infinity.js" }] }, "object-binding-element": { patterns: [{ include: "#comment" }, { begin: `(?x)(?=((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(:))`, end: "(?=,|\\})", patterns: [{ include: "#object-binding-element-propertyName" }, { include: "#binding-element" }] }, { include: "#object-binding-pattern" }, { include: "#destructuring-variable-rest" }, { include: "#variable-initializer" }, { include: "#punctuation-comma" }] }, "object-binding-element-const": { patterns: [{ include: "#comment" }, { begin: `(?x)(?=((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(:))`, end: "(?=,|\\})", patterns: [{ include: "#object-binding-element-propertyName" }, { include: "#binding-element-const" }] }, { include: "#object-binding-pattern-const" }, { include: "#destructuring-variable-rest-const" }, { include: "#variable-initializer" }, { include: "#punctuation-comma" }] }, "object-binding-element-propertyName": { begin: `(?x)(?=((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(:))`, end: "(:)", endCaptures: { 0: { name: "punctuation.destructuring.js" } }, patterns: [{ include: "#string" }, { include: "#array-literal" }, { include: "#numeric-literal" }, { match: "([_$[:alpha:]][_$[:alnum:]]*)", name: "variable.object.property.js" }] }, "object-binding-pattern": { begin: "(?:(\\.\\.\\.)\\s*)?(\\{)", beginCaptures: { 1: { name: "keyword.operator.rest.js" }, 2: { name: "punctuation.definition.binding-pattern.object.js" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.binding-pattern.object.js" } }, patterns: [{ include: "#object-binding-element" }] }, "object-binding-pattern-const": { begin: "(?:(\\.\\.\\.)\\s*)?(\\{)", beginCaptures: { 1: { name: "keyword.operator.rest.js" }, 2: { name: "punctuation.definition.binding-pattern.object.js" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.binding-pattern.object.js" } }, patterns: [{ include: "#object-binding-element-const" }] }, "object-identifiers": { patterns: [{ match: "([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*\\??\\.\\s*prototype\\b(?!\\$))", name: "support.class.js" }, { captures: { 1: { name: "punctuation.accessor.js" }, 2: { name: "punctuation.accessor.optional.js" }, 3: { name: "variable.other.constant.object.property.js" }, 4: { name: "variable.other.object.property.js" } }, match: `(?x)(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(?:
(\\#?[[:upper:]][_$[:digit:][:upper:]]*) |
(\\#?[_$[:alpha:]][_$[:alnum:]]*)
)(?=\\s*\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*)` }, { captures: { 1: { name: "variable.other.constant.object.js" }, 2: { name: "variable.other.object.js" } }, match: `(?x)(?:
([[:upper:]][_$[:digit:][:upper:]]*) |
([_$[:alpha:]][_$[:alnum:]]*)
)(?=\\s*\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*)` }] }, "object-literal": { begin: "\\{", beginCaptures: { 0: { name: "punctuation.definition.block.js" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.block.js" } }, name: "meta.objectliteral.js", patterns: [{ include: "#object-member" }] }, "object-literal-method-declaration": { begin: `(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(async)\\s+)?(?:\\b(get|set)\\s+)?(?:(\\*)\\s*)?(?=\\s*(((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??))\\s*((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*))?[\\(])`, beginCaptures: { 1: { name: "storage.modifier.async.js" }, 2: { name: "storage.type.property.js" }, 3: { name: "keyword.generator.asterisk.js" } }, end: "(?=\\}|;|,)|(?<=\\})", name: "meta.method.declaration.js", patterns: [{ include: "#method-declaration-name" }, { include: "#function-body" }, { begin: `(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(async)\\s+)?(?:\\b(get|set)\\s+)?(?:(\\*)\\s*)?(?=\\s*(((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??))\\s*((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*))?[\\(])`, beginCaptures: { 1: { name: "storage.modifier.async.js" }, 2: { name: "storage.type.property.js" }, 3: { name: "keyword.generator.asterisk.js" } }, end: "(?=\\(|\\<)", patterns: [{ include: "#method-declaration-name" }] }] }, "object-member": { patterns: [{ include: "#comment" }, { include: "#object-literal-method-declaration" }, { begin: "(?=\\[)", end: "(?=:)|((?<=[\\]])(?=\\s*[\\(\\<]))", name: "meta.object.member.js meta.object-literal.key.js", patterns: [{ include: "#comment" }, { include: "#array-literal" }] }, { begin: "(?=[\\'\\\"\\`])", end: "(?=:)|((?<=[\\'\\\"\\`])(?=((\\s*[\\(\\<,}])|(\\s+(as|satisifies)\\s+))))", name: "meta.object.member.js meta.object-literal.key.js", patterns: [{ include: "#comment" }, { include: "#string" }] }, { begin: `(?x)(?=(\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$)))`, end: "(?=:)|(?=\\s*([\\(\\<,}])|(\\s+as|satisifies\\s+))", name: "meta.object.member.js meta.object-literal.key.js", patterns: [{ include: "#comment" }, { include: "#numeric-literal" }] }, { begin: "(?<=[\\]\\'\\\"\\`])(?=\\s*[\\(\\<])", end: "(?=\\}|;|,)|(?<=\\})", name: "meta.method.declaration.js", patterns: [{ include: "#function-body" }] }, { captures: { 0: { name: "meta.object-literal.key.js" }, 1: { name: "constant.numeric.decimal.js" } }, match: "(?![_$[:alpha:]])([[:digit:]]+)\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*:)", name: "meta.object.member.js" }, { captures: { 0: { name: "meta.object-literal.key.js" }, 1: { name: "entity.name.function.js" } }, match: `(?x)(?:([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*:(\\s*\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/)*\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |
(
[<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]
) |
# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
)))`, name: "meta.object.member.js" }, { captures: { 0: { name: "meta.object-literal.key.js" } }, match: "(?:[_$[:alpha:]][_$[:alnum:]]*)\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*:)", name: "meta.object.member.js" }, { begin: "\\.\\.\\.", beginCaptures: { 0: { name: "keyword.operator.spread.js" } }, end: "(?=,|\\})", name: "meta.object.member.js", patterns: [{ include: "#expression" }] }, { captures: { 1: { name: "variable.other.readwrite.js" } }, match: "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=,|\\}|$|\\/\\/|\\/\\*)", name: "meta.object.member.js" }, { captures: { 1: { name: "keyword.control.as.js" }, 2: { name: "storage.modifier.js" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(as)\\s+(const)(?=\\s*([,}]|$))", name: "meta.object.member.js" }, { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(as)|(satisfies))\\s+", beginCaptures: { 1: { name: "keyword.control.as.js" }, 2: { name: "keyword.control.satisfies.js" } }, end: "(?=[;),}\\]:?\\-\\+\\>]|\\|\\||\\&\\&|\\!\\=\\=|$|^|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(as|satisifies)\\s+))", name: "meta.object.member.js", patterns: [{ include: "#type" }] }, { begin: "(?=[_$[:alpha:]][_$[:alnum:]]*\\s*=)", end: "(?=,|\\}|$|\\/\\/|\\/\\*)", name: "meta.object.member.js", patterns: [{ include: "#expression" }] }, { begin: ":", beginCaptures: { 0: { name: "meta.object-literal.key.js punctuation.separator.key-value.js" } }, end: "(?=,|\\})", name: "meta.object.member.js", patterns: [{ begin: "(?<=:)\\s*(async)?(?=\\s*(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)\\(\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))", beginCaptures: { 1: { name: "storage.modifier.async.js" } }, end: "(?<=\\))", patterns: [{ include: "#type-parameters" }, { begin: "\\(", beginCaptures: { 0: { name: "meta.brace.round.js" } }, end: "\\)", endCaptures: { 0: { name: "meta.brace.round.js" } }, patterns: [{ include: "#expression-inside-possibly-arrow-parens" }] }] }, { begin: "(?<=:)\\s*(async)?\\s*(\\()(?=\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))", beginCaptures: { 1: { name: "storage.modifier.async.js" }, 2: { name: "meta.brace.round.js" } }, end: "\\)", endCaptures: { 0: { name: "meta.brace.round.js" } }, patterns: [{ include: "#expression-inside-possibly-arrow-parens" }] }, { begin: "(?<=:)\\s*(async)?\\s*(?=\\<\\s*$)", beginCaptures: { 1: { name: "storage.modifier.async.js" } }, end: "(?<=\\>)", patterns: [{ include: "#type-parameters" }] }, { begin: "(?<=\\>)\\s*(\\()(?=\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))", beginCaptures: { 1: { name: "meta.brace.round.js" } }, end: "\\)", endCaptures: { 0: { name: "meta.brace.round.js" } }, patterns: [{ include: "#expression-inside-possibly-arrow-parens" }] }, { include: "#possibly-arrow-return-type" }, { include: "#expression" }] }, { include: "#punctuation-comma" }, { include: "#decl-block" }] }, "parameter-array-binding-pattern": { begin: "(?:(\\.\\.\\.)\\s*)?(\\[)", beginCaptures: { 1: { name: "keyword.operator.rest.js" }, 2: { name: "punctuation.definition.binding-pattern.array.js" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.binding-pattern.array.js" } }, patterns: [{ include: "#parameter-binding-element" }, { include: "#punctuation-comma" }] }, "parameter-binding-element": { patterns: [{ include: "#comment" }, { include: "#string" }, { include: "#numeric-literal" }, { include: "#regex" }, { include: "#parameter-object-binding-pattern" }, { include: "#parameter-array-binding-pattern" }, { include: "#destructuring-parameter-rest" }, { include: "#variable-initializer" }] }, "parameter-name": { patterns: [{ captures: { 1: { name: "storage.modifier.js" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(override|public|protected|private|readonly)\\s+(?=(override|public|protected|private|readonly)\\s+)" }, { captures: { 1: { name: "storage.modifier.js" }, 2: { name: "keyword.operator.rest.js" }, 3: { name: "entity.name.function.js variable.language.this.js" }, 4: { name: "entity.name.function.js" }, 5: { name: "keyword.operator.optional.js" } }, match: `(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(override|public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*(\\??)(?=\\s*
# function assignment |
(=\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |
(
[<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]
) |
# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
)) |
# typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>
(:\\s*(
(<) |
([(]\\s*(
([)]) |
(\\.\\.\\.) |
([_$[:alnum:]]+\\s*(
([:,?=])|
([)]\\s*=>)
))
))
)) |
(:\\s*(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Function(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |
(:\\s*((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))) |
(:\\s*(=>|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(<[^<>]*>)|[^<>(),=])+=\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |
(
[<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]
) |
# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
)))` }, { captures: { 1: { name: "storage.modifier.js" }, 2: { name: "keyword.operator.rest.js" }, 3: { name: "variable.parameter.js variable.language.this.js" }, 4: { name: "variable.parameter.js" }, 5: { name: "keyword.operator.optional.js" } }, match: "(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(override|public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*(\\??)" }] }, "parameter-object-binding-element": { patterns: [{ include: "#comment" }, { begin: `(?x)(?=((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(:))`, end: "(?=,|\\})", patterns: [{ include: "#object-binding-element-propertyName" }, { include: "#parameter-binding-element" }, { include: "#paren-expression" }] }, { include: "#parameter-object-binding-pattern" }, { include: "#destructuring-parameter-rest" }, { include: "#variable-initializer" }, { include: "#punctuation-comma" }] }, "parameter-object-binding-pattern": { begin: "(?:(\\.\\.\\.)\\s*)?(\\{)", beginCaptures: { 1: { name: "keyword.operator.rest.js" }, 2: { name: "punctuation.definition.binding-pattern.object.js" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.binding-pattern.object.js" } }, patterns: [{ include: "#parameter-object-binding-element" }] }, "parameter-type-annotation": { patterns: [{ begin: "(:)", beginCaptures: { 1: { name: "keyword.operator.type.annotation.js" } }, end: "(?=[,)])|(?==[^>])", name: "meta.type.annotation.js", patterns: [{ include: "#type" }] }] }, "paren-expression": { begin: "\\(", beginCaptures: { 0: { name: "meta.brace.round.js" } }, end: "\\)", endCaptures: { 0: { name: "meta.brace.round.js" } }, patterns: [{ include: "#expression" }] }, "paren-expression-possibly-arrow": { patterns: [{ begin: "(?<=[(=,])\\s*(async)?(?=\\s*((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*))?\\(\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))", beginCaptures: { 1: { name: "storage.modifier.async.js" } }, end: "(?<=\\))", patterns: [{ include: "#paren-expression-possibly-arrow-with-typeparameters" }] }, { begin: "(?<=[(=,]|=>|^return|[^\\._$[:alnum:]]return)\\s*(async)?(?=\\s*((((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*))?\\()|(<)|((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)))\\s*$)", beginCaptures: { 1: { name: "storage.modifier.async.js" } }, end: "(?<=\\))", patterns: [{ include: "#paren-expression-possibly-arrow-with-typeparameters" }] }, { include: "#possibly-arrow-return-type" }] }, "paren-expression-possibly-arrow-with-typeparameters": { patterns: [{ include: "#type-parameters" }, { begin: "\\(", beginCaptures: { 0: { name: "meta.brace.round.js" } }, end: "\\)", endCaptures: { 0: { name: "meta.brace.round.js" } }, patterns: [{ include: "#expression-inside-possibly-arrow-parens" }] }] }, "possibly-arrow-return-type": { begin: "(?<=\\)|^)\\s*(:)(?=\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*=>)", beginCaptures: { 1: { name: "meta.arrow.js meta.return.type.arrow.js keyword.operator.type.annotation.js" } }, contentName: "meta.arrow.js meta.return.type.arrow.js", end: "(?==>|\\{|(^\\s*(export|function|class|interface|let|var|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|const|import|enum|namespace|module|type|abstract|declare)\\s+))", patterns: [{ include: "#arrow-return-type-body" }] }, "property-accessor": { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(accessor|get|set)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "storage.type.property.js" }, "punctuation-accessor": { captures: { 1: { name: "punctuation.accessor.js" }, 2: { name: "punctuation.accessor.optional.js" } }, match: "(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))" }, "punctuation-comma": { match: ",", name: "punctuation.separator.comma.js" }, "punctuation-semicolon": { match: ";", name: "punctuation.terminator.statement.js" }, "qstring-double": { begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.js" } }, end: '(")|((?:[^\\\\\\n])$)', endCaptures: { 1: { name: "punctuation.definition.string.end.js" }, 2: { name: "invalid.illegal.newline.js" } }, name: "string.quoted.double.js", patterns: [{ include: "#string-character-escape" }] }, "qstring-single": { begin: "'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.js" } }, end: "(\\')|((?:[^\\\\\\n])$)", endCaptures: { 1: { name: "punctuation.definition.string.end.js" }, 2: { name: "invalid.illegal.newline.js" } }, name: "string.quoted.single.js", patterns: [{ include: "#string-character-escape" }] }, regex: { patterns: [{ begin: "(?<!\\+\\+|--|})(?<=[=(:,\\[?+!]|^return|[^\\._$[:alnum:]]return|^case|[^\\._$[:alnum:]]case|=>|&&|\\|\\||\\*\\/)\\s*(\\/)(?![\\/*])(?=(?:[^\\/\\\\\\[\\()]|\\\\.|\\[([^\\]\\\\]|\\\\.)+\\]|\\(([^\\)\\\\]|\\\\.)+\\))+\\/([dgimsuy]+|(?![\\/\\*])|(?=\\/\\*))(?!\\s*[a-zA-Z0-9_$]))", beginCaptures: { 1: { name: "punctuation.definition.string.begin.js" } }, end: "(/)([dgimsuy]*)", endCaptures: { 1: { name: "punctuation.definition.string.end.js" }, 2: { name: "keyword.other.js" } }, name: "string.regexp.js", patterns: [{ include: "#regexp" }] }, { begin: "((?<![_$[:alnum:])\\]]|\\+\\+|--|}|\\*\\/)|((?<=^return|[^\\._$[:alnum:]]return|^case|[^\\._$[:alnum:]]case))\\s*)\\/(?![\\/*])(?=(?:[^\\/\\\\\\[]|\\\\.|\\[([^\\]\\\\]|\\\\.)*\\])+\\/([dgimsuy]+|(?![\\/\\*])|(?=\\/\\*))(?!\\s*[a-zA-Z0-9_$]))", beginCaptures: { 0: { name: "punctuation.definition.string.begin.js" } }, end: "(/)([dgimsuy]*)", endCaptures: { 1: { name: "punctuation.definition.string.end.js" }, 2: { name: "keyword.other.js" } }, name: "string.regexp.js", patterns: [{ include: "#regexp" }] }] }, "regex-character-class": { patterns: [{ match: "\\\\[wWsSdDtrnvf]|\\.", name: "constant.other.character-class.regexp" }, { match: "\\\\([0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4})", name: "constant.character.numeric.regexp" }, { match: "\\\\c[A-Z]", name: "constant.character.control.regexp" }, { match: "\\\\.", name: "constant.character.escape.backslash.regexp" }] }, regexp: { patterns: [{ match: "\\\\[bB]|\\^|\\$", name: "keyword.control.anchor.regexp" }, { captures: { 0: { name: "keyword.other.back-reference.regexp" }, 1: { name: "variable.other.regexp" } }, match: "\\\\[1-9]\\d*|\\\\k<([a-zA-Z_$][\\w$]*)>" }, { match: "[?+*]|\\{(\\d+,\\d+|\\d+,|,\\d+|\\d+)\\}\\??", name: "keyword.operator.quantifier.regexp" }, { match: "\\|", name: "keyword.operator.or.regexp" }, { begin: "(\\()((\\?=)|(\\?!)|(\\?<=)|(\\?<!))", beginCaptures: { 1: { name: "punctuation.definition.group.regexp" }, 2: { name: "punctuation.definition.group.assertion.regexp" }, 3: { name: "meta.assertion.look-ahead.regexp" }, 4: { name: "meta.assertion.negative-look-ahead.regexp" }, 5: { name: "meta.assertion.look-behind.regexp" }, 6: { name: "meta.assertion.negative-look-behind.regexp" } }, end: "(\\))", endCaptures: { 1: { name: "punctuation.definition.group.regexp" } }, name: "meta.group.assertion.regexp", patterns: [{ include: "#regexp" }] }, { begin: "\\((?:(\\?:)|(?:\\?<([a-zA-Z_$][\\w$]*)>))?", beginCaptures: { 0: { name: "punctuation.definition.group.regexp" }, 1: { name: "punctuation.definition.group.no-capture.regexp" }, 2: { name: "variable.other.regexp" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.regexp" } }, name: "meta.group.regexp", patterns: [{ include: "#regexp" }] }, { begin: "(\\[)(\\^)?", beginCaptures: { 1: { name: "punctuation.definition.character-class.regexp" }, 2: { name: "keyword.operator.negation.regexp" } }, end: "(\\])", endCaptures: { 1: { name: "punctuation.definition.character-class.regexp" } }, name: "constant.other.character-class.set.regexp", patterns: [{ captures: { 1: { name: "constant.character.numeric.regexp" }, 2: { name: "constant.character.control.regexp" }, 3: { name: "constant.character.escape.backslash.regexp" }, 4: { name: "constant.character.numeric.regexp" }, 5: { name: "constant.character.control.regexp" }, 6: { name: "constant.character.escape.backslash.regexp" } }, match: "(?:.|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))\\-(?:[^\\]\\\\]|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))", name: "constant.other.character-class.range.regexp" }, { include: "#regex-character-class" }] }, { include: "#regex-character-class" }] }, "return-type": { patterns: [{ begin: "(?<=\\))\\s*(:)(?=\\s*\\S)", beginCaptures: { 1: { name: "keyword.operator.type.annotation.js" } }, end: "(?<![:|&])(?=$|^|[{};,]|//)", name: "meta.return.type.js", patterns: [{ include: "#return-type-core" }] }, { begin: "(?<=\\))\\s*(:)", beginCaptures: { 1: { name: "keyword.operator.type.annotation.js" } }, end: "(?<![:|&])((?=[{};,]|//|^\\s*$)|((?<=\\S)(?=\\s*$)))", name: "meta.return.type.js", patterns: [{ include: "#return-type-core" }] }] }, "return-type-core": { patterns: [{ include: "#comment" }, { begin: "(?<=[:|&])(?=\\s*\\{)", end: "(?<=\\})", patterns: [{ include: "#type-object" }] }, { include: "#type-predicate-operator" }, { include: "#type" }] }, shebang: { captures: { 1: { name: "punctuation.definition.comment.js" } }, match: "\\A(#!).*(?=$)", name: "comment.line.shebang.js" }, "single-line-comment-consuming-line-ending": { begin: "(^[ \\t]+)?((//)(?:\\s*((@)internal)(?=\\s|$))?)", beginCaptures: { 1: { name: "punctuation.whitespace.comment.leading.js" }, 2: { name: "comment.line.double-slash.js" }, 3: { name: "punctuation.definition.comment.js" }, 4: { name: "storage.type.internaldeclaration.js" }, 5: { name: "punctuation.decorator.internaldeclaration.js" } }, contentName: "comment.line.double-slash.js", end: "(?=^)" }, statements: { patterns: [{ include: "#declaration" }, { include: "#control-statement" }, { include: "#after-operator-block-as-object-literal" }, { include: "#decl-block" }, { include: "#label" }, { include: "#expression" }, { include: "#punctuation-semicolon" }, { include: "#string" }, { include: "#comment" }] }, string: { patterns: [{ include: "#qstring-single" }, { include: "#qstring-double" }, { include: "#template" }] }, "string-character-escape": { match: "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|u\\{[0-9A-Fa-f]+\\}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)", name: "constant.character.escape.js" }, "super-literal": { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))super\\b(?!\\$)", name: "variable.language.super.js" }, "support-function-call-identifiers": { patterns: [{ include: "#literal" }, { include: "#support-objects" }, { include: "#object-identifiers" }, { include: "#punctuation-accessor" }, { match: "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))import(?=\\s*[\\(]\\s*[\\\"\\'\\`]))", name: "keyword.operator.expression.import.js" }] }, "support-objects": { patterns: [{ match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(arguments)\\b(?!\\$)", name: "variable.language.arguments.js" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(Promise)\\b(?!\\$)", name: "support.class.promise.js" }, { captures: { 1: { name: "keyword.control.import.js" }, 2: { name: "punctuation.accessor.js" }, 3: { name: "punctuation.accessor.optional.js" }, 4: { name: "support.variable.property.importmeta.js" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(import)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(meta)\\b(?!\\$)" }, { captures: { 1: { name: "keyword.operator.new.js" }, 2: { name: "punctuation.accessor.js" }, 3: { name: "punctuation.accessor.optional.js" }, 4: { name: "support.variable.property.target.js" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(new)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(target)\\b(?!\\$)" }, { captures: { 1: { name: "punctuation.accessor.js" }, 2: { name: "punctuation.accessor.optional.js" }, 3: { name: "support.variable.property.js" }, 4: { name: "support.constant.js" } }, match: `(?x) (?:(\\.)|(\\?\\.(?!\\s*[[:digit:]]))) \\s* (?:
(?:(constructor|length|prototype|__proto__)\\b(?!\\$|\\s*(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\\())
|
(?:(EPSILON|MAX_SAFE_INTEGER|MAX_VALUE|MIN_SAFE_INTEGER|MIN_VALUE|NEGATIVE_INFINITY|POSITIVE_INFINITY)\\b(?!\\$)))` }, { captures: { 1: { name: "support.type.object.module.js" }, 2: { name: "support.type.object.module.js" }, 3: { name: "punctuation.accessor.js" }, 4: { name: "punctuation.accessor.optional.js" }, 5: { name: "support.type.object.module.js" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(exports)|(module)(?:(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))(exports|id|filename|loaded|parent|children))?)\\b(?!\\$)" }] }, "switch-statement": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?=\\bswitch\\s*\\()", end: "\\}", endCaptures: { 0: { name: "punctuation.definition.block.js" } }, name: "switch-statement.expr.js", patterns: [{ include: "#comment" }, { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(switch)\\s*(\\()", beginCaptures: { 1: { name: "keyword.control.switch.js" }, 2: { name: "meta.brace.round.js" } }, end: "\\)", endCaptures: { 0: { name: "meta.brace.round.js" } }, name: "switch-expression.expr.js", patterns: [{ include: "#expression" }] }, { begin: "\\{", beginCaptures: { 0: { name: "punctuation.definition.block.js" } }, end: "(?=\\})", name: "switch-block.expr.js", patterns: [{ begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(case|default(?=:))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", beginCaptures: { 1: { name: "keyword.control.switch.js" } }, end: "(?=:)", name: "case-clause.expr.js", patterns: [{ include: "#expression" }] }, { begin: "(:)\\s*(\\{)", beginCaptures: { 1: { name: "case-clause.expr.js punctuation.definition.section.case-statement.js" }, 2: { name: "meta.block.js punctuation.definition.block.js" } }, contentName: "meta.block.js", end: "\\}", endCaptures: { 0: { name: "meta.block.js punctuation.definition.block.js" } }, patterns: [{ include: "#statements" }] }, { captures: { 0: { name: "case-clause.expr.js punctuation.definition.section.case-statement.js" } }, match: "(:)" }, { include: "#statements" }] }] }, template: { patterns: [{ include: "#template-call" }, { begin: "([_$[:alpha:]][_$[:alnum:]]*)?(`)", beginCaptures: { 1: { name: "entity.name.function.tagged-template.js" }, 2: { name: "string.template.js punctuation.definition.string.template.begin.js" } }, contentName: "string.template.js", end: "`", endCaptures: { 0: { name: "string.template.js punctuation.definition.string.template.end.js" } }, patterns: [{ include: "#template-substitution-element" }, { include: "#string-character-escape" }] }] }, "template-call": { patterns: [{ begin: "(?=(([_$[:alpha:]][_$[:alnum:]]*\\s*\\??\\.\\s*)*|(\\??\\.\\s*)?)([_$[:alpha:]][_$[:alnum:]]*)(<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?`)", end: "(?=`)", patterns: [{ begin: "(?=(([_$[:alpha:]][_$[:alnum:]]*\\s*\\??\\.\\s*)*|(\\??\\.\\s*)?)([_$[:alpha:]][_$[:alnum:]]*))", end: "(?=(<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?`)", patterns: [{ include: "#support-function-call-identifiers" }, { match: "([_$[:alpha:]][_$[:alnum:]]*)", name: "entity.name.function.tagged-template.js" }] }, { include: "#type-arguments" }] }, { begin: "([_$[:alpha:]][_$[:alnum:]]*)?\\s*(?=(<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)`)", beginCaptures: { 1: { name: "entity.name.function.tagged-template.js" } }, end: "(?=`)", patterns: [{ include: "#type-arguments" }] }] }, "template-substitution-element": { begin: "\\$\\{", beginCaptures: { 0: { name: "punctuation.definition.template-expression.begin.js" } }, contentName: "meta.embedded.line.js", end: "\\}", endCaptures: { 0: { name: "punctuation.definition.template-expression.end.js" } }, name: "meta.template.expression.js", patterns: [{ include: "#expression" }] }, "template-type": { patterns: [{ include: "#template-call" }, { begin: "([_$[:alpha:]][_$[:alnum:]]*)?(`)", beginCaptures: { 1: { name: "entity.name.function.tagged-template.js" }, 2: { name: "string.template.js punctuation.definition.string.template.begin.js" } }, contentName: "string.template.js", end: "`", endCaptures: { 0: { name: "string.template.js punctuation.definition.string.template.end.js" } }, patterns: [{ include: "#template-type-substitution-element" }, { include: "#string-character-escape" }] }] }, "template-type-substitution-element": { begin: "\\$\\{", beginCaptures: { 0: { name: "punctuation.definition.template-expression.begin.js" } }, contentName: "meta.embedded.line.js", end: "\\}", endCaptures: { 0: { name: "punctuation.definition.template-expression.end.js" } }, name: "meta.template.expression.js", patterns: [{ include: "#type" }] }, "ternary-expression": { begin: "(?!\\?\\.\\s*[^[:digit:]])(\\?)(?!\\?)", beginCaptures: { 1: { name: "keyword.operator.ternary.js" } }, end: "\\s*(:)", endCaptures: { 1: { name: "keyword.operator.ternary.js" } }, patterns: [{ include: "#expression" }] }, "this-literal": { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))this\\b(?!\\$)", name: "variable.language.this.js" }, type: { patterns: [{ include: "#comment" }, { include: "#type-string" }, { include: "#numeric-literal" }, { include: "#type-primitive" }, { include: "#type-builtin-literals" }, { include: "#type-parameters" }, { include: "#type-tuple" }, { include: "#type-object" }, { include: "#type-operators" }, { include: "#type-conditional" }, { include: "#type-fn-type-parameters" }, { include: "#type-paren-or-function-parameters" }, { include: "#type-function-return-type" }, { captures: { 1: { name: "storage.modifier.js" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(readonly)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*" }, { include: "#type-name" }] }, "type-alias-declaration": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(type)\\b\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*", beginCaptures: { 1: { name: "keyword.control.export.js" }, 2: { name: "storage.modifier.js" }, 3: { name: "storage.type.type.js" }, 4: { name: "entity.name.type.alias.js" } }, end: "(?=\\}|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))", name: "meta.type.declaration.js", patterns: [{ include: "#comment" }, { include: "#type-parameters" }, { begin: "(=)\\s*(intrinsic)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", beginCaptures: { 1: { name: "keyword.operator.assignment.js" }, 2: { name: "keyword.control.intrinsic.js" } }, end: "(?=\\}|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))", patterns: [{ include: "#type" }] }, { begin: "(=)\\s*", beginCaptures: { 1: { name: "keyword.operator.assignment.js" } }, end: "(?=\\}|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))", patterns: [{ include: "#type" }] }] }, "type-annotation": { patterns: [{ begin: "(:)(?=\\s*\\S)", beginCaptures: { 1: { name: "keyword.operator.type.annotation.js" } }, end: "(?<![:|&])(?!\\s*[|&]\\s+)((?=^|[,);\\}\\]]|//)|(?==[^>])|((?<=[\\}>\\]\\)]|[_$[:alpha:]])\\s*(?=\\{)))", name: "meta.type.annotation.js", patterns: [{ include: "#type" }] }, { begin: "(:)", beginCaptures: { 1: { name: "keyword.operator.type.annotation.js" } }, end: "(?<![:|&])((?=[,);\\}\\]]|\\/\\/)|(?==[^>])|(?=^\\s*$)|((?<=[\\}>\\]\\)]|[_$[:alpha:]])\\s*(?=\\{)))", name: "meta.type.annotation.js", patterns: [{ include: "#type" }] }] }, "type-arguments": { begin: "\\<", beginCaptures: { 0: { name: "punctuation.definition.typeparameters.begin.js" } }, end: "\\>", endCaptures: { 0: { name: "punctuation.definition.typeparameters.end.js" } }, name: "meta.type.parameters.js", patterns: [{ include: "#type-arguments-body" }] }, "type-arguments-body": { patterns: [{ captures: { 0: { name: "keyword.operator.type.js" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(_)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))" }, { include: "#type" }, { include: "#punctuation-comma" }] }, "type-builtin-literals": { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(this|true|false|undefined|null|object)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "support.type.builtin.js" }, "type-conditional": { patterns: [{ begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(extends)\\s+", beginCaptures: { 1: { name: "storage.modifier.js" } }, end: "(?<=:)", patterns: [{ begin: "\\?", beginCaptures: { 0: { name: "keyword.operator.ternary.js" } }, end: ":", endCaptures: { 0: { name: "keyword.operator.ternary.js" } }, patterns: [{ include: "#type" }] }, { include: "#type" }] }] }, "type-fn-type-parameters": { patterns: [{ begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(abstract)\\s+)?(new)\\b(?=\\s*\\<)", beginCaptures: { 1: { name: "meta.type.constructor.js storage.modifier.js" }, 2: { name: "meta.type.constructor.js keyword.control.new.js" } }, end: "(?<=>)", patterns: [{ include: "#comment" }, { include: "#type-parameters" }] }, { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(abstract)\\s+)?(new)\\b\\s*(?=\\()", beginCaptures: { 1: { name: "storage.modifier.js" }, 2: { name: "keyword.control.new.js" } }, end: "(?<=\\))", name: "meta.type.constructor.js", patterns: [{ include: "#function-parameters" }] }, { begin: `(?x)(
(?=
[(]\\s*(
([)]) |
(\\.\\.\\.) |
([_$[:alnum:]]+\\s*(
([:,?=])|
([)]\\s*=>)
))
)
)
)`, end: "(?<=\\))", name: "meta.type.function.js", patterns: [{ include: "#function-parameters" }] }] }, "type-function-return-type": { patterns: [{ begin: "(=>)(?=\\s*\\S)", beginCaptures: { 1: { name: "storage.type.function.arrow.js" } }, end: "(?<!=>)(?<![|&])(?=[,\\]\\)\\{\\}=;>:\\?]|//|$)", name: "meta.type.function.return.js", patterns: [{ include: "#type-function-return-type-core" }] }, { begin: "=>", beginCaptures: { 0: { name: "storage.type.function.arrow.js" } }, end: "(?<!=>)(?<![|&])((?=[,\\]\\)\\{\\}=;:\\?>]|//|^\\s*$)|((?<=\\S)(?=\\s*$)))", name: "meta.type.function.return.js", patterns: [{ include: "#type-function-return-type-core" }] }] }, "type-function-return-type-core": { patterns: [{ include: "#comment" }, { begin: "(?<==>)(?=\\s*\\{)", end: "(?<=\\})", patterns: [{ include: "#type-object" }] }, { include: "#type-predicate-operator" }, { include: "#type" }] }, "type-infer": { patterns: [{ captures: { 1: { name: "keyword.operator.expression.infer.js" }, 2: { name: "entity.name.type.js" }, 3: { name: "keyword.operator.expression.extends.js" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(infer)\\s+([_$[:alpha:]][_$[:alnum:]]*)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?:\\s+(extends)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))?", name: "meta.type.infer.js" }] }, "type-name": { patterns: [{ begin: "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(<)", captures: { 1: { name: "entity.name.type.module.js" }, 2: { name: "punctuation.accessor.js" }, 3: { name: "punctuation.accessor.optional.js" }, 4: { name: "meta.type.parameters.js punctuation.definition.typeparameters.begin.js" } }, contentName: "meta.type.parameters.js", end: "(>)", endCaptures: { 1: { name: "meta.type.parameters.js punctuation.definition.typeparameters.end.js" } }, patterns: [{ include: "#type-arguments-body" }] }, { begin: "([_$[:alpha:]][_$[:alnum:]]*)\\s*(<)", beginCaptures: { 1: { name: "entity.name.type.js" }, 2: { name: "meta.type.parameters.js punctuation.definition.typeparameters.begin.js" } }, contentName: "meta.type.parameters.js", end: "(>)", endCaptures: { 1: { name: "meta.type.parameters.js punctuation.definition.typeparameters.end.js" } }, patterns: [{ include: "#type-arguments-body" }] }, { captures: { 1: { name: "entity.name.type.module.js" }, 2: { name: "punctuation.accessor.js" }, 3: { name: "punctuation.accessor.optional.js" } }, match: "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))" }, { match: "[_$[:alpha:]][_$[:alnum:]]*", name: "entity.name.type.js" }] }, "type-object": { begin: "\\{", beginCaptures: { 0: { name: "punctuation.definition.block.js" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.block.js" } }, name: "meta.object.type.js", patterns: [{ include: "#comment" }, { include: "#method-declaration" }, { include: "#indexer-declaration" }, { include: "#indexer-mapped-type-declaration" }, { include: "#field-declaration" }, { include: "#type-annotation" }, { begin: "\\.\\.\\.", beginCaptures: { 0: { name: "keyword.operator.spread.js" } }, end: "(?=\\}|;|,|$)|(?<=\\})", patterns: [{ include: "#type" }] }, { include: "#punctuation-comma" }, { include: "#punctuation-semicolon" }, { include: "#type" }] }, "type-operators": { patterns: [{ include: "#typeof-operator" }, { include: "#type-infer" }, { begin: "([&|])(?=\\s*\\{)", beginCaptures: { 0: { name: "keyword.operator.type.js" } }, end: "(?<=\\})", patterns: [{ include: "#type-object" }] }, { begin: "[&|]", beginCaptures: { 0: { name: "keyword.operator.type.js" } }, end: "(?=\\S)" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))keyof(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.operator.expression.keyof.js" }, { match: "(\\?|\\:)", name: "keyword.operator.ternary.js" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))import(?=\\s*\\()", name: "keyword.operator.expression.import.js" }] }, "type-parameters": { begin: "(<)", beginCaptures: { 1: { name: "punctuation.definition.typeparameters.begin.js" } }, end: "(>)", endCaptures: { 1: { name: "punctuation.definition.typeparameters.end.js" } }, name: "meta.type.parameters.js", patterns: [{ include: "#comment" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(extends|in|out|const)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "storage.modifier.js" }, { include: "#type" }, { include: "#punctuation-comma" }, { match: "(=)(?!>)", name: "keyword.operator.assignment.js" }] }, "type-paren-or-function-parameters": { begin: "\\(", beginCaptures: { 0: { name: "meta.brace.round.js" } }, end: "\\)", endCaptures: { 0: { name: "meta.brace.round.js" } }, name: "meta.type.paren.cover.js", patterns: [{ captures: { 1: { name: "storage.modifier.js" }, 2: { name: "keyword.operator.rest.js" }, 3: { name: "entity.name.function.js variable.language.this.js" }, 4: { name: "entity.name.function.js" }, 5: { name: "keyword.operator.optional.js" } }, match: `(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))\\s*(\\??)(?=\\s*(:\\s*(
(<) |
([(]\\s*(
([)]) |
(\\.\\.\\.) |
([_$[:alnum:]]+\\s*(
([:,?=])|
([)]\\s*=>)
))
))
)) |
(:\\s*(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Function(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |
(:\\s*((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))))` }, { captures: { 1: { name: "storage.modifier.js" }, 2: { name: "keyword.operator.rest.js" }, 3: { name: "variable.parameter.js variable.language.this.js" }, 4: { name: "variable.parameter.js" }, 5: { name: "keyword.operator.optional.js" } }, match: "(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))\\s*(\\??)(?=:)" }, { include: "#type-annotation" }, { match: ",", name: "punctuation.separator.parameter.js" }, { include: "#type" }] }, "type-predicate-operator": { patterns: [{ captures: { 1: { name: "keyword.operator.type.asserts.js" }, 2: { name: "variable.parameter.js variable.language.this.js" }, 3: { name: "variable.parameter.js" }, 4: { name: "keyword.operator.expression.is.js" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(asserts)\\s+)?(?!asserts)(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))\\s(is)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))" }, { captures: { 1: { name: "keyword.operator.type.asserts.js" }, 2: { name: "variable.parameter.js variable.language.this.js" }, 3: { name: "variable.parameter.js" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(asserts)\\s+(?!is)(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))asserts(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.operator.type.asserts.js" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))is(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.operator.expression.is.js" }] }, "type-primitive": { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(string|number|bigint|boolean|symbol|any|void|never|unknown)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "support.type.primitive.js" }, "type-string": { patterns: [{ include: "#qstring-single" }, { include: "#qstring-double" }, { include: "#template-type" }] }, "type-tuple": { begin: "\\[", beginCaptures: { 0: { name: "meta.brace.square.js" } }, end: "\\]", endCaptures: { 0: { name: "meta.brace.square.js" } }, name: "meta.type.tuple.js", patterns: [{ match: "\\.\\.\\.", name: "keyword.operator.rest.js" }, { captures: { 1: { name: "entity.name.label.js" }, 2: { name: "keyword.operator.optional.js" }, 3: { name: "punctuation.separator.label.js" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))([_$[:alpha:]][_$[:alnum:]]*)\\s*(\\?)?\\s*(:)" }, { include: "#type" }, { include: "#punctuation-comma" }] }, "typeof-operator": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))typeof(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", beginCaptures: { 0: { name: "keyword.operator.expression.typeof.js" } }, end: "(?=[,);}\\]=>:&|{\\?]|(extends\\s+)|$|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))", patterns: [{ include: "#type-arguments" }, { include: "#expression" }] }, "undefined-literal": { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))undefined(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "constant.language.undefined.js" }, "var-expr": { patterns: [{ begin: "(?=(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(var|let)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))", end: "(?!(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(var|let)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))((?=^|;|}|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))|((?<!^let|[^\\._$[:alnum:]]let|^var|[^\\._$[:alnum:]]var)(?=\\s*$)))", name: "meta.var.expr.js", patterns: [{ begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(var|let)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*", beginCaptures: { 1: { name: "keyword.control.export.js" }, 2: { name: "storage.modifier.js" }, 3: { name: "storage.type.js" } }, end: "(?=\\S)" }, { include: "#destructuring-variable" }, { include: "#var-single-variable" }, { include: "#variable-initializer" }, { include: "#comment" }, { begin: "(,)\\s*(?=$|\\/\\/)", beginCaptures: { 1: { name: "punctuation.separator.comma.js" } }, end: "(?<!,)(((?==|;|}|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|^\\s*$))|((?<=\\S)(?=\\s*$)))", patterns: [{ include: "#single-line-comment-consuming-line-ending" }, { include: "#comment" }, { include: "#destructuring-variable" }, { include: "#var-single-variable" }, { include: "#punctuation-comma" }] }, { include: "#punctuation-comma" }] }, { begin: "(?=(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(const(?!\\s+enum\\b))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))", beginCaptures: { 1: { name: "keyword.control.export.js" }, 2: { name: "storage.modifier.js" }, 3: { name: "storage.type.js" } }, end: "(?!(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(const(?!\\s+enum\\b))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))((?=^|;|}|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))|((?<!^const|[^\\._$[:alnum:]]const)(?=\\s*$)))", name: "meta.var.expr.js", patterns: [{ begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(const(?!\\s+enum\\b))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*", beginCaptures: { 1: { name: "keyword.control.export.js" }, 2: { name: "storage.modifier.js" }, 3: { name: "storage.type.js" } }, end: "(?=\\S)" }, { include: "#destructuring-const" }, { include: "#var-single-const" }, { include: "#variable-initializer" }, { include: "#comment" }, { begin: "(,)\\s*(?=$|\\/\\/)", beginCaptures: { 1: { name: "punctuation.separator.comma.js" } }, end: "(?<!,)(((?==|;|}|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|^\\s*$))|((?<=\\S)(?=\\s*$)))", patterns: [{ include: "#single-line-comment-consuming-line-ending" }, { include: "#comment" }, { include: "#destructuring-const" }, { include: "#var-single-const" }, { include: "#punctuation-comma" }] }, { include: "#punctuation-comma" }] }, { begin: "(?=(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b((?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))", beginCaptures: { 1: { name: "keyword.control.export.js" }, 2: { name: "storage.modifier.js" }, 3: { name: "storage.type.js" } }, end: "(?!(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b((?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))((?=;|}|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))|((?<!^using|[^\\._$[:alnum:]]using|^await\\s+using|[^\\._$[:alnum:]]await\\s+using)(?=\\s*$)))", name: "meta.var.expr.js", patterns: [{ begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b((?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*", beginCaptures: { 1: { name: "keyword.control.export.js" }, 2: { name: "storage.modifier.js" }, 3: { name: "storage.type.js" } }, end: "(?=\\S)" }, { include: "#var-single-const" }, { include: "#variable-initializer" }, { include: "#comment" }, { begin: "(,)\\s*((?!\\S)|(?=\\/\\/))", beginCaptures: { 1: { name: "punctuation.separator.comma.js" } }, end: "(?<!,)(((?==|;|}|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|^\\s*$))|((?<=\\S)(?=\\s*$)))", patterns: [{ include: "#single-line-comment-consuming-line-ending" }, { include: "#comment" }, { include: "#var-single-const" }, { include: "#punctuation-comma" }] }, { include: "#punctuation-comma" }] }] }, "var-single-const": { patterns: [{ begin: `(?x)([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*
# function assignment |
(=\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |
(
[<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]
) |
# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
)) |
# typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>
(:\\s*(
(<) |
([(]\\s*(
([)]) |
(\\.\\.\\.) |
([_$[:alnum:]]+\\s*(
([:,?=])|
([)]\\s*=>)
))
))
)) |
(:\\s*(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Function(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |
(:\\s*((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))) |
(:\\s*(=>|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(<[^<>]*>)|[^<>(),=])+=\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |
(
[<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]
) |
# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
)))`, beginCaptures: { 1: { name: "meta.definition.variable.js variable.other.constant.js entity.name.function.js" } }, end: "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|(;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b)))", name: "meta.var-single-variable.expr.js", patterns: [{ include: "#var-single-variable-type-annotation" }] }, { begin: "([_$[:alpha:]][_$[:alnum:]]*)", beginCaptures: { 1: { name: "meta.definition.variable.js variable.other.constant.js" } }, end: "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|(;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b)))", name: "meta.var-single-variable.expr.js", patterns: [{ include: "#var-single-variable-type-annotation" }] }] }, "var-single-variable": { patterns: [{ begin: `(?x)([_$[:alpha:]][_$[:alnum:]]*)(\\!)?(?=\\s*
# function assignment |
(=\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |
(
[<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]
) |
# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
)) |
# typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>
(:\\s*(
(<) |
([(]\\s*(
([)]) |
(\\.\\.\\.) |
([_$[:alnum:]]+\\s*(
([:,?=])|
([)]\\s*=>)
))
))
)) |
(:\\s*(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Function(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |
(:\\s*((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))) |
(:\\s*(=>|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(<[^<>]*>)|[^<>(),=])+=\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |
(
[<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]
) |
# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
)))`, beginCaptures: { 1: { name: "meta.definition.variable.js entity.name.function.js" }, 2: { name: "keyword.operator.definiteassignment.js" } }, end: "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|(;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b)))", name: "meta.var-single-variable.expr.js", patterns: [{ include: "#var-single-variable-type-annotation" }] }, { begin: "([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])(\\!)?", beginCaptures: { 1: { name: "meta.definition.variable.js variable.other.constant.js" }, 2: { name: "keyword.operator.definiteassignment.js" } }, end: "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|(;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b)))", name: "meta.var-single-variable.expr.js", patterns: [{ include: "#var-single-variable-type-annotation" }] }, { begin: "([_$[:alpha:]][_$[:alnum:]]*)(\\!)?", beginCaptures: { 1: { name: "meta.definition.variable.js variable.other.readwrite.js" }, 2: { name: "keyword.operator.definiteassignment.js" } }, end: "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|(;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b)))", name: "meta.var-single-variable.expr.js", patterns: [{ include: "#var-single-variable-type-annotation" }] }] }, "var-single-variable-type-annotation": { patterns: [{ include: "#type-annotation" }, { include: "#string" }, { include: "#comment" }] }, "variable-initializer": { patterns: [{ begin: "(?<!=|!)(=)(?!=)(?=\\s*\\S)(?!\\s*.*=>\\s*$)", beginCaptures: { 1: { name: "keyword.operator.assignment.js" } }, end: "(?=$|^|[,);}\\]]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))", patterns: [{ include: "#expression" }] }, { begin: "(?<!=|!)(=)(?!=)", beginCaptures: { 1: { name: "keyword.operator.assignment.js" } }, end: "(?=[,);}\\]]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))|(?=^\\s*$)|(?<![\\|\\&\\+\\-\\*\\/])(?<=\\S)(?<!=)(?=\\s*$)", patterns: [{ include: "#expression" }] }] } }, scopeName: "source.js", aliases: ["js"] });
var e = [
  D
];
const Z = Object.freeze({ displayName: "TypeScript", name: "typescript", patterns: [{ include: "#directives" }, { include: "#statements" }, { include: "#shebang" }], repository: { "access-modifier": { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(abstract|declare|override|public|protected|private|readonly|static)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "storage.modifier.ts" }, "after-operator-block-as-object-literal": { begin: "(?<!\\+\\+|--)(?<=[:=(,\\[?+!>]|^await|[^\\._$[:alnum:]]await|^return|[^\\._$[:alnum:]]return|^yield|[^\\._$[:alnum:]]yield|^throw|[^\\._$[:alnum:]]throw|^in|[^\\._$[:alnum:]]in|^of|[^\\._$[:alnum:]]of|^typeof|[^\\._$[:alnum:]]typeof|&&|\\|\\||\\*)\\s*(\\{)", beginCaptures: { 1: { name: "punctuation.definition.block.ts" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.block.ts" } }, name: "meta.objectliteral.ts", patterns: [{ include: "#object-member" }] }, "array-binding-pattern": { begin: "(?:(\\.\\.\\.)\\s*)?(\\[)", beginCaptures: { 1: { name: "keyword.operator.rest.ts" }, 2: { name: "punctuation.definition.binding-pattern.array.ts" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.binding-pattern.array.ts" } }, patterns: [{ include: "#binding-element" }, { include: "#punctuation-comma" }] }, "array-binding-pattern-const": { begin: "(?:(\\.\\.\\.)\\s*)?(\\[)", beginCaptures: { 1: { name: "keyword.operator.rest.ts" }, 2: { name: "punctuation.definition.binding-pattern.array.ts" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.binding-pattern.array.ts" } }, patterns: [{ include: "#binding-element-const" }, { include: "#punctuation-comma" }] }, "array-literal": { begin: "\\s*(\\[)", beginCaptures: { 1: { name: "meta.brace.square.ts" } }, end: "\\]", endCaptures: { 0: { name: "meta.brace.square.ts" } }, name: "meta.array.literal.ts", patterns: [{ include: "#expression" }, { include: "#punctuation-comma" }] }, "arrow-function": { patterns: [{ captures: { 1: { name: "storage.modifier.async.ts" }, 2: { name: "variable.parameter.ts" } }, match: "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(\\basync)\\s+)?([_$[:alpha:]][_$[:alnum:]]*)\\s*(?==>)", name: "meta.arrow.ts" }, { begin: `(?x) (?:
(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(\\basync)
)? ((?<![})!\\]])\\s*
(?=

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |

# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
)
)`, beginCaptures: { 1: { name: "storage.modifier.async.ts" } }, end: "(?==>|\\{|(^\\s*(export|function|class|interface|let|var|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|const|import|enum|namespace|module|type|abstract|declare)\\s+))", name: "meta.arrow.ts", patterns: [{ include: "#comment" }, { include: "#type-parameters" }, { include: "#function-parameters" }, { include: "#arrow-return-type" }, { include: "#possibly-arrow-return-type" }] }, { begin: "=>", beginCaptures: { 0: { name: "storage.type.function.arrow.ts" } }, end: "((?<=\\}|\\S)(?<!=>)|((?!\\{)(?=\\S)))(?!\\/[\\/\\*])", name: "meta.arrow.ts", patterns: [{ include: "#single-line-comment-consuming-line-ending" }, { include: "#decl-block" }, { include: "#expression" }] }] }, "arrow-return-type": { begin: "(?<=\\))\\s*(:)", beginCaptures: { 1: { name: "keyword.operator.type.annotation.ts" } }, end: "(?==>|\\{|(^\\s*(export|function|class|interface|let|var|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|const|import|enum|namespace|module|type|abstract|declare)\\s+))", name: "meta.return.type.arrow.ts", patterns: [{ include: "#arrow-return-type-body" }] }, "arrow-return-type-body": { patterns: [{ begin: "(?<=[:])(?=\\s*\\{)", end: "(?<=\\})", patterns: [{ include: "#type-object" }] }, { include: "#type-predicate-operator" }, { include: "#type" }] }, "async-modifier": { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(async)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "storage.modifier.async.ts" }, "binding-element": { patterns: [{ include: "#comment" }, { include: "#string" }, { include: "#numeric-literal" }, { include: "#regex" }, { include: "#object-binding-pattern" }, { include: "#array-binding-pattern" }, { include: "#destructuring-variable-rest" }, { include: "#variable-initializer" }] }, "binding-element-const": { patterns: [{ include: "#comment" }, { include: "#string" }, { include: "#numeric-literal" }, { include: "#regex" }, { include: "#object-binding-pattern-const" }, { include: "#array-binding-pattern-const" }, { include: "#destructuring-variable-rest-const" }, { include: "#variable-initializer" }] }, "boolean-literal": { patterns: [{ match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))true(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "constant.language.boolean.true.ts" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))false(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "constant.language.boolean.false.ts" }] }, brackets: { patterns: [{ begin: "{", end: "}|(?=\\*/)", patterns: [{ include: "#brackets" }] }, { begin: "\\[", end: "\\]|(?=\\*/)", patterns: [{ include: "#brackets" }] }] }, cast: { patterns: [{ captures: { 1: { name: "meta.brace.angle.ts" }, 2: { name: "storage.modifier.ts" }, 3: { name: "meta.brace.angle.ts" } }, match: "\\s*(<)\\s*(const)\\s*(>)", name: "cast.expr.ts" }, { begin: "(?:(?<!\\+\\+|--)(?<=^return|[^\\._$[:alnum:]]return|^throw|[^\\._$[:alnum:]]throw|^yield|[^\\._$[:alnum:]]yield|^await|[^\\._$[:alnum:]]await|^default|[^\\._$[:alnum:]]default|[=(,:>*?\\&\\|\\^]|[^_$[:alnum:]](?:\\+\\+|\\-\\-)|[^\\+]\\+|[^\\-]\\-))\\s*(<)(?!<?\\=)(?!\\s*$)", beginCaptures: { 1: { name: "meta.brace.angle.ts" } }, end: "(\\>)", endCaptures: { 1: { name: "meta.brace.angle.ts" } }, name: "cast.expr.ts", patterns: [{ include: "#type" }] }, { begin: "(?:(?<=^))\\s*(<)(?=[_$[:alpha:]][_$[:alnum:]]*\\s*>)", beginCaptures: { 1: { name: "meta.brace.angle.ts" } }, end: "(\\>)", endCaptures: { 1: { name: "meta.brace.angle.ts" } }, name: "cast.expr.ts", patterns: [{ include: "#type" }] }] }, "class-declaration": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(?:(abstract)\\s+)?\\b(class)\\b(?=\\s+|/[/*])", beginCaptures: { 1: { name: "keyword.control.export.ts" }, 2: { name: "storage.modifier.ts" }, 3: { name: "storage.modifier.ts" }, 4: { name: "storage.type.class.ts" } }, end: "(?<=\\})", name: "meta.class.ts", patterns: [{ include: "#class-declaration-or-expression-patterns" }] }, "class-declaration-or-expression-patterns": { patterns: [{ include: "#comment" }, { include: "#class-or-interface-heritage" }, { captures: { 0: { name: "entity.name.type.class.ts" } }, match: "[_$[:alpha:]][_$[:alnum:]]*" }, { include: "#type-parameters" }, { include: "#class-or-interface-body" }] }, "class-expression": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(abstract)\\s+)?(class)\\b(?=\\s+|[<{]|\\/[\\/*])", beginCaptures: { 1: { name: "storage.modifier.ts" }, 2: { name: "storage.type.class.ts" } }, end: "(?<=\\})", name: "meta.class.ts", patterns: [{ include: "#class-declaration-or-expression-patterns" }] }, "class-or-interface-body": { begin: "\\{", beginCaptures: { 0: { name: "punctuation.definition.block.ts" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.block.ts" } }, patterns: [{ include: "#comment" }, { include: "#decorator" }, { begin: "(?<=:)\\s*", end: "(?=\\s|[;),}\\]:\\-\\+]|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))", patterns: [{ include: "#expression" }] }, { include: "#method-declaration" }, { include: "#indexer-declaration" }, { include: "#field-declaration" }, { include: "#string" }, { include: "#type-annotation" }, { include: "#variable-initializer" }, { include: "#access-modifier" }, { include: "#property-accessor" }, { include: "#async-modifier" }, { include: "#after-operator-block-as-object-literal" }, { include: "#decl-block" }, { include: "#expression" }, { include: "#punctuation-comma" }, { include: "#punctuation-semicolon" }] }, "class-or-interface-heritage": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(extends|implements)\\b)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", beginCaptures: { 1: { name: "storage.modifier.ts" } }, end: "(?=\\{)", patterns: [{ include: "#comment" }, { include: "#class-or-interface-heritage" }, { include: "#type-parameters" }, { include: "#expressionWithoutIdentifiers" }, { captures: { 1: { name: "entity.name.type.module.ts" }, 2: { name: "punctuation.accessor.ts" }, 3: { name: "punctuation.accessor.optional.ts" } }, match: "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))(?=\\s*[_$[:alpha:]][_$[:alnum:]]*(\\s*\\??\\.\\s*[_$[:alpha:]][_$[:alnum:]]*)*\\s*)" }, { captures: { 1: { name: "entity.other.inherited-class.ts" } }, match: "([_$[:alpha:]][_$[:alnum:]]*)" }, { include: "#expressionPunctuations" }] }, comment: { patterns: [{ begin: "/\\*\\*(?!/)", beginCaptures: { 0: { name: "punctuation.definition.comment.ts" } }, end: "\\*/", endCaptures: { 0: { name: "punctuation.definition.comment.ts" } }, name: "comment.block.documentation.ts", patterns: [{ include: "#docblock" }] }, { begin: "(/\\*)(?:\\s*((@)internal)(?=\\s|(\\*/)))?", beginCaptures: { 1: { name: "punctuation.definition.comment.ts" }, 2: { name: "storage.type.internaldeclaration.ts" }, 3: { name: "punctuation.decorator.internaldeclaration.ts" } }, end: "\\*/", endCaptures: { 0: { name: "punctuation.definition.comment.ts" } }, name: "comment.block.ts" }, { begin: "(^[ \\t]+)?((//)(?:\\s*((@)internal)(?=\\s|$))?)", beginCaptures: { 1: { name: "punctuation.whitespace.comment.leading.ts" }, 2: { name: "comment.line.double-slash.ts" }, 3: { name: "punctuation.definition.comment.ts" }, 4: { name: "storage.type.internaldeclaration.ts" }, 5: { name: "punctuation.decorator.internaldeclaration.ts" } }, contentName: "comment.line.double-slash.ts", end: "(?=$)" }] }, "control-statement": { patterns: [{ include: "#switch-statement" }, { include: "#for-loop" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(catch|finally|throw|try)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.control.trycatch.ts" }, { captures: { 1: { name: "keyword.control.loop.ts" }, 2: { name: "entity.name.label.ts" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(break|continue|goto)\\s+([_$[:alpha:]][_$[:alnum:]]*)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(break|continue|do|goto|while)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.control.loop.ts" }, { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(return)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", beginCaptures: { 0: { name: "keyword.control.flow.ts" } }, end: "(?=[;}]|$|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))", patterns: [{ include: "#expression" }] }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(case|default|switch)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.control.switch.ts" }, { include: "#if-statement" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(else|if)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.control.conditional.ts" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(with)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.control.with.ts" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(package)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.control.ts" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(debugger)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.other.debugger.ts" }] }, "decl-block": { begin: "\\{", beginCaptures: { 0: { name: "punctuation.definition.block.ts" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.block.ts" } }, name: "meta.block.ts", patterns: [{ include: "#statements" }] }, declaration: { patterns: [{ include: "#decorator" }, { include: "#var-expr" }, { include: "#function-declaration" }, { include: "#class-declaration" }, { include: "#interface-declaration" }, { include: "#enum-declaration" }, { include: "#namespace-declaration" }, { include: "#type-alias-declaration" }, { include: "#import-equals-declaration" }, { include: "#import-declaration" }, { include: "#export-declaration" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(declare|export)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "storage.modifier.ts" }] }, decorator: { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))\\@", beginCaptures: { 0: { name: "punctuation.decorator.ts" } }, end: "(?=\\s)", name: "meta.decorator.ts", patterns: [{ include: "#expression" }] }, "destructuring-const": { patterns: [{ begin: "(?<!=|:|^of|[^\\._$[:alnum:]]of|^in|[^\\._$[:alnum:]]in)\\s*(?=\\{)", end: "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))", name: "meta.object-binding-pattern-variable.ts", patterns: [{ include: "#object-binding-pattern-const" }, { include: "#type-annotation" }, { include: "#comment" }] }, { begin: "(?<!=|:|^of|[^\\._$[:alnum:]]of|^in|[^\\._$[:alnum:]]in)\\s*(?=\\[)", end: "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))", name: "meta.array-binding-pattern-variable.ts", patterns: [{ include: "#array-binding-pattern-const" }, { include: "#type-annotation" }, { include: "#comment" }] }] }, "destructuring-parameter": { patterns: [{ begin: "(?<!=|:)\\s*(?:(\\.\\.\\.)\\s*)?(\\{)", beginCaptures: { 1: { name: "keyword.operator.rest.ts" }, 2: { name: "punctuation.definition.binding-pattern.object.ts" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.binding-pattern.object.ts" } }, name: "meta.parameter.object-binding-pattern.ts", patterns: [{ include: "#parameter-object-binding-element" }] }, { begin: "(?<!=|:)\\s*(?:(\\.\\.\\.)\\s*)?(\\[)", beginCaptures: { 1: { name: "keyword.operator.rest.ts" }, 2: { name: "punctuation.definition.binding-pattern.array.ts" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.binding-pattern.array.ts" } }, name: "meta.paramter.array-binding-pattern.ts", patterns: [{ include: "#parameter-binding-element" }, { include: "#punctuation-comma" }] }] }, "destructuring-parameter-rest": { captures: { 1: { name: "keyword.operator.rest.ts" }, 2: { name: "variable.parameter.ts" } }, match: "(?:(\\.\\.\\.)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)" }, "destructuring-variable": { patterns: [{ begin: "(?<!=|:|^of|[^\\._$[:alnum:]]of|^in|[^\\._$[:alnum:]]in)\\s*(?=\\{)", end: "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))", name: "meta.object-binding-pattern-variable.ts", patterns: [{ include: "#object-binding-pattern" }, { include: "#type-annotation" }, { include: "#comment" }] }, { begin: "(?<!=|:|^of|[^\\._$[:alnum:]]of|^in|[^\\._$[:alnum:]]in)\\s*(?=\\[)", end: "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))", name: "meta.array-binding-pattern-variable.ts", patterns: [{ include: "#array-binding-pattern" }, { include: "#type-annotation" }, { include: "#comment" }] }] }, "destructuring-variable-rest": { captures: { 1: { name: "keyword.operator.rest.ts" }, 2: { name: "meta.definition.variable.ts variable.other.readwrite.ts" } }, match: "(?:(\\.\\.\\.)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)" }, "destructuring-variable-rest-const": { captures: { 1: { name: "keyword.operator.rest.ts" }, 2: { name: "meta.definition.variable.ts variable.other.constant.ts" } }, match: "(?:(\\.\\.\\.)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)" }, directives: { begin: "^(///)\\s*(?=<(reference|amd-dependency|amd-module)(\\s+(path|types|no-default-lib|lib|name|resolution-mode)\\s*=\\s*((\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)))+\\s*/>\\s*$)", beginCaptures: { 1: { name: "punctuation.definition.comment.ts" } }, end: "(?=$)", name: "comment.line.triple-slash.directive.ts", patterns: [{ begin: "(<)(reference|amd-dependency|amd-module)", beginCaptures: { 1: { name: "punctuation.definition.tag.directive.ts" }, 2: { name: "entity.name.tag.directive.ts" } }, end: "/>", endCaptures: { 0: { name: "punctuation.definition.tag.directive.ts" } }, name: "meta.tag.ts", patterns: [{ match: "path|types|no-default-lib|lib|name|resolution-mode", name: "entity.other.attribute-name.directive.ts" }, { match: "=", name: "keyword.operator.assignment.ts" }, { include: "#string" }] }] }, docblock: { patterns: [{ captures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" }, 3: { name: "constant.language.access-type.jsdoc" } }, match: `(?x)
((@)(?:access|api))
\\s+
(private|protected|public)
\\b` }, { captures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" }, 3: { name: "entity.name.type.instance.jsdoc" }, 4: { name: "punctuation.definition.bracket.angle.begin.jsdoc" }, 5: { name: "constant.other.email.link.underline.jsdoc" }, 6: { name: "punctuation.definition.bracket.angle.end.jsdoc" } }, match: `(?x)
((@)author)
\\s+
(
[^@\\s<>*/]
(?:[^@<>*/]|\\*[^/])*
)
(?:
\\s*
(<)
([^>\\s]+)
(>)
)?` }, { captures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" }, 3: { name: "entity.name.type.instance.jsdoc" }, 4: { name: "keyword.operator.control.jsdoc" }, 5: { name: "entity.name.type.instance.jsdoc" } }, match: `(?x)
((@)borrows) \\s+
((?:[^@\\s*/]|\\*[^/])+)
\\s+ (as) \\s+
((?:[^@\\s*/]|\\*[^/])+)` }, { begin: "((@)example)\\s+", beginCaptures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" } }, end: "(?=@|\\*/)", name: "meta.example.jsdoc", patterns: [{ match: "^\\s\\*\\s+" }, { begin: "\\G(<)caption(>)", beginCaptures: { 0: { name: "entity.name.tag.inline.jsdoc" }, 1: { name: "punctuation.definition.bracket.angle.begin.jsdoc" }, 2: { name: "punctuation.definition.bracket.angle.end.jsdoc" } }, contentName: "constant.other.description.jsdoc", end: "(</)caption(>)|(?=\\*/)", endCaptures: { 0: { name: "entity.name.tag.inline.jsdoc" }, 1: { name: "punctuation.definition.bracket.angle.begin.jsdoc" }, 2: { name: "punctuation.definition.bracket.angle.end.jsdoc" } } }, { captures: { 0: { name: "source.embedded.ts" } }, match: "[^\\s@*](?:[^*]|\\*[^/])*" }] }, { captures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" }, 3: { name: "constant.language.symbol-type.jsdoc" } }, match: "(?x) ((@)kind) \\s+ (class|constant|event|external|file|function|member|mixin|module|namespace|typedef) \\b" }, { captures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" }, 3: { name: "variable.other.link.underline.jsdoc" }, 4: { name: "entity.name.type.instance.jsdoc" } }, match: `(?x)
((@)see)
\\s+
(?:

(
(?=https?://)
(?:[^\\s*]|\\*[^/])+
)
|

(
(?!

https?://
|

(?:\\[[^\\[\\]]*\\])?
{@(?:link|linkcode|linkplain|tutorial)\\b
)

(?:[^@\\s*/]|\\*[^/])+
)
)` }, { captures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" }, 3: { name: "variable.other.jsdoc" } }, match: `(?x)
((@)template)
\\s+
# One or more valid identifiers
(
[A-Za-z_$]
[\\w$.\\[\\]]*
(?:
\\s* , \\s*
[A-Za-z_$]
[\\w$.\\[\\]]*
)*
)` }, { begin: "(?x)((@)template)\\s+(?={)", beginCaptures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" } }, end: "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])", patterns: [{ include: "#jsdoctype" }, { match: "([A-Za-z_$][\\w$.\\[\\]]*)", name: "variable.other.jsdoc" }] }, { captures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" }, 3: { name: "variable.other.jsdoc" } }, match: `(?x)
(
(@)
(?:arg|argument|const|constant|member|namespace|param|var)
)
\\s+
(
[A-Za-z_$]
[\\w$.\\[\\]]*
)` }, { begin: "((@)typedef)\\s+(?={)", beginCaptures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" } }, end: "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])", patterns: [{ include: "#jsdoctype" }, { match: "(?:[^@\\s*/]|\\*[^/])+", name: "entity.name.type.instance.jsdoc" }] }, { begin: "((@)(?:arg|argument|const|constant|member|namespace|param|prop|property|var))\\s+(?={)", beginCaptures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" } }, end: "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])", patterns: [{ include: "#jsdoctype" }, { match: "([A-Za-z_$][\\w$.\\[\\]]*)", name: "variable.other.jsdoc" }, { captures: { 1: { name: "punctuation.definition.optional-value.begin.bracket.square.jsdoc" }, 2: { name: "keyword.operator.assignment.jsdoc" }, 3: { name: "source.embedded.ts" }, 4: { name: "punctuation.definition.optional-value.end.bracket.square.jsdoc" }, 5: { name: "invalid.illegal.syntax.jsdoc" } }, match: `(?x)
(\\[)\\s*
[\\w$]+
(?:
(?:\\[\\])?
\\.
[\\w$]+
)*
(?:
\\s*
(=)
\\s*
(

(?>
"(?:(?:\\*(?!/))|(?:\\\\(?!"))|[^*\\\\])*?" |
'(?:(?:\\*(?!/))|(?:\\\\(?!'))|[^*\\\\])*?' |
\\[ (?:(?:\\*(?!/))|[^*])*? \\] |
(?:(?:\\*(?!/))|\\s(?!\\s*\\])|\\[.*?(?:\\]|(?=\\*/))|[^*\\s\\[\\]])*
)*
)
)?
\\s*(?:(\\])((?:[^*\\s]|\\*[^\\s/])+)?|(?=\\*/))`, name: "variable.other.jsdoc" }] }, { begin: `(?x)
(
(@)
(?:define|enum|exception|export|extends|lends|implements|modifies
|namespace|private|protected|returns?|satisfies|suppress|this|throws|type
|yields?)
)
\\s+(?={)`, beginCaptures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" } }, end: "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])", patterns: [{ include: "#jsdoctype" }] }, { captures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" }, 3: { name: "entity.name.type.instance.jsdoc" } }, match: `(?x)
(
(@)
(?:alias|augments|callback|constructs|emits|event|fires|exports?
|extends|external|function|func|host|lends|listens|interface|memberof!?
|method|module|mixes|mixin|name|requires|see|this|typedef|uses)
)
\\s+
(
(?:
[^{}@\\s*] | \\*[^/]
)+
)` }, { begin: `((@)(?:default(?:value)?|license|version))\\s+(([''"]))`, beginCaptures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" }, 3: { name: "variable.other.jsdoc" }, 4: { name: "punctuation.definition.string.begin.jsdoc" } }, contentName: "variable.other.jsdoc", end: "(\\3)|(?=$|\\*/)", endCaptures: { 0: { name: "variable.other.jsdoc" }, 1: { name: "punctuation.definition.string.end.jsdoc" } } }, { captures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" }, 3: { name: "variable.other.jsdoc" } }, match: "((@)(?:default(?:value)?|license|tutorial|variation|version))\\s+([^\\s*]+)" }, { captures: { 1: { name: "punctuation.definition.block.tag.jsdoc" } }, match: "(?x) (@) (?:abstract|access|alias|api|arg|argument|async|attribute|augments|author|beta|borrows|bubbles |callback|chainable|class|classdesc|code|config|const|constant|constructor|constructs|copyright |default|defaultvalue|define|deprecated|desc|description|dict|emits|enum|event|example|exception |exports?|extends|extension(?:_?for)?|external|externs|file|fileoverview|final|fires|for|func |function|generator|global|hideconstructor|host|ignore|implements|implicitCast|inherit[Dd]oc |inner|instance|interface|internal|kind|lends|license|listens|main|member|memberof!?|method |mixes|mixins?|modifies|module|name|namespace|noalias|nocollapse|nocompile|nosideeffects |override|overview|package|param|polymer(?:Behavior)?|preserve|private|prop|property|protected |public|read[Oo]nly|record|require[ds]|returns?|see|since|static|struct|submodule|summary |suppress|template|this|throws|todo|tutorial|type|typedef|unrestricted|uses|var|variation |version|virtual|writeOnce|yields?) \\b", name: "storage.type.class.jsdoc" }, { include: "#inline-tags" }, { captures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" } }, match: "((@)(?:[_$[:alpha:]][_$[:alnum:]]*))(?=\\s+)" }] }, "enum-declaration": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?(?:\\b(const)\\s+)?\\b(enum)\\s+([_$[:alpha:]][_$[:alnum:]]*)", beginCaptures: { 1: { name: "keyword.control.export.ts" }, 2: { name: "storage.modifier.ts" }, 3: { name: "storage.modifier.ts" }, 4: { name: "storage.type.enum.ts" }, 5: { name: "entity.name.type.enum.ts" } }, end: "(?<=\\})", name: "meta.enum.declaration.ts", patterns: [{ include: "#comment" }, { begin: "\\{", beginCaptures: { 0: { name: "punctuation.definition.block.ts" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.block.ts" } }, patterns: [{ include: "#comment" }, { begin: "([_$[:alpha:]][_$[:alnum:]]*)", beginCaptures: { 0: { name: "variable.other.enummember.ts" } }, end: "(?=,|\\}|$)", patterns: [{ include: "#comment" }, { include: "#variable-initializer" }] }, { begin: "(?=((\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\])))", end: "(?=,|\\}|$)", patterns: [{ include: "#string" }, { include: "#array-literal" }, { include: "#comment" }, { include: "#variable-initializer" }] }, { include: "#punctuation-comma" }] }] }, "export-declaration": { patterns: [{ captures: { 1: { name: "keyword.control.export.ts" }, 2: { name: "keyword.control.as.ts" }, 3: { name: "storage.type.namespace.ts" }, 4: { name: "entity.name.type.module.ts" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(export)\\s+(as)\\s+(namespace)\\s+([_$[:alpha:]][_$[:alnum:]]*)" }, { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(export)(?:\\s+(type))?(?:(?:\\s*(=))|(?:\\s+(default)(?=\\s+)))", beginCaptures: { 1: { name: "keyword.control.export.ts" }, 2: { name: "keyword.control.type.ts" }, 3: { name: "keyword.operator.assignment.ts" }, 4: { name: "keyword.control.default.ts" } }, end: "(?=$|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))", name: "meta.export.default.ts", patterns: [{ include: "#interface-declaration" }, { include: "#expression" }] }, { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(export)(?:\\s+(type))?\\b(?!(\\$)|(\\s*:))((?=\\s*[\\{*])|((?=\\s*[_$[:alpha:]][_$[:alnum:]]*(\\s|,))(?!\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b)))", beginCaptures: { 1: { name: "keyword.control.export.ts" }, 2: { name: "keyword.control.type.ts" } }, end: "(?=$|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))", name: "meta.export.ts", patterns: [{ include: "#import-export-declaration" }] }] }, expression: { patterns: [{ include: "#expressionWithoutIdentifiers" }, { include: "#identifiers" }, { include: "#expressionPunctuations" }] }, "expression-inside-possibly-arrow-parens": { patterns: [{ include: "#expressionWithoutIdentifiers" }, { include: "#comment" }, { include: "#string" }, { include: "#decorator" }, { include: "#destructuring-parameter" }, { captures: { 1: { name: "storage.modifier.ts" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(override|public|protected|private|readonly)\\s+(?=(override|public|protected|private|readonly)\\s+)" }, { captures: { 1: { name: "storage.modifier.ts" }, 2: { name: "keyword.operator.rest.ts" }, 3: { name: "entity.name.function.ts variable.language.this.ts" }, 4: { name: "entity.name.function.ts" }, 5: { name: "keyword.operator.optional.ts" } }, match: `(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(override|public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*(\\??)(?=\\s*
# function assignment |
(=\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |

# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
)) |
# typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>
(:\\s*(
(<) |
([(]\\s*(
([)]) |
(\\.\\.\\.) |
([_$[:alnum:]]+\\s*(
([:,?=])|
([)]\\s*=>)
))
))
)) |
(:\\s*(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Function(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |
(:\\s*((<\\s*$)|((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))) |
(:\\s*(=>|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(<[^<>]*>)|[^<>(),=])+=\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |

# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
)))` }, { captures: { 1: { name: "storage.modifier.ts" }, 2: { name: "keyword.operator.rest.ts" }, 3: { name: "variable.parameter.ts variable.language.this.ts" }, 4: { name: "variable.parameter.ts" }, 5: { name: "keyword.operator.optional.ts" } }, match: "(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(override|public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*(\\??)(?=\\s*[:,]|$)" }, { include: "#type-annotation" }, { include: "#variable-initializer" }, { match: ",", name: "punctuation.separator.parameter.ts" }, { include: "#identifiers" }, { include: "#expressionPunctuations" }] }, "expression-operators": { patterns: [{ match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(await)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.control.flow.ts" }, { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(yield)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?=\\s*\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*\\*)", beginCaptures: { 1: { name: "keyword.control.flow.ts" } }, end: "\\*", endCaptures: { 0: { name: "keyword.generator.asterisk.ts" } }, patterns: [{ include: "#comment" }] }, { captures: { 1: { name: "keyword.control.flow.ts" }, 2: { name: "keyword.generator.asterisk.ts" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(yield)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?:\\s*(\\*))?" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))delete(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.operator.expression.delete.ts" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))in(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?!\\()", name: "keyword.operator.expression.in.ts" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))of(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?!\\()", name: "keyword.operator.expression.of.ts" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))instanceof(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.operator.expression.instanceof.ts" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))new(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.operator.new.ts" }, { include: "#typeof-operator" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))void(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.operator.expression.void.ts" }, { captures: { 1: { name: "keyword.control.as.ts" }, 2: { name: "storage.modifier.ts" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(as)\\s+(const)(?=\\s*($|[;,:})\\]]))" }, { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(as)|(satisfies))\\s+", beginCaptures: { 1: { name: "keyword.control.as.ts" }, 2: { name: "keyword.control.satisfies.ts" } }, end: "(?=^|[;),}\\]:?\\-\\+\\>]|\\|\\||\\&\\&|\\!\\=\\=|$|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(as|satisfies)\\s+)|(\\s+\\<))", patterns: [{ include: "#type" }] }, { match: "\\.\\.\\.", name: "keyword.operator.spread.ts" }, { match: "\\*=|(?<!\\()/=|%=|\\+=|\\-=", name: "keyword.operator.assignment.compound.ts" }, { match: "\\&=|\\^=|<<=|>>=|>>>=|\\|=", name: "keyword.operator.assignment.compound.bitwise.ts" }, { match: "<<|>>>|>>", name: "keyword.operator.bitwise.shift.ts" }, { match: "===|!==|==|!=", name: "keyword.operator.comparison.ts" }, { match: "<=|>=|<>|<|>", name: "keyword.operator.relational.ts" }, { captures: { 1: { name: "keyword.operator.logical.ts" }, 2: { name: "keyword.operator.assignment.compound.ts" }, 3: { name: "keyword.operator.arithmetic.ts" } }, match: "(?<=[_$[:alnum:]])(\\!)\\s*(?:(/=)|(?:(/)(?![/*])))" }, { match: "\\!|&&|\\|\\||\\?\\?", name: "keyword.operator.logical.ts" }, { match: "\\&|~|\\^|\\|", name: "keyword.operator.bitwise.ts" }, { match: "\\=", name: "keyword.operator.assignment.ts" }, { match: "--", name: "keyword.operator.decrement.ts" }, { match: "\\+\\+", name: "keyword.operator.increment.ts" }, { match: "%|\\*|/|-|\\+", name: "keyword.operator.arithmetic.ts" }, { begin: "(?<=[_$[:alnum:])\\]])\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)+(?:(/=)|(?:(/)(?![/*]))))", end: "(?:(/=)|(?:(/)(?!\\*([^\\*]|(\\*[^\\/]))*\\*\\/)))", endCaptures: { 1: { name: "keyword.operator.assignment.compound.ts" }, 2: { name: "keyword.operator.arithmetic.ts" } }, patterns: [{ include: "#comment" }] }, { captures: { 1: { name: "keyword.operator.assignment.compound.ts" }, 2: { name: "keyword.operator.arithmetic.ts" } }, match: "(?<=[_$[:alnum:])\\]])\\s*(?:(/=)|(?:(/)(?![/*])))" }] }, expressionPunctuations: { patterns: [{ include: "#punctuation-comma" }, { include: "#punctuation-accessor" }] }, expressionWithoutIdentifiers: { patterns: [{ include: "#string" }, { include: "#regex" }, { include: "#comment" }, { include: "#function-expression" }, { include: "#class-expression" }, { include: "#arrow-function" }, { include: "#paren-expression-possibly-arrow" }, { include: "#cast" }, { include: "#ternary-expression" }, { include: "#new-expr" }, { include: "#instanceof-expr" }, { include: "#object-literal" }, { include: "#expression-operators" }, { include: "#function-call" }, { include: "#literal" }, { include: "#support-objects" }, { include: "#paren-expression" }] }, "field-declaration": { begin: `(?x)(?<!\\()(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(readonly)\\s+)?(?=\\s*((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$))|(\\#?[_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(?:(?:(\\?)|(\\!))\\s*)?(=|:|;|,|\\}|$))`, beginCaptures: { 1: { name: "storage.modifier.ts" } }, end: `(?x)(?=\\}|;|,|$|(^(?!\\s*((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$))|(\\#?[_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(?:(?:(\\?)|(\\!))\\s*)?(=|:|;|,|$))))|(?<=\\})`, name: "meta.field.declaration.ts", patterns: [{ include: "#variable-initializer" }, { include: "#type-annotation" }, { include: "#string" }, { include: "#array-literal" }, { include: "#numeric-literal" }, { include: "#comment" }, { captures: { 1: { name: "meta.definition.property.ts entity.name.function.ts" }, 2: { name: "keyword.operator.optional.ts" }, 3: { name: "keyword.operator.definiteassignment.ts" } }, match: `(?x)(\\#?[_$[:alpha:]][_$[:alnum:]]*)(?:(\\?)|(\\!))?(?=\\s*\\s*
# function assignment |
(=\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |

# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
)) |
# typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>
(:\\s*(
(<) |
([(]\\s*(
([)]) |
(\\.\\.\\.) |
([_$[:alnum:]]+\\s*(
([:,?=])|
([)]\\s*=>)
))
))
)) |
(:\\s*(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Function(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |
(:\\s*((<\\s*$)|((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))) |
(:\\s*(=>|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(<[^<>]*>)|[^<>(),=])+=\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |

# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
)))` }, { match: "\\#?[_$[:alpha:]][_$[:alnum:]]*", name: "meta.definition.property.ts variable.object.property.ts" }, { match: "\\?", name: "keyword.operator.optional.ts" }, { match: "\\!", name: "keyword.operator.definiteassignment.ts" }] }, "for-loop": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))for(?=((\\s+|(\\s*\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*))await)?\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)?(\\())", beginCaptures: { 0: { name: "keyword.control.loop.ts" } }, end: "(?<=\\))", patterns: [{ include: "#comment" }, { match: "await", name: "keyword.control.loop.ts" }, { begin: "\\(", beginCaptures: { 0: { name: "meta.brace.round.ts" } }, end: "\\)", endCaptures: { 0: { name: "meta.brace.round.ts" } }, patterns: [{ include: "#var-expr" }, { include: "#expression" }, { include: "#punctuation-semicolon" }] }] }, "function-body": { patterns: [{ include: "#comment" }, { include: "#type-parameters" }, { include: "#function-parameters" }, { include: "#return-type" }, { include: "#type-function-return-type" }, { include: "#decl-block" }, { match: "\\*", name: "keyword.generator.asterisk.ts" }] }, "function-call": { patterns: [{ begin: "(?=(((([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\\)]))\\s*(?:(\\?\\.\\s*)|(\\!))?((<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?\\())", end: "(?<=\\))(?!(((([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\\)]))\\s*(?:(\\?\\.\\s*)|(\\!))?((<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?\\())", patterns: [{ begin: "(?=(([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))", end: "(?=\\s*(?:(\\?\\.\\s*)|(\\!))?((<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?\\())", name: "meta.function-call.ts", patterns: [{ include: "#function-call-target" }] }, { include: "#comment" }, { include: "#function-call-optionals" }, { include: "#type-arguments" }, { include: "#paren-expression" }] }, { begin: "(?=(((([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\\)]))(<\\s*[\\{\\[\\(]\\s*$))", end: "(?<=\\>)(?!(((([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\\)]))(<\\s*[\\{\\[\\(]\\s*$))", patterns: [{ begin: "(?=(([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))", end: "(?=(<\\s*[\\{\\[\\(]\\s*$))", name: "meta.function-call.ts", patterns: [{ include: "#function-call-target" }] }, { include: "#comment" }, { include: "#function-call-optionals" }, { include: "#type-arguments" }] }] }, "function-call-optionals": { patterns: [{ match: "\\?\\.", name: "meta.function-call.ts punctuation.accessor.optional.ts" }, { match: "\\!", name: "meta.function-call.ts keyword.operator.definiteassignment.ts" }] }, "function-call-target": { patterns: [{ include: "#support-function-call-identifiers" }, { match: "(\\#?[_$[:alpha:]][_$[:alnum:]]*)", name: "entity.name.function.ts" }] }, "function-declaration": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?(?:(async)\\s+)?(function\\b)(?:\\s*(\\*))?(?:(?:\\s+|(?<=\\*))([_$[:alpha:]][_$[:alnum:]]*))?\\s*", beginCaptures: { 1: { name: "keyword.control.export.ts" }, 2: { name: "storage.modifier.ts" }, 3: { name: "storage.modifier.async.ts" }, 4: { name: "storage.type.function.ts" }, 5: { name: "keyword.generator.asterisk.ts" }, 6: { name: "meta.definition.function.ts entity.name.function.ts" } }, end: "(?=;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))|(?<=\\})", name: "meta.function.ts", patterns: [{ include: "#function-name" }, { include: "#function-body" }] }, "function-expression": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(async)\\s+)?(function\\b)(?:\\s*(\\*))?(?:(?:\\s+|(?<=\\*))([_$[:alpha:]][_$[:alnum:]]*))?\\s*", beginCaptures: { 1: { name: "storage.modifier.async.ts" }, 2: { name: "storage.type.function.ts" }, 3: { name: "keyword.generator.asterisk.ts" }, 4: { name: "meta.definition.function.ts entity.name.function.ts" } }, end: "(?=;)|(?<=\\})", name: "meta.function.expression.ts", patterns: [{ include: "#function-name" }, { include: "#single-line-comment-consuming-line-ending" }, { include: "#function-body" }] }, "function-name": { match: "[_$[:alpha:]][_$[:alnum:]]*", name: "meta.definition.function.ts entity.name.function.ts" }, "function-parameters": { begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.parameters.begin.ts" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.parameters.end.ts" } }, name: "meta.parameters.ts", patterns: [{ include: "#function-parameters-body" }] }, "function-parameters-body": { patterns: [{ include: "#comment" }, { include: "#string" }, { include: "#decorator" }, { include: "#destructuring-parameter" }, { include: "#parameter-name" }, { include: "#parameter-type-annotation" }, { include: "#variable-initializer" }, { match: ",", name: "punctuation.separator.parameter.ts" }] }, identifiers: { patterns: [{ include: "#object-identifiers" }, { captures: { 1: { name: "punctuation.accessor.ts" }, 2: { name: "punctuation.accessor.optional.ts" }, 3: { name: "entity.name.function.ts" } }, match: `(?x)(?:(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*)?([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*=\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |

# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
))` }, { captures: { 1: { name: "punctuation.accessor.ts" }, 2: { name: "punctuation.accessor.optional.ts" }, 3: { name: "variable.other.constant.property.ts" } }, match: "(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(\\#?[[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])" }, { captures: { 1: { name: "punctuation.accessor.ts" }, 2: { name: "punctuation.accessor.optional.ts" }, 3: { name: "variable.other.property.ts" } }, match: "(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*)" }, { match: "([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])", name: "variable.other.constant.ts" }, { match: "[_$[:alpha:]][_$[:alnum:]]*", name: "variable.other.readwrite.ts" }] }, "if-statement": { patterns: [{ begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?=\\bif\\s*(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))\\s*(?!\\{))", end: "(?=;|$|\\})", patterns: [{ include: "#comment" }, { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(if)\\s*(\\()", beginCaptures: { 1: { name: "keyword.control.conditional.ts" }, 2: { name: "meta.brace.round.ts" } }, end: "\\)", endCaptures: { 0: { name: "meta.brace.round.ts" } }, patterns: [{ include: "#expression" }] }, { begin: "(?<=\\))\\s*\\/(?![\\/*])(?=(?:[^\\/\\\\\\[]|\\\\.|\\[([^\\]\\\\]|\\\\.)*\\])+\\/([dgimsuy]+|(?![\\/\\*])|(?=\\/\\*))(?!\\s*[a-zA-Z0-9_$]))", beginCaptures: { 0: { name: "punctuation.definition.string.begin.ts" } }, end: "(/)([dgimsuy]*)", endCaptures: { 1: { name: "punctuation.definition.string.end.ts" }, 2: { name: "keyword.other.ts" } }, name: "string.regexp.ts", patterns: [{ include: "#regexp" }] }, { include: "#statements" }] }] }, "import-declaration": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(import)(?:\\s+(type)(?!\\s+from))?(?!\\s*[:\\(])(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", beginCaptures: { 1: { name: "keyword.control.export.ts" }, 2: { name: "storage.modifier.ts" }, 3: { name: "keyword.control.import.ts" }, 4: { name: "keyword.control.type.ts" } }, end: "(?<!^import|[^\\._$[:alnum:]]import)(?=;|$|^)", name: "meta.import.ts", patterns: [{ include: "#single-line-comment-consuming-line-ending" }, { include: "#comment" }, { include: "#string" }, { begin: `(?<=^import|[^\\._$[:alnum:]]import)(?!\\s*["'])`, end: "\\bfrom\\b", endCaptures: { 0: { name: "keyword.control.from.ts" } }, patterns: [{ include: "#import-export-declaration" }] }, { include: "#import-export-declaration" }] }, "import-equals-declaration": { patterns: [{ begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(import)(?:\\s+(type))?\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*(=)\\s*(require)\\s*(\\()", beginCaptures: { 1: { name: "keyword.control.export.ts" }, 2: { name: "storage.modifier.ts" }, 3: { name: "keyword.control.import.ts" }, 4: { name: "keyword.control.type.ts" }, 5: { name: "variable.other.readwrite.alias.ts" }, 6: { name: "keyword.operator.assignment.ts" }, 7: { name: "keyword.control.require.ts" }, 8: { name: "meta.brace.round.ts" } }, end: "\\)", endCaptures: { 0: { name: "meta.brace.round.ts" } }, name: "meta.import-equals.external.ts", patterns: [{ include: "#comment" }, { include: "#string" }] }, { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(import)(?:\\s+(type))?\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*(=)\\s*(?!require\\b)", beginCaptures: { 1: { name: "keyword.control.export.ts" }, 2: { name: "storage.modifier.ts" }, 3: { name: "keyword.control.import.ts" }, 4: { name: "keyword.control.type.ts" }, 5: { name: "variable.other.readwrite.alias.ts" }, 6: { name: "keyword.operator.assignment.ts" } }, end: "(?=;|$|^)", name: "meta.import-equals.internal.ts", patterns: [{ include: "#single-line-comment-consuming-line-ending" }, { include: "#comment" }, { captures: { 1: { name: "entity.name.type.module.ts" }, 2: { name: "punctuation.accessor.ts" }, 3: { name: "punctuation.accessor.optional.ts" } }, match: "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))" }, { match: "([_$[:alpha:]][_$[:alnum:]]*)", name: "variable.other.readwrite.ts" }] }] }, "import-export-assert-clause": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(with)|(assert))\\s*(\\{)", beginCaptures: { 1: { name: "keyword.control.with.ts" }, 2: { name: "keyword.control.assert.ts" }, 3: { name: "punctuation.definition.block.ts" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.block.ts" } }, patterns: [{ include: "#comment" }, { include: "#string" }, { match: "(?:[_$[:alpha:]][_$[:alnum:]]*)\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*:)", name: "meta.object-literal.key.ts" }, { match: ":", name: "punctuation.separator.key-value.ts" }] }, "import-export-block": { begin: "\\{", beginCaptures: { 0: { name: "punctuation.definition.block.ts" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.block.ts" } }, name: "meta.block.ts", patterns: [{ include: "#import-export-clause" }] }, "import-export-clause": { patterns: [{ include: "#comment" }, { captures: { 1: { name: "keyword.control.type.ts" }, 2: { name: "keyword.control.default.ts" }, 3: { name: "constant.language.import-export-all.ts" }, 4: { name: "variable.other.readwrite.ts" }, 5: { name: "keyword.control.as.ts" }, 6: { name: "keyword.control.default.ts" }, 7: { name: "variable.other.readwrite.alias.ts" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(?:(\\btype)\\s+)?(?:(\\bdefault)|(\\*)|(\\b[_$[:alpha:]][_$[:alnum:]]*)))\\s+(as)\\s+(?:(default(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))|([_$[:alpha:]][_$[:alnum:]]*))" }, { include: "#punctuation-comma" }, { match: "\\*", name: "constant.language.import-export-all.ts" }, { match: "\\b(default)\\b", name: "keyword.control.default.ts" }, { captures: { 1: { name: "keyword.control.type.ts" }, 2: { name: "variable.other.readwrite.alias.ts" } }, match: "(?:(\\btype)\\s+)?([_$[:alpha:]][_$[:alnum:]]*)" }] }, "import-export-declaration": { patterns: [{ include: "#comment" }, { include: "#string" }, { include: "#import-export-block" }, { match: "\\bfrom\\b", name: "keyword.control.from.ts" }, { include: "#import-export-assert-clause" }, { include: "#import-export-clause" }] }, "indexer-declaration": { begin: "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(readonly)\\s*)?\\s*(\\[)\\s*([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=:)", beginCaptures: { 1: { name: "storage.modifier.ts" }, 2: { name: "meta.brace.square.ts" }, 3: { name: "variable.parameter.ts" } }, end: "(\\])\\s*(\\?\\s*)?|$", endCaptures: { 1: { name: "meta.brace.square.ts" }, 2: { name: "keyword.operator.optional.ts" } }, name: "meta.indexer.declaration.ts", patterns: [{ include: "#type-annotation" }] }, "indexer-mapped-type-declaration": { begin: "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))([+-])?(readonly)\\s*)?\\s*(\\[)\\s*([_$[:alpha:]][_$[:alnum:]]*)\\s+(in)\\s+", beginCaptures: { 1: { name: "keyword.operator.type.modifier.ts" }, 2: { name: "storage.modifier.ts" }, 3: { name: "meta.brace.square.ts" }, 4: { name: "entity.name.type.ts" }, 5: { name: "keyword.operator.expression.in.ts" } }, end: "(\\])([+-])?\\s*(\\?\\s*)?|$", endCaptures: { 1: { name: "meta.brace.square.ts" }, 2: { name: "keyword.operator.type.modifier.ts" }, 3: { name: "keyword.operator.optional.ts" } }, name: "meta.indexer.mappedtype.declaration.ts", patterns: [{ captures: { 1: { name: "keyword.control.as.ts" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(as)\\s+" }, { include: "#type" }] }, "inline-tags": { patterns: [{ captures: { 1: { name: "punctuation.definition.bracket.square.begin.jsdoc" }, 2: { name: "punctuation.definition.bracket.square.end.jsdoc" } }, match: "(\\[)[^\\]]+(\\])(?={@(?:link|linkcode|linkplain|tutorial))", name: "constant.other.description.jsdoc" }, { begin: "({)((@)(?:link(?:code|plain)?|tutorial))\\s*", beginCaptures: { 1: { name: "punctuation.definition.bracket.curly.begin.jsdoc" }, 2: { name: "storage.type.class.jsdoc" }, 3: { name: "punctuation.definition.inline.tag.jsdoc" } }, end: "}|(?=\\*/)", endCaptures: { 0: { name: "punctuation.definition.bracket.curly.end.jsdoc" } }, name: "entity.name.type.instance.jsdoc", patterns: [{ captures: { 1: { name: "variable.other.link.underline.jsdoc" }, 2: { name: "punctuation.separator.pipe.jsdoc" } }, match: "\\G((?=https?://)(?:[^|}\\s*]|\\*[/])+)(\\|)?" }, { captures: { 1: { name: "variable.other.description.jsdoc" }, 2: { name: "punctuation.separator.pipe.jsdoc" } }, match: "\\G((?:[^{}@\\s|*]|\\*[^/])+)(\\|)?" }] }] }, "instanceof-expr": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(instanceof)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", beginCaptures: { 1: { name: "keyword.operator.expression.instanceof.ts" } }, end: "(?<=\\))|(?=[;),}\\]:?\\-\\+\\>]|\\|\\||\\&\\&|\\!\\=\\=|$|(===|!==|==|!=)|(([\\&\\~\\^\\|]\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s+instanceof(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))function((\\s+[_$[:alpha:]][_$[:alnum:]]*)|(\\s*[\\(]))))", patterns: [{ include: "#type" }] }, "interface-declaration": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(?:(abstract)\\s+)?\\b(interface)\\b(?=\\s+|/[/*])", beginCaptures: { 1: { name: "keyword.control.export.ts" }, 2: { name: "storage.modifier.ts" }, 3: { name: "storage.modifier.ts" }, 4: { name: "storage.type.interface.ts" } }, end: "(?<=\\})", name: "meta.interface.ts", patterns: [{ include: "#comment" }, { include: "#class-or-interface-heritage" }, { captures: { 0: { name: "entity.name.type.interface.ts" } }, match: "[_$[:alpha:]][_$[:alnum:]]*" }, { include: "#type-parameters" }, { include: "#class-or-interface-body" }] }, jsdoctype: { patterns: [{ begin: "\\G({)", beginCaptures: { 0: { name: "entity.name.type.instance.jsdoc" }, 1: { name: "punctuation.definition.bracket.curly.begin.jsdoc" } }, contentName: "entity.name.type.instance.jsdoc", end: "((}))\\s*|(?=\\*/)", endCaptures: { 1: { name: "entity.name.type.instance.jsdoc" }, 2: { name: "punctuation.definition.bracket.curly.end.jsdoc" } }, patterns: [{ include: "#brackets" }] }] }, label: { patterns: [{ begin: "([_$[:alpha:]][_$[:alnum:]]*)\\s*(:)(?=\\s*\\{)", beginCaptures: { 1: { name: "entity.name.label.ts" }, 2: { name: "punctuation.separator.label.ts" } }, end: "(?<=\\})", patterns: [{ include: "#decl-block" }] }, { captures: { 1: { name: "entity.name.label.ts" }, 2: { name: "punctuation.separator.label.ts" } }, match: "([_$[:alpha:]][_$[:alnum:]]*)\\s*(:)" }] }, literal: { patterns: [{ include: "#numeric-literal" }, { include: "#boolean-literal" }, { include: "#null-literal" }, { include: "#undefined-literal" }, { include: "#numericConstant-literal" }, { include: "#array-literal" }, { include: "#this-literal" }, { include: "#super-literal" }] }, "method-declaration": { patterns: [{ begin: "(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(override)\\s+)?(?:\\b(public|private|protected)\\s+)?(?:\\b(abstract)\\s+)?(?:\\b(async)\\s+)?\\s*\\b(constructor)\\b(?!:)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", beginCaptures: { 1: { name: "storage.modifier.ts" }, 2: { name: "storage.modifier.ts" }, 3: { name: "storage.modifier.ts" }, 4: { name: "storage.modifier.async.ts" }, 5: { name: "storage.type.ts" } }, end: "(?=\\}|;|,|$)|(?<=\\})", name: "meta.method.declaration.ts", patterns: [{ include: "#method-declaration-name" }, { include: "#function-body" }] }, { begin: "(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(override)\\s+)?(?:\\b(public|private|protected)\\s+)?(?:\\b(abstract)\\s+)?(?:\\b(async)\\s+)?(?:(?:\\s*\\b(new)\\b(?!:)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))|(?:(\\*)\\s*)?)(?=\\s*((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*))?[\\(])", beginCaptures: { 1: { name: "storage.modifier.ts" }, 2: { name: "storage.modifier.ts" }, 3: { name: "storage.modifier.ts" }, 4: { name: "storage.modifier.async.ts" }, 5: { name: "keyword.operator.new.ts" }, 6: { name: "keyword.generator.asterisk.ts" } }, end: "(?=\\}|;|,|$)|(?<=\\})", name: "meta.method.declaration.ts", patterns: [{ include: "#method-declaration-name" }, { include: "#function-body" }] }, { begin: `(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(override)\\s+)?(?:\\b(public|private|protected)\\s+)?(?:\\b(abstract)\\s+)?(?:\\b(async)\\s+)?(?:\\b(get|set)\\s+)?(?:(\\*)\\s*)?(?=\\s*(((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??))\\s*((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*))?[\\(])`, beginCaptures: { 1: { name: "storage.modifier.ts" }, 2: { name: "storage.modifier.ts" }, 3: { name: "storage.modifier.ts" }, 4: { name: "storage.modifier.async.ts" }, 5: { name: "storage.type.property.ts" }, 6: { name: "keyword.generator.asterisk.ts" } }, end: "(?=\\}|;|,|$)|(?<=\\})", name: "meta.method.declaration.ts", patterns: [{ include: "#method-declaration-name" }, { include: "#function-body" }] }] }, "method-declaration-name": { begin: `(?x)(?=((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??)\\s*[\\(\\<])`, end: "(?=\\(|\\<)", patterns: [{ include: "#string" }, { include: "#array-literal" }, { include: "#numeric-literal" }, { match: "[_$[:alpha:]][_$[:alnum:]]*", name: "meta.definition.method.ts entity.name.function.ts" }, { match: "\\?", name: "keyword.operator.optional.ts" }] }, "namespace-declaration": { begin: "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(namespace|module)\\s+(?=[_$[:alpha:]\"'`]))", beginCaptures: { 1: { name: "keyword.control.export.ts" }, 2: { name: "storage.modifier.ts" }, 3: { name: "storage.type.namespace.ts" } }, end: "(?<=\\})|(?=;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))", name: "meta.namespace.declaration.ts", patterns: [{ include: "#comment" }, { include: "#string" }, { match: "([_$[:alpha:]][_$[:alnum:]]*)", name: "entity.name.type.module.ts" }, { include: "#punctuation-accessor" }, { include: "#decl-block" }] }, "new-expr": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(new)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", beginCaptures: { 1: { name: "keyword.operator.new.ts" } }, end: "(?<=\\))|(?=[;),}\\]:?\\-\\+\\>]|\\|\\||\\&\\&|\\!\\=\\=|$|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))new(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))function((\\s+[_$[:alpha:]][_$[:alnum:]]*)|(\\s*[\\(]))))", name: "new.expr.ts", patterns: [{ include: "#expression" }] }, "null-literal": { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))null(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "constant.language.null.ts" }, "numeric-literal": { patterns: [{ captures: { 1: { name: "storage.type.numeric.bigint.ts" } }, match: "\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$)", name: "constant.numeric.hex.ts" }, { captures: { 1: { name: "storage.type.numeric.bigint.ts" } }, match: "\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$)", name: "constant.numeric.binary.ts" }, { captures: { 1: { name: "storage.type.numeric.bigint.ts" } }, match: "\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$)", name: "constant.numeric.octal.ts" }, { captures: { 0: { name: "constant.numeric.decimal.ts" }, 1: { name: "meta.delimiter.decimal.period.ts" }, 2: { name: "storage.type.numeric.bigint.ts" }, 3: { name: "meta.delimiter.decimal.period.ts" }, 4: { name: "storage.type.numeric.bigint.ts" }, 5: { name: "meta.delimiter.decimal.period.ts" }, 6: { name: "storage.type.numeric.bigint.ts" }, 7: { name: "storage.type.numeric.bigint.ts" }, 8: { name: "meta.delimiter.decimal.period.ts" }, 9: { name: "storage.type.numeric.bigint.ts" }, 10: { name: "meta.delimiter.decimal.period.ts" }, 11: { name: "storage.type.numeric.bigint.ts" }, 12: { name: "meta.delimiter.decimal.period.ts" }, 13: { name: "storage.type.numeric.bigint.ts" }, 14: { name: "storage.type.numeric.bigint.ts" } }, match: `(?x)
(?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$)` }] }, "numericConstant-literal": { patterns: [{ match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))NaN(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "constant.language.nan.ts" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Infinity(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "constant.language.infinity.ts" }] }, "object-binding-element": { patterns: [{ include: "#comment" }, { begin: `(?x)(?=((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(:))`, end: "(?=,|\\})", patterns: [{ include: "#object-binding-element-propertyName" }, { include: "#binding-element" }] }, { include: "#object-binding-pattern" }, { include: "#destructuring-variable-rest" }, { include: "#variable-initializer" }, { include: "#punctuation-comma" }] }, "object-binding-element-const": { patterns: [{ include: "#comment" }, { begin: `(?x)(?=((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(:))`, end: "(?=,|\\})", patterns: [{ include: "#object-binding-element-propertyName" }, { include: "#binding-element-const" }] }, { include: "#object-binding-pattern-const" }, { include: "#destructuring-variable-rest-const" }, { include: "#variable-initializer" }, { include: "#punctuation-comma" }] }, "object-binding-element-propertyName": { begin: `(?x)(?=((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(:))`, end: "(:)", endCaptures: { 0: { name: "punctuation.destructuring.ts" } }, patterns: [{ include: "#string" }, { include: "#array-literal" }, { include: "#numeric-literal" }, { match: "([_$[:alpha:]][_$[:alnum:]]*)", name: "variable.object.property.ts" }] }, "object-binding-pattern": { begin: "(?:(\\.\\.\\.)\\s*)?(\\{)", beginCaptures: { 1: { name: "keyword.operator.rest.ts" }, 2: { name: "punctuation.definition.binding-pattern.object.ts" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.binding-pattern.object.ts" } }, patterns: [{ include: "#object-binding-element" }] }, "object-binding-pattern-const": { begin: "(?:(\\.\\.\\.)\\s*)?(\\{)", beginCaptures: { 1: { name: "keyword.operator.rest.ts" }, 2: { name: "punctuation.definition.binding-pattern.object.ts" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.binding-pattern.object.ts" } }, patterns: [{ include: "#object-binding-element-const" }] }, "object-identifiers": { patterns: [{ match: "([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*\\??\\.\\s*prototype\\b(?!\\$))", name: "support.class.ts" }, { captures: { 1: { name: "punctuation.accessor.ts" }, 2: { name: "punctuation.accessor.optional.ts" }, 3: { name: "variable.other.constant.object.property.ts" }, 4: { name: "variable.other.object.property.ts" } }, match: `(?x)(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(?:
(\\#?[[:upper:]][_$[:digit:][:upper:]]*) |
(\\#?[_$[:alpha:]][_$[:alnum:]]*)
)(?=\\s*\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*)` }, { captures: { 1: { name: "variable.other.constant.object.ts" }, 2: { name: "variable.other.object.ts" } }, match: `(?x)(?:
([[:upper:]][_$[:digit:][:upper:]]*) |
([_$[:alpha:]][_$[:alnum:]]*)
)(?=\\s*\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*)` }] }, "object-literal": { begin: "\\{", beginCaptures: { 0: { name: "punctuation.definition.block.ts" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.block.ts" } }, name: "meta.objectliteral.ts", patterns: [{ include: "#object-member" }] }, "object-literal-method-declaration": { begin: `(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(async)\\s+)?(?:\\b(get|set)\\s+)?(?:(\\*)\\s*)?(?=\\s*(((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??))\\s*((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*))?[\\(])`, beginCaptures: { 1: { name: "storage.modifier.async.ts" }, 2: { name: "storage.type.property.ts" }, 3: { name: "keyword.generator.asterisk.ts" } }, end: "(?=\\}|;|,)|(?<=\\})", name: "meta.method.declaration.ts", patterns: [{ include: "#method-declaration-name" }, { include: "#function-body" }, { begin: `(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(async)\\s+)?(?:\\b(get|set)\\s+)?(?:(\\*)\\s*)?(?=\\s*(((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??))\\s*((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*))?[\\(])`, beginCaptures: { 1: { name: "storage.modifier.async.ts" }, 2: { name: "storage.type.property.ts" }, 3: { name: "keyword.generator.asterisk.ts" } }, end: "(?=\\(|\\<)", patterns: [{ include: "#method-declaration-name" }] }] }, "object-member": { patterns: [{ include: "#comment" }, { include: "#object-literal-method-declaration" }, { begin: "(?=\\[)", end: "(?=:)|((?<=[\\]])(?=\\s*[\\(\\<]))", name: "meta.object.member.ts meta.object-literal.key.ts", patterns: [{ include: "#comment" }, { include: "#array-literal" }] }, { begin: "(?=[\\'\\\"\\`])", end: "(?=:)|((?<=[\\'\\\"\\`])(?=((\\s*[\\(\\<,}])|(\\s+(as|satisifies)\\s+))))", name: "meta.object.member.ts meta.object-literal.key.ts", patterns: [{ include: "#comment" }, { include: "#string" }] }, { begin: `(?x)(?=(\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$)))`, end: "(?=:)|(?=\\s*([\\(\\<,}])|(\\s+as|satisifies\\s+))", name: "meta.object.member.ts meta.object-literal.key.ts", patterns: [{ include: "#comment" }, { include: "#numeric-literal" }] }, { begin: "(?<=[\\]\\'\\\"\\`])(?=\\s*[\\(\\<])", end: "(?=\\}|;|,)|(?<=\\})", name: "meta.method.declaration.ts", patterns: [{ include: "#function-body" }] }, { captures: { 0: { name: "meta.object-literal.key.ts" }, 1: { name: "constant.numeric.decimal.ts" } }, match: "(?![_$[:alpha:]])([[:digit:]]+)\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*:)", name: "meta.object.member.ts" }, { captures: { 0: { name: "meta.object-literal.key.ts" }, 1: { name: "entity.name.function.ts" } }, match: `(?x)(?:([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*:(\\s*\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/)*\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |

# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
)))`, name: "meta.object.member.ts" }, { captures: { 0: { name: "meta.object-literal.key.ts" } }, match: "(?:[_$[:alpha:]][_$[:alnum:]]*)\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*:)", name: "meta.object.member.ts" }, { begin: "\\.\\.\\.", beginCaptures: { 0: { name: "keyword.operator.spread.ts" } }, end: "(?=,|\\})", name: "meta.object.member.ts", patterns: [{ include: "#expression" }] }, { captures: { 1: { name: "variable.other.readwrite.ts" } }, match: "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=,|\\}|$|\\/\\/|\\/\\*)", name: "meta.object.member.ts" }, { captures: { 1: { name: "keyword.control.as.ts" }, 2: { name: "storage.modifier.ts" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(as)\\s+(const)(?=\\s*([,}]|$))", name: "meta.object.member.ts" }, { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(as)|(satisfies))\\s+", beginCaptures: { 1: { name: "keyword.control.as.ts" }, 2: { name: "keyword.control.satisfies.ts" } }, end: "(?=[;),}\\]:?\\-\\+\\>]|\\|\\||\\&\\&|\\!\\=\\=|$|^|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(as|satisifies)\\s+))", name: "meta.object.member.ts", patterns: [{ include: "#type" }] }, { begin: "(?=[_$[:alpha:]][_$[:alnum:]]*\\s*=)", end: "(?=,|\\}|$|\\/\\/|\\/\\*)", name: "meta.object.member.ts", patterns: [{ include: "#expression" }] }, { begin: ":", beginCaptures: { 0: { name: "meta.object-literal.key.ts punctuation.separator.key-value.ts" } }, end: "(?=,|\\})", name: "meta.object.member.ts", patterns: [{ begin: "(?<=:)\\s*(async)?(?=\\s*(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)\\(\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))", beginCaptures: { 1: { name: "storage.modifier.async.ts" } }, end: "(?<=\\))", patterns: [{ include: "#type-parameters" }, { begin: "\\(", beginCaptures: { 0: { name: "meta.brace.round.ts" } }, end: "\\)", endCaptures: { 0: { name: "meta.brace.round.ts" } }, patterns: [{ include: "#expression-inside-possibly-arrow-parens" }] }] }, { begin: "(?<=:)\\s*(async)?\\s*(\\()(?=\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))", beginCaptures: { 1: { name: "storage.modifier.async.ts" }, 2: { name: "meta.brace.round.ts" } }, end: "\\)", endCaptures: { 0: { name: "meta.brace.round.ts" } }, patterns: [{ include: "#expression-inside-possibly-arrow-parens" }] }, { begin: "(?<=:)\\s*(async)?\\s*(?=\\<\\s*$)", beginCaptures: { 1: { name: "storage.modifier.async.ts" } }, end: "(?<=\\>)", patterns: [{ include: "#type-parameters" }] }, { begin: "(?<=\\>)\\s*(\\()(?=\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))", beginCaptures: { 1: { name: "meta.brace.round.ts" } }, end: "\\)", endCaptures: { 0: { name: "meta.brace.round.ts" } }, patterns: [{ include: "#expression-inside-possibly-arrow-parens" }] }, { include: "#possibly-arrow-return-type" }, { include: "#expression" }] }, { include: "#punctuation-comma" }, { include: "#decl-block" }] }, "parameter-array-binding-pattern": { begin: "(?:(\\.\\.\\.)\\s*)?(\\[)", beginCaptures: { 1: { name: "keyword.operator.rest.ts" }, 2: { name: "punctuation.definition.binding-pattern.array.ts" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.binding-pattern.array.ts" } }, patterns: [{ include: "#parameter-binding-element" }, { include: "#punctuation-comma" }] }, "parameter-binding-element": { patterns: [{ include: "#comment" }, { include: "#string" }, { include: "#numeric-literal" }, { include: "#regex" }, { include: "#parameter-object-binding-pattern" }, { include: "#parameter-array-binding-pattern" }, { include: "#destructuring-parameter-rest" }, { include: "#variable-initializer" }] }, "parameter-name": { patterns: [{ captures: { 1: { name: "storage.modifier.ts" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(override|public|protected|private|readonly)\\s+(?=(override|public|protected|private|readonly)\\s+)" }, { captures: { 1: { name: "storage.modifier.ts" }, 2: { name: "keyword.operator.rest.ts" }, 3: { name: "entity.name.function.ts variable.language.this.ts" }, 4: { name: "entity.name.function.ts" }, 5: { name: "keyword.operator.optional.ts" } }, match: `(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(override|public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*(\\??)(?=\\s*
# function assignment |
(=\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |

# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
)) |
# typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>
(:\\s*(
(<) |
([(]\\s*(
([)]) |
(\\.\\.\\.) |
([_$[:alnum:]]+\\s*(
([:,?=])|
([)]\\s*=>)
))
))
)) |
(:\\s*(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Function(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |
(:\\s*((<\\s*$)|((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))) |
(:\\s*(=>|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(<[^<>]*>)|[^<>(),=])+=\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |

# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
)))` }, { captures: { 1: { name: "storage.modifier.ts" }, 2: { name: "keyword.operator.rest.ts" }, 3: { name: "variable.parameter.ts variable.language.this.ts" }, 4: { name: "variable.parameter.ts" }, 5: { name: "keyword.operator.optional.ts" } }, match: "(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(override|public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*(\\??)" }] }, "parameter-object-binding-element": { patterns: [{ include: "#comment" }, { begin: `(?x)(?=((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(:))`, end: "(?=,|\\})", patterns: [{ include: "#object-binding-element-propertyName" }, { include: "#parameter-binding-element" }, { include: "#paren-expression" }] }, { include: "#parameter-object-binding-pattern" }, { include: "#destructuring-parameter-rest" }, { include: "#variable-initializer" }, { include: "#punctuation-comma" }] }, "parameter-object-binding-pattern": { begin: "(?:(\\.\\.\\.)\\s*)?(\\{)", beginCaptures: { 1: { name: "keyword.operator.rest.ts" }, 2: { name: "punctuation.definition.binding-pattern.object.ts" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.binding-pattern.object.ts" } }, patterns: [{ include: "#parameter-object-binding-element" }] }, "parameter-type-annotation": { patterns: [{ begin: "(:)", beginCaptures: { 1: { name: "keyword.operator.type.annotation.ts" } }, end: "(?=[,)])|(?==[^>])", name: "meta.type.annotation.ts", patterns: [{ include: "#type" }] }] }, "paren-expression": { begin: "\\(", beginCaptures: { 0: { name: "meta.brace.round.ts" } }, end: "\\)", endCaptures: { 0: { name: "meta.brace.round.ts" } }, patterns: [{ include: "#expression" }] }, "paren-expression-possibly-arrow": { patterns: [{ begin: "(?<=[(=,])\\s*(async)?(?=\\s*((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*))?\\(\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))", beginCaptures: { 1: { name: "storage.modifier.async.ts" } }, end: "(?<=\\))", patterns: [{ include: "#paren-expression-possibly-arrow-with-typeparameters" }] }, { begin: "(?<=[(=,]|=>|^return|[^\\._$[:alnum:]]return)\\s*(async)?(?=\\s*((((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*))?\\()|(<)|((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)))\\s*$)", beginCaptures: { 1: { name: "storage.modifier.async.ts" } }, end: "(?<=\\))", patterns: [{ include: "#paren-expression-possibly-arrow-with-typeparameters" }] }, { include: "#possibly-arrow-return-type" }] }, "paren-expression-possibly-arrow-with-typeparameters": { patterns: [{ include: "#type-parameters" }, { begin: "\\(", beginCaptures: { 0: { name: "meta.brace.round.ts" } }, end: "\\)", endCaptures: { 0: { name: "meta.brace.round.ts" } }, patterns: [{ include: "#expression-inside-possibly-arrow-parens" }] }] }, "possibly-arrow-return-type": { begin: "(?<=\\)|^)\\s*(:)(?=\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*=>)", beginCaptures: { 1: { name: "meta.arrow.ts meta.return.type.arrow.ts keyword.operator.type.annotation.ts" } }, contentName: "meta.arrow.ts meta.return.type.arrow.ts", end: "(?==>|\\{|(^\\s*(export|function|class|interface|let|var|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|const|import|enum|namespace|module|type|abstract|declare)\\s+))", patterns: [{ include: "#arrow-return-type-body" }] }, "property-accessor": { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(accessor|get|set)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "storage.type.property.ts" }, "punctuation-accessor": { captures: { 1: { name: "punctuation.accessor.ts" }, 2: { name: "punctuation.accessor.optional.ts" } }, match: "(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))" }, "punctuation-comma": { match: ",", name: "punctuation.separator.comma.ts" }, "punctuation-semicolon": { match: ";", name: "punctuation.terminator.statement.ts" }, "qstring-double": { begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.ts" } }, end: '(")|((?:[^\\\\\\n])$)', endCaptures: { 1: { name: "punctuation.definition.string.end.ts" }, 2: { name: "invalid.illegal.newline.ts" } }, name: "string.quoted.double.ts", patterns: [{ include: "#string-character-escape" }] }, "qstring-single": { begin: "'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.ts" } }, end: "(\\')|((?:[^\\\\\\n])$)", endCaptures: { 1: { name: "punctuation.definition.string.end.ts" }, 2: { name: "invalid.illegal.newline.ts" } }, name: "string.quoted.single.ts", patterns: [{ include: "#string-character-escape" }] }, regex: { patterns: [{ begin: "(?<!\\+\\+|--|})(?<=[=(:,\\[?+!]|^return|[^\\._$[:alnum:]]return|^case|[^\\._$[:alnum:]]case|=>|&&|\\|\\||\\*\\/)\\s*(\\/)(?![\\/*])(?=(?:[^\\/\\\\\\[\\()]|\\\\.|\\[([^\\]\\\\]|\\\\.)+\\]|\\(([^\\)\\\\]|\\\\.)+\\))+\\/([dgimsuy]+|(?![\\/\\*])|(?=\\/\\*))(?!\\s*[a-zA-Z0-9_$]))", beginCaptures: { 1: { name: "punctuation.definition.string.begin.ts" } }, end: "(/)([dgimsuy]*)", endCaptures: { 1: { name: "punctuation.definition.string.end.ts" }, 2: { name: "keyword.other.ts" } }, name: "string.regexp.ts", patterns: [{ include: "#regexp" }] }, { begin: "((?<![_$[:alnum:])\\]]|\\+\\+|--|}|\\*\\/)|((?<=^return|[^\\._$[:alnum:]]return|^case|[^\\._$[:alnum:]]case))\\s*)\\/(?![\\/*])(?=(?:[^\\/\\\\\\[]|\\\\.|\\[([^\\]\\\\]|\\\\.)*\\])+\\/([dgimsuy]+|(?![\\/\\*])|(?=\\/\\*))(?!\\s*[a-zA-Z0-9_$]))", beginCaptures: { 0: { name: "punctuation.definition.string.begin.ts" } }, end: "(/)([dgimsuy]*)", endCaptures: { 1: { name: "punctuation.definition.string.end.ts" }, 2: { name: "keyword.other.ts" } }, name: "string.regexp.ts", patterns: [{ include: "#regexp" }] }] }, "regex-character-class": { patterns: [{ match: "\\\\[wWsSdDtrnvf]|\\.", name: "constant.other.character-class.regexp" }, { match: "\\\\([0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4})", name: "constant.character.numeric.regexp" }, { match: "\\\\c[A-Z]", name: "constant.character.control.regexp" }, { match: "\\\\.", name: "constant.character.escape.backslash.regexp" }] }, regexp: { patterns: [{ match: "\\\\[bB]|\\^|\\$", name: "keyword.control.anchor.regexp" }, { captures: { 0: { name: "keyword.other.back-reference.regexp" }, 1: { name: "variable.other.regexp" } }, match: "\\\\[1-9]\\d*|\\\\k<([a-zA-Z_$][\\w$]*)>" }, { match: "[?+*]|\\{(\\d+,\\d+|\\d+,|,\\d+|\\d+)\\}\\??", name: "keyword.operator.quantifier.regexp" }, { match: "\\|", name: "keyword.operator.or.regexp" }, { begin: "(\\()((\\?=)|(\\?!)|(\\?<=)|(\\?<!))", beginCaptures: { 1: { name: "punctuation.definition.group.regexp" }, 2: { name: "punctuation.definition.group.assertion.regexp" }, 3: { name: "meta.assertion.look-ahead.regexp" }, 4: { name: "meta.assertion.negative-look-ahead.regexp" }, 5: { name: "meta.assertion.look-behind.regexp" }, 6: { name: "meta.assertion.negative-look-behind.regexp" } }, end: "(\\))", endCaptures: { 1: { name: "punctuation.definition.group.regexp" } }, name: "meta.group.assertion.regexp", patterns: [{ include: "#regexp" }] }, { begin: "\\((?:(\\?:)|(?:\\?<([a-zA-Z_$][\\w$]*)>))?", beginCaptures: { 0: { name: "punctuation.definition.group.regexp" }, 1: { name: "punctuation.definition.group.no-capture.regexp" }, 2: { name: "variable.other.regexp" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.regexp" } }, name: "meta.group.regexp", patterns: [{ include: "#regexp" }] }, { begin: "(\\[)(\\^)?", beginCaptures: { 1: { name: "punctuation.definition.character-class.regexp" }, 2: { name: "keyword.operator.negation.regexp" } }, end: "(\\])", endCaptures: { 1: { name: "punctuation.definition.character-class.regexp" } }, name: "constant.other.character-class.set.regexp", patterns: [{ captures: { 1: { name: "constant.character.numeric.regexp" }, 2: { name: "constant.character.control.regexp" }, 3: { name: "constant.character.escape.backslash.regexp" }, 4: { name: "constant.character.numeric.regexp" }, 5: { name: "constant.character.control.regexp" }, 6: { name: "constant.character.escape.backslash.regexp" } }, match: "(?:.|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))\\-(?:[^\\]\\\\]|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))", name: "constant.other.character-class.range.regexp" }, { include: "#regex-character-class" }] }, { include: "#regex-character-class" }] }, "return-type": { patterns: [{ begin: "(?<=\\))\\s*(:)(?=\\s*\\S)", beginCaptures: { 1: { name: "keyword.operator.type.annotation.ts" } }, end: "(?<![:|&])(?=$|^|[{};,]|//)", name: "meta.return.type.ts", patterns: [{ include: "#return-type-core" }] }, { begin: "(?<=\\))\\s*(:)", beginCaptures: { 1: { name: "keyword.operator.type.annotation.ts" } }, end: "(?<![:|&])((?=[{};,]|//|^\\s*$)|((?<=\\S)(?=\\s*$)))", name: "meta.return.type.ts", patterns: [{ include: "#return-type-core" }] }] }, "return-type-core": { patterns: [{ include: "#comment" }, { begin: "(?<=[:|&])(?=\\s*\\{)", end: "(?<=\\})", patterns: [{ include: "#type-object" }] }, { include: "#type-predicate-operator" }, { include: "#type" }] }, shebang: { captures: { 1: { name: "punctuation.definition.comment.ts" } }, match: "\\A(#!).*(?=$)", name: "comment.line.shebang.ts" }, "single-line-comment-consuming-line-ending": { begin: "(^[ \\t]+)?((//)(?:\\s*((@)internal)(?=\\s|$))?)", beginCaptures: { 1: { name: "punctuation.whitespace.comment.leading.ts" }, 2: { name: "comment.line.double-slash.ts" }, 3: { name: "punctuation.definition.comment.ts" }, 4: { name: "storage.type.internaldeclaration.ts" }, 5: { name: "punctuation.decorator.internaldeclaration.ts" } }, contentName: "comment.line.double-slash.ts", end: "(?=^)" }, statements: { patterns: [{ include: "#declaration" }, { include: "#control-statement" }, { include: "#after-operator-block-as-object-literal" }, { include: "#decl-block" }, { include: "#label" }, { include: "#expression" }, { include: "#punctuation-semicolon" }, { include: "#string" }, { include: "#comment" }] }, string: { patterns: [{ include: "#qstring-single" }, { include: "#qstring-double" }, { include: "#template" }] }, "string-character-escape": { match: "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|u\\{[0-9A-Fa-f]+\\}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)", name: "constant.character.escape.ts" }, "super-literal": { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))super\\b(?!\\$)", name: "variable.language.super.ts" }, "support-function-call-identifiers": { patterns: [{ include: "#literal" }, { include: "#support-objects" }, { include: "#object-identifiers" }, { include: "#punctuation-accessor" }, { match: "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))import(?=\\s*[\\(]\\s*[\\\"\\'\\`]))", name: "keyword.operator.expression.import.ts" }] }, "support-objects": { patterns: [{ match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(arguments)\\b(?!\\$)", name: "variable.language.arguments.ts" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(Promise)\\b(?!\\$)", name: "support.class.promise.ts" }, { captures: { 1: { name: "keyword.control.import.ts" }, 2: { name: "punctuation.accessor.ts" }, 3: { name: "punctuation.accessor.optional.ts" }, 4: { name: "support.variable.property.importmeta.ts" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(import)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(meta)\\b(?!\\$)" }, { captures: { 1: { name: "keyword.operator.new.ts" }, 2: { name: "punctuation.accessor.ts" }, 3: { name: "punctuation.accessor.optional.ts" }, 4: { name: "support.variable.property.target.ts" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(new)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(target)\\b(?!\\$)" }, { captures: { 1: { name: "punctuation.accessor.ts" }, 2: { name: "punctuation.accessor.optional.ts" }, 3: { name: "support.variable.property.ts" }, 4: { name: "support.constant.ts" } }, match: `(?x) (?:(\\.)|(\\?\\.(?!\\s*[[:digit:]]))) \\s* (?:
(?:(constructor|length|prototype|__proto__)\\b(?!\\$|\\s*(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\\())
|
(?:(EPSILON|MAX_SAFE_INTEGER|MAX_VALUE|MIN_SAFE_INTEGER|MIN_VALUE|NEGATIVE_INFINITY|POSITIVE_INFINITY)\\b(?!\\$)))` }, { captures: { 1: { name: "support.type.object.module.ts" }, 2: { name: "support.type.object.module.ts" }, 3: { name: "punctuation.accessor.ts" }, 4: { name: "punctuation.accessor.optional.ts" }, 5: { name: "support.type.object.module.ts" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(exports)|(module)(?:(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))(exports|id|filename|loaded|parent|children))?)\\b(?!\\$)" }] }, "switch-statement": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?=\\bswitch\\s*\\()", end: "\\}", endCaptures: { 0: { name: "punctuation.definition.block.ts" } }, name: "switch-statement.expr.ts", patterns: [{ include: "#comment" }, { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(switch)\\s*(\\()", beginCaptures: { 1: { name: "keyword.control.switch.ts" }, 2: { name: "meta.brace.round.ts" } }, end: "\\)", endCaptures: { 0: { name: "meta.brace.round.ts" } }, name: "switch-expression.expr.ts", patterns: [{ include: "#expression" }] }, { begin: "\\{", beginCaptures: { 0: { name: "punctuation.definition.block.ts" } }, end: "(?=\\})", name: "switch-block.expr.ts", patterns: [{ begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(case|default(?=:))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", beginCaptures: { 1: { name: "keyword.control.switch.ts" } }, end: "(?=:)", name: "case-clause.expr.ts", patterns: [{ include: "#expression" }] }, { begin: "(:)\\s*(\\{)", beginCaptures: { 1: { name: "case-clause.expr.ts punctuation.definition.section.case-statement.ts" }, 2: { name: "meta.block.ts punctuation.definition.block.ts" } }, contentName: "meta.block.ts", end: "\\}", endCaptures: { 0: { name: "meta.block.ts punctuation.definition.block.ts" } }, patterns: [{ include: "#statements" }] }, { captures: { 0: { name: "case-clause.expr.ts punctuation.definition.section.case-statement.ts" } }, match: "(:)" }, { include: "#statements" }] }] }, template: { patterns: [{ include: "#template-call" }, { begin: "([_$[:alpha:]][_$[:alnum:]]*)?(`)", beginCaptures: { 1: { name: "entity.name.function.tagged-template.ts" }, 2: { name: "string.template.ts punctuation.definition.string.template.begin.ts" } }, contentName: "string.template.ts", end: "`", endCaptures: { 0: { name: "string.template.ts punctuation.definition.string.template.end.ts" } }, patterns: [{ include: "#template-substitution-element" }, { include: "#string-character-escape" }] }] }, "template-call": { patterns: [{ begin: "(?=(([_$[:alpha:]][_$[:alnum:]]*\\s*\\??\\.\\s*)*|(\\??\\.\\s*)?)([_$[:alpha:]][_$[:alnum:]]*)(<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?`)", end: "(?=`)", patterns: [{ begin: "(?=(([_$[:alpha:]][_$[:alnum:]]*\\s*\\??\\.\\s*)*|(\\??\\.\\s*)?)([_$[:alpha:]][_$[:alnum:]]*))", end: "(?=(<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?`)", patterns: [{ include: "#support-function-call-identifiers" }, { match: "([_$[:alpha:]][_$[:alnum:]]*)", name: "entity.name.function.tagged-template.ts" }] }, { include: "#type-arguments" }] }, { begin: "([_$[:alpha:]][_$[:alnum:]]*)?\\s*(?=(<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)`)", beginCaptures: { 1: { name: "entity.name.function.tagged-template.ts" } }, end: "(?=`)", patterns: [{ include: "#type-arguments" }] }] }, "template-substitution-element": { begin: "\\$\\{", beginCaptures: { 0: { name: "punctuation.definition.template-expression.begin.ts" } }, contentName: "meta.embedded.line.ts", end: "\\}", endCaptures: { 0: { name: "punctuation.definition.template-expression.end.ts" } }, name: "meta.template.expression.ts", patterns: [{ include: "#expression" }] }, "template-type": { patterns: [{ include: "#template-call" }, { begin: "([_$[:alpha:]][_$[:alnum:]]*)?(`)", beginCaptures: { 1: { name: "entity.name.function.tagged-template.ts" }, 2: { name: "string.template.ts punctuation.definition.string.template.begin.ts" } }, contentName: "string.template.ts", end: "`", endCaptures: { 0: { name: "string.template.ts punctuation.definition.string.template.end.ts" } }, patterns: [{ include: "#template-type-substitution-element" }, { include: "#string-character-escape" }] }] }, "template-type-substitution-element": { begin: "\\$\\{", beginCaptures: { 0: { name: "punctuation.definition.template-expression.begin.ts" } }, contentName: "meta.embedded.line.ts", end: "\\}", endCaptures: { 0: { name: "punctuation.definition.template-expression.end.ts" } }, name: "meta.template.expression.ts", patterns: [{ include: "#type" }] }, "ternary-expression": { begin: "(?!\\?\\.\\s*[^[:digit:]])(\\?)(?!\\?)", beginCaptures: { 1: { name: "keyword.operator.ternary.ts" } }, end: "\\s*(:)", endCaptures: { 1: { name: "keyword.operator.ternary.ts" } }, patterns: [{ include: "#expression" }] }, "this-literal": { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))this\\b(?!\\$)", name: "variable.language.this.ts" }, type: { patterns: [{ include: "#comment" }, { include: "#type-string" }, { include: "#numeric-literal" }, { include: "#type-primitive" }, { include: "#type-builtin-literals" }, { include: "#type-parameters" }, { include: "#type-tuple" }, { include: "#type-object" }, { include: "#type-operators" }, { include: "#type-conditional" }, { include: "#type-fn-type-parameters" }, { include: "#type-paren-or-function-parameters" }, { include: "#type-function-return-type" }, { captures: { 1: { name: "storage.modifier.ts" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(readonly)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*" }, { include: "#type-name" }] }, "type-alias-declaration": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(type)\\b\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*", beginCaptures: { 1: { name: "keyword.control.export.ts" }, 2: { name: "storage.modifier.ts" }, 3: { name: "storage.type.type.ts" }, 4: { name: "entity.name.type.alias.ts" } }, end: "(?=\\}|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))", name: "meta.type.declaration.ts", patterns: [{ include: "#comment" }, { include: "#type-parameters" }, { begin: "(=)\\s*(intrinsic)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", beginCaptures: { 1: { name: "keyword.operator.assignment.ts" }, 2: { name: "keyword.control.intrinsic.ts" } }, end: "(?=\\}|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))", patterns: [{ include: "#type" }] }, { begin: "(=)\\s*", beginCaptures: { 1: { name: "keyword.operator.assignment.ts" } }, end: "(?=\\}|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))", patterns: [{ include: "#type" }] }] }, "type-annotation": { patterns: [{ begin: "(:)(?=\\s*\\S)", beginCaptures: { 1: { name: "keyword.operator.type.annotation.ts" } }, end: "(?<![:|&])(?!\\s*[|&]\\s+)((?=^|[,);\\}\\]]|//)|(?==[^>])|((?<=[\\}>\\]\\)]|[_$[:alpha:]])\\s*(?=\\{)))", name: "meta.type.annotation.ts", patterns: [{ include: "#type" }] }, { begin: "(:)", beginCaptures: { 1: { name: "keyword.operator.type.annotation.ts" } }, end: "(?<![:|&])((?=[,);\\}\\]]|\\/\\/)|(?==[^>])|(?=^\\s*$)|((?<=[\\}>\\]\\)]|[_$[:alpha:]])\\s*(?=\\{)))", name: "meta.type.annotation.ts", patterns: [{ include: "#type" }] }] }, "type-arguments": { begin: "\\<", beginCaptures: { 0: { name: "punctuation.definition.typeparameters.begin.ts" } }, end: "\\>", endCaptures: { 0: { name: "punctuation.definition.typeparameters.end.ts" } }, name: "meta.type.parameters.ts", patterns: [{ include: "#type-arguments-body" }] }, "type-arguments-body": { patterns: [{ captures: { 0: { name: "keyword.operator.type.ts" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(_)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))" }, { include: "#type" }, { include: "#punctuation-comma" }] }, "type-builtin-literals": { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(this|true|false|undefined|null|object)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "support.type.builtin.ts" }, "type-conditional": { patterns: [{ begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(extends)\\s+", beginCaptures: { 1: { name: "storage.modifier.ts" } }, end: "(?<=:)", patterns: [{ begin: "\\?", beginCaptures: { 0: { name: "keyword.operator.ternary.ts" } }, end: ":", endCaptures: { 0: { name: "keyword.operator.ternary.ts" } }, patterns: [{ include: "#type" }] }, { include: "#type" }] }] }, "type-fn-type-parameters": { patterns: [{ begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(abstract)\\s+)?(new)\\b(?=\\s*\\<)", beginCaptures: { 1: { name: "meta.type.constructor.ts storage.modifier.ts" }, 2: { name: "meta.type.constructor.ts keyword.control.new.ts" } }, end: "(?<=>)", patterns: [{ include: "#comment" }, { include: "#type-parameters" }] }, { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(abstract)\\s+)?(new)\\b\\s*(?=\\()", beginCaptures: { 1: { name: "storage.modifier.ts" }, 2: { name: "keyword.control.new.ts" } }, end: "(?<=\\))", name: "meta.type.constructor.ts", patterns: [{ include: "#function-parameters" }] }, { begin: `(?x)(
(?=
[(]\\s*(
([)]) |
(\\.\\.\\.) |
([_$[:alnum:]]+\\s*(
([:,?=])|
([)]\\s*=>)
))
)
)
)`, end: "(?<=\\))", name: "meta.type.function.ts", patterns: [{ include: "#function-parameters" }] }] }, "type-function-return-type": { patterns: [{ begin: "(=>)(?=\\s*\\S)", beginCaptures: { 1: { name: "storage.type.function.arrow.ts" } }, end: "(?<!=>)(?<![|&])(?=[,\\]\\)\\{\\}=;>:\\?]|//|$)", name: "meta.type.function.return.ts", patterns: [{ include: "#type-function-return-type-core" }] }, { begin: "=>", beginCaptures: { 0: { name: "storage.type.function.arrow.ts" } }, end: "(?<!=>)(?<![|&])((?=[,\\]\\)\\{\\}=;:\\?>]|//|^\\s*$)|((?<=\\S)(?=\\s*$)))", name: "meta.type.function.return.ts", patterns: [{ include: "#type-function-return-type-core" }] }] }, "type-function-return-type-core": { patterns: [{ include: "#comment" }, { begin: "(?<==>)(?=\\s*\\{)", end: "(?<=\\})", patterns: [{ include: "#type-object" }] }, { include: "#type-predicate-operator" }, { include: "#type" }] }, "type-infer": { patterns: [{ captures: { 1: { name: "keyword.operator.expression.infer.ts" }, 2: { name: "entity.name.type.ts" }, 3: { name: "keyword.operator.expression.extends.ts" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(infer)\\s+([_$[:alpha:]][_$[:alnum:]]*)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?:\\s+(extends)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))?", name: "meta.type.infer.ts" }] }, "type-name": { patterns: [{ begin: "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(<)", captures: { 1: { name: "entity.name.type.module.ts" }, 2: { name: "punctuation.accessor.ts" }, 3: { name: "punctuation.accessor.optional.ts" }, 4: { name: "meta.type.parameters.ts punctuation.definition.typeparameters.begin.ts" } }, contentName: "meta.type.parameters.ts", end: "(>)", endCaptures: { 1: { name: "meta.type.parameters.ts punctuation.definition.typeparameters.end.ts" } }, patterns: [{ include: "#type-arguments-body" }] }, { begin: "([_$[:alpha:]][_$[:alnum:]]*)\\s*(<)", beginCaptures: { 1: { name: "entity.name.type.ts" }, 2: { name: "meta.type.parameters.ts punctuation.definition.typeparameters.begin.ts" } }, contentName: "meta.type.parameters.ts", end: "(>)", endCaptures: { 1: { name: "meta.type.parameters.ts punctuation.definition.typeparameters.end.ts" } }, patterns: [{ include: "#type-arguments-body" }] }, { captures: { 1: { name: "entity.name.type.module.ts" }, 2: { name: "punctuation.accessor.ts" }, 3: { name: "punctuation.accessor.optional.ts" } }, match: "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))" }, { match: "[_$[:alpha:]][_$[:alnum:]]*", name: "entity.name.type.ts" }] }, "type-object": { begin: "\\{", beginCaptures: { 0: { name: "punctuation.definition.block.ts" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.block.ts" } }, name: "meta.object.type.ts", patterns: [{ include: "#comment" }, { include: "#method-declaration" }, { include: "#indexer-declaration" }, { include: "#indexer-mapped-type-declaration" }, { include: "#field-declaration" }, { include: "#type-annotation" }, { begin: "\\.\\.\\.", beginCaptures: { 0: { name: "keyword.operator.spread.ts" } }, end: "(?=\\}|;|,|$)|(?<=\\})", patterns: [{ include: "#type" }] }, { include: "#punctuation-comma" }, { include: "#punctuation-semicolon" }, { include: "#type" }] }, "type-operators": { patterns: [{ include: "#typeof-operator" }, { include: "#type-infer" }, { begin: "([&|])(?=\\s*\\{)", beginCaptures: { 0: { name: "keyword.operator.type.ts" } }, end: "(?<=\\})", patterns: [{ include: "#type-object" }] }, { begin: "[&|]", beginCaptures: { 0: { name: "keyword.operator.type.ts" } }, end: "(?=\\S)" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))keyof(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.operator.expression.keyof.ts" }, { match: "(\\?|\\:)", name: "keyword.operator.ternary.ts" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))import(?=\\s*\\()", name: "keyword.operator.expression.import.ts" }] }, "type-parameters": { begin: "(<)", beginCaptures: { 1: { name: "punctuation.definition.typeparameters.begin.ts" } }, end: "(>)", endCaptures: { 1: { name: "punctuation.definition.typeparameters.end.ts" } }, name: "meta.type.parameters.ts", patterns: [{ include: "#comment" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(extends|in|out|const)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "storage.modifier.ts" }, { include: "#type" }, { include: "#punctuation-comma" }, { match: "(=)(?!>)", name: "keyword.operator.assignment.ts" }] }, "type-paren-or-function-parameters": { begin: "\\(", beginCaptures: { 0: { name: "meta.brace.round.ts" } }, end: "\\)", endCaptures: { 0: { name: "meta.brace.round.ts" } }, name: "meta.type.paren.cover.ts", patterns: [{ captures: { 1: { name: "storage.modifier.ts" }, 2: { name: "keyword.operator.rest.ts" }, 3: { name: "entity.name.function.ts variable.language.this.ts" }, 4: { name: "entity.name.function.ts" }, 5: { name: "keyword.operator.optional.ts" } }, match: `(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))\\s*(\\??)(?=\\s*(:\\s*(
(<) |
([(]\\s*(
([)]) |
(\\.\\.\\.) |
([_$[:alnum:]]+\\s*(
([:,?=])|
([)]\\s*=>)
))
))
)) |
(:\\s*(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Function(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |
(:\\s*((<\\s*$)|((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))))` }, { captures: { 1: { name: "storage.modifier.ts" }, 2: { name: "keyword.operator.rest.ts" }, 3: { name: "variable.parameter.ts variable.language.this.ts" }, 4: { name: "variable.parameter.ts" }, 5: { name: "keyword.operator.optional.ts" } }, match: "(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))\\s*(\\??)(?=:)" }, { include: "#type-annotation" }, { match: ",", name: "punctuation.separator.parameter.ts" }, { include: "#type" }] }, "type-predicate-operator": { patterns: [{ captures: { 1: { name: "keyword.operator.type.asserts.ts" }, 2: { name: "variable.parameter.ts variable.language.this.ts" }, 3: { name: "variable.parameter.ts" }, 4: { name: "keyword.operator.expression.is.ts" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(asserts)\\s+)?(?!asserts)(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))\\s(is)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))" }, { captures: { 1: { name: "keyword.operator.type.asserts.ts" }, 2: { name: "variable.parameter.ts variable.language.this.ts" }, 3: { name: "variable.parameter.ts" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(asserts)\\s+(?!is)(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))asserts(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.operator.type.asserts.ts" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))is(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.operator.expression.is.ts" }] }, "type-primitive": { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(string|number|bigint|boolean|symbol|any|void|never|unknown)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "support.type.primitive.ts" }, "type-string": { patterns: [{ include: "#qstring-single" }, { include: "#qstring-double" }, { include: "#template-type" }] }, "type-tuple": { begin: "\\[", beginCaptures: { 0: { name: "meta.brace.square.ts" } }, end: "\\]", endCaptures: { 0: { name: "meta.brace.square.ts" } }, name: "meta.type.tuple.ts", patterns: [{ match: "\\.\\.\\.", name: "keyword.operator.rest.ts" }, { captures: { 1: { name: "entity.name.label.ts" }, 2: { name: "keyword.operator.optional.ts" }, 3: { name: "punctuation.separator.label.ts" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))([_$[:alpha:]][_$[:alnum:]]*)\\s*(\\?)?\\s*(:)" }, { include: "#type" }, { include: "#punctuation-comma" }] }, "typeof-operator": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))typeof(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", beginCaptures: { 0: { name: "keyword.operator.expression.typeof.ts" } }, end: "(?=[,);}\\]=>:&|{\\?]|(extends\\s+)|$|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))", patterns: [{ include: "#type-arguments" }, { include: "#expression" }] }, "undefined-literal": { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))undefined(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "constant.language.undefined.ts" }, "var-expr": { patterns: [{ begin: "(?=(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(var|let)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))", end: "(?!(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(var|let)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))((?=^|;|}|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))|((?<!^let|[^\\._$[:alnum:]]let|^var|[^\\._$[:alnum:]]var)(?=\\s*$)))", name: "meta.var.expr.ts", patterns: [{ begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(var|let)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*", beginCaptures: { 1: { name: "keyword.control.export.ts" }, 2: { name: "storage.modifier.ts" }, 3: { name: "storage.type.ts" } }, end: "(?=\\S)" }, { include: "#destructuring-variable" }, { include: "#var-single-variable" }, { include: "#variable-initializer" }, { include: "#comment" }, { begin: "(,)\\s*(?=$|\\/\\/)", beginCaptures: { 1: { name: "punctuation.separator.comma.ts" } }, end: "(?<!,)(((?==|;|}|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|^\\s*$))|((?<=\\S)(?=\\s*$)))", patterns: [{ include: "#single-line-comment-consuming-line-ending" }, { include: "#comment" }, { include: "#destructuring-variable" }, { include: "#var-single-variable" }, { include: "#punctuation-comma" }] }, { include: "#punctuation-comma" }] }, { begin: "(?=(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(const(?!\\s+enum\\b))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))", beginCaptures: { 1: { name: "keyword.control.export.ts" }, 2: { name: "storage.modifier.ts" }, 3: { name: "storage.type.ts" } }, end: "(?!(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(const(?!\\s+enum\\b))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))((?=^|;|}|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))|((?<!^const|[^\\._$[:alnum:]]const)(?=\\s*$)))", name: "meta.var.expr.ts", patterns: [{ begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(const(?!\\s+enum\\b))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*", beginCaptures: { 1: { name: "keyword.control.export.ts" }, 2: { name: "storage.modifier.ts" }, 3: { name: "storage.type.ts" } }, end: "(?=\\S)" }, { include: "#destructuring-const" }, { include: "#var-single-const" }, { include: "#variable-initializer" }, { include: "#comment" }, { begin: "(,)\\s*(?=$|\\/\\/)", beginCaptures: { 1: { name: "punctuation.separator.comma.ts" } }, end: "(?<!,)(((?==|;|}|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|^\\s*$))|((?<=\\S)(?=\\s*$)))", patterns: [{ include: "#single-line-comment-consuming-line-ending" }, { include: "#comment" }, { include: "#destructuring-const" }, { include: "#var-single-const" }, { include: "#punctuation-comma" }] }, { include: "#punctuation-comma" }] }, { begin: "(?=(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b((?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))", beginCaptures: { 1: { name: "keyword.control.export.ts" }, 2: { name: "storage.modifier.ts" }, 3: { name: "storage.type.ts" } }, end: "(?!(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b((?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))((?=;|}|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))|((?<!^using|[^\\._$[:alnum:]]using|^await\\s+using|[^\\._$[:alnum:]]await\\s+using)(?=\\s*$)))", name: "meta.var.expr.ts", patterns: [{ begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b((?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*", beginCaptures: { 1: { name: "keyword.control.export.ts" }, 2: { name: "storage.modifier.ts" }, 3: { name: "storage.type.ts" } }, end: "(?=\\S)" }, { include: "#var-single-const" }, { include: "#variable-initializer" }, { include: "#comment" }, { begin: "(,)\\s*((?!\\S)|(?=\\/\\/))", beginCaptures: { 1: { name: "punctuation.separator.comma.ts" } }, end: "(?<!,)(((?==|;|}|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|^\\s*$))|((?<=\\S)(?=\\s*$)))", patterns: [{ include: "#single-line-comment-consuming-line-ending" }, { include: "#comment" }, { include: "#var-single-const" }, { include: "#punctuation-comma" }] }, { include: "#punctuation-comma" }] }] }, "var-single-const": { patterns: [{ begin: `(?x)([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*
# function assignment |
(=\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |

# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
)) |
# typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>
(:\\s*(
(<) |
([(]\\s*(
([)]) |
(\\.\\.\\.) |
([_$[:alnum:]]+\\s*(
([:,?=])|
([)]\\s*=>)
))
))
)) |
(:\\s*(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Function(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |
(:\\s*((<\\s*$)|((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))) |
(:\\s*(=>|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(<[^<>]*>)|[^<>(),=])+=\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |

# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
)))`, beginCaptures: { 1: { name: "meta.definition.variable.ts variable.other.constant.ts entity.name.function.ts" } }, end: "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|(;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b)))", name: "meta.var-single-variable.expr.ts", patterns: [{ include: "#var-single-variable-type-annotation" }] }, { begin: "([_$[:alpha:]][_$[:alnum:]]*)", beginCaptures: { 1: { name: "meta.definition.variable.ts variable.other.constant.ts" } }, end: "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|(;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b)))", name: "meta.var-single-variable.expr.ts", patterns: [{ include: "#var-single-variable-type-annotation" }] }] }, "var-single-variable": { patterns: [{ begin: `(?x)([_$[:alpha:]][_$[:alnum:]]*)(\\!)?(?=\\s*
# function assignment |
(=\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |

# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
)) |
# typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>
(:\\s*(
(<) |
([(]\\s*(
([)]) |
(\\.\\.\\.) |
([_$[:alnum:]]+\\s*(
([:,?=])|
([)]\\s*=>)
))
))
)) |
(:\\s*(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Function(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |
(:\\s*((<\\s*$)|((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))) |
(:\\s*(=>|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(<[^<>]*>)|[^<>(),=])+=\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |

# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
)))`, beginCaptures: { 1: { name: "meta.definition.variable.ts entity.name.function.ts" }, 2: { name: "keyword.operator.definiteassignment.ts" } }, end: "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|(;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b)))", name: "meta.var-single-variable.expr.ts", patterns: [{ include: "#var-single-variable-type-annotation" }] }, { begin: "([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])(\\!)?", beginCaptures: { 1: { name: "meta.definition.variable.ts variable.other.constant.ts" }, 2: { name: "keyword.operator.definiteassignment.ts" } }, end: "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|(;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b)))", name: "meta.var-single-variable.expr.ts", patterns: [{ include: "#var-single-variable-type-annotation" }] }, { begin: "([_$[:alpha:]][_$[:alnum:]]*)(\\!)?", beginCaptures: { 1: { name: "meta.definition.variable.ts variable.other.readwrite.ts" }, 2: { name: "keyword.operator.definiteassignment.ts" } }, end: "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|(;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b)))", name: "meta.var-single-variable.expr.ts", patterns: [{ include: "#var-single-variable-type-annotation" }] }] }, "var-single-variable-type-annotation": { patterns: [{ include: "#type-annotation" }, { include: "#string" }, { include: "#comment" }] }, "variable-initializer": { patterns: [{ begin: "(?<!=|!)(=)(?!=)(?=\\s*\\S)(?!\\s*.*=>\\s*$)", beginCaptures: { 1: { name: "keyword.operator.assignment.ts" } }, end: "(?=$|^|[,);}\\]]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))", patterns: [{ include: "#expression" }] }, { begin: "(?<!=|!)(=)(?!=)", beginCaptures: { 1: { name: "keyword.operator.assignment.ts" } }, end: "(?=[,);}\\]]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))|(?=^\\s*$)|(?<![\\|\\&\\+\\-\\*\\/])(?<=\\S)(?<!=)(?=\\s*$)", patterns: [{ include: "#expression" }] }] } }, scopeName: "source.ts", aliases: ["ts"] });
var r = [
  Z
];
const W = Object.freeze({ displayName: "Stylus", fileTypes: ["styl", "stylus", "css.styl", "css.stylus"], name: "stylus", patterns: [{ include: "#comment" }, { include: "#at_rule" }, { include: "#language_keywords" }, { include: "#language_constants" }, { include: "#variable_declaration" }, { include: "#function" }, { include: "#selector" }, { include: "#declaration" }, { captures: { 1: { name: "punctuation.section.property-list.begin.css" }, 2: { name: "punctuation.section.property-list.end.css" } }, match: "(\\{)(\\})", name: "meta.brace.curly.css" }, { match: "\\{|\\}", name: "meta.brace.curly.css" }, { include: "#numeric" }, { include: "#string" }, { include: "#operator" }], repository: { at_rule: { patterns: [{ begin: "\\s*((@)(import|require))\\b\\s*", beginCaptures: { 1: { name: "keyword.control.at-rule.import.stylus" }, 2: { name: "punctuation.definition.keyword.stylus" } }, end: "\\s*((?=;|$|\\n))", endCaptures: { 1: { name: "punctuation.terminator.rule.css" } }, name: "meta.at-rule.import.css", patterns: [{ include: "#string" }] }, { begin: "\\s*((@)(extend[s]?)\\b)\\s*", beginCaptures: { 1: { name: "keyword.control.at-rule.extend.stylus" }, 2: { name: "punctuation.definition.keyword.stylus" } }, end: "\\s*((?=;|$|\\n))", endCaptures: { 1: { name: "punctuation.terminator.rule.css" } }, name: "meta.at-rule.extend.css", patterns: [{ include: "#selector" }] }, { captures: { 1: { name: "keyword.control.at-rule.fontface.stylus" }, 2: { name: "punctuation.definition.keyword.stylus" } }, match: "^\\s*((@)font-face)\\b", name: "meta.at-rule.fontface.stylus" }, { captures: { 1: { name: "keyword.control.at-rule.css.stylus" }, 2: { name: "punctuation.definition.keyword.stylus" } }, match: "^\\s*((@)css)\\b", name: "meta.at-rule.css.stylus" }, { begin: "\\s*((@)charset)\\b\\s*", beginCaptures: { 1: { name: "keyword.control.at-rule.charset.stylus" }, 2: { name: "punctuation.definition.keyword.stylus" } }, end: "\\s*((?=;|$|\\n))", name: "meta.at-rule.charset.stylus", patterns: [{ include: "#string" }] }, { begin: "\\s*((@)keyframes)\\b\\s+([a-zA-Z_-][a-zA-Z0-9_-]*)", beginCaptures: { 1: { name: "keyword.control.at-rule.keyframes.stylus" }, 2: { name: "punctuation.definition.keyword.stylus" }, 3: { name: "entity.name.function.keyframe.stylus" } }, end: "\\s*((?=\\{|$|\\n))", name: "meta.at-rule.keyframes.stylus" }, { begin: "(?=(\\b(\\d+%|from\\b|to\\b)))", end: "(?=(\\{|\\n))", name: "meta.at-rule.keyframes.stylus", patterns: [{ match: "(\\b(\\d+%|from\\b|to\\b))", name: "entity.other.attribute-name.stylus" }] }, { captures: { 1: { name: "keyword.control.at-rule.media.stylus" }, 2: { name: "punctuation.definition.keyword.stylus" } }, match: "^\\s*((@)media)\\b", name: "meta.at-rule.media.stylus" }, { match: "(?:(?=\\w)(?<![\\w-]))(width|scan|resolution|orientation|monochrome|min-width|min-resolution|min-monochrome|min-height|min-device-width|min-device-height|min-device-aspect-ratio|min-color-index|min-color|min-aspect-ratio|max-width|max-resolution|max-monochrome|max-height|max-device-width|max-device-height|max-device-aspect-ratio|max-color-index|max-color|max-aspect-ratio|height|grid|device-width|device-height|device-aspect-ratio|color-index|color|aspect-ratio)(?:(?<=\\w)(?![\\w-]))", name: "support.type.property-name.media-feature.media.css" }, { match: "(?:(?=\\w)(?<![\\w-]))(tv|tty|screen|projection|print|handheld|embossed|braille|aural|all)(?:(?<=\\w)(?![\\w-]))", name: "support.constant.media-type.media.css" }, { match: "(?:(?=\\w)(?<![\\w-]))(portrait|landscape)(?:(?<=\\w)(?![\\w-]))", name: "support.constant.property-value.media-property.media.css" }] }, char_escape: { match: "\\\\(.)", name: "constant.character.escape.stylus" }, color: { patterns: [{ begin: "\\b(rgb|rgba|hsl|hsla)(\\()", beginCaptures: { 1: { name: "support.function.color.css" }, 2: { name: "punctuation.section.function.css" } }, end: "(\\))", endCaptures: { 1: { name: "punctuation.section.function.css" } }, name: "meta.function.color.css", patterns: [{ match: "\\s*(,)\\s*", name: "punctuation.separator.parameter.css" }, { include: "#numeric" }, { include: "#property_variable" }] }, { captures: { 1: { name: "punctuation.definition.constant.css" } }, match: "(#)([0-9a-fA-F]{3}|[0-9a-fA-F]{6})\\b", name: "constant.other.color.rgb-value.css" }, { comment: "http://www.w3.org/TR/CSS21/syndata.html#value-def-color", match: "\\b(aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow)\\b", name: "support.constant.color.w3c-standard-color-name.css" }, { comment: "http://www.w3.org/TR/css3-color/#svg-color", match: "\\b(aliceblue|antiquewhite|aquamarine|azure|beige|bisque|blanchedalmond|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgreen|darkgrey|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen|gainsboro|ghostwhite|gold|goldenrod|greenyellow|grey|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgreen|lightgrey|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightslategrey|lightsteelblue|lightyellow|limegreen|linen|magenta|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|oldlace|olivedrab|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|thistle|tomato|turquoise|violet|wheat|whitesmoke|yellowgreen)\\b", name: "support.constant.color.w3c-extended-color-name.css" }] }, comment: { patterns: [{ include: "#comment_block" }, { include: "#comment_line" }] }, comment_block: { begin: "/\\*", beginCaptures: { 0: { name: "punctuation.definition.comment.begin.css" } }, end: "\\*/", endCaptures: { 0: { name: "punctuation.definition.comment.end.css" } }, name: "comment.block.css" }, comment_line: { begin: "(^[ \\t]+)?(?=//)", beginCaptures: { 1: { name: "punctuation.whitespace.comment.leading.stylus" } }, end: "(?!\\G)", patterns: [{ begin: "//", beginCaptures: { 0: { name: "punctuation.definition.comment.stylus" } }, end: "(?=\\n)", name: "comment.line.double-slash.stylus" }] }, declaration: { begin: "((?<=^)[^\\S\\n]+)|((?<=;)[^\\S\\n]*)|((?<=\\{)[^\\S\\n]*)", end: "(?=\\n)|(;)|(?=\\})|(\\n)", endCaptures: { 2: { name: "punctuation.terminator.rule.css" } }, name: "meta.property-list.css", patterns: [{ match: `(?x) (?<![\\w-])
--
(?:[-a-zA-Z_]    | [^\\x00-\\x7F])
(?:[-a-zA-Z0-9_] | [^\\x00-\\x7F]
|\\\\(?:[0-9a-fA-F]{1,6}|.)
)*`, name: "variable.css" }, { include: "#language_keywords" }, { include: "#language_constants" }, { match: "(?:(?<=^)[^\\S\\n]+(\\n))" }, { captures: { 1: { name: "support.type.property-name.css" }, 2: { name: "punctuation.separator.key-value.css" }, 3: { name: "variable.section.css" } }, match: "\\G\\s*(counter-reset|counter-increment)(?:(:)|[^\\S\\n])[^\\S\\n]*([a-zA-Z_-][a-zA-Z0-9_-]*)", name: "meta.property.counter.css" }, { begin: "\\G\\s*(filter)(?:(:)|[^\\S\\n])[^\\S\\n]*", beginCaptures: { 1: { name: "support.type.property-name.css" }, 2: { name: "punctuation.separator.key-value.css" } }, end: "(?=\\n|;|\\}|$)", name: "meta.property.filter.css", patterns: [{ include: "#function" }, { include: "#property_values" }] }, { include: "#property" }, { include: "#interpolation" }, { include: "$self" }] }, font_name: { match: "(\\b(?i:arial|century|comic|courier|cursive|fantasy|futura|garamond|georgia|helvetica|impact|lucida|monospace|symbol|system|tahoma|times|trebuchet|utopia|verdana|webdings|sans-serif|serif)\\b)", name: "support.constant.font-name.css" }, function: { begin: "(?=[a-zA-Z_-][a-zA-Z0-9_-]*\\()", end: "(\\))", endCaptures: { 1: { name: "punctuation.section.function.css" } }, patterns: [{ begin: "(format|url|local)(\\()", beginCaptures: { 1: { name: "support.function.misc.css" }, 2: { name: "punctuation.section.function.css" } }, end: "(?=\\))", name: "meta.function.misc.css", patterns: [{ match: "(?<=\\()[^\\)\\s]*(?=\\))", name: "string.css" }, { include: "#string" }, { include: "#variable" }, { include: "#operator" }, { match: "\\s*" }] }, { captures: { 1: { name: "support.function.misc.counter.css" }, 2: { name: "punctuation.section.function.css" }, 3: { name: "variable.section.css" } }, match: "(counter)(\\()([a-zA-Z_-][a-zA-Z0-9_-]*)(?=\\))", name: "meta.function.misc.counter.css" }, { begin: "(counters)(\\()", beginCaptures: { 1: { name: "support.function.misc.counters.css" }, 2: { name: "punctuation.section.function.css" } }, end: "(?=\\))", name: "meta.function.misc.counters.css", patterns: [{ match: "\\G[a-zA-Z_-][a-zA-Z0-9_-]*", name: "variable.section.css" }, { match: "\\s*(,)\\s*", name: "punctuation.separator.parameter.css" }, { include: "#string" }, { include: "#interpolation" }] }, { begin: "(attr)(\\()", beginCaptures: { 1: { name: "support.function.misc.attr.css" }, 2: { name: "punctuation.section.function.css" } }, end: "(?=\\))", name: "meta.function.misc.attr.css", patterns: [{ match: "\\G[a-zA-Z_-][a-zA-Z0-9_-]*", name: "entity.other.attribute-name.attribute.css" }, { match: "(?<=[a-zA-Z0-9_-])\\s*\\b(string|color|url|integer|number|length|em|ex|px|rem|vw|vh|vmin|vmax|mm|cm|in|pt|pc|angle|deg|grad|rad|time|s|ms|frequency|Hz|kHz|%)\\b", name: "support.type.attr.css" }, { match: "\\s*(,)\\s*", name: "punctuation.separator.parameter.css" }, { include: "#string" }, { include: "#interpolation" }] }, { begin: "(calc)(\\()", beginCaptures: { 1: { name: "support.function.misc.calc.css" }, 2: { name: "punctuation.section.function.css" } }, end: "(?=\\))", name: "meta.function.misc.calc.css", patterns: [{ include: "#property_values" }] }, { begin: "(cubic-bezier)(\\()", beginCaptures: { 1: { name: "support.function.timing.cubic-bezier.css" }, 2: { name: "punctuation.section.function.css" } }, end: "(?=\\))", name: "meta.function.timing.cubic-bezier.css", patterns: [{ match: "\\s*(,)\\s*", name: "punctuation.separator.parameter.css" }, { include: "#numeric" }, { include: "#interpolation" }] }, { begin: "(steps)(\\()", beginCaptures: { 1: { name: "support.function.timing.steps.css" }, 2: { name: "punctuation.section.function.css" } }, end: "(?=\\))", name: "meta.function.timing.steps.css", patterns: [{ match: "\\s*(,)\\s*", name: "punctuation.separator.parameter.css" }, { include: "#numeric" }, { match: "\\b(start|end)\\b", name: "support.constant.timing.steps.direction.css" }, { include: "#interpolation" }] }, { begin: "(linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient)(\\()", beginCaptures: { 1: { name: "support.function.gradient.css" }, 2: { name: "punctuation.section.function.css" } }, end: "(?=\\))", name: "meta.function.gradient.css", patterns: [{ match: "\\s*(,)\\s*", name: "punctuation.separator.parameter.css" }, { include: "#numeric" }, { include: "#color" }, { match: "\\b(to|bottom|right|left|top|circle|ellipse|center|closest-side|closest-corner|farthest-side|farthest-corner|at)\\b", name: "support.constant.gradient.css" }, { include: "#interpolation" }] }, { begin: "(blur|brightness|contrast|grayscale|hue-rotate|invert|opacity|saturate|sepia)(\\()", beginCaptures: { 1: { name: "support.function.filter.css" }, 2: { name: "punctuation.section.function.css" } }, end: "(?=\\))", name: "meta.function.filter.css", patterns: [{ include: "#numeric" }, { include: "#property_variable" }, { include: "#interpolation" }] }, { begin: "(drop-shadow)(\\()", beginCaptures: { 1: { name: "support.function.filter.drop-shadow.css" }, 2: { name: "punctuation.section.function.css" } }, end: "(?=\\))", name: "meta.function.filter.drop-shadow.css", patterns: [{ include: "#numeric" }, { include: "#color" }, { include: "#property_variable" }, { include: "#interpolation" }] }, { begin: "(matrix|matrix3d|perspective|rotate|rotate3d|rotate[Xx]|rotate[yY]|rotate[zZ]|scale|scale3d|scale[xX]|scale[yY]|scale[zZ]|skew|skew[xX]|skew[yY]|translate|translate3d|translate[xX]|translate[yY]|translate[zZ])(\\()", beginCaptures: { 1: { name: "support.function.transform.css" }, 2: { name: "punctuation.section.function.css" } }, end: "(?=\\))", name: "meta.function.transform.css", patterns: [{ include: "#numeric" }, { include: "#property_variable" }, { include: "#interpolation" }] }, { match: "(url|local|format|counter|counters|attr|calc)(?=\\()", name: "support.function.misc.css" }, { match: "(cubic-bezier|steps)(?=\\()", name: "support.function.timing.css" }, { match: "(linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient)(?=\\()", name: "support.function.gradient.css" }, { match: "(blur|brightness|contrast|drop-shadow|grayscale|hue-rotate|invert|opacity|saturate|sepia)(?=\\()", name: "support.function.filter.css" }, { match: "(matrix|matrix3d|perspective|rotate|rotate3d|rotate[Xx]|rotate[yY]|rotate[zZ]|scale|scale3d|scale[xX]|scale[yY]|scale[zZ]|skew|skew[xX]|skew[yY]|translate|translate3d|translate[xX]|translate[yY]|translate[zZ])(?=\\()", name: "support.function.transform.css" }, { begin: "([a-zA-Z_-][a-zA-Z0-9_-]*)(\\()", beginCaptures: { 1: { name: "entity.name.function.stylus" }, 2: { name: "punctuation.section.function.css" } }, end: "(?=\\))", name: "meta.function.stylus", patterns: [{ match: `(?x)
--
(?:[-a-zA-Z_]    | [^\\x00-\\x7F])
(?:[-a-zA-Z0-9_] | [^\\x00-\\x7F]
|\\\\(?:[0-9a-fA-F]{1,6}|.)
)*`, name: "variable.argument.stylus" }, { match: "\\s*(,)\\s*", name: "punctuation.separator.parameter.css" }, { include: "#interpolation" }, { include: "#property_values" }] }, { match: "\\(", name: "punctuation.section.function.css" }] }, interpolation: { begin: "(?:(\\{)[^\\S\\n]*)(?=[^;=]*[^\\S\\n]*\\})", beginCaptures: { 1: { name: "meta.brace.curly" } }, end: "(?:[^\\S\\n]*(\\}))|\\n|$", endCaptures: { 1: { name: "meta.brace.curly" } }, name: "meta.interpolation.stylus", patterns: [{ include: "#variable" }, { include: "#numeric" }, { include: "#string" }, { include: "#operator" }] }, language_constants: { match: "\\b(true|false|null)\\b", name: "constant.language.stylus" }, language_keywords: { patterns: [{ match: "(\\b|\\s)(return|else|for|unless|if|else)\\b", name: "keyword.control.stylus" }, { match: "(\\b|\\s)(!important|in|is defined|is a)\\b", name: "keyword.other.stylus" }, { match: "\\barguments\\b", name: "variable.language.stylus" }] }, numeric: { patterns: [{ captures: { 1: { name: "keyword.other.unit.css" } }, match: "(?x) (?<!\\w|-)(?:(?:-|\\+)?(?:[0-9]+(?:\\.[0-9]+)?)|(?:\\.[0-9]+)) ((?:px|pt|ch|cm|mm|in|r?em|ex|pc|deg|g?rad|dpi|dpcm|dppx|fr|ms|s|turn|vh|vmax|vmin|vw)\\b|%)?", name: "constant.numeric.css" }] }, operator: { patterns: [{ match: "((?:\\?|:|!|~|\\+|(\\s-\\s)|(?:\\*)?\\*|\\/|%|(\\.)?\\.\\.|<|>|(?:=|:|\\?|\\+|-|\\*|\\/|%|<|>)?=|!=)|\\b(?:in|is(?:nt)?|(?<!:)not|or|and)\\b)", name: "keyword.operator.stylus" }, { include: "#char_escape" }] }, property: { begin: `(?x:\\G\\s*(?:
(-webkit-[-A-Za-z]+|-moz-[-A-Za-z]+|-o-[-A-Za-z]+|-ms-[-A-Za-z]+|-khtml-[-A-Za-z]+|zoom|z-index|y|x|wrap|word-wrap|word-spacing|word-break|word|width|widows|white-space-collapse|white-space|white|weight|volume|voice-volume|voice-stress|voice-rate|voice-pitch-range|voice-pitch|voice-family|voice-duration|voice-balance|voice|visibility|vertical-align|variant|user-select|up|unicode-bidi|unicode-range|unicode|trim|transition-timing-function|transition-property|transition-duration|transition-delay|transition|transform|touch-action|top-width|top-style|top-right-radius|top-left-radius|top-color|top|timing-function|text-wrap|text-transform|text-shadow|text-replace|text-rendering|text-overflow|text-outline|text-justify|text-indent|text-height|text-emphasis|text-decoration|text-align-last|text-align|text|target-position|target-new|target-name|target|table-layout|tab-size|style-type|style-position|style-image|style|string-set|stretch|stress|stacking-strategy|stacking-shift|stacking-ruby|stacking|src|speed|speech-rate|speech|speak-punctuation|speak-numeral|speak-header|speak|span|spacing|space-collapse|space|sizing|size-adjust|size|shadow|respond-to|rule-width|rule-style|rule-color|rule|ruby-span|ruby-position|ruby-overhang|ruby-align|ruby|rows|rotation-point|rotation|role|right-width|right-style|right-color|right|richness|rest-before|rest-after|rest|resource|resize|reset|replace|repeat|rendering-intent|rate|radius|quotes|punctuation-trim|punctuation|property|profile|presentation-level|presentation|position|pointer-events|point|play-state|play-during|play-count|pitch-range|pitch|phonemes|pause-before|pause-after|pause|page-policy|page-break-inside|page-break-before|page-break-after|page|padding-top|padding-right|padding-left|padding-bottom|padding|pack|overhang|overflow-y|overflow-x|overflow-style|overflow|outline-width|outline-style|outline-offset|outline-color|outline|orphans|origin|orientation|orient|ordinal-group|order|opacity|offset|numeral|new|nav-up|nav-right|nav-left|nav-index|nav-down|nav|name|move-to|model|mix-blend-mode|min-width|min-height|min|max-width|max-height|max|marquee-style|marquee-speed|marquee-play-count|marquee-direction|marquee|marks|mark-before|mark-after|mark|margin-top|margin-right|margin-left|margin-bottom|margin|mask-image|list-style-type|list-style-position|list-style-image|list-style|list|lines|line-stacking-strategy|line-stacking-shift|line-stacking-ruby|line-stacking|line-height|line-break|level|letter-spacing|length|left-width|left-style|left-color|left|label|justify-content|justify|iteration-count|inline-box-align|initial-value|initial-size|initial-before-align|initial-before-adjust|initial-after-align|initial-after-adjust|index|indent|increment|image-resolution|image-orientation|image|icon|hyphens|hyphenate-resource|hyphenate-lines|hyphenate-character|hyphenate-before|hyphenate-after|hyphenate|height|header|hanging-punctuation|gap|grid|grid-area|grid-auto-columns|grid-auto-flow|grid-auto-rows|grid-column|grid-column-end|grid-column-start|grid-row|grid-row-end|grid-row-start|grid-template|grid-template-areas|grid-template-columns|grid-template-rows|row-gap|gap|font-kerning|font-language-override|font-weight|font-variant-caps|font-variant|font-style|font-synthesis|font-stretch|font-size-adjust|font-size|font-family|font|float-offset|float|flex-wrap|flex-shrink|flex-grow|flex-group|flex-flow|flex-direction|flex-basis|flex|fit-position|fit|fill|filter|family|empty-cells|emphasis|elevation|duration|drop-initial-value|drop-initial-size|drop-initial-before-align|drop-initial-before-adjust|drop-initial-after-align|drop-initial-after-adjust|drop|down|dominant-baseline|display-role|display-model|display|direction|delay|decoration-break|decoration|cursor|cue-before|cue-after|cue|crop|counter-reset|counter-increment|counter|count|content|columns|column-width|column-span|column-rule-width|column-rule-style|column-rule-color|column-rule|column-gap|column-fill|column-count|column-break-before|column-break-after|column|color-profile|color|collapse|clip|clear|character|caption-side|break-inside|break-before|break-after|break|box-sizing|box-shadow|box-pack|box-orient|box-ordinal-group|box-lines|box-flex-group|box-flex|box-direction|box-decoration-break|box-align|box|bottom-width|bottom-style|bottom-right-radius|bottom-left-radius|bottom-color|bottom|border-width|border-top-width|border-top-style|border-top-right-radius|border-top-left-radius|border-top-color|border-top|border-style|border-spacing|border-right-width|border-right-style|border-right-color|border-right|border-radius|border-length|border-left-width|border-left-style|border-left-color|border-left|border-image|border-color|border-collapse|border-bottom-width|border-bottom-style|border-bottom-right-radius|border-bottom-left-radius|border-bottom-color|border-bottom|border|bookmark-target|bookmark-level|bookmark-label|bookmark|binding|bidi|before|baseline-shift|baseline|balance|background-blend-mode|background-size|background-repeat|background-position|background-origin|background-image|background-color|background-clip|background-break|background-attachment|background|azimuth|attachment|appearance|animation-timing-function|animation-play-state|animation-name|animation-iteration-count|animation-duration|animation-direction|animation-delay|animation-fill-mode|animation|alignment-baseline|alignment-adjust|alignment|align-self|align-last|align-items|align-content|align|after|adjust|will-change)|
(writing-mode|text-anchor|stroke-width|stroke-opacity|stroke-miterlimit|stroke-linejoin|stroke-linecap|stroke-dashoffset|stroke-dasharray|stroke|stop-opacity|stop-color|shape-rendering|marker-start|marker-mid|marker-end|lighting-color|kerning|image-rendering|glyph-orientation-vertical|glyph-orientation-horizontal|flood-opacity|flood-color|fill-rule|fill-opacity|fill|enable-background|color-rendering|color-interpolation-filters|color-interpolation|clip-rule|clip-path)|
([a-zA-Z_-][a-zA-Z0-9_-]*)
)(?!([^\\S\\n]*&)|([^\\S\\n]*\\{))(?=:|([^\\S\\n]+[^\\s])))`, beginCaptures: { 1: { name: "support.type.property-name.css" }, 2: { name: "support.type.property-name.svg.css" }, 3: { name: "support.function.mixin.stylus" } }, end: "(;)|(?=\\n|\\}|$)", endCaptures: { 1: { name: "punctuation.terminator.rule.css" } }, patterns: [{ include: "#property_value" }] }, property_value: { begin: "\\G(?:(:)|(\\s))(\\s*)(?!&)", beginCaptures: { 1: { name: "punctuation.separator.key-value.css" }, 2: { name: "punctuation.separator.key-value.css" } }, end: "(?=\\n|;|\\})", endCaptures: { 1: { name: "punctuation.terminator.rule.css" } }, name: "meta.property-value.css", patterns: [{ include: "#property_values" }, { match: "[^\\n]+?" }] }, property_values: { patterns: [{ include: "#function" }, { include: "#comment" }, { include: "#language_keywords" }, { include: "#language_constants" }, { match: "(?:(?=\\w)(?<![\\w-]))(wrap-reverse|wrap|whitespace|wait|w-resize|visible|vertical-text|vertical-ideographic|uppercase|upper-roman|upper-alpha|unicase|underline|ultra-expanded|ultra-condensed|transparent|transform|top|titling-caps|thin|thick|text-top|text-bottom|text|tb-rl|table-row-group|table-row|table-header-group|table-footer-group|table-column-group|table-column|table-cell|table|sw-resize|super|strict|stretch|step-start|step-end|static|square|space-between|space-around|space|solid|soft-light|small-caps|separate|semi-expanded|semi-condensed|se-resize|scroll|screen|saturation|s-resize|running|rtl|row-reverse|row-resize|row|round|right|ridge|reverse|repeat-y|repeat-x|repeat|relative|progressive|progress|pre-wrap|pre-line|pre|pointer|petite-caps|paused|pan-x|pan-left|pan-right|pan-y|pan-up|pan-down|padding-box|overline|overlay|outside|outset|optimizeSpeed|optimizeLegibility|opacity|oblique|nw-resize|nowrap|not-allowed|normal|none|no-repeat|no-drop|newspaper|ne-resize|n-resize|multiply|move|middle|medium|max-height|manipulation|main-size|luminosity|ltr|lr-tb|lowercase|lower-roman|lower-alpha|loose|local|list-item|linear(?!-)|line-through|line-edge|line|lighter|lighten|left|keep-all|justify|italic|inter-word|inter-ideograph|inside|inset|inline-block|inline|inherit|infinite|inactive|ideograph-space|ideograph-parenthesis|ideograph-numeric|ideograph-alpha|hue|horizontal|hidden|help|hard-light|hand|groove|geometricPrecision|forwards|flex-start|flex-end|flex|fixed|extra-expanded|extra-condensed|expanded|exclusion|ellipsis|ease-out|ease-in-out|ease-in|ease|e-resize|double|dotted|distribute-space|distribute-letter|distribute-all-lines|distribute|disc|disabled|difference|default|decimal|dashed|darken|currentColor|crosshair|cover|content-box|contain|condensed|column-reverse|column|color-dodge|color-burn|color|collapse|col-resize|circle|char|center|capitalize|break-word|break-all|bottom|both|border-box|bolder|bold|block|bidi-override|below|baseline|balance|backwards|auto|antialiased|always|alternate-reverse|alternate|all-small-caps|all-scroll|all-petite-caps|all|absolute)(?:(?<=\\w)(?![\\w-]))", name: "support.constant.property-value.css" }, { match: "(?:(?=\\w)(?<![\\w-]))(start|sRGB|square|round|optimizeSpeed|optimizeQuality|nonzero|miter|middle|linearRGB|geometricPrecision |evenodd |end |crispEdges|butt|bevel)(?:(?<=\\w)(?![\\w-]))", name: "support.constant.property-value.svg.css" }, { include: "#font_name" }, { include: "#numeric" }, { include: "#color" }, { include: "#string" }, { match: "\\!\\s*important", name: "keyword.other.important.css" }, { include: "#operator" }, { include: "#stylus_keywords" }, { include: "#property_variable" }] }, property_variable: { patterns: [{ include: "#variable" }, { match: "(?<!^)(\\@[a-zA-Z_-][a-zA-Z0-9_-]*)", name: "variable.property.stylus" }] }, selector: { patterns: [{ match: "(?:(?=\\w)(?<![\\w-]))(a|abbr|acronym|address|area|article|aside|audio|b|base|bdi|bdo|big|blockquote|body|br|button|canvas|caption|cite|code|col|colgroup|data|datalist|dd|del|details|dfn|dialog|div|dl|dt|em|embed|eventsource|fieldset|figure|figcaption|footer|form|frame|frameset|(h[1-6])|head|header|hgroup|hr|html|i|iframe|img|input|ins|kbd|keygen|label|legend|li|link|main|map|mark|math|menu|menuitem|meta|meter|nav|noframes|noscript|object|ol|optgroup|option|output|p|param|picture|pre|progress|q|rb|rp|rt|rtc|ruby|s|samp|script|section|select|small|source|span|strike|strong|style|sub|summary|sup|svg|table|tbody|td|template|textarea|tfoot|th|thead|time|title|tr|track|tt|u|ul|var|video|wbr)(?:(?<=\\w)(?![\\w-]))", name: "entity.name.tag.css" }, { match: "(?:(?=\\w)(?<![\\w-]))(vkern|view|use|tspan|tref|title|textPath|text|symbol|switch|svg|style|stop|set|script|rect|radialGradient|polyline|polygon|pattern|path|mpath|missing-glyph|metadata|mask|marker|linearGradient|line|image|hkern|glyphRef|glyph|g|foreignObject|font-face-uri|font-face-src|font-face-name|font-face-format|font-face|font|filter|feTurbulence|feTile|feSpotLight|feSpecularLighting|fePointLight|feOffset|feMorphology|feMergeNode|feMerge|feImage|feGaussianBlur|feFuncR|feFuncG|feFuncB|feFuncA|feFlood|feDistantLight|feDisplacementMap|feDiffuseLighting|feConvolveMatrix|feComposite|feComponentTransfer|feColorMatrix|feBlend|ellipse|desc|defs|cursor|color-profile|clipPath|circle|animateTransform|animateMotion|animateColor|animate|altGlyphItem|altGlyphDef|altGlyph|a)(?:(?<=\\w)(?![\\w-]))", name: "entity.name.tag.svg.css" }, { match: "\\s*(\\,)\\s*", name: "meta.selector.stylus" }, { match: "\\*", name: "meta.selector.stylus" }, { captures: { 2: { name: "entity.other.attribute-name.parent-selector-suffix.stylus" } }, match: "\\s*(\\&)([a-zA-Z0-9_-]+)\\s*", name: "meta.selector.stylus" }, { match: "\\s*(\\&)\\s*", name: "meta.selector.stylus" }, { captures: { 1: { name: "punctuation.definition.entity.css" } }, match: "(\\.)[a-zA-Z0-9_-]+", name: "entity.other.attribute-name.class.css" }, { captures: { 1: { name: "punctuation.definition.entity.css" } }, match: "(#)[a-zA-Z][a-zA-Z0-9_-]*", name: "entity.other.attribute-name.id.css" }, { captures: { 1: { name: "punctuation.definition.entity.css" } }, match: "(:+)(after|before|content|first-letter|first-line|host|(-(moz|webkit|ms)-)?selection)\\b", name: "entity.other.attribute-name.pseudo-element.css" }, { captures: { 1: { name: "punctuation.definition.entity.css" } }, match: "(:)((first|last)-child|(first|last|only)-of-type|empty|root|target|first|left|right)\\b", name: "entity.other.attribute-name.pseudo-class.css" }, { captures: { 1: { name: "punctuation.definition.entity.css" } }, match: "(:)(checked|enabled|default|disabled|indeterminate|invalid|optional|required|valid)\\b", name: "entity.other.attribute-name.pseudo-class.ui-state.css" }, { begin: "((:)not)(\\()", beginCaptures: { 1: { name: "entity.other.attribute-name.pseudo-class.css" }, 2: { name: "punctuation.definition.entity.css" }, 3: { name: "punctuation.section.function.css" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.function.css" } }, patterns: [{ include: "#selector" }] }, { captures: { 1: { name: "entity.other.attribute-name.pseudo-class.css" }, 2: { name: "punctuation.definition.entity.css" }, 3: { name: "punctuation.section.function.css" }, 4: { name: "constant.numeric.css" }, 5: { name: "punctuation.section.function.css" } }, match: "((:)nth-(?:(?:last-)?child|(?:last-)?of-type))(\\()(\\-?(?:\\d+n?|n)(?:\\+\\d+)?|even|odd)(\\))" }, { captures: { 1: { name: "entity.other.attribute-name.pseudo-class.css" }, 2: { name: "puncutation.definition.entity.css" }, 3: { name: "punctuation.section.function.css" }, 4: { name: "constant.language.css" }, 5: { name: "punctuation.section.function.css" } }, match: "((:)dir)\\s*(?:(\\()(ltr|rtl)?(\\)))?" }, { captures: { 1: { name: "entity.other.attribute-name.pseudo-class.css" }, 2: { name: "puncutation.definition.entity.css" }, 3: { name: "punctuation.section.function.css" }, 4: { name: "constant.language.css" }, 6: { name: "punctuation.section.function.css" } }, match: "((:)lang)\\s*(?:(\\()(\\w+(-\\w+)?)?(\\)))?" }, { captures: { 1: { name: "punctuation.definition.entity.css" } }, match: "(:)(active|hover|link|visited|focus)\\b", name: "entity.other.attribute-name.pseudo-class.css" }, { captures: { 1: { name: "punctuation.definition.entity.css" } }, match: "(::)(shadow)\\b", name: "entity.other.attribute-name.pseudo-class.css" }, { captures: { 1: { name: "punctuation.definition.entity.css" }, 2: { name: "entity.other.attribute-name.attribute.css" }, 3: { name: "punctuation.separator.operator.css" }, 4: { name: "string.unquoted.attribute-value.css" }, 5: { name: "string.quoted.double.attribute-value.css" }, 6: { name: "punctuation.definition.string.begin.css" }, 7: { name: "punctuation.definition.string.end.css" }, 8: { name: "punctuation.definition.entity.css" } }, match: `(?i)(\\[)\\s*(-?[_a-z\\\\[[:^ascii:]]][_a-z0-9\\-\\\\[[:^ascii:]]]*)(?:\\s*([~|^$*]?=)\\s*(?:(-?[_a-z\\\\[[:^ascii:]]][_a-z0-9\\-\\\\[[:^ascii:]]]*)|((?>(['"])(?:[^\\\\]|\\\\.)*?(\\6)))))?\\s*(\\])`, name: "meta.attribute-selector.css" }, { include: "#interpolation" }, { include: "#variable" }] }, string: { patterns: [{ begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.css" } }, end: '"', endCaptures: { 0: { name: "punctuation.definition.string.end.css" } }, name: "string.quoted.double.css", patterns: [{ match: "\\\\([a-fA-F0-9]{1,6}|.)", name: "constant.character.escape.css" }] }, { begin: "'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.css" } }, end: "'", endCaptures: { 0: { name: "punctuation.definition.string.end.css" } }, name: "string.quoted.single.css", patterns: [{ match: "\\\\([a-fA-F0-9]{1,6}|.)", name: "constant.character.escape.css" }] }] }, variable: { match: "(\\$[a-zA-Z_-][a-zA-Z0-9_-]*)", name: "variable.stylus" }, variable_declaration: { begin: "^[^\\S\\n]*(\\$?[a-zA-Z_-][a-zA-Z0-9_-]*)[^\\S\\n]*(\\=|\\?\\=|\\:\\=)", beginCaptures: { 1: { name: "variable.stylus" }, 2: { name: "keyword.operator.stylus" } }, end: "(\\n)|(;)|(?=\\})", endCaptures: { 2: { name: "punctuation.terminator.rule.css" } }, patterns: [{ include: "#property_values" }] } }, scopeName: "source.stylus", aliases: ["styl"] });
var c = [
  W
];
const I = Object.freeze({ displayName: "Sass", fileTypes: ["sass"], foldingStartMarker: "/\\*|^#|^\\*|^\\b|*#?region|^\\.", foldingStopMarker: "\\*/|*#?endregion|^\\s*$", name: "sass", patterns: [{ begin: "^(\\s*)(/\\*)", end: "(\\*/)|^(?!\\s\\1)", name: "comment.block.sass", patterns: [{ include: "#comment-tag" }, { include: "#comment-param" }] }, { match: "^[\\t ]*/?//[\\t ]*[SRI][\\t ]*$", name: "keyword.other.sass.formatter.action" }, { begin: "^[\\t ]*//[\\t ]*(import)[\\t ]*(css-variables)[\\t ]*(from)", captures: { 1: { name: "keyword.control" }, 2: { name: "variable" }, 3: { name: "keyword.control" } }, end: "$\\n?", name: "comment.import.css.variables", patterns: [{ include: "#import-quotes" }] }, { include: "#double-slash" }, { include: "#double-quoted" }, { include: "#single-quoted" }, { include: "#interpolation" }, { include: "#curly-brackets" }, { include: "#placeholder-selector" }, { begin: "\\$[a-zA-Z0-9_-]+(?=:)", captures: { 0: { name: "variable.other.name" } }, end: "$\\n?|(?=\\)\\s\\)|\\)\\n)", name: "sass.script.maps", patterns: [{ include: "#double-slash" }, { include: "#double-quoted" }, { include: "#single-quoted" }, { include: "#interpolation" }, { include: "#variable" }, { include: "#rgb-value" }, { include: "#numeric" }, { include: "#unit" }, { include: "#flag" }, { include: "#comma" }, { include: "#function" }, { include: "#function-content" }, { include: "#operator" }, { include: "#reserved-words" }, { include: "#parent-selector" }, { include: "#property-value" }, { include: "#semicolon" }, { include: "#dotdotdot" }] }, { include: "#variable-root" }, { include: "#numeric" }, { include: "#unit" }, { include: "#flag" }, { include: "#comma" }, { include: "#semicolon" }, { include: "#dotdotdot" }, { begin: "@include|\\+(?!\\W|\\d)", captures: { 0: { name: "keyword.control.at-rule.css.sass" } }, end: "(?=\\n|\\()", name: "support.function.name.sass.library" }, { begin: "^(@use)", captures: { 0: { name: "keyword.control.at-rule.css.sass.use" } }, end: "(?=\\n)", name: "sass.use", patterns: [{ match: "as|with", name: "support.type.css.sass" }, { include: "#numeric" }, { include: "#unit" }, { include: "#variable-root" }, { include: "#rgb-value" }, { include: "#comma" }, { include: "#parenthesis-open" }, { include: "#parenthesis-close" }, { include: "#colon" }, { include: "#import-quotes" }] }, { begin: "^@import(.*?)( as.*)?$", captures: { 1: { name: "constant.character.css.sass" }, 2: { name: "invalid" } }, end: "(?=\\n)", name: "keyword.control.at-rule.use" }, { begin: "@mixin|^[\\t ]*=|@function", captures: { 0: { name: "keyword.control.at-rule.css.sass" } }, end: "$\\n?|(?=\\()", name: "support.function.name.sass", patterns: [{ match: "[\\w-]+", name: "entity.name.function" }] }, { begin: "@", end: "$\\n?|\\s(?!(all|braille|embossed|handheld|print|projection|screen|speech|tty|tv|if|only|not)(\\s|,))", name: "keyword.control.at-rule.css.sass" }, { begin: "(?<!\\-|\\()\\b(a|abbr|acronym|address|applet|area|article|aside|audio|b|base|big|blockquote|body|br|button|canvas|caption|cite|code|col|colgroup|datalist|dd|del|details|dfn|dialog|div|dl|dt|em|embed|eventsource|fieldset|figure|figcaption|footer|form|frame|frameset|(h[1-6])|head|header|hgroup|hr|html|i|iframe|img|input|ins|kbd|label|legend|li|link|map|mark|menu|meta|meter|nav|noframes|noscript|object|ol|optgroup|option|output|p|param|picture|pre|progress|q|samp|script|section|select|small|source|span|strike|strong|style|sub|summary|sup|table|tbody|td|textarea|tfoot|th|thead|time|title|tr|tt|ul|var|video|main|svg|rect|ruby|center|circle|ellipse|line|polyline|polygon|path|text|u|slot)\\b(?!-|\\)|:\\s)|&", end: "$\\n?|(?=\\s|,|\\(|\\)|\\.|\\#|\\[|>|-|_)", name: "entity.name.tag.css.sass.symbol", patterns: [{ include: "#interpolation" }, { include: "#pseudo-class" }] }, { begin: "#", end: "$\\n?|(?=\\s|,|\\(|\\)|\\.|\\[|>)", name: "entity.other.attribute-name.id.css.sass", patterns: [{ include: "#interpolation" }, { include: "#pseudo-class" }] }, { begin: "\\.|(?<=&)(-|_)", end: "$\\n?|(?=\\s|,|\\(|\\)|\\[|>)", name: "entity.other.attribute-name.class.css.sass", patterns: [{ include: "#interpolation" }, { include: "#pseudo-class" }] }, { begin: "\\[", end: "\\]", name: "entity.other.attribute-selector.sass", patterns: [{ include: "#double-quoted" }, { include: "#single-quoted" }, { match: "\\^|\\$|\\*|~", name: "keyword.other.regex.sass" }] }, { match: `^((?<=\\]|\\)|not\\(|\\*|>|>\\s)|
*):[a-z:-]+|(::|:-)[a-z:-]+`, name: "entity.other.attribute-name.pseudo-class.css.sass" }, { include: "#module" }, { match: "[\\w-]*\\(", name: "entity.name.function" }, { match: "\\)", name: "entity.name.function.close" }, { begin: ":", end: "$\\n?|(?=\\s\\(|and\\(|\\),)", name: "meta.property-list.css.sass.prop", patterns: [{ match: "(?<=:)[a-z-]+\\s", name: "support.type.property-name.css.sass.prop.name" }, { include: "#double-slash" }, { include: "#double-quoted" }, { include: "#single-quoted" }, { include: "#interpolation" }, { include: "#curly-brackets" }, { include: "#variable" }, { include: "#rgb-value" }, { include: "#numeric" }, { include: "#unit" }, { include: "#module" }, { match: "--.+?(?=\\))", name: "variable.css" }, { match: "[\\w-]*\\(", name: "entity.name.function" }, { match: "\\)", name: "entity.name.function.close" }, { include: "#flag" }, { include: "#comma" }, { include: "#semicolon" }, { include: "#function" }, { include: "#function-content" }, { include: "#operator" }, { include: "#parent-selector" }, { include: "#property-value" }] }, { include: "#rgb-value" }, { include: "#function" }, { include: "#function-content" }, { begin: "(?<=})(?!\\n|\\(|\\)|[a-zA-Z0-9_-]+:)", end: "\\s|(?=,|\\.|\\[|\\)|\\n)", name: "entity.name.tag.css.sass", patterns: [{ include: "#interpolation" }, { include: "#pseudo-class" }] }, { include: "#operator" }, { match: "[a-z-]+((?=:|#{))", name: "support.type.property-name.css.sass.prop.name" }, { include: "#reserved-words" }, { include: "#property-value" }], repository: { colon: { match: ":", name: "meta.property-list.css.sass.colon" }, comma: { match: "\\band\\b|\\bor\\b|,", name: "comment.punctuation.comma.sass" }, "comment-param": { match: "\\@(\\w+)", name: "storage.type.class.jsdoc" }, "comment-tag": { begin: "(?<={{)", end: "(?=}})", name: "comment.tag.sass" }, "curly-brackets": { match: "{|}", name: "invalid" }, dotdotdot: { match: "\\.\\.\\.", name: "variable.other" }, "double-quoted": { begin: '"', end: '"', name: "string.quoted.double.css.sass", patterns: [{ include: "#quoted-interpolation" }] }, "double-slash": { begin: "//", end: "$\\n?", name: "comment.line.sass", patterns: [{ include: "#comment-tag" }] }, flag: { match: "!(important|default|optional|global)", name: "keyword.other.important.css.sass" }, function: { match: "(?<=[\\s|\\(|,|:])(?!url|format|attr)[a-zA-Z0-9_-][\\w-]*(?=\\()", name: "support.function.name.sass" }, "function-content": { begin: "(?<=url\\(|format\\(|attr\\()", end: ".(?=\\))", name: "string.quoted.double.css.sass" }, "import-quotes": { match: `["']?\\.{0,2}[\\w/]+["']?`, name: "constant.character.css.sass" }, interpolation: { begin: "#{", end: "}", name: "support.function.interpolation.sass", patterns: [{ include: "#variable" }, { include: "#numeric" }, { include: "#operator" }, { include: "#unit" }, { include: "#comma" }, { include: "#double-quoted" }, { include: "#single-quoted" }] }, module: { captures: { 1: { name: "constant.character.module.name" }, 2: { name: "constant.numeric.module.dot" } }, match: "([\\w-]+?)(\\.)", name: "constant.character.module" }, numeric: { match: "(-|\\.)?[0-9]+(\\.[0-9]+)?", name: "constant.numeric.css.sass" }, operator: { match: "\\+|\\s-\\s|\\s-(?=\\$)|(?<=\\()-(?=\\$)|\\s-(?=\\()|\\*|/|%|=|!|<|>|~", name: "keyword.operator.sass" }, "parent-selector": { match: "&", name: "entity.name.tag.css.sass" }, "parenthesis-close": { match: "\\)", name: "entity.name.function.parenthesis.close" }, "parenthesis-open": { match: "\\(", name: "entity.name.function.parenthesis.open" }, "placeholder-selector": { begin: "(?<!\\d)%(?!\\d)", end: "$\\n?|\\s", name: "entity.other.inherited-class.placeholder-selector.css.sass" }, "property-value": { match: "[a-zA-Z0-9_-]+", name: "meta.property-value.css.sass support.constant.property-value.css.sass" }, "pseudo-class": { match: ":[a-z:-]+", name: "entity.other.attribute-name.pseudo-class.css.sass" }, "quoted-interpolation": { begin: "#{", end: "}", name: "support.function.interpolation.sass", patterns: [{ include: "#variable" }, { include: "#numeric" }, { include: "#operator" }, { include: "#unit" }, { include: "#comma" }] }, "reserved-words": { match: "\\b(false|from|in|not|null|through|to|true)\\b", name: "support.type.property-name.css.sass" }, "rgb-value": { match: "(#)([0-9a-fA-F]{3,4}|[0-9a-fA-F]{6}|[0-9a-fA-F]{8})\\b", name: "constant.language.color.rgb-value.css.sass" }, semicolon: { match: ";", name: "invalid" }, "single-quoted": { begin: "'", end: "'", name: "string.quoted.single.css.sass", patterns: [{ include: "#quoted-interpolation" }] }, unit: { match: "(?<=[\\d]|})(ch|cm|deg|dpcm|dpi|dppx|em|ex|grad|Hz|in|kHz|mm|ms|pc|pt|px|rad|rem|s|turn|vh|vmax|vmin|vw|fr|%)", name: "keyword.control.unit.css.sass" }, variable: { match: "\\$[a-zA-Z0-9_-]+", name: "variable.other.value" }, "variable-root": { match: "\\$[a-zA-Z0-9_-]+", name: "variable.other.root" } }, scopeName: "source.sass" });
var p = [
  I
];
const P = Object.freeze({ displayName: "CSS", name: "css", patterns: [{ include: "#comment-block" }, { include: "#escapes" }, { include: "#combinators" }, { include: "#selector" }, { include: "#at-rules" }, { include: "#rule-list" }], repository: { "at-rules": { patterns: [{ begin: "\\A(?:\\xEF\\xBB\\xBF)?(?i:(?=\\s*@charset\\b))", end: ";|(?=$)", endCaptures: { 0: { name: "punctuation.terminator.rule.css" } }, name: "meta.at-rule.charset.css", patterns: [{ captures: { 1: { name: "invalid.illegal.not-lowercase.charset.css" }, 2: { name: "invalid.illegal.leading-whitespace.charset.css" }, 3: { name: "invalid.illegal.no-whitespace.charset.css" }, 4: { name: "invalid.illegal.whitespace.charset.css" }, 5: { name: "invalid.illegal.not-double-quoted.charset.css" }, 6: { name: "invalid.illegal.unclosed-string.charset.css" }, 7: { name: "invalid.illegal.unexpected-characters.charset.css" } }, match: `(?x)
\\G
((?!@charset)@\\w+)
|
\\G(\\s+)
|
(@charset\\S[^;]*)
|
(?<=@charset)
(\\x20{2,}|\\t+)
|
(?<=@charset\\x20)
([^";]+)
|
("[^"]+$)
|
(?<=")
([^;]+)` }, { captures: { 1: { name: "keyword.control.at-rule.charset.css" }, 2: { name: "punctuation.definition.keyword.css" } }, match: "((@)charset)(?=\\s)" }, { begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.css" } }, end: '"|$', endCaptures: { 0: { name: "punctuation.definition.string.end.css" } }, name: "string.quoted.double.css", patterns: [{ begin: '(?:\\G|^)(?=(?:[^"])+$)', end: "$", name: "invalid.illegal.unclosed.string.css" }] }] }, { begin: `(?i)((@)import)(?:\\s+|$|(?=['"]|/\\*))`, beginCaptures: { 1: { name: "keyword.control.at-rule.import.css" }, 2: { name: "punctuation.definition.keyword.css" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.rule.css" } }, name: "meta.at-rule.import.css", patterns: [{ begin: "\\G\\s*(?=/\\*)", end: "(?<=\\*/)\\s*", patterns: [{ include: "#comment-block" }] }, { include: "#string" }, { include: "#url" }, { include: "#media-query-list" }] }, { begin: "(?i)((@)font-face)(?=\\s*|{|/\\*|$)", beginCaptures: { 1: { name: "keyword.control.at-rule.font-face.css" }, 2: { name: "punctuation.definition.keyword.css" } }, end: "(?!\\G)", name: "meta.at-rule.font-face.css", patterns: [{ include: "#comment-block" }, { include: "#escapes" }, { include: "#rule-list" }] }, { begin: "(?i)(@)page(?=[\\s:{]|/\\*|$)", captures: { 0: { name: "keyword.control.at-rule.page.css" }, 1: { name: "punctuation.definition.keyword.css" } }, end: "(?=\\s*($|[:{;]))", name: "meta.at-rule.page.css", patterns: [{ include: "#rule-list" }] }, { begin: "(?i)(?=@media(\\s|\\(|/\\*|$))", end: "(?<=})(?!\\G)", patterns: [{ begin: "(?i)\\G(@)media", beginCaptures: { 0: { name: "keyword.control.at-rule.media.css" }, 1: { name: "punctuation.definition.keyword.css" } }, end: "(?=\\s*[{;])", name: "meta.at-rule.media.header.css", patterns: [{ include: "#media-query-list" }] }, { begin: "{", beginCaptures: { 0: { name: "punctuation.section.media.begin.bracket.curly.css" } }, end: "}", endCaptures: { 0: { name: "punctuation.section.media.end.bracket.curly.css" } }, name: "meta.at-rule.media.body.css", patterns: [{ include: "$self" }] }] }, { begin: `(?i)(?=@counter-style([\\s'"{;]|/\\*|$))`, end: "(?<=})(?!\\G)", patterns: [{ begin: "(?i)\\G(@)counter-style", beginCaptures: { 0: { name: "keyword.control.at-rule.counter-style.css" }, 1: { name: "punctuation.definition.keyword.css" } }, end: "(?=\\s*{)", name: "meta.at-rule.counter-style.header.css", patterns: [{ include: "#comment-block" }, { include: "#escapes" }, { captures: { 0: { patterns: [{ include: "#escapes" }] } }, match: `(?x)
(?:[-a-zA-Z_]    | [^\\x00-\\x7F])
(?:[-a-zA-Z0-9_] | [^\\x00-\\x7F]
|\\\\(?:[0-9a-fA-F]{1,6}|.)
)*`, name: "variable.parameter.style-name.css" }] }, { begin: "{", beginCaptures: { 0: { name: "punctuation.section.property-list.begin.bracket.curly.css" } }, end: "}", endCaptures: { 0: { name: "punctuation.section.property-list.end.bracket.curly.css" } }, name: "meta.at-rule.counter-style.body.css", patterns: [{ include: "#comment-block" }, { include: "#escapes" }, { include: "#rule-list-innards" }] }] }, { begin: `(?i)(?=@document([\\s'"{;]|/\\*|$))`, end: "(?<=})(?!\\G)", patterns: [{ begin: "(?i)\\G(@)document", beginCaptures: { 0: { name: "keyword.control.at-rule.document.css" }, 1: { name: "punctuation.definition.keyword.css" } }, end: "(?=\\s*[{;])", name: "meta.at-rule.document.header.css", patterns: [{ begin: "(?i)(?<![\\w-])(url-prefix|domain|regexp)(\\()", beginCaptures: { 1: { name: "support.function.document-rule.css" }, 2: { name: "punctuation.section.function.begin.bracket.round.css" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.function.end.bracket.round.css" } }, name: "meta.function.document-rule.css", patterns: [{ include: "#string" }, { include: "#comment-block" }, { include: "#escapes" }, { match: `[^'")\\s]+`, name: "variable.parameter.document-rule.css" }] }, { include: "#url" }, { include: "#commas" }, { include: "#comment-block" }, { include: "#escapes" }] }, { begin: "{", beginCaptures: { 0: { name: "punctuation.section.document.begin.bracket.curly.css" } }, end: "}", endCaptures: { 0: { name: "punctuation.section.document.end.bracket.curly.css" } }, name: "meta.at-rule.document.body.css", patterns: [{ include: "$self" }] }] }, { begin: `(?i)(?=@(?:-(?:webkit|moz|o|ms)-)?keyframes([\\s'"{;]|/\\*|$))`, end: "(?<=})(?!\\G)", patterns: [{ begin: "(?i)\\G(@)(?:-(?:webkit|moz|o|ms)-)?keyframes", beginCaptures: { 0: { name: "keyword.control.at-rule.keyframes.css" }, 1: { name: "punctuation.definition.keyword.css" } }, end: "(?=\\s*{)", name: "meta.at-rule.keyframes.header.css", patterns: [{ include: "#comment-block" }, { include: "#escapes" }, { captures: { 0: { patterns: [{ include: "#escapes" }] } }, match: `(?x)
(?:[-a-zA-Z_]    | [^\\x00-\\x7F])
(?:[-a-zA-Z0-9_] | [^\\x00-\\x7F]
|\\\\(?:[0-9a-fA-F]{1,6}|.)
)*`, name: "variable.parameter.keyframe-list.css" }] }, { begin: "{", beginCaptures: { 0: { name: "punctuation.section.keyframes.begin.bracket.curly.css" } }, end: "}", endCaptures: { 0: { name: "punctuation.section.keyframes.end.bracket.curly.css" } }, name: "meta.at-rule.keyframes.body.css", patterns: [{ include: "#comment-block" }, { include: "#escapes" }, { captures: { 1: { name: "entity.other.keyframe-offset.css" }, 2: { name: "entity.other.keyframe-offset.percentage.css" } }, match: `(?xi)
(?<![\\w-]) (from|to) (?![\\w-])
|
([-+]?(?:\\d+(?:\\.\\d+)?|\\.\\d+)%)` }, { include: "#rule-list" }] }] }, { begin: "(?i)(?=@supports(\\s|\\(|/\\*|$))", end: "(?<=})(?!\\G)|(?=;)", patterns: [{ begin: "(?i)\\G(@)supports", beginCaptures: { 0: { name: "keyword.control.at-rule.supports.css" }, 1: { name: "punctuation.definition.keyword.css" } }, end: "(?=\\s*[{;])", name: "meta.at-rule.supports.header.css", patterns: [{ include: "#feature-query-operators" }, { include: "#feature-query" }, { include: "#comment-block" }, { include: "#escapes" }] }, { begin: "{", beginCaptures: { 0: { name: "punctuation.section.supports.begin.bracket.curly.css" } }, end: "}", endCaptures: { 0: { name: "punctuation.section.supports.end.bracket.curly.css" } }, name: "meta.at-rule.supports.body.css", patterns: [{ include: "$self" }] }] }, { begin: `(?i)((@)(-(ms|o)-)?viewport)(?=[\\s'"{;]|/\\*|$)`, beginCaptures: { 1: { name: "keyword.control.at-rule.viewport.css" }, 2: { name: "punctuation.definition.keyword.css" } }, end: "(?=\\s*[@{;])", name: "meta.at-rule.viewport.css", patterns: [{ include: "#comment-block" }, { include: "#escapes" }] }, { begin: `(?i)((@)font-feature-values)(?=[\\s'"{;]|/\\*|$)\\s*`, beginCaptures: { 1: { name: "keyword.control.at-rule.font-feature-values.css" }, 2: { name: "punctuation.definition.keyword.css" } }, contentName: "variable.parameter.font-name.css", end: "(?=\\s*[@{;])", name: "meta.at-rule.font-features.css", patterns: [{ include: "#comment-block" }, { include: "#escapes" }] }, { include: "#font-features" }, { begin: `(?i)((@)namespace)(?=[\\s'";]|/\\*|$)`, beginCaptures: { 1: { name: "keyword.control.at-rule.namespace.css" }, 2: { name: "punctuation.definition.keyword.css" } }, end: ";|(?=[@{])", endCaptures: { 0: { name: "punctuation.terminator.rule.css" } }, name: "meta.at-rule.namespace.css", patterns: [{ include: "#url" }, { captures: { 1: { patterns: [{ include: "#comment-block" }] }, 2: { name: "entity.name.function.namespace-prefix.css", patterns: [{ include: "#escapes" }] } }, match: `(?xi)
(?:\\G|^|(?<=\\s))
(?=
(?<=\\s|^)
(?:[-a-zA-Z_]|[^\\x00-\\x7F])
|
\\s*
/\\*(?:[^*]|\\*[^/])*\\*/
)
(.*?)
(
(?:[-a-zA-Z_]    | [^\\x00-\\x7F])
(?:[-a-zA-Z0-9_] | [^\\x00-\\x7F]
|\\\\(?:[0-9a-fA-F]{1,6}|.)
)*
)` }, { include: "#comment-block" }, { include: "#escapes" }, { include: "#string" }] }, { begin: "(?i)(?=@[\\w-]+[^;]+;s*$)", end: "(?<=;)(?!\\G)", patterns: [{ begin: "(?i)\\G(@)[\\w-]+", beginCaptures: { 0: { name: "keyword.control.at-rule.css" }, 1: { name: "punctuation.definition.keyword.css" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.rule.css" } }, name: "meta.at-rule.header.css" }] }, { begin: "(?i)(?=@[\\w-]+(\\s|\\(|{|/\\*|$))", end: "(?<=})(?!\\G)", patterns: [{ begin: "(?i)\\G(@)[\\w-]+", beginCaptures: { 0: { name: "keyword.control.at-rule.css" }, 1: { name: "punctuation.definition.keyword.css" } }, end: "(?=\\s*[{;])", name: "meta.at-rule.header.css" }, { begin: "{", beginCaptures: { 0: { name: "punctuation.section.begin.bracket.curly.css" } }, end: "}", endCaptures: { 0: { name: "punctuation.section.end.bracket.curly.css" } }, name: "meta.at-rule.body.css", patterns: [{ include: "$self" }] }] }] }, "color-keywords": { patterns: [{ match: "(?i)(?<![\\w-])(aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow)(?![\\w-])", name: "support.constant.color.w3c-standard-color-name.css" }, { match: `(?xi) (?<![\\w-])
(aliceblue|antiquewhite|aquamarine|azure|beige|bisque|blanchedalmond|blueviolet|brown|burlywood
|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan
|darkgoldenrod|darkgray|darkgreen|darkgrey|darkkhaki|darkmagenta|darkolivegreen|darkorange
|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise
|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen
|gainsboro|ghostwhite|gold|goldenrod|greenyellow|grey|honeydew|hotpink|indianred|indigo|ivory|khaki
|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow
|lightgray|lightgreen|lightgrey|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray
|lightslategrey|lightsteelblue|lightyellow|limegreen|linen|magenta|mediumaquamarine|mediumblue
|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise
|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|oldlace|olivedrab|orangered
|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum
|powderblue|rebeccapurple|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell
|sienna|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|thistle|tomato
|transparent|turquoise|violet|wheat|whitesmoke|yellowgreen)
(?![\\w-])`, name: "support.constant.color.w3c-extended-color-name.css" }, { match: "(?i)(?<![\\w-])currentColor(?![\\w-])", name: "support.constant.color.current.css" }, { match: `(?xi) (?<![\\w-])
(ActiveBorder|ActiveCaption|AppWorkspace|Background|ButtonFace|ButtonHighlight|ButtonShadow
|ButtonText|CaptionText|GrayText|Highlight|HighlightText|InactiveBorder|InactiveCaption
|InactiveCaptionText|InfoBackground|InfoText|Menu|MenuText|Scrollbar|ThreeDDarkShadow
|ThreeDFace|ThreeDHighlight|ThreeDLightShadow|ThreeDShadow|Window|WindowFrame|WindowText)
(?![\\w-])`, name: "invalid.deprecated.color.system.css" }] }, combinators: { patterns: [{ match: "/deep/|>>>", name: "invalid.deprecated.combinator.css" }, { match: ">>|>|\\+|~", name: "keyword.operator.combinator.css" }] }, commas: { match: ",", name: "punctuation.separator.list.comma.css" }, "comment-block": { begin: "/\\*", beginCaptures: { 0: { name: "punctuation.definition.comment.begin.css" } }, end: "\\*/", endCaptures: { 0: { name: "punctuation.definition.comment.end.css" } }, name: "comment.block.css" }, escapes: { patterns: [{ match: "\\\\[0-9a-fA-F]{1,6}", name: "constant.character.escape.codepoint.css" }, { begin: "\\\\$\\s*", end: "^(?<!\\G)", name: "constant.character.escape.newline.css" }, { match: "\\\\.", name: "constant.character.escape.css" }] }, "feature-query": { begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.condition.begin.bracket.round.css" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.condition.end.bracket.round.css" } }, name: "meta.feature-query.css", patterns: [{ include: "#feature-query-operators" }, { include: "#feature-query" }] }, "feature-query-operators": { patterns: [{ match: "(?i)(?<=[\\s()]|^|\\*/)(and|not|or)(?=[\\s()]|/\\*|$)", name: "keyword.operator.logical.feature.$1.css" }, { include: "#rule-list-innards" }] }, "font-features": { begin: `(?xi)
((@)(annotation|character-variant|ornaments|styleset|stylistic|swash))
(?=[\\s@'"{;]|/\\*|$)`, beginCaptures: { 1: { name: "keyword.control.at-rule.${3:/downcase}.css" }, 2: { name: "punctuation.definition.keyword.css" } }, end: "(?<=})", name: "meta.at-rule.${3:/downcase}.css", patterns: [{ begin: "{", beginCaptures: { 0: { name: "punctuation.section.property-list.begin.bracket.curly.css" } }, end: "}", endCaptures: { 0: { name: "punctuation.section.property-list.end.bracket.curly.css" } }, name: "meta.property-list.font-feature.css", patterns: [{ captures: { 0: { patterns: [{ include: "#escapes" }] } }, match: `(?x)
(?: [-a-zA-Z_]    | [^\\x00-\\x7F] )
(?: [-a-zA-Z0-9_] | [^\\x00-\\x7F]
| \\\\(?:[0-9a-fA-F]{1,6}|.)
)*`, name: "variable.font-feature.css" }, { include: "#rule-list-innards" }] }] }, "functional-pseudo-classes": { patterns: [{ begin: "(?i)((:)dir)(\\()", beginCaptures: { 1: { name: "entity.other.attribute-name.pseudo-class.css" }, 2: { name: "punctuation.definition.entity.css" }, 3: { name: "punctuation.section.function.begin.bracket.round.css" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.function.end.bracket.round.css" } }, patterns: [{ include: "#comment-block" }, { include: "#escapes" }, { match: "(?i)(?<![\\w-])(ltr|rtl)(?![\\w-])", name: "support.constant.text-direction.css" }, { include: "#property-values" }] }, { begin: "(?i)((:)lang)(\\()", beginCaptures: { 1: { name: "entity.other.attribute-name.pseudo-class.css" }, 2: { name: "punctuation.definition.entity.css" }, 3: { name: "punctuation.section.function.begin.bracket.round.css" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.function.end.bracket.round.css" } }, patterns: [{ match: "(?<=[(,\\s])[a-zA-Z]+(-[a-zA-Z0-9]*|\\\\(?:[0-9a-fA-F]{1,6}|.))*(?=[),\\s])", name: "support.constant.language-range.css" }, { begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.css" } }, end: '"', endCaptures: { 0: { name: "punctuation.definition.string.end.css" } }, name: "string.quoted.double.css", patterns: [{ include: "#escapes" }, { match: '(?<=["\\s])[a-zA-Z*]+(-[a-zA-Z0-9*]*)*(?=["\\s])', name: "support.constant.language-range.css" }] }, { begin: "'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.css" } }, end: "'", endCaptures: { 0: { name: "punctuation.definition.string.end.css" } }, name: "string.quoted.single.css", patterns: [{ include: "#escapes" }, { match: "(?<=['\\s])[a-zA-Z*]+(-[a-zA-Z0-9*]*)*(?=['\\s])", name: "support.constant.language-range.css" }] }, { include: "#commas" }] }, { begin: "(?i)((:)(?:not|has|matches|where|is))(\\()", beginCaptures: { 1: { name: "entity.other.attribute-name.pseudo-class.css" }, 2: { name: "punctuation.definition.entity.css" }, 3: { name: "punctuation.section.function.begin.bracket.round.css" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.function.end.bracket.round.css" } }, patterns: [{ include: "#selector-innards" }] }, { begin: "(?i)((:)nth-(?:last-)?(?:child|of-type))(\\()", beginCaptures: { 1: { name: "entity.other.attribute-name.pseudo-class.css" }, 2: { name: "punctuation.definition.entity.css" }, 3: { name: "punctuation.section.function.begin.bracket.round.css" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.function.end.bracket.round.css" } }, patterns: [{ match: "(?i)[+-]?(\\d+n?|n)(\\s*[+-]\\s*\\d+)?", name: "constant.numeric.css" }, { match: "(?i)even|odd", name: "support.constant.parity.css" }] }] }, functions: { patterns: [{ begin: "(?i)(?<![\\w-])(calc)(\\()", beginCaptures: { 1: { name: "support.function.calc.css" }, 2: { name: "punctuation.section.function.begin.bracket.round.css" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.function.end.bracket.round.css" } }, name: "meta.function.calc.css", patterns: [{ match: "[*/]|(?<=\\s|^)[-+](?=\\s|$)", name: "keyword.operator.arithmetic.css" }, { include: "#property-values" }] }, { begin: "(?i)(?<![\\w-])(rgba?|rgb|hsla?|hsl|hwb|lab|oklab|lch|oklch|color)(\\()", beginCaptures: { 1: { name: "support.function.misc.css" }, 2: { name: "punctuation.section.function.begin.bracket.round.css" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.function.end.bracket.round.css" } }, name: "meta.function.color.css", patterns: [{ include: "#property-values" }] }, { begin: `(?xi) (?<![\\w-])
(
(?:-webkit-|-moz-|-o-)?
(?:repeating-)?
(?:linear|radial|conic)
-gradient
)
(\\()`, beginCaptures: { 1: { name: "support.function.gradient.css" }, 2: { name: "punctuation.section.function.begin.bracket.round.css" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.function.end.bracket.round.css" } }, name: "meta.function.gradient.css", patterns: [{ match: "(?i)(?<![\\w-])(from|to|at|in|hue)(?![\\w-])", name: "keyword.operator.gradient.css" }, { include: "#property-values" }] }, { begin: "(?i)(?<![\\w-])(-webkit-gradient)(\\()", beginCaptures: { 1: { name: "invalid.deprecated.gradient.function.css" }, 2: { name: "punctuation.section.function.begin.bracket.round.css" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.function.end.bracket.round.css" } }, name: "meta.function.gradient.invalid.deprecated.gradient.css", patterns: [{ begin: "(?i)(?<![\\w-])(from|to|color-stop)(\\()", beginCaptures: { 1: { name: "invalid.deprecated.function.css" }, 2: { name: "punctuation.section.function.begin.bracket.round.css" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.function.end.bracket.round.css" } }, patterns: [{ include: "#property-values" }] }, { include: "#property-values" }] }, { begin: `(?xi) (?<![\\w-])
(annotation|attr|blur|brightness|character-variant|clamp|contrast|counters?
|cross-fade|drop-shadow|element|fit-content|format|grayscale|hue-rotate|color-mix
|image-set|invert|local|max|min|minmax|opacity|ornaments|repeat|saturate|sepia
|styleset|stylistic|swash|symbols
|cos|sin|tan|acos|asin|atan|atan2|hypot|sqrt|pow|log|exp|abs|sign)
(\\()`, beginCaptures: { 1: { name: "support.function.misc.css" }, 2: { name: "punctuation.section.function.begin.bracket.round.css" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.function.end.bracket.round.css" } }, name: "meta.function.misc.css", patterns: [{ match: `(?i)(?<=[,\\s"]|\\*/|^)\\d+x(?=[\\s,"')]|/\\*|$)`, name: "constant.numeric.other.density.css" }, { include: "#property-values" }, { match: `[^'"),\\s]+`, name: "variable.parameter.misc.css" }] }, { begin: "(?i)(?<![\\w-])(circle|ellipse|inset|polygon|rect)(\\()", beginCaptures: { 1: { name: "support.function.shape.css" }, 2: { name: "punctuation.section.function.begin.bracket.round.css" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.function.end.bracket.round.css" } }, name: "meta.function.shape.css", patterns: [{ match: "(?i)(?<=\\s|^|\\*/)(at|round)(?=\\s|/\\*|$)", name: "keyword.operator.shape.css" }, { include: "#property-values" }] }, { begin: "(?i)(?<![\\w-])(cubic-bezier|steps)(\\()", beginCaptures: { 1: { name: "support.function.timing-function.css" }, 2: { name: "punctuation.section.function.begin.bracket.round.css" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.function.end.bracket.round.css" } }, name: "meta.function.timing-function.css", patterns: [{ match: "(?i)(?<![\\w-])(start|end)(?=\\s*\\)|$)", name: "support.constant.step-direction.css" }, { include: "#property-values" }] }, { begin: `(?xi) (?<![\\w-])
( (?:translate|scale|rotate)(?:[XYZ]|3D)?
| matrix(?:3D)?
| skew[XY]?
| perspective
)
(\\()`, beginCaptures: { 1: { name: "support.function.transform.css" }, 2: { name: "punctuation.section.function.begin.bracket.round.css" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.function.end.bracket.round.css" } }, patterns: [{ include: "#property-values" }] }, { include: "#url" }, { begin: "(?i)(?<![\\w-])(var)(\\()", beginCaptures: { 1: { name: "support.function.misc.css" }, 2: { name: "punctuation.section.function.begin.bracket.round.css" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.function.end.bracket.round.css" } }, name: "meta.function.variable.css", patterns: [{ match: `(?x)
--
(?:[-a-zA-Z_]    | [^\\x00-\\x7F])
(?:[-a-zA-Z0-9_] | [^\\x00-\\x7F]
|\\\\(?:[0-9a-fA-F]{1,6}|.)
)*`, name: "variable.argument.css" }, { include: "#property-values" }] }] }, "media-feature-keywords": { match: `(?xi)
(?<=^|\\s|:|\\*/)
(?: portrait
| landscape
| progressive
| interlace
| fullscreen
| standalone
| minimal-ui
| browser
| hover
)
(?=\\s|\\)|$)`, name: "support.constant.property-value.css" }, "media-features": { captures: { 1: { name: "support.type.property-name.media.css" }, 2: { name: "support.type.property-name.media.css" }, 3: { name: "support.type.vendored.property-name.media.css" } }, match: `(?xi)
(?<=^|\\s|\\(|\\*/)
(?:

(
(?:min-|max-)?
(?: height
| width
| aspect-ratio
| color
| color-index
| monochrome
| resolution
)
| grid
| scan
| orientation
| display-mode
| hover
)
|

(
(?:min-|max-)?
device-
(?: height
| width
| aspect-ratio
)
)
|

(
(?:

[-_]
(?: webkit
| apple|khtml
| epub
| moz
| ms
| o
| xv|ah|rim|atsc|
hp|tc|wap|ro
)
|

(?: mso
| prince
)
)
-
[\\w-]+
(?=
\\s*
(?:
/\\*
(?:[^*]|\\*[^/])*
\\*/
)?
\\s*
[:)]
)
)
)
(?=\\s|$|[><:=]|\\)|/\\*)` }, "media-query": { begin: "\\G", end: "(?=\\s*[{;])", patterns: [{ include: "#comment-block" }, { include: "#escapes" }, { include: "#media-types" }, { match: "(?i)(?<=\\s|^|,|\\*/)(only|not)(?=\\s|{|/\\*|$)", name: "keyword.operator.logical.$1.media.css" }, { match: "(?i)(?<=\\s|^|\\*/|\\))and(?=\\s|/\\*|$)", name: "keyword.operator.logical.and.media.css" }, { match: ",(?:(?:\\s*,)+|(?=\\s*[;){]))", name: "invalid.illegal.comma.css" }, { include: "#commas" }, { begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.parameters.begin.bracket.round.css" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.parameters.end.bracket.round.css" } }, patterns: [{ include: "#media-features" }, { include: "#media-feature-keywords" }, { match: ":", name: "punctuation.separator.key-value.css" }, { match: ">=|<=|=|<|>", name: "keyword.operator.comparison.css" }, { captures: { 1: { name: "constant.numeric.css" }, 2: { name: "keyword.operator.arithmetic.css" }, 3: { name: "constant.numeric.css" } }, match: "(\\d+)\\s*(/)\\s*(\\d+)", name: "meta.ratio.css" }, { include: "#numeric-values" }, { include: "#comment-block" }] }] }, "media-query-list": { begin: "(?=\\s*[^{;])", end: "(?=\\s*[{;])", patterns: [{ include: "#media-query" }] }, "media-types": { captures: { 1: { name: "support.constant.media.css" }, 2: { name: "invalid.deprecated.constant.media.css" } }, match: `(?xi)
(?<=^|\\s|,|\\*/)
(?:

(all|print|screen|speech)
|

(aural|braille|embossed|handheld|projection|tty|tv)
)
(?=$|[{,\\s;]|/\\*)` }, "numeric-values": { patterns: [{ captures: { 1: { name: "punctuation.definition.constant.css" } }, match: "(#)(?:[0-9a-fA-F]{3,4}|[0-9a-fA-F]{6}|[0-9a-fA-F]{8})\\b", name: "constant.other.color.rgb-value.hex.css" }, { captures: { 1: { name: "keyword.other.unit.percentage.css" }, 2: { name: "keyword.other.unit.${2:/downcase}.css" } }, match: `(?xi) (?<![\\w-])
[-+]?

(?:
[0-9]+ (?:\\.[0-9]+)?
| \\.[0-9]+
)

(?:
(?<=[0-9])
E
[-+]?
[0-9]+
)?

(?:
(%)
| ( deg|grad|rad|turn
| Hz|kHz
| ch|cm|em|ex|fr|in|mm|mozmm|
pc|pt|px|q|rem|rch|rex|rlh|
ic|ric|rcap|vh|vw|vb|vi|svh|
svw|svb|svi|dvh|dvw|dvb|dvi|
lvh|lvw|lvb|lvi|vmax|vmin|
cqw|cqi|cqh|cqb|cqmin|cqmax
| dpi|dpcm|dppx
| s|ms
)
\\b
)?`, name: "constant.numeric.css" }] }, "property-keywords": { patterns: [{ match: `(?xi) (?<![\\w-])
(above|absolute|active|add|additive|after-edge|alias|all|all-petite-caps|all-scroll|all-small-caps|alpha|alphabetic|alternate|alternate-reverse
|always|antialiased|auto|auto-fill|auto-fit|auto-pos|available|avoid|avoid-column|avoid-page|avoid-region|backwards|balance|baseline|before-edge|below|bevel
|bidi-override|blink|block|block-axis|block-start|block-end|bold|bolder|border|border-box|both|bottom|bottom-outside|break-all|break-word|bullets
|butt|capitalize|caption|cell|center|central|char|circle|clip|clone|close-quote|closest-corner|closest-side|col-resize|collapse|color|color-burn
|color-dodge|column|column-reverse|common-ligatures|compact|condensed|contain|content|content-box|contents|context-menu|contextual|copy|cover
|crisp-edges|crispEdges|crosshair|cyclic|dark|darken|dashed|decimal|default|dense|diagonal-fractions|difference|digits|disabled|disc|discretionary-ligatures
|distribute|distribute-all-lines|distribute-letter|distribute-space|dot|dotted|double|double-circle|downleft|downright|e-resize|each-line|ease|ease-in
|ease-in-out|ease-out|economy|ellipse|ellipsis|embed|end|evenodd|ew-resize|exact|exclude|exclusion|expanded|extends|extra-condensed|extra-expanded
|fallback|farthest-corner|farthest-side|fill|fill-available|fill-box|filled|fit-content|fixed|flat|flex|flex-end|flex-start|flip|flow-root|forwards|freeze
|from-image|full-width|geometricPrecision|georgian|grab|grabbing|grayscale|grid|groove|hand|hanging|hard-light|help|hidden|hide
|historical-forms|historical-ligatures|horizontal|horizontal-tb|hue|icon|ideograph-alpha|ideograph-numeric|ideograph-parenthesis|ideograph-space
|ideographic|inactive|infinite|inherit|initial|inline|inline-axis|inline-block|inline-end|inline-flex|inline-grid|inline-list-item|inline-start
|inline-table|inset|inside|inter-character|inter-ideograph|inter-word|intersect|invert|isolate|isolate-override|italic|jis04|jis78|jis83
|jis90|justify|justify-all|kannada|keep-all|landscape|large|larger|left|light|lighten|lighter|line|line-edge|line-through|linear|linearRGB
|lining-nums|list-item|local|loose|lowercase|lr|lr-tb|ltr|luminance|luminosity|main-size|mandatory|manipulation|manual|margin-box|match-parent
|match-source|mathematical|max-content|medium|menu|message-box|middle|min-content|miter|mixed|move|multiply|n-resize|narrower|ne-resize
|nearest-neighbor|nesw-resize|newspaper|no-change|no-clip|no-close-quote|no-common-ligatures|no-contextual|no-discretionary-ligatures
|no-drop|no-historical-ligatures|no-open-quote|no-repeat|none|nonzero|normal|not-allowed|nowrap|ns-resize|numbers|numeric|nw-resize|nwse-resize
|oblique|oldstyle-nums|open|open-quote|optimizeLegibility|optimizeQuality|optimizeSpeed|optional|ordinal|outset|outside|over|overlay|overline|padding
|padding-box|page|painted|pan-down|pan-left|pan-right|pan-up|pan-x|pan-y|paused|petite-caps|pixelated|plaintext|pointer|portrait|pre|pre-line
|pre-wrap|preserve-3d|progress|progressive|proportional-nums|proportional-width|proximity|radial|recto|region|relative|remove|repeat|repeat-[xy]
|reset-size|reverse|revert|ridge|right|rl|rl-tb|round|row|row-resize|row-reverse|row-severse|rtl|ruby|ruby-base|ruby-base-container|ruby-text
|ruby-text-container|run-in|running|s-resize|saturation|scale-down|screen|scroll|scroll-position|se-resize|semi-condensed|semi-expanded|separate
|sesame|show|sideways|sideways-left|sideways-lr|sideways-right|sideways-rl|simplified|slashed-zero|slice|small|small-caps|small-caption|smaller
|smooth|soft-light|solid|space|space-around|space-between|space-evenly|spell-out|square|sRGB|stacked-fractions|start|static|status-bar|swap
|step-end|step-start|sticky|stretch|strict|stroke|stroke-box|style|sub|subgrid|subpixel-antialiased|subtract|super|sw-resize|symbolic|table
|table-caption|table-cell|table-column|table-column-group|table-footer-group|table-header-group|table-row|table-row-group|tabular-nums|tb|tb-rl
|text|text-after-edge|text-before-edge|text-bottom|text-top|thick|thin|titling-caps|top|top-outside|touch|traditional|transparent|triangle
|ultra-condensed|ultra-expanded|under|underline|unicase|unset|upleft|uppercase|upright|use-glyph-orientation|use-script|verso|vertical
|vertical-ideographic|vertical-lr|vertical-rl|vertical-text|view-box|visible|visibleFill|visiblePainted|visibleStroke|w-resize|wait|wavy
|weight|whitespace|wider|words|wrap|wrap-reverse|x|x-large|x-small|xx-large|xx-small|y|zero|zoom-in|zoom-out)
(?![\\w-])`, name: "support.constant.property-value.css" }, { match: `(?xi) (?<![\\w-])
(arabic-indic|armenian|bengali|cambodian|circle|cjk-decimal|cjk-earthly-branch|cjk-heavenly-stem|cjk-ideographic
|decimal|decimal-leading-zero|devanagari|disc|disclosure-closed|disclosure-open|ethiopic-halehame-am
|ethiopic-halehame-ti-e[rt]|ethiopic-numeric|georgian|gujarati|gurmukhi|hangul|hangul-consonant|hebrew
|hiragana|hiragana-iroha|japanese-formal|japanese-informal|kannada|katakana|katakana-iroha|khmer
|korean-hangul-formal|korean-hanja-formal|korean-hanja-informal|lao|lower-alpha|lower-armenian|lower-greek
|lower-latin|lower-roman|malayalam|mongolian|myanmar|oriya|persian|simp-chinese-formal|simp-chinese-informal
|square|tamil|telugu|thai|tibetan|trad-chinese-formal|trad-chinese-informal|upper-alpha|upper-armenian
|upper-latin|upper-roman|urdu)
(?![\\w-])`, name: "support.constant.property-value.list-style-type.css" }, { match: "(?<![\\w-])(?i:-(?:ah|apple|atsc|epub|hp|khtml|moz|ms|o|rim|ro|tc|wap|webkit|xv)|(?:mso|prince))-[a-zA-Z-]+", name: "support.constant.vendored.property-value.css" }, { match: "(?<![\\w-])(?i:arial|century|comic|courier|garamond|georgia|helvetica|impact|lucida|symbol|system-ui|system|tahoma|times|trebuchet|ui-monospace|ui-rounded|ui-sans-serif|ui-serif|utopia|verdana|webdings|sans-serif|serif|monospace)(?![\\w-])", name: "support.constant.font-name.css" }] }, "property-names": { patterns: [{ match: `(?xi) (?<![\\w-])
(?:

accent-color|additive-symbols|align-content|align-items|align-self|all|animation|animation-delay|animation-direction|animation-duration
| animation-fill-mode|animation-iteration-count|animation-name|animation-play-state|animation-timing-function|backdrop-filter
| backface-visibility|background|background-attachment|background-blend-mode|background-clip|background-color|background-image
| background-origin|background-position|background-position-[xy]|background-repeat|background-size|bleed|block-size|border
| border-block-end|border-block-end-color|border-block-end-style|border-block-end-width|border-block-start|border-block-start-color
| border-block-start-style|border-block-start-width|border-bottom|border-bottom-color|border-bottom-left-radius|border-bottom-right-radius
| border-bottom-style|border-bottom-width|border-collapse|border-color|border-end-end-radius|border-end-start-radius|border-image
| border-image-outset|border-image-repeat|border-image-slice|border-image-source|border-image-width|border-inline-end
| border-inline-end-color|border-inline-end-style|border-inline-end-width|border-inline-start|border-inline-start-color
| border-inline-start-style|border-inline-start-width|border-left|border-left-color|border-left-style|border-left-width
| border-radius|border-right|border-right-color|border-right-style|border-right-width|border-spacing|border-start-end-radius
| border-start-start-radius|border-style|border-top|border-top-color|border-top-left-radius|border-top-right-radius|border-top-style
| border-top-width|border-width|bottom|box-decoration-break|box-shadow|box-sizing|break-after|break-before|break-inside|caption-side
| caret-color|clear|clip|clip-path|clip-rule|color|color-adjust|color-interpolation-filters|color-scheme|column-count|column-fill|column-gap
| column-rule|column-rule-color|column-rule-style|column-rule-width|column-span|column-width|columns|contain|container|container-name|container-type|content|counter-increment
| counter-reset|cursor|direction|display|empty-cells|enable-background|fallback|fill|fill-opacity|fill-rule|filter|flex|flex-basis
| flex-direction|flex-flow|flex-grow|flex-shrink|flex-wrap|float|flood-color|flood-opacity|font|font-display|font-family
| font-feature-settings|font-kerning|font-language-override|font-optical-sizing|font-size|font-size-adjust|font-stretch
| font-style|font-synthesis|font-variant|font-variant-alternates|font-variant-caps|font-variant-east-asian|font-variant-ligatures
| font-variant-numeric|font-variant-position|font-variation-settings|font-weight|gap|glyph-orientation-horizontal|glyph-orientation-vertical
| grid|grid-area|grid-auto-columns|grid-auto-flow|grid-auto-rows|grid-column|grid-column-end|grid-column-gap|grid-column-start
| grid-gap|grid-row|grid-row-end|grid-row-gap|grid-row-start|grid-template|grid-template-areas|grid-template-columns|grid-template-rows
| hanging-punctuation|height|hyphens|image-orientation|image-rendering|image-resolution|ime-mode|initial-letter|initial-letter-align
| inline-size|inset|inset-block|inset-block-end|inset-block-start|inset-inline|inset-inline-end|inset-inline-start|isolation
| justify-content|justify-items|justify-self|kerning|left|letter-spacing|lighting-color|line-break|line-clamp|line-height|list-style
| list-style-image|list-style-position|list-style-type|margin|margin-block|margin-block-end|margin-block-start|margin-bottom|margin-inline|margin-inline-end|margin-inline-start
| margin-left|margin-right|margin-top|marker-end|marker-mid|marker-start|marks|mask|mask-border|mask-border-mode|mask-border-outset
| mask-border-repeat|mask-border-slice|mask-border-source|mask-border-width|mask-clip|mask-composite|mask-image|mask-mode
| mask-origin|mask-position|mask-repeat|mask-size|mask-type|max-block-size|max-height|max-inline-size|max-lines|max-width
| max-zoom|min-block-size|min-height|min-inline-size|min-width|min-zoom|mix-blend-mode|negative|object-fit|object-position
| offset|offset-anchor|offset-distance|offset-path|offset-position|offset-rotation|opacity|order|orientation|orphans
| outline|outline-color|outline-offset|outline-style|outline-width|overflow|overflow-anchor|overflow-block|overflow-inline
| overflow-wrap|overflow-[xy]|overscroll-behavior|overscroll-behavior-block|overscroll-behavior-inline|overscroll-behavior-[xy]
| pad|padding|padding-block|padding-block-end|padding-block-start|padding-bottom|padding-inline|padding-inline-end|padding-inline-start|padding-left
| padding-right|padding-top|page-break-after|page-break-before|page-break-inside|paint-order|perspective|perspective-origin
| place-content|place-items|place-self|pointer-events|position|prefix|quotes|range|resize|right|rotate|row-gap|ruby-align
| ruby-merge|ruby-position|scale|scroll-behavior|scroll-margin|scroll-margin-block|scroll-margin-block-end|scroll-margin-block-start
| scroll-margin-bottom|scroll-margin-inline|scroll-margin-inline-end|scroll-margin-inline-start|scroll-margin-left|scroll-margin-right
| scroll-margin-top|scroll-padding|scroll-padding-block|scroll-padding-block-end|scroll-padding-block-start|scroll-padding-bottom
| scroll-padding-inline|scroll-padding-inline-end|scroll-padding-inline-start|scroll-padding-left|scroll-padding-right
| scroll-padding-top|scroll-snap-align|scroll-snap-coordinate|scroll-snap-destination|scroll-snap-stop|scroll-snap-type
| scrollbar-color|scrollbar-gutter|scrollbar-width|shape-image-threshold|shape-margin|shape-outside|shape-rendering|size
| speak-as|src|stop-color|stop-opacity|stroke|stroke-dasharray|stroke-dashoffset|stroke-linecap|stroke-linejoin|stroke-miterlimit
| stroke-opacity|stroke-width|suffix|symbols|system|tab-size|table-layout|text-align|text-align-last|text-anchor|text-combine-upright
| text-decoration|text-decoration-color|text-decoration-line|text-decoration-skip|text-decoration-skip-ink|text-decoration-style|text-decoration-thickness
| text-emphasis|text-emphasis-color|text-emphasis-position|text-emphasis-style|text-indent|text-justify|text-orientation
| text-overflow|text-rendering|text-shadow|text-size-adjust|text-transform|text-underline-offset|text-underline-position|top|touch-action|transform
| transform-box|transform-origin|transform-style|transition|transition-delay|transition-duration|transition-property|transition-timing-function
| translate|unicode-bidi|unicode-range|user-select|user-zoom|vertical-align|visibility|white-space|widows|width|will-change
| word-break|word-spacing|word-wrap|writing-mode|z-index|zoom


| alignment-baseline|baseline-shift|clip-rule|color-interpolation|color-interpolation-filters|color-profile
| color-rendering|cx|cy|dominant-baseline|enable-background|fill|fill-opacity|fill-rule|flood-color|flood-opacity
| glyph-orientation-horizontal|glyph-orientation-vertical|height|kerning|lighting-color|marker-end|marker-mid
| marker-start|r|rx|ry|shape-rendering|stop-color|stop-opacity|stroke|stroke-dasharray|stroke-dashoffset|stroke-linecap
| stroke-linejoin|stroke-miterlimit|stroke-opacity|stroke-width|text-anchor|width|x|y


| adjust|after|align|align-last|alignment|alignment-adjust|appearance|attachment|azimuth|background-break
| balance|baseline|before|bidi|binding|bookmark|bookmark-label|bookmark-level|bookmark-target|border-length
| bottom-color|bottom-left-radius|bottom-right-radius|bottom-style|bottom-width|box|box-align|box-direction
| box-flex|box-flex-group|box-lines|box-ordinal-group|box-orient|box-pack|break|character|collapse|column
| column-break-after|column-break-before|count|counter|crop|cue|cue-after|cue-before|decoration|decoration-break
| delay|display-model|display-role|down|drop|drop-initial-after-adjust|drop-initial-after-align|drop-initial-before-adjust
| drop-initial-before-align|drop-initial-size|drop-initial-value|duration|elevation|emphasis|family|fit|fit-position
| flex-group|float-offset|gap|grid-columns|grid-rows|hanging-punctuation|header|hyphenate|hyphenate-after|hyphenate-before
| hyphenate-character|hyphenate-lines|hyphenate-resource|icon|image|increment|indent|index|initial-after-adjust
| initial-after-align|initial-before-adjust|initial-before-align|initial-size|initial-value|inline-box-align|iteration-count
| justify|label|left-color|left-style|left-width|length|level|line|line-stacking|line-stacking-ruby|line-stacking-shift
| line-stacking-strategy|lines|list|mark|mark-after|mark-before|marks|marquee|marquee-direction|marquee-play-count|marquee-speed
| marquee-style|max|min|model|move-to|name|nav|nav-down|nav-index|nav-left|nav-right|nav-up|new|numeral|offset|ordinal-group
| orient|origin|overflow-style|overhang|pack|page|page-policy|pause|pause-after|pause-before|phonemes|pitch|pitch-range
| play-count|play-during|play-state|point|presentation|presentation-level|profile|property|punctuation|punctuation-trim
| radius|rate|rendering-intent|repeat|replace|reset|resolution|resource|respond-to|rest|rest-after|rest-before|richness
| right-color|right-style|right-width|role|rotation|rotation-point|rows|ruby|ruby-overhang|ruby-span|rule|rule-color
| rule-style|rule-width|shadow|size|size-adjust|sizing|space|space-collapse|spacing|span|speak|speak-header|speak-numeral
| speak-punctuation|speech|speech-rate|speed|stacking|stacking-ruby|stacking-shift|stacking-strategy|stress|stretch
| string-set|style|style-image|style-position|style-type|target|target-name|target-new|target-position|text|text-height
| text-justify|text-outline|text-replace|text-wrap|timing-function|top-color|top-left-radius|top-right-radius|top-style
| top-width|trim|unicode|up|user-select|variant|voice|voice-balance|voice-duration|voice-family|voice-pitch|voice-pitch-range
| voice-rate|voice-stress|voice-volume|volume|weight|white|white-space-collapse|word|wrap
)
(?![\\w-])`, name: "support.type.property-name.css" }, { match: "(?<![\\w-])(?i:-(?:ah|apple|atsc|epub|hp|khtml|moz|ms|o|rim|ro|tc|wap|webkit|xv)|(?:mso|prince))-[a-zA-Z-]+", name: "support.type.vendored.property-name.css" }] }, "property-values": { patterns: [{ include: "#commas" }, { include: "#comment-block" }, { include: "#escapes" }, { include: "#functions" }, { include: "#property-keywords" }, { include: "#unicode-range" }, { include: "#numeric-values" }, { include: "#color-keywords" }, { include: "#string" }, { match: "!\\s*important(?![\\w-])", name: "keyword.other.important.css" }] }, "pseudo-classes": { captures: { 1: { name: "punctuation.definition.entity.css" }, 2: { name: "invalid.illegal.colon.css" } }, match: `(?xi)
(:)(:*)
(?: active|any-link|checked|default|disabled|empty|enabled|first
| (?:first|last|only)-(?:child|of-type)|focus|focus-visible|focus-within|fullscreen|host|hover
| in-range|indeterminate|invalid|left|link|optional|out-of-range
| read-only|read-write|required|right|root|scope|target|unresolved
| valid|visited
)(?![\\w-]|\\s*[;}])`, name: "entity.other.attribute-name.pseudo-class.css" }, "pseudo-elements": { captures: { 1: { name: "punctuation.definition.entity.css" }, 2: { name: "punctuation.definition.entity.css" } }, match: `(?xi)
(?:
(::?)
(?: after
| before
| first-letter
| first-line
| (?:-(?:ah|apple|atsc|epub|hp|khtml|moz
|ms|o|rim|ro|tc|wap|webkit|xv)
| (?:mso|prince))
-[a-z-]+
)
|
(::)
(?: backdrop
| content
| grammar-error
| marker
| placeholder
| selection
| shadow
| spelling-error
)
)
(?![\\w-]|\\s*[;}])`, name: "entity.other.attribute-name.pseudo-element.css" }, "rule-list": { begin: "{", beginCaptures: { 0: { name: "punctuation.section.property-list.begin.bracket.curly.css" } }, end: "}", endCaptures: { 0: { name: "punctuation.section.property-list.end.bracket.curly.css" } }, name: "meta.property-list.css", patterns: [{ include: "#rule-list-innards" }] }, "rule-list-innards": { patterns: [{ include: "#comment-block" }, { include: "#escapes" }, { include: "#font-features" }, { match: `(?x) (?<![\\w-])
--
(?:[-a-zA-Z_]    | [^\\x00-\\x7F])
(?:[-a-zA-Z0-9_] | [^\\x00-\\x7F]
|\\\\(?:[0-9a-fA-F]{1,6}|.)
)*`, name: "variable.css" }, { begin: "(?<![-a-zA-Z])(?=[-a-zA-Z])", end: "$|(?![-a-zA-Z])", name: "meta.property-name.css", patterns: [{ include: "#property-names" }] }, { begin: "(:)\\s*", beginCaptures: { 1: { name: "punctuation.separator.key-value.css" } }, contentName: "meta.property-value.css", end: "\\s*(;)|\\s*(?=}|\\))", endCaptures: { 1: { name: "punctuation.terminator.rule.css" } }, patterns: [{ include: "#comment-block" }, { include: "#property-values" }] }, { match: ";", name: "punctuation.terminator.rule.css" }] }, selector: { begin: `(?x)
(?=
(?:\\|)?
(?:
[-\\[:.*\\#a-zA-Z_]
|
[^\\x00-\\x7F]
|
\\\\
(?:[0-9a-fA-F]{1,6}|.)
)
)`, end: "(?=\\s*[/@{)])", name: "meta.selector.css", patterns: [{ include: "#selector-innards" }] }, "selector-innards": { patterns: [{ include: "#comment-block" }, { include: "#commas" }, { include: "#escapes" }, { include: "#combinators" }, { captures: { 1: { name: "entity.other.namespace-prefix.css" }, 2: { name: "punctuation.separator.css" } }, match: `(?x)
(?:^|(?<=[\\s,(};]))
(?!
[-\\w*]+
\\|
(?!
[-\\[:.*\\#a-zA-Z_]
| [^\\x00-\\x7F]
)
)
(
(?: [-a-zA-Z_]    | [^\\x00-\\x7F] )
(?: [-a-zA-Z0-9_] | [^\\x00-\\x7F]
| \\\\(?:[0-9a-fA-F]{1,6}|.)
)*
|
\\*
)?
(\\|)` }, { include: "#tag-names" }, { match: "\\*", name: "entity.name.tag.wildcard.css" }, { captures: { 1: { name: "punctuation.definition.entity.css" }, 2: { patterns: [{ include: "#escapes" }] } }, match: `(?x) (?<![@\\w-])
([.\\#])
# Invalid identifier
(
(?:

-?[0-9]
|

-
(?= $
| [\\s,.\\#)\\[:{>+~|]
| /\\*
)
|

(?:
[-a-zA-Z_0-9]|[^\\x00-\\x7F]
| \\\\(?:[0-9a-fA-F]{1,6}|.)
)*
(?:
[!"'%&(*;<?@^\`|\\]}]
|
/ (?!\\*)
)+
)

(?: [-a-zA-Z_0-9]|[^\\x00-\\x7F]
| \\\\(?:[0-9a-fA-F]{1,6}|.)
)*
)`, name: "invalid.illegal.bad-identifier.css" }, { captures: { 1: { name: "punctuation.definition.entity.css" }, 2: { patterns: [{ include: "#escapes" }] } }, match: `(?x)
(\\.)
(
(?: [-a-zA-Z_0-9]|[^\\x00-\\x7F]
| \\\\(?:[0-9a-fA-F]{1,6}|.)
)+
)
(?= $
| [\\s,.\\#)\\[:{>+~|]
| /\\*
)`, name: "entity.other.attribute-name.class.css" }, { captures: { 1: { name: "punctuation.definition.entity.css" }, 2: { patterns: [{ include: "#escapes" }] } }, match: `(?x)
(\\#)
(
-?
(?![0-9])
(?:[-a-zA-Z0-9_]|[^\\x00-\\x7F]|\\\\(?:[0-9a-fA-F]{1,6}|.))+
)
(?=$|[\\s,.\\#)\\[:{>+~|]|/\\*)`, name: "entity.other.attribute-name.id.css" }, { begin: "\\[", beginCaptures: { 0: { name: "punctuation.definition.entity.begin.bracket.square.css" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.entity.end.bracket.square.css" } }, name: "meta.attribute-selector.css", patterns: [{ include: "#comment-block" }, { include: "#string" }, { captures: { 1: { name: "storage.modifier.ignore-case.css" } }, match: `(?<=["'\\s]|^|\\*/)\\s*([iI])\\s*(?=[\\s\\]]|/\\*|$)` }, { captures: { 1: { name: "string.unquoted.attribute-value.css", patterns: [{ include: "#escapes" }] } }, match: `(?x)(?<==)\\s*((?!/\\*)(?:[^\\\\"'\\s\\]]|\\\\.)+)` }, { include: "#escapes" }, { match: "[~|^$*]?=", name: "keyword.operator.pattern.css" }, { match: "\\|", name: "punctuation.separator.css" }, { captures: { 1: { name: "entity.other.namespace-prefix.css", patterns: [{ include: "#escapes" }] } }, match: `(?x)
# Qualified namespace prefix
( -?(?!\\d)(?:[\\w-]|[^\\x00-\\x7F]|\\\\(?:[0-9a-fA-F]{1,6}|.))+
| \\*
)
# Lookahead to ensure there's a valid identifier ahead
(?=
\\| (?!\\s|=|$|\\])
(?: -?(?!\\d)
|   [\\\\\\w-]
|   [^\\x00-\\x7F]
)
)` }, { captures: { 1: { name: "entity.other.attribute-name.css", patterns: [{ include: "#escapes" }] } }, match: `(?x)
(-?(?!\\d)(?>[\\w-]|[^\\x00-\\x7F]|\\\\(?:[0-9a-fA-F]{1,6}|.))+)
\\s*
(?=[~|^\\]$*=]|/\\*)` }] }, { include: "#pseudo-classes" }, { include: "#pseudo-elements" }, { include: "#functional-pseudo-classes" }, { match: `(?x) (?<![@\\w-])
(?=
[a-z]
\\w* -
)
(?:
(?![A-Z])
[\\w-]
)+
(?![(\\w-])`, name: "entity.name.tag.custom.css" }] }, string: { patterns: [{ begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.css" } }, end: '"|(?<!\\\\)(?=$|\\n)', endCaptures: { 0: { name: "punctuation.definition.string.end.css" } }, name: "string.quoted.double.css", patterns: [{ begin: '(?:\\G|^)(?=(?:[^\\\\"]|\\\\.)+$)', end: "$", name: "invalid.illegal.unclosed.string.css", patterns: [{ include: "#escapes" }] }, { include: "#escapes" }] }, { begin: "'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.css" } }, end: "'|(?<!\\\\)(?=$|\\n)", endCaptures: { 0: { name: "punctuation.definition.string.end.css" } }, name: "string.quoted.single.css", patterns: [{ begin: "(?:\\G|^)(?=(?:[^\\\\']|\\\\.)+$)", end: "$", name: "invalid.illegal.unclosed.string.css", patterns: [{ include: "#escapes" }] }, { include: "#escapes" }] }] }, "tag-names": { match: `(?xi) (?<![\\w:-])
(?:

a|abbr|acronym|address|applet|area|article|aside|audio|b|base|basefont|bdi|bdo|bgsound
| big|blink|blockquote|body|br|button|canvas|caption|center|cite|code|col|colgroup|command
| content|data|datalist|dd|del|details|dfn|dialog|dir|div|dl|dt|element|em|embed|fieldset
| figcaption|figure|font|footer|form|frame|frameset|h[1-6]|head|header|hgroup|hr|html|i
| iframe|image|img|input|ins|isindex|kbd|keygen|label|legend|li|link|listing|main|map|mark
| marquee|math|menu|menuitem|meta|meter|multicol|nav|nextid|nobr|noembed|noframes|noscript
| object|ol|optgroup|option|output|p|param|picture|plaintext|pre|progress|q|rb|rp|rt|rtc
| ruby|s|samp|script|section|select|shadow|slot|small|source|spacer|span|strike|strong
| style|sub|summary|sup|table|tbody|td|template|textarea|tfoot|th|thead|time|title|tr
| track|tt|u|ul|var|video|wbr|xmp


| altGlyph|altGlyphDef|altGlyphItem|animate|animateColor|animateMotion|animateTransform
| circle|clipPath|color-profile|cursor|defs|desc|discard|ellipse|feBlend|feColorMatrix
| feComponentTransfer|feComposite|feConvolveMatrix|feDiffuseLighting|feDisplacementMap
| feDistantLight|feDropShadow|feFlood|feFuncA|feFuncB|feFuncG|feFuncR|feGaussianBlur
| feImage|feMerge|feMergeNode|feMorphology|feOffset|fePointLight|feSpecularLighting
| feSpotLight|feTile|feTurbulence|filter|font-face|font-face-format|font-face-name
| font-face-src|font-face-uri|foreignObject|g|glyph|glyphRef|hatch|hatchpath|hkern
| line|linearGradient|marker|mask|mesh|meshgradient|meshpatch|meshrow|metadata
| missing-glyph|mpath|path|pattern|polygon|polyline|radialGradient|rect|set|solidcolor
| stop|svg|switch|symbol|text|textPath|tref|tspan|use|view|vkern


| annotation|annotation-xml|maction|maligngroup|malignmark|math|menclose|merror|mfenced
| mfrac|mglyph|mi|mlabeledtr|mlongdiv|mmultiscripts|mn|mo|mover|mpadded|mphantom|mroot
| mrow|ms|mscarries|mscarry|msgroup|msline|mspace|msqrt|msrow|mstack|mstyle|msub|msubsup
| msup|mtable|mtd|mtext|mtr|munder|munderover|semantics
)
(?=[+~>\\s,.\\#|){:\\[]|/\\*|$)`, name: "entity.name.tag.css" }, "unicode-range": { captures: { 0: { name: "constant.other.unicode-range.css" }, 1: { name: "punctuation.separator.dash.unicode-range.css" } }, match: "(?<![\\w-])[Uu]\\+[0-9A-Fa-f?]{1,6}(?:(-)[0-9A-Fa-f]{1,6})?(?![\\w-])" }, url: { begin: "(?i)(?<![\\w@-])(url)(\\()", beginCaptures: { 1: { name: "support.function.url.css" }, 2: { name: "punctuation.section.function.begin.bracket.round.css" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.function.end.bracket.round.css" } }, name: "meta.function.url.css", patterns: [{ match: `[^'")\\s]+`, name: "variable.parameter.url.css" }, { include: "#string" }, { include: "#comment-block" }, { include: "#escapes" }] } }, scopeName: "source.css" });
var n = [
  P
];
const R = Object.freeze({ displayName: "SCSS", name: "scss", patterns: [{ include: "#variable_setting" }, { include: "#at_rule_forward" }, { include: "#at_rule_use" }, { include: "#at_rule_include" }, { include: "#at_rule_import" }, { include: "#general" }, { include: "#flow_control" }, { include: "#rules" }, { include: "#property_list" }, { include: "#at_rule_mixin" }, { include: "#at_rule_media" }, { include: "#at_rule_function" }, { include: "#at_rule_charset" }, { include: "#at_rule_option" }, { include: "#at_rule_namespace" }, { include: "#at_rule_fontface" }, { include: "#at_rule_page" }, { include: "#at_rule_keyframes" }, { include: "#at_rule_at_root" }, { include: "#at_rule_supports" }, { match: ";", name: "punctuation.terminator.rule.css" }], repository: { at_rule_at_root: { begin: "\\s*((@)(at-root))(\\s+|$)", beginCaptures: { 1: { name: "keyword.control.at-rule.at-root.scss" }, 2: { name: "punctuation.definition.keyword.scss" } }, end: "\\s*(?={)", name: "meta.at-rule.at-root.scss", patterns: [{ include: "#function_attributes" }, { include: "#functions" }, { include: "#selectors" }] }, at_rule_charset: { begin: "\\s*((@)charset\\b)\\s*", captures: { 1: { name: "keyword.control.at-rule.charset.scss" }, 2: { name: "punctuation.definition.keyword.scss" } }, end: "\\s*((?=;|$))", name: "meta.at-rule.charset.scss", patterns: [{ include: "#variable" }, { include: "#string_single" }, { include: "#string_double" }] }, at_rule_content: { begin: "\\s*((@)content\\b)\\s*", captures: { 1: { name: "keyword.control.content.scss" } }, end: "\\s*((?=;))", name: "meta.content.scss", patterns: [{ include: "#variable" }, { include: "#selectors" }, { include: "#property_values" }] }, at_rule_each: { begin: "\\s*((@)each\\b)\\s*", captures: { 1: { name: "keyword.control.each.scss" }, 2: { name: "punctuation.definition.keyword.scss" } }, end: "\\s*((?=}))", name: "meta.at-rule.each.scss", patterns: [{ match: "\\b(in|,)\\b", name: "keyword.control.operator" }, { include: "#variable" }, { include: "#property_values" }, { include: "$self" }] }, at_rule_else: { begin: "\\s*((@)else(\\s*(if)?))\\s*", captures: { 1: { name: "keyword.control.else.scss" }, 2: { name: "punctuation.definition.keyword.scss" } }, end: "\\s*(?={)", name: "meta.at-rule.else.scss", patterns: [{ include: "#conditional_operators" }, { include: "#variable" }, { include: "#property_values" }] }, at_rule_extend: { begin: "\\s*((@)extend\\b)\\s*", captures: { 1: { name: "keyword.control.at-rule.extend.scss" }, 2: { name: "punctuation.definition.keyword.scss" } }, end: "\\s*(?=;)", name: "meta.at-rule.extend.scss", patterns: [{ include: "#variable" }, { include: "#selectors" }, { include: "#property_values" }] }, at_rule_fontface: { patterns: [{ begin: "^\\s*((@)font-face\\b)", beginCaptures: { 1: { name: "keyword.control.at-rule.fontface.scss" }, 2: { name: "punctuation.definition.keyword.scss" } }, end: "\\s*(?={)", name: "meta.at-rule.fontface.scss", patterns: [{ include: "#function_attributes" }] }] }, at_rule_for: { begin: "\\s*((@)for\\b)\\s*", captures: { 1: { name: "keyword.control.for.scss" }, 2: { name: "punctuation.definition.keyword.scss" } }, end: "\\s*(?={)", name: "meta.at-rule.for.scss", patterns: [{ match: "(==|!=|<=|>=|<|>|from|to|through)", name: "keyword.control.operator" }, { include: "#variable" }, { include: "#property_values" }, { include: "$self" }] }, at_rule_forward: { begin: "\\s*((@)forward\\b)\\s*", captures: { 1: { name: "keyword.control.at-rule.forward.scss" }, 2: { name: "punctuation.definition.keyword.scss" } }, end: "\\s*(?=;)", name: "meta.at-rule.forward.scss", patterns: [{ match: "\\b(as|hide|show)\\b", name: "keyword.control.operator" }, { captures: { 1: { name: "entity.other.attribute-name.module.scss" }, 2: { name: "punctuation.definition.wildcard.scss" } }, match: "\\b([\\w-]+)(\\*)" }, { match: "\\b[\\w-]+\\b", name: "entity.name.function.scss" }, { include: "#variable" }, { include: "#string_single" }, { include: "#string_double" }, { include: "#comment_line" }, { include: "#comment_block" }] }, at_rule_function: { patterns: [{ begin: "\\s*((@)function\\b)\\s*", captures: { 1: { name: "keyword.control.at-rule.function.scss" }, 2: { name: "punctuation.definition.keyword.scss" }, 3: { name: "entity.name.function.scss" } }, end: "\\s*(?={)", name: "meta.at-rule.function.scss", patterns: [{ include: "#function_attributes" }] }, { captures: { 1: { name: "keyword.control.at-rule.function.scss" }, 2: { name: "punctuation.definition.keyword.scss" }, 3: { name: "entity.name.function.scss" } }, match: "\\s*((@)function\\b)\\s*", name: "meta.at-rule.function.scss" }] }, at_rule_if: { begin: "\\s*((@)if\\b)\\s*", captures: { 1: { name: "keyword.control.if.scss" }, 2: { name: "punctuation.definition.keyword.scss" } }, end: "\\s*(?={)", name: "meta.at-rule.if.scss", patterns: [{ include: "#conditional_operators" }, { include: "#variable" }, { include: "#property_values" }] }, at_rule_import: { begin: "\\s*((@)import\\b)\\s*", captures: { 1: { name: "keyword.control.at-rule.import.scss" }, 2: { name: "punctuation.definition.keyword.scss" } }, end: "\\s*((?=;)|(?=}))", name: "meta.at-rule.import.scss", patterns: [{ include: "#variable" }, { include: "#string_single" }, { include: "#string_double" }, { include: "#functions" }, { include: "#comment_line" }] }, at_rule_include: { patterns: [{ begin: "(?<=@include)\\s+(?:([\\w-]+)\\s*(\\.))?([\\w-]+)\\s*(\\()", beginCaptures: { 1: { name: "variable.scss" }, 2: { name: "punctuation.access.module.scss" }, 3: { name: "entity.name.function.scss" }, 4: { name: "punctuation.definition.parameters.begin.bracket.round.scss" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.parameters.end.bracket.round.scss" } }, name: "meta.at-rule.include.scss", patterns: [{ include: "#function_attributes" }] }, { captures: { 0: { name: "meta.at-rule.include.scss" }, 1: { name: "variable.scss" }, 2: { name: "punctuation.access.module.scss" }, 3: { name: "entity.name.function.scss" } }, match: "(?<=@include)\\s+(?:([\\w-]+)\\s*(\\.))?([\\w-]+)" }, { captures: { 0: { name: "meta.at-rule.include.scss" }, 1: { name: "keyword.control.at-rule.include.scss" }, 2: { name: "punctuation.definition.keyword.scss" } }, match: "((@)include)\\b" }] }, at_rule_keyframes: { begin: "(?<=^|\\s)(@)(?:-(?:webkit|moz)-)?keyframes\\b", beginCaptures: { 0: { name: "keyword.control.at-rule.keyframes.scss" }, 1: { name: "punctuation.definition.keyword.scss" } }, end: "(?<=})", name: "meta.at-rule.keyframes.scss", patterns: [{ captures: { 1: { name: "entity.name.function.scss" } }, match: "(?<=@keyframes)\\s+((?:[_A-Za-z][-\\w]|-[_A-Za-z])[-\\w]*)" }, { begin: '(?<=@keyframes)\\s+(")', beginCaptures: { 1: { name: "punctuation.definition.string.begin.scss" } }, contentName: "entity.name.function.scss", end: '"', endCaptures: { 0: { name: "punctuation.definition.string.end.scss" } }, name: "string.quoted.double.scss", patterns: [{ match: "\\\\(\\h{1,6}|.)", name: "constant.character.escape.scss" }, { include: "#interpolation" }] }, { begin: "(?<=@keyframes)\\s+(')", beginCaptures: { 1: { name: "punctuation.definition.string.begin.scss" } }, contentName: "entity.name.function.scss", end: "'", endCaptures: { 0: { name: "punctuation.definition.string.end.scss" } }, name: "string.quoted.single.scss", patterns: [{ match: "\\\\(\\h{1,6}|.)", name: "constant.character.escape.scss" }, { include: "#interpolation" }] }, { begin: "{", beginCaptures: { 0: { name: "punctuation.section.keyframes.begin.scss" } }, end: "}", endCaptures: { 0: { name: "punctuation.section.keyframes.end.scss" } }, patterns: [{ match: "\\b(?:(?:100|[1-9]\\d|\\d)%|from|to)(?=\\s*{)", name: "entity.other.attribute-name.scss" }, { include: "#flow_control" }, { include: "#interpolation" }, { include: "#property_list" }, { include: "#rules" }] }] }, at_rule_media: { patterns: [{ begin: "^\\s*((@)media)\\b", beginCaptures: { 1: { name: "keyword.control.at-rule.media.scss" }, 2: { name: "punctuation.definition.keyword.scss" } }, end: "\\s*(?={)", name: "meta.at-rule.media.scss", patterns: [{ include: "#comment_docblock" }, { include: "#comment_block" }, { include: "#comment_line" }, { match: "\\b(only)\\b", name: "keyword.control.operator.css.scss" }, { begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.media-query.begin.bracket.round.scss" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.media-query.end.bracket.round.scss" } }, name: "meta.property-list.media-query.scss", patterns: [{ begin: "(?<![-a-z])(?=[-a-z])", end: "$|(?![-a-z])", name: "meta.property-name.media-query.scss", patterns: [{ include: "source.css#media-features" }, { include: "source.css#property-names" }] }, { begin: "(:)\\s*(?!(\\s*{))", beginCaptures: { 1: { name: "punctuation.separator.key-value.scss" } }, contentName: "meta.property-value.media-query.scss", end: "\\s*(;|(?=}|\\)))", endCaptures: { 1: { name: "punctuation.terminator.rule.scss" } }, patterns: [{ include: "#general" }, { include: "#property_values" }] }] }, { include: "#variable" }, { include: "#conditional_operators" }, { include: "source.css#media-types" }] }] }, at_rule_mixin: { patterns: [{ begin: "(?<=@mixin)\\s+([\\w-]+)\\s*(\\()", beginCaptures: { 1: { name: "entity.name.function.scss" }, 2: { name: "punctuation.definition.parameters.begin.bracket.round.scss" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.parameters.end.bracket.round.scss" } }, name: "meta.at-rule.mixin.scss", patterns: [{ include: "#function_attributes" }] }, { captures: { 1: { name: "entity.name.function.scss" } }, match: "(?<=@mixin)\\s+([\\w-]+)", name: "meta.at-rule.mixin.scss" }, { captures: { 1: { name: "keyword.control.at-rule.mixin.scss" }, 2: { name: "punctuation.definition.keyword.scss" } }, match: "((@)mixin)\\b", name: "meta.at-rule.mixin.scss" }] }, at_rule_namespace: { patterns: [{ begin: "(?<=@namespace)\\s+(?=url)", end: "(?=;|$)", name: "meta.at-rule.namespace.scss", patterns: [{ include: "#property_values" }, { include: "#string_single" }, { include: "#string_double" }] }, { begin: "(?<=@namespace)\\s+([\\w-]*)", captures: { 1: { name: "entity.name.namespace-prefix.scss" } }, end: "(?=;|$)", name: "meta.at-rule.namespace.scss", patterns: [{ include: "#variables" }, { include: "#property_values" }, { include: "#string_single" }, { include: "#string_double" }] }, { captures: { 1: { name: "keyword.control.at-rule.namespace.scss" }, 2: { name: "punctuation.definition.keyword.scss" } }, match: "((@)namespace)\\b", name: "meta.at-rule.namespace.scss" }] }, at_rule_option: { captures: { 1: { name: "keyword.control.at-rule.charset.scss" }, 2: { name: "punctuation.definition.keyword.scss" } }, match: "^\\s*((@)option\\b)\\s*", name: "meta.at-rule.option.scss" }, at_rule_page: { patterns: [{ begin: "^\\s*((@)page)(?=:|\\s)\\s*([-:\\w]*)", captures: { 1: { name: "keyword.control.at-rule.page.scss" }, 2: { name: "punctuation.definition.keyword.scss" }, 3: { name: "entity.name.function.scss" } }, end: "\\s*(?={)", name: "meta.at-rule.page.scss" }] }, at_rule_return: { begin: "\\s*((@)(return)\\b)", captures: { 1: { name: "keyword.control.return.scss" }, 2: { name: "punctuation.definition.keyword.scss" } }, end: "\\s*((?=;))", name: "meta.at-rule.return.scss", patterns: [{ include: "#variable" }, { include: "#property_values" }] }, at_rule_supports: { begin: "(?<=^|\\s)(@)supports\\b", captures: { 0: { name: "keyword.control.at-rule.supports.scss" }, 1: { name: "punctuation.definition.keyword.scss" } }, end: "(?={)|$", name: "meta.at-rule.supports.scss", patterns: [{ include: "#logical_operators" }, { include: "#properties" }, { match: "\\(", name: "punctuation.definition.condition.begin.bracket.round.scss" }, { match: "\\)", name: "punctuation.definition.condition.end.bracket.round.scss" }] }, at_rule_use: { begin: "\\s*((@)use\\b)\\s*", captures: { 1: { name: "keyword.control.at-rule.use.scss" }, 2: { name: "punctuation.definition.keyword.scss" } }, end: "\\s*(?=;)", name: "meta.at-rule.use.scss", patterns: [{ match: "\\b(as|with)\\b", name: "keyword.control.operator" }, { match: "\\b[\\w-]+\\b", name: "variable.scss" }, { match: "\\*", name: "variable.language.expanded-namespace.scss" }, { include: "#string_single" }, { include: "#string_double" }, { include: "#comment_line" }, { include: "#comment_block" }, { begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.parameters.begin.bracket.round.scss" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.parameters.end.bracket.round.scss" } }, patterns: [{ include: "#function_attributes" }] }] }, at_rule_warn: { begin: "\\s*((@)(warn|debug|error)\\b)\\s*", captures: { 1: { name: "keyword.control.warn.scss" }, 2: { name: "punctuation.definition.keyword.scss" } }, end: "\\s*(?=;)", name: "meta.at-rule.warn.scss", patterns: [{ include: "#variable" }, { include: "#string_double" }, { include: "#string_single" }] }, at_rule_while: { begin: "\\s*((@)while\\b)\\s*", captures: { 1: { name: "keyword.control.while.scss" }, 2: { name: "punctuation.definition.keyword.scss" } }, end: "\\s*(?=})", name: "meta.at-rule.while.scss", patterns: [{ include: "#conditional_operators" }, { include: "#variable" }, { include: "#property_values" }, { include: "$self" }] }, comment_block: { begin: "/\\*", beginCaptures: { 0: { name: "punctuation.definition.comment.scss" } }, end: "\\*/", endCaptures: { 0: { name: "punctuation.definition.comment.scss" } }, name: "comment.block.scss" }, comment_docblock: { begin: "///", beginCaptures: { 0: { name: "punctuation.definition.comment.scss" } }, end: "(?=$)", name: "comment.block.documentation.scss", patterns: [{ include: "source.sassdoc" }] }, comment_line: { begin: "//", beginCaptures: { 0: { name: "punctuation.definition.comment.scss" } }, end: "\\n", name: "comment.line.scss" }, comparison_operators: { match: "==|!=|<=|>=|<|>", name: "keyword.operator.comparison.scss" }, conditional_operators: { patterns: [{ include: "#comparison_operators" }, { include: "#logical_operators" }] }, constant_default: { match: "!default", name: "keyword.other.default.scss" }, constant_functions: { begin: "(?:([\\w-]+)(\\.))?([\\w-]+)(\\()", beginCaptures: { 1: { name: "variable.scss" }, 2: { name: "punctuation.access.module.scss" }, 3: { name: "support.function.misc.scss" }, 4: { name: "punctuation.section.function.scss" } }, end: "(\\))", endCaptures: { 1: { name: "punctuation.section.function.scss" } }, patterns: [{ include: "#parameters" }] }, constant_important: { match: "!important", name: "keyword.other.important.scss" }, constant_mathematical_symbols: { match: "\\b(\\+|-|\\*|/)\\b", name: "support.constant.mathematical-symbols.scss" }, constant_optional: { match: "!optional", name: "keyword.other.optional.scss" }, constant_sass_functions: { begin: "(headings|stylesheet-url|rgba?|hsla?|ie-hex-str|red|green|blue|alpha|opacity|hue|saturation|lightness|prefixed|prefix|-moz|-svg|-css2|-pie|-webkit|-ms|font-(?:files|url)|grid-image|image-(?:width|height|url|color)|sprites?|sprite-(?:map|map-name|file|url|position)|inline-(?:font-files|image)|opposite-position|grad-point|grad-end-position|color-stops|color-stops-in-percentages|grad-color-stops|(?:radial|linear)-(?:gradient|svg-gradient)|opacify|fade-?in|transparentize|fade-?out|lighten|darken|saturate|desaturate|grayscale|adjust-(?:hue|lightness|saturation|color)|scale-(?:lightness|saturation|color)|change-color|spin|complement|invert|mix|-compass-(?:list|space-list|slice|nth|list-size)|blank|compact|nth|first-value-of|join|length|append|nest|append-selector|headers|enumerate|range|percentage|unitless|unit|if|type-of|comparable|elements-of-type|quote|unquote|escape|e|sin|cos|tan|abs|round|ceil|floor|pi|translate(?:X|Y))(\\()", beginCaptures: { 1: { name: "support.function.misc.scss" }, 2: { name: "punctuation.section.function.scss" } }, end: "(\\))", endCaptures: { 1: { name: "punctuation.section.function.scss" } }, patterns: [{ include: "#parameters" }] }, flow_control: { patterns: [{ include: "#at_rule_if" }, { include: "#at_rule_else" }, { include: "#at_rule_warn" }, { include: "#at_rule_for" }, { include: "#at_rule_while" }, { include: "#at_rule_each" }, { include: "#at_rule_return" }] }, function_attributes: { patterns: [{ match: ":", name: "punctuation.separator.key-value.scss" }, { include: "#general" }, { include: "#property_values" }, { match: "[={}\\?;@]", name: "invalid.illegal.scss" }] }, functions: { patterns: [{ begin: "([\\w-]{1,})(\\()\\s*", beginCaptures: { 1: { name: "support.function.misc.scss" }, 2: { name: "punctuation.section.function.scss" } }, end: "(\\))", endCaptures: { 1: { name: "punctuation.section.function.scss" } }, patterns: [{ include: "#parameters" }] }, { match: "([\\w-]{1,})", name: "support.function.misc.scss" }] }, general: { patterns: [{ include: "#variable" }, { include: "#comment_docblock" }, { include: "#comment_block" }, { include: "#comment_line" }] }, interpolation: { begin: "#{", beginCaptures: { 0: { name: "punctuation.definition.interpolation.begin.bracket.curly.scss" } }, end: "}", endCaptures: { 0: { name: "punctuation.definition.interpolation.end.bracket.curly.scss" } }, name: "variable.interpolation.scss", patterns: [{ include: "#variable" }, { include: "#property_values" }] }, logical_operators: { match: "\\b(not|or|and)\\b", name: "keyword.operator.logical.scss" }, map: { begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.map.begin.bracket.round.scss" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.map.end.bracket.round.scss" } }, name: "meta.definition.variable.map.scss", patterns: [{ include: "#comment_docblock" }, { include: "#comment_block" }, { include: "#comment_line" }, { captures: { 1: { name: "support.type.map.key.scss" }, 2: { name: "punctuation.separator.key-value.scss" } }, match: "\\b([\\w-]+)\\s*(:)" }, { match: ",", name: "punctuation.separator.delimiter.scss" }, { include: "#map" }, { include: "#variable" }, { include: "#property_values" }] }, operators: { match: "[-+*/](?!\\s*[-+*/])", name: "keyword.operator.css" }, parameters: { patterns: [{ include: "#variable" }, { begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.begin.bracket.round.scss" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.end.bracket.round.scss" } }, patterns: [{ include: "#function_attributes" }] }, { include: "#property_values" }, { include: "#comment_block" }, { match: `[^'",) \\t]+`, name: "variable.parameter.url.scss" }, { match: ",", name: "punctuation.separator.delimiter.scss" }] }, parent_selector_suffix: { captures: { 1: { name: "punctuation.definition.entity.css" }, 2: { patterns: [{ include: "#interpolation" }, { match: "\\\\([0-9a-fA-F]{1,6}|.)", name: "constant.character.escape.scss" }, { match: "\\$|}", name: "invalid.illegal.identifier.scss" }] } }, match: `(?x)
(?<=&)
(
(?: [-a-zA-Z_0-9]|[^\\x00-\\x7F]
| \\\\(?:[0-9a-fA-F]{1,6}|.)
| \\#\\{
| \\$
| }
)+
)
(?= $
| [\\s,.\\#)\\[:{>+~|]
| /\\*
)`, name: "entity.other.attribute-name.parent-selector-suffix.css" }, properties: { patterns: [{ begin: "(?<![-a-z])(?=[-a-z])", end: "$|(?![-a-z])", name: "meta.property-name.scss", patterns: [{ include: "source.css#property-names" }, { include: "#at_rule_include" }] }, { begin: "(:)\\s*(?!(\\s*{))", beginCaptures: { 1: { name: "punctuation.separator.key-value.scss" } }, contentName: "meta.property-value.scss", end: "\\s*(;|(?=}|\\)))", endCaptures: { 1: { name: "punctuation.terminator.rule.scss" } }, patterns: [{ include: "#general" }, { include: "#property_values" }] }] }, property_list: { begin: "{", beginCaptures: { 0: { name: "punctuation.section.property-list.begin.bracket.curly.scss" } }, end: "}", endCaptures: { 0: { name: "punctuation.section.property-list.end.bracket.curly.scss" } }, name: "meta.property-list.scss", patterns: [{ include: "#flow_control" }, { include: "#rules" }, { include: "#properties" }, { include: "$self" }] }, property_values: { patterns: [{ include: "#string_single" }, { include: "#string_double" }, { include: "#constant_functions" }, { include: "#constant_sass_functions" }, { include: "#constant_important" }, { include: "#constant_default" }, { include: "#constant_optional" }, { include: "source.css#numeric-values" }, { include: "source.css#property-keywords" }, { include: "source.css#color-keywords" }, { include: "source.css#property-names" }, { include: "#constant_mathematical_symbols" }, { include: "#operators" }, { begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.begin.bracket.round.scss" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.end.bracket.round.scss" } }, patterns: [{ include: "#general" }, { include: "#property_values" }] }] }, rules: { patterns: [{ include: "#general" }, { include: "#at_rule_extend" }, { include: "#at_rule_content" }, { include: "#at_rule_include" }, { include: "#at_rule_media" }, { include: "#selectors" }] }, selector_attribute: { captures: { 1: { name: "punctuation.definition.attribute-selector.begin.bracket.square.scss" }, 2: { name: "entity.other.attribute-name.attribute.scss", patterns: [{ include: "#interpolation" }, { match: "\\\\([0-9a-fA-F]{1,6}|.)", name: "constant.character.escape.scss" }, { match: "\\$|}", name: "invalid.illegal.scss" }] }, 3: { name: "keyword.operator.scss" }, 4: { name: "string.unquoted.attribute-value.scss", patterns: [{ include: "#interpolation" }, { match: "\\\\([0-9a-fA-F]{1,6}|.)", name: "constant.character.escape.scss" }, { match: "\\$|}", name: "invalid.illegal.scss" }] }, 5: { name: "string.quoted.double.attribute-value.scss" }, 6: { name: "punctuation.definition.string.begin.scss" }, 7: { patterns: [{ include: "#interpolation" }, { match: "\\\\([0-9a-fA-F]{1,6}|.)", name: "constant.character.escape.scss" }, { match: "\\$|}", name: "invalid.illegal.scss" }] }, 8: { name: "punctuation.definition.string.end.scss" }, 9: { name: "string.quoted.single.attribute-value.scss" }, 10: { name: "punctuation.definition.string.begin.scss" }, 11: { patterns: [{ include: "#interpolation" }, { match: "\\\\([0-9a-fA-F]{1,6}|.)", name: "constant.character.escape.scss" }, { match: "\\$|}", name: "invalid.illegal.scss" }] }, 12: { name: "punctuation.definition.string.end.scss" }, 13: { name: "punctuation.definition.attribute-selector.end.bracket.square.scss" } }, match: `(?xi)
(\\[)
\\s*
(
(?:
[-a-zA-Z_0-9]|[^\\x00-\\x7F]
| \\\\(?:[0-9a-fA-F]{1,6}|.)
| \\#\\{
| \\.?\\$
| }
)+?
)
(?:
\\s*([~|^$*]?=)\\s*
(?:
(
(?:
[-a-zA-Z_0-9]|[^\\x00-\\x7F]
| \\\\(?:[0-9a-fA-F]{1,6}|.)
| \\#\\{
| \\.?\\$
| }
)+
)
|
((")(.*?)("))
|
((')(.*?)('))
)
)?
\\s*
(\\])`, name: "meta.attribute-selector.scss" }, selector_class: { captures: { 1: { name: "punctuation.definition.entity.css" }, 2: { patterns: [{ include: "#interpolation" }, { match: "\\\\([0-9a-fA-F]{1,6}|.)", name: "constant.character.escape.scss" }, { match: "\\$|}", name: "invalid.illegal.scss" }] } }, match: `(?x)
(\\.)
(
(?: [-a-zA-Z_0-9]|[^\\x00-\\x7F]
| \\\\(?:[0-9a-fA-F]{1,6}|.)
| \\#\\{
| \\.?\\$
| }
)+
)
(?= $
| [\\s,\\#)\\[:{>+~|]
| \\.[^$]
| /\\*
| ;
)`, name: "entity.other.attribute-name.class.css" }, selector_custom: { match: "\\b([a-zA-Z0-9]+(-[a-zA-Z0-9]+)+)(?=\\.|\\s++[^:]|\\s*[,\\[{]|:(link|visited|hover|active|focus|target|lang|disabled|enabled|checked|indeterminate|root|nth-(child|last-child|of-type|last-of-type)|first-child|last-child|first-of-type|last-of-type|only-child|only-of-type|empty|not|valid|invalid)(\\([0-9A-Za-z]*\\))?)", name: "entity.name.tag.custom.scss" }, selector_id: { captures: { 1: { name: "punctuation.definition.entity.css" }, 2: { patterns: [{ include: "#interpolation" }, { match: "\\\\([0-9a-fA-F]{1,6}|.)", name: "constant.character.escape.scss" }, { match: "\\$|}", name: "invalid.illegal.identifier.scss" }] } }, match: `(?x)
(\\#)
(
(?: [-a-zA-Z_0-9]|[^\\x00-\\x7F]
| \\\\(?:[0-9a-fA-F]{1,6}|.)
| \\#\\{
| \\.?\\$
| }
)+
)
(?= $
| [\\s,\\#)\\[:{>+~|]
| \\.[^$]
| /\\*
)`, name: "entity.other.attribute-name.id.css" }, selector_placeholder: { captures: { 1: { name: "punctuation.definition.entity.css" }, 2: { patterns: [{ include: "#interpolation" }, { match: "\\\\([0-9a-fA-F]{1,6}|.)", name: "constant.character.escape.scss" }, { match: "\\$|}", name: "invalid.illegal.identifier.scss" }] } }, match: `(?x)
(%)
(
(?: [-a-zA-Z_0-9]|[^\\x00-\\x7F]
| \\\\(?:[0-9a-fA-F]{1,6}|.)
| \\#\\{
| \\.\\$
| \\$
| }
)+
)
(?= ;
| $
| [\\s,\\#)\\[:{>+~|]
| \\.[^$]
| /\\*
)`, name: "entity.other.attribute-name.placeholder.css" }, selector_pseudo_class: { patterns: [{ begin: "((:)\\bnth-(?:child|last-child|of-type|last-of-type))(\\()", beginCaptures: { 1: { name: "entity.other.attribute-name.pseudo-class.css" }, 2: { name: "punctuation.definition.entity.css" }, 3: { name: "punctuation.definition.pseudo-class.begin.bracket.round.css" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.pseudo-class.end.bracket.round.css" } }, patterns: [{ include: "#interpolation" }, { match: "\\d+", name: "constant.numeric.css" }, { match: "(?<=\\d)n\\b|\\b(n|even|odd)\\b", name: "constant.other.scss" }, { match: "\\w+", name: "invalid.illegal.scss" }] }, { include: "source.css#pseudo-classes" }, { include: "source.css#pseudo-elements" }, { include: "source.css#functional-pseudo-classes" }] }, selectors: { patterns: [{ include: "source.css#tag-names" }, { include: "#selector_custom" }, { include: "#selector_class" }, { include: "#selector_id" }, { include: "#selector_pseudo_class" }, { include: "#tag_wildcard" }, { include: "#tag_parent_reference" }, { include: "source.css#pseudo-elements" }, { include: "#selector_attribute" }, { include: "#selector_placeholder" }, { include: "#parent_selector_suffix" }] }, string_double: { begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.scss" } }, end: '"', endCaptures: { 0: { name: "punctuation.definition.string.end.scss" } }, name: "string.quoted.double.scss", patterns: [{ match: "\\\\(\\h{1,6}|.)", name: "constant.character.escape.scss" }, { include: "#interpolation" }] }, string_single: { begin: "'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.scss" } }, end: "'", endCaptures: { 0: { name: "punctuation.definition.string.end.scss" } }, name: "string.quoted.single.scss", patterns: [{ match: "\\\\(\\h{1,6}|.)", name: "constant.character.escape.scss" }, { include: "#interpolation" }] }, tag_parent_reference: { match: "&", name: "entity.name.tag.reference.scss" }, tag_wildcard: { match: "\\*", name: "entity.name.tag.wildcard.scss" }, variable: { patterns: [{ include: "#variables" }, { include: "#interpolation" }] }, variable_setting: { begin: "(?=\\$[\\w-]+\\s*:)", contentName: "meta.definition.variable.scss", end: ";", endCaptures: { 0: { name: "punctuation.terminator.rule.scss" } }, patterns: [{ match: "\\$[\\w-]+(?=\\s*:)", name: "variable.scss" }, { begin: ":", beginCaptures: { 0: { name: "punctuation.separator.key-value.scss" } }, end: "(?=;)", patterns: [{ include: "#comment_docblock" }, { include: "#comment_block" }, { include: "#comment_line" }, { include: "#map" }, { include: "#property_values" }, { include: "#variable" }, { match: ",", name: "punctuation.separator.delimiter.scss" }] }] }, variables: { patterns: [{ captures: { 1: { name: "variable.scss" }, 2: { name: "punctuation.access.module.scss" }, 3: { name: "variable.scss" } }, match: "\\b([\\w-]+)(\\.)(\\$[\\w-]+)\\b" }, { match: "(\\$|\\-\\-)[A-Za-z0-9_-]+\\b", name: "variable.scss" }] } }, scopeName: "source.css.scss", embeddedLangs: ["css"] });
var m = [
  ...n,
  R
];
const U = Object.freeze({ displayName: "Less", name: "less", patterns: [{ include: "#comment-block" }, { include: "#less-namespace-accessors" }, { include: "#less-extend" }, { include: "#at-rules" }, { include: "#less-variable-assignment" }, { include: "#property-list" }, { include: "#selector" }], repository: { "angle-type": { captures: { 1: { name: "keyword.other.unit.less" } }, match: "(?i:[-+]?(?:(?:\\d*\\.\\d+(?:[eE](?:[-+]?\\d+))*)|(?:[-+]?\\d+))(deg|grad|rad|turn))\\b", name: "constant.numeric.less" }, "arbitrary-repetition": { captures: { 1: { name: "punctuation.definition.arbitrary-repetition.less" } }, match: "\\s*(?:(,))" }, "at-charset": { begin: "\\s*((@)charset\\b)\\s*", captures: { 1: { name: "keyword.control.at-rule.charset.less" }, 2: { name: "punctuation.definition.keyword.less" } }, end: "\\s*((?=;|$))", name: "meta.at-rule.charset.less", patterns: [{ include: "#literal-string" }] }, "at-counter-style": { begin: "\\s*((@)counter-style\\b)\\s+(?:(?i:\\b(decimal|none)\\b)|(-?(?:[[_a-zA-Z][^\\x{00}-\\x{7F}]]|(?:\\\\\\h{1,6}[\\s\\t\\n\\f]?|\\\\[^\\n\\f\\h]))(?:[[-\\w][^\\x{00}-\\x{7F}]]|(?:\\\\\\h{1,6}[\\s\\t\\n\\f]?|\\\\[^\\n\\f\\h]))*))\\s*(?=\\{|$)", captures: { 1: { name: "keyword.control.at-rule.counter-style.less" }, 2: { name: "punctuation.definition.keyword.less" }, 3: { name: "invalid.illegal.counter-style-name.less" }, 4: { name: "entity.other.counter-style-name.css" } }, end: "\\s*(\\})", endCaptures: { 1: { name: "punctuation.definition.block.begin.less" } }, name: "meta.at-rule.counter-style.less", patterns: [{ include: "#comment-block" }, { include: "#rule-list" }] }, "at-custom-media": { begin: "(?=\\s*@custom-media\\b)", end: "\\s*(?=;)", name: "meta.at-rule.custom-media.less", patterns: [{ captures: { 0: { name: "punctuation.section.property-list.less" } }, match: "\\s*;" }, { captures: { 1: { name: "keyword.control.at-rule.custom-media.less" }, 2: { name: "punctuation.definition.keyword.less" }, 3: { name: "support.constant.custom-media.less" } }, match: "\\s*((@)custom-media)(?=.*?)" }, { include: "#media-query-list" }] }, "at-font-face": { begin: "\\s*((@)font-face)\\s*(?=\\{|$)", captures: { 1: { name: "keyword.control.at-rule.font-face.less" }, 2: { name: "punctuation.definition.keyword.less" } }, end: "\\s*(\\})", endCaptures: { 1: { name: "punctuation.definition.block.end.less" } }, name: "meta.at-rule.font-face.less", patterns: [{ include: "#comment-block" }, { include: "#rule-list" }] }, "at-import": { begin: "\\s*((@)import\\b)\\s*", beginCaptures: { 1: { name: "keyword.control.at-rule.import.less" }, 2: { name: "punctuation.definition.keyword.less" } }, end: "\\;", endCaptures: { 0: { name: "punctuation.terminator.rule.less" } }, name: "meta.at-rule.import.less", patterns: [{ include: "#url-function" }, { include: "#less-variables" }, { begin: `(?<=(["'])|(["']\\)))\\s*`, end: "\\s*(?=\\;)", patterns: [{ include: "#media-query" }] }, { begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.group.less", patterns: [{ match: "reference|inline|less|css|once|multiple|optional", name: "constant.language.import-directive.less" }, { include: "#comma-delimiter" }] }, { include: "#literal-string" }] }, "at-keyframes": { begin: "\\s*((@)(-webkit-|-moz-|-o-)?keyframes)(?=.*?\\{)", beginCaptures: { 1: { name: "keyword.control.at-rule.keyframe.less" }, 2: { name: "punctuation.definition.keyword.less" }, 3: { name: "support.type.property-vendor.less" }, 4: { name: "support.constant.keyframe.less" } }, end: "\\s*(\\})", endCaptures: { 1: { name: "punctuation.definition.block.end.less" } }, patterns: [{ begin: "\\s*(\\{)", beginCaptures: { 1: { name: "punctuation.definition.block.begin.less" } }, end: "(?=\\})", patterns: [{ captures: { 1: { name: "keyword.other.keyframe-selector.less" }, 2: { name: "constant.numeric.less" }, 3: { name: "keyword.other.unit.less" } }, match: "\\s*(?:(from|to)|((?:\\.[0-9]+|[0-9]+(?:\\.[0-9]*)?)(%)))\\s*,?\\s*" }, { include: "$self" }] }, { begin: "\\s*(?=[^{;])", end: "\\s*(?=\\{)", name: "meta.at-rule.keyframe.less", patterns: [{ include: "#keyframe-name" }, { include: "#arbitrary-repetition" }] }] }, "at-media": { begin: "(?=\\s*@media\\b)", end: "\\s*(\\})", endCaptures: { 1: { name: "punctuation.definition.block.end.less" } }, patterns: [{ begin: "\\s*((@)media)", beginCaptures: { 1: { name: "keyword.control.at-rule.media.less" }, 2: { name: "punctuation.definition.keyword.less" }, 3: { name: "support.constant.media.less" } }, end: "\\s*(?=\\{)", name: "meta.at-rule.media.less", patterns: [{ include: "#media-query-list" }] }, { begin: "\\s*(\\{)", beginCaptures: { 1: { name: "punctuation.definition.block.begin.less" } }, end: "(?=\\})", patterns: [{ include: "#rule-list-body" }, { include: "$self" }] }] }, "at-namespace": { begin: "\\s*((@)namespace)\\s+", beginCaptures: { 1: { name: "keyword.control.at-rule.namespace.less" }, 2: { name: "punctuation.definition.keyword.less" } }, end: "\\;", endCaptures: { 0: { name: "punctuation.terminator.rule.less" } }, name: "meta.at-rule.namespace.less", patterns: [{ include: "#url-function" }, { include: "#literal-string" }, { match: "(-?(?:[[_a-zA-Z][^\\x{00}-\\x{7F}]]|(?:\\\\\\h{1,6}[\\s\\t\\n\\f]?|\\\\[^\\n\\f\\h]))(?:[[-\\w][^\\x{00}-\\x{7F}]]|(?:\\\\\\h{1,6}[\\s\\t\\n\\f]?|\\\\[^\\n\\f\\h]))*)", name: "entity.name.constant.namespace-prefix.less" }] }, "at-page": { captures: { 1: { name: "keyword.control.at-rule.page.less" }, 2: { name: "punctuation.definition.keyword.less" }, 3: { name: "punctuation.definition.entity.less" }, 4: { name: "entity.other.attribute-name.pseudo-class.less" } }, match: "\\s*((@)page)\\s*(?:(:)(first|left|right))?\\s*(?=\\{|$)", name: "meta.at-rule.page.less", patterns: [{ include: "#comment-block" }, { include: "#rule-list" }] }, "at-rules": { patterns: [{ include: "#at-charset" }, { include: "#at-counter-style" }, { include: "#at-custom-media" }, { include: "#at-font-face" }, { include: "#at-media" }, { include: "#at-import" }, { include: "#at-keyframes" }, { include: "#at-namespace" }, { include: "#at-page" }, { include: "#at-supports" }, { include: "#at-viewport" }] }, "at-supports": { begin: "(?=\\s*@supports\\b)", end: "(?=\\s*)(\\})", endCaptures: { 1: { name: "punctuation.definition.block.end.less" } }, patterns: [{ begin: "\\s*((@)supports)", beginCaptures: { 1: { name: "keyword.control.at-rule.supports.less" }, 2: { name: "punctuation.definition.keyword.less" }, 3: { name: "support.constant.supports.less" } }, end: "\\s*(?=\\{)", name: "meta.at-rule.supports.less", patterns: [{ include: "#at-supports-operators" }, { include: "#at-supports-parens" }] }, { begin: "\\s*(\\{)", beginCaptures: { 1: { name: "punctuation.section.property-list.begin.less" } }, end: "(?=\\})", patterns: [{ include: "#rule-list-body" }, { include: "$self" }] }] }, "at-supports-operators": { match: "\\b(?:and|or|not)\\b", name: "keyword.operator.logic.less" }, "at-supports-parens": { begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.group.less", patterns: [{ include: "#at-supports-operators" }, { include: "#at-supports-parens" }, { include: "#rule-list-body" }] }, "at-viewport": { begin: "((@(-ms-)?)viewport)", beginCaptures: { 1: { name: "keyword.control.at-rule.viewport.less" }, 2: { name: "punctuation.definition.keyword.less" }, 3: { name: "support.type.vendor-prefix.less" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.block.end.less" } }, name: "meta.at-rule.viewport.less", patterns: [{ begin: "\\{", captures: { 0: { name: "punctuation.definition.block.begin.less" } }, end: "(?=\\})", name: "meta.block.less", patterns: [{ include: "#rule-list-body" }] }] }, "attr-function": { begin: "\\b(attr)(?=\\()", beginCaptures: { 1: { name: "support.function.filter.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#qualified-name" }, { include: "#literal-string" }, { begin: "(-?(?:[[_a-zA-Z][^\\x{00}-\\x{7F}]]|(?:\\\\\\h{1,6}[\\s\\t\\n\\f]?|\\\\[^\\n\\f\\h]))(?:[[-\\w][^\\x{00}-\\x{7F}]]|(?:\\\\\\h{1,6}[\\s\\t\\n\\f]?|\\\\[^\\n\\f\\h]))*)", end: "(?=\\))", name: "entity.other.attribute-name.less", patterns: [{ match: "(?x)\\b((?i:em|ex|ch|rem)|(?i:vw|vh|vmin|vmax)|(?i:cm|mm|q|in|pt|pc|px|fr)|(?i:deg|grad|rad|turn)|(?i:s|ms)|(?i:Hz|kHz)|(?i:dpi|dpcm|dppx))\\b", name: "keyword.other.unit.less" }, { include: "#comma-delimiter" }, { include: "#property-value-constants" }, { include: "#numeric-values" }] }, { include: "#color-values" }] }] }, "builtin-functions": { patterns: [{ include: "#attr-function" }, { include: "#calc-function" }, { include: "#color-functions" }, { include: "#counter-functions" }, { include: "#cross-fade-function" }, { include: "#cubic-bezier-function" }, { include: "#filter-function" }, { include: "#fit-content-function" }, { include: "#format-function" }, { include: "#gradient-functions" }, { include: "#grid-repeat-function" }, { include: "#image-function" }, { include: "#less-functions" }, { include: "#local-function" }, { include: "#minmax-function" }, { include: "#regexp-function" }, { include: "#shape-functions" }, { include: "#steps-function" }, { include: "#symbols-function" }, { include: "#transform-functions" }, { include: "#url-function" }, { include: "#var-function" }] }, "calc-function": { begin: "\\b(calc)(?=\\()", beginCaptures: { 1: { name: "support.function.calc.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#less-strings" }, { include: "#var-function" }, { include: "#calc-function" }, { include: "#attr-function" }, { include: "#less-math" }, { include: "#relative-color" }] }] }, "color-adjuster-operators": { match: "[\\-\\+*](?=\\s+)", name: "keyword.operator.less" }, "color-functions": { patterns: [{ begin: "\\b(rgba?)(?=\\()", beginCaptures: { 1: { name: "support.function.color.less" } }, comment: "rgb(), rgba()", end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#less-strings" }, { include: "#less-variables" }, { include: "#var-function" }, { include: "#comma-delimiter" }, { include: "#value-separator" }, { include: "#percentage-type" }, { include: "#number-type" }] }] }, { begin: "\\b(hsla|hsl|hwb|oklab|oklch|lab|lch)(?=\\()", beginCaptures: { 1: { name: "support.function.color.less" } }, comment: "hsla, hsl, hwb, oklab, oklch, lab, lch", end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#color-values" }, { include: "#less-strings" }, { include: "#less-variables" }, { include: "#var-function" }, { include: "#comma-delimiter" }, { include: "#angle-type" }, { include: "#percentage-type" }, { include: "#number-type" }, { include: "#calc-function" }, { include: "#value-separator" }] }] }, { begin: "\\b(light-dark)(?=\\()", beginCaptures: { 1: { name: "support.function.color.less" } }, comment: "light-dark()", end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#color-values" }, { include: "#comma-delimiter" }] }] }, { include: "#less-color-functions" }] }, "color-values": { patterns: [{ include: "#color-functions" }, { include: "#less-functions" }, { include: "#less-variables" }, { include: "#var-function" }, { match: "\\b(aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow)\\b", name: "support.constant.color.w3c-standard-color-name.less" }, { match: "\\b(aliceblue|antiquewhite|aquamarine|azure|beige|bisque|blanchedalmond|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgreen|darkgrey|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen|gainsboro|ghostwhite|gold|goldenrod|greenyellow|grey|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgreen|lightgrey|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightslategrey|lightsteelblue|lightyellow|limegreen|linen|magenta|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|oldlace|olivedrab|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|rebeccapurple|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|thistle|tomato|turquoise|violet|wheat|whitesmoke|yellowgreen)\\b", name: "support.constant.color.w3c-extended-color-keywords.less" }, { match: "\\b((?i)currentColor|transparent)\\b", name: "support.constant.color.w3c-special-color-keyword.less" }, { captures: { 1: { name: "punctuation.definition.constant.less" } }, match: "(#)(\\h{3}|\\h{4}|\\h{6}|\\h{8})\\b", name: "constant.other.color.rgb-value.less" }, { include: "#relative-color" }] }, "comma-delimiter": { captures: { 1: { name: "punctuation.separator.less" } }, match: "\\s*(,)\\s*" }, "comment-block": { patterns: [{ begin: "/\\*", captures: { 0: { name: "punctuation.definition.comment.less" } }, end: "\\*/", name: "comment.block.less" }, { include: "#comment-line" }] }, "comment-line": { captures: { 1: { name: "punctuation.definition.comment.less" } }, match: "(//).*$\\n?", name: "comment.line.double-slash.less" }, "counter-functions": { patterns: [{ begin: "\\b(counter)(?=\\()", beginCaptures: { 1: { name: "support.function.filter.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#less-strings" }, { include: "#less-variables" }, { include: "#var-function" }, { match: "(?:--(?:[[-\\w][^\\x{00}-\\x{7F}]]|(?:\\\\\\h{1,6}[\\s\\t\\n\\f]?|\\\\[^\\n\\f\\h]))+|-?(?:[[_a-zA-Z][^\\x{00}-\\x{7F}]]|(?:\\\\\\h{1,6}[\\s\\t\\n\\f]?|\\\\[^\\n\\f\\h]))(?:[[-\\w][^\\x{00}-\\x{7F}]]|(?:\\\\\\h{1,6}[\\s\\t\\n\\f]?|\\\\[^\\n\\f\\h]))*)", name: "entity.other.counter-name.less" }, { begin: "(?=,)", end: "(?=\\))", patterns: [{ include: "#comma-delimiter" }, { match: "\\b((?xi:arabic-indic|armenian|bengali|cambodian|circle|cjk-decimal|cjk-earthly-branch|cjk-heavenly-stem|decimal-leading-zero|decimal|devanagari|disclosure-closed|disclosure-open|disc|ethiopic-numeric|georgian|gujarati|gurmukhi|hebrew|hiragana-iroha|hiragana|japanese-formal|japanese-informal|kannada|katakana-iroha|katakana|khmer|korean-hangul-formal|korean-hanja-formal|korean-hanja-informal|lao|lower-alpha|lower-armenian|lower-greek|lower-latin|lower-roman|malayalam|mongolian|myanmar|oriya|persian|simp-chinese-formal|simp-chinese-informal|square|tamil|telugu|thai|tibetan|trad-chinese-formal|trad-chinese-informal|upper-alpha|upper-armenian|upper-latin|upper-roman)|none)\\b", name: "support.constant.property-value.counter-style.less" }] }] }] }, { begin: "\\b(counters)(?=\\()", beginCaptures: { 1: { name: "support.function.filter.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ match: "(-?(?:[[_a-zA-Z][^\\x{00}-\\x{7F}]]|(?:\\\\\\h{1,6}[\\s\\t\\n\\f]?|\\\\[^\\n\\f\\h]))(?:[[-\\w][^\\x{00}-\\x{7F}]]|(?:\\\\\\h{1,6}[\\s\\t\\n\\f]?|\\\\[^\\n\\f\\h]))*)", name: "entity.other.counter-name.less string.unquoted.less" }, { begin: "(?=,)", end: "(?=\\))", patterns: [{ include: "#less-strings" }, { include: "#less-variables" }, { include: "#var-function" }, { include: "#literal-string" }, { include: "#comma-delimiter" }, { match: "\\b((?xi:arabic-indic|armenian|bengali|cambodian|circle|cjk-decimal|cjk-earthly-branch|cjk-heavenly-stem|decimal-leading-zero|decimal|devanagari|disclosure-closed|disclosure-open|disc|ethiopic-numeric|georgian|gujarati|gurmukhi|hebrew|hiragana-iroha|hiragana|japanese-formal|japanese-informal|kannada|katakana-iroha|katakana|khmer|korean-hangul-formal|korean-hanja-formal|korean-hanja-informal|lao|lower-alpha|lower-armenian|lower-greek|lower-latin|lower-roman|malayalam|mongolian|myanmar|oriya|persian|simp-chinese-formal|simp-chinese-informal|square|tamil|telugu|thai|tibetan|trad-chinese-formal|trad-chinese-informal|upper-alpha|upper-armenian|upper-latin|upper-roman)|none)\\b", name: "support.constant.property-value.counter-style.less" }] }] }] }] }, "cross-fade-function": { patterns: [{ begin: "\\b(cross-fade)(?=\\()", beginCaptures: { 1: { name: "support.function.image.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#comma-delimiter" }, { include: "#percentage-type" }, { include: "#color-values" }, { include: "#image-type" }, { include: "#literal-string" }, { include: "#unquoted-string" }] }] }] }, "cubic-bezier-function": { begin: "\\b(cubic-bezier)(\\()", beginCaptures: { 1: { name: "support.function.timing.less" }, 2: { name: "punctuation.definition.group.begin.less" } }, contentName: "meta.group.less", end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ include: "#less-functions" }, { include: "#calc-function" }, { include: "#less-variables" }, { include: "#var-function" }, { include: "#comma-delimiter" }, { include: "#number-type" }] }, "custom-property-name": { captures: { 1: { name: "punctuation.definition.custom-property.less" }, 2: { name: "support.type.custom-property.name.less" } }, match: "\\s*(--)((?:[[-\\w][^\\x{00}-\\x{7F}]]|(?:\\\\\\h{1,6}[\\s\\t\\n\\f]?|\\\\[^\\n\\f\\h]))+)", name: "support.type.custom-property.less" }, dimensions: { patterns: [{ include: "#angle-type" }, { include: "#frequency-type" }, { include: "#time-type" }, { include: "#length-type" }, { include: "#resolution-type" }] }, "filter-function": { begin: "\\b(filter)(?=\\()", beginCaptures: { 1: { name: "support.function.filter.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", name: "meta.group.less", patterns: [{ include: "#comma-delimiter" }, { include: "#image-type" }, { include: "#literal-string" }, { include: "#filter-functions" }] }] }, "filter-functions": { patterns: [{ include: "#less-functions" }, { begin: "\\b(blur)(?=\\()", beginCaptures: { 1: { name: "support.function.filter.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#length-type" }] }] }, { begin: "\\b(brightness|contrast|grayscale|invert|opacity|saturate|sepia)(?=\\()", beginCaptures: { 1: { name: "support.function.filter.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#percentage-type" }, { include: "#number-type" }, { include: "#less-functions" }] }] }, { begin: "\\b(drop-shadow)(?=\\()", beginCaptures: { 1: { name: "support.function.filter.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#length-type" }, { include: "#color-values" }] }] }, { begin: "\\b(hue-rotate)(?=\\()", beginCaptures: { 1: { name: "support.function.filter.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#angle-type" }] }] }] }, "fit-content-function": { begin: "\\b(fit-content)(?=\\()", beginCaptures: { 1: { name: "support.function.grid.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#less-variables" }, { include: "#var-function" }, { include: "#calc-function" }, { include: "#length-type" }, { include: "#percentage-type" }] }] }, "format-function": { patterns: [{ begin: "\\b(format)(?=\\()", beginCaptures: { 0: { name: "support.function.format.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#literal-string" }] }] }] }, "frequency-type": { captures: { 1: { name: "keyword.other.unit.less" } }, match: "(?i:[-+]?(?:(?:\\d*\\.\\d+(?:[eE](?:[-+]?\\d+))*)|(?:[-+]?\\d+))(Hz|kHz))\\b", name: "constant.numeric.less" }, "gradient-functions": { patterns: [{ begin: "\\b((?:repeating-)?linear-gradient)(?=\\()", beginCaptures: { 1: { name: "support.function.gradient.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#less-variables" }, { include: "#var-function" }, { include: "#angle-type" }, { include: "#color-values" }, { include: "#percentage-type" }, { include: "#length-type" }, { include: "#comma-delimiter" }, { match: "\\bto\\b", name: "keyword.other.less" }, { match: "\\b(top|right|bottom|left)\\b", name: "support.constant.property-value.less" }] }] }, { begin: "\\b((?:repeating-)?radial-gradient)(?=\\()", beginCaptures: { 1: { name: "support.function.gradient.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#less-variables" }, { include: "#var-function" }, { include: "#color-values" }, { include: "#percentage-type" }, { include: "#length-type" }, { include: "#comma-delimiter" }, { match: "\\b(at|circle|ellipse)\\b", name: "keyword.other.less" }, { match: "\\b(top|right|bottom|left|center|(farthest|closest)-(corner|side))\\b", name: "support.constant.property-value.less" }] }] }] }, "grid-repeat-function": { begin: "\\b(repeat)(?=\\()", beginCaptures: { 1: { name: "support.function.grid.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#comma-delimiter" }, { include: "#var-function" }, { include: "#length-type" }, { include: "#percentage-type" }, { include: "#minmax-function" }, { include: "#integer-type" }, { match: "\\b(auto-(fill|fit))\\b", name: "support.keyword.repetitions.less" }, { match: "\\b(((max|min)-content)|auto)\\b", name: "support.constant.property-value.less" }] }] }, "image-function": { begin: "\\b(image)(?=\\()", beginCaptures: { 1: { name: "support.function.image.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#image-type" }, { include: "#literal-string" }, { include: "#color-values" }, { include: "#comma-delimiter" }, { include: "#unquoted-string" }] }] }, "image-type": { patterns: [{ include: "#cross-fade-function" }, { include: "#gradient-functions" }, { include: "#image-function" }, { include: "#url-function" }] }, important: { captures: { 1: { name: "punctuation.separator.less" } }, match: "(\\!)\\s*important", name: "keyword.other.important.less" }, "integer-type": { match: "(?:[-+]?\\d+)", name: "constant.numeric.less" }, "keyframe-name": { begin: "\\s*(-?(?:[_a-z]|[^\\x{00}-\\x{7F}]|(?:(:?\\\\[0-9a-f]{1,6}(\\r\\n|[\\s\\t\\r\\n\\f])?)|\\\\[^\\r\\n\\f0-9a-f]))(?:[_a-z0-9-]|[^\\x{00}-\\x{7F}]|(?:(:?\\\\[0-9a-f]{1,6}(\\r\\n|[\\t\\r\\n\\f])?)|\\\\[^\\r\\n\\f0-9a-f]))*)?", beginCaptures: { 1: { name: "variable.other.constant.animation-name.less" } }, end: "\\s*(?:(,)|(?=[{;]))", endCaptures: { 1: { name: "punctuation.definition.arbitrary-repetition.less" } } }, "length-type": { captures: { 1: { name: "keyword.other.unit.less" } }, match: "0|(?i:[-+]?(?:(?:\\d*\\.\\d+(?:[eE](?:[-+]?\\d+))*)|(?:[-+]?\\d+))(em|ex|ch|rem|vw|vh|vmin|vmax|(c|m)?m|q|in|pt|pc|px|fr))\\b", name: "constant.numeric.less" }, "less-boolean-function": { begin: "\\b(boolean)(?=\\()", beginCaptures: { 1: { name: "support.function.boolean.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#less-logical-comparisons" }] }] }, "less-color-blend-functions": { patterns: [{ begin: "\\b(multiply|screen|overlay|(soft|hard)light|difference|exclusion|negation|average)(?=\\()", beginCaptures: { 1: { name: "support.function.color-blend.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#less-variables" }, { include: "#var-function" }, { include: "#comma-delimiter" }, { include: "#color-values" }] }] }] }, "less-color-channel-functions": { patterns: [{ begin: "\\b(hue|saturation|lightness|hsv(hue|saturation|value)|red|green|blue|alpha|luma|luminance)(?=\\()", beginCaptures: { 1: { name: "support.function.color-definition.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#color-values" }] }] }] }, "less-color-definition-functions": { patterns: [{ begin: "\\b(argb)(?=\\()", beginCaptures: { 1: { name: "support.function.color-definition.less" } }, comment: "argb()", end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#less-variables" }, { include: "#var-function" }, { include: "#color-values" }] }] }, { begin: "\\b(hsva?)(?=\\()", beginCaptures: { 1: { name: "support.function.color.less" } }, comment: "hsva(), hsv()", end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#integer-type" }, { include: "#percentage-type" }, { include: "#number-type" }, { include: "#less-strings" }, { include: "#less-variables" }, { include: "#var-function" }, { include: "#calc-function" }, { include: "#comma-delimiter" }] }] }] }, "less-color-functions": { patterns: [{ include: "#less-color-blend-functions" }, { include: "#less-color-channel-functions" }, { include: "#less-color-definition-functions" }, { include: "#less-color-operation-functions" }] }, "less-color-operation-functions": { patterns: [{ begin: "\\b(fade|shade|tint)(?=\\()", beginCaptures: { 1: { name: "support.function.color-operation.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#color-values" }, { include: "#comma-delimiter" }, { include: "#percentage-type" }] }] }, { begin: "\\b(spin)(?=\\()", beginCaptures: { 1: { name: "support.function.color-operation.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#color-values" }, { include: "#comma-delimiter" }, { include: "#number-type" }] }] }, { begin: "\\b(((de)?saturate)|((light|dark)en)|(fade(in|out)))(?=\\()", beginCaptures: { 1: { name: "support.function.color-operation.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#color-values" }, { include: "#comma-delimiter" }, { include: "#percentage-type" }, { match: "\\brelative\\b", name: "constant.language.relative.less" }] }] }, { begin: "\\b(contrast)(?=\\()", beginCaptures: { 1: { name: "support.function.color-operation.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#color-values" }, { include: "#comma-delimiter" }, { include: "#percentage-type" }] }] }, { begin: "\\b(greyscale)(?=\\()", beginCaptures: { 1: { name: "support.function.color-operation.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#color-values" }] }] }, { begin: "\\b(mix)(?=\\()", beginCaptures: { 1: { name: "support.function.color-operation.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#color-values" }, { include: "#comma-delimiter" }, { include: "#less-math" }, { include: "#percentage-type" }] }] }] }, "less-extend": { begin: "(:)(extend)(?=\\()", beginCaptures: { 1: { name: "punctuation.definition.entity.less" }, 2: { name: "entity.other.attribute-name.pseudo-class.extend.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ match: "\\ball\\b", name: "constant.language.all.less" }, { include: "#selectors" }] }] }, "less-functions": { patterns: [{ include: "#less-boolean-function" }, { include: "#less-color-functions" }, { include: "#less-if-function" }, { include: "#less-list-functions" }, { include: "#less-math-functions" }, { include: "#less-misc-functions" }, { include: "#less-string-functions" }, { include: "#less-type-functions" }] }, "less-if-function": { begin: "\\b(if)(?=\\()", beginCaptures: { 1: { name: "support.function.if.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#less-mixin-guards" }, { include: "#comma-delimiter" }, { include: "#property-values" }] }] }, "less-list-functions": { patterns: [{ begin: "\\b(length)(?=\\()\\b", beginCaptures: { 1: { name: "support.function.length.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#property-values" }, { include: "#comma-delimiter" }] }] }, { begin: "\\b(extract)(?=\\()\\b", beginCaptures: { 1: { name: "support.function.extract.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#property-values" }, { include: "#comma-delimiter" }, { include: "#integer-type" }] }] }, { begin: "\\b(range)(?=\\()\\b", beginCaptures: { 1: { name: "support.function.range.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#property-values" }, { include: "#comma-delimiter" }, { include: "#integer-type" }] }] }] }, "less-logical-comparisons": { patterns: [{ captures: { 1: { name: "keyword.operator.logical.less" } }, match: "\\s*(=|((<|>)=?))\\s*" }, { begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.group.less", patterns: [{ include: "#less-logical-comparisons" }] }, { match: "\\btrue|false\\b", name: "constant.language.less" }, { match: ",", name: "punctuation.separator.less" }, { include: "#property-values" }, { include: "#selectors" }, { include: "#unquoted-string" }] }, "less-math": { patterns: [{ match: "[-\\+\\*\\/]", name: "keyword.operator.arithmetic.less" }, { begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.group.less", patterns: [{ include: "#less-math" }] }, { include: "#numeric-values" }, { include: "#less-variables" }] }, "less-math-functions": { patterns: [{ begin: "\\b(ceil|floor|percentage|round|sqrt|abs|a?(sin|cos|tan))(?=\\()", beginCaptures: { 1: { name: "support.function.math.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#less-variables" }, { include: "#numeric-values" }] }] }, { captures: { 2: { name: "support.function.math.less" }, 3: { name: "punctuation.definition.group.begin.less" }, 4: { name: "punctuation.definition.group.end.less" } }, match: "((pi)(\\()(\\)))", name: "meta.function-call.less" }, { begin: "\\b(pow|m(od|in|ax))(?=\\()", beginCaptures: { 1: { name: "support.function.math.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#less-variables" }, { include: "#numeric-values" }, { include: "#comma-delimiter" }] }] }] }, "less-misc-functions": { patterns: [{ begin: "\\b(color)(?=\\()", beginCaptures: { 1: { name: "support.function.color.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#literal-string" }] }] }, { begin: "\\b(image-(size|width|height))(?=\\()", beginCaptures: { 1: { name: "support.function.image.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#literal-string" }, { include: "#unquoted-string" }] }] }, { begin: "\\b(convert|unit)(?=\\()", beginCaptures: { 1: { name: "support.function.convert.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#less-variables" }, { include: "#dimensions" }, { include: "#numeric-values" }, { include: "#literal-string" }, { include: "#comma-delimiter" }, { match: "((c|m)?m|in|p(t|c|x)|m?s|g?rad|deg|turn|%|r?em|ex|ch)", name: "keyword.other.unit.less" }] }] }, { begin: "\\b(data-uri)(?=\\()", beginCaptures: { 1: { name: "support.function.data-uri.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#less-variables" }, { include: "#literal-string" }, { captures: { 1: { name: "punctuation.separator.less" } }, match: "\\s*(?:(,))" }] }] }, { captures: { 2: { name: "punctuation.definition.group.begin.less" }, 3: { name: "punctuation.definition.group.end.less" } }, match: "\\b(default(\\()(\\)))\\b", name: "support.function.default.less" }, { begin: "\\b(get-unit)(?=\\()", beginCaptures: { 1: { name: "support.function.get-unit.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#dimensions" }] }] }, { begin: "\\b(svg-gradient)(?=\\()", beginCaptures: { 1: { name: "support.function.svg-gradient.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#angle-type" }, { include: "#comma-delimiter" }, { include: "#color-values" }, { include: "#percentage-type" }, { include: "#length-type" }, { match: "\\bto\\b", name: "keyword.other.less" }, { match: "\\b(top|right|bottom|left|center)\\b", name: "support.constant.property-value.less" }, { match: "\\b(at|circle|ellipse)\\b", name: "keyword.other.less" }] }] }] }, "less-mixin-guards": { patterns: [{ begin: "\\s*(and|not|or)?\\s*(?=\\()", beginCaptures: { 1: { name: "keyword.operator.logical.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", name: "meta.group.less", patterns: [{ include: "#less-variable-comparison" }, { captures: { 1: { name: "meta.group.less" }, 2: { name: "punctuation.definition.group.begin.less" }, 3: { name: "punctuation.definition.group.end.less" } }, match: "default((\\()(\\)))", name: "support.function.default.less" }, { include: "#property-values" }, { include: "#less-logical-comparisons" }, { include: "$self" }] }] }] }, "less-namespace-accessors": { patterns: [{ begin: "(?=\\s*when\\b)", end: "\\s*(?:(,)|(?=[{;]))", endCaptures: { 1: { name: "punctuation.definition.block.end.less" } }, name: "meta.conditional.guarded-namespace.less", patterns: [{ captures: { 1: { name: "keyword.control.conditional.less" }, 2: { name: "punctuation.definition.keyword.less" } }, match: "\\s*(when)(?=.*?)" }, { include: "#less-mixin-guards" }, { include: "#comma-delimiter" }, { begin: "\\s*(\\{)", beginCaptures: { 1: { name: "punctuation.section.property-list.begin.less" } }, end: "(?=\\})", name: "meta.block.less", patterns: [{ include: "#rule-list-body" }] }, { include: "#selectors" }] }, { begin: "(\\()", beginCaptures: { 1: { name: "punctuation.definition.group.begin.less" } }, end: "(\\))", endCaptures: { 1: { name: "punctuation.definition.group.end.less" }, 2: { name: "punctuation.terminator.rule.less" } }, name: "meta.group.less", patterns: [{ include: "#less-variable-assignment" }, { include: "#comma-delimiter" }, { captures: { 1: { name: "punctuation.terminator.rule.less" } }, match: "\\s*(;)|(?=[})])" }, { include: "#property-values" }, { include: "#rule-list-body" }] }] }, "less-number-units": { patterns: [{ match: "\\b((c|m)?m|in|p(t|c)|m?s|g?rad|deg|turn)\\b", name: "keyword.other.unit.less" }, { match: "\\b(r?em|ex|ch|vw|vh|vmin|vmax|cm|mm|q|in|pt|pc|px|fr|s|ms|Hz|kHz|dpi|dpcm|dppx|deg|grad|rad|turn)\\b" }] }, "less-string-functions": { patterns: [{ begin: "\\b(e(scape)?)(?=\\()\\b", beginCaptures: { 1: { name: "support.function.escape.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#less-variables" }, { include: "#comma-delimiter" }, { include: "#literal-string" }, { include: "#unquoted-string" }] }] }, { begin: "\\s*(%)(?=\\()\\s*", beginCaptures: { 1: { name: "support.function.format.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#less-variables" }, { include: "#comma-delimiter" }, { include: "#literal-string" }, { include: "#property-values" }] }] }, { begin: "\\b(replace)(?=\\()\\b", beginCaptures: { 1: { name: "support.function.replace.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#less-variables" }, { include: "#comma-delimiter" }, { include: "#literal-string" }, { include: "#property-values" }] }] }] }, "less-strings": { patterns: [{ begin: `(~)('|")`, beginCaptures: { 1: { name: "constant.character.escape.less" }, 2: { name: "punctuation.definition.string.begin.less" } }, contentName: "markup.raw.inline.less", end: `('|")|(\\n)`, endCaptures: { 1: { name: "punctuation.definition.string.end.less" }, 2: { name: "invalid.illegal.newline.less" } }, name: "string.quoted.other.less", patterns: [{ include: "#string-content" }] }] }, "less-type-functions": { patterns: [{ begin: "\\b(is(number|string|color|keyword|url|pixel|em|percentage|ruleset))(?=\\()", beginCaptures: { 1: { name: "support.function.type.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#property-values" }] }] }, { begin: "\\b(isunit)(?=\\()", beginCaptures: { 1: { name: "support.function.type.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#property-values" }, { include: "#comma-delimiter" }, { match: "(?x)\\b((?i:em|ex|ch|rem)|(?i:vw|vh|vmin|vmax)|(?i:cm|mm|q|in|pt|pc|px|fr)|(?i:deg|grad|rad|turn)|(?i:s|ms)|(?i:Hz|kHz)|(?i:dpi|dpcm|dppx))\\b", name: "keyword.other.unit.less" }] }] }, { begin: "\\b(isdefined)(?=\\()", beginCaptures: { 1: { name: "support.function.type.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#less-variables" }] }] }] }, "less-variable-assignment": { patterns: [{ begin: "(@)(-?(?:[[-\\w][^\\x{00}-\\x{7F}]]|(?:\\\\\\h{1,6}[\\s\\t\\n\\f]?|\\\\[^\\n\\f\\h]))(?:[[-\\w][^\\x{00}-\\x{7F}]]|(?:\\\\\\h{1,6}[\\s\\t\\n\\f]?|\\\\[^\\n\\f\\h]))*)", beginCaptures: { 0: { name: "variable.other.readwrite.less" }, 1: { name: "punctuation.definition.variable.less" }, 2: { name: "support.other.variable.less" } }, end: "\\s*(;|(\\.{3})|(?=\\)))", endCaptures: { 1: { name: "punctuation.terminator.rule.less" }, 2: { name: "keyword.operator.spread.less" } }, name: "meta.property-value.less", patterns: [{ captures: { 1: { name: "punctuation.separator.key-value.less" }, 4: { name: "meta.property-value.less" } }, match: "(((\\+_?)?):)([\\s\\t]*)" }, { include: "#property-values" }, { include: "#comma-delimiter" }, { include: "#property-list" }, { include: "#unquoted-string" }] }] }, "less-variable-comparison": { patterns: [{ begin: "(@{1,2})([-]?([_a-z]|[^\\x{00}-\\x{7F}]|(?:\\\\\\h{1,6}[\\s\\t\\n\\f]?|\\\\[^\\n\\f\\h]))(?:[[-\\w][^\\x{00}-\\x{7F}]]|(?:\\\\\\h{1,6}[\\s\\t\\n\\f]?|\\\\[^\\n\\f\\h]))*)", beginCaptures: { 0: { name: "variable.other.readwrite.less" }, 1: { name: "punctuation.definition.variable.less" }, 2: { name: "support.other.variable.less" } }, end: "\\s*(?=\\))", endCaptures: { 1: { name: "punctuation.terminator.rule.less" } }, patterns: [{ captures: { 1: { name: "keyword.operator.logical.less" } }, match: "\\s*(=|((<|>)=?))\\s*" }, { match: "\\btrue\\b", name: "constant.language.less" }, { include: "#property-values" }, { include: "#selectors" }, { include: "#unquoted-string" }, { match: ",", name: "punctuation.separator.less" }] }] }, "less-variable-interpolation": { captures: { 1: { name: "punctuation.definition.variable.less" }, 2: { name: "punctuation.definition.expression.less" }, 3: { name: "support.other.variable.less" }, 4: { name: "punctuation.definition.expression.less" } }, match: "(@)(\\{)([-\\w]+)(\\})", name: "variable.other.readwrite.less" }, "less-variables": { captures: { 1: { name: "punctuation.definition.variable.less" }, 2: { name: "support.other.variable.less" } }, match: "\\s*(@@?)([-\\w]+)", name: "variable.other.readwrite.less" }, "literal-string": { patterns: [{ begin: "'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.less" } }, end: "(')|(\\n)", endCaptures: { 1: { name: "punctuation.definition.string.end.less" }, 2: { name: "invalid.illegal.newline.less" } }, name: "string.quoted.single.less", patterns: [{ include: "#string-content" }] }, { begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.less" } }, end: '(")|(\\n)', endCaptures: { 1: { name: "punctuation.definition.string.end.less" }, 2: { name: "invalid.illegal.newline.less" } }, name: "string.quoted.double.less", patterns: [{ include: "#string-content" }] }, { include: "#less-strings" }] }, "local-function": { begin: "\\b(local)(?=\\()", beginCaptures: { 0: { name: "support.function.font-face.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#unquoted-string" }] }] }, "media-query": { begin: "\\s*(only|not)?\\s*(all|aural|braille|embossed|handheld|print|projection|screen|tty|tv)?", beginCaptures: { 1: { name: "keyword.operator.logic.media.less" }, 2: { name: "support.constant.media.less" } }, end: "\\s*(?:(,)|(?=[{;]))", endCaptures: { 1: { name: "punctuation.definition.arbitrary-repetition.less" } }, patterns: [{ include: "#less-variables" }, { include: "#custom-property-name" }, { begin: "\\s*(and)?\\s*(\\()\\s*", beginCaptures: { 1: { name: "keyword.operator.logic.media.less" }, 2: { name: "punctuation.definition.group.begin.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.group.less", patterns: [{ begin: "((-webkit-|-o-)?((min|max)-)?(-moz-)?(((device-)?(height|width|aspect-ratio|pixel-ratio))|(color(-index)?)|monochrome|resolution))|grid|scan|orientation\\s*(?=[:)])", beginCaptures: { 0: { name: "support.type.property-name.media.less" }, 2: { name: "support.type.vendor-prefix.less" }, 5: { name: "support.type.vendor-prefix.less" } }, end: "(((\\+_?)?):)|(?=\\))", endCaptures: { 1: { name: "punctuation.separator.key-value.less" } } }, { match: "\\b(portrait|landscape|progressive|interlace)", name: "support.constant.property-value.less" }, { captures: { 1: { name: "constant.numeric.less" }, 2: { name: "keyword.operator.arithmetic.less" }, 3: { name: "constant.numeric.less" } }, match: "\\s*(\\d+)(/)(\\d+)" }, { include: "#less-math" }] }] }, "media-query-list": { begin: "\\s*(?=[^{;])", end: "\\s*(?=[{;])", patterns: [{ include: "#media-query" }] }, "minmax-function": { begin: "\\b(minmax)(?=\\()", beginCaptures: { 1: { name: "support.function.grid.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#less-variables" }, { include: "#var-function" }, { include: "#length-type" }, { include: "#comma-delimiter" }, { match: "\\b(max-content|min-content)\\b", name: "support.constant.property-value.less" }] }] }, "number-type": { match: "[-+]?(?:(?:\\d*\\.\\d+(?:[eE](?:[-+]?\\d+))*)|(?:[-+]?\\d+))", name: "constant.numeric.less" }, "numeric-values": { patterns: [{ include: "#dimensions" }, { include: "#percentage-type" }, { include: "#number-type" }] }, "percentage-type": { captures: { 1: { name: "keyword.other.unit.less" } }, match: "[-+]?(?:(?:\\d*\\.\\d+(?:[eE](?:[-+]?\\d+))*)|(?:[-+]?\\d+))(%)", name: "constant.numeric.less" }, "property-list": { patterns: [{ begin: "(?=(?=[^;]*)\\{)", end: "\\}", endCaptures: { 0: { name: "punctuation.definition.block.end.less" } }, patterns: [{ include: "#rule-list" }] }] }, "property-value-constants": { patterns: [{ comment: "align-content, align-items, align-self, justify-content, justify-items, justify-self", match: `(?x)\\b(?:
flex-start|flex-end|start|end|space-between|space-around|space-evenly
|stretch|baseline|safe|unsafe|legacy|anchor-center|first|last|self-start|self-end
)\\b`, name: "support.constant.property-value.less" }, { comment: "alignment-baseline", match: `(?x)\\b(?:
text-before-edge|before-edge|middle|central|text-after-edge
|after-edge|ideographic|alphabetic|hanging|mathematical|top|center|bottom
)\\b`, name: "support.constant.property-value.less" }, { comment: "all/global values", match: "\\b(?:initial|inherit|unset|revert-layer|revert)\\b", name: "support.constant.property-value.less" }, { include: "#cubic-bezier-function" }, { include: "#steps-function" }, { comment: "animation-composition", match: "\\b(?:replace|add|accumulate)\\b", name: "support.constant.property-value.less" }, { comment: "animation-direction", match: "\\b(?:normal|alternate-reverse|alternate|reverse)\\b", name: "support.constant.property-value.less" }, { comment: "animation-fill-mode", match: "\\b(?:forwards|backwards|both)\\b", name: "support.constant.property-value.less" }, { comment: "animation-iteration-count", match: "\\b(?:infinite)\\b", name: "support.constant.property-value.less" }, { comment: "animation-play-state", match: "\\b(?:running|paused)\\b", name: "support.constant.property-value.less" }, { comment: "animation-range, animation-range-start, animation-range-end", match: "\\b(?:entry-crossing|exit-crossing|entry|exit)\\b", name: "support.constant.property-value.less" }, { comment: "animation-timing-function", match: "\\b(?:linear|ease-in-out|ease-in|ease-out|ease|step-start|step-end)\\b", name: "support.constant.property-value.less" }, { match: `(?x)\\b(
absolute|active|add
|all(-(petite|small)-caps|-scroll)?
|alpha(betic)?
|alternate(-reverse)?
|always|annotation|antialiased|at
|auto(hiding-scrollbar)?
|avoid(-column|-page|-region)?
|background(-color|-image|-position|-size)?
|backwards|balance|baseline|below|bevel|bicubic|bidi-override|blink
|block(-(line-height|start|end))?
|blur
|bold(er)?
|border-top-left-radius
|border-top-right-radius
|border-bottom-left-radius
|border-bottom-right-radius
|border-end-end-radius
|border-end-start-radius
|border-start-end-radius
|border-start-start-radius
|border-block-start-color
|border-block-start-style
|border-block-start-width
|border-block-start
|border-block-end-color
|border-block-end-style
|border-block-end-width
|border-block-end
|border-block-color
|border-block-style
|border-block-width
|border-block
|border-inline-start-color
|border-inline-start-style
|border-inline-start-width
|border-inline-start
|border-inline-end-color
|border-inline-end-style
|border-inline-end-width
|border-inline-end
|border-inline-color
|border-inline-style
|border-inline-width
|border-inline
|border-top-color
|border-top-style
|border-top-width
|border-top
|border-right-color
|border-right-style
|border-right-width
|border-right
|border-bottom-color
|border-bottom-style
|border-bottom-width
|border-bottom
|border-left-color
|border-left-style
|border-left-width
|border-left
|border-image-outset
|border-image-repeat
|border-image-slice
|border-image-source
|border-image-width
|border-image
|border-color
|border-style
|border-width
|border-radius
|border-collapse
|border-spacing
|border
|both
|bottom
|box(-shadow)?
|break-(all|word|spaces)
|brightness
|butt(on)?
|capitalize
|cent(er|ral)
|char(acter-variant)?
|cjk-ideographic|clip|clone|close-quote
|closest-(corner|side)
|col-resize|collapse
|color(-stop|-burn|-dodge)?
|column((-count|-gap|-reverse|-rule(-color|-width)?|-width)|s)?
|common-ligatures|condensed|consider-shifts|contain
|content(-box|s)?
|contextual|contrast|cover
|crisp(-e|E)dges
|crop
|cross(hair)?
|da(rken|shed)
|default|dense|diagonal-fractions|difference|disabled
|discard|discretionary-ligatures|disregard-shifts
|distribute(-all-lines|-letter|-space)?
|dotted|double|drop-shadow
|(nwse|nesw|ns|ew|sw|se|nw|ne|w|s|e|n)-resize
|ease(-in-out|-in|-out)?
|element|ellipsis|embed|end|EndColorStr|evenodd
|exclu(de(-ruby)?|sion)
|expanded
|(extra|semi|ultra)-(condensed|expanded)
|farthest-(corner|side)?
|fill(-box|-opacity)?
|filter
|fit-content
|fixed
|flat
|flex((-basis|-end|-grow|-shrink|-start)|box)?
|flip|flood-color
|font(-size(-adjust)?|-stretch|-weight)?
|forwards
|from(-image)?
|full-width|gap|geometricPrecision|glyphs|gradient|grayscale
|grid((-column|-row)?-gap|-height)?
|groove|hand|hanging|hard-light|height|help|hidden|hide
|historical-(forms|ligatures)
|horizontal(-tb)?
|hue
|ideograph(-alpha|-numeric|-parenthesis|-space|ic)
|inactive|include-ruby|infinite|inherit|initial
|inline(-(block|box|flex(box)?|line-height|table|start|end))?
|inset|inside
|inter(-ideograph|-word|sect)
|invert|isolat(e|ion)|italic
|jis(04|78|83|90)
|justify(-all)?
|keep-all
|large[r]?
|last|layout|left|letter-spacing
|light(e[nr]|ing-color)
|line(-edge|-height|-through)?
|linear(-gradient|RGB)?
|lining-nums|list-item|local|loose|lowercase|lr-tb|ltr
|lumin(osity|ance)|manual
|manipulation
|margin(-bottom|-box|-left|-right|-top)?
|marker(-offset|s)?
|match-parent
|mathematical
|max-(content|height|lines|size|width)
|medium|middle
|min-(content|height|width)
|miter|mixed|move|multiply|newspaper
|no-(change|clip|(close|open)-quote|(common|discretionary|historical)-ligatures|contextual|drop|repeat)
|none|nonzero|normal|not-allowed|nowrap|oblique
|offset(-after|-before|-end|-start)?
|oldstyle-nums|opacity|open-quote
|optimize(Legibility|Precision|Quality|Speed)
|order|ordinal|ornaments
|outline(-color|-offset|-width)?
|outset|outside|over(line|-edge|lay)
|padding(-bottom|-box|-left|-right|-top|-box)?
|page|paint(ed)?|paused
|pan-(x|left|right|y|up|down)
|perspective-origin
|petite-caps|pixelated|pointer
|pinch-zoom
|pretty
|pre(-line|-wrap)?
|preserve(-3d|-breaks|-spaces)?
|progid:DXImageTransform.Microsoft.(Alpha|Blur|dropshadow|gradient|Shadow)
|progress
|proportional-(nums|width)
|radial-gradient|recto|region|relative
|repeat(-[xy])?
|repeating-(linear|radial)-gradient
|replaced|reset-size|reverse|revert(-layer)?|ridge|right
|round
|row(-gap|-resize|-reverse)?
|rtl|ruby|running|saturat(e|ion)|screen
|scroll(-position|bar)?
|separate|sepia
|scale-down
|shape-(image-threshold|margin|outside)
|show
|sideways(-lr|-rl)?
|simplified
|size
|slashed-zero|slice
|small(-caps|er)?
|smooth|snap|solid|soft-light
|space(-around|-between)?
|span|sRGB
|stable
|stack(ed-fractions)?
|start(ColorStr)?
|static
|step-(end|start)
|sticky
|stop-(color|opacity)
|stretch|strict
|stroke(-box|-dash(array|offset)|-miterlimit|-opacity|-width)?
|style(set)?
|stylistic
|sub(grid|pixel-antialiased|tract)?
|super|swash
|table(-caption|-cell|(-column|-footer|-header|-row)-group|-column|-row)?
|tabular-nums|tb-rl
|text((-bottom|-(decoration|emphasis)-color|-indent|-(over|under)-edge|-shadow|-size(-adjust)?|-top)|field)?
|thi(ck|n)
|titling-ca(ps|se)
|to[p]?
|touch|traditional
|transform(-origin)?
|under(-edge|line)?
|unicase|unset|uppercase|upright
|use-(glyph-orientation|script)
|verso
|vertical(-align|-ideographic|-lr|-rl|-text)?
|view-box
|viewport-fill(-opacity)?
|visibility
|visible(Fill|Painted|Stroke)?
|wait|wavy|weight|whitespace|(device-)?width|word-spacing
|wrap(-reverse)?
|x{1,2}-(large|small)
|z-index|zero
|zoom(-in|-out)?
|((?xi:arabic-indic|armenian|bengali|cambodian|circle|cjk-decimal|cjk-earthly-branch|cjk-heavenly-stem|decimal-leading-zero|decimal|devanagari|disclosure-closed|disclosure-open|disc|ethiopic-numeric|georgian|gujarati|gurmukhi|hebrew|hiragana-iroha|hiragana|japanese-formal|japanese-informal|kannada|katakana-iroha|katakana|khmer|korean-hangul-formal|korean-hanja-formal|korean-hanja-informal|lao|lower-alpha|lower-armenian|lower-greek|lower-latin|lower-roman|malayalam|mongolian|myanmar|oriya|persian|simp-chinese-formal|simp-chinese-informal|square|tamil|telugu|thai|tibetan|trad-chinese-formal|trad-chinese-informal|upper-alpha|upper-armenian|upper-latin|upper-roman)))\\b`, name: "support.constant.property-value.less" }, { match: "\\b(?i:sans-serif|serif|monospace|fantasy|cursive)\\b(?=\\s*[;,\\n}])", name: "support.constant.font-name.less" }] }, "property-values": { patterns: [{ include: "#comment-block" }, { include: "#vendor-prefix" }, { include: "#builtin-functions" }, { include: "#color-functions" }, { include: "#less-functions" }, { include: "#less-variables" }, { include: "#unicode-range" }, { include: "#numeric-values" }, { include: "#color-values" }, { include: "#property-value-constants" }, { include: "#less-math" }, { include: "#literal-string" }, { include: "#comma-delimiter" }, { include: "#important" }] }, "pseudo-classes": { patterns: [{ begin: "(:)(dir|lang)(?=\\()", captures: { 1: { name: "punctuation.definition.entity.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "entity.other.attribute-name.pseudo-class.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#unquoted-string" }] }] }, { begin: "(:)(not)(?=\\()", captures: { 1: { name: "punctuation.definition.entity.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "entity.other.attribute-name.pseudo-class.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#selectors" }] }] }, { begin: "(:)(nth(-last)?-(child|of-type))(?=\\()", captures: { 1: { name: "punctuation.definition.entity.less" }, 2: { name: "entity.other.attribute-name.pseudo-class.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", name: "meta.group.less", patterns: [{ match: "\\b(even|odd)\\b", name: "keyword.other.pseudo-class.less" }, { captures: { 1: { name: "keyword.other.unit.less" } }, match: "(?:[-+]?(?:\\d+)?(n)(\\s*[-+]\\s*\\d+)?|[-+]?\\s*\\d+)", name: "constant.numeric.less" }, { include: "#less-math" }, { include: "#less-strings" }, { include: "#less-variable-interpolation" }] }] }, { begin: "(:)(host-context)(?=\\()", captures: { 1: { name: "punctuation.definition.entity.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "entity.other.attribute-name.pseudo-class.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#selectors" }] }] }, { captures: { 1: { name: "punctuation.definition.entity.less" }, 2: { name: "entity.other.attribute-name.pseudo-class.less" } }, match: "(:)(active|any|checked|default|disabled|empty|enabled|first(-(child|of-type))?|fullscreen|focus|host|hover|indeterminate|in-range|invalid|last-(child|of-type)|left|link|only-(child|of-type)|optional|out-of-range|read-(only|write)|required|right|root|scope|target|valid|visited)", name: "meta.function-call.less" }] }, "pseudo-elements": { patterns: [{ begin: "(::)(slotted)(?=\\()", captures: { 1: { name: "punctuation.definition.entity.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "entity.other.attribute-name.pseudo-class.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#selectors" }] }] }, { captures: { 1: { name: "punctuation.definition.entity.less" }, 2: { name: "punctuation.definition.entity.less" }, 3: { name: "support.type.vendor-prefix.less" } }, match: "(?:(:{1,2})(?:before|after|first-line|first-letter)|(::)(-(?:moz|ms|webkit)-)?(?:(-?(?:[[-\\w][^\\x{00}-\\x{7F}]]|(?:\\\\\\h{1,6}[\\s\\t\\n\\f]?|\\\\[^\\n\\f\\h]))(?:[[-\\w][^\\x{00}-\\x{7F}]]|(?:\\\\\\h{1,6}[\\s\\t\\n\\f]?|\\\\[^\\n\\f\\h]))*)))\\b", name: "entity.other.attribute-name.pseudo-element.less" }] }, "qualified-name": { captures: { 1: { name: "entity.name.constant.less" }, 2: { name: "entity.name.namespace.wildcard.less" }, 3: { name: "punctuation.separator.namespace.less" } }, match: "(?:(-?(?:[[-\\w][^\\x{00}-\\x{7F}]]|(?:\\\\\\h{1,6}[\\s\\t\\n\\f]?|\\\\[^\\n\\f\\h]))(?:[[_a-zA-Z][^\\x{00}-\\x{7F}]]|(?:\\\\\\h{1,6}[\\s\\t\\n\\f]?|\\\\[^\\n\\f\\h]))*)|(\\*))?([|])(?!=)" }, "regexp-function": { begin: "\\b(regexp)(?=\\()", end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "support.function.regexp.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", name: "meta.function-call.less", patterns: [{ include: "#literal-string" }] }] }, "relative-color": { patterns: [{ match: "from", name: "keyword.other.less" }, { match: "\\b[hslawbch]\\b", name: "keyword.other.less" }] }, "resolution-type": { captures: { 1: { name: "keyword.other.unit.less" } }, match: "(?i:[-+]?(?:(?:\\d*\\.\\d+(?:[eE](?:[-+]?\\d+))*)|(?:[-+]?\\d+))(dpi|dpcm|dppx))\\b", name: "constant.numeric.less" }, "rule-list": { patterns: [{ begin: "\\{", beginCaptures: { 0: { name: "punctuation.definition.block.begin.less" } }, end: "(?=\\s*\\})", name: "meta.property-list.less", patterns: [{ captures: { 1: { name: "punctuation.terminator.rule.less" } }, match: "\\s*(;)|(?=[})])" }, { include: "#rule-list-body" }, { include: "#less-extend" }] }] }, "rule-list-body": { patterns: [{ include: "#comment-block" }, { include: "#comment-line" }, { include: "#at-rules" }, { include: "#less-variable-assignment" }, { include: "#less-variable-interpolation" }, { begin: "(?=[-a-z])", end: "$|(?![-a-z])", patterns: [{ include: "#vendor-prefix" }, { include: "#custom-property-name" }, { include: "#filter-function" }, { begin: "\\b(border((-(bottom|top)-(left|right))|((-(start|end)){2}))?-radius|(border-image(?!-)))\\b", beginCaptures: { 0: { name: "support.type.property-name.less" } }, comment: "border-radius and border-image properties utilize a slash as a separator", end: "\\s*(;)|(?=[})])", endCaptures: { 1: { name: "punctuation.terminator.rule.less" } }, patterns: [{ begin: "(((\\+_?)?):)(?=[\\s\\t]*)", beginCaptures: { 1: { name: "punctuation.separator.key-value.less" } }, contentName: "meta.property-value.less", end: "(?=\\s*(;)|(?=[})]))", patterns: [{ include: "#value-separator" }, { include: "#property-values" }] }] }, { captures: { 1: { name: "keyword.other.custom-property.prefix.less" }, 2: { name: "support.type.custom-property.name.less" } }, match: "\\b(var-)(-?(?:[[-\\w][^\\x{00}-\\x{9f}]]|(?:\\\\\\h{1,6}[\\s\\t\\n\\f]?|\\\\[^\\n\\f\\h]))(?:[[_a-zA-Z][^\\x{00}-\\x{9f}]]|(?:\\\\\\h{1,6}[\\s\\t\\n\\f]?|\\\\[^\\n\\f\\h]))*)(?=\\s)", name: "invalid.deprecated.custom-property.less" }, { begin: "\\bfont(-family)?(?!-)\\b", beginCaptures: { 0: { name: "support.type.property-name.less" } }, end: "\\s*(;)|(?=[})])", endCaptures: { 1: { name: "punctuation.terminator.rule.less" } }, name: "meta.property-name.less", patterns: [{ captures: { 1: { name: "punctuation.separator.key-value.less" }, 4: { name: "meta.property-value.less" } }, match: "(((\\+_?)?):)([\\s\\t]*)" }, { include: "#property-values" }, { match: "-?(?:[[_a-zA-Z][^\\x{00}-\\x{9f}]]|(?:\\\\\\h{1,6}[\\s\\t\\n\\f]?|\\\\[^\\n\\f\\h]))(?:[[-\\w][^\\x{00}-\\x{9f}]]|(?:\\\\\\h{1,6}[\\s\\t\\n\\f]?|\\\\[^\\n\\f\\h]))*(\\s+-?(?:[[_a-zA-Z][^\\x{00}-\\x{9f}]]|(?:\\\\\\h{1,6}[\\s\\t\\n\\f]?|\\\\[^\\n\\f\\h]))(?:[[-\\w][^\\x{00}-\\x{9f}]]|(?:\\\\\\h{1,6}[\\s\\t\\n\\f]?|\\\\[^\\n\\f\\h]))*)*", name: "string.unquoted.less" }, { match: ",", name: "punctuation.separator.less" }] }, { begin: "\\banimation-timeline\\b", beginCaptures: { 0: { name: "support.type.property-name.less" } }, end: "\\s*(;)|(?=[})])", endCaptures: { 1: { name: "punctuation.terminator.rule.less" } }, patterns: [{ begin: "(((\\+_?)?):)(?=[\\s\\t]*)", beginCaptures: { 1: { name: "punctuation.separator.key-value.less" } }, contentName: "meta.property-value.less", end: "(?=\\s*(;)|(?=[})]))", patterns: [{ include: "#comment-block" }, { include: "#custom-property-name" }, { include: "#scroll-function" }, { include: "#view-function" }, { include: "#property-values" }, { include: "#less-variables" }, { include: "#arbitrary-repetition" }, { include: "#important" }] }] }, { begin: "\\banimation(?:-name)?(?=(?:\\+_?)?:)\\b", beginCaptures: { 0: { name: "support.type.property-name.less" } }, end: "\\s*(;)|(?=[})])", endCaptures: { 1: { name: "punctuation.terminator.rule.less" } }, patterns: [{ begin: "(((\\+_?)?):)(?=[\\s\\t]*)", beginCaptures: { 1: { name: "punctuation.separator.key-value.less" } }, contentName: "meta.property-value.less", end: "(?=\\s*(;)|(?=[})]))", patterns: [{ include: "#comment-block" }, { include: "#builtin-functions" }, { include: "#less-functions" }, { include: "#less-variables" }, { include: "#numeric-values" }, { include: "#property-value-constants" }, { match: "-?(?:[_a-zA-Z]|[^\\x{00}-\\x{7F}]|(?:(:?\\\\[0-9a-f]{1,6}(\\r\\n|[\\s\\t\\r\\n\\f])?)|\\\\[^\\r\\n\\f0-9a-f]))(?:[-_a-zA-Z0-9]|[^\\x{00}-\\x{7F}]|(?:(:?\\\\[0-9a-f]{1,6}(\\r\\n|[\\t\\r\\n\\f])?)|\\\\[^\\r\\n\\f0-9a-f]))*", name: "variable.other.constant.animation-name.less string.unquoted.less" }, { include: "#less-math" }, { include: "#arbitrary-repetition" }, { include: "#important" }] }] }, { begin: "\\b(transition(-(property|duration|delay|timing-function))?)\\b", beginCaptures: { 1: { name: "support.type.property-name.less" } }, end: "\\s*(;)|(?=[})])", endCaptures: { 1: { name: "punctuation.terminator.rule.less" } }, patterns: [{ begin: "(((\\+_?)?):)(?=[\\s\\t]*)", beginCaptures: { 1: { name: "punctuation.separator.key-value.less" } }, contentName: "meta.property-value.less", end: "(?=\\s*(;)|(?=[})]))", patterns: [{ include: "#time-type" }, { include: "#property-values" }, { include: "#cubic-bezier-function" }, { include: "#steps-function" }, { include: "#arbitrary-repetition" }] }] }, { begin: "\\b(?:backdrop-)?filter\\b", beginCaptures: { 0: { name: "support.type.property-name.less" } }, end: "\\s*(;)|(?=[})])", endCaptures: { 1: { name: "punctuation.terminator.rule.less" } }, name: "meta.property-name.less", patterns: [{ captures: { 1: { name: "punctuation.separator.key-value.less" }, 4: { name: "meta.property-value.less" } }, match: "(((\\+_?)?):)([\\s\\t]*)" }, { match: "\\b(inherit|initial|unset|none)\\b", name: "meta.property-value.less" }, { include: "#filter-functions" }] }, { begin: "\\bwill-change\\b", beginCaptures: { 0: { name: "support.type.property-name.less" } }, end: "\\s*(;)|(?=[})])", endCaptures: { 1: { name: "punctuation.terminator.rule.less" } }, name: "meta.property-name.less", patterns: [{ captures: { 1: { name: "punctuation.separator.key-value.less" }, 4: { name: "meta.property-value.less" } }, match: "(((\\+_?)?):)([\\s\\t]*)" }, { match: "unset|initial|inherit|will-change|auto|scroll-position|contents", name: "invalid.illegal.property-value.less" }, { match: "-?(?:[[-\\w][^\\x{00}-\\x{9f}]]|(?:\\\\\\h{1,6}[\\s\\t\\n\\f]?|\\\\[^\\n\\f\\h]))(?:[[_a-zA-Z][^\\x{00}-\\x{9f}]]|(?:\\\\\\h{1,6}[\\s\\t\\n\\f]?|\\\\[^\\n\\f\\h]))*", name: "support.constant.property-value.less" }, { include: "#arbitrary-repetition" }] }, { begin: "\\bcounter-(increment|(re)?set)\\b", beginCaptures: { 0: { name: "support.type.property-name.less" } }, end: "\\s*(;)|(?=[})])", endCaptures: { 1: { name: "punctuation.terminator.rule.less" } }, name: "meta.property-name.less", patterns: [{ captures: { 1: { name: "punctuation.separator.key-value.less" }, 4: { name: "meta.property-value.less" } }, match: "(((\\+_?)?):)([\\s\\t]*)" }, { match: "-?(?:[[-\\w][^\\x{00}-\\x{9f}]]|(?:\\\\\\h{1,6}[\\s\\t\\n\\f]?|\\\\[^\\n\\f\\h]))(?:[[_a-zA-Z][^\\x{00}-\\x{9f}]]|(?:\\\\\\h{1,6}[\\s\\t\\n\\f]?|\\\\[^\\n\\f\\h]))*", name: "entity.name.constant.counter-name.less" }, { include: "#integer-type" }, { match: "unset|initial|inherit|auto", name: "invalid.illegal.property-value.less" }] }, { match: "(?x)\\b( accent-height | align-content | align-items | align-self | alignment-baseline | all | animation-timing-function | animation-range-start | animation-range-end | animation-range | animation-play-state | animation-name | animation-iteration-count | animation-fill-mode | animation-duration | animation-direction | animation-delay | animation-composition | animation | appearance | ascent | azimuth | backface-visibility | background-size | background-repeat-y | background-repeat-x | background-repeat | background-position-y | background-position-x | background-position | background-origin | background-image | background-color | background-clip | background-blend-mode | background-attachment | background | baseline-shift | begin | bias | blend-mode | border-top-left-radius | border-top-right-radius | border-bottom-left-radius | border-bottom-right-radius | border-end-end-radius | border-end-start-radius | border-start-end-radius | border-start-start-radius | border-block-start-color | border-block-start-style | border-block-start-width | border-block-start | border-block-end-color | border-block-end-style | border-block-end-width | border-block-end | border-block-color | border-block-style | border-block-width | border-block | border-inline-start-color | border-inline-start-style | border-inline-start-width | border-inline-start | border-inline-end-color | border-inline-end-style | border-inline-end-width | border-inline-end | border-inline-color | border-inline-style | border-inline-width | border-inline | border-top-color | border-top-style | border-top-width | border-top | border-right-color | border-right-style | border-right-width | border-right | border-bottom-color | border-bottom-style | border-bottom-width | border-bottom | border-left-color | border-left-style | border-left-width | border-left | border-image-outset | border-image-repeat | border-image-slice | border-image-source | border-image-width | border-image | border-color | border-style | border-width | border-radius | border-collapse | border-spacing | border | bottom | box-(align|decoration-break|direction|flex|ordinal-group|orient|pack|shadow|sizing) | break-(after|before|inside) | caption-side | clear | clip-path | clip-rule | clip | color(-(interpolation(-filters)?|profile|rendering))? | columns | column-(break-before|count|fill|gap|(rule(-(color|style|width))?)|span|width) | contain(-intrinsic-((((block|inline)-)?size)|height|width))? | content | counter-(increment|reset) | cursor | (c|d|f)(x|y) | direction | display | divisor | dominant-baseline | dur | elevation | empty-cells | enable-background | end | fallback | fill(-(opacity|rule))? | filter | flex(-(align|basis|direction|flow|grow|item-align|line-pack|negative|order|pack|positive|preferred-size|shrink|wrap))? | float | flood-(color|opacity) | font-display | font-family | font-feature-settings | font-kerning | font-language-override | font-size(-adjust)? | font-smoothing | font-stretch | font-style | font-synthesis | font-variant(-(alternates|caps|east-asian|ligatures|numeric|position))? | font-weight | font | fr | ((column|row)-)?gap | glyph-orientation-(horizontal|vertical) | grid-(area|gap) | grid-auto-(columns|flow|rows) | grid-(column|row)(-(end|gap|start))? | grid-template(-(areas|columns|rows))? | height | hyphens | image-(orientation|rendering|resolution) | inset(-(block|inline))?(-(start|end))? | isolation | justify-content | justify-items | justify-self | kerning | left | letter-spacing | lighting-color | line-(box-contain|break|clamp|height) | list-style(-(image|position|type))? | (margin|padding)(-(bottom|left|right|top)|(-(block|inline)?(-(end|start))?))? | marker(-(end|mid|start))? | mask(-(clip||composite|image|origin|position|repeat|size|type))? | (max|min)-(height|width) | mix-blend-mode | nbsp-mode | negative | object-(fit|position) | opacity | operator | order | orphans | outline(-(color|offset|style|width))? | overflow(-((inline|block)|scrolling|wrap|x|y))? | overscroll-behavior(-block|-(inline|x|y))? | pad(ding(-(bottom|left|right|top))?)? | page(-break-(after|before|inside))? | paint-order | pause(-(after|before))? | perspective(-origin(-(x|y))?)? | pitch(-range)? | place-content | place-self | pointer-events | position | prefix | quotes | range | resize | right | rotate | scale | scroll-behavior | shape-(image-threshold|margin|outside|rendering) | size | speak(-as)? | src | stop-(color|opacity) | stroke(-(dash(array|offset)|line(cap|join)|miterlimit|opacity|width))? | suffix | symbols | system | tab-size | table-layout | tap-highlight-color | text-align(-last)? | text-decoration(-(color|line|style))? | text-emphasis(-(color|position|style))? | text-(anchor|fill-color|height|indent|justify|orientation|overflow|rendering|size-adjust|shadow|transform|underline-position|wrap) | top | touch-action | transform(-origin(-(x|y))?) | transform(-style)? | transition(-(delay|duration|property|timing-function))? | translate | unicode-(bidi|range) | user-(drag|select) | vertical-align | visibility | white-space(-collapse)? | widows | width | will-change | word-(break|spacing|wrap) | writing-mode | z-index | zoom )\\b", name: "support.type.property-name.less" }, { match: "(?x)\\b(((contain-intrinsic|max|min)-)?(block|inline)?-size)\\b", name: "support.type.property-name.less" }, { include: "$self" }] }, { begin: "\\b((?:(?:\\+_?)?):)([\\s\\t]*)", beginCaptures: { 1: { name: "punctuation.separator.key-value.less" }, 2: { name: "meta.property-value.less" } }, captures: { 1: { name: "punctuation.separator.key-value.less" }, 4: { name: "meta.property-value.less" } }, contentName: "meta.property-value.less", end: "\\s*(;)|(?=[})])", endCaptures: { 1: { name: "punctuation.terminator.rule.less" } }, patterns: [{ include: "#property-values" }] }, { include: "$self" }] }, "scroll-function": { begin: "\\b(scroll)(\\()", beginCaptures: { 1: { name: "support.function.scroll.less" }, 2: { name: "punctuation.definition.group.begin.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ match: "root|nearest|self", name: "support.constant.scroller.less" }, { match: "block|inline|x|y", name: "support.constant.axis.less" }, { include: "#less-variables" }, { include: "#var-function" }] }, selector: { patterns: [{ begin: "(?=[>~+/\\.*#a-zA-Z\\[&]|(\\:{1,2}[^\\s])|@\\{)", contentName: "meta.selector.less", end: "(?=@(?!\\{)|[{;])", patterns: [{ include: "#comment-line" }, { include: "#selectors" }, { include: "#less-namespace-accessors" }, { include: "#less-variable-interpolation" }, { include: "#important" }] }] }, selectors: { patterns: [{ match: "\\b([a-z](?:(?:[-_a-z0-9\\x{00B7}]|\\\\\\.|[[\\x{00C0}-\\x{00D6}][\\x{00D8}-\\x{00F6}][\\x{00F8}-\\x{02FF}][\\x{0300}-\\x{037D}][\\x{037F}-\\x{1FFF}][\\x{200C}-\\x{200D}][\\x{203F}-\\x{2040}][\\x{2070}-\\x{218F}][\\x{2C00}-\\x{2FEF}][\\x{3001}-\\x{D7FF}][\\x{F900}-\\x{FDCF}][\\x{FDF0}-\\x{FFFD}][\\x{10000}-\\x{EFFFF}]]))*-(?:(?:[-_a-z0-9\\x{00B7}]|\\\\\\.|[[\\x{00C0}-\\x{00D6}][\\x{00D8}-\\x{00F6}][\\x{00F8}-\\x{02FF}][\\x{0300}-\\x{037D}][\\x{037F}-\\x{1FFF}][\\x{200C}-\\x{200D}][\\x{203F}-\\x{2040}][\\x{2070}-\\x{218F}][\\x{2C00}-\\x{2FEF}][\\x{3001}-\\x{D7FF}][\\x{F900}-\\x{FDCF}][\\x{FDF0}-\\x{FFFD}][\\x{10000}-\\x{EFFFF}]]))*)\\b", name: "entity.name.tag.custom.less" }, { match: "(?x)\\b( a | abbr | acronym | address | applet | area | article | aside | audio | b | base | basefont | bdi | bdo | big | blockquote | body | br | button | canvas | caption | circle | cite | clipPath | code | col | colgroup | content | data | dataList | dd | defs | del | details | dfn | dialog | dir | div | dl | dt | element | ellipse | em | embed | eventsource | fieldset | figcaption | figure | filter | footer | foreignObject | form | frame | frameset | g | glyph | glyphRef | h1 | h2 | h3 | h4 | h5 | h6 | head | header | hgroup | hr | html | i | iframe | image | img | input | ins | isindex | kbd | keygen | label | legend | li | line | linearGradient | link | main | map | mark | marker | mask | menu | meta | meter | nav | noframes | noscript | object | ol | optgroup | option | output | p | param | path | pattern | picture | polygon | polyline | pre | progress | q | radialGradient | rect | rp | ruby | rt | rtc | s | samp | script | section | select | shadow | small | source | span | stop | strike | strong | style | sub | summary | sup | svg | switch | symbol | table | tbody | td | template | textarea | textPath | tfoot | th | thead | time | title | tr | track | tref | tspan | tt | u | ul | use | var | video | wbr | xmp )\\b", name: "entity.name.tag.less" }, { begin: "(\\.)", beginCaptures: { 1: { name: "punctuation.definition.entity.less" } }, end: "(?![-\\w]|[^\\x{00}-\\x{9f}]|\\\\([A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9])|(\\@(?=\\{)))", name: "entity.other.attribute-name.class.less", patterns: [{ include: "#less-variable-interpolation" }] }, { begin: "(#)", beginCaptures: { 1: { name: "punctuation.definition.entity.less" } }, end: "(?![-\\w]|[^\\x{00}-\\x{9f}]|\\\\([A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9])|(\\@(?=\\{)))", name: "entity.other.attribute-name.id.less", patterns: [{ include: "#less-variable-interpolation" }] }, { begin: "(&)", beginCaptures: { 1: { name: "punctuation.definition.entity.less" } }, contentName: "entity.other.attribute-name.parent.less", end: "(?![-\\w]|[^\\x{00}-\\x{9f}]|\\\\([A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9])|(\\@(?=\\{)))", name: "entity.other.attribute-name.parent.less", patterns: [{ include: "#less-variable-interpolation" }, { include: "#selectors" }] }, { include: "#pseudo-elements" }, { include: "#pseudo-classes" }, { include: "#less-extend" }, { match: "(?!\\+_?:)(?:>{1,3}|[~+])(?![>~+;}])", name: "punctuation.separator.combinator.less" }, { match: "((?:>{1,3}|[~+])){2,}", name: "invalid.illegal.combinator.less" }, { match: "\\/deep\\/", name: "invalid.illegal.combinator.less" }, { begin: "\\[", captures: { 0: { name: "punctuation.definition.entity.less" } }, end: "\\]", name: "meta.attribute-selector.less", patterns: [{ include: "#less-variable-interpolation" }, { include: "#qualified-name" }, { match: "(-?(?:[[_a-zA-Z][^\\x{00}-\\x{7F}]]|(?:\\\\\\h{1,6}[\\s\\t\\n\\f]?|\\\\[^\\n\\f\\h]))(?:[[-\\w][^\\x{00}-\\x{7F}]]|(?:\\\\\\h{1,6}[\\s\\t\\n\\f]?|\\\\[^\\n\\f\\h]))*)", name: "entity.other.attribute-name.less" }, { begin: "\\s*([~*|^$]?=)\\s*", captures: { 1: { name: "keyword.operator.attribute-selector.less" } }, end: "(?=(\\s|\\]))", patterns: [{ include: "#less-variable-interpolation" }, { match: `[^\\s\\]\\['"]`, name: "string.unquoted.less" }, { include: "#literal-string" }, { captures: { 1: { name: "keyword.other.less" } }, match: "(?:\\s+([iI]))?" }, { match: "\\]", name: "punctuation.definition.entity.less" }] }] }, { include: "#arbitrary-repetition" }, { match: "\\*", name: "entity.name.tag.wildcard.less" }] }, "shape-functions": { patterns: [{ begin: "\\b(rect)(?=\\()", beginCaptures: { 0: { name: "support.function.shape.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ match: "\\bauto\\b", name: "support.constant.property-value.less" }, { include: "#length-type" }, { include: "#comma-delimiter" }] }] }, { begin: "\\b(inset)(?=\\()", beginCaptures: { 0: { name: "support.function.shape.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ match: "\\bround\\b", name: "keyword.other.less" }, { include: "#length-type" }, { include: "#percentage-type" }] }] }, { begin: "\\b(circle|ellipse)(?=\\()", beginCaptures: { 0: { name: "support.function.shape.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ match: "\\bat\\b", name: "keyword.other.less" }, { match: "\\b(top|right|bottom|left|center|closest-side|farthest-side)\\b", name: "support.constant.property-value.less" }, { include: "#length-type" }, { include: "#percentage-type" }] }] }, { begin: "\\b(polygon)(?=\\()", beginCaptures: { 0: { name: "support.function.shape.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ match: "\\b(nonzero|evenodd)\\b", name: "support.constant.property-value.less" }, { include: "#length-type" }, { include: "#percentage-type" }] }] }] }, "steps-function": { begin: "\\b(steps)(\\()", beginCaptures: { 1: { name: "support.function.timing.less" }, 2: { name: "punctuation.definition.group.begin.less" } }, contentName: "meta.group.less", end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ match: "jump-start|jump-end|jump-none|jump-both|start|end", name: "support.constant.step-position.less" }, { include: "#comma-delimiter" }, { include: "#integer-type" }, { include: "#less-variables" }, { include: "#var-function" }, { include: "#calc-function" }] }, "string-content": { patterns: [{ include: "#less-variable-interpolation" }, { match: "\\\\\\s*\\n", name: "constant.character.escape.newline.less" }, { match: "\\\\(\\h{1,6}|.)", name: "constant.character.escape.less" }] }, "symbols-function": { begin: "\\b(symbols)(?=\\()", beginCaptures: { 1: { name: "support.function.counter.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ match: "\\b(cyclic|numeric|alphabetic|symbolic|fixed)\\b", name: "support.constant.symbol-type.less" }, { include: "#comma-delimiter" }, { include: "#literal-string" }, { include: "#image-type" }] }] }, "time-type": { captures: { 1: { name: "keyword.other.unit.less" } }, match: "(?i:[-+]?(?:(?:\\d*\\.\\d+(?:[eE](?:[-+]?\\d+))*)|(?:[-+]?\\d+))(s|ms))\\b", name: "constant.numeric.less" }, "transform-functions": { patterns: [{ begin: "\\b(matrix3d|scale3d|matrix|scale)(?=\\()", beginCaptures: { 0: { name: "support.function.transform.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#comma-delimiter" }, { include: "#number-type" }, { include: "#less-variables" }, { include: "#var-function" }] }] }, { begin: "\\b(translate(3d)?)(?=\\()", beginCaptures: { 0: { name: "support.function.transform.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#comma-delimiter" }, { include: "#percentage-type" }, { include: "#length-type" }, { include: "#number-type" }, { include: "#less-variables" }, { include: "#var-function" }] }] }, { begin: "\\b(translate[XY])(?=\\()", beginCaptures: { 0: { name: "support.function.transform.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#percentage-type" }, { include: "#length-type" }, { include: "#number-type" }, { include: "#less-variables" }, { include: "#var-function" }] }] }, { begin: "\\b(rotate[XYZ]?|skew[XY])(?=\\()", beginCaptures: { 0: { name: "support.function.transform.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#angle-type" }, { include: "#less-variables" }, { include: "#calc-function" }, { include: "#var-function" }] }] }, { begin: "\\b(skew)(?=\\()", beginCaptures: { 0: { name: "support.function.transform.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#comma-delimiter" }, { include: "#angle-type" }, { include: "#less-variables" }, { include: "#calc-function" }, { include: "#var-function" }] }] }, { begin: "\\b(translateZ|perspective)(?=\\()", beginCaptures: { 0: { name: "support.function.transform.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#length-type" }, { include: "#less-variables" }, { include: "#calc-function" }, { include: "#var-function" }] }] }, { begin: "\\b(rotate3d)(?=\\()", beginCaptures: { 0: { name: "support.function.transform.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#comma-delimiter" }, { include: "#angle-type" }, { include: "#number-type" }, { include: "#less-variables" }, { include: "#calc-function" }, { include: "#var-function" }] }] }, { begin: "\\b(scale[XYZ])(?=\\()", beginCaptures: { 0: { name: "support.function.transform.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#comma-delimiter" }, { include: "#number-type" }, { include: "#less-variables" }, { include: "#calc-function" }, { include: "#var-function" }] }] }] }, "unicode-range": { captures: { 1: { name: "support.constant.unicode-range.prefix.less" }, 2: { name: "constant.codepoint-range.less" }, 3: { name: "punctuation.section.range.less" } }, match: "(?i)(u\\+)([0-9a-f?]{1,6}(?:(-)[0-9a-f]{1,6})?)", name: "support.unicode-range.less" }, "unquoted-string": { match: `[^\\s'"]`, name: "string.unquoted.less" }, "url-function": { begin: "\\b(url)(?=\\()", beginCaptures: { 1: { name: "support.function.url.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#less-variables" }, { include: "#literal-string" }, { include: "#unquoted-string" }, { include: "#var-function" }] }] }, "value-separator": { captures: { 1: { name: "punctuation.separator.less" } }, match: "\\s*(/)\\s*" }, "var-function": { begin: "\\b(var)(?=\\()", beginCaptures: { 1: { name: "support.function.var.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ include: "#comma-delimiter" }, { include: "#custom-property-name" }, { include: "#less-variables" }, { include: "#property-values" }] }] }, "vendor-prefix": { match: "-(?:webkit|moz(-osx)?|ms|o)-", name: "support.type.vendor-prefix.less" }, "view-function": { begin: "\\b(view)(?=\\()", beginCaptures: { 1: { name: "support.function.view.less" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.end.less" } }, name: "meta.function-call.less", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.begin.less" } }, end: "(?=\\))", patterns: [{ match: "block|inline|x|y|auto", name: "support.constant.property-value.less" }, { include: "#length-type" }, { include: "#percentage-type" }, { include: "#less-variables" }, { include: "#var-function" }, { include: "#calc-function" }, { include: "#arbitrary-repetition" }] }] } }, scopeName: "source.css.less" });
var l = [
  U
];
const O = Object.freeze({ displayName: "PostCSS", fileTypes: ["pcss", "postcss"], foldingStartMarker: "/\\*|^#|^\\*|^\\b|^\\.", foldingStopMarker: "\\*/|^\\s*$", name: "postcss", patterns: [{ begin: "/\\*", end: "\\*/", name: "comment.block.postcss", patterns: [{ include: "#comment-tag" }] }, { include: "#double-slash" }, { include: "#double-quoted" }, { include: "#single-quoted" }, { include: "#interpolation" }, { include: "#placeholder-selector" }, { include: "#variable" }, { include: "#variable-root-css" }, { include: "#numeric" }, { include: "#unit" }, { include: "#flag" }, { include: "#dotdotdot" }, { begin: "@include", captures: { 0: { name: "keyword.control.at-rule.css.postcss" } }, end: "(?=\\n|\\(|{|;)", name: "support.function.name.postcss.library" }, { begin: "@mixin|@function", captures: { 0: { name: "keyword.control.at-rule.css.postcss" } }, end: "$\\n?|(?=\\(|{)", name: "support.function.name.postcss.no-completions", patterns: [{ match: "[\\w-]+", name: "entity.name.function" }] }, { match: "(?<=@import)\\s[\\w/.*-]+", name: "string.quoted.double.css.postcss" }, { begin: "@", end: "$\\n?|\\s(?!(all|braille|embossed|handheld|print|projection|screen|speech|tty|tv|if|only|not)(\\s|,))|(?=;)", name: "keyword.control.at-rule.css.postcss" }, { begin: "#", end: "$\\n?|(?=\\s|,|;|\\(|\\)|\\.|\\[|{|>)", name: "entity.other.attribute-name.id.css.postcss", patterns: [{ include: "#interpolation" }, { include: "#pseudo-class" }] }, { begin: "\\.|(?<=&)(-|_)", end: "$\\n?|(?=\\s|,|;|\\(|\\)|\\[|{|>)", name: "entity.other.attribute-name.class.css.postcss", patterns: [{ include: "#interpolation" }, { include: "#pseudo-class" }] }, { begin: "\\[", end: "\\]", name: "entity.other.attribute-selector.postcss", patterns: [{ include: "#double-quoted" }, { include: "#single-quoted" }, { match: "\\^|\\$|\\*|~", name: "keyword.other.regex.postcss" }] }, { match: "(?<=\\]|\\)|not\\(|\\*|>|>\\s):[a-z:-]+|(::|:-)[a-z:-]+", name: "entity.other.attribute-name.pseudo-class.css.postcss" }, { begin: ":", end: "$\\n?|(?=;|\\s\\(|and\\(|{|}|\\),)", name: "meta.property-list.css.postcss", patterns: [{ include: "#double-slash" }, { include: "#double-quoted" }, { include: "#single-quoted" }, { include: "#interpolation" }, { include: "#variable" }, { include: "#rgb-value" }, { include: "#numeric" }, { include: "#unit" }, { include: "#flag" }, { include: "#function" }, { include: "#function-content" }, { include: "#function-content-var" }, { include: "#operator" }, { include: "#parent-selector" }, { include: "#property-value" }] }, { include: "#rgb-value" }, { include: "#function" }, { include: "#function-content" }, { begin: "(?<!\\-|\\()\\b(a|abbr|acronym|address|applet|area|article|aside|audio|b|base|big|blockquote|body|br|button|canvas|caption|cite|code|col|colgroup|datalist|dd|del|details|dfn|dialog|div|dl|dt|em|embed|eventsource|fieldset|figure|figcaption|footer|form|frame|frameset|(h[1-6])|head|header|hgroup|hr|html|i|iframe|img|input|ins|kbd|label|legend|li|link|map|mark|menu|meta|meter|nav|noframes|noscript|object|ol|optgroup|option|output|p|param|picture|pre|progress|q|samp|script|section|select|small|source|span|strike|strong|style|sub|summary|sup|table|tbody|td|textarea|tfoot|th|thead|time|title|tr|tt|ul|var|video|main|svg|rect|ruby|center|circle|ellipse|line|polyline|polygon|path|text|u|x)\\b(?!-|\\)|:\\s)|&", end: "(?=\\s|,|;|\\(|\\)|\\.|\\[|{|>|-|_)", name: "entity.name.tag.css.postcss.symbol", patterns: [{ include: "#interpolation" }, { include: "#pseudo-class" }] }, { include: "#operator" }, { match: "[a-z-]+((?=:|#{))", name: "support.type.property-name.css.postcss" }, { include: "#reserved-words" }, { include: "#property-value" }], repository: { "comment-tag": { begin: "{{", end: "}}", name: "comment.tags.postcss", patterns: [{ match: "[\\w-]+", name: "comment.tag.postcss" }] }, dotdotdot: { match: "\\.{3}", name: "variable.other" }, "double-quoted": { begin: '"', end: '"', name: "string.quoted.double.css.postcss", patterns: [{ include: "#quoted-interpolation" }] }, "double-slash": { begin: "//", end: "$", name: "comment.line.postcss", patterns: [{ include: "#comment-tag" }] }, flag: { match: "!(important|default|optional|global)", name: "keyword.other.important.css.postcss" }, function: { match: "(?<=[\\s|\\(|,|:])(?!url|format|attr)[\\w-][\\w-]*(?=\\()", name: "support.function.name.postcss" }, "function-content": { match: "(?<=url\\(|format\\(|attr\\().+?(?=\\))", name: "string.quoted.double.css.postcss" }, "function-content-var": { match: "(?<=var\\()[\\w-]+(?=\\))", name: "variable.parameter.postcss" }, interpolation: { begin: "#{", end: "}", name: "support.function.interpolation.postcss", patterns: [{ include: "#variable" }, { include: "#numeric" }, { include: "#operator" }, { include: "#unit" }, { include: "#double-quoted" }, { include: "#single-quoted" }] }, numeric: { match: "(-|\\.)?[0-9]+(\\.[0-9]+)?", name: "constant.numeric.css.postcss" }, operator: { match: "\\+|\\s-\\s|\\s-(?=\\$)|(?<=\\()-(?=\\$)|\\s-(?=\\()|\\*|/|%|=|!|<|>|~", name: "keyword.operator.postcss" }, "parent-selector": { match: "&", name: "entity.name.tag.css.postcss" }, "placeholder-selector": { begin: "(?<!\\d)%(?!\\d)", end: "$\\n?|\\s|(?=;|{)", name: "entity.other.attribute-name.placeholder-selector.postcss" }, "property-value": { match: "[\\w-]+", name: "meta.property-value.css.postcss, support.constant.property-value.css.postcss" }, "pseudo-class": { match: ":[a-z:-]+", name: "entity.other.attribute-name.pseudo-class.css.postcss" }, "quoted-interpolation": { begin: "#{", end: "}", name: "support.function.interpolation.postcss", patterns: [{ include: "#variable" }, { include: "#numeric" }, { include: "#operator" }, { include: "#unit" }] }, "reserved-words": { match: "\\b(false|from|in|not|null|through|to|true)\\b", name: "support.type.property-name.css.postcss" }, "rgb-value": { match: "(#)([0-9a-fA-F]{3}|[0-9a-fA-F]{6})\\b", name: "constant.other.color.rgb-value.css.postcss" }, "single-quoted": { begin: "'", end: "'", name: "string.quoted.single.css.postcss", patterns: [{ include: "#quoted-interpolation" }] }, unit: { match: "(?<=[\\d]|})(ch|cm|deg|dpcm|dpi|dppx|em|ex|grad|Hz|in|kHz|mm|ms|pc|pt|px|rad|rem|s|turn|vh|vmax|vmin|vw|%)", name: "keyword.other.unit.css.postcss" }, variable: { match: "\\$[\\w-]+", name: "variable.parameter.postcss" }, "variable-root-css": { match: "(?<!&)--[\\w-]+", name: "variable.parameter.postcss" } }, scopeName: "source.css.postcss" });
var h = [
  O
];
const B = Object.freeze({ displayName: "TSX", name: "tsx", patterns: [{ include: "#directives" }, { include: "#statements" }, { include: "#shebang" }], repository: { "access-modifier": { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(abstract|declare|override|public|protected|private|readonly|static)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "storage.modifier.tsx" }, "after-operator-block-as-object-literal": { begin: "(?<!\\+\\+|--)(?<=[:=(,\\[?+!>]|^await|[^\\._$[:alnum:]]await|^return|[^\\._$[:alnum:]]return|^yield|[^\\._$[:alnum:]]yield|^throw|[^\\._$[:alnum:]]throw|^in|[^\\._$[:alnum:]]in|^of|[^\\._$[:alnum:]]of|^typeof|[^\\._$[:alnum:]]typeof|&&|\\|\\||\\*)\\s*(\\{)", beginCaptures: { 1: { name: "punctuation.definition.block.tsx" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.block.tsx" } }, name: "meta.objectliteral.tsx", patterns: [{ include: "#object-member" }] }, "array-binding-pattern": { begin: "(?:(\\.\\.\\.)\\s*)?(\\[)", beginCaptures: { 1: { name: "keyword.operator.rest.tsx" }, 2: { name: "punctuation.definition.binding-pattern.array.tsx" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.binding-pattern.array.tsx" } }, patterns: [{ include: "#binding-element" }, { include: "#punctuation-comma" }] }, "array-binding-pattern-const": { begin: "(?:(\\.\\.\\.)\\s*)?(\\[)", beginCaptures: { 1: { name: "keyword.operator.rest.tsx" }, 2: { name: "punctuation.definition.binding-pattern.array.tsx" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.binding-pattern.array.tsx" } }, patterns: [{ include: "#binding-element-const" }, { include: "#punctuation-comma" }] }, "array-literal": { begin: "\\s*(\\[)", beginCaptures: { 1: { name: "meta.brace.square.tsx" } }, end: "\\]", endCaptures: { 0: { name: "meta.brace.square.tsx" } }, name: "meta.array.literal.tsx", patterns: [{ include: "#expression" }, { include: "#punctuation-comma" }] }, "arrow-function": { patterns: [{ captures: { 1: { name: "storage.modifier.async.tsx" }, 2: { name: "variable.parameter.tsx" } }, match: "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(\\basync)\\s+)?([_$[:alpha:]][_$[:alnum:]]*)\\s*(?==>)", name: "meta.arrow.tsx" }, { begin: `(?x) (?:
(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(\\basync)
)? ((?<![})!\\]])\\s*
(?=

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |
(
[<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]
) |
# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
)
)`, beginCaptures: { 1: { name: "storage.modifier.async.tsx" } }, end: "(?==>|\\{|(^\\s*(export|function|class|interface|let|var|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|const|import|enum|namespace|module|type|abstract|declare)\\s+))", name: "meta.arrow.tsx", patterns: [{ include: "#comment" }, { include: "#type-parameters" }, { include: "#function-parameters" }, { include: "#arrow-return-type" }, { include: "#possibly-arrow-return-type" }] }, { begin: "=>", beginCaptures: { 0: { name: "storage.type.function.arrow.tsx" } }, end: "((?<=\\}|\\S)(?<!=>)|((?!\\{)(?=\\S)))(?!\\/[\\/\\*])", name: "meta.arrow.tsx", patterns: [{ include: "#single-line-comment-consuming-line-ending" }, { include: "#decl-block" }, { include: "#expression" }] }] }, "arrow-return-type": { begin: "(?<=\\))\\s*(:)", beginCaptures: { 1: { name: "keyword.operator.type.annotation.tsx" } }, end: "(?==>|\\{|(^\\s*(export|function|class|interface|let|var|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|const|import|enum|namespace|module|type|abstract|declare)\\s+))", name: "meta.return.type.arrow.tsx", patterns: [{ include: "#arrow-return-type-body" }] }, "arrow-return-type-body": { patterns: [{ begin: "(?<=[:])(?=\\s*\\{)", end: "(?<=\\})", patterns: [{ include: "#type-object" }] }, { include: "#type-predicate-operator" }, { include: "#type" }] }, "async-modifier": { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(async)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "storage.modifier.async.tsx" }, "binding-element": { patterns: [{ include: "#comment" }, { include: "#string" }, { include: "#numeric-literal" }, { include: "#regex" }, { include: "#object-binding-pattern" }, { include: "#array-binding-pattern" }, { include: "#destructuring-variable-rest" }, { include: "#variable-initializer" }] }, "binding-element-const": { patterns: [{ include: "#comment" }, { include: "#string" }, { include: "#numeric-literal" }, { include: "#regex" }, { include: "#object-binding-pattern-const" }, { include: "#array-binding-pattern-const" }, { include: "#destructuring-variable-rest-const" }, { include: "#variable-initializer" }] }, "boolean-literal": { patterns: [{ match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))true(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "constant.language.boolean.true.tsx" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))false(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "constant.language.boolean.false.tsx" }] }, brackets: { patterns: [{ begin: "{", end: "}|(?=\\*/)", patterns: [{ include: "#brackets" }] }, { begin: "\\[", end: "\\]|(?=\\*/)", patterns: [{ include: "#brackets" }] }] }, cast: { patterns: [{ include: "#jsx" }] }, "class-declaration": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(?:(abstract)\\s+)?\\b(class)\\b(?=\\s+|/[/*])", beginCaptures: { 1: { name: "keyword.control.export.tsx" }, 2: { name: "storage.modifier.tsx" }, 3: { name: "storage.modifier.tsx" }, 4: { name: "storage.type.class.tsx" } }, end: "(?<=\\})", name: "meta.class.tsx", patterns: [{ include: "#class-declaration-or-expression-patterns" }] }, "class-declaration-or-expression-patterns": { patterns: [{ include: "#comment" }, { include: "#class-or-interface-heritage" }, { captures: { 0: { name: "entity.name.type.class.tsx" } }, match: "[_$[:alpha:]][_$[:alnum:]]*" }, { include: "#type-parameters" }, { include: "#class-or-interface-body" }] }, "class-expression": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(abstract)\\s+)?(class)\\b(?=\\s+|[<{]|\\/[\\/*])", beginCaptures: { 1: { name: "storage.modifier.tsx" }, 2: { name: "storage.type.class.tsx" } }, end: "(?<=\\})", name: "meta.class.tsx", patterns: [{ include: "#class-declaration-or-expression-patterns" }] }, "class-or-interface-body": { begin: "\\{", beginCaptures: { 0: { name: "punctuation.definition.block.tsx" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.block.tsx" } }, patterns: [{ include: "#comment" }, { include: "#decorator" }, { begin: "(?<=:)\\s*", end: "(?=\\s|[;),}\\]:\\-\\+]|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))", patterns: [{ include: "#expression" }] }, { include: "#method-declaration" }, { include: "#indexer-declaration" }, { include: "#field-declaration" }, { include: "#string" }, { include: "#type-annotation" }, { include: "#variable-initializer" }, { include: "#access-modifier" }, { include: "#property-accessor" }, { include: "#async-modifier" }, { include: "#after-operator-block-as-object-literal" }, { include: "#decl-block" }, { include: "#expression" }, { include: "#punctuation-comma" }, { include: "#punctuation-semicolon" }] }, "class-or-interface-heritage": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(extends|implements)\\b)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", beginCaptures: { 1: { name: "storage.modifier.tsx" } }, end: "(?=\\{)", patterns: [{ include: "#comment" }, { include: "#class-or-interface-heritage" }, { include: "#type-parameters" }, { include: "#expressionWithoutIdentifiers" }, { captures: { 1: { name: "entity.name.type.module.tsx" }, 2: { name: "punctuation.accessor.tsx" }, 3: { name: "punctuation.accessor.optional.tsx" } }, match: "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))(?=\\s*[_$[:alpha:]][_$[:alnum:]]*(\\s*\\??\\.\\s*[_$[:alpha:]][_$[:alnum:]]*)*\\s*)" }, { captures: { 1: { name: "entity.other.inherited-class.tsx" } }, match: "([_$[:alpha:]][_$[:alnum:]]*)" }, { include: "#expressionPunctuations" }] }, comment: { patterns: [{ begin: "/\\*\\*(?!/)", beginCaptures: { 0: { name: "punctuation.definition.comment.tsx" } }, end: "\\*/", endCaptures: { 0: { name: "punctuation.definition.comment.tsx" } }, name: "comment.block.documentation.tsx", patterns: [{ include: "#docblock" }] }, { begin: "(/\\*)(?:\\s*((@)internal)(?=\\s|(\\*/)))?", beginCaptures: { 1: { name: "punctuation.definition.comment.tsx" }, 2: { name: "storage.type.internaldeclaration.tsx" }, 3: { name: "punctuation.decorator.internaldeclaration.tsx" } }, end: "\\*/", endCaptures: { 0: { name: "punctuation.definition.comment.tsx" } }, name: "comment.block.tsx" }, { begin: "(^[ \\t]+)?((//)(?:\\s*((@)internal)(?=\\s|$))?)", beginCaptures: { 1: { name: "punctuation.whitespace.comment.leading.tsx" }, 2: { name: "comment.line.double-slash.tsx" }, 3: { name: "punctuation.definition.comment.tsx" }, 4: { name: "storage.type.internaldeclaration.tsx" }, 5: { name: "punctuation.decorator.internaldeclaration.tsx" } }, contentName: "comment.line.double-slash.tsx", end: "(?=$)" }] }, "control-statement": { patterns: [{ include: "#switch-statement" }, { include: "#for-loop" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(catch|finally|throw|try)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.control.trycatch.tsx" }, { captures: { 1: { name: "keyword.control.loop.tsx" }, 2: { name: "entity.name.label.tsx" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(break|continue|goto)\\s+([_$[:alpha:]][_$[:alnum:]]*)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(break|continue|do|goto|while)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.control.loop.tsx" }, { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(return)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", beginCaptures: { 0: { name: "keyword.control.flow.tsx" } }, end: "(?=[;}]|$|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))", patterns: [{ include: "#expression" }] }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(case|default|switch)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.control.switch.tsx" }, { include: "#if-statement" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(else|if)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.control.conditional.tsx" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(with)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.control.with.tsx" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(package)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.control.tsx" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(debugger)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.other.debugger.tsx" }] }, "decl-block": { begin: "\\{", beginCaptures: { 0: { name: "punctuation.definition.block.tsx" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.block.tsx" } }, name: "meta.block.tsx", patterns: [{ include: "#statements" }] }, declaration: { patterns: [{ include: "#decorator" }, { include: "#var-expr" }, { include: "#function-declaration" }, { include: "#class-declaration" }, { include: "#interface-declaration" }, { include: "#enum-declaration" }, { include: "#namespace-declaration" }, { include: "#type-alias-declaration" }, { include: "#import-equals-declaration" }, { include: "#import-declaration" }, { include: "#export-declaration" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(declare|export)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "storage.modifier.tsx" }] }, decorator: { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))\\@", beginCaptures: { 0: { name: "punctuation.decorator.tsx" } }, end: "(?=\\s)", name: "meta.decorator.tsx", patterns: [{ include: "#expression" }] }, "destructuring-const": { patterns: [{ begin: "(?<!=|:|^of|[^\\._$[:alnum:]]of|^in|[^\\._$[:alnum:]]in)\\s*(?=\\{)", end: "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))", name: "meta.object-binding-pattern-variable.tsx", patterns: [{ include: "#object-binding-pattern-const" }, { include: "#type-annotation" }, { include: "#comment" }] }, { begin: "(?<!=|:|^of|[^\\._$[:alnum:]]of|^in|[^\\._$[:alnum:]]in)\\s*(?=\\[)", end: "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))", name: "meta.array-binding-pattern-variable.tsx", patterns: [{ include: "#array-binding-pattern-const" }, { include: "#type-annotation" }, { include: "#comment" }] }] }, "destructuring-parameter": { patterns: [{ begin: "(?<!=|:)\\s*(?:(\\.\\.\\.)\\s*)?(\\{)", beginCaptures: { 1: { name: "keyword.operator.rest.tsx" }, 2: { name: "punctuation.definition.binding-pattern.object.tsx" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.binding-pattern.object.tsx" } }, name: "meta.parameter.object-binding-pattern.tsx", patterns: [{ include: "#parameter-object-binding-element" }] }, { begin: "(?<!=|:)\\s*(?:(\\.\\.\\.)\\s*)?(\\[)", beginCaptures: { 1: { name: "keyword.operator.rest.tsx" }, 2: { name: "punctuation.definition.binding-pattern.array.tsx" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.binding-pattern.array.tsx" } }, name: "meta.paramter.array-binding-pattern.tsx", patterns: [{ include: "#parameter-binding-element" }, { include: "#punctuation-comma" }] }] }, "destructuring-parameter-rest": { captures: { 1: { name: "keyword.operator.rest.tsx" }, 2: { name: "variable.parameter.tsx" } }, match: "(?:(\\.\\.\\.)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)" }, "destructuring-variable": { patterns: [{ begin: "(?<!=|:|^of|[^\\._$[:alnum:]]of|^in|[^\\._$[:alnum:]]in)\\s*(?=\\{)", end: "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))", name: "meta.object-binding-pattern-variable.tsx", patterns: [{ include: "#object-binding-pattern" }, { include: "#type-annotation" }, { include: "#comment" }] }, { begin: "(?<!=|:|^of|[^\\._$[:alnum:]]of|^in|[^\\._$[:alnum:]]in)\\s*(?=\\[)", end: "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))", name: "meta.array-binding-pattern-variable.tsx", patterns: [{ include: "#array-binding-pattern" }, { include: "#type-annotation" }, { include: "#comment" }] }] }, "destructuring-variable-rest": { captures: { 1: { name: "keyword.operator.rest.tsx" }, 2: { name: "meta.definition.variable.tsx variable.other.readwrite.tsx" } }, match: "(?:(\\.\\.\\.)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)" }, "destructuring-variable-rest-const": { captures: { 1: { name: "keyword.operator.rest.tsx" }, 2: { name: "meta.definition.variable.tsx variable.other.constant.tsx" } }, match: "(?:(\\.\\.\\.)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)" }, directives: { begin: "^(///)\\s*(?=<(reference|amd-dependency|amd-module)(\\s+(path|types|no-default-lib|lib|name|resolution-mode)\\s*=\\s*((\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)))+\\s*/>\\s*$)", beginCaptures: { 1: { name: "punctuation.definition.comment.tsx" } }, end: "(?=$)", name: "comment.line.triple-slash.directive.tsx", patterns: [{ begin: "(<)(reference|amd-dependency|amd-module)", beginCaptures: { 1: { name: "punctuation.definition.tag.directive.tsx" }, 2: { name: "entity.name.tag.directive.tsx" } }, end: "/>", endCaptures: { 0: { name: "punctuation.definition.tag.directive.tsx" } }, name: "meta.tag.tsx", patterns: [{ match: "path|types|no-default-lib|lib|name|resolution-mode", name: "entity.other.attribute-name.directive.tsx" }, { match: "=", name: "keyword.operator.assignment.tsx" }, { include: "#string" }] }] }, docblock: { patterns: [{ captures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" }, 3: { name: "constant.language.access-type.jsdoc" } }, match: `(?x)
((@)(?:access|api))
\\s+
(private|protected|public)
\\b` }, { captures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" }, 3: { name: "entity.name.type.instance.jsdoc" }, 4: { name: "punctuation.definition.bracket.angle.begin.jsdoc" }, 5: { name: "constant.other.email.link.underline.jsdoc" }, 6: { name: "punctuation.definition.bracket.angle.end.jsdoc" } }, match: `(?x)
((@)author)
\\s+
(
[^@\\s<>*/]
(?:[^@<>*/]|\\*[^/])*
)
(?:
\\s*
(<)
([^>\\s]+)
(>)
)?` }, { captures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" }, 3: { name: "entity.name.type.instance.jsdoc" }, 4: { name: "keyword.operator.control.jsdoc" }, 5: { name: "entity.name.type.instance.jsdoc" } }, match: `(?x)
((@)borrows) \\s+
((?:[^@\\s*/]|\\*[^/])+)
\\s+ (as) \\s+
((?:[^@\\s*/]|\\*[^/])+)` }, { begin: "((@)example)\\s+", beginCaptures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" } }, end: "(?=@|\\*/)", name: "meta.example.jsdoc", patterns: [{ match: "^\\s\\*\\s+" }, { begin: "\\G(<)caption(>)", beginCaptures: { 0: { name: "entity.name.tag.inline.jsdoc" }, 1: { name: "punctuation.definition.bracket.angle.begin.jsdoc" }, 2: { name: "punctuation.definition.bracket.angle.end.jsdoc" } }, contentName: "constant.other.description.jsdoc", end: "(</)caption(>)|(?=\\*/)", endCaptures: { 0: { name: "entity.name.tag.inline.jsdoc" }, 1: { name: "punctuation.definition.bracket.angle.begin.jsdoc" }, 2: { name: "punctuation.definition.bracket.angle.end.jsdoc" } } }, { captures: { 0: { name: "source.embedded.tsx" } }, match: "[^\\s@*](?:[^*]|\\*[^/])*" }] }, { captures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" }, 3: { name: "constant.language.symbol-type.jsdoc" } }, match: "(?x) ((@)kind) \\s+ (class|constant|event|external|file|function|member|mixin|module|namespace|typedef) \\b" }, { captures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" }, 3: { name: "variable.other.link.underline.jsdoc" }, 4: { name: "entity.name.type.instance.jsdoc" } }, match: `(?x)
((@)see)
\\s+
(?:

(
(?=https?://)
(?:[^\\s*]|\\*[^/])+
)
|

(
(?!

https?://
|

(?:\\[[^\\[\\]]*\\])?
{@(?:link|linkcode|linkplain|tutorial)\\b
)

(?:[^@\\s*/]|\\*[^/])+
)
)` }, { captures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" }, 3: { name: "variable.other.jsdoc" } }, match: `(?x)
((@)template)
\\s+
# One or more valid identifiers
(
[A-Za-z_$]
[\\w$.\\[\\]]*
(?:
\\s* , \\s*
[A-Za-z_$]
[\\w$.\\[\\]]*
)*
)` }, { begin: "(?x)((@)template)\\s+(?={)", beginCaptures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" } }, end: "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])", patterns: [{ include: "#jsdoctype" }, { match: "([A-Za-z_$][\\w$.\\[\\]]*)", name: "variable.other.jsdoc" }] }, { captures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" }, 3: { name: "variable.other.jsdoc" } }, match: `(?x)
(
(@)
(?:arg|argument|const|constant|member|namespace|param|var)
)
\\s+
(
[A-Za-z_$]
[\\w$.\\[\\]]*
)` }, { begin: "((@)typedef)\\s+(?={)", beginCaptures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" } }, end: "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])", patterns: [{ include: "#jsdoctype" }, { match: "(?:[^@\\s*/]|\\*[^/])+", name: "entity.name.type.instance.jsdoc" }] }, { begin: "((@)(?:arg|argument|const|constant|member|namespace|param|prop|property|var))\\s+(?={)", beginCaptures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" } }, end: "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])", patterns: [{ include: "#jsdoctype" }, { match: "([A-Za-z_$][\\w$.\\[\\]]*)", name: "variable.other.jsdoc" }, { captures: { 1: { name: "punctuation.definition.optional-value.begin.bracket.square.jsdoc" }, 2: { name: "keyword.operator.assignment.jsdoc" }, 3: { name: "source.embedded.tsx" }, 4: { name: "punctuation.definition.optional-value.end.bracket.square.jsdoc" }, 5: { name: "invalid.illegal.syntax.jsdoc" } }, match: `(?x)
(\\[)\\s*
[\\w$]+
(?:
(?:\\[\\])?
\\.
[\\w$]+
)*
(?:
\\s*
(=)
\\s*
(

(?>
"(?:(?:\\*(?!/))|(?:\\\\(?!"))|[^*\\\\])*?" |
'(?:(?:\\*(?!/))|(?:\\\\(?!'))|[^*\\\\])*?' |
\\[ (?:(?:\\*(?!/))|[^*])*? \\] |
(?:(?:\\*(?!/))|\\s(?!\\s*\\])|\\[.*?(?:\\]|(?=\\*/))|[^*\\s\\[\\]])*
)*
)
)?
\\s*(?:(\\])((?:[^*\\s]|\\*[^\\s/])+)?|(?=\\*/))`, name: "variable.other.jsdoc" }] }, { begin: `(?x)
(
(@)
(?:define|enum|exception|export|extends|lends|implements|modifies
|namespace|private|protected|returns?|satisfies|suppress|this|throws|type
|yields?)
)
\\s+(?={)`, beginCaptures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" } }, end: "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])", patterns: [{ include: "#jsdoctype" }] }, { captures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" }, 3: { name: "entity.name.type.instance.jsdoc" } }, match: `(?x)
(
(@)
(?:alias|augments|callback|constructs|emits|event|fires|exports?
|extends|external|function|func|host|lends|listens|interface|memberof!?
|method|module|mixes|mixin|name|requires|see|this|typedef|uses)
)
\\s+
(
(?:
[^{}@\\s*] | \\*[^/]
)+
)` }, { begin: `((@)(?:default(?:value)?|license|version))\\s+(([''"]))`, beginCaptures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" }, 3: { name: "variable.other.jsdoc" }, 4: { name: "punctuation.definition.string.begin.jsdoc" } }, contentName: "variable.other.jsdoc", end: "(\\3)|(?=$|\\*/)", endCaptures: { 0: { name: "variable.other.jsdoc" }, 1: { name: "punctuation.definition.string.end.jsdoc" } } }, { captures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" }, 3: { name: "variable.other.jsdoc" } }, match: "((@)(?:default(?:value)?|license|tutorial|variation|version))\\s+([^\\s*]+)" }, { captures: { 1: { name: "punctuation.definition.block.tag.jsdoc" } }, match: "(?x) (@) (?:abstract|access|alias|api|arg|argument|async|attribute|augments|author|beta|borrows|bubbles |callback|chainable|class|classdesc|code|config|const|constant|constructor|constructs|copyright |default|defaultvalue|define|deprecated|desc|description|dict|emits|enum|event|example|exception |exports?|extends|extension(?:_?for)?|external|externs|file|fileoverview|final|fires|for|func |function|generator|global|hideconstructor|host|ignore|implements|implicitCast|inherit[Dd]oc |inner|instance|interface|internal|kind|lends|license|listens|main|member|memberof!?|method |mixes|mixins?|modifies|module|name|namespace|noalias|nocollapse|nocompile|nosideeffects |override|overview|package|param|polymer(?:Behavior)?|preserve|private|prop|property|protected |public|read[Oo]nly|record|require[ds]|returns?|see|since|static|struct|submodule|summary |suppress|template|this|throws|todo|tutorial|type|typedef|unrestricted|uses|var|variation |version|virtual|writeOnce|yields?) \\b", name: "storage.type.class.jsdoc" }, { include: "#inline-tags" }, { captures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" } }, match: "((@)(?:[_$[:alpha:]][_$[:alnum:]]*))(?=\\s+)" }] }, "enum-declaration": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?(?:\\b(const)\\s+)?\\b(enum)\\s+([_$[:alpha:]][_$[:alnum:]]*)", beginCaptures: { 1: { name: "keyword.control.export.tsx" }, 2: { name: "storage.modifier.tsx" }, 3: { name: "storage.modifier.tsx" }, 4: { name: "storage.type.enum.tsx" }, 5: { name: "entity.name.type.enum.tsx" } }, end: "(?<=\\})", name: "meta.enum.declaration.tsx", patterns: [{ include: "#comment" }, { begin: "\\{", beginCaptures: { 0: { name: "punctuation.definition.block.tsx" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.block.tsx" } }, patterns: [{ include: "#comment" }, { begin: "([_$[:alpha:]][_$[:alnum:]]*)", beginCaptures: { 0: { name: "variable.other.enummember.tsx" } }, end: "(?=,|\\}|$)", patterns: [{ include: "#comment" }, { include: "#variable-initializer" }] }, { begin: "(?=((\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\])))", end: "(?=,|\\}|$)", patterns: [{ include: "#string" }, { include: "#array-literal" }, { include: "#comment" }, { include: "#variable-initializer" }] }, { include: "#punctuation-comma" }] }] }, "export-declaration": { patterns: [{ captures: { 1: { name: "keyword.control.export.tsx" }, 2: { name: "keyword.control.as.tsx" }, 3: { name: "storage.type.namespace.tsx" }, 4: { name: "entity.name.type.module.tsx" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(export)\\s+(as)\\s+(namespace)\\s+([_$[:alpha:]][_$[:alnum:]]*)" }, { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(export)(?:\\s+(type))?(?:(?:\\s*(=))|(?:\\s+(default)(?=\\s+)))", beginCaptures: { 1: { name: "keyword.control.export.tsx" }, 2: { name: "keyword.control.type.tsx" }, 3: { name: "keyword.operator.assignment.tsx" }, 4: { name: "keyword.control.default.tsx" } }, end: "(?=$|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))", name: "meta.export.default.tsx", patterns: [{ include: "#interface-declaration" }, { include: "#expression" }] }, { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(export)(?:\\s+(type))?\\b(?!(\\$)|(\\s*:))((?=\\s*[\\{*])|((?=\\s*[_$[:alpha:]][_$[:alnum:]]*(\\s|,))(?!\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b)))", beginCaptures: { 1: { name: "keyword.control.export.tsx" }, 2: { name: "keyword.control.type.tsx" } }, end: "(?=$|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))", name: "meta.export.tsx", patterns: [{ include: "#import-export-declaration" }] }] }, expression: { patterns: [{ include: "#expressionWithoutIdentifiers" }, { include: "#identifiers" }, { include: "#expressionPunctuations" }] }, "expression-inside-possibly-arrow-parens": { patterns: [{ include: "#expressionWithoutIdentifiers" }, { include: "#comment" }, { include: "#string" }, { include: "#decorator" }, { include: "#destructuring-parameter" }, { captures: { 1: { name: "storage.modifier.tsx" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(override|public|protected|private|readonly)\\s+(?=(override|public|protected|private|readonly)\\s+)" }, { captures: { 1: { name: "storage.modifier.tsx" }, 2: { name: "keyword.operator.rest.tsx" }, 3: { name: "entity.name.function.tsx variable.language.this.tsx" }, 4: { name: "entity.name.function.tsx" }, 5: { name: "keyword.operator.optional.tsx" } }, match: `(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(override|public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*(\\??)(?=\\s*
# function assignment |
(=\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |
(
[<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]
) |
# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
)) |
# typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>
(:\\s*(
(<) |
([(]\\s*(
([)]) |
(\\.\\.\\.) |
([_$[:alnum:]]+\\s*(
([:,?=])|
([)]\\s*=>)
))
))
)) |
(:\\s*(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Function(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |
(:\\s*((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))) |
(:\\s*(=>|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(<[^<>]*>)|[^<>(),=])+=\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |
(
[<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]
) |
# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
)))` }, { captures: { 1: { name: "storage.modifier.tsx" }, 2: { name: "keyword.operator.rest.tsx" }, 3: { name: "variable.parameter.tsx variable.language.this.tsx" }, 4: { name: "variable.parameter.tsx" }, 5: { name: "keyword.operator.optional.tsx" } }, match: "(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(override|public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*(\\??)(?=\\s*[:,]|$)" }, { include: "#type-annotation" }, { include: "#variable-initializer" }, { match: ",", name: "punctuation.separator.parameter.tsx" }, { include: "#identifiers" }, { include: "#expressionPunctuations" }] }, "expression-operators": { patterns: [{ match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(await)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.control.flow.tsx" }, { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(yield)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?=\\s*\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*\\*)", beginCaptures: { 1: { name: "keyword.control.flow.tsx" } }, end: "\\*", endCaptures: { 0: { name: "keyword.generator.asterisk.tsx" } }, patterns: [{ include: "#comment" }] }, { captures: { 1: { name: "keyword.control.flow.tsx" }, 2: { name: "keyword.generator.asterisk.tsx" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(yield)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?:\\s*(\\*))?" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))delete(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.operator.expression.delete.tsx" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))in(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?!\\()", name: "keyword.operator.expression.in.tsx" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))of(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?!\\()", name: "keyword.operator.expression.of.tsx" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))instanceof(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.operator.expression.instanceof.tsx" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))new(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.operator.new.tsx" }, { include: "#typeof-operator" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))void(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.operator.expression.void.tsx" }, { captures: { 1: { name: "keyword.control.as.tsx" }, 2: { name: "storage.modifier.tsx" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(as)\\s+(const)(?=\\s*($|[;,:})\\]]))" }, { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(as)|(satisfies))\\s+", beginCaptures: { 1: { name: "keyword.control.as.tsx" }, 2: { name: "keyword.control.satisfies.tsx" } }, end: "(?=^|[;),}\\]:?\\-\\+\\>]|\\|\\||\\&\\&|\\!\\=\\=|$|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(as|satisfies)\\s+)|(\\s+\\<))", patterns: [{ include: "#type" }] }, { match: "\\.\\.\\.", name: "keyword.operator.spread.tsx" }, { match: "\\*=|(?<!\\()/=|%=|\\+=|\\-=", name: "keyword.operator.assignment.compound.tsx" }, { match: "\\&=|\\^=|<<=|>>=|>>>=|\\|=", name: "keyword.operator.assignment.compound.bitwise.tsx" }, { match: "<<|>>>|>>", name: "keyword.operator.bitwise.shift.tsx" }, { match: "===|!==|==|!=", name: "keyword.operator.comparison.tsx" }, { match: "<=|>=|<>|<|>", name: "keyword.operator.relational.tsx" }, { captures: { 1: { name: "keyword.operator.logical.tsx" }, 2: { name: "keyword.operator.assignment.compound.tsx" }, 3: { name: "keyword.operator.arithmetic.tsx" } }, match: "(?<=[_$[:alnum:]])(\\!)\\s*(?:(/=)|(?:(/)(?![/*])))" }, { match: "\\!|&&|\\|\\||\\?\\?", name: "keyword.operator.logical.tsx" }, { match: "\\&|~|\\^|\\|", name: "keyword.operator.bitwise.tsx" }, { match: "\\=", name: "keyword.operator.assignment.tsx" }, { match: "--", name: "keyword.operator.decrement.tsx" }, { match: "\\+\\+", name: "keyword.operator.increment.tsx" }, { match: "%|\\*|/|-|\\+", name: "keyword.operator.arithmetic.tsx" }, { begin: "(?<=[_$[:alnum:])\\]])\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)+(?:(/=)|(?:(/)(?![/*]))))", end: "(?:(/=)|(?:(/)(?!\\*([^\\*]|(\\*[^\\/]))*\\*\\/)))", endCaptures: { 1: { name: "keyword.operator.assignment.compound.tsx" }, 2: { name: "keyword.operator.arithmetic.tsx" } }, patterns: [{ include: "#comment" }] }, { captures: { 1: { name: "keyword.operator.assignment.compound.tsx" }, 2: { name: "keyword.operator.arithmetic.tsx" } }, match: "(?<=[_$[:alnum:])\\]])\\s*(?:(/=)|(?:(/)(?![/*])))" }] }, expressionPunctuations: { patterns: [{ include: "#punctuation-comma" }, { include: "#punctuation-accessor" }] }, expressionWithoutIdentifiers: { patterns: [{ include: "#jsx" }, { include: "#string" }, { include: "#regex" }, { include: "#comment" }, { include: "#function-expression" }, { include: "#class-expression" }, { include: "#arrow-function" }, { include: "#paren-expression-possibly-arrow" }, { include: "#cast" }, { include: "#ternary-expression" }, { include: "#new-expr" }, { include: "#instanceof-expr" }, { include: "#object-literal" }, { include: "#expression-operators" }, { include: "#function-call" }, { include: "#literal" }, { include: "#support-objects" }, { include: "#paren-expression" }] }, "field-declaration": { begin: `(?x)(?<!\\()(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(readonly)\\s+)?(?=\\s*((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$))|(\\#?[_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(?:(?:(\\?)|(\\!))\\s*)?(=|:|;|,|\\}|$))`, beginCaptures: { 1: { name: "storage.modifier.tsx" } }, end: `(?x)(?=\\}|;|,|$|(^(?!\\s*((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$))|(\\#?[_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(?:(?:(\\?)|(\\!))\\s*)?(=|:|;|,|$))))|(?<=\\})`, name: "meta.field.declaration.tsx", patterns: [{ include: "#variable-initializer" }, { include: "#type-annotation" }, { include: "#string" }, { include: "#array-literal" }, { include: "#numeric-literal" }, { include: "#comment" }, { captures: { 1: { name: "meta.definition.property.tsx entity.name.function.tsx" }, 2: { name: "keyword.operator.optional.tsx" }, 3: { name: "keyword.operator.definiteassignment.tsx" } }, match: `(?x)(\\#?[_$[:alpha:]][_$[:alnum:]]*)(?:(\\?)|(\\!))?(?=\\s*\\s*
# function assignment |
(=\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |
(
[<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]
) |
# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
)) |
# typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>
(:\\s*(
(<) |
([(]\\s*(
([)]) |
(\\.\\.\\.) |
([_$[:alnum:]]+\\s*(
([:,?=])|
([)]\\s*=>)
))
))
)) |
(:\\s*(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Function(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |
(:\\s*((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))) |
(:\\s*(=>|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(<[^<>]*>)|[^<>(),=])+=\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |
(
[<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]
) |
# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
)))` }, { match: "\\#?[_$[:alpha:]][_$[:alnum:]]*", name: "meta.definition.property.tsx variable.object.property.tsx" }, { match: "\\?", name: "keyword.operator.optional.tsx" }, { match: "\\!", name: "keyword.operator.definiteassignment.tsx" }] }, "for-loop": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))for(?=((\\s+|(\\s*\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*))await)?\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)?(\\())", beginCaptures: { 0: { name: "keyword.control.loop.tsx" } }, end: "(?<=\\))", patterns: [{ include: "#comment" }, { match: "await", name: "keyword.control.loop.tsx" }, { begin: "\\(", beginCaptures: { 0: { name: "meta.brace.round.tsx" } }, end: "\\)", endCaptures: { 0: { name: "meta.brace.round.tsx" } }, patterns: [{ include: "#var-expr" }, { include: "#expression" }, { include: "#punctuation-semicolon" }] }] }, "function-body": { patterns: [{ include: "#comment" }, { include: "#type-parameters" }, { include: "#function-parameters" }, { include: "#return-type" }, { include: "#type-function-return-type" }, { include: "#decl-block" }, { match: "\\*", name: "keyword.generator.asterisk.tsx" }] }, "function-call": { patterns: [{ begin: "(?=(((([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\\)]))\\s*(?:(\\?\\.\\s*)|(\\!))?((<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?\\())", end: "(?<=\\))(?!(((([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\\)]))\\s*(?:(\\?\\.\\s*)|(\\!))?((<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?\\())", patterns: [{ begin: "(?=(([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))", end: "(?=\\s*(?:(\\?\\.\\s*)|(\\!))?((<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?\\())", name: "meta.function-call.tsx", patterns: [{ include: "#function-call-target" }] }, { include: "#comment" }, { include: "#function-call-optionals" }, { include: "#type-arguments" }, { include: "#paren-expression" }] }, { begin: "(?=(((([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\\)]))(<\\s*[\\{\\[\\(]\\s*$))", end: "(?<=\\>)(?!(((([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\\)]))(<\\s*[\\{\\[\\(]\\s*$))", patterns: [{ begin: "(?=(([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))", end: "(?=(<\\s*[\\{\\[\\(]\\s*$))", name: "meta.function-call.tsx", patterns: [{ include: "#function-call-target" }] }, { include: "#comment" }, { include: "#function-call-optionals" }, { include: "#type-arguments" }] }] }, "function-call-optionals": { patterns: [{ match: "\\?\\.", name: "meta.function-call.tsx punctuation.accessor.optional.tsx" }, { match: "\\!", name: "meta.function-call.tsx keyword.operator.definiteassignment.tsx" }] }, "function-call-target": { patterns: [{ include: "#support-function-call-identifiers" }, { match: "(\\#?[_$[:alpha:]][_$[:alnum:]]*)", name: "entity.name.function.tsx" }] }, "function-declaration": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?(?:(async)\\s+)?(function\\b)(?:\\s*(\\*))?(?:(?:\\s+|(?<=\\*))([_$[:alpha:]][_$[:alnum:]]*))?\\s*", beginCaptures: { 1: { name: "keyword.control.export.tsx" }, 2: { name: "storage.modifier.tsx" }, 3: { name: "storage.modifier.async.tsx" }, 4: { name: "storage.type.function.tsx" }, 5: { name: "keyword.generator.asterisk.tsx" }, 6: { name: "meta.definition.function.tsx entity.name.function.tsx" } }, end: "(?=;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))|(?<=\\})", name: "meta.function.tsx", patterns: [{ include: "#function-name" }, { include: "#function-body" }] }, "function-expression": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(async)\\s+)?(function\\b)(?:\\s*(\\*))?(?:(?:\\s+|(?<=\\*))([_$[:alpha:]][_$[:alnum:]]*))?\\s*", beginCaptures: { 1: { name: "storage.modifier.async.tsx" }, 2: { name: "storage.type.function.tsx" }, 3: { name: "keyword.generator.asterisk.tsx" }, 4: { name: "meta.definition.function.tsx entity.name.function.tsx" } }, end: "(?=;)|(?<=\\})", name: "meta.function.expression.tsx", patterns: [{ include: "#function-name" }, { include: "#single-line-comment-consuming-line-ending" }, { include: "#function-body" }] }, "function-name": { match: "[_$[:alpha:]][_$[:alnum:]]*", name: "meta.definition.function.tsx entity.name.function.tsx" }, "function-parameters": { begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.parameters.begin.tsx" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.parameters.end.tsx" } }, name: "meta.parameters.tsx", patterns: [{ include: "#function-parameters-body" }] }, "function-parameters-body": { patterns: [{ include: "#comment" }, { include: "#string" }, { include: "#decorator" }, { include: "#destructuring-parameter" }, { include: "#parameter-name" }, { include: "#parameter-type-annotation" }, { include: "#variable-initializer" }, { match: ",", name: "punctuation.separator.parameter.tsx" }] }, identifiers: { patterns: [{ include: "#object-identifiers" }, { captures: { 1: { name: "punctuation.accessor.tsx" }, 2: { name: "punctuation.accessor.optional.tsx" }, 3: { name: "entity.name.function.tsx" } }, match: `(?x)(?:(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*)?([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*=\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |
(
[<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]
) |
# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
))` }, { captures: { 1: { name: "punctuation.accessor.tsx" }, 2: { name: "punctuation.accessor.optional.tsx" }, 3: { name: "variable.other.constant.property.tsx" } }, match: "(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(\\#?[[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])" }, { captures: { 1: { name: "punctuation.accessor.tsx" }, 2: { name: "punctuation.accessor.optional.tsx" }, 3: { name: "variable.other.property.tsx" } }, match: "(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*)" }, { match: "([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])", name: "variable.other.constant.tsx" }, { match: "[_$[:alpha:]][_$[:alnum:]]*", name: "variable.other.readwrite.tsx" }] }, "if-statement": { patterns: [{ begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?=\\bif\\s*(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))\\s*(?!\\{))", end: "(?=;|$|\\})", patterns: [{ include: "#comment" }, { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(if)\\s*(\\()", beginCaptures: { 1: { name: "keyword.control.conditional.tsx" }, 2: { name: "meta.brace.round.tsx" } }, end: "\\)", endCaptures: { 0: { name: "meta.brace.round.tsx" } }, patterns: [{ include: "#expression" }] }, { begin: "(?<=\\))\\s*\\/(?![\\/*])(?=(?:[^\\/\\\\\\[]|\\\\.|\\[([^\\]\\\\]|\\\\.)*\\])+\\/([dgimsuy]+|(?![\\/\\*])|(?=\\/\\*))(?!\\s*[a-zA-Z0-9_$]))", beginCaptures: { 0: { name: "punctuation.definition.string.begin.tsx" } }, end: "(/)([dgimsuy]*)", endCaptures: { 1: { name: "punctuation.definition.string.end.tsx" }, 2: { name: "keyword.other.tsx" } }, name: "string.regexp.tsx", patterns: [{ include: "#regexp" }] }, { include: "#statements" }] }] }, "import-declaration": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(import)(?:\\s+(type)(?!\\s+from))?(?!\\s*[:\\(])(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", beginCaptures: { 1: { name: "keyword.control.export.tsx" }, 2: { name: "storage.modifier.tsx" }, 3: { name: "keyword.control.import.tsx" }, 4: { name: "keyword.control.type.tsx" } }, end: "(?<!^import|[^\\._$[:alnum:]]import)(?=;|$|^)", name: "meta.import.tsx", patterns: [{ include: "#single-line-comment-consuming-line-ending" }, { include: "#comment" }, { include: "#string" }, { begin: `(?<=^import|[^\\._$[:alnum:]]import)(?!\\s*["'])`, end: "\\bfrom\\b", endCaptures: { 0: { name: "keyword.control.from.tsx" } }, patterns: [{ include: "#import-export-declaration" }] }, { include: "#import-export-declaration" }] }, "import-equals-declaration": { patterns: [{ begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(import)(?:\\s+(type))?\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*(=)\\s*(require)\\s*(\\()", beginCaptures: { 1: { name: "keyword.control.export.tsx" }, 2: { name: "storage.modifier.tsx" }, 3: { name: "keyword.control.import.tsx" }, 4: { name: "keyword.control.type.tsx" }, 5: { name: "variable.other.readwrite.alias.tsx" }, 6: { name: "keyword.operator.assignment.tsx" }, 7: { name: "keyword.control.require.tsx" }, 8: { name: "meta.brace.round.tsx" } }, end: "\\)", endCaptures: { 0: { name: "meta.brace.round.tsx" } }, name: "meta.import-equals.external.tsx", patterns: [{ include: "#comment" }, { include: "#string" }] }, { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(import)(?:\\s+(type))?\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*(=)\\s*(?!require\\b)", beginCaptures: { 1: { name: "keyword.control.export.tsx" }, 2: { name: "storage.modifier.tsx" }, 3: { name: "keyword.control.import.tsx" }, 4: { name: "keyword.control.type.tsx" }, 5: { name: "variable.other.readwrite.alias.tsx" }, 6: { name: "keyword.operator.assignment.tsx" } }, end: "(?=;|$|^)", name: "meta.import-equals.internal.tsx", patterns: [{ include: "#single-line-comment-consuming-line-ending" }, { include: "#comment" }, { captures: { 1: { name: "entity.name.type.module.tsx" }, 2: { name: "punctuation.accessor.tsx" }, 3: { name: "punctuation.accessor.optional.tsx" } }, match: "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))" }, { match: "([_$[:alpha:]][_$[:alnum:]]*)", name: "variable.other.readwrite.tsx" }] }] }, "import-export-assert-clause": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(with)|(assert))\\s*(\\{)", beginCaptures: { 1: { name: "keyword.control.with.tsx" }, 2: { name: "keyword.control.assert.tsx" }, 3: { name: "punctuation.definition.block.tsx" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.block.tsx" } }, patterns: [{ include: "#comment" }, { include: "#string" }, { match: "(?:[_$[:alpha:]][_$[:alnum:]]*)\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*:)", name: "meta.object-literal.key.tsx" }, { match: ":", name: "punctuation.separator.key-value.tsx" }] }, "import-export-block": { begin: "\\{", beginCaptures: { 0: { name: "punctuation.definition.block.tsx" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.block.tsx" } }, name: "meta.block.tsx", patterns: [{ include: "#import-export-clause" }] }, "import-export-clause": { patterns: [{ include: "#comment" }, { captures: { 1: { name: "keyword.control.type.tsx" }, 2: { name: "keyword.control.default.tsx" }, 3: { name: "constant.language.import-export-all.tsx" }, 4: { name: "variable.other.readwrite.tsx" }, 5: { name: "keyword.control.as.tsx" }, 6: { name: "keyword.control.default.tsx" }, 7: { name: "variable.other.readwrite.alias.tsx" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(?:(\\btype)\\s+)?(?:(\\bdefault)|(\\*)|(\\b[_$[:alpha:]][_$[:alnum:]]*)))\\s+(as)\\s+(?:(default(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))|([_$[:alpha:]][_$[:alnum:]]*))" }, { include: "#punctuation-comma" }, { match: "\\*", name: "constant.language.import-export-all.tsx" }, { match: "\\b(default)\\b", name: "keyword.control.default.tsx" }, { captures: { 1: { name: "keyword.control.type.tsx" }, 2: { name: "variable.other.readwrite.alias.tsx" } }, match: "(?:(\\btype)\\s+)?([_$[:alpha:]][_$[:alnum:]]*)" }] }, "import-export-declaration": { patterns: [{ include: "#comment" }, { include: "#string" }, { include: "#import-export-block" }, { match: "\\bfrom\\b", name: "keyword.control.from.tsx" }, { include: "#import-export-assert-clause" }, { include: "#import-export-clause" }] }, "indexer-declaration": { begin: "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(readonly)\\s*)?\\s*(\\[)\\s*([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=:)", beginCaptures: { 1: { name: "storage.modifier.tsx" }, 2: { name: "meta.brace.square.tsx" }, 3: { name: "variable.parameter.tsx" } }, end: "(\\])\\s*(\\?\\s*)?|$", endCaptures: { 1: { name: "meta.brace.square.tsx" }, 2: { name: "keyword.operator.optional.tsx" } }, name: "meta.indexer.declaration.tsx", patterns: [{ include: "#type-annotation" }] }, "indexer-mapped-type-declaration": { begin: "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))([+-])?(readonly)\\s*)?\\s*(\\[)\\s*([_$[:alpha:]][_$[:alnum:]]*)\\s+(in)\\s+", beginCaptures: { 1: { name: "keyword.operator.type.modifier.tsx" }, 2: { name: "storage.modifier.tsx" }, 3: { name: "meta.brace.square.tsx" }, 4: { name: "entity.name.type.tsx" }, 5: { name: "keyword.operator.expression.in.tsx" } }, end: "(\\])([+-])?\\s*(\\?\\s*)?|$", endCaptures: { 1: { name: "meta.brace.square.tsx" }, 2: { name: "keyword.operator.type.modifier.tsx" }, 3: { name: "keyword.operator.optional.tsx" } }, name: "meta.indexer.mappedtype.declaration.tsx", patterns: [{ captures: { 1: { name: "keyword.control.as.tsx" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(as)\\s+" }, { include: "#type" }] }, "inline-tags": { patterns: [{ captures: { 1: { name: "punctuation.definition.bracket.square.begin.jsdoc" }, 2: { name: "punctuation.definition.bracket.square.end.jsdoc" } }, match: "(\\[)[^\\]]+(\\])(?={@(?:link|linkcode|linkplain|tutorial))", name: "constant.other.description.jsdoc" }, { begin: "({)((@)(?:link(?:code|plain)?|tutorial))\\s*", beginCaptures: { 1: { name: "punctuation.definition.bracket.curly.begin.jsdoc" }, 2: { name: "storage.type.class.jsdoc" }, 3: { name: "punctuation.definition.inline.tag.jsdoc" } }, end: "}|(?=\\*/)", endCaptures: { 0: { name: "punctuation.definition.bracket.curly.end.jsdoc" } }, name: "entity.name.type.instance.jsdoc", patterns: [{ captures: { 1: { name: "variable.other.link.underline.jsdoc" }, 2: { name: "punctuation.separator.pipe.jsdoc" } }, match: "\\G((?=https?://)(?:[^|}\\s*]|\\*[/])+)(\\|)?" }, { captures: { 1: { name: "variable.other.description.jsdoc" }, 2: { name: "punctuation.separator.pipe.jsdoc" } }, match: "\\G((?:[^{}@\\s|*]|\\*[^/])+)(\\|)?" }] }] }, "instanceof-expr": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(instanceof)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", beginCaptures: { 1: { name: "keyword.operator.expression.instanceof.tsx" } }, end: "(?<=\\))|(?=[;),}\\]:?\\-\\+\\>]|\\|\\||\\&\\&|\\!\\=\\=|$|(===|!==|==|!=)|(([\\&\\~\\^\\|]\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s+instanceof(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))function((\\s+[_$[:alpha:]][_$[:alnum:]]*)|(\\s*[\\(]))))", patterns: [{ include: "#type" }] }, "interface-declaration": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(?:(abstract)\\s+)?\\b(interface)\\b(?=\\s+|/[/*])", beginCaptures: { 1: { name: "keyword.control.export.tsx" }, 2: { name: "storage.modifier.tsx" }, 3: { name: "storage.modifier.tsx" }, 4: { name: "storage.type.interface.tsx" } }, end: "(?<=\\})", name: "meta.interface.tsx", patterns: [{ include: "#comment" }, { include: "#class-or-interface-heritage" }, { captures: { 0: { name: "entity.name.type.interface.tsx" } }, match: "[_$[:alpha:]][_$[:alnum:]]*" }, { include: "#type-parameters" }, { include: "#class-or-interface-body" }] }, jsdoctype: { patterns: [{ begin: "\\G({)", beginCaptures: { 0: { name: "entity.name.type.instance.jsdoc" }, 1: { name: "punctuation.definition.bracket.curly.begin.jsdoc" } }, contentName: "entity.name.type.instance.jsdoc", end: "((}))\\s*|(?=\\*/)", endCaptures: { 1: { name: "entity.name.type.instance.jsdoc" }, 2: { name: "punctuation.definition.bracket.curly.end.jsdoc" } }, patterns: [{ include: "#brackets" }] }] }, jsx: { patterns: [{ include: "#jsx-tag-without-attributes-in-expression" }, { include: "#jsx-tag-in-expression" }] }, "jsx-children": { patterns: [{ include: "#jsx-tag-without-attributes" }, { include: "#jsx-tag" }, { include: "#jsx-evaluated-code" }, { include: "#jsx-entities" }] }, "jsx-entities": { patterns: [{ captures: { 1: { name: "punctuation.definition.entity.tsx" }, 3: { name: "punctuation.definition.entity.tsx" } }, match: "(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)", name: "constant.character.entity.tsx" }] }, "jsx-evaluated-code": { begin: "\\{", beginCaptures: { 0: { name: "punctuation.section.embedded.begin.tsx" } }, contentName: "meta.embedded.expression.tsx", end: "\\}", endCaptures: { 0: { name: "punctuation.section.embedded.end.tsx" } }, patterns: [{ include: "#expression" }] }, "jsx-string-double-quoted": { begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.tsx" } }, end: '"', endCaptures: { 0: { name: "punctuation.definition.string.end.tsx" } }, name: "string.quoted.double.tsx", patterns: [{ include: "#jsx-entities" }] }, "jsx-string-single-quoted": { begin: "'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.tsx" } }, end: "'", endCaptures: { 0: { name: "punctuation.definition.string.end.tsx" } }, name: "string.quoted.single.tsx", patterns: [{ include: "#jsx-entities" }] }, "jsx-tag": { begin: "(?=(<)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))(?=((<\\s*)|(\\s+))(?!\\?)|\\/?>))", end: "(/>)|(?:(</)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))?\\s*(>))", endCaptures: { 1: { name: "punctuation.definition.tag.end.tsx" }, 2: { name: "punctuation.definition.tag.begin.tsx" }, 3: { name: "entity.name.tag.namespace.tsx" }, 4: { name: "punctuation.separator.namespace.tsx" }, 5: { name: "entity.name.tag.tsx" }, 6: { name: "support.class.component.tsx" }, 7: { name: "punctuation.definition.tag.end.tsx" } }, name: "meta.tag.tsx", patterns: [{ begin: "(<)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))(?=((<\\s*)|(\\s+))(?!\\?)|\\/?>)", beginCaptures: { 1: { name: "punctuation.definition.tag.begin.tsx" }, 2: { name: "entity.name.tag.namespace.tsx" }, 3: { name: "punctuation.separator.namespace.tsx" }, 4: { name: "entity.name.tag.tsx" }, 5: { name: "support.class.component.tsx" } }, end: "(?=[/]?>)", patterns: [{ include: "#comment" }, { include: "#type-arguments" }, { include: "#jsx-tag-attributes" }] }, { begin: "(>)", beginCaptures: { 1: { name: "punctuation.definition.tag.end.tsx" } }, contentName: "meta.jsx.children.tsx", end: "(?=</)", patterns: [{ include: "#jsx-children" }] }] }, "jsx-tag-attribute-assignment": { match: `=(?=\\s*(?:'|"|{|/\\*|//|\\n))`, name: "keyword.operator.assignment.tsx" }, "jsx-tag-attribute-name": { captures: { 1: { name: "entity.other.attribute-name.namespace.tsx" }, 2: { name: "punctuation.separator.namespace.tsx" }, 3: { name: "entity.other.attribute-name.tsx" } }, match: `(?x)
\\s*
(?:([_$[:alpha:]][-_$[:alnum:].]*)(:))?
([_$[:alpha:]][-_$[:alnum:]]*)
(?=\\s|=|/?>|/\\*|//)` }, "jsx-tag-attributes": { begin: "\\s+", end: "(?=[/]?>)", name: "meta.tag.attributes.tsx", patterns: [{ include: "#comment" }, { include: "#jsx-tag-attribute-name" }, { include: "#jsx-tag-attribute-assignment" }, { include: "#jsx-string-double-quoted" }, { include: "#jsx-string-single-quoted" }, { include: "#jsx-evaluated-code" }, { include: "#jsx-tag-attributes-illegal" }] }, "jsx-tag-attributes-illegal": { match: "\\S+", name: "invalid.illegal.attribute.tsx" }, "jsx-tag-in-expression": { begin: `(?x)
(?<!\\+\\+|--)(?<=[({\\[,?=>:*]|&&|\\|\\||\\?|\\*\\/|^await|[^\\._$[:alnum:]]await|^return|[^\\._$[:alnum:]]return|^default|[^\\._$[:alnum:]]default|^yield|[^\\._$[:alnum:]]yield|^)\\s*
(?!<\\s*[_$[:alpha:]][_$[:alnum:]]*((\\s+extends\\s+[^=>])|,))
(?=(<)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))(?=((<\\s*)|(\\s+))(?!\\?)|\\/?>))`, end: "(?!(<)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))(?=((<\\s*)|(\\s+))(?!\\?)|\\/?>))", patterns: [{ include: "#jsx-tag" }] }, "jsx-tag-without-attributes": { begin: "(<)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))?\\s*(>)", beginCaptures: { 1: { name: "punctuation.definition.tag.begin.tsx" }, 2: { name: "entity.name.tag.namespace.tsx" }, 3: { name: "punctuation.separator.namespace.tsx" }, 4: { name: "entity.name.tag.tsx" }, 5: { name: "support.class.component.tsx" }, 6: { name: "punctuation.definition.tag.end.tsx" } }, contentName: "meta.jsx.children.tsx", end: "(</)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))?\\s*(>)", endCaptures: { 1: { name: "punctuation.definition.tag.begin.tsx" }, 2: { name: "entity.name.tag.namespace.tsx" }, 3: { name: "punctuation.separator.namespace.tsx" }, 4: { name: "entity.name.tag.tsx" }, 5: { name: "support.class.component.tsx" }, 6: { name: "punctuation.definition.tag.end.tsx" } }, name: "meta.tag.without-attributes.tsx", patterns: [{ include: "#jsx-children" }] }, "jsx-tag-without-attributes-in-expression": { begin: "(?<!\\+\\+|--)(?<=[({\\[,?=>:*]|&&|\\|\\||\\?|\\*\\/|^await|[^\\._$[:alnum:]]await|^return|[^\\._$[:alnum:]]return|^default|[^\\._$[:alnum:]]default|^yield|[^\\._$[:alnum:]]yield|^)\\s*(?=(<)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))?\\s*(>))", end: "(?!(<)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))?\\s*(>))", patterns: [{ include: "#jsx-tag-without-attributes" }] }, label: { patterns: [{ begin: "([_$[:alpha:]][_$[:alnum:]]*)\\s*(:)(?=\\s*\\{)", beginCaptures: { 1: { name: "entity.name.label.tsx" }, 2: { name: "punctuation.separator.label.tsx" } }, end: "(?<=\\})", patterns: [{ include: "#decl-block" }] }, { captures: { 1: { name: "entity.name.label.tsx" }, 2: { name: "punctuation.separator.label.tsx" } }, match: "([_$[:alpha:]][_$[:alnum:]]*)\\s*(:)" }] }, literal: { patterns: [{ include: "#numeric-literal" }, { include: "#boolean-literal" }, { include: "#null-literal" }, { include: "#undefined-literal" }, { include: "#numericConstant-literal" }, { include: "#array-literal" }, { include: "#this-literal" }, { include: "#super-literal" }] }, "method-declaration": { patterns: [{ begin: "(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(override)\\s+)?(?:\\b(public|private|protected)\\s+)?(?:\\b(abstract)\\s+)?(?:\\b(async)\\s+)?\\s*\\b(constructor)\\b(?!:)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", beginCaptures: { 1: { name: "storage.modifier.tsx" }, 2: { name: "storage.modifier.tsx" }, 3: { name: "storage.modifier.tsx" }, 4: { name: "storage.modifier.async.tsx" }, 5: { name: "storage.type.tsx" } }, end: "(?=\\}|;|,|$)|(?<=\\})", name: "meta.method.declaration.tsx", patterns: [{ include: "#method-declaration-name" }, { include: "#function-body" }] }, { begin: "(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(override)\\s+)?(?:\\b(public|private|protected)\\s+)?(?:\\b(abstract)\\s+)?(?:\\b(async)\\s+)?(?:(?:\\s*\\b(new)\\b(?!:)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))|(?:(\\*)\\s*)?)(?=\\s*((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*))?[\\(])", beginCaptures: { 1: { name: "storage.modifier.tsx" }, 2: { name: "storage.modifier.tsx" }, 3: { name: "storage.modifier.tsx" }, 4: { name: "storage.modifier.async.tsx" }, 5: { name: "keyword.operator.new.tsx" }, 6: { name: "keyword.generator.asterisk.tsx" } }, end: "(?=\\}|;|,|$)|(?<=\\})", name: "meta.method.declaration.tsx", patterns: [{ include: "#method-declaration-name" }, { include: "#function-body" }] }, { begin: `(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(override)\\s+)?(?:\\b(public|private|protected)\\s+)?(?:\\b(abstract)\\s+)?(?:\\b(async)\\s+)?(?:\\b(get|set)\\s+)?(?:(\\*)\\s*)?(?=\\s*(((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??))\\s*((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*))?[\\(])`, beginCaptures: { 1: { name: "storage.modifier.tsx" }, 2: { name: "storage.modifier.tsx" }, 3: { name: "storage.modifier.tsx" }, 4: { name: "storage.modifier.async.tsx" }, 5: { name: "storage.type.property.tsx" }, 6: { name: "keyword.generator.asterisk.tsx" } }, end: "(?=\\}|;|,|$)|(?<=\\})", name: "meta.method.declaration.tsx", patterns: [{ include: "#method-declaration-name" }, { include: "#function-body" }] }] }, "method-declaration-name": { begin: `(?x)(?=((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??)\\s*[\\(\\<])`, end: "(?=\\(|\\<)", patterns: [{ include: "#string" }, { include: "#array-literal" }, { include: "#numeric-literal" }, { match: "[_$[:alpha:]][_$[:alnum:]]*", name: "meta.definition.method.tsx entity.name.function.tsx" }, { match: "\\?", name: "keyword.operator.optional.tsx" }] }, "namespace-declaration": { begin: "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(namespace|module)\\s+(?=[_$[:alpha:]\"'`]))", beginCaptures: { 1: { name: "keyword.control.export.tsx" }, 2: { name: "storage.modifier.tsx" }, 3: { name: "storage.type.namespace.tsx" } }, end: "(?<=\\})|(?=;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))", name: "meta.namespace.declaration.tsx", patterns: [{ include: "#comment" }, { include: "#string" }, { match: "([_$[:alpha:]][_$[:alnum:]]*)", name: "entity.name.type.module.tsx" }, { include: "#punctuation-accessor" }, { include: "#decl-block" }] }, "new-expr": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(new)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", beginCaptures: { 1: { name: "keyword.operator.new.tsx" } }, end: "(?<=\\))|(?=[;),}\\]:?\\-\\+\\>]|\\|\\||\\&\\&|\\!\\=\\=|$|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))new(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))function((\\s+[_$[:alpha:]][_$[:alnum:]]*)|(\\s*[\\(]))))", name: "new.expr.tsx", patterns: [{ include: "#expression" }] }, "null-literal": { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))null(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "constant.language.null.tsx" }, "numeric-literal": { patterns: [{ captures: { 1: { name: "storage.type.numeric.bigint.tsx" } }, match: "\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$)", name: "constant.numeric.hex.tsx" }, { captures: { 1: { name: "storage.type.numeric.bigint.tsx" } }, match: "\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$)", name: "constant.numeric.binary.tsx" }, { captures: { 1: { name: "storage.type.numeric.bigint.tsx" } }, match: "\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$)", name: "constant.numeric.octal.tsx" }, { captures: { 0: { name: "constant.numeric.decimal.tsx" }, 1: { name: "meta.delimiter.decimal.period.tsx" }, 2: { name: "storage.type.numeric.bigint.tsx" }, 3: { name: "meta.delimiter.decimal.period.tsx" }, 4: { name: "storage.type.numeric.bigint.tsx" }, 5: { name: "meta.delimiter.decimal.period.tsx" }, 6: { name: "storage.type.numeric.bigint.tsx" }, 7: { name: "storage.type.numeric.bigint.tsx" }, 8: { name: "meta.delimiter.decimal.period.tsx" }, 9: { name: "storage.type.numeric.bigint.tsx" }, 10: { name: "meta.delimiter.decimal.period.tsx" }, 11: { name: "storage.type.numeric.bigint.tsx" }, 12: { name: "meta.delimiter.decimal.period.tsx" }, 13: { name: "storage.type.numeric.bigint.tsx" }, 14: { name: "storage.type.numeric.bigint.tsx" } }, match: `(?x)
(?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$)` }] }, "numericConstant-literal": { patterns: [{ match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))NaN(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "constant.language.nan.tsx" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Infinity(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "constant.language.infinity.tsx" }] }, "object-binding-element": { patterns: [{ include: "#comment" }, { begin: `(?x)(?=((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(:))`, end: "(?=,|\\})", patterns: [{ include: "#object-binding-element-propertyName" }, { include: "#binding-element" }] }, { include: "#object-binding-pattern" }, { include: "#destructuring-variable-rest" }, { include: "#variable-initializer" }, { include: "#punctuation-comma" }] }, "object-binding-element-const": { patterns: [{ include: "#comment" }, { begin: `(?x)(?=((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(:))`, end: "(?=,|\\})", patterns: [{ include: "#object-binding-element-propertyName" }, { include: "#binding-element-const" }] }, { include: "#object-binding-pattern-const" }, { include: "#destructuring-variable-rest-const" }, { include: "#variable-initializer" }, { include: "#punctuation-comma" }] }, "object-binding-element-propertyName": { begin: `(?x)(?=((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(:))`, end: "(:)", endCaptures: { 0: { name: "punctuation.destructuring.tsx" } }, patterns: [{ include: "#string" }, { include: "#array-literal" }, { include: "#numeric-literal" }, { match: "([_$[:alpha:]][_$[:alnum:]]*)", name: "variable.object.property.tsx" }] }, "object-binding-pattern": { begin: "(?:(\\.\\.\\.)\\s*)?(\\{)", beginCaptures: { 1: { name: "keyword.operator.rest.tsx" }, 2: { name: "punctuation.definition.binding-pattern.object.tsx" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.binding-pattern.object.tsx" } }, patterns: [{ include: "#object-binding-element" }] }, "object-binding-pattern-const": { begin: "(?:(\\.\\.\\.)\\s*)?(\\{)", beginCaptures: { 1: { name: "keyword.operator.rest.tsx" }, 2: { name: "punctuation.definition.binding-pattern.object.tsx" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.binding-pattern.object.tsx" } }, patterns: [{ include: "#object-binding-element-const" }] }, "object-identifiers": { patterns: [{ match: "([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*\\??\\.\\s*prototype\\b(?!\\$))", name: "support.class.tsx" }, { captures: { 1: { name: "punctuation.accessor.tsx" }, 2: { name: "punctuation.accessor.optional.tsx" }, 3: { name: "variable.other.constant.object.property.tsx" }, 4: { name: "variable.other.object.property.tsx" } }, match: `(?x)(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(?:
(\\#?[[:upper:]][_$[:digit:][:upper:]]*) |
(\\#?[_$[:alpha:]][_$[:alnum:]]*)
)(?=\\s*\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*)` }, { captures: { 1: { name: "variable.other.constant.object.tsx" }, 2: { name: "variable.other.object.tsx" } }, match: `(?x)(?:
([[:upper:]][_$[:digit:][:upper:]]*) |
([_$[:alpha:]][_$[:alnum:]]*)
)(?=\\s*\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*)` }] }, "object-literal": { begin: "\\{", beginCaptures: { 0: { name: "punctuation.definition.block.tsx" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.block.tsx" } }, name: "meta.objectliteral.tsx", patterns: [{ include: "#object-member" }] }, "object-literal-method-declaration": { begin: `(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(async)\\s+)?(?:\\b(get|set)\\s+)?(?:(\\*)\\s*)?(?=\\s*(((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??))\\s*((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*))?[\\(])`, beginCaptures: { 1: { name: "storage.modifier.async.tsx" }, 2: { name: "storage.type.property.tsx" }, 3: { name: "keyword.generator.asterisk.tsx" } }, end: "(?=\\}|;|,)|(?<=\\})", name: "meta.method.declaration.tsx", patterns: [{ include: "#method-declaration-name" }, { include: "#function-body" }, { begin: `(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(async)\\s+)?(?:\\b(get|set)\\s+)?(?:(\\*)\\s*)?(?=\\s*(((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??))\\s*((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*))?[\\(])`, beginCaptures: { 1: { name: "storage.modifier.async.tsx" }, 2: { name: "storage.type.property.tsx" }, 3: { name: "keyword.generator.asterisk.tsx" } }, end: "(?=\\(|\\<)", patterns: [{ include: "#method-declaration-name" }] }] }, "object-member": { patterns: [{ include: "#comment" }, { include: "#object-literal-method-declaration" }, { begin: "(?=\\[)", end: "(?=:)|((?<=[\\]])(?=\\s*[\\(\\<]))", name: "meta.object.member.tsx meta.object-literal.key.tsx", patterns: [{ include: "#comment" }, { include: "#array-literal" }] }, { begin: "(?=[\\'\\\"\\`])", end: "(?=:)|((?<=[\\'\\\"\\`])(?=((\\s*[\\(\\<,}])|(\\s+(as|satisifies)\\s+))))", name: "meta.object.member.tsx meta.object-literal.key.tsx", patterns: [{ include: "#comment" }, { include: "#string" }] }, { begin: `(?x)(?=(\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$)))`, end: "(?=:)|(?=\\s*([\\(\\<,}])|(\\s+as|satisifies\\s+))", name: "meta.object.member.tsx meta.object-literal.key.tsx", patterns: [{ include: "#comment" }, { include: "#numeric-literal" }] }, { begin: "(?<=[\\]\\'\\\"\\`])(?=\\s*[\\(\\<])", end: "(?=\\}|;|,)|(?<=\\})", name: "meta.method.declaration.tsx", patterns: [{ include: "#function-body" }] }, { captures: { 0: { name: "meta.object-literal.key.tsx" }, 1: { name: "constant.numeric.decimal.tsx" } }, match: "(?![_$[:alpha:]])([[:digit:]]+)\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*:)", name: "meta.object.member.tsx" }, { captures: { 0: { name: "meta.object-literal.key.tsx" }, 1: { name: "entity.name.function.tsx" } }, match: `(?x)(?:([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*:(\\s*\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/)*\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |
(
[<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]
) |
# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
)))`, name: "meta.object.member.tsx" }, { captures: { 0: { name: "meta.object-literal.key.tsx" } }, match: "(?:[_$[:alpha:]][_$[:alnum:]]*)\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*:)", name: "meta.object.member.tsx" }, { begin: "\\.\\.\\.", beginCaptures: { 0: { name: "keyword.operator.spread.tsx" } }, end: "(?=,|\\})", name: "meta.object.member.tsx", patterns: [{ include: "#expression" }] }, { captures: { 1: { name: "variable.other.readwrite.tsx" } }, match: "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=,|\\}|$|\\/\\/|\\/\\*)", name: "meta.object.member.tsx" }, { captures: { 1: { name: "keyword.control.as.tsx" }, 2: { name: "storage.modifier.tsx" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(as)\\s+(const)(?=\\s*([,}]|$))", name: "meta.object.member.tsx" }, { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(as)|(satisfies))\\s+", beginCaptures: { 1: { name: "keyword.control.as.tsx" }, 2: { name: "keyword.control.satisfies.tsx" } }, end: "(?=[;),}\\]:?\\-\\+\\>]|\\|\\||\\&\\&|\\!\\=\\=|$|^|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(as|satisifies)\\s+))", name: "meta.object.member.tsx", patterns: [{ include: "#type" }] }, { begin: "(?=[_$[:alpha:]][_$[:alnum:]]*\\s*=)", end: "(?=,|\\}|$|\\/\\/|\\/\\*)", name: "meta.object.member.tsx", patterns: [{ include: "#expression" }] }, { begin: ":", beginCaptures: { 0: { name: "meta.object-literal.key.tsx punctuation.separator.key-value.tsx" } }, end: "(?=,|\\})", name: "meta.object.member.tsx", patterns: [{ begin: "(?<=:)\\s*(async)?(?=\\s*(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)\\(\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))", beginCaptures: { 1: { name: "storage.modifier.async.tsx" } }, end: "(?<=\\))", patterns: [{ include: "#type-parameters" }, { begin: "\\(", beginCaptures: { 0: { name: "meta.brace.round.tsx" } }, end: "\\)", endCaptures: { 0: { name: "meta.brace.round.tsx" } }, patterns: [{ include: "#expression-inside-possibly-arrow-parens" }] }] }, { begin: "(?<=:)\\s*(async)?\\s*(\\()(?=\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))", beginCaptures: { 1: { name: "storage.modifier.async.tsx" }, 2: { name: "meta.brace.round.tsx" } }, end: "\\)", endCaptures: { 0: { name: "meta.brace.round.tsx" } }, patterns: [{ include: "#expression-inside-possibly-arrow-parens" }] }, { begin: "(?<=:)\\s*(async)?\\s*(?=\\<\\s*$)", beginCaptures: { 1: { name: "storage.modifier.async.tsx" } }, end: "(?<=\\>)", patterns: [{ include: "#type-parameters" }] }, { begin: "(?<=\\>)\\s*(\\()(?=\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))", beginCaptures: { 1: { name: "meta.brace.round.tsx" } }, end: "\\)", endCaptures: { 0: { name: "meta.brace.round.tsx" } }, patterns: [{ include: "#expression-inside-possibly-arrow-parens" }] }, { include: "#possibly-arrow-return-type" }, { include: "#expression" }] }, { include: "#punctuation-comma" }, { include: "#decl-block" }] }, "parameter-array-binding-pattern": { begin: "(?:(\\.\\.\\.)\\s*)?(\\[)", beginCaptures: { 1: { name: "keyword.operator.rest.tsx" }, 2: { name: "punctuation.definition.binding-pattern.array.tsx" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.binding-pattern.array.tsx" } }, patterns: [{ include: "#parameter-binding-element" }, { include: "#punctuation-comma" }] }, "parameter-binding-element": { patterns: [{ include: "#comment" }, { include: "#string" }, { include: "#numeric-literal" }, { include: "#regex" }, { include: "#parameter-object-binding-pattern" }, { include: "#parameter-array-binding-pattern" }, { include: "#destructuring-parameter-rest" }, { include: "#variable-initializer" }] }, "parameter-name": { patterns: [{ captures: { 1: { name: "storage.modifier.tsx" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(override|public|protected|private|readonly)\\s+(?=(override|public|protected|private|readonly)\\s+)" }, { captures: { 1: { name: "storage.modifier.tsx" }, 2: { name: "keyword.operator.rest.tsx" }, 3: { name: "entity.name.function.tsx variable.language.this.tsx" }, 4: { name: "entity.name.function.tsx" }, 5: { name: "keyword.operator.optional.tsx" } }, match: `(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(override|public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*(\\??)(?=\\s*
# function assignment |
(=\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |
(
[<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]
) |
# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
)) |
# typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>
(:\\s*(
(<) |
([(]\\s*(
([)]) |
(\\.\\.\\.) |
([_$[:alnum:]]+\\s*(
([:,?=])|
([)]\\s*=>)
))
))
)) |
(:\\s*(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Function(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |
(:\\s*((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))) |
(:\\s*(=>|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(<[^<>]*>)|[^<>(),=])+=\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |
(
[<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]
) |
# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
)))` }, { captures: { 1: { name: "storage.modifier.tsx" }, 2: { name: "keyword.operator.rest.tsx" }, 3: { name: "variable.parameter.tsx variable.language.this.tsx" }, 4: { name: "variable.parameter.tsx" }, 5: { name: "keyword.operator.optional.tsx" } }, match: "(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(override|public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*(\\??)" }] }, "parameter-object-binding-element": { patterns: [{ include: "#comment" }, { begin: `(?x)(?=((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(:))`, end: "(?=,|\\})", patterns: [{ include: "#object-binding-element-propertyName" }, { include: "#parameter-binding-element" }, { include: "#paren-expression" }] }, { include: "#parameter-object-binding-pattern" }, { include: "#destructuring-parameter-rest" }, { include: "#variable-initializer" }, { include: "#punctuation-comma" }] }, "parameter-object-binding-pattern": { begin: "(?:(\\.\\.\\.)\\s*)?(\\{)", beginCaptures: { 1: { name: "keyword.operator.rest.tsx" }, 2: { name: "punctuation.definition.binding-pattern.object.tsx" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.binding-pattern.object.tsx" } }, patterns: [{ include: "#parameter-object-binding-element" }] }, "parameter-type-annotation": { patterns: [{ begin: "(:)", beginCaptures: { 1: { name: "keyword.operator.type.annotation.tsx" } }, end: "(?=[,)])|(?==[^>])", name: "meta.type.annotation.tsx", patterns: [{ include: "#type" }] }] }, "paren-expression": { begin: "\\(", beginCaptures: { 0: { name: "meta.brace.round.tsx" } }, end: "\\)", endCaptures: { 0: { name: "meta.brace.round.tsx" } }, patterns: [{ include: "#expression" }] }, "paren-expression-possibly-arrow": { patterns: [{ begin: "(?<=[(=,])\\s*(async)?(?=\\s*((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*))?\\(\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))", beginCaptures: { 1: { name: "storage.modifier.async.tsx" } }, end: "(?<=\\))", patterns: [{ include: "#paren-expression-possibly-arrow-with-typeparameters" }] }, { begin: "(?<=[(=,]|=>|^return|[^\\._$[:alnum:]]return)\\s*(async)?(?=\\s*((((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*))?\\()|(<)|((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)))\\s*$)", beginCaptures: { 1: { name: "storage.modifier.async.tsx" } }, end: "(?<=\\))", patterns: [{ include: "#paren-expression-possibly-arrow-with-typeparameters" }] }, { include: "#possibly-arrow-return-type" }] }, "paren-expression-possibly-arrow-with-typeparameters": { patterns: [{ include: "#type-parameters" }, { begin: "\\(", beginCaptures: { 0: { name: "meta.brace.round.tsx" } }, end: "\\)", endCaptures: { 0: { name: "meta.brace.round.tsx" } }, patterns: [{ include: "#expression-inside-possibly-arrow-parens" }] }] }, "possibly-arrow-return-type": { begin: "(?<=\\)|^)\\s*(:)(?=\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*=>)", beginCaptures: { 1: { name: "meta.arrow.tsx meta.return.type.arrow.tsx keyword.operator.type.annotation.tsx" } }, contentName: "meta.arrow.tsx meta.return.type.arrow.tsx", end: "(?==>|\\{|(^\\s*(export|function|class|interface|let|var|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|const|import|enum|namespace|module|type|abstract|declare)\\s+))", patterns: [{ include: "#arrow-return-type-body" }] }, "property-accessor": { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(accessor|get|set)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "storage.type.property.tsx" }, "punctuation-accessor": { captures: { 1: { name: "punctuation.accessor.tsx" }, 2: { name: "punctuation.accessor.optional.tsx" } }, match: "(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))" }, "punctuation-comma": { match: ",", name: "punctuation.separator.comma.tsx" }, "punctuation-semicolon": { match: ";", name: "punctuation.terminator.statement.tsx" }, "qstring-double": { begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.tsx" } }, end: '(")|((?:[^\\\\\\n])$)', endCaptures: { 1: { name: "punctuation.definition.string.end.tsx" }, 2: { name: "invalid.illegal.newline.tsx" } }, name: "string.quoted.double.tsx", patterns: [{ include: "#string-character-escape" }] }, "qstring-single": { begin: "'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.tsx" } }, end: "(\\')|((?:[^\\\\\\n])$)", endCaptures: { 1: { name: "punctuation.definition.string.end.tsx" }, 2: { name: "invalid.illegal.newline.tsx" } }, name: "string.quoted.single.tsx", patterns: [{ include: "#string-character-escape" }] }, regex: { patterns: [{ begin: "(?<!\\+\\+|--|})(?<=[=(:,\\[?+!]|^return|[^\\._$[:alnum:]]return|^case|[^\\._$[:alnum:]]case|=>|&&|\\|\\||\\*\\/)\\s*(\\/)(?![\\/*])(?=(?:[^\\/\\\\\\[\\()]|\\\\.|\\[([^\\]\\\\]|\\\\.)+\\]|\\(([^\\)\\\\]|\\\\.)+\\))+\\/([dgimsuy]+|(?![\\/\\*])|(?=\\/\\*))(?!\\s*[a-zA-Z0-9_$]))", beginCaptures: { 1: { name: "punctuation.definition.string.begin.tsx" } }, end: "(/)([dgimsuy]*)", endCaptures: { 1: { name: "punctuation.definition.string.end.tsx" }, 2: { name: "keyword.other.tsx" } }, name: "string.regexp.tsx", patterns: [{ include: "#regexp" }] }, { begin: "((?<![_$[:alnum:])\\]]|\\+\\+|--|}|\\*\\/)|((?<=^return|[^\\._$[:alnum:]]return|^case|[^\\._$[:alnum:]]case))\\s*)\\/(?![\\/*])(?=(?:[^\\/\\\\\\[]|\\\\.|\\[([^\\]\\\\]|\\\\.)*\\])+\\/([dgimsuy]+|(?![\\/\\*])|(?=\\/\\*))(?!\\s*[a-zA-Z0-9_$]))", beginCaptures: { 0: { name: "punctuation.definition.string.begin.tsx" } }, end: "(/)([dgimsuy]*)", endCaptures: { 1: { name: "punctuation.definition.string.end.tsx" }, 2: { name: "keyword.other.tsx" } }, name: "string.regexp.tsx", patterns: [{ include: "#regexp" }] }] }, "regex-character-class": { patterns: [{ match: "\\\\[wWsSdDtrnvf]|\\.", name: "constant.other.character-class.regexp" }, { match: "\\\\([0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4})", name: "constant.character.numeric.regexp" }, { match: "\\\\c[A-Z]", name: "constant.character.control.regexp" }, { match: "\\\\.", name: "constant.character.escape.backslash.regexp" }] }, regexp: { patterns: [{ match: "\\\\[bB]|\\^|\\$", name: "keyword.control.anchor.regexp" }, { captures: { 0: { name: "keyword.other.back-reference.regexp" }, 1: { name: "variable.other.regexp" } }, match: "\\\\[1-9]\\d*|\\\\k<([a-zA-Z_$][\\w$]*)>" }, { match: "[?+*]|\\{(\\d+,\\d+|\\d+,|,\\d+|\\d+)\\}\\??", name: "keyword.operator.quantifier.regexp" }, { match: "\\|", name: "keyword.operator.or.regexp" }, { begin: "(\\()((\\?=)|(\\?!)|(\\?<=)|(\\?<!))", beginCaptures: { 1: { name: "punctuation.definition.group.regexp" }, 2: { name: "punctuation.definition.group.assertion.regexp" }, 3: { name: "meta.assertion.look-ahead.regexp" }, 4: { name: "meta.assertion.negative-look-ahead.regexp" }, 5: { name: "meta.assertion.look-behind.regexp" }, 6: { name: "meta.assertion.negative-look-behind.regexp" } }, end: "(\\))", endCaptures: { 1: { name: "punctuation.definition.group.regexp" } }, name: "meta.group.assertion.regexp", patterns: [{ include: "#regexp" }] }, { begin: "\\((?:(\\?:)|(?:\\?<([a-zA-Z_$][\\w$]*)>))?", beginCaptures: { 0: { name: "punctuation.definition.group.regexp" }, 1: { name: "punctuation.definition.group.no-capture.regexp" }, 2: { name: "variable.other.regexp" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.regexp" } }, name: "meta.group.regexp", patterns: [{ include: "#regexp" }] }, { begin: "(\\[)(\\^)?", beginCaptures: { 1: { name: "punctuation.definition.character-class.regexp" }, 2: { name: "keyword.operator.negation.regexp" } }, end: "(\\])", endCaptures: { 1: { name: "punctuation.definition.character-class.regexp" } }, name: "constant.other.character-class.set.regexp", patterns: [{ captures: { 1: { name: "constant.character.numeric.regexp" }, 2: { name: "constant.character.control.regexp" }, 3: { name: "constant.character.escape.backslash.regexp" }, 4: { name: "constant.character.numeric.regexp" }, 5: { name: "constant.character.control.regexp" }, 6: { name: "constant.character.escape.backslash.regexp" } }, match: "(?:.|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))\\-(?:[^\\]\\\\]|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))", name: "constant.other.character-class.range.regexp" }, { include: "#regex-character-class" }] }, { include: "#regex-character-class" }] }, "return-type": { patterns: [{ begin: "(?<=\\))\\s*(:)(?=\\s*\\S)", beginCaptures: { 1: { name: "keyword.operator.type.annotation.tsx" } }, end: "(?<![:|&])(?=$|^|[{};,]|//)", name: "meta.return.type.tsx", patterns: [{ include: "#return-type-core" }] }, { begin: "(?<=\\))\\s*(:)", beginCaptures: { 1: { name: "keyword.operator.type.annotation.tsx" } }, end: "(?<![:|&])((?=[{};,]|//|^\\s*$)|((?<=\\S)(?=\\s*$)))", name: "meta.return.type.tsx", patterns: [{ include: "#return-type-core" }] }] }, "return-type-core": { patterns: [{ include: "#comment" }, { begin: "(?<=[:|&])(?=\\s*\\{)", end: "(?<=\\})", patterns: [{ include: "#type-object" }] }, { include: "#type-predicate-operator" }, { include: "#type" }] }, shebang: { captures: { 1: { name: "punctuation.definition.comment.tsx" } }, match: "\\A(#!).*(?=$)", name: "comment.line.shebang.tsx" }, "single-line-comment-consuming-line-ending": { begin: "(^[ \\t]+)?((//)(?:\\s*((@)internal)(?=\\s|$))?)", beginCaptures: { 1: { name: "punctuation.whitespace.comment.leading.tsx" }, 2: { name: "comment.line.double-slash.tsx" }, 3: { name: "punctuation.definition.comment.tsx" }, 4: { name: "storage.type.internaldeclaration.tsx" }, 5: { name: "punctuation.decorator.internaldeclaration.tsx" } }, contentName: "comment.line.double-slash.tsx", end: "(?=^)" }, statements: { patterns: [{ include: "#declaration" }, { include: "#control-statement" }, { include: "#after-operator-block-as-object-literal" }, { include: "#decl-block" }, { include: "#label" }, { include: "#expression" }, { include: "#punctuation-semicolon" }, { include: "#string" }, { include: "#comment" }] }, string: { patterns: [{ include: "#qstring-single" }, { include: "#qstring-double" }, { include: "#template" }] }, "string-character-escape": { match: "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|u\\{[0-9A-Fa-f]+\\}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)", name: "constant.character.escape.tsx" }, "super-literal": { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))super\\b(?!\\$)", name: "variable.language.super.tsx" }, "support-function-call-identifiers": { patterns: [{ include: "#literal" }, { include: "#support-objects" }, { include: "#object-identifiers" }, { include: "#punctuation-accessor" }, { match: "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))import(?=\\s*[\\(]\\s*[\\\"\\'\\`]))", name: "keyword.operator.expression.import.tsx" }] }, "support-objects": { patterns: [{ match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(arguments)\\b(?!\\$)", name: "variable.language.arguments.tsx" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(Promise)\\b(?!\\$)", name: "support.class.promise.tsx" }, { captures: { 1: { name: "keyword.control.import.tsx" }, 2: { name: "punctuation.accessor.tsx" }, 3: { name: "punctuation.accessor.optional.tsx" }, 4: { name: "support.variable.property.importmeta.tsx" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(import)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(meta)\\b(?!\\$)" }, { captures: { 1: { name: "keyword.operator.new.tsx" }, 2: { name: "punctuation.accessor.tsx" }, 3: { name: "punctuation.accessor.optional.tsx" }, 4: { name: "support.variable.property.target.tsx" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(new)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(target)\\b(?!\\$)" }, { captures: { 1: { name: "punctuation.accessor.tsx" }, 2: { name: "punctuation.accessor.optional.tsx" }, 3: { name: "support.variable.property.tsx" }, 4: { name: "support.constant.tsx" } }, match: `(?x) (?:(\\.)|(\\?\\.(?!\\s*[[:digit:]]))) \\s* (?:
(?:(constructor|length|prototype|__proto__)\\b(?!\\$|\\s*(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\\())
|
(?:(EPSILON|MAX_SAFE_INTEGER|MAX_VALUE|MIN_SAFE_INTEGER|MIN_VALUE|NEGATIVE_INFINITY|POSITIVE_INFINITY)\\b(?!\\$)))` }, { captures: { 1: { name: "support.type.object.module.tsx" }, 2: { name: "support.type.object.module.tsx" }, 3: { name: "punctuation.accessor.tsx" }, 4: { name: "punctuation.accessor.optional.tsx" }, 5: { name: "support.type.object.module.tsx" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(exports)|(module)(?:(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))(exports|id|filename|loaded|parent|children))?)\\b(?!\\$)" }] }, "switch-statement": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?=\\bswitch\\s*\\()", end: "\\}", endCaptures: { 0: { name: "punctuation.definition.block.tsx" } }, name: "switch-statement.expr.tsx", patterns: [{ include: "#comment" }, { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(switch)\\s*(\\()", beginCaptures: { 1: { name: "keyword.control.switch.tsx" }, 2: { name: "meta.brace.round.tsx" } }, end: "\\)", endCaptures: { 0: { name: "meta.brace.round.tsx" } }, name: "switch-expression.expr.tsx", patterns: [{ include: "#expression" }] }, { begin: "\\{", beginCaptures: { 0: { name: "punctuation.definition.block.tsx" } }, end: "(?=\\})", name: "switch-block.expr.tsx", patterns: [{ begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(case|default(?=:))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", beginCaptures: { 1: { name: "keyword.control.switch.tsx" } }, end: "(?=:)", name: "case-clause.expr.tsx", patterns: [{ include: "#expression" }] }, { begin: "(:)\\s*(\\{)", beginCaptures: { 1: { name: "case-clause.expr.tsx punctuation.definition.section.case-statement.tsx" }, 2: { name: "meta.block.tsx punctuation.definition.block.tsx" } }, contentName: "meta.block.tsx", end: "\\}", endCaptures: { 0: { name: "meta.block.tsx punctuation.definition.block.tsx" } }, patterns: [{ include: "#statements" }] }, { captures: { 0: { name: "case-clause.expr.tsx punctuation.definition.section.case-statement.tsx" } }, match: "(:)" }, { include: "#statements" }] }] }, template: { patterns: [{ include: "#template-call" }, { begin: "([_$[:alpha:]][_$[:alnum:]]*)?(`)", beginCaptures: { 1: { name: "entity.name.function.tagged-template.tsx" }, 2: { name: "string.template.tsx punctuation.definition.string.template.begin.tsx" } }, contentName: "string.template.tsx", end: "`", endCaptures: { 0: { name: "string.template.tsx punctuation.definition.string.template.end.tsx" } }, patterns: [{ include: "#template-substitution-element" }, { include: "#string-character-escape" }] }] }, "template-call": { patterns: [{ begin: "(?=(([_$[:alpha:]][_$[:alnum:]]*\\s*\\??\\.\\s*)*|(\\??\\.\\s*)?)([_$[:alpha:]][_$[:alnum:]]*)(<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?`)", end: "(?=`)", patterns: [{ begin: "(?=(([_$[:alpha:]][_$[:alnum:]]*\\s*\\??\\.\\s*)*|(\\??\\.\\s*)?)([_$[:alpha:]][_$[:alnum:]]*))", end: "(?=(<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?`)", patterns: [{ include: "#support-function-call-identifiers" }, { match: "([_$[:alpha:]][_$[:alnum:]]*)", name: "entity.name.function.tagged-template.tsx" }] }, { include: "#type-arguments" }] }, { begin: "([_$[:alpha:]][_$[:alnum:]]*)?\\s*(?=(<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)`)", beginCaptures: { 1: { name: "entity.name.function.tagged-template.tsx" } }, end: "(?=`)", patterns: [{ include: "#type-arguments" }] }] }, "template-substitution-element": { begin: "\\$\\{", beginCaptures: { 0: { name: "punctuation.definition.template-expression.begin.tsx" } }, contentName: "meta.embedded.line.tsx", end: "\\}", endCaptures: { 0: { name: "punctuation.definition.template-expression.end.tsx" } }, name: "meta.template.expression.tsx", patterns: [{ include: "#expression" }] }, "template-type": { patterns: [{ include: "#template-call" }, { begin: "([_$[:alpha:]][_$[:alnum:]]*)?(`)", beginCaptures: { 1: { name: "entity.name.function.tagged-template.tsx" }, 2: { name: "string.template.tsx punctuation.definition.string.template.begin.tsx" } }, contentName: "string.template.tsx", end: "`", endCaptures: { 0: { name: "string.template.tsx punctuation.definition.string.template.end.tsx" } }, patterns: [{ include: "#template-type-substitution-element" }, { include: "#string-character-escape" }] }] }, "template-type-substitution-element": { begin: "\\$\\{", beginCaptures: { 0: { name: "punctuation.definition.template-expression.begin.tsx" } }, contentName: "meta.embedded.line.tsx", end: "\\}", endCaptures: { 0: { name: "punctuation.definition.template-expression.end.tsx" } }, name: "meta.template.expression.tsx", patterns: [{ include: "#type" }] }, "ternary-expression": { begin: "(?!\\?\\.\\s*[^[:digit:]])(\\?)(?!\\?)", beginCaptures: { 1: { name: "keyword.operator.ternary.tsx" } }, end: "\\s*(:)", endCaptures: { 1: { name: "keyword.operator.ternary.tsx" } }, patterns: [{ include: "#expression" }] }, "this-literal": { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))this\\b(?!\\$)", name: "variable.language.this.tsx" }, type: { patterns: [{ include: "#comment" }, { include: "#type-string" }, { include: "#numeric-literal" }, { include: "#type-primitive" }, { include: "#type-builtin-literals" }, { include: "#type-parameters" }, { include: "#type-tuple" }, { include: "#type-object" }, { include: "#type-operators" }, { include: "#type-conditional" }, { include: "#type-fn-type-parameters" }, { include: "#type-paren-or-function-parameters" }, { include: "#type-function-return-type" }, { captures: { 1: { name: "storage.modifier.tsx" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(readonly)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*" }, { include: "#type-name" }] }, "type-alias-declaration": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(type)\\b\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*", beginCaptures: { 1: { name: "keyword.control.export.tsx" }, 2: { name: "storage.modifier.tsx" }, 3: { name: "storage.type.type.tsx" }, 4: { name: "entity.name.type.alias.tsx" } }, end: "(?=\\}|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))", name: "meta.type.declaration.tsx", patterns: [{ include: "#comment" }, { include: "#type-parameters" }, { begin: "(=)\\s*(intrinsic)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", beginCaptures: { 1: { name: "keyword.operator.assignment.tsx" }, 2: { name: "keyword.control.intrinsic.tsx" } }, end: "(?=\\}|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))", patterns: [{ include: "#type" }] }, { begin: "(=)\\s*", beginCaptures: { 1: { name: "keyword.operator.assignment.tsx" } }, end: "(?=\\}|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))", patterns: [{ include: "#type" }] }] }, "type-annotation": { patterns: [{ begin: "(:)(?=\\s*\\S)", beginCaptures: { 1: { name: "keyword.operator.type.annotation.tsx" } }, end: "(?<![:|&])(?!\\s*[|&]\\s+)((?=^|[,);\\}\\]]|//)|(?==[^>])|((?<=[\\}>\\]\\)]|[_$[:alpha:]])\\s*(?=\\{)))", name: "meta.type.annotation.tsx", patterns: [{ include: "#type" }] }, { begin: "(:)", beginCaptures: { 1: { name: "keyword.operator.type.annotation.tsx" } }, end: "(?<![:|&])((?=[,);\\}\\]]|\\/\\/)|(?==[^>])|(?=^\\s*$)|((?<=[\\}>\\]\\)]|[_$[:alpha:]])\\s*(?=\\{)))", name: "meta.type.annotation.tsx", patterns: [{ include: "#type" }] }] }, "type-arguments": { begin: "\\<", beginCaptures: { 0: { name: "punctuation.definition.typeparameters.begin.tsx" } }, end: "\\>", endCaptures: { 0: { name: "punctuation.definition.typeparameters.end.tsx" } }, name: "meta.type.parameters.tsx", patterns: [{ include: "#type-arguments-body" }] }, "type-arguments-body": { patterns: [{ captures: { 0: { name: "keyword.operator.type.tsx" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(_)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))" }, { include: "#type" }, { include: "#punctuation-comma" }] }, "type-builtin-literals": { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(this|true|false|undefined|null|object)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "support.type.builtin.tsx" }, "type-conditional": { patterns: [{ begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(extends)\\s+", beginCaptures: { 1: { name: "storage.modifier.tsx" } }, end: "(?<=:)", patterns: [{ begin: "\\?", beginCaptures: { 0: { name: "keyword.operator.ternary.tsx" } }, end: ":", endCaptures: { 0: { name: "keyword.operator.ternary.tsx" } }, patterns: [{ include: "#type" }] }, { include: "#type" }] }] }, "type-fn-type-parameters": { patterns: [{ begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(abstract)\\s+)?(new)\\b(?=\\s*\\<)", beginCaptures: { 1: { name: "meta.type.constructor.tsx storage.modifier.tsx" }, 2: { name: "meta.type.constructor.tsx keyword.control.new.tsx" } }, end: "(?<=>)", patterns: [{ include: "#comment" }, { include: "#type-parameters" }] }, { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(abstract)\\s+)?(new)\\b\\s*(?=\\()", beginCaptures: { 1: { name: "storage.modifier.tsx" }, 2: { name: "keyword.control.new.tsx" } }, end: "(?<=\\))", name: "meta.type.constructor.tsx", patterns: [{ include: "#function-parameters" }] }, { begin: `(?x)(
(?=
[(]\\s*(
([)]) |
(\\.\\.\\.) |
([_$[:alnum:]]+\\s*(
([:,?=])|
([)]\\s*=>)
))
)
)
)`, end: "(?<=\\))", name: "meta.type.function.tsx", patterns: [{ include: "#function-parameters" }] }] }, "type-function-return-type": { patterns: [{ begin: "(=>)(?=\\s*\\S)", beginCaptures: { 1: { name: "storage.type.function.arrow.tsx" } }, end: "(?<!=>)(?<![|&])(?=[,\\]\\)\\{\\}=;>:\\?]|//|$)", name: "meta.type.function.return.tsx", patterns: [{ include: "#type-function-return-type-core" }] }, { begin: "=>", beginCaptures: { 0: { name: "storage.type.function.arrow.tsx" } }, end: "(?<!=>)(?<![|&])((?=[,\\]\\)\\{\\}=;:\\?>]|//|^\\s*$)|((?<=\\S)(?=\\s*$)))", name: "meta.type.function.return.tsx", patterns: [{ include: "#type-function-return-type-core" }] }] }, "type-function-return-type-core": { patterns: [{ include: "#comment" }, { begin: "(?<==>)(?=\\s*\\{)", end: "(?<=\\})", patterns: [{ include: "#type-object" }] }, { include: "#type-predicate-operator" }, { include: "#type" }] }, "type-infer": { patterns: [{ captures: { 1: { name: "keyword.operator.expression.infer.tsx" }, 2: { name: "entity.name.type.tsx" }, 3: { name: "keyword.operator.expression.extends.tsx" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(infer)\\s+([_$[:alpha:]][_$[:alnum:]]*)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?:\\s+(extends)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))?", name: "meta.type.infer.tsx" }] }, "type-name": { patterns: [{ begin: "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(<)", captures: { 1: { name: "entity.name.type.module.tsx" }, 2: { name: "punctuation.accessor.tsx" }, 3: { name: "punctuation.accessor.optional.tsx" }, 4: { name: "meta.type.parameters.tsx punctuation.definition.typeparameters.begin.tsx" } }, contentName: "meta.type.parameters.tsx", end: "(>)", endCaptures: { 1: { name: "meta.type.parameters.tsx punctuation.definition.typeparameters.end.tsx" } }, patterns: [{ include: "#type-arguments-body" }] }, { begin: "([_$[:alpha:]][_$[:alnum:]]*)\\s*(<)", beginCaptures: { 1: { name: "entity.name.type.tsx" }, 2: { name: "meta.type.parameters.tsx punctuation.definition.typeparameters.begin.tsx" } }, contentName: "meta.type.parameters.tsx", end: "(>)", endCaptures: { 1: { name: "meta.type.parameters.tsx punctuation.definition.typeparameters.end.tsx" } }, patterns: [{ include: "#type-arguments-body" }] }, { captures: { 1: { name: "entity.name.type.module.tsx" }, 2: { name: "punctuation.accessor.tsx" }, 3: { name: "punctuation.accessor.optional.tsx" } }, match: "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))" }, { match: "[_$[:alpha:]][_$[:alnum:]]*", name: "entity.name.type.tsx" }] }, "type-object": { begin: "\\{", beginCaptures: { 0: { name: "punctuation.definition.block.tsx" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.block.tsx" } }, name: "meta.object.type.tsx", patterns: [{ include: "#comment" }, { include: "#method-declaration" }, { include: "#indexer-declaration" }, { include: "#indexer-mapped-type-declaration" }, { include: "#field-declaration" }, { include: "#type-annotation" }, { begin: "\\.\\.\\.", beginCaptures: { 0: { name: "keyword.operator.spread.tsx" } }, end: "(?=\\}|;|,|$)|(?<=\\})", patterns: [{ include: "#type" }] }, { include: "#punctuation-comma" }, { include: "#punctuation-semicolon" }, { include: "#type" }] }, "type-operators": { patterns: [{ include: "#typeof-operator" }, { include: "#type-infer" }, { begin: "([&|])(?=\\s*\\{)", beginCaptures: { 0: { name: "keyword.operator.type.tsx" } }, end: "(?<=\\})", patterns: [{ include: "#type-object" }] }, { begin: "[&|]", beginCaptures: { 0: { name: "keyword.operator.type.tsx" } }, end: "(?=\\S)" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))keyof(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.operator.expression.keyof.tsx" }, { match: "(\\?|\\:)", name: "keyword.operator.ternary.tsx" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))import(?=\\s*\\()", name: "keyword.operator.expression.import.tsx" }] }, "type-parameters": { begin: "(<)", beginCaptures: { 1: { name: "punctuation.definition.typeparameters.begin.tsx" } }, end: "(>)", endCaptures: { 1: { name: "punctuation.definition.typeparameters.end.tsx" } }, name: "meta.type.parameters.tsx", patterns: [{ include: "#comment" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(extends|in|out|const)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "storage.modifier.tsx" }, { include: "#type" }, { include: "#punctuation-comma" }, { match: "(=)(?!>)", name: "keyword.operator.assignment.tsx" }] }, "type-paren-or-function-parameters": { begin: "\\(", beginCaptures: { 0: { name: "meta.brace.round.tsx" } }, end: "\\)", endCaptures: { 0: { name: "meta.brace.round.tsx" } }, name: "meta.type.paren.cover.tsx", patterns: [{ captures: { 1: { name: "storage.modifier.tsx" }, 2: { name: "keyword.operator.rest.tsx" }, 3: { name: "entity.name.function.tsx variable.language.this.tsx" }, 4: { name: "entity.name.function.tsx" }, 5: { name: "keyword.operator.optional.tsx" } }, match: `(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))\\s*(\\??)(?=\\s*(:\\s*(
(<) |
([(]\\s*(
([)]) |
(\\.\\.\\.) |
([_$[:alnum:]]+\\s*(
([:,?=])|
([)]\\s*=>)
))
))
)) |
(:\\s*(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Function(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |
(:\\s*((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))))` }, { captures: { 1: { name: "storage.modifier.tsx" }, 2: { name: "keyword.operator.rest.tsx" }, 3: { name: "variable.parameter.tsx variable.language.this.tsx" }, 4: { name: "variable.parameter.tsx" }, 5: { name: "keyword.operator.optional.tsx" } }, match: "(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))\\s*(\\??)(?=:)" }, { include: "#type-annotation" }, { match: ",", name: "punctuation.separator.parameter.tsx" }, { include: "#type" }] }, "type-predicate-operator": { patterns: [{ captures: { 1: { name: "keyword.operator.type.asserts.tsx" }, 2: { name: "variable.parameter.tsx variable.language.this.tsx" }, 3: { name: "variable.parameter.tsx" }, 4: { name: "keyword.operator.expression.is.tsx" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(asserts)\\s+)?(?!asserts)(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))\\s(is)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))" }, { captures: { 1: { name: "keyword.operator.type.asserts.tsx" }, 2: { name: "variable.parameter.tsx variable.language.this.tsx" }, 3: { name: "variable.parameter.tsx" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(asserts)\\s+(?!is)(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))asserts(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.operator.type.asserts.tsx" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))is(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.operator.expression.is.tsx" }] }, "type-primitive": { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(string|number|bigint|boolean|symbol|any|void|never|unknown)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "support.type.primitive.tsx" }, "type-string": { patterns: [{ include: "#qstring-single" }, { include: "#qstring-double" }, { include: "#template-type" }] }, "type-tuple": { begin: "\\[", beginCaptures: { 0: { name: "meta.brace.square.tsx" } }, end: "\\]", endCaptures: { 0: { name: "meta.brace.square.tsx" } }, name: "meta.type.tuple.tsx", patterns: [{ match: "\\.\\.\\.", name: "keyword.operator.rest.tsx" }, { captures: { 1: { name: "entity.name.label.tsx" }, 2: { name: "keyword.operator.optional.tsx" }, 3: { name: "punctuation.separator.label.tsx" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))([_$[:alpha:]][_$[:alnum:]]*)\\s*(\\?)?\\s*(:)" }, { include: "#type" }, { include: "#punctuation-comma" }] }, "typeof-operator": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))typeof(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", beginCaptures: { 0: { name: "keyword.operator.expression.typeof.tsx" } }, end: "(?=[,);}\\]=>:&|{\\?]|(extends\\s+)|$|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))", patterns: [{ include: "#type-arguments" }, { include: "#expression" }] }, "undefined-literal": { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))undefined(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "constant.language.undefined.tsx" }, "var-expr": { patterns: [{ begin: "(?=(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(var|let)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))", end: "(?!(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(var|let)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))((?=^|;|}|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))|((?<!^let|[^\\._$[:alnum:]]let|^var|[^\\._$[:alnum:]]var)(?=\\s*$)))", name: "meta.var.expr.tsx", patterns: [{ begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(var|let)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*", beginCaptures: { 1: { name: "keyword.control.export.tsx" }, 2: { name: "storage.modifier.tsx" }, 3: { name: "storage.type.tsx" } }, end: "(?=\\S)" }, { include: "#destructuring-variable" }, { include: "#var-single-variable" }, { include: "#variable-initializer" }, { include: "#comment" }, { begin: "(,)\\s*(?=$|\\/\\/)", beginCaptures: { 1: { name: "punctuation.separator.comma.tsx" } }, end: "(?<!,)(((?==|;|}|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|^\\s*$))|((?<=\\S)(?=\\s*$)))", patterns: [{ include: "#single-line-comment-consuming-line-ending" }, { include: "#comment" }, { include: "#destructuring-variable" }, { include: "#var-single-variable" }, { include: "#punctuation-comma" }] }, { include: "#punctuation-comma" }] }, { begin: "(?=(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(const(?!\\s+enum\\b))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))", beginCaptures: { 1: { name: "keyword.control.export.tsx" }, 2: { name: "storage.modifier.tsx" }, 3: { name: "storage.type.tsx" } }, end: "(?!(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(const(?!\\s+enum\\b))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))((?=^|;|}|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))|((?<!^const|[^\\._$[:alnum:]]const)(?=\\s*$)))", name: "meta.var.expr.tsx", patterns: [{ begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(const(?!\\s+enum\\b))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*", beginCaptures: { 1: { name: "keyword.control.export.tsx" }, 2: { name: "storage.modifier.tsx" }, 3: { name: "storage.type.tsx" } }, end: "(?=\\S)" }, { include: "#destructuring-const" }, { include: "#var-single-const" }, { include: "#variable-initializer" }, { include: "#comment" }, { begin: "(,)\\s*(?=$|\\/\\/)", beginCaptures: { 1: { name: "punctuation.separator.comma.tsx" } }, end: "(?<!,)(((?==|;|}|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|^\\s*$))|((?<=\\S)(?=\\s*$)))", patterns: [{ include: "#single-line-comment-consuming-line-ending" }, { include: "#comment" }, { include: "#destructuring-const" }, { include: "#var-single-const" }, { include: "#punctuation-comma" }] }, { include: "#punctuation-comma" }] }, { begin: "(?=(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b((?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))", beginCaptures: { 1: { name: "keyword.control.export.tsx" }, 2: { name: "storage.modifier.tsx" }, 3: { name: "storage.type.tsx" } }, end: "(?!(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b((?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))((?=;|}|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))|((?<!^using|[^\\._$[:alnum:]]using|^await\\s+using|[^\\._$[:alnum:]]await\\s+using)(?=\\s*$)))", name: "meta.var.expr.tsx", patterns: [{ begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b((?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*", beginCaptures: { 1: { name: "keyword.control.export.tsx" }, 2: { name: "storage.modifier.tsx" }, 3: { name: "storage.type.tsx" } }, end: "(?=\\S)" }, { include: "#var-single-const" }, { include: "#variable-initializer" }, { include: "#comment" }, { begin: "(,)\\s*((?!\\S)|(?=\\/\\/))", beginCaptures: { 1: { name: "punctuation.separator.comma.tsx" } }, end: "(?<!,)(((?==|;|}|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|^\\s*$))|((?<=\\S)(?=\\s*$)))", patterns: [{ include: "#single-line-comment-consuming-line-ending" }, { include: "#comment" }, { include: "#var-single-const" }, { include: "#punctuation-comma" }] }, { include: "#punctuation-comma" }] }] }, "var-single-const": { patterns: [{ begin: `(?x)([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*
# function assignment |
(=\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |
(
[<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]
) |
# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
)) |
# typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>
(:\\s*(
(<) |
([(]\\s*(
([)]) |
(\\.\\.\\.) |
([_$[:alnum:]]+\\s*(
([:,?=])|
([)]\\s*=>)
))
))
)) |
(:\\s*(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Function(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |
(:\\s*((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))) |
(:\\s*(=>|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(<[^<>]*>)|[^<>(),=])+=\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |
(
[<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]
) |
# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
)))`, beginCaptures: { 1: { name: "meta.definition.variable.tsx variable.other.constant.tsx entity.name.function.tsx" } }, end: "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|(;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b)))", name: "meta.var-single-variable.expr.tsx", patterns: [{ include: "#var-single-variable-type-annotation" }] }, { begin: "([_$[:alpha:]][_$[:alnum:]]*)", beginCaptures: { 1: { name: "meta.definition.variable.tsx variable.other.constant.tsx" } }, end: "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|(;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b)))", name: "meta.var-single-variable.expr.tsx", patterns: [{ include: "#var-single-variable-type-annotation" }] }] }, "var-single-variable": { patterns: [{ begin: `(?x)([_$[:alpha:]][_$[:alnum:]]*)(\\!)?(?=\\s*
# function assignment |
(=\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |
(
[<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]
) |
# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
)) |
# typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>
(:\\s*(
(<) |
([(]\\s*(
([)]) |
(\\.\\.\\.) |
([_$[:alnum:]]+\\s*(
([:,?=])|
([)]\\s*=>)
))
))
)) |
(:\\s*(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Function(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |
(:\\s*((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))) |
(:\\s*(=>|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(<[^<>]*>)|[^<>(),=])+=\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |
(
[<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]
) |
# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
)))`, beginCaptures: { 1: { name: "meta.definition.variable.tsx entity.name.function.tsx" }, 2: { name: "keyword.operator.definiteassignment.tsx" } }, end: "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|(;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b)))", name: "meta.var-single-variable.expr.tsx", patterns: [{ include: "#var-single-variable-type-annotation" }] }, { begin: "([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])(\\!)?", beginCaptures: { 1: { name: "meta.definition.variable.tsx variable.other.constant.tsx" }, 2: { name: "keyword.operator.definiteassignment.tsx" } }, end: "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|(;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b)))", name: "meta.var-single-variable.expr.tsx", patterns: [{ include: "#var-single-variable-type-annotation" }] }, { begin: "([_$[:alpha:]][_$[:alnum:]]*)(\\!)?", beginCaptures: { 1: { name: "meta.definition.variable.tsx variable.other.readwrite.tsx" }, 2: { name: "keyword.operator.definiteassignment.tsx" } }, end: "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|(;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b)))", name: "meta.var-single-variable.expr.tsx", patterns: [{ include: "#var-single-variable-type-annotation" }] }] }, "var-single-variable-type-annotation": { patterns: [{ include: "#type-annotation" }, { include: "#string" }, { include: "#comment" }] }, "variable-initializer": { patterns: [{ begin: "(?<!=|!)(=)(?!=)(?=\\s*\\S)(?!\\s*.*=>\\s*$)", beginCaptures: { 1: { name: "keyword.operator.assignment.tsx" } }, end: "(?=$|^|[,);}\\]]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))", patterns: [{ include: "#expression" }] }, { begin: "(?<!=|!)(=)(?!=)", beginCaptures: { 1: { name: "keyword.operator.assignment.tsx" } }, end: "(?=[,);}\\]]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))|(?=^\\s*$)|(?<![\\|\\&\\+\\-\\*\\/])(?<=\\S)(?<!=)(?=\\s*$)", patterns: [{ include: "#expression" }] }] } }, scopeName: "source.tsx" });
var d = [
  B
];
const G = Object.freeze({ displayName: "Astro", fileTypes: ["astro"], injections: { "L:(meta.script.astro) (meta.lang.js | meta.lang.javascript | meta.lang.partytown | meta.lang.node) - (meta source)": { patterns: [{ begin: "(?<=>)(?!</)", contentName: "source.js", end: "(?=</)", name: "meta.embedded.block.astro", patterns: [{ include: "source.js" }] }] }, "L:(meta.script.astro) (meta.lang.json) - (meta source)": { patterns: [{ begin: "(?<=>)(?!</)", contentName: "source.json", end: "(?=</)", name: "meta.embedded.block.astro", patterns: [{ include: "source.json" }] }] }, "L:(meta.script.astro) (meta.lang.ts | meta.lang.typescript) - (meta source)": { patterns: [{ begin: "(?<=>)(?!</)", contentName: "source.ts", end: "(?=</)", name: "meta.embedded.block.astro", patterns: [{ include: "source.ts" }] }] }, "L:meta.script.astro - meta.lang - (meta source)": { patterns: [{ begin: "(?<=>)(?!</)", contentName: "source.js", end: "(?=</)", name: "meta.embedded.block.astro", patterns: [{ include: "source.js" }] }] }, "L:meta.style.astro - meta.lang - (meta source)": { patterns: [{ begin: "(?<=>)(?!</)", contentName: "source.css", end: "(?=</)", name: "meta.embedded.block.astro", patterns: [{ include: "source.css" }] }] }, "L:meta.style.astro meta.lang.css - (meta source)": { patterns: [{ begin: "(?<=>)(?!</)", contentName: "source.css", end: "(?=</)", name: "meta.embedded.block.astro", patterns: [{ include: "source.css" }] }] }, "L:meta.style.astro meta.lang.less - (meta source)": { patterns: [{ begin: "(?<=>)(?!</)", contentName: "source.css.less", end: "(?=</)", name: "meta.embedded.block.astro", patterns: [{ include: "source.css.less" }] }] }, "L:meta.style.astro meta.lang.postcss - (meta source)": { patterns: [{ begin: "(?<=>)(?!</)", contentName: "source.css.postcss", end: "(?=</)", name: "meta.embedded.block.astro", patterns: [{ include: "source.css.postcss" }] }] }, "L:meta.style.astro meta.lang.sass - (meta source)": { patterns: [{ begin: "(?<=>)(?!</)", contentName: "source.sass", end: "(?=</)", name: "meta.embedded.block.astro", patterns: [{ include: "source.sass" }] }] }, "L:meta.style.astro meta.lang.scss - (meta source)": { patterns: [{ begin: "(?<=>)(?!</)", contentName: "source.css.scss", end: "(?=</)", name: "meta.embedded.block.astro", patterns: [{ include: "source.css.scss" }] }] }, "L:meta.style.astro meta.lang.stylus - (meta source)": { patterns: [{ begin: "(?<=>)(?!</)", contentName: "source.stylus", end: "(?=</)", name: "meta.embedded.block.astro", patterns: [{ include: "source.stylus" }] }] } }, name: "astro", patterns: [{ include: "#scope" }, { include: "#frontmatter" }, { include: "#text" }], repository: { "attribute-literal": { begin: "(`)", end: "\\1", name: "string.template.astro", patterns: [{ include: "source.tsx#template-substitution-element" }, { include: "source.tsx#string-character-escape" }] }, attributes: { patterns: [{ include: "#attributes-events" }, { include: "#attributes-keyvalue" }, { include: "#attributes-interpolated" }] }, "attributes-events": { begin: "(on(s(croll|t(orage|alled)|u(spend|bmit)|e(curitypolicyviolation|ek(ing|ed)|lect))|hashchange|c(hange|o(ntextmenu|py)|u(t|echange)|l(ick|ose)|an(cel|play(through)?))|t(imeupdate|oggle)|in(put|valid)|o(nline|ffline)|d(urationchange|r(op|ag(start|over|e(n(ter|d)|xit)|leave)?)|blclick)|un(handledrejection|load)|p(opstate|lay(ing)?|a(ste|use|ge(show|hide))|rogress)|e(nded|rror|mptied)|volumechange|key(down|up|press)|focus|w(heel|aiting)|l(oad(start|e(nd|d(data|metadata)))?|anguagechange)|a(uxclick|fterprint|bort)|r(e(s(ize|et)|jectionhandled)|atechange)|m(ouse(o(ut|ver)|down|up|enter|leave|move)|essage(error)?)|b(efore(unload|print)|lur)))(?![\\\\w:-])", beginCaptures: { 0: { patterns: [{ match: ".*", name: "entity.other.attribute-name.astro" }] } }, end: "(?=\\s*+[^=\\s])", name: "meta.attribute.$1.astro", patterns: [{ begin: "=", beginCaptures: { 0: { name: "punctuation.separator.key-value.astro" } }, end: "(?<=[^\\s=])(?!\\s*=)|(?=/?>)", patterns: [{ include: "#interpolation" }, { include: "#attribute-literal" }, { begin: "(?=[^\\s=<>`/]|/(?!>))", end: "(?!\\G)", name: "meta.embedded.line.js", patterns: [{ captures: { 0: { name: "source.js" }, 1: { patterns: [{ include: "source.js" }] } }, match: "(([^\\s\\\"'=<>`/]|/(?!>))+)", name: "string.unquoted.astro" }, { begin: '(["])', beginCaptures: { 0: { name: "punctuation.definition.string.begin.astro" } }, end: "\\1", endCaptures: { 0: { name: "punctuation.definition.string.end.astro" } }, name: "string.quoted.astro", patterns: [{ captures: { 0: { patterns: [{ include: "source.js" }] } }, match: '([^\\n\\"/]|/(?![/*]))+' }, { begin: "//", beginCaptures: { 0: { name: "punctuation.definition.comment.js" } }, end: '(?=\\")|\\n', name: "comment.line.double-slash.js" }, { begin: "/\\*", beginCaptures: { 0: { name: "punctuation.definition.comment.begin.js" } }, end: '(?=\\")|\\*/', endCaptures: { 0: { name: "punctuation.definition.comment.end.js" } }, name: "comment.block.js" }] }, { begin: "(['])", beginCaptures: { 0: { name: "punctuation.definition.string.begin.astro" } }, end: "\\1", endCaptures: { 0: { name: "punctuation.definition.string.end.astro" } }, name: "string.quoted.astro", patterns: [{ captures: { 0: { patterns: [{ include: "source.js" }] } }, match: "([^\\n\\'/]|/(?![/*]))+" }, { begin: "//", beginCaptures: { 0: { name: "punctuation.definition.comment.js" } }, end: "(?=\\')|\\n", name: "comment.line.double-slash.js" }, { begin: "/\\*", beginCaptures: { 0: { name: "punctuation.definition.comment.begin.js" } }, end: "(?=\\')|\\*/", endCaptures: { 0: { name: "punctuation.definition.comment.end.js" } }, name: "comment.block.js" }] }] }] }] }, "attributes-interpolated": { begin: "(?<!:|=)\\s*({)", contentName: "meta.embedded.expression.astro source.tsx", end: "(\\})", patterns: [{ include: "source.tsx" }] }, "attributes-keyvalue": { begin: "([_@$[:alpha:]][:._\\-$[:alnum:]]*)", beginCaptures: { 0: { patterns: [{ match: ".*", name: "entity.other.attribute-name.astro" }] } }, end: "(?=\\s*+[^=\\s])", name: "meta.attribute.$1.astro", patterns: [{ begin: "=", beginCaptures: { 0: { name: "punctuation.separator.key-value.astro" } }, end: "(?<=[^\\s=])(?!\\s*=)|(?=/?>)", patterns: [{ include: "#attributes-value" }] }] }, "attributes-value": { patterns: [{ include: "#interpolation" }, { match: "([^\\s\"'=<>`/]|/(?!>))+", name: "string.unquoted.astro" }, { begin: `(['"])`, beginCaptures: { 0: { name: "punctuation.definition.string.begin.astro" } }, end: "\\1", endCaptures: { 0: { name: "punctuation.definition.string.end.astro" } }, name: "string.quoted.astro" }, { include: "#attribute-literal" }] }, comments: { begin: "<!--", captures: { 0: { name: "punctuation.definition.comment.astro" } }, end: "-->", name: "comment.block.astro", patterns: [{ match: "\\G-?>|<!--(?!>)|<!-(?=-->)|--!>", name: "invalid.illegal.characters-not-allowed-here.astro" }] }, entities: { patterns: [{ captures: { 1: { name: "punctuation.definition.entity.astro" }, 912: { name: "punctuation.definition.entity.astro" } }, match: `(?x)
(&)	(?=[a-zA-Z])
(
(a(s(ymp(eq)?|cr|t)|n(d(slope|d|v|and)?|g(s(t|ph)|zarr|e|le|rt(vb(d)?)?|msd(a(h|c|d|e|f|a|g|b))?)?)|c(y|irc|d|ute|E)?|tilde|o(pf|gon)|uml|p(id|os|prox(eq)?|e|E|acir)?|elig|f(r)?|w(conint|int)|l(pha|e(ph|fsym))|acute|ring|grave|m(p|a(cr|lg))|breve)|A(s(sign|cr)|nd|MP|c(y|irc)|tilde|o(pf|gon)|uml|pplyFunction|fr|Elig|lpha|acute|ring|grave|macr|breve))
| (B(scr|cy|opf|umpeq|e(cause|ta|rnoullis)|fr|a(ckslash|r(v|wed))|reve)|b(s(cr|im(e)?|ol(hsub|b)?|emi)|n(ot|e(quiv)?)|c(y|ong)|ig(s(tar|qcup)|c(irc|up|ap)|triangle(down|up)|o(times|dot|plus)|uplus|vee|wedge)|o(t(tom)?|pf|wtie|x(h(d|u|D|U)?|times|H(d|u|D|U)?|d(R|l|r|L)|u(R|l|r|L)|plus|D(R|l|r|L)|v(R|h|H|l|r|L)?|U(R|l|r|L)|V(R|h|H|l|r|L)?|minus|box))|Not|dquo|u(ll(et)?|mp(e(q)?|E)?)|prime|e(caus(e)?|t(h|ween|a)|psi|rnou|mptyv)|karow|fr|l(ock|k(1(2|4)|34)|a(nk|ck(square|triangle(down|left|right)?|lozenge)))|a(ck(sim(eq)?|cong|prime|epsilon)|r(vee|wed(ge)?))|r(eve|vbar)|brk(tbrk)?))
| (c(s(cr|u(p(e)?|b(e)?))|h(cy|i|eck(mark)?)|ylcty|c(irc|ups(sm)?|edil|a(ps|ron))|tdot|ir(scir|c(eq|le(d(R|circ|S|dash|ast)|arrow(left|right)))?|e|fnint|E|mid)?|o(n(int|g(dot)?)|p(y(sr)?|f|rod)|lon(e(q)?)?|m(p(fn|le(xes|ment))?|ma(t)?))|dot|u(darr(l|r)|p(s|c(up|ap)|or|dot|brcap)?|e(sc|pr)|vee|wed|larr(p)?|r(vearrow(left|right)|ly(eq(succ|prec)|vee|wedge)|arr(m)?|ren))|e(nt(erdot)?|dil|mptyv)|fr|w(conint|int)|lubs(uit)?|a(cute|p(s|c(up|ap)|dot|and|brcup)?|r(on|et))|r(oss|arr))|C(scr|hi|c(irc|onint|edil|aron)|ircle(Minus|Times|Dot|Plus)|Hcy|o(n(tourIntegral|int|gruent)|unterClockwiseContourIntegral|p(f|roduct)|lon(e)?)|dot|up(Cap)?|OPY|e(nterDot|dilla)|fr|lo(seCurly(DoubleQuote|Quote)|ckwiseContourIntegral)|a(yleys|cute|p(italDifferentialD)?)|ross))
| (d(s(c(y|r)|trok|ol)|har(l|r)|c(y|aron)|t(dot|ri(f)?)|i(sin|e|v(ide(ontimes)?|onx)?|am(s|ond(suit)?)?|gamma)|Har|z(cy|igrarr)|o(t(square|plus|eq(dot)?|minus)?|ublebarwedge|pf|wn(harpoon(left|right)|downarrows|arrow)|llar)|d(otseq|a(rr|gger))?|u(har|arr)|jcy|e(lta|g|mptyv)|f(isht|r)|wangle|lc(orn|rop)|a(sh(v)?|leth|rr|gger)|r(c(orn|rop)|bkarow)|b(karow|lac)|Arr)|D(s(cr|trok)|c(y|aron)|Scy|i(fferentialD|a(critical(Grave|Tilde|Do(t|ubleAcute)|Acute)|mond))|o(t(Dot|Equal)?|uble(Right(Tee|Arrow)|ContourIntegral|Do(t|wnArrow)|Up(DownArrow|Arrow)|VerticalBar|L(ong(RightArrow|Left(RightArrow|Arrow))|eft(RightArrow|Tee|Arrow)))|pf|wn(Right(TeeVector|Vector(Bar)?)|Breve|Tee(Arrow)?|arrow|Left(RightVector|TeeVector|Vector(Bar)?)|Arrow(Bar|UpArrow)?))|Zcy|el(ta)?|D(otrahd)?|Jcy|fr|a(shv|rr|gger)))
| (e(s(cr|im|dot)|n(sp|g)|c(y|ir(c)?|olon|aron)|t(h|a)|o(pf|gon)|dot|u(ro|ml)|p(si(v|lon)?|lus|ar(sl)?)|e|D(ot|Dot)|q(s(im|lant(less|gtr))|c(irc|olon)|u(iv(DD)?|est|als)|vparsl)|f(Dot|r)|l(s(dot)?|inters|l)?|a(ster|cute)|r(Dot|arr)|g(s(dot)?|rave)?|x(cl|ist|p(onentiale|ectation))|m(sp(1(3|4))?|pty(set|v)?|acr))|E(s(cr|im)|c(y|irc|aron)|ta|o(pf|gon)|NG|dot|uml|TH|psilon|qu(ilibrium|al(Tilde)?)|fr|lement|acute|grave|x(ists|ponentialE)|m(pty(SmallSquare|VerySmallSquare)|acr)))
| (f(scr|nof|cy|ilig|o(pf|r(k(v)?|all))|jlig|partint|emale|f(ilig|l(ig|lig)|r)|l(tns|lig|at)|allingdotseq|r(own|a(sl|c(1(2|8|3|4|5|6)|78|2(3|5)|3(8|4|5)|45|5(8|6)))))|F(scr|cy|illed(SmallSquare|VerySmallSquare)|o(uriertrf|pf|rAll)|fr))
| (G(scr|c(y|irc|edil)|t|opf|dot|T|Jcy|fr|amma(d)?|reater(Greater|SlantEqual|Tilde|Equal(Less)?|FullEqual|Less)|g|breve)|g(s(cr|im(e|l)?)|n(sim|e(q(q)?)?|E|ap(prox)?)|c(y|irc)|t(c(c|ir)|dot|quest|lPar|r(sim|dot|eq(qless|less)|less|a(pprox|rr)))?|imel|opf|dot|jcy|e(s(cc|dot(o(l)?)?|l(es)?)?|q(slant|q)?|l)?|v(nE|ertneqq)|fr|E(l)?|l(j|E|a)?|a(cute|p|mma(d)?)|rave|g(g)?|breve))
| (h(s(cr|trok|lash)|y(phen|bull)|circ|o(ok(leftarrow|rightarrow)|pf|arr|rbar|mtht)|e(llip|arts(uit)?|rcon)|ks(earow|warow)|fr|a(irsp|lf|r(dcy|r(cir|w)?)|milt)|bar|Arr)|H(s(cr|trok)|circ|ilbertSpace|o(pf|rizontalLine)|ump(DownHump|Equal)|fr|a(cek|t)|ARDcy))
| (i(s(cr|in(s(v)?|dot|v|E)?)|n(care|t(cal|prod|e(rcal|gers)|larhk)?|odot|fin(tie)?)?|c(y|irc)?|t(ilde)?|i(nfin|i(nt|int)|ota)?|o(cy|ta|pf|gon)|u(kcy|ml)|jlig|prod|e(cy|xcl)|quest|f(f|r)|acute|grave|m(of|ped|a(cr|th|g(part|e|line))))|I(scr|n(t(e(rsection|gral))?|visible(Comma|Times))|c(y|irc)|tilde|o(ta|pf|gon)|dot|u(kcy|ml)|Ocy|Jlig|fr|Ecy|acute|grave|m(plies|a(cr|ginaryI))?))
| (j(s(cr|ercy)|c(y|irc)|opf|ukcy|fr|math)|J(s(cr|ercy)|c(y|irc)|opf|ukcy|fr))
| (k(scr|hcy|c(y|edil)|opf|jcy|fr|appa(v)?|green)|K(scr|c(y|edil)|Hcy|opf|Jcy|fr|appa))
| (l(s(h|cr|trok|im(e|g)?|q(uo(r)?|b)|aquo)|h(ar(d|u(l)?)|blk)|n(sim|e(q(q)?)?|E|ap(prox)?)|c(y|ub|e(il|dil)|aron)|Barr|t(hree|c(c|ir)|imes|dot|quest|larr|r(i(e|f)?|Par))?|Har|o(ng(left(arrow|rightarrow)|rightarrow|mapsto)|times|z(enge|f)?|oparrow(left|right)|p(f|lus|ar)|w(ast|bar)|a(ng|rr)|brk)|d(sh|ca|quo(r)?|r(dhar|ushar))|ur(dshar|uhar)|jcy|par(lt)?|e(s(s(sim|dot|eq(qgtr|gtr)|approx|gtr)|cc|dot(o(r)?)?|g(es)?)?|q(slant|q)?|ft(harpoon(down|up)|threetimes|leftarrows|arrow(tail)?|right(squigarrow|harpoons|arrow(s)?))|g)?|v(nE|ertneqq)|f(isht|loor|r)|E(g)?|l(hard|corner|tri|arr)?|a(ng(d|le)?|cute|t(e(s)?|ail)?|p|emptyv|quo|rr(sim|hk|tl|pl|fs|lp|b(fs)?)?|gran|mbda)|r(har(d)?|corner|tri|arr|m)|g(E)?|m(idot|oust(ache)?)|b(arr|r(k(sl(d|u)|e)|ac(e|k))|brk)|A(tail|arr|rr))|L(s(h|cr|trok)|c(y|edil|aron)|t|o(ng(RightArrow|left(arrow|rightarrow)|rightarrow|Left(RightArrow|Arrow))|pf|wer(RightArrow|LeftArrow))|T|e(ss(Greater|SlantEqual|Tilde|EqualGreater|FullEqual|Less)|ft(Right(Vector|Arrow)|Ceiling|T(ee(Vector|Arrow)?|riangle(Bar|Equal)?)|Do(ubleBracket|wn(TeeVector|Vector(Bar)?))|Up(TeeVector|DownVector|Vector(Bar)?)|Vector(Bar)?|arrow|rightarrow|Floor|A(ngleBracket|rrow(RightArrow|Bar)?)))|Jcy|fr|l(eftarrow)?|a(ng|cute|placetrf|rr|mbda)|midot))
| (M(scr|cy|inusPlus|opf|u|e(diumSpace|llintrf)|fr|ap)|m(s(cr|tpos)|ho|nplus|c(y|omma)|i(nus(d(u)?|b)?|cro|d(cir|dot|ast)?)|o(dels|pf)|dash|u(ltimap|map)?|p|easuredangle|DDot|fr|l(cp|dr)|a(cr|p(sto(down|up|left)?)?|l(t(ese)?|e)|rker)))
| (n(s(hort(parallel|mid)|c(cue|e|r)?|im(e(q)?)?|u(cc(eq)?|p(set(eq(q)?)?|e|E)?|b(set(eq(q)?)?|e|E)?)|par|qsu(pe|be)|mid)|Rightarrow|h(par|arr|Arr)|G(t(v)?|g)|c(y|ong(dot)?|up|edil|a(p|ron))|t(ilde|lg|riangle(left(eq)?|right(eq)?)|gl)|i(s(d)?|v)?|o(t(ni(v(c|a|b))?|in(dot|v(c|a|b)|E)?)?|pf)|dash|u(m(sp|ero)?)?|jcy|p(olint|ar(sl|t|allel)?|r(cue|e(c(eq)?)?)?)|e(s(im|ear)|dot|quiv|ar(hk|r(ow)?)|xist(s)?|Arr)?|v(sim|infin|Harr|dash|Dash|l(t(rie)?|e|Arr)|ap|r(trie|Arr)|g(t|e))|fr|w(near|ar(hk|r(ow)?)|Arr)|V(dash|Dash)|l(sim|t(ri(e)?)?|dr|e(s(s)?|q(slant|q)?|ft(arrow|rightarrow))?|E|arr|Arr)|a(ng|cute|tur(al(s)?)?|p(id|os|prox|E)?|bla)|r(tri(e)?|ightarrow|arr(c|w)?|Arr)|g(sim|t(r)?|e(s|q(slant|q)?)?|E)|mid|L(t(v)?|eft(arrow|rightarrow)|l)|b(sp|ump(e)?))|N(scr|c(y|edil|aron)|tilde|o(nBreakingSpace|Break|t(R(ightTriangle(Bar|Equal)?|everseElement)|Greater(Greater|SlantEqual|Tilde|Equal|FullEqual|Less)?|S(u(cceeds(SlantEqual|Tilde|Equal)?|perset(Equal)?|bset(Equal)?)|quareSu(perset(Equal)?|bset(Equal)?))|Hump(DownHump|Equal)|Nested(GreaterGreater|LessLess)|C(ongruent|upCap)|Tilde(Tilde|Equal|FullEqual)?|DoubleVerticalBar|Precedes(SlantEqual|Equal)?|E(qual(Tilde)?|lement|xists)|VerticalBar|Le(ss(Greater|SlantEqual|Tilde|Equal|Less)?|ftTriangle(Bar|Equal)?))?|pf)|u|e(sted(GreaterGreater|LessLess)|wLine|gative(MediumSpace|Thi(nSpace|ckSpace)|VeryThinSpace))|Jcy|fr|acute))
| (o(s(cr|ol|lash)|h(m|bar)|c(y|ir(c)?)|ti(lde|mes(as)?)|S|int|opf|d(sold|iv|ot|ash|blac)|uml|p(erp|lus|ar)|elig|vbar|f(cir|r)|l(c(ir|ross)|t|ine|arr)|a(st|cute)|r(slope|igof|or|d(er(of)?|f|m)?|v|arr)?|g(t|on|rave)|m(i(nus|cron|d)|ega|acr))|O(s(cr|lash)|c(y|irc)|ti(lde|mes)|opf|dblac|uml|penCurly(DoubleQuote|Quote)|ver(B(ar|rac(e|ket))|Parenthesis)|fr|Elig|acute|r|grave|m(icron|ega|acr)))
| (p(s(cr|i)|h(i(v)?|one|mmat)|cy|i(tchfork|v)?|o(intint|und|pf)|uncsp|er(cnt|tenk|iod|p|mil)|fr|l(us(sim|cir|two|d(o|u)|e|acir|mn|b)?|an(ck(h)?|kv))|ar(s(im|l)|t|a(llel)?)?|r(sim|n(sim|E|ap)|cue|ime(s)?|o(d|p(to)?|f(surf|line|alar))|urel|e(c(sim|n(sim|eqq|approx)|curlyeq|eq|approx)?)?|E|ap)?|m)|P(s(cr|i)|hi|cy|i|o(incareplane|pf)|fr|lusMinus|artialD|r(ime|o(duct|portion(al)?)|ecedes(SlantEqual|Tilde|Equal)?)?))
| (q(scr|int|opf|u(ot|est(eq)?|at(int|ernions))|prime|fr)|Q(scr|opf|UOT|fr))
| (R(s(h|cr)|ho|c(y|edil|aron)|Barr|ight(Ceiling|T(ee(Vector|Arrow)?|riangle(Bar|Equal)?)|Do(ubleBracket|wn(TeeVector|Vector(Bar)?))|Up(TeeVector|DownVector|Vector(Bar)?)|Vector(Bar)?|arrow|Floor|A(ngleBracket|rrow(Bar|LeftArrow)?))|o(undImplies|pf)|uleDelayed|e(verse(UpEquilibrium|E(quilibrium|lement)))?|fr|EG|a(ng|cute|rr(tl)?)|rightarrow)|r(s(h|cr|q(uo(r)?|b)|aquo)|h(o(v)?|ar(d|u(l)?))|nmid|c(y|ub|e(il|dil)|aron)|Barr|t(hree|imes|ri(e|f|ltri)?)|i(singdotseq|ng|ght(squigarrow|harpoon(down|up)|threetimes|left(harpoons|arrows)|arrow(tail)?|rightarrows))|Har|o(times|p(f|lus|ar)|a(ng|rr)|brk)|d(sh|ca|quo(r)?|ldhar)|uluhar|p(polint|ar(gt)?)|e(ct|al(s|ine|part)?|g)|f(isht|loor|r)|l(har|arr|m)|a(ng(d|e|le)?|c(ute|e)|t(io(nals)?|ail)|dic|emptyv|quo|rr(sim|hk|c|tl|pl|fs|w|lp|ap|b(fs)?)?)|rarr|x|moust(ache)?|b(arr|r(k(sl(d|u)|e)|ac(e|k))|brk)|A(tail|arr|rr)))
| (s(s(cr|tarf|etmn|mile)|h(y|c(hcy|y)|ort(parallel|mid)|arp)|c(sim|y|n(sim|E|ap)|cue|irc|polint|e(dil)?|E|a(p|ron))?|t(ar(f)?|r(ns|aight(phi|epsilon)))|i(gma(v|f)?|m(ne|dot|plus|e(q)?|l(E)?|rarr|g(E)?)?)|zlig|o(pf|ftcy|l(b(ar)?)?)|dot(e|b)?|u(ng|cc(sim|n(sim|eqq|approx)|curlyeq|eq|approx)?|p(s(im|u(p|b)|et(neq(q)?|eq(q)?)?)|hs(ol|ub)|1|n(e|E)|2|d(sub|ot)|3|plus|e(dot)?|E|larr|mult)?|m|b(s(im|u(p|b)|et(neq(q)?|eq(q)?)?)|n(e|E)|dot|plus|e(dot)?|E|rarr|mult)?)|pa(des(uit)?|r)|e(swar|ct|tm(n|inus)|ar(hk|r(ow)?)|xt|mi|Arr)|q(su(p(set(eq)?|e)?|b(set(eq)?|e)?)|c(up(s)?|ap(s)?)|u(f|ar(e|f))?)|fr(own)?|w(nwar|ar(hk|r(ow)?)|Arr)|larr|acute|rarr|m(t(e(s)?)?|i(d|le)|eparsl|a(shp|llsetminus))|bquo)|S(scr|hort(RightArrow|DownArrow|UpArrow|LeftArrow)|c(y|irc|edil|aron)?|tar|igma|H(cy|CHcy)|opf|u(c(hThat|ceeds(SlantEqual|Tilde|Equal)?)|p(set|erset(Equal)?)?|m|b(set(Equal)?)?)|OFTcy|q(uare(Su(perset(Equal)?|bset(Equal)?)|Intersection|Union)?|rt)|fr|acute|mallCircle))
| (t(s(hcy|c(y|r)|trok)|h(i(nsp|ck(sim|approx))|orn|e(ta(sym|v)?|re(4|fore))|k(sim|ap))|c(y|edil|aron)|i(nt|lde|mes(d|b(ar)?)?)|o(sa|p(cir|f(ork)?|bot)?|ea)|dot|prime|elrec|fr|w(ixt|ohead(leftarrow|rightarrow))|a(u|rget)|r(i(sb|time|dot|plus|e|angle(down|q|left(eq)?|right(eq)?)?|minus)|pezium|ade)|brk)|T(s(cr|trok)|RADE|h(i(nSpace|ckSpace)|e(ta|refore))|c(y|edil|aron)|S(cy|Hcy)|ilde(Tilde|Equal|FullEqual)?|HORN|opf|fr|a(u|b)|ripleDot))
| (u(scr|h(ar(l|r)|blk)|c(y|irc)|t(ilde|dot|ri(f)?)|Har|o(pf|gon)|d(har|arr|blac)|u(arr|ml)|p(si(h|lon)?|harpoon(left|right)|downarrow|uparrows|lus|arrow)|f(isht|r)|wangle|l(c(orn(er)?|rop)|tri)|a(cute|rr)|r(c(orn(er)?|rop)|tri|ing)|grave|m(l|acr)|br(cy|eve)|Arr)|U(scr|n(ion(Plus)?|der(B(ar|rac(e|ket))|Parenthesis))|c(y|irc)|tilde|o(pf|gon)|dblac|uml|p(si(lon)?|downarrow|Tee(Arrow)?|per(RightArrow|LeftArrow)|DownArrow|Equilibrium|arrow|Arrow(Bar|DownArrow)?)|fr|a(cute|rr(ocir)?)|ring|grave|macr|br(cy|eve)))
| (v(s(cr|u(pn(e|E)|bn(e|E)))|nsu(p|b)|cy|Bar(v)?|zigzag|opf|dash|prop|e(e(eq|bar)?|llip|r(t|bar))|Dash|fr|ltri|a(ngrt|r(s(igma|u(psetneq(q)?|bsetneq(q)?))|nothing|t(heta|riangle(left|right))|p(hi|i|ropto)|epsilon|kappa|r(ho)?))|rtri|Arr)|V(scr|cy|opf|dash(l)?|e(e|r(yThinSpace|t(ical(Bar|Separator|Tilde|Line))?|bar))|Dash|vdash|fr|bar))
| (w(scr|circ|opf|p|e(ierp|d(ge(q)?|bar))|fr|r(eath)?)|W(scr|circ|opf|edge|fr))
| (X(scr|i|opf|fr)|x(s(cr|qcup)|h(arr|Arr)|nis|c(irc|up|ap)|i|o(time|dot|p(f|lus))|dtri|u(tri|plus)|vee|fr|wedge|l(arr|Arr)|r(arr|Arr)|map))
| (y(scr|c(y|irc)|icy|opf|u(cy|ml)|en|fr|ac(y|ute))|Y(scr|c(y|irc)|opf|uml|Icy|Ucy|fr|acute|Acy))
| (z(scr|hcy|c(y|aron)|igrarr|opf|dot|e(ta|etrf)|fr|w(nj|j)|acute)|Z(scr|c(y|aron)|Hcy|opf|dot|e(ta|roWidthSpace)|fr|acute))
)
(;)
`, name: "constant.character.entity.named.$2.astro" }, { captures: { 1: { name: "punctuation.definition.entity.astro" }, 3: { name: "punctuation.definition.entity.astro" } }, match: "(&)#[0-9]+(;)", name: "constant.character.entity.numeric.decimal.astro" }, { captures: { 1: { name: "punctuation.definition.entity.astro" }, 3: { name: "punctuation.definition.entity.astro" } }, match: "(&)#[xX][0-9a-fA-F]+(;)", name: "constant.character.entity.numeric.hexadecimal.astro" }, { match: "&(?=[a-zA-Z0-9]+;)", name: "invalid.illegal.ambiguous-ampersand.astro" }] }, frontmatter: { begin: "\\A(-{3})\\s*$", beginCaptures: { 1: { name: "comment" } }, contentName: "source.ts", end: "(^|\\G)(-{3})|\\.{3}\\s*$", endCaptures: { 2: { name: "comment" } }, patterns: [{ include: "source.ts" }] }, interpolation: { patterns: [{ begin: "\\{", beginCaptures: { 0: { name: "punctuation.section.embedded.begin.astro" } }, contentName: "meta.embedded.expression.astro source.tsx", end: "\\}", endCaptures: { 0: { name: "punctuation.section.embedded.end.astro" } }, patterns: [{ begin: "\\G\\s*(?={)", end: "(?<=})", patterns: [{ include: "source.tsx#object-literal" }] }, { include: "source.tsx" }] }] }, scope: { patterns: [{ include: "#comments" }, { include: "#tags" }, { include: "#interpolation" }, { include: "#entities" }] }, tags: { patterns: [{ include: "#tags-raw" }, { include: "#tags-lang" }, { include: "#tags-void" }, { include: "#tags-general-end" }, { include: "#tags-general-start" }] }, "tags-end-node": { captures: { 1: { name: "meta.tag.end.astro punctuation.definition.tag.begin.astro" }, 2: { name: "meta.tag.end.astro", patterns: [{ include: "#tags-name" }] }, 3: { name: "meta.tag.end.astro punctuation.definition.tag.end.astro" }, 4: { name: "meta.tag.start.astro punctuation.definition.tag.end.astro" } }, match: "(</)(.*?)\\s*(>)|(/>)" }, "tags-general-end": { begin: "(</)([^/\\s>]*)", beginCaptures: { 1: { name: "meta.tag.end.astro punctuation.definition.tag.begin.astro" }, 2: { name: "meta.tag.end.astro", patterns: [{ include: "#tags-name" }] } }, end: "(>)", endCaptures: { 1: { name: "meta.tag.end.astro punctuation.definition.tag.end.astro" } }, name: "meta.scope.tag.$2.astro" }, "tags-general-start": { begin: "(<)([^/\\s>/]*)", beginCaptures: { 0: { patterns: [{ include: "#tags-start-node" }] } }, end: "(/?>)", endCaptures: { 1: { name: "meta.tag.start.astro punctuation.definition.tag.end.astro" } }, name: "meta.scope.tag.$2.astro", patterns: [{ include: "#tags-start-attributes" }] }, "tags-lang": { begin: "<(script|style)", beginCaptures: { 0: { patterns: [{ include: "#tags-start-node" }] } }, end: "</\\1\\s*>|/>", endCaptures: { 0: { patterns: [{ include: "#tags-end-node" }] } }, name: "meta.scope.tag.$1.astro meta.$1.astro", patterns: [{ begin: `\\G(?=\\s*[^>]*?(type|lang)\\s*=\\s*(['"]|)(?:text\\/)?(application\\/ld\\+json)\\2)`, end: "(?=</|/>)", name: "meta.lang.json.astro", patterns: [{ include: "#tags-lang-start-attributes" }] }, { begin: `\\G(?=\\s*[^>]*?(type|lang)\\s*=\\s*(['"]|)(module)\\2)`, end: "(?=</|/>)", name: "meta.lang.javascript.astro", patterns: [{ include: "#tags-lang-start-attributes" }] }, { begin: `\\G(?=\\s*[^>]*?(type|lang)\\s*=\\s*(['"]|)(?:text/|application/)?([\\w\\/+]+)\\2)`, end: "(?=</|/>)", name: "meta.lang.$3.astro", patterns: [{ include: "#tags-lang-start-attributes" }] }, { include: "#tags-lang-start-attributes" }] }, "tags-lang-start-attributes": { begin: "\\G", end: "(?=/>)|>", endCaptures: { 0: { name: "punctuation.definition.tag.end.astro" } }, name: "meta.tag.start.astro", patterns: [{ include: "#attributes" }] }, "tags-name": { patterns: [{ match: "[A-Z][a-zA-Z0-9_]*", name: "support.class.component.astro" }, { match: "[a-z][\\w0-9:]*-[\\w0-9:-]*", name: "meta.tag.custom.astro entity.name.tag.astro" }, { match: "[a-z][\\w0-9:-]*", name: "entity.name.tag.astro" }] }, "tags-raw": { begin: "<([^/?!\\s<>]+)(?=[^>]+is:raw).*?", beginCaptures: { 0: { patterns: [{ include: "#tags-start-node" }] } }, contentName: "source.unknown", end: "</\\1\\s*>|/>", endCaptures: { 0: { patterns: [{ include: "#tags-end-node" }] } }, name: "meta.scope.tag.$1.astro meta.raw.astro", patterns: [{ include: "#tags-lang-start-attributes" }] }, "tags-start-attributes": { begin: "\\G", end: "(?=/?>)", name: "meta.tag.start.astro", patterns: [{ include: "#attributes" }] }, "tags-start-node": { captures: { 1: { name: "punctuation.definition.tag.begin.astro" }, 2: { patterns: [{ include: "#tags-name" }] } }, match: "(<)([^/\\s>/]*)", name: "meta.tag.start.astro" }, "tags-void": { begin: "(<)(area|base|br|col|embed|hr|img|input|link|meta|param|source|track|wbr)(?=\\s|/?>)", beginCaptures: { 1: { name: "punctuation.definition.tag.begin.astro" }, 2: { name: "entity.name.tag.astro" } }, end: "/?>", endCaptures: { 0: { name: "punctuation.definition.tag.begin.astro" } }, name: "meta.tag.void.astro", patterns: [{ include: "#attributes" }] }, text: { patterns: [{ begin: "(?<=^|---|>|})", end: "(?=<|{|$)", name: "text.astro", patterns: [{ include: "#entities" }] }] } }, scopeName: "source.astro", embeddedLangs: ["json", "javascript", "typescript", "stylus", "sass", "css", "scss", "less", "postcss", "tsx"] });
var M = [
  ...i,
  ...e,
  ...r,
  ...c,
  ...p,
  ...n,
  ...m,
  ...l,
  ...h,
  ...d,
  G
];
const H = Object.freeze({ displayName: "Batch File", injections: { "L:meta.block.repeat.batchfile": { patterns: [{ include: "#repeatParameter" }] } }, name: "bat", patterns: [{ include: "#commands" }, { include: "#comments" }, { include: "#constants" }, { include: "#controls" }, { include: "#escaped_characters" }, { include: "#labels" }, { include: "#numbers" }, { include: "#operators" }, { include: "#parens" }, { include: "#strings" }, { include: "#variables" }], repository: { command_set: { patterns: [{ begin: "(?<=^|[\\s@])(?i:SET)(?=$|\\s)", beginCaptures: { 0: { name: "keyword.command.batchfile" } }, end: "(?=$\\n|[&|><)])", patterns: [{ include: "#command_set_inside" }] }] }, command_set_group: { patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.section.group.begin.batchfile" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.group.end.batchfile" } }, patterns: [{ include: "#command_set_inside_arithmetic" }] }] }, command_set_inside: { patterns: [{ include: "#escaped_characters" }, { include: "#variables" }, { include: "#numbers" }, { include: "#parens" }, { include: "#command_set_strings" }, { include: "#strings" }, { begin: "([^ ][^=]*)(=)", beginCaptures: { 1: { name: "variable.other.readwrite.batchfile" }, 2: { name: "keyword.operator.assignment.batchfile" } }, end: "(?=$\\n|[&|><)])", patterns: [{ include: "#escaped_characters" }, { include: "#variables" }, { include: "#numbers" }, { include: "#parens" }, { include: "#strings" }] }, { begin: "\\s+/[aA]\\s+", end: "(?=$\\n|[&|><)])", name: "meta.expression.set.batchfile", patterns: [{ begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.batchfile" } }, end: '"', endCaptures: { 0: { name: "punctuation.definition.string.end.batchfile" } }, name: "string.quoted.double.batchfile", patterns: [{ include: "#command_set_inside_arithmetic" }, { include: "#command_set_group" }, { include: "#variables" }] }, { include: "#command_set_inside_arithmetic" }, { include: "#command_set_group" }] }, { begin: "\\s+/[pP]\\s+", end: "(?=$\\n|[&|><)])", patterns: [{ include: "#command_set_strings" }, { begin: "([^ ][^=]*)(=)", beginCaptures: { 1: { name: "variable.other.readwrite.batchfile" }, 2: { name: "keyword.operator.assignment.batchfile" } }, end: "(?=$\\n|[&|><)])", name: "meta.prompt.set.batchfile", patterns: [{ include: "#strings" }] }] }] }, command_set_inside_arithmetic: { patterns: [{ include: "#command_set_operators" }, { include: "#numbers" }, { match: ",", name: "punctuation.separator.batchfile" }] }, command_set_operators: { patterns: [{ captures: { 1: { name: "variable.other.readwrite.batchfile" }, 2: { name: "keyword.operator.assignment.augmented.batchfile" } }, match: "([^ ]*)(\\+\\=|\\-\\=|\\*\\=|\\/\\=|%%\\=|&\\=|\\|\\=|\\^\\=|<<\\=|>>\\=)" }, { match: "\\+|\\-|/|\\*|%%|\\||&|\\^|<<|>>|~", name: "keyword.operator.arithmetic.batchfile" }, { match: "!", name: "keyword.operator.logical.batchfile" }, { captures: { 1: { name: "variable.other.readwrite.batchfile" }, 2: { name: "keyword.operator.assignment.batchfile" } }, match: "([^ =]*)(=)" }] }, command_set_strings: { patterns: [{ begin: '(")\\s*([^ ][^=]*)(=)', beginCaptures: { 1: { name: "punctuation.definition.string.begin.batchfile" }, 2: { name: "variable.other.readwrite.batchfile" }, 3: { name: "keyword.operator.assignment.batchfile" } }, end: '"', endCaptures: { 0: { name: "punctuation.definition.string.end.batchfile" } }, name: "string.quoted.double.batchfile", patterns: [{ include: "#variables" }, { include: "#numbers" }, { include: "#escaped_characters" }] }] }, commands: { patterns: [{ match: "(?<=^|[\\s@])(?i:adprep|append|arp|assoc|at|atmadm|attrib|auditpol|autochk|autoconv|autofmt|bcdboot|bcdedit|bdehdcfg|bitsadmin|bootcfg|brea|cacls|cd|certreq|certutil|change|chcp|chdir|chglogon|chgport|chgusr|chkdsk|chkntfs|choice|cipher|clip|cls|clscluadmin|cluster|cmd|cmdkey|cmstp|color|comp|compact|convert|copy|cprofile|cscript|csvde|date|dcdiag|dcgpofix|dcpromo|defra|del|dfscmd|dfsdiag|dfsrmig|diantz|dir|dirquota|diskcomp|diskcopy|diskpart|diskperf|diskraid|diskshadow|dispdiag|doin|dnscmd|doskey|driverquery|dsacls|dsadd|dsamain|dsdbutil|dsget|dsmgmt|dsmod|dsmove|dsquery|dsrm|edit|endlocal|eraseesentutl|eventcreate|eventquery|eventtriggers|evntcmd|expand|extract|fc|filescrn|find|findstr|finger|flattemp|fonde|forfiles|format|freedisk|fsutil|ftp|ftype|fveupdate|getmac|gettype|gpfixup|gpresult|gpupdate|graftabl|hashgen|hep|helpctr|hostname|icacls|iisreset|inuse|ipconfig|ipxroute|irftp|ismserv|jetpack|klist|ksetup|ktmutil|ktpass|label|ldifd|ldp|lodctr|logman|logoff|lpq|lpr|macfile|makecab|manage-bde|mapadmin|md|mkdir|mklink|mmc|mode|more|mount|mountvol|move|mqbup|mqsvc|mqtgsvc|msdt|msg|msiexec|msinfo32|mstsc|nbtstat|net computer|net group|net localgroup|net print|net session|net share|net start|net stop|net use|net user|net view|net|netcfg|netdiag|netdom|netsh|netstat|nfsadmin|nfsshare|nfsstat|nlb|nlbmgr|nltest|nslookup|ntackup|ntcmdprompt|ntdsutil|ntfrsutl|openfiles|pagefileconfig|path|pathping|pause|pbadmin|pentnt|perfmon|ping|pnpunatten|pnputil|popd|powercfg|powershell|powershell_ise|print|prncnfg|prndrvr|prnjobs|prnmngr|prnport|prnqctl|prompt|pubprn|pushd|pushprinterconnections|pwlauncher|qappsrv|qprocess|query|quser|qwinsta|rasdial|rcp|rd|rdpsign|regentc|recover|redircmp|redirusr|reg|regini|regsvr32|relog|ren|rename|rendom|repadmin|repair-bde|replace|reset session|rxec|risetup|rmdir|robocopy|route|rpcinfo|rpcping|rsh|runas|rundll32|rwinsta|sc|schtasks|scp|scwcmd|secedit|serverceipoptin|servrmanagercmd|serverweroptin|setspn|setx|sfc|sftp|shadow|shift|showmount|shutdown|sort|ssh|ssh-add|ssh-agent|ssh-keygen|ssh-keyscan|start|storrept|subst|sxstrace|ysocmgr|systeminfo|takeown|tapicfg|taskkill|tasklist|tcmsetup|telnet|tftp|time|timeout|title|tlntadmn|tpmvscmgr|tpmvscmgr|tacerpt|tracert|tree|tscon|tsdiscon|tsecimp|tskill|tsprof|type|typeperf|tzutil|uddiconfig|umount|unlodctr|ver|verifier|verif|vol|vssadmin|w32tm|waitfor|wbadmin|wdsutil|wecutil|wevtutil|where|whoami|winnt|winnt32|winpop|winrm|winrs|winsat|wlbs|wmic|wscript|wsl|xcopy)(?=$|\\s)", name: "keyword.command.batchfile" }, { begin: "(?i)(?<=^|[\\s@])(echo)(?:(?=$|\\.|:)|\\s+(?:(on|off)(?=\\s*$))?)", beginCaptures: { 1: { name: "keyword.command.batchfile" }, 2: { name: "keyword.other.special-method.batchfile" } }, end: "(?=$\\n|[&|><)])", patterns: [{ include: "#escaped_characters" }, { include: "#variables" }, { include: "#numbers" }, { include: "#strings" }] }, { captures: { 1: { name: "keyword.command.batchfile" }, 2: { name: "keyword.other.special-method.batchfile" } }, match: "(?i)(?<=^|[\\s@])(setlocal)(?:\\s*$|\\s+(EnableExtensions|DisableExtensions|EnableDelayedExpansion|DisableDelayedExpansion)(?=\\s*$))" }, { include: "#command_set" }] }, comments: { patterns: [{ begin: "(?:^|(&))\\s*(?=((?::[+=,;: ])))", beginCaptures: { 1: { name: "keyword.operator.conditional.batchfile" } }, end: "\\n", patterns: [{ begin: "((?::[+=,;: ]))", beginCaptures: { 1: { name: "punctuation.definition.comment.batchfile" } }, end: "(?=\\n)", name: "comment.line.colon.batchfile" }] }, { begin: "(?<=^|[\\s@])(?i)(REM)(\\.)", beginCaptures: { 1: { name: "keyword.command.rem.batchfile" }, 2: { name: "punctuation.separator.batchfile" } }, end: "(?=$\\n|[&|><)])", name: "comment.line.rem.batchfile" }, { begin: "(?<=^|[\\s@])(?i:rem)\\b", beginCaptures: { 0: { name: "keyword.command.rem.batchfile" } }, end: "\\n", name: "comment.line.rem.batchfile", patterns: [{ match: "[><|]", name: "invalid.illegal.unexpected-character.batchfile" }] }] }, constants: { patterns: [{ match: "\\b(?i:NUL)\\b", name: "constant.language.batchfile" }] }, controls: { patterns: [{ match: "(?i)(?<=^|\\s)(?:call|exit(?=$|\\s)|goto(?=$|\\s|:))", name: "keyword.control.statement.batchfile" }, { captures: { 1: { name: "keyword.control.conditional.batchfile" }, 2: { name: "keyword.operator.logical.batchfile" }, 3: { name: "keyword.other.special-method.batchfile" } }, match: "(?<=^|\\s)(?i)(if)\\s+(?:(not)\\s+)?(exist|defined|errorlevel|cmdextversion)(?=\\s)" }, { match: "(?<=^|\\s)(?i)(?:if|else)(?=$|\\s)", name: "keyword.control.conditional.batchfile" }, { begin: "(?<=^|[\\s(&^])(?i)for(?=\\s)", beginCaptures: { 0: { name: "keyword.control.repeat.batchfile" } }, end: "\\n", name: "meta.block.repeat.batchfile", patterns: [{ begin: "(?<=[\\s^])(?i)in(?=\\s)", beginCaptures: { 0: { name: "keyword.control.repeat.in.batchfile" } }, end: "(?<=[\\s)^])(?i)do(?=\\s)|\\n", endCaptures: { 0: { name: "keyword.control.repeat.do.batchfile" } }, patterns: [{ include: "$self" }] }, { include: "$self" }] }] }, escaped_characters: { patterns: [{ match: "%%|\\^\\^!|\\^(?=.)|\\^\\n", name: "constant.character.escape.batchfile" }] }, labels: { patterns: [{ captures: { 1: { name: "punctuation.separator.batchfile" }, 2: { name: "keyword.other.special-method.batchfile" } }, match: "(?i)(?:^\\s*|(?<=call|goto)\\s*)(:)([^+=,;:\\s]\\S*)" }] }, numbers: { patterns: [{ match: "(?<=^|\\s|=)(0[xX][0-9A-Fa-f]*|[+-]?\\d+)(?=$|\\s|<|>)", name: "constant.numeric.batchfile" }] }, operators: { patterns: [{ match: "@(?=\\S)", name: "keyword.operator.at.batchfile" }, { match: "(?<=\\s)(?i:EQU|NEQ|LSS|LEQ|GTR|GEQ)(?=\\s)|==", name: "keyword.operator.comparison.batchfile" }, { match: "(?<=\\s)(?i)(NOT)(?=\\s)", name: "keyword.operator.logical.batchfile" }, { match: "(?<!\\^)&&?|\\|\\|", name: "keyword.operator.conditional.batchfile" }, { match: "(?<!\\^)\\|", name: "keyword.operator.pipe.batchfile" }, { match: "<&?|>[&>]?", name: "keyword.operator.redirection.batchfile" }] }, parens: { patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.section.group.begin.batchfile" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.group.end.batchfile" } }, name: "meta.group.batchfile", patterns: [{ match: ",|;", name: "punctuation.separator.batchfile" }, { include: "$self" }] }] }, repeatParameter: { patterns: [{ captures: { 1: { name: "punctuation.definition.variable.batchfile" } }, match: "(%%)(?:(?i:~[fdpnxsatz]*(?:\\$PATH:)?)?[a-zA-Z])", name: "variable.parameter.repeat.batchfile" }] }, strings: { patterns: [{ begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.batchfile" } }, end: '(")|(\\n)', endCaptures: { 1: { name: "punctuation.definition.string.end.batchfile" }, 2: { name: "invalid.illegal.newline.batchfile" } }, name: "string.quoted.double.batchfile", patterns: [{ match: "%%", name: "constant.character.escape.batchfile" }, { include: "#variables" }] }] }, variable: { patterns: [{ begin: "%(?=[^%]+%)", beginCaptures: { 0: { name: "punctuation.definition.variable.begin.batchfile" } }, end: "(%)|\\n", endCaptures: { 1: { name: "punctuation.definition.variable.end.batchfile" } }, name: "variable.other.readwrite.batchfile", patterns: [{ begin: ":~", beginCaptures: { 0: { name: "punctuation.separator.batchfile" } }, end: "(?=%|\\n)", name: "meta.variable.substring.batchfile", patterns: [{ include: "#variable_substring" }] }, { begin: ":", beginCaptures: { 0: { name: "punctuation.separator.batchfile" } }, end: "(?=%|\\n)", name: "meta.variable.substitution.batchfile", patterns: [{ include: "#variable_replace" }, { begin: "=", beginCaptures: { 0: { name: "punctuation.separator.batchfile" } }, end: "(?=%|\\n)", patterns: [{ include: "#variable_delayed_expansion" }, { match: "[^%]+", name: "string.unquoted.batchfile" }] }] }] }] }, variable_delayed_expansion: { patterns: [{ begin: "!(?=[^!]+!)", beginCaptures: { 0: { name: "punctuation.definition.variable.begin.batchfile" } }, end: "(!)|\\n", endCaptures: { 1: { name: "punctuation.definition.variable.end.batchfile" } }, name: "variable.other.readwrite.batchfile", patterns: [{ begin: ":~", beginCaptures: { 0: { name: "punctuation.separator.batchfile" } }, end: "(?=!|\\n)", name: "meta.variable.substring.batchfile", patterns: [{ include: "#variable_substring" }] }, { begin: ":", beginCaptures: { 0: { name: "punctuation.separator.batchfile" } }, end: "(?=!|\\n)", name: "meta.variable.substitution.batchfile", patterns: [{ include: "#escaped_characters" }, { include: "#variable_replace" }, { include: "#variable" }, { begin: "=", beginCaptures: { 0: { name: "punctuation.separator.batchfile" } }, end: "(?=!|\\n)", patterns: [{ include: "#variable" }, { match: "[^!]+", name: "string.unquoted.batchfile" }] }] }] }] }, variable_replace: { patterns: [{ match: "[^=%!\\n]+", name: "string.unquoted.batchfile" }] }, variable_substring: { patterns: [{ captures: { 1: { name: "constant.numeric.batchfile" }, 2: { name: "punctuation.separator.batchfile" }, 3: { name: "constant.numeric.batchfile" } }, match: "([+-]?\\d+)(?:(,)([+-]?\\d+))?" }] }, variables: { patterns: [{ captures: { 1: { name: "punctuation.definition.variable.batchfile" } }, match: "(%)(?:(?i:~[fdpnxsatz]*(?:\\$PATH:)?)?\\d|\\*)", name: "variable.parameter.batchfile" }, { include: "#variable" }, { include: "#variable_delayed_expansion" }] } }, scopeName: "source.batchfile", aliases: ["batch"] });
var X = [
  H
];
const V = Object.freeze({ displayName: "C", name: "c", patterns: [{ include: "#preprocessor-rule-enabled" }, { include: "#preprocessor-rule-disabled" }, { include: "#preprocessor-rule-conditional" }, { include: "#predefined_macros" }, { include: "#comments" }, { include: "#switch_statement" }, { include: "#anon_pattern_1" }, { include: "#storage_types" }, { include: "#anon_pattern_2" }, { include: "#anon_pattern_3" }, { include: "#anon_pattern_4" }, { include: "#anon_pattern_5" }, { include: "#anon_pattern_6" }, { include: "#anon_pattern_7" }, { include: "#operators" }, { include: "#numbers" }, { include: "#strings" }, { include: "#anon_pattern_range_1" }, { include: "#anon_pattern_range_2" }, { include: "#anon_pattern_range_3" }, { include: "#pragma-mark" }, { include: "#anon_pattern_range_4" }, { include: "#anon_pattern_range_5" }, { include: "#anon_pattern_range_6" }, { include: "#anon_pattern_8" }, { include: "#anon_pattern_9" }, { include: "#anon_pattern_10" }, { include: "#anon_pattern_11" }, { include: "#anon_pattern_12" }, { include: "#anon_pattern_13" }, { include: "#block" }, { include: "#parens" }, { include: "#anon_pattern_range_7" }, { include: "#line_continuation_character" }, { include: "#anon_pattern_range_8" }, { include: "#anon_pattern_range_9" }, { include: "#anon_pattern_14" }, { include: "#anon_pattern_15" }], repository: { "access-method": { begin: "([a-zA-Z_][a-zA-Z_0-9]*|(?<=[\\]\\)]))\\s*(?:(\\.)|(->))((?:(?:[a-zA-Z_][a-zA-Z_0-9]*)\\s*(?:(?:\\.)|(?:->)))*)\\s*([a-zA-Z_][a-zA-Z_0-9]*)(\\()", beginCaptures: { 1: { name: "variable.object.c" }, 2: { name: "punctuation.separator.dot-access.c" }, 3: { name: "punctuation.separator.pointer-access.c" }, 4: { patterns: [{ match: "\\.", name: "punctuation.separator.dot-access.c" }, { match: "->", name: "punctuation.separator.pointer-access.c" }, { match: "[a-zA-Z_][a-zA-Z_0-9]*", name: "variable.object.c" }, { match: ".+", name: "everything.else.c" }] }, 5: { name: "entity.name.function.member.c" }, 6: { name: "punctuation.section.arguments.begin.bracket.round.function.member.c" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.function.member.c" } }, name: "meta.function-call.member.c", patterns: [{ include: "#function-call-innards" }] }, anon_pattern_1: { match: "\\b(break|continue|do|else|for|goto|if|_Pragma|return|while)\\b", name: "keyword.control.c" }, anon_pattern_10: { match: `(?x) \\b
(int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|int_least8_t
|int_least16_t|int_least32_t|int_least64_t|uint_least8_t|uint_least16_t|uint_least32_t
|uint_least64_t|int_fast8_t|int_fast16_t|int_fast32_t|int_fast64_t|uint_fast8_t
|uint_fast16_t|uint_fast32_t|uint_fast64_t|intptr_t|uintptr_t|intmax_t|intmax_t
|uintmax_t|uintmax_t)
\\b`, name: "support.type.stdint.c" }, anon_pattern_11: { match: "\\b(noErr|kNilOptions|kInvalidID|kVariableLengthArray)\\b", name: "support.constant.mac-classic.c" }, anon_pattern_12: { match: `(?x) \\b
(AbsoluteTime|Boolean|Byte|ByteCount|ByteOffset|BytePtr|CompTimeValue|ConstLogicalAddress|ConstStrFileNameParam
|ConstStringPtr|Duration|Fixed|FixedPtr|Float32|Float32Point|Float64|Float80|Float96|FourCharCode|Fract|FractPtr
|Handle|ItemCount|LogicalAddress|OptionBits|OSErr|OSStatus|OSType|OSTypePtr|PhysicalAddress|ProcessSerialNumber
|ProcessSerialNumberPtr|ProcHandle|Ptr|ResType|ResTypePtr|ShortFixed|ShortFixedPtr|SignedByte|SInt16|SInt32|SInt64
|SInt8|Size|StrFileName|StringHandle|StringPtr|TimeBase|TimeRecord|TimeScale|TimeValue|TimeValue64|UInt16|UInt32
|UInt64|UInt8|UniChar|UniCharCount|UniCharCountPtr|UniCharPtr|UnicodeScalarValue|UniversalProcHandle|UniversalProcPtr
|UnsignedFixed|UnsignedFixedPtr|UnsignedWide|UTF16Char|UTF32Char|UTF8Char)
\\b`, name: "support.type.mac-classic.c" }, anon_pattern_13: { match: "\\b([A-Za-z0-9_]+_t)\\b", name: "support.type.posix-reserved.c" }, anon_pattern_14: { match: ";", name: "punctuation.terminator.statement.c" }, anon_pattern_15: { match: ",", name: "punctuation.separator.delimiter.c" }, anon_pattern_2: { match: "typedef", name: "keyword.other.typedef.c" }, anon_pattern_3: { match: "\\b(const|extern|register|restrict|static|volatile|inline)\\b", name: "storage.modifier.c" }, anon_pattern_4: { match: "\\bk[A-Z]\\w*\\b", name: "constant.other.variable.mac-classic.c" }, anon_pattern_5: { match: "\\bg[A-Z]\\w*\\b", name: "variable.other.readwrite.global.mac-classic.c" }, anon_pattern_6: { match: "\\bs[A-Z]\\w*\\b", name: "variable.other.readwrite.static.mac-classic.c" }, anon_pattern_7: { match: "\\b(NULL|true|false|TRUE|FALSE)\\b", name: "constant.language.c" }, anon_pattern_8: { match: "\\b(u_char|u_short|u_int|u_long|ushort|uint|u_quad_t|quad_t|qaddr_t|caddr_t|daddr_t|div_t|dev_t|fixpt_t|blkcnt_t|blksize_t|gid_t|in_addr_t|in_port_t|ino_t|key_t|mode_t|nlink_t|id_t|pid_t|off_t|segsz_t|swblk_t|uid_t|id_t|clock_t|size_t|ssize_t|time_t|useconds_t|suseconds_t)\\b", name: "support.type.sys-types.c" }, anon_pattern_9: { match: "\\b(pthread_attr_t|pthread_cond_t|pthread_condattr_t|pthread_mutex_t|pthread_mutexattr_t|pthread_once_t|pthread_rwlock_t|pthread_rwlockattr_t|pthread_t|pthread_key_t)\\b", name: "support.type.pthread.c" }, anon_pattern_range_1: { begin: "((?:(?:(?>\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+?|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z)))((#)\\s*define\\b)\\s+((?<!\\w)[a-zA-Z_]\\w*(?!\\w))(?:(\\()([^()\\\\]+)(\\)))?", beginCaptures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.c punctuation.definition.comment.begin.c" }, 3: { name: "comment.block.c" }, 4: { patterns: [{ match: "\\*\\/", name: "comment.block.c punctuation.definition.comment.end.c" }, { match: "\\*", name: "comment.block.c" }] }, 5: { name: "keyword.control.directive.define.c" }, 6: { name: "punctuation.definition.directive.c" }, 7: { name: "entity.name.function.preprocessor.c" }, 8: { name: "punctuation.definition.parameters.begin.c" }, 9: { patterns: [{ captures: { 1: { name: "variable.parameter.preprocessor.c" } }, match: "(?<=[(,])\\s*((?<!\\w)[a-zA-Z_]\\w*(?!\\w))\\s*" }, { match: ",", name: "punctuation.separator.parameters.c" }, { match: "\\.\\.\\.", name: "ellipses.c punctuation.vararg-ellipses.variable.parameter.preprocessor.c" }] }, 10: { name: "punctuation.definition.parameters.end.c" } }, end: "(?<!\\\\)(?=\\n)", name: "meta.preprocessor.macro.c", patterns: [{ include: "#preprocessor-rule-define-line-contents" }] }, anon_pattern_range_2: { begin: "^\\s*((#)\\s*(error|warning))\\b\\s*", beginCaptures: { 1: { name: "keyword.control.directive.diagnostic.$3.c" }, 2: { name: "punctuation.definition.directive.c" } }, end: "(?<!\\\\)(?=\\n)", name: "meta.preprocessor.diagnostic.c", patterns: [{ begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.c" } }, end: '"|(?<!\\\\)(?=\\s*\\n)', endCaptures: { 0: { name: "punctuation.definition.string.end.c" } }, name: "string.quoted.double.c", patterns: [{ include: "#line_continuation_character" }] }, { begin: "'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.c" } }, end: "'|(?<!\\\\)(?=\\s*\\n)", endCaptures: { 0: { name: "punctuation.definition.string.end.c" } }, name: "string.quoted.single.c", patterns: [{ include: "#line_continuation_character" }] }, { begin: `[^'"]`, end: "(?<!\\\\)(?=\\s*\\n)", name: "string.unquoted.single.c", patterns: [{ include: "#line_continuation_character" }, { include: "#comments" }] }] }, anon_pattern_range_3: { begin: "^\\s*((#)\\s*(include(?:_next)?|import))\\b\\s*", beginCaptures: { 1: { name: "keyword.control.directive.$3.c" }, 2: { name: "punctuation.definition.directive.c" } }, end: "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)", name: "meta.preprocessor.include.c", patterns: [{ include: "#line_continuation_character" }, { begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.c" } }, end: '"', endCaptures: { 0: { name: "punctuation.definition.string.end.c" } }, name: "string.quoted.double.include.c" }, { begin: "<", beginCaptures: { 0: { name: "punctuation.definition.string.begin.c" } }, end: ">", endCaptures: { 0: { name: "punctuation.definition.string.end.c" } }, name: "string.quoted.other.lt-gt.include.c" }] }, anon_pattern_range_4: { begin: "^\\s*((#)\\s*line)\\b", beginCaptures: { 1: { name: "keyword.control.directive.line.c" }, 2: { name: "punctuation.definition.directive.c" } }, end: "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)", name: "meta.preprocessor.c", patterns: [{ include: "#strings" }, { include: "#numbers" }, { include: "#line_continuation_character" }] }, anon_pattern_range_5: { begin: "^\\s*(?:((#)\\s*undef))\\b", beginCaptures: { 1: { name: "keyword.control.directive.undef.c" }, 2: { name: "punctuation.definition.directive.c" } }, end: "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)", name: "meta.preprocessor.c", patterns: [{ match: "[a-zA-Z_$][\\w$]*", name: "entity.name.function.preprocessor.c" }, { include: "#line_continuation_character" }] }, anon_pattern_range_6: { begin: "^\\s*(?:((#)\\s*pragma))\\b", beginCaptures: { 1: { name: "keyword.control.directive.pragma.c" }, 2: { name: "punctuation.definition.directive.c" } }, end: "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)", name: "meta.preprocessor.pragma.c", patterns: [{ include: "#strings" }, { match: "[a-zA-Z_$][\\w\\-$]*", name: "entity.other.attribute-name.pragma.preprocessor.c" }, { include: "#numbers" }, { include: "#line_continuation_character" }] }, anon_pattern_range_7: { begin: "(?<!\\w)(?!\\s*(?:atomic_uint_least64_t|atomic_uint_least16_t|atomic_uint_least32_t|atomic_uint_least8_t|atomic_int_least16_t|atomic_uint_fast64_t|atomic_uint_fast32_t|atomic_int_least64_t|atomic_int_least32_t|pthread_rwlockattr_t|atomic_uint_fast16_t|pthread_mutexattr_t|atomic_int_fast16_t|atomic_uint_fast8_t|atomic_int_fast64_t|atomic_int_least8_t|atomic_int_fast32_t|atomic_int_fast8_t|pthread_condattr_t|pthread_rwlock_t|atomic_uintptr_t|atomic_ptrdiff_t|atomic_uintmax_t|atomic_intmax_t|atomic_char32_t|atomic_intptr_t|atomic_char16_t|pthread_mutex_t|pthread_cond_t|atomic_wchar_t|uint_least64_t|uint_least32_t|uint_least16_t|pthread_once_t|pthread_attr_t|uint_least8_t|int_least32_t|int_least16_t|pthread_key_t|uint_fast32_t|uint_fast64_t|uint_fast16_t|atomic_size_t|atomic_ushort|atomic_ullong|int_least64_t|atomic_ulong|int_least8_t|int_fast16_t|int_fast32_t|int_fast64_t|uint_fast8_t|memory_order|atomic_schar|atomic_uchar|atomic_short|atomic_llong|thread_local|atomic_bool|atomic_uint|atomic_long|int_fast8_t|suseconds_t|atomic_char|atomic_int|useconds_t|_Imaginary|uintmax_t|uintmax_t|in_addr_t|in_port_t|_Noreturn|blksize_t|pthread_t|uintptr_t|volatile|u_quad_t|blkcnt_t|intmax_t|intptr_t|_Complex|uint16_t|uint32_t|uint64_t|_Alignof|_Alignas|continue|unsigned|restrict|intmax_t|register|int64_t|qaddr_t|segsz_t|_Atomic|alignas|default|caddr_t|nlink_t|typedef|u_short|fixpt_t|clock_t|swblk_t|ssize_t|alignof|daddr_t|int16_t|int32_t|uint8_t|struct|mode_t|size_t|time_t|ushort|u_long|u_char|int8_t|double|signed|static|extern|inline|return|switch|xor_eq|and_eq|bitand|not_eq|sizeof|quad_t|uid_t|bitor|union|off_t|key_t|ino_t|compl|u_int|short|const|false|while|float|pid_t|break|_Bool|or_eq|div_t|dev_t|gid_t|id_t|long|case|goto|else|bool|auto|id_t|enum|uint|true|NULL|void|char|for|not|int|and|xor|do|or|if)\\s*\\()(?=[a-zA-Z_]\\w*\\s*\\()", end: "(?!\\G)(?<=\\))", name: "meta.function.c", patterns: [{ include: "#function-innards" }] }, anon_pattern_range_8: { begin: "([a-zA-Z_][a-zA-Z_0-9]*|(?<=[\\]\\)]))?(\\[)(?!\\])", beginCaptures: { 1: { name: "variable.object.c" }, 2: { name: "punctuation.definition.begin.bracket.square.c" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.end.bracket.square.c" } }, name: "meta.bracket.square.access.c", patterns: [{ include: "#function-call-innards" }] }, anon_pattern_range_9: { match: "\\[\\s*\\]", name: "storage.modifier.array.bracket.square.c" }, backslash_escapes: { match: `(?x)\\\\ (
\\\\			 |
[abefnprtv'"?]   |
[0-3][0-7]{,2}	 |
[4-7]\\d?		|
x[a-fA-F0-9]{,2} |
u[a-fA-F0-9]{,4} |
U[a-fA-F0-9]{,8} )`, name: "constant.character.escape.c" }, block: { patterns: [{ begin: "{", beginCaptures: { 0: { name: "punctuation.section.block.begin.bracket.curly.c" } }, end: "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)", endCaptures: { 0: { name: "punctuation.section.block.end.bracket.curly.c" } }, name: "meta.block.c", patterns: [{ include: "#block_innards" }] }] }, block_comment: { patterns: [{ begin: "\\s*+(\\/\\*)", beginCaptures: { 1: { name: "punctuation.definition.comment.begin.c" } }, end: "\\*\\/", endCaptures: { 0: { name: "punctuation.definition.comment.end.c" } }, name: "comment.block.c" }, { begin: "\\s*+(\\/\\*)", beginCaptures: { 1: { name: "punctuation.definition.comment.begin.c" } }, end: "\\*\\/", endCaptures: { 0: { name: "punctuation.definition.comment.end.c" } }, name: "comment.block.c" }] }, block_innards: { patterns: [{ include: "#preprocessor-rule-enabled-block" }, { include: "#preprocessor-rule-disabled-block" }, { include: "#preprocessor-rule-conditional-block" }, { include: "#method_access" }, { include: "#member_access" }, { include: "#c_function_call" }, { begin: `(?x)
(?:
(?:
(?=\\s)(?<!else|new|return)
(?<=\\w) \\s+(and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas)
)
)
(
(?:[A-Za-z_][A-Za-z0-9_]*+ | :: )++
|
(?:(?<=operator) (?:[-*&<>=+!]+ | \\(\\) | \\[\\]))
)
\\s*(\\()`, beginCaptures: { 1: { name: "variable.other.c" }, 2: { name: "punctuation.section.parens.begin.bracket.round.initialization.c" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.parens.end.bracket.round.initialization.c" } }, name: "meta.initialization.c", patterns: [{ include: "#function-call-innards" }] }, { begin: "{", beginCaptures: { 0: { name: "punctuation.section.block.begin.bracket.curly.c" } }, end: "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)", endCaptures: { 0: { name: "punctuation.section.block.end.bracket.curly.c" } }, patterns: [{ include: "#block_innards" }] }, { include: "#parens-block" }, { include: "$self" }] }, c_conditional_context: { patterns: [{ include: "$self" }, { include: "#block_innards" }] }, c_function_call: { begin: `(?x)
(?!(?:while|for|do|if|else|switch|catch|enumerate|return|typeid|alignof|alignas|sizeof|[cr]?iterate|and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas)\\s*\\()
(?=
(?:[A-Za-z_][A-Za-z0-9_]*+|::)++\\s*\\(
|
(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\\s*\\(
)`, end: "(?<=\\))(?!\\w)", name: "meta.function-call.c", patterns: [{ include: "#function-call-innards" }] }, case_statement: { begin: "((?>(?:(?:(?>(?<!\\s)\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z))))((?<!\\w)case(?!\\w))", beginCaptures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.c punctuation.definition.comment.begin.c" }, 3: { name: "comment.block.c" }, 4: { patterns: [{ match: "\\*\\/", name: "comment.block.c punctuation.definition.comment.end.c" }, { match: "\\*", name: "comment.block.c" }] }, 5: { name: "keyword.control.case.c" } }, end: "(:)", endCaptures: { 1: { name: "punctuation.separator.colon.case.c" } }, name: "meta.conditional.case.c", patterns: [{ include: "#evaluation_context" }, { include: "#c_conditional_context" }] }, comments: { patterns: [{ patterns: [{ patterns: [{ begin: "(?:^)(?>\\s*)(\\/\\/[!\\/]+)", beginCaptures: { 1: { name: "punctuation.definition.comment.documentation.c" } }, end: "(?<=\\n)(?<!\\\\\\n)", name: "comment.line.double-slash.documentation.c", patterns: [{ include: "#line_continuation_character" }, { match: '(?<=[\\s*!\\/])[\\\\@](?:callergraph|callgraph|else|endif|f\\$|f\\[|f\\]|hidecallergraph|hidecallgraph|hiderefby|hiderefs|hideinitializer|htmlinclude|n|nosubgrouping|private|privatesection|protected|protectedsection|public|publicsection|pure|showinitializer|showrefby|showrefs|tableofcontents|\\$|\\#|<|>|%|"|\\.|=|::|\\||\\-\\-|\\-\\-\\-)\\b(?:\\{[^}]*\\})?', name: "storage.type.class.doxygen.c" }, { captures: { 1: { name: "storage.type.class.doxygen.c" }, 2: { name: "markup.italic.doxygen.c" } }, match: "((?<=[\\s*!\\/])[\\\\@](?:a|em|e))\\s+(\\S+)" }, { captures: { 1: { name: "storage.type.class.doxygen.c" }, 2: { name: "markup.bold.doxygen.c" } }, match: "((?<=[\\s*!\\/])[\\\\@]b)\\s+(\\S+)" }, { captures: { 1: { name: "storage.type.class.doxygen.c" }, 2: { name: "markup.inline.raw.string.c" } }, match: "((?<=[\\s*!\\/])[\\\\@](?:c|p))\\s+(\\S+)" }, { match: "(?<=[\\s*!\\/])[\\\\@](?:a|anchor|b|c|cite|copybrief|copydetail|copydoc|def|dir|dontinclude|e|em|emoji|enum|example|extends|file|idlexcept|implements|include|includedoc|includelineno|latexinclude|link|memberof|namespace|p|package|ref|refitem|related|relates|relatedalso|relatesalso|verbinclude)\\b(?:\\{[^}]*\\})?", name: "storage.type.class.doxygen.c" }, { match: "(?<=[\\s*!\\/])[\\\\@](?:addindex|addtogroup|category|class|defgroup|diafile|dotfile|elseif|fn|headerfile|if|ifnot|image|ingroup|interface|line|mainpage|mscfile|name|overload|page|property|protocol|section|skip|skipline|snippet|snippetdoc|snippetlineno|struct|subpage|subsection|subsubsection|typedef|union|until|vhdlflow|weakgroup)\\b(?:\\{[^}]*\\})?", name: "storage.type.class.doxygen.c" }, { captures: { 1: { name: "storage.type.class.doxygen.c" }, 2: { patterns: [{ match: "in|out", name: "keyword.other.parameter.direction.$0.c" }] }, 3: { name: "variable.parameter.c" } }, match: "((?<=[\\s*!\\/])[\\\\@]param)(?:\\s*\\[((?:,?\\s*(?:in|out)\\s*)+)\\])?\\s+(\\b\\w+\\b)" }, { match: "(?<=[\\s*!\\/])[\\\\@](?:arg|attention|author|authors|brief|bug|copyright|date|deprecated|details|exception|invariant|li|note|par|paragraph|param|post|pre|remark|remarks|result|return|returns|retval|sa|see|short|since|test|throw|todo|tparam|version|warning|xrefitem)\\b(?:\\{[^}]*\\})?", name: "storage.type.class.doxygen.c" }, { match: "(?<=[\\s*!\\/])[\\\\@](?:code|cond|docbookonly|dot|htmlonly|internal|latexonly|link|manonly|msc|parblock|rtfonly|secreflist|uml|verbatim|xmlonly|endcode|endcond|enddocbookonly|enddot|endhtmlonly|endinternal|endlatexonly|endlink|endmanonly|endmsc|endparblock|endrtfonly|endsecreflist|enduml|endverbatim|endxmlonly)\\b(?:\\{[^}]*\\})?", name: "storage.type.class.doxygen.c" }, { match: "(?:\\b[A-Z]+:|@[a-z_]+:)", name: "storage.type.class.gtkdoc" }] }, { captures: { 1: { name: "punctuation.definition.comment.begin.documentation.c" }, 2: { patterns: [{ match: '(?<=[\\s*!\\/])[\\\\@](?:callergraph|callgraph|else|endif|f\\$|f\\[|f\\]|hidecallergraph|hidecallgraph|hiderefby|hiderefs|hideinitializer|htmlinclude|n|nosubgrouping|private|privatesection|protected|protectedsection|public|publicsection|pure|showinitializer|showrefby|showrefs|tableofcontents|\\$|\\#|<|>|%|"|\\.|=|::|\\||\\-\\-|\\-\\-\\-)\\b(?:\\{[^}]*\\})?', name: "storage.type.class.doxygen.c" }, { captures: { 1: { name: "storage.type.class.doxygen.c" }, 2: { name: "markup.italic.doxygen.c" } }, match: "((?<=[\\s*!\\/])[\\\\@](?:a|em|e))\\s+(\\S+)" }, { captures: { 1: { name: "storage.type.class.doxygen.c" }, 2: { name: "markup.bold.doxygen.c" } }, match: "((?<=[\\s*!\\/])[\\\\@]b)\\s+(\\S+)" }, { captures: { 1: { name: "storage.type.class.doxygen.c" }, 2: { name: "markup.inline.raw.string.c" } }, match: "((?<=[\\s*!\\/])[\\\\@](?:c|p))\\s+(\\S+)" }, { match: "(?<=[\\s*!\\/])[\\\\@](?:a|anchor|b|c|cite|copybrief|copydetail|copydoc|def|dir|dontinclude|e|em|emoji|enum|example|extends|file|idlexcept|implements|include|includedoc|includelineno|latexinclude|link|memberof|namespace|p|package|ref|refitem|related|relates|relatedalso|relatesalso|verbinclude)\\b(?:\\{[^}]*\\})?", name: "storage.type.class.doxygen.c" }, { match: "(?<=[\\s*!\\/])[\\\\@](?:addindex|addtogroup|category|class|defgroup|diafile|dotfile|elseif|fn|headerfile|if|ifnot|image|ingroup|interface|line|mainpage|mscfile|name|overload|page|property|protocol|section|skip|skipline|snippet|snippetdoc|snippetlineno|struct|subpage|subsection|subsubsection|typedef|union|until|vhdlflow|weakgroup)\\b(?:\\{[^}]*\\})?", name: "storage.type.class.doxygen.c" }, { captures: { 1: { name: "storage.type.class.doxygen.c" }, 2: { patterns: [{ match: "in|out", name: "keyword.other.parameter.direction.$0.c" }] }, 3: { name: "variable.parameter.c" } }, match: "((?<=[\\s*!\\/])[\\\\@]param)(?:\\s*\\[((?:,?\\s*(?:in|out)\\s*)+)\\])?\\s+(\\b\\w+\\b)" }, { match: "(?<=[\\s*!\\/])[\\\\@](?:arg|attention|author|authors|brief|bug|copyright|date|deprecated|details|exception|invariant|li|note|par|paragraph|param|post|pre|remark|remarks|result|return|returns|retval|sa|see|short|since|test|throw|todo|tparam|version|warning|xrefitem)\\b(?:\\{[^}]*\\})?", name: "storage.type.class.doxygen.c" }, { match: "(?<=[\\s*!\\/])[\\\\@](?:code|cond|docbookonly|dot|htmlonly|internal|latexonly|link|manonly|msc|parblock|rtfonly|secreflist|uml|verbatim|xmlonly|endcode|endcond|enddocbookonly|enddot|endhtmlonly|endinternal|endlatexonly|endlink|endmanonly|endmsc|endparblock|endrtfonly|endsecreflist|enduml|endverbatim|endxmlonly)\\b(?:\\{[^}]*\\})?", name: "storage.type.class.doxygen.c" }, { match: "(?:\\b[A-Z]+:|@[a-z_]+:)", name: "storage.type.class.gtkdoc" }] }, 3: { name: "punctuation.definition.comment.end.documentation.c" } }, match: "(\\/\\*[!*]+(?=\\s))(.+)([!*]*\\*\\/)", name: "comment.block.documentation.c" }, { begin: "((?>\\s*)\\/\\*[!*]+(?:(?:\\n|$)|(?=\\s)))", beginCaptures: { 1: { name: "punctuation.definition.comment.begin.documentation.c" } }, end: "([!*]*\\*\\/)", endCaptures: { 1: { name: "punctuation.definition.comment.end.documentation.c" } }, name: "comment.block.documentation.c", patterns: [{ match: '(?<=[\\s*!\\/])[\\\\@](?:callergraph|callgraph|else|endif|f\\$|f\\[|f\\]|hidecallergraph|hidecallgraph|hiderefby|hiderefs|hideinitializer|htmlinclude|n|nosubgrouping|private|privatesection|protected|protectedsection|public|publicsection|pure|showinitializer|showrefby|showrefs|tableofcontents|\\$|\\#|<|>|%|"|\\.|=|::|\\||\\-\\-|\\-\\-\\-)\\b(?:\\{[^}]*\\})?', name: "storage.type.class.doxygen.c" }, { captures: { 1: { name: "storage.type.class.doxygen.c" }, 2: { name: "markup.italic.doxygen.c" } }, match: "((?<=[\\s*!\\/])[\\\\@](?:a|em|e))\\s+(\\S+)" }, { captures: { 1: { name: "storage.type.class.doxygen.c" }, 2: { name: "markup.bold.doxygen.c" } }, match: "((?<=[\\s*!\\/])[\\\\@]b)\\s+(\\S+)" }, { captures: { 1: { name: "storage.type.class.doxygen.c" }, 2: { name: "markup.inline.raw.string.c" } }, match: "((?<=[\\s*!\\/])[\\\\@](?:c|p))\\s+(\\S+)" }, { match: "(?<=[\\s*!\\/])[\\\\@](?:a|anchor|b|c|cite|copybrief|copydetail|copydoc|def|dir|dontinclude|e|em|emoji|enum|example|extends|file|idlexcept|implements|include|includedoc|includelineno|latexinclude|link|memberof|namespace|p|package|ref|refitem|related|relates|relatedalso|relatesalso|verbinclude)\\b(?:\\{[^}]*\\})?", name: "storage.type.class.doxygen.c" }, { match: "(?<=[\\s*!\\/])[\\\\@](?:addindex|addtogroup|category|class|defgroup|diafile|dotfile|elseif|fn|headerfile|if|ifnot|image|ingroup|interface|line|mainpage|mscfile|name|overload|page|property|protocol|section|skip|skipline|snippet|snippetdoc|snippetlineno|struct|subpage|subsection|subsubsection|typedef|union|until|vhdlflow|weakgroup)\\b(?:\\{[^}]*\\})?", name: "storage.type.class.doxygen.c" }, { captures: { 1: { name: "storage.type.class.doxygen.c" }, 2: { patterns: [{ match: "in|out", name: "keyword.other.parameter.direction.$0.c" }] }, 3: { name: "variable.parameter.c" } }, match: "((?<=[\\s*!\\/])[\\\\@]param)(?:\\s*\\[((?:,?\\s*(?:in|out)\\s*)+)\\])?\\s+(\\b\\w+\\b)" }, { match: "(?<=[\\s*!\\/])[\\\\@](?:arg|attention|author|authors|brief|bug|copyright|date|deprecated|details|exception|invariant|li|note|par|paragraph|param|post|pre|remark|remarks|result|return|returns|retval|sa|see|short|since|test|throw|todo|tparam|version|warning|xrefitem)\\b(?:\\{[^}]*\\})?", name: "storage.type.class.doxygen.c" }, { match: "(?<=[\\s*!\\/])[\\\\@](?:code|cond|docbookonly|dot|htmlonly|internal|latexonly|link|manonly|msc|parblock|rtfonly|secreflist|uml|verbatim|xmlonly|endcode|endcond|enddocbookonly|enddot|endhtmlonly|endinternal|endlatexonly|endlink|endmanonly|endmsc|endparblock|endrtfonly|endsecreflist|enduml|endverbatim|endxmlonly)\\b(?:\\{[^}]*\\})?", name: "storage.type.class.doxygen.c" }, { match: "(?:\\b[A-Z]+:|@[a-z_]+:)", name: "storage.type.class.gtkdoc" }] }, { captures: { 1: { name: "meta.toc-list.banner.block.c" } }, match: "^\\/\\* =(\\s*.*?)\\s*= \\*\\/$\\n?", name: "comment.block.banner.c" }, { begin: "(\\/\\*)", beginCaptures: { 1: { name: "punctuation.definition.comment.begin.c" } }, end: "(\\*\\/)", endCaptures: { 1: { name: "punctuation.definition.comment.end.c" } }, name: "comment.block.c" }, { captures: { 1: { name: "meta.toc-list.banner.line.c" } }, match: "^\\/\\/ =(\\s*.*?)\\s*=$\\n?", name: "comment.line.banner.c" }, { begin: "((?:^[ \\t]+)?)(?=\\/\\/)", beginCaptures: { 1: { name: "punctuation.whitespace.comment.leading.c" } }, end: "(?!\\G)", patterns: [{ begin: "(\\/\\/)", beginCaptures: { 1: { name: "punctuation.definition.comment.c" } }, end: "(?=\\n)", name: "comment.line.double-slash.c", patterns: [{ include: "#line_continuation_character" }] }] }] }, { include: "#block_comment" }, { include: "#line_comment" }] }, { include: "#block_comment" }, { include: "#line_comment" }] }, default_statement: { begin: "((?>(?:(?:(?>(?<!\\s)\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z))))((?<!\\w)default(?!\\w))", beginCaptures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.c punctuation.definition.comment.begin.c" }, 3: { name: "comment.block.c" }, 4: { patterns: [{ match: "\\*\\/", name: "comment.block.c punctuation.definition.comment.end.c" }, { match: "\\*", name: "comment.block.c" }] }, 5: { name: "keyword.control.default.c" } }, end: "(:)", endCaptures: { 1: { name: "punctuation.separator.colon.case.default.c" } }, name: "meta.conditional.case.c", patterns: [{ include: "#evaluation_context" }, { include: "#c_conditional_context" }] }, disabled: { begin: "^\\s*#\\s*if(n?def)?\\b.*$", end: "^\\s*#\\s*endif\\b", patterns: [{ include: "#disabled" }, { include: "#pragma-mark" }] }, evaluation_context: { patterns: [{ include: "#function-call-innards" }, { include: "$self" }] }, "function-call-innards": { patterns: [{ include: "#comments" }, { include: "#storage_types" }, { include: "#method_access" }, { include: "#member_access" }, { include: "#operators" }, { begin: `(?x)
(?!(?:while|for|do|if|else|switch|catch|enumerate|return|typeid|alignof|alignas|sizeof|[cr]?iterate|and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas)\\s*\\()
(
(?:[A-Za-z_][A-Za-z0-9_]*+|::)++
|
(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))
)
\\s*(\\()`, beginCaptures: { 1: { name: "entity.name.function.c" }, 2: { name: "punctuation.section.arguments.begin.bracket.round.c" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.c" } }, patterns: [{ include: "#function-call-innards" }] }, { begin: "\\(", beginCaptures: { 0: { name: "punctuation.section.parens.begin.bracket.round.c" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.parens.end.bracket.round.c" } }, patterns: [{ include: "#function-call-innards" }] }, { include: "#block_innards" }] }, "function-innards": { patterns: [{ include: "#comments" }, { include: "#storage_types" }, { include: "#operators" }, { include: "#vararg_ellipses" }, { begin: `(?x)
(?!(?:while|for|do|if|else|switch|catch|enumerate|return|typeid|alignof|alignas|sizeof|[cr]?iterate|and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas)\\s*\\()
(
(?:[A-Za-z_][A-Za-z0-9_]*+|::)++
|
(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))
)
\\s*(\\()`, beginCaptures: { 1: { name: "entity.name.function.c" }, 2: { name: "punctuation.section.parameters.begin.bracket.round.c" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.parameters.end.bracket.round.c" } }, name: "meta.function.definition.parameters.c", patterns: [{ include: "#probably_a_parameter" }, { include: "#function-innards" }] }, { begin: "\\(", beginCaptures: { 0: { name: "punctuation.section.parens.begin.bracket.round.c" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.parens.end.bracket.round.c" } }, patterns: [{ include: "#function-innards" }] }, { include: "$self" }] }, inline_comment: { patterns: [{ patterns: [{ captures: { 1: { name: "comment.block.c punctuation.definition.comment.begin.c" }, 2: { name: "comment.block.c" }, 3: { patterns: [{ match: "\\*\\/", name: "comment.block.c punctuation.definition.comment.end.c" }, { match: "\\*", name: "comment.block.c" }] } }, match: "(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/))" }, { captures: { 1: { name: "comment.block.c punctuation.definition.comment.begin.c" }, 2: { name: "comment.block.c" }, 3: { patterns: [{ match: "\\*\\/", name: "comment.block.c punctuation.definition.comment.end.c" }, { match: "\\*", name: "comment.block.c" }] } }, match: "(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/))" }] }, { captures: { 1: { name: "comment.block.c punctuation.definition.comment.begin.c" }, 2: { name: "comment.block.c" }, 3: { patterns: [{ match: "\\*\\/", name: "comment.block.c punctuation.definition.comment.end.c" }, { match: "\\*", name: "comment.block.c" }] } }, match: "(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/))" }] }, line_comment: { patterns: [{ begin: "\\s*+(\\/\\/)", beginCaptures: { 1: { name: "punctuation.definition.comment.c" } }, end: "(?<=\\n)(?<!\\\\\\n)", endCaptures: {}, name: "comment.line.double-slash.c", patterns: [{ include: "#line_continuation_character" }] }, { begin: "\\s*+(\\/\\/)", beginCaptures: { 1: { name: "punctuation.definition.comment.c" } }, end: "(?<=\\n)(?<!\\\\\\n)", endCaptures: {}, name: "comment.line.double-slash.c", patterns: [{ include: "#line_continuation_character" }] }] }, line_continuation_character: { patterns: [{ captures: { 1: { name: "constant.character.escape.line-continuation.c" } }, match: "(\\\\)\\n" }] }, member_access: { captures: { 1: { name: "variable.other.object.access.c" }, 2: { name: "punctuation.separator.dot-access.c" }, 3: { name: "punctuation.separator.pointer-access.c" }, 4: { patterns: [{ include: "#member_access" }, { include: "#method_access" }, { captures: { 1: { name: "variable.other.object.access.c" }, 2: { name: "punctuation.separator.dot-access.c" }, 3: { name: "punctuation.separator.pointer-access.c" } }, match: "((?:[a-zA-Z_]\\w*|(?<=\\]|\\)))\\s*)(?:((?:\\.\\*|\\.))|((?:->\\*|->)))" }] }, 5: { name: "variable.other.member.c" } }, match: "((?:[a-zA-Z_]\\w*|(?<=\\]|\\)))\\s*)(?:((?:\\.\\*|\\.))|((?:->\\*|->)))((?:[a-zA-Z_]\\w*\\s*(?:(?:(?:\\.\\*|\\.))|(?:(?:->\\*|->)))\\s*)*)\\s*(\\b(?!(?:atomic_uint_least64_t|atomic_uint_least16_t|atomic_uint_least32_t|atomic_uint_least8_t|atomic_int_least16_t|atomic_uint_fast64_t|atomic_uint_fast32_t|atomic_int_least64_t|atomic_int_least32_t|pthread_rwlockattr_t|atomic_uint_fast16_t|pthread_mutexattr_t|atomic_int_fast16_t|atomic_uint_fast8_t|atomic_int_fast64_t|atomic_int_least8_t|atomic_int_fast32_t|atomic_int_fast8_t|pthread_condattr_t|atomic_uintptr_t|atomic_ptrdiff_t|pthread_rwlock_t|atomic_uintmax_t|pthread_mutex_t|atomic_intmax_t|atomic_intptr_t|atomic_char32_t|atomic_char16_t|pthread_attr_t|atomic_wchar_t|uint_least64_t|uint_least32_t|uint_least16_t|pthread_cond_t|pthread_once_t|uint_fast64_t|uint_fast16_t|atomic_size_t|uint_least8_t|int_least64_t|int_least32_t|int_least16_t|pthread_key_t|atomic_ullong|atomic_ushort|uint_fast32_t|atomic_schar|atomic_short|uint_fast8_t|int_fast64_t|int_fast32_t|int_fast16_t|atomic_ulong|atomic_llong|int_least8_t|atomic_uchar|memory_order|suseconds_t|int_fast8_t|atomic_bool|atomic_char|atomic_uint|atomic_long|atomic_int|useconds_t|_Imaginary|blksize_t|pthread_t|in_addr_t|uintptr_t|in_port_t|uintmax_t|uintmax_t|blkcnt_t|uint16_t|unsigned|_Complex|uint32_t|intptr_t|intmax_t|intmax_t|uint64_t|u_quad_t|int64_t|int32_t|ssize_t|caddr_t|clock_t|uint8_t|u_short|swblk_t|segsz_t|int16_t|fixpt_t|daddr_t|nlink_t|qaddr_t|size_t|time_t|mode_t|signed|quad_t|ushort|u_long|u_char|double|int8_t|ino_t|uid_t|pid_t|_Bool|float|dev_t|div_t|short|gid_t|off_t|u_int|key_t|id_t|uint|long|void|char|bool|id_t|int)\\b)[a-zA-Z_]\\w*\\b(?!\\())" }, method_access: { begin: "((?:[a-zA-Z_]\\w*|(?<=\\]|\\)))\\s*)(?:((?:\\.\\*|\\.))|((?:->\\*|->)))((?:[a-zA-Z_]\\w*\\s*(?:(?:(?:\\.\\*|\\.))|(?:(?:->\\*|->)))\\s*)*)\\s*([a-zA-Z_]\\w*)(\\()", beginCaptures: { 1: { name: "variable.other.object.access.c" }, 2: { name: "punctuation.separator.dot-access.c" }, 3: { name: "punctuation.separator.pointer-access.c" }, 4: { patterns: [{ include: "#member_access" }, { include: "#method_access" }, { captures: { 1: { name: "variable.other.object.access.c" }, 2: { name: "punctuation.separator.dot-access.c" }, 3: { name: "punctuation.separator.pointer-access.c" } }, match: "((?:[a-zA-Z_]\\w*|(?<=\\]|\\)))\\s*)(?:((?:\\.\\*|\\.))|((?:->\\*|->)))" }] }, 5: { name: "entity.name.function.member.c" }, 6: { name: "punctuation.section.arguments.begin.bracket.round.function.member.c" } }, contentName: "meta.function-call.member.c", end: "(\\))", endCaptures: { 1: { name: "punctuation.section.arguments.end.bracket.round.function.member.c" } }, patterns: [{ include: "#function-call-innards" }] }, numbers: { captures: { 0: { patterns: [{ begin: "(?=.)", end: "$", patterns: [{ captures: { 1: { name: "keyword.other.unit.hexadecimal.c" }, 2: { name: "constant.numeric.hexadecimal.c", patterns: [{ match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric" }] }, 3: { name: "punctuation.separator.constant.numeric" }, 4: { name: "constant.numeric.hexadecimal.c" }, 5: { name: "constant.numeric.hexadecimal.c", patterns: [{ match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric" }] }, 6: { name: "punctuation.separator.constant.numeric" }, 8: { name: "keyword.other.unit.exponent.hexadecimal.c" }, 9: { name: "keyword.operator.plus.exponent.hexadecimal.c" }, 10: { name: "keyword.operator.minus.exponent.hexadecimal.c" }, 11: { name: "constant.numeric.exponent.hexadecimal.c", patterns: [{ match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric" }] }, 12: { name: "keyword.other.unit.suffix.floating-point.c" } }, match: "(\\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?:(?<=[0-9a-fA-F])\\.|\\.(?=[0-9a-fA-F])))([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?<!')([pP])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?([lLfF](?!\\w))?$" }, { captures: { 2: { name: "constant.numeric.decimal.c", patterns: [{ match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric" }] }, 3: { name: "punctuation.separator.constant.numeric" }, 4: { name: "constant.numeric.decimal.point.c" }, 5: { name: "constant.numeric.decimal.c", patterns: [{ match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric" }] }, 6: { name: "punctuation.separator.constant.numeric" }, 8: { name: "keyword.other.unit.exponent.decimal.c" }, 9: { name: "keyword.operator.plus.exponent.decimal.c" }, 10: { name: "keyword.operator.minus.exponent.decimal.c" }, 11: { name: "constant.numeric.exponent.decimal.c", patterns: [{ match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric" }] }, 12: { name: "keyword.other.unit.suffix.floating-point.c" } }, match: "(\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?:(?<=[0-9])\\.|\\.(?=[0-9])))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?<!')([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?([lLfF](?!\\w))?$" }, { captures: { 1: { name: "keyword.other.unit.binary.c" }, 2: { name: "constant.numeric.binary.c", patterns: [{ match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric" }] }, 3: { name: "punctuation.separator.constant.numeric" }, 4: { name: "keyword.other.unit.suffix.integer.c" } }, match: "(\\G0[bB])([01](?:[01]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$" }, { captures: { 1: { name: "keyword.other.unit.octal.c" }, 2: { name: "constant.numeric.octal.c", patterns: [{ match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric" }] }, 3: { name: "punctuation.separator.constant.numeric" }, 4: { name: "keyword.other.unit.suffix.integer.c" } }, match: "(\\G0)((?:[0-7]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))+)((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$" }, { captures: { 1: { name: "keyword.other.unit.hexadecimal.c" }, 2: { name: "constant.numeric.hexadecimal.c", patterns: [{ match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric" }] }, 3: { name: "punctuation.separator.constant.numeric" }, 5: { name: "keyword.other.unit.exponent.hexadecimal.c" }, 6: { name: "keyword.operator.plus.exponent.hexadecimal.c" }, 7: { name: "keyword.operator.minus.exponent.hexadecimal.c" }, 8: { name: "constant.numeric.exponent.hexadecimal.c", patterns: [{ match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric" }] }, 9: { name: "keyword.other.unit.suffix.integer.c" } }, match: "(\\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?<!')([pP])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$" }, { captures: { 2: { name: "constant.numeric.decimal.c", patterns: [{ match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric" }] }, 3: { name: "punctuation.separator.constant.numeric" }, 5: { name: "keyword.other.unit.exponent.decimal.c" }, 6: { name: "keyword.operator.plus.exponent.decimal.c" }, 7: { name: "keyword.operator.minus.exponent.decimal.c" }, 8: { name: "constant.numeric.exponent.decimal.c", patterns: [{ match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric" }] }, 9: { name: "keyword.other.unit.suffix.integer.c" } }, match: "(\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?<!')([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$" }, { match: "(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-])+", name: "invalid.illegal.constant.numeric" }] }] } }, match: "(?<!\\w)\\.?\\d(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-])*" }, operators: { patterns: [{ match: "(?<![\\w$])(sizeof)(?![\\w$])", name: "keyword.operator.sizeof.c" }, { match: "--", name: "keyword.operator.decrement.c" }, { match: "\\+\\+", name: "keyword.operator.increment.c" }, { match: "%=|\\+=|-=|\\*=|(?<!\\()/=", name: "keyword.operator.assignment.compound.c" }, { match: "&=|\\^=|<<=|>>=|\\|=", name: "keyword.operator.assignment.compound.bitwise.c" }, { match: "<<|>>", name: "keyword.operator.bitwise.shift.c" }, { match: "!=|<=|>=|==|<|>", name: "keyword.operator.comparison.c" }, { match: "&&|!|\\|\\|", name: "keyword.operator.logical.c" }, { match: "&|\\||\\^|~", name: "keyword.operator.c" }, { match: "=", name: "keyword.operator.assignment.c" }, { match: "%|\\*|/|-|\\+", name: "keyword.operator.c" }, { begin: "(\\?)", beginCaptures: { 1: { name: "keyword.operator.ternary.c" } }, end: "(:)", endCaptures: { 1: { name: "keyword.operator.ternary.c" } }, patterns: [{ include: "#function-call-innards" }, { include: "$self" }] }] }, parens: { begin: "\\(", beginCaptures: { 0: { name: "punctuation.section.parens.begin.bracket.round.c" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.parens.end.bracket.round.c" } }, name: "meta.parens.c", patterns: [{ include: "$self" }] }, "parens-block": { begin: "\\(", beginCaptures: { 0: { name: "punctuation.section.parens.begin.bracket.round.c" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.parens.end.bracket.round.c" } }, name: "meta.parens.block.c", patterns: [{ include: "#block_innards" }, { match: "(?-mix:(?<!:):(?!:))", name: "punctuation.range-based.c" }] }, "pragma-mark": { captures: { 1: { name: "meta.preprocessor.pragma.c" }, 2: { name: "keyword.control.directive.pragma.pragma-mark.c" }, 3: { name: "punctuation.definition.directive.c" }, 4: { name: "entity.name.tag.pragma-mark.c" } }, match: "^\\s*(((#)\\s*pragma\\s+mark)\\s+(.*))", name: "meta.section.c" }, predefined_macros: { patterns: [{ captures: { 1: { name: "entity.name.other.preprocessor.macro.predefined.$1.c" } }, match: "\\b(__cplusplus|__DATE__|__FILE__|__LINE__|__STDC__|__STDC_HOSTED__|__STDC_NO_COMPLEX__|__STDC_VERSION__|__STDCPP_THREADS__|__TIME__|NDEBUG|__OBJC__|__ASSEMBLER__|__ATOM__|__AVX__|__AVX2__|_CHAR_UNSIGNED|__CLR_VER|_CONTROL_FLOW_GUARD|__COUNTER__|__cplusplus_cli|__cplusplus_winrt|_CPPRTTI|_CPPUNWIND|_DEBUG|_DLL|__FUNCDNAME__|__FUNCSIG__|__FUNCTION__|_INTEGRAL_MAX_BITS|__INTELLISENSE__|_ISO_VOLATILE|_KERNEL_MODE|_M_AMD64|_M_ARM|_M_ARM_ARMV7VE|_M_ARM_FP|_M_ARM64|_M_CEE|_M_CEE_PURE|_M_CEE_SAFE|_M_FP_EXCEPT|_M_FP_FAST|_M_FP_PRECISE|_M_FP_STRICT|_M_IX86|_M_IX86_FP|_M_X64|_MANAGED|_MSC_BUILD|_MSC_EXTENSIONS|_MSC_FULL_VER|_MSC_VER|_MSVC_LANG|__MSVC_RUNTIME_CHECKS|_MT|_NATIVE_WCHAR_T_DEFINED|_OPENMP|_PREFAST|__TIMESTAMP__|_VC_NO_DEFAULTLIB|_WCHAR_T_DEFINED|_WIN32|_WIN64|_WINRT_DLL|_ATL_VER|_MFC_VER|__GFORTRAN__|__GNUC__|__GNUC_MINOR__|__GNUC_PATCHLEVEL__|__GNUG__|__STRICT_ANSI__|__BASE_FILE__|__INCLUDE_LEVEL__|__ELF__|__VERSION__|__OPTIMIZE__|__OPTIMIZE_SIZE__|__NO_INLINE__|__GNUC_STDC_INLINE__|__CHAR_UNSIGNED__|__WCHAR_UNSIGNED__|__REGISTER_PREFIX__|__REGISTER_PREFIX__|__SIZE_TYPE__|__PTRDIFF_TYPE__|__WCHAR_TYPE__|__WINT_TYPE__|__INTMAX_TYPE__|__UINTMAX_TYPE__|__SIG_ATOMIC_TYPE__|__INT8_TYPE__|__INT16_TYPE__|__INT32_TYPE__|__INT64_TYPE__|__UINT8_TYPE__|__UINT16_TYPE__|__UINT32_TYPE__|__UINT64_TYPE__|__INT_LEAST8_TYPE__|__INT_LEAST16_TYPE__|__INT_LEAST32_TYPE__|__INT_LEAST64_TYPE__|__UINT_LEAST8_TYPE__|__UINT_LEAST16_TYPE__|__UINT_LEAST32_TYPE__|__UINT_LEAST64_TYPE__|__INT_FAST8_TYPE__|__INT_FAST16_TYPE__|__INT_FAST32_TYPE__|__INT_FAST64_TYPE__|__UINT_FAST8_TYPE__|__UINT_FAST16_TYPE__|__UINT_FAST32_TYPE__|__UINT_FAST64_TYPE__|__INTPTR_TYPE__|__UINTPTR_TYPE__|__CHAR_BIT__|__SCHAR_MAX__|__WCHAR_MAX__|__SHRT_MAX__|__INT_MAX__|__LONG_MAX__|__LONG_LONG_MAX__|__WINT_MAX__|__SIZE_MAX__|__PTRDIFF_MAX__|__INTMAX_MAX__|__UINTMAX_MAX__|__SIG_ATOMIC_MAX__|__INT8_MAX__|__INT16_MAX__|__INT32_MAX__|__INT64_MAX__|__UINT8_MAX__|__UINT16_MAX__|__UINT32_MAX__|__UINT64_MAX__|__INT_LEAST8_MAX__|__INT_LEAST16_MAX__|__INT_LEAST32_MAX__|__INT_LEAST64_MAX__|__UINT_LEAST8_MAX__|__UINT_LEAST16_MAX__|__UINT_LEAST32_MAX__|__UINT_LEAST64_MAX__|__INT_FAST8_MAX__|__INT_FAST16_MAX__|__INT_FAST32_MAX__|__INT_FAST64_MAX__|__UINT_FAST8_MAX__|__UINT_FAST16_MAX__|__UINT_FAST32_MAX__|__UINT_FAST64_MAX__|__INTPTR_MAX__|__UINTPTR_MAX__|__WCHAR_MIN__|__WINT_MIN__|__SIG_ATOMIC_MIN__|__SCHAR_WIDTH__|__SHRT_WIDTH__|__INT_WIDTH__|__LONG_WIDTH__|__LONG_LONG_WIDTH__|__PTRDIFF_WIDTH__|__SIG_ATOMIC_WIDTH__|__SIZE_WIDTH__|__WCHAR_WIDTH__|__WINT_WIDTH__|__INT_LEAST8_WIDTH__|__INT_LEAST16_WIDTH__|__INT_LEAST32_WIDTH__|__INT_LEAST64_WIDTH__|__INT_FAST8_WIDTH__|__INT_FAST16_WIDTH__|__INT_FAST32_WIDTH__|__INT_FAST64_WIDTH__|__INTPTR_WIDTH__|__INTMAX_WIDTH__|__SIZEOF_INT__|__SIZEOF_LONG__|__SIZEOF_LONG_LONG__|__SIZEOF_SHORT__|__SIZEOF_POINTER__|__SIZEOF_FLOAT__|__SIZEOF_DOUBLE__|__SIZEOF_LONG_DOUBLE__|__SIZEOF_SIZE_T__|__SIZEOF_WCHAR_T__|__SIZEOF_WINT_T__|__SIZEOF_PTRDIFF_T__|__BYTE_ORDER__|__ORDER_LITTLE_ENDIAN__|__ORDER_BIG_ENDIAN__|__ORDER_PDP_ENDIAN__|__FLOAT_WORD_ORDER__|__DEPRECATED|__EXCEPTIONS|__GXX_RTTI|__USING_SJLJ_EXCEPTIONS__|__GXX_EXPERIMENTAL_CXX0X__|__GXX_WEAK__|__NEXT_RUNTIME__|__LP64__|_LP64|__SSP__|__SSP_ALL__|__SSP_STRONG__|__SSP_EXPLICIT__|__SANITIZE_ADDRESS__|__SANITIZE_THREAD__|__GCC_HAVE_SYNC_COMPARE_AND_SWAP_1|__GCC_HAVE_SYNC_COMPARE_AND_SWAP_2|__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4|__GCC_HAVE_SYNC_COMPARE_AND_SWAP_8|__GCC_HAVE_SYNC_COMPARE_AND_SWAP_16|__HAVE_SPECULATION_SAFE_VALUE|__GCC_HAVE_DWARF2_CFI_ASM|__FP_FAST_FMA|__FP_FAST_FMAF|__FP_FAST_FMAL|__FP_FAST_FMAF16|__FP_FAST_FMAF32|__FP_FAST_FMAF64|__FP_FAST_FMAF128|__FP_FAST_FMAF32X|__FP_FAST_FMAF64X|__FP_FAST_FMAF128X|__GCC_IEC_559|__GCC_IEC_559_COMPLEX|__NO_MATH_ERRNO__|__has_builtin|__has_feature|__has_extension|__has_cpp_attribute|__has_c_attribute|__has_attribute|__has_declspec_attribute|__is_identifier|__has_include|__has_include_next|__has_warning|__BASE_FILE__|__FILE_NAME__|__clang__|__clang_major__|__clang_minor__|__clang_patchlevel__|__clang_version__|__fp16|_Float16)\\b" }, { match: "\\b__([A-Z_]+)__\\b", name: "entity.name.other.preprocessor.macro.predefined.probably.$1.c" }] }, "preprocessor-rule-conditional": { patterns: [{ begin: "^\\s*((#)\\s*if(?:n?def)?\\b)", beginCaptures: { 0: { name: "meta.preprocessor.c" }, 1: { name: "keyword.control.directive.conditional.c" }, 2: { name: "punctuation.definition.directive.c" } }, end: "^\\s*((#)\\s*endif\\b)", endCaptures: { 0: { name: "meta.preprocessor.c" }, 1: { name: "keyword.control.directive.conditional.c" }, 2: { name: "punctuation.definition.directive.c" } }, patterns: [{ begin: "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))", end: "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)", name: "meta.preprocessor.c", patterns: [{ include: "#preprocessor-rule-conditional-line" }] }, { include: "#preprocessor-rule-enabled-elif" }, { include: "#preprocessor-rule-enabled-else" }, { include: "#preprocessor-rule-disabled-elif" }, { begin: "^\\s*((#)\\s*elif\\b)", beginCaptures: { 1: { name: "keyword.control.directive.conditional.c" }, 2: { name: "punctuation.definition.directive.c" } }, end: "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)", name: "meta.preprocessor.c", patterns: [{ include: "#preprocessor-rule-conditional-line" }] }, { include: "$self" }] }, { captures: { 0: { name: "invalid.illegal.stray-$1.c" } }, match: "^\\s*#\\s*(else|elif|endif)\\b" }] }, "preprocessor-rule-conditional-block": { patterns: [{ begin: "^\\s*((#)\\s*if(?:n?def)?\\b)", beginCaptures: { 0: { name: "meta.preprocessor.c" }, 1: { name: "keyword.control.directive.conditional.c" }, 2: { name: "punctuation.definition.directive.c" } }, end: "^\\s*((#)\\s*endif\\b)", endCaptures: { 0: { name: "meta.preprocessor.c" }, 1: { name: "keyword.control.directive.conditional.c" }, 2: { name: "punctuation.definition.directive.c" } }, patterns: [{ begin: "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))", end: "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)", name: "meta.preprocessor.c", patterns: [{ include: "#preprocessor-rule-conditional-line" }] }, { include: "#preprocessor-rule-enabled-elif-block" }, { include: "#preprocessor-rule-enabled-else-block" }, { include: "#preprocessor-rule-disabled-elif" }, { begin: "^\\s*((#)\\s*elif\\b)", beginCaptures: { 1: { name: "keyword.control.directive.conditional.c" }, 2: { name: "punctuation.definition.directive.c" } }, end: "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)", name: "meta.preprocessor.c", patterns: [{ include: "#preprocessor-rule-conditional-line" }] }, { include: "#block_innards" }] }, { captures: { 0: { name: "invalid.illegal.stray-$1.c" } }, match: "^\\s*#\\s*(else|elif|endif)\\b" }] }, "preprocessor-rule-conditional-line": { patterns: [{ match: "(?:\\bdefined\\b\\s*$)|(?:\\bdefined\\b(?=\\s*\\(*\\s*(?:(?!defined\\b)[a-zA-Z_$][\\w$]*\\b)\\s*\\)*\\s*(?:\\n|//|/\\*|\\?|\\:|&&|\\|\\||\\\\\\s*\\n)))", name: "keyword.control.directive.conditional.c" }, { match: "\\bdefined\\b", name: "invalid.illegal.macro-name.c" }, { include: "#comments" }, { include: "#strings" }, { include: "#numbers" }, { begin: "\\?", beginCaptures: { 0: { name: "keyword.operator.ternary.c" } }, end: ":", endCaptures: { 0: { name: "keyword.operator.ternary.c" } }, patterns: [{ include: "#preprocessor-rule-conditional-line" }] }, { include: "#operators" }, { match: "\\b(NULL|true|false|TRUE|FALSE)\\b", name: "constant.language.c" }, { match: "[a-zA-Z_$][\\w$]*", name: "entity.name.function.preprocessor.c" }, { include: "#line_continuation_character" }, { begin: "\\(", beginCaptures: { 0: { name: "punctuation.section.parens.begin.bracket.round.c" } }, end: "\\)|(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)", endCaptures: { 0: { name: "punctuation.section.parens.end.bracket.round.c" } }, patterns: [{ include: "#preprocessor-rule-conditional-line" }] }] }, "preprocessor-rule-define-line-blocks": { patterns: [{ begin: "{", beginCaptures: { 0: { name: "punctuation.section.block.begin.bracket.curly.c" } }, end: "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)|(?<!\\\\)(?=\\s*\\n)", endCaptures: { 0: { name: "punctuation.section.block.end.bracket.curly.c" } }, patterns: [{ include: "#preprocessor-rule-define-line-blocks" }, { include: "#preprocessor-rule-define-line-contents" }] }, { include: "#preprocessor-rule-define-line-contents" }] }, "preprocessor-rule-define-line-contents": { patterns: [{ include: "#vararg_ellipses" }, { begin: "{", beginCaptures: { 0: { name: "punctuation.section.block.begin.bracket.curly.c" } }, end: "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)|(?<!\\\\)(?=\\s*\\n)", endCaptures: { 0: { name: "punctuation.section.block.end.bracket.curly.c" } }, name: "meta.block.c", patterns: [{ include: "#preprocessor-rule-define-line-blocks" }] }, { match: "\\(", name: "punctuation.section.parens.begin.bracket.round.c" }, { match: "\\)", name: "punctuation.section.parens.end.bracket.round.c" }, { begin: `(?x)
(?!(?:while|for|do|if|else|switch|catch|enumerate|return|typeid|alignof|alignas|sizeof|[cr]?iterate|and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas|asm|__asm__|auto|bool|_Bool|char|_Complex|double|enum|float|_Imaginary|int|long|short|signed|struct|typedef|union|unsigned|void)\\s*\\()
(?=
(?:[A-Za-z_][A-Za-z0-9_]*+|::)++\\s*\\(
|
(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\\s*\\(
)`, end: "(?<=\\))(?!\\w)|(?<!\\\\)(?=\\s*\\n)", name: "meta.function.c", patterns: [{ include: "#preprocessor-rule-define-line-functions" }] }, { begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.c" } }, end: '"|(?<!\\\\)(?=\\s*\\n)', endCaptures: { 0: { name: "punctuation.definition.string.end.c" } }, name: "string.quoted.double.c", patterns: [{ include: "#string_escaped_char" }, { include: "#string_placeholder" }, { include: "#line_continuation_character" }] }, { begin: "'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.c" } }, end: "'|(?<!\\\\)(?=\\s*\\n)", endCaptures: { 0: { name: "punctuation.definition.string.end.c" } }, name: "string.quoted.single.c", patterns: [{ include: "#string_escaped_char" }, { include: "#line_continuation_character" }] }, { include: "#method_access" }, { include: "#member_access" }, { include: "$self" }] }, "preprocessor-rule-define-line-functions": { patterns: [{ include: "#comments" }, { include: "#storage_types" }, { include: "#vararg_ellipses" }, { include: "#method_access" }, { include: "#member_access" }, { include: "#operators" }, { begin: `(?x)
(?!(?:while|for|do|if|else|switch|catch|enumerate|return|typeid|alignof|alignas|sizeof|[cr]?iterate|and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas)\\s*\\()
(
(?:[A-Za-z_][A-Za-z0-9_]*+|::)++
|
(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))
)
\\s*(\\()`, beginCaptures: { 1: { name: "entity.name.function.c" }, 2: { name: "punctuation.section.arguments.begin.bracket.round.c" } }, end: "(\\))|(?<!\\\\)(?=\\s*\\n)", endCaptures: { 1: { name: "punctuation.section.arguments.end.bracket.round.c" } }, patterns: [{ include: "#preprocessor-rule-define-line-functions" }] }, { begin: "\\(", beginCaptures: { 0: { name: "punctuation.section.parens.begin.bracket.round.c" } }, end: "(\\))|(?<!\\\\)(?=\\s*\\n)", endCaptures: { 1: { name: "punctuation.section.parens.end.bracket.round.c" } }, patterns: [{ include: "#preprocessor-rule-define-line-functions" }] }, { include: "#preprocessor-rule-define-line-contents" }] }, "preprocessor-rule-disabled": { patterns: [{ begin: "^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0+\\b\\)*\\s*(?:$|//|/\\*))", beginCaptures: { 0: { name: "meta.preprocessor.c" }, 1: { name: "keyword.control.directive.conditional.c" }, 2: { name: "punctuation.definition.directive.c" } }, end: "^\\s*((#)\\s*endif\\b)", endCaptures: { 0: { name: "meta.preprocessor.c" }, 1: { name: "keyword.control.directive.conditional.c" }, 2: { name: "punctuation.definition.directive.c" } }, patterns: [{ begin: "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))", end: "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)", name: "meta.preprocessor.c", patterns: [{ include: "#preprocessor-rule-conditional-line" }] }, { include: "#comments" }, { include: "#preprocessor-rule-enabled-elif" }, { include: "#preprocessor-rule-enabled-else" }, { include: "#preprocessor-rule-disabled-elif" }, { begin: "^\\s*((#)\\s*elif\\b)", beginCaptures: { 0: { name: "meta.preprocessor.c" }, 1: { name: "keyword.control.directive.conditional.c" }, 2: { name: "punctuation.definition.directive.c" } }, end: "(?=^\\s*((#)\\s*(?:elif|else|endif)\\b))", patterns: [{ begin: "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))", end: "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)", name: "meta.preprocessor.c", patterns: [{ include: "#preprocessor-rule-conditional-line" }] }, { include: "$self" }] }, { begin: "\\n", contentName: "comment.block.preprocessor.if-branch.c", end: "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))", patterns: [{ include: "#disabled" }, { include: "#pragma-mark" }] }] }] }, "preprocessor-rule-disabled-block": { patterns: [{ begin: "^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0+\\b\\)*\\s*(?:$|//|/\\*))", beginCaptures: { 0: { name: "meta.preprocessor.c" }, 1: { name: "keyword.control.directive.conditional.c" }, 2: { name: "punctuation.definition.directive.c" } }, end: "^\\s*((#)\\s*endif\\b)", endCaptures: { 0: { name: "meta.preprocessor.c" }, 1: { name: "keyword.control.directive.conditional.c" }, 2: { name: "punctuation.definition.directive.c" } }, patterns: [{ begin: "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))", end: "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)", name: "meta.preprocessor.c", patterns: [{ include: "#preprocessor-rule-conditional-line" }] }, { include: "#comments" }, { include: "#preprocessor-rule-enabled-elif-block" }, { include: "#preprocessor-rule-enabled-else-block" }, { include: "#preprocessor-rule-disabled-elif" }, { begin: "^\\s*((#)\\s*elif\\b)", beginCaptures: { 0: { name: "meta.preprocessor.c" }, 1: { name: "keyword.control.directive.conditional.c" }, 2: { name: "punctuation.definition.directive.c" } }, end: "(?=^\\s*((#)\\s*(?:elif|else|endif)\\b))", patterns: [{ begin: "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))", end: "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)", name: "meta.preprocessor.c", patterns: [{ include: "#preprocessor-rule-conditional-line" }] }, { include: "#block_innards" }] }, { begin: "\\n", contentName: "comment.block.preprocessor.if-branch.in-block.c", end: "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))", patterns: [{ include: "#disabled" }, { include: "#pragma-mark" }] }] }] }, "preprocessor-rule-disabled-elif": { begin: "^\\s*((#)\\s*elif\\b)(?=\\s*\\(*\\b0+\\b\\)*\\s*(?:$|//|/\\*))", beginCaptures: { 0: { name: "meta.preprocessor.c" }, 1: { name: "keyword.control.directive.conditional.c" }, 2: { name: "punctuation.definition.directive.c" } }, end: "(?=^\\s*((#)\\s*(?:elif|else|endif)\\b))", patterns: [{ begin: "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))", end: "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)", name: "meta.preprocessor.c", patterns: [{ include: "#preprocessor-rule-conditional-line" }] }, { include: "#comments" }, { begin: "\\n", contentName: "comment.block.preprocessor.elif-branch.c", end: "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))", patterns: [{ include: "#disabled" }, { include: "#pragma-mark" }] }] }, "preprocessor-rule-enabled": { patterns: [{ begin: "^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))", beginCaptures: { 0: { name: "meta.preprocessor.c" }, 1: { name: "keyword.control.directive.conditional.c" }, 2: { name: "punctuation.definition.directive.c" }, 3: { name: "constant.numeric.preprocessor.c" } }, end: "^\\s*((#)\\s*endif\\b)", endCaptures: { 0: { name: "meta.preprocessor.c" }, 1: { name: "keyword.control.directive.conditional.c" }, 2: { name: "punctuation.definition.directive.c" } }, patterns: [{ begin: "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))", end: "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)", name: "meta.preprocessor.c", patterns: [{ include: "#preprocessor-rule-conditional-line" }] }, { include: "#comments" }, { begin: "^\\s*((#)\\s*else\\b)", beginCaptures: { 0: { name: "meta.preprocessor.c" }, 1: { name: "keyword.control.directive.conditional.c" }, 2: { name: "punctuation.definition.directive.c" } }, contentName: "comment.block.preprocessor.else-branch.c", end: "(?=^\\s*((#)\\s*endif\\b))", patterns: [{ include: "#disabled" }, { include: "#pragma-mark" }] }, { begin: "^\\s*((#)\\s*elif\\b)", beginCaptures: { 0: { name: "meta.preprocessor.c" }, 1: { name: "keyword.control.directive.conditional.c" }, 2: { name: "punctuation.definition.directive.c" } }, contentName: "comment.block.preprocessor.if-branch.c", end: "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))", patterns: [{ include: "#disabled" }, { include: "#pragma-mark" }] }, { begin: "\\n", end: "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))", patterns: [{ include: "$self" }] }] }] }, "preprocessor-rule-enabled-block": { patterns: [{ begin: "^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))", beginCaptures: { 0: { name: "meta.preprocessor.c" }, 1: { name: "keyword.control.directive.conditional.c" }, 2: { name: "punctuation.definition.directive.c" } }, end: "^\\s*((#)\\s*endif\\b)", endCaptures: { 0: { name: "meta.preprocessor.c" }, 1: { name: "keyword.control.directive.conditional.c" }, 2: { name: "punctuation.definition.directive.c" } }, patterns: [{ begin: "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))", end: "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)", name: "meta.preprocessor.c", patterns: [{ include: "#preprocessor-rule-conditional-line" }] }, { include: "#comments" }, { begin: "^\\s*((#)\\s*else\\b)", beginCaptures: { 0: { name: "meta.preprocessor.c" }, 1: { name: "keyword.control.directive.conditional.c" }, 2: { name: "punctuation.definition.directive.c" } }, contentName: "comment.block.preprocessor.else-branch.in-block.c", end: "(?=^\\s*((#)\\s*endif\\b))", patterns: [{ include: "#disabled" }, { include: "#pragma-mark" }] }, { begin: "^\\s*((#)\\s*elif\\b)", beginCaptures: { 0: { name: "meta.preprocessor.c" }, 1: { name: "keyword.control.directive.conditional.c" }, 2: { name: "punctuation.definition.directive.c" } }, contentName: "comment.block.preprocessor.if-branch.in-block.c", end: "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))", patterns: [{ include: "#disabled" }, { include: "#pragma-mark" }] }, { begin: "\\n", end: "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))", patterns: [{ include: "#block_innards" }] }] }] }, "preprocessor-rule-enabled-elif": { begin: "^\\s*((#)\\s*elif\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))", beginCaptures: { 0: { name: "meta.preprocessor.c" }, 1: { name: "keyword.control.directive.conditional.c" }, 2: { name: "punctuation.definition.directive.c" } }, end: "(?=^\\s*((#)\\s*endif\\b))", patterns: [{ begin: "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))", end: "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)", name: "meta.preprocessor.c", patterns: [{ include: "#preprocessor-rule-conditional-line" }] }, { include: "#comments" }, { begin: "\\n", end: "(?=^\\s*((#)\\s*(?:endif)\\b))", patterns: [{ begin: "^\\s*((#)\\s*(else)\\b)", beginCaptures: { 0: { name: "meta.preprocessor.c" }, 1: { name: "keyword.control.directive.conditional.c" }, 2: { name: "punctuation.definition.directive.c" } }, contentName: "comment.block.preprocessor.elif-branch.c", end: "(?=^\\s*((#)\\s*endif\\b))", patterns: [{ include: "#disabled" }, { include: "#pragma-mark" }] }, { begin: "^\\s*((#)\\s*(elif)\\b)", beginCaptures: { 0: { name: "meta.preprocessor.c" }, 1: { name: "keyword.control.directive.conditional.c" }, 2: { name: "punctuation.definition.directive.c" } }, contentName: "comment.block.preprocessor.elif-branch.c", end: "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))", patterns: [{ include: "#disabled" }, { include: "#pragma-mark" }] }, { include: "$self" }] }] }, "preprocessor-rule-enabled-elif-block": { begin: "^\\s*((#)\\s*elif\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))", beginCaptures: { 0: { name: "meta.preprocessor.c" }, 1: { name: "keyword.control.directive.conditional.c" }, 2: { name: "punctuation.definition.directive.c" } }, end: "(?=^\\s*((#)\\s*endif\\b))", patterns: [{ begin: "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))", end: "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)", name: "meta.preprocessor.c", patterns: [{ include: "#preprocessor-rule-conditional-line" }] }, { include: "#comments" }, { begin: "\\n", end: "(?=^\\s*((#)\\s*(?:endif)\\b))", patterns: [{ begin: "^\\s*((#)\\s*(else)\\b)", beginCaptures: { 0: { name: "meta.preprocessor.c" }, 1: { name: "keyword.control.directive.conditional.c" }, 2: { name: "punctuation.definition.directive.c" } }, contentName: "comment.block.preprocessor.elif-branch.in-block.c", end: "(?=^\\s*((#)\\s*endif\\b))", patterns: [{ include: "#disabled" }, { include: "#pragma-mark" }] }, { begin: "^\\s*((#)\\s*(elif)\\b)", beginCaptures: { 0: { name: "meta.preprocessor.c" }, 1: { name: "keyword.control.directive.conditional.c" }, 2: { name: "punctuation.definition.directive.c" } }, contentName: "comment.block.preprocessor.elif-branch.c", end: "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))", patterns: [{ include: "#disabled" }, { include: "#pragma-mark" }] }, { include: "#block_innards" }] }] }, "preprocessor-rule-enabled-else": { begin: "^\\s*((#)\\s*else\\b)", beginCaptures: { 0: { name: "meta.preprocessor.c" }, 1: { name: "keyword.control.directive.conditional.c" }, 2: { name: "punctuation.definition.directive.c" } }, end: "(?=^\\s*((#)\\s*endif\\b))", patterns: [{ include: "$self" }] }, "preprocessor-rule-enabled-else-block": { begin: "^\\s*((#)\\s*else\\b)", beginCaptures: { 0: { name: "meta.preprocessor.c" }, 1: { name: "keyword.control.directive.conditional.c" }, 2: { name: "punctuation.definition.directive.c" } }, end: "(?=^\\s*((#)\\s*endif\\b))", patterns: [{ include: "#block_innards" }] }, probably_a_parameter: { captures: { 1: { name: "variable.parameter.probably.c" } }, match: "(?<=(?:[a-zA-Z_0-9] |[&*>\\]\\)]))\\s*([a-zA-Z_]\\w*)\\s*(?=(?:\\[\\]\\s*)?(?:,|\\)))" }, static_assert: { begin: "((?>(?:(?:(?>(?<!\\s)\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z))))((?<!\\w)static_assert|_Static_assert(?!\\w))((?>(?:(?:(?>(?<!\\s)\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z))))(\\()", beginCaptures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.c punctuation.definition.comment.begin.c" }, 3: { name: "comment.block.c" }, 4: { patterns: [{ match: "\\*\\/", name: "comment.block.c punctuation.definition.comment.end.c" }, { match: "\\*", name: "comment.block.c" }] }, 5: { name: "keyword.other.static_assert.c" }, 6: { patterns: [{ include: "#inline_comment" }] }, 7: { name: "comment.block.c punctuation.definition.comment.begin.c" }, 8: { name: "comment.block.c" }, 9: { patterns: [{ match: "\\*\\/", name: "comment.block.c punctuation.definition.comment.end.c" }, { match: "\\*", name: "comment.block.c" }] }, 10: { name: "punctuation.section.arguments.begin.bracket.round.static_assert.c" } }, end: "(\\))", endCaptures: { 1: { name: "punctuation.section.arguments.end.bracket.round.static_assert.c" } }, patterns: [{ begin: '(,)\\s*(?=(?:L|u8|u|U\\s*\\")?)', beginCaptures: { 1: { name: "punctuation.separator.delimiter.comma.c" } }, end: "(?=\\))", name: "meta.static_assert.message.c", patterns: [{ include: "#string_context" }] }, { include: "#evaluation_context" }] }, storage_types: { patterns: [{ match: "(?-mix:(?<!\\w)(?:unsigned|signed|double|_Bool|short|float|long|void|char|bool|int)(?!\\w))", name: "storage.type.built-in.primitive.c" }, { match: "(?-mix:(?<!\\w)(?:atomic_uint_least64_t|atomic_uint_least16_t|atomic_uint_least32_t|pthread_rwlockattr_t|atomic_uint_fast64_t|atomic_uint_fast32_t|atomic_uint_fast16_t|atomic_int_least64_t|atomic_int_least32_t|atomic_int_least16_t|atomic_uint_least8_t|atomic_uint_fast8_t|atomic_int_least8_t|atomic_int_fast16_t|pthread_mutexattr_t|atomic_int_fast32_t|atomic_int_fast64_t|atomic_int_fast8_t|pthread_condattr_t|atomic_ptrdiff_t|pthread_rwlock_t|atomic_uintptr_t|atomic_uintmax_t|atomic_intmax_t|atomic_intptr_t|atomic_char32_t|atomic_char16_t|pthread_mutex_t|pthread_cond_t|atomic_wchar_t|uint_least64_t|uint_least32_t|uint_least16_t|pthread_once_t|pthread_attr_t|int_least32_t|pthread_key_t|int_least16_t|int_least64_t|uint_least8_t|uint_fast16_t|uint_fast32_t|uint_fast64_t|atomic_ushort|atomic_ullong|atomic_size_t|int_fast16_t|int_fast64_t|uint_fast8_t|atomic_short|atomic_uchar|atomic_schar|int_least8_t|memory_order|atomic_llong|atomic_ulong|int_fast32_t|atomic_long|atomic_uint|atomic_char|int_fast8_t|suseconds_t|atomic_bool|atomic_int|_Imaginary|useconds_t|in_port_t|uintmax_t|uintmax_t|pthread_t|blksize_t|in_addr_t|uintptr_t|blkcnt_t|uint16_t|uint32_t|uint64_t|u_quad_t|_Complex|intptr_t|intmax_t|intmax_t|segsz_t|u_short|nlink_t|uint8_t|int64_t|int32_t|int16_t|fixpt_t|daddr_t|caddr_t|qaddr_t|ssize_t|clock_t|swblk_t|u_long|mode_t|int8_t|time_t|ushort|u_char|quad_t|size_t|pid_t|gid_t|uid_t|dev_t|div_t|off_t|u_int|key_t|ino_t|uint|id_t|id_t)(?!\\w))", name: "storage.type.built-in.c" }, { match: "(?-mix:\\b(enum|struct|union)\\b)", name: "storage.type.$1.c" }, { begin: "(\\b(?:__asm__|asm)\\b)\\s*((?:volatile)?)", beginCaptures: { 1: { name: "storage.type.asm.c" }, 2: { name: "storage.modifier.c" } }, end: "(?!\\G)", name: "meta.asm.c", patterns: [{ captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.c punctuation.definition.comment.begin.c" }, 3: { name: "comment.block.c" }, 4: { patterns: [{ match: "\\*\\/", name: "comment.block.c punctuation.definition.comment.end.c" }, { match: "\\*", name: "comment.block.c" }] } }, match: "(?:^)((?:(?:(?>\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+?|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z)))(?:\\n|$)" }, { include: "#comments" }, { begin: "(((?:(?:(?>\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+?|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z)))\\()", beginCaptures: { 1: { name: "punctuation.section.parens.begin.bracket.round.assembly.c" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.c punctuation.definition.comment.begin.c" }, 4: { name: "comment.block.c" }, 5: { patterns: [{ match: "\\*\\/", name: "comment.block.c punctuation.definition.comment.end.c" }, { match: "\\*", name: "comment.block.c" }] } }, end: "(\\))", endCaptures: { 1: { name: "punctuation.section.parens.end.bracket.round.assembly.c" } }, patterns: [{ begin: '(R?)(")', beginCaptures: { 1: { name: "meta.encoding.c" }, 2: { name: "punctuation.definition.string.begin.assembly.c" } }, contentName: "meta.embedded.assembly.c", end: '(")', endCaptures: { 1: { name: "punctuation.definition.string.end.assembly.c" } }, name: "string.quoted.double.c", patterns: [{ include: "source.asm" }, { include: "source.x86" }, { include: "source.x86_64" }, { include: "source.arm" }, { include: "#backslash_escapes" }, { include: "#string_escaped_char" }] }, { begin: "(\\()", beginCaptures: { 1: { name: "punctuation.section.parens.begin.bracket.round.assembly.inner.c" } }, end: "(\\))", endCaptures: { 1: { name: "punctuation.section.parens.end.bracket.round.assembly.inner.c" } }, patterns: [{ include: "#evaluation_context" }] }, { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.c punctuation.definition.comment.begin.c" }, 3: { name: "comment.block.c" }, 4: { patterns: [{ match: "\\*\\/", name: "comment.block.c punctuation.definition.comment.end.c" }, { match: "\\*", name: "comment.block.c" }] }, 5: { name: "variable.other.asm.label.c" }, 6: { patterns: [{ include: "#inline_comment" }] }, 7: { name: "comment.block.c punctuation.definition.comment.begin.c" }, 8: { name: "comment.block.c" }, 9: { patterns: [{ match: "\\*\\/", name: "comment.block.c punctuation.definition.comment.end.c" }, { match: "\\*", name: "comment.block.c" }] } }, match: "\\[((?:(?:(?>\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+?|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z)))([a-zA-Z_]\\w*)((?:(?:(?>\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+?|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z)))\\]" }, { match: ":", name: "punctuation.separator.delimiter.colon.assembly.c" }, { include: "#comments" }] }] }] }, string_escaped_char: { patterns: [{ match: `(?x)\\\\ (
\\\\			 |
[abefnprtv'"?]   |
[0-3]\\d{,2}	 |
[4-7]\\d?		|
x[a-fA-F0-9]{,2} |
u[a-fA-F0-9]{,4} |
U[a-fA-F0-9]{,8} )`, name: "constant.character.escape.c" }, { match: "\\\\.", name: "invalid.illegal.unknown-escape.c" }] }, string_placeholder: { patterns: [{ match: `(?x) %
(\\d+\\$)?
[#0\\- +']*
[,;:_]?
((-?\\d+)|\\*(-?\\d+\\$)?)?
(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?
(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)?
[diouxXDOUeEfFgGaACcSspn%]`, name: "constant.other.placeholder.c" }, { captures: { 1: { name: "invalid.illegal.placeholder.c" } }, match: '(%)(?!"\\s*(PRI|SCN))' }] }, strings: { patterns: [{ begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.c" } }, end: '"', endCaptures: { 0: { name: "punctuation.definition.string.end.c" } }, name: "string.quoted.double.c", patterns: [{ include: "#string_escaped_char" }, { include: "#string_placeholder" }, { include: "#line_continuation_character" }] }, { begin: "'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.c" } }, end: "'", endCaptures: { 0: { name: "punctuation.definition.string.end.c" } }, name: "string.quoted.single.c", patterns: [{ include: "#string_escaped_char" }, { include: "#line_continuation_character" }] }] }, switch_conditional_parentheses: { begin: "((?>(?:(?:(?>(?<!\\s)\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z))))(\\()", beginCaptures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.c punctuation.definition.comment.begin.c" }, 3: { name: "comment.block.c" }, 4: { patterns: [{ match: "\\*\\/", name: "comment.block.c punctuation.definition.comment.end.c" }, { match: "\\*", name: "comment.block.c" }] }, 5: { name: "punctuation.section.parens.begin.bracket.round.conditional.switch.c" } }, end: "(\\))", endCaptures: { 1: { name: "punctuation.section.parens.end.bracket.round.conditional.switch.c" } }, name: "meta.conditional.switch.c", patterns: [{ include: "#evaluation_context" }, { include: "#c_conditional_context" }] }, switch_statement: { begin: "(((?>(?:(?:(?>(?<!\\s)\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z))))((?<!\\w)switch(?!\\w)))", beginCaptures: { 1: { name: "meta.head.switch.c" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.c punctuation.definition.comment.begin.c" }, 4: { name: "comment.block.c" }, 5: { patterns: [{ match: "\\*\\/", name: "comment.block.c punctuation.definition.comment.end.c" }, { match: "\\*", name: "comment.block.c" }] }, 6: { name: "keyword.control.switch.c" } }, end: "(?:(?<=\\}|%>|\\?\\?>)|(?=[;>\\[\\]=]))", name: "meta.block.switch.c", patterns: [{ begin: "\\G ?", end: "((?:\\{|<%|\\?\\?<|(?=;)))", endCaptures: { 1: { name: "punctuation.section.block.begin.bracket.curly.switch.c" } }, name: "meta.head.switch.c", patterns: [{ include: "#switch_conditional_parentheses" }, { include: "$self" }] }, { begin: "(?<=\\{|<%|\\?\\?<)", end: "(\\}|%>|\\?\\?>)", endCaptures: { 1: { name: "punctuation.section.block.end.bracket.curly.switch.c" } }, name: "meta.body.switch.c", patterns: [{ include: "#default_statement" }, { include: "#case_statement" }, { include: "$self" }, { include: "#block_innards" }] }, { begin: "(?<=\\}|%>|\\?\\?>)[\\s\\n]*", end: "[\\s\\n]*(?=;)", name: "meta.tail.switch.c", patterns: [{ include: "$self" }] }] }, vararg_ellipses: { match: "(?<!\\.)\\.\\.\\.(?!\\.)", name: "punctuation.vararg-ellipses.c" } }, scopeName: "source.c" });
var b = [
  V
];
const Y = Object.freeze({ displayName: "RegExp", fileTypes: ["re"], name: "regexp", patterns: [{ include: "#regexp-expression" }], repository: { codetags: { captures: { 1: { name: "keyword.codetag.notation.python" } }, match: "(?:\\b(NOTE|XXX|HACK|FIXME|BUG|TODO)\\b)" }, "fregexp-base-expression": { patterns: [{ include: "#fregexp-quantifier" }, { include: "#fstring-formatting-braces" }, { match: "\\{.*?\\}" }, { include: "#regexp-base-common" }] }, "fregexp-quantifier": { match: `(?x)
\\{\\{(
\\d+ | \\d+,(\\d+)? | ,\\d+
)\\}\\}
`, name: "keyword.operator.quantifier.regexp" }, "fstring-formatting-braces": { patterns: [{ captures: { 1: { name: "constant.character.format.placeholder.other.python" }, 2: { name: "invalid.illegal.brace.python" }, 3: { name: "constant.character.format.placeholder.other.python" } }, comment: "empty braces are illegal", match: "({)(\\s*?)(})" }, { match: "({{|}})", name: "constant.character.escape.python" }] }, "regexp-backreference": { captures: { 1: { name: "support.other.parenthesis.regexp punctuation.parenthesis.backreference.named.begin.regexp" }, 2: { name: "entity.name.tag.named.backreference.regexp" }, 3: { name: "support.other.parenthesis.regexp punctuation.parenthesis.backreference.named.end.regexp" } }, match: `(?x)
(\\()  (\\?P= \\w+(?:\\s+[[:alnum:]]+)?)  (\\))
`, name: "meta.backreference.named.regexp" }, "regexp-backreference-number": { captures: { 1: { name: "entity.name.tag.backreference.regexp" } }, match: "(\\\\[1-9]\\d?)", name: "meta.backreference.regexp" }, "regexp-base-common": { patterns: [{ match: "\\.", name: "support.other.match.any.regexp" }, { match: "\\^", name: "support.other.match.begin.regexp" }, { match: "\\$", name: "support.other.match.end.regexp" }, { match: "[+*?]\\??", name: "keyword.operator.quantifier.regexp" }, { match: "\\|", name: "keyword.operator.disjunction.regexp" }, { include: "#regexp-escape-sequence" }] }, "regexp-base-expression": { patterns: [{ include: "#regexp-quantifier" }, { include: "#regexp-base-common" }] }, "regexp-character-set": { patterns: [{ match: `(?x)
\\[ \\^? \\] (?! .*?\\])
` }, { begin: "(\\[)(\\^)?(\\])?", beginCaptures: { 1: { name: "punctuation.character.set.begin.regexp constant.other.set.regexp" }, 2: { name: "keyword.operator.negation.regexp" }, 3: { name: "constant.character.set.regexp" } }, end: "(\\])", endCaptures: { 1: { name: "punctuation.character.set.end.regexp constant.other.set.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, name: "meta.character.set.regexp", patterns: [{ include: "#regexp-charecter-set-escapes" }, { match: "[^\\n]", name: "constant.character.set.regexp" }] }] }, "regexp-charecter-set-escapes": { patterns: [{ match: "\\\\[abfnrtv\\\\]", name: "constant.character.escape.regexp" }, { include: "#regexp-escape-special" }, { match: "\\\\([0-7]{1,3})", name: "constant.character.escape.regexp" }, { include: "#regexp-escape-character" }, { include: "#regexp-escape-unicode" }, { include: "#regexp-escape-catchall" }] }, "regexp-comments": { begin: "\\(\\?#", beginCaptures: { 0: { name: "punctuation.comment.begin.regexp" } }, end: "(\\))", endCaptures: { 1: { name: "punctuation.comment.end.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, name: "comment.regexp", patterns: [{ include: "#codetags" }] }, "regexp-conditional": { begin: "(\\()\\?\\((\\w+(?:\\s+[[:alnum:]]+)?|\\d+)\\)", beginCaptures: { 0: { name: "keyword.operator.conditional.regexp" }, 1: { name: "punctuation.parenthesis.conditional.begin.regexp" } }, end: "(\\))", endCaptures: { 1: { name: "keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, patterns: [{ include: "#regexp-expression" }] }, "regexp-escape-catchall": { match: "\\\\(.|\\n)", name: "constant.character.escape.regexp" }, "regexp-escape-character": { match: `(?x)
\\\\ (
x[0-9A-Fa-f]{2}
| 0[0-7]{1,2}
| [0-7]{3}
)
`, name: "constant.character.escape.regexp" }, "regexp-escape-sequence": { patterns: [{ include: "#regexp-escape-special" }, { include: "#regexp-escape-character" }, { include: "#regexp-escape-unicode" }, { include: "#regexp-backreference-number" }, { include: "#regexp-escape-catchall" }] }, "regexp-escape-special": { match: "\\\\([AbBdDsSwWZ])", name: "support.other.escape.special.regexp" }, "regexp-escape-unicode": { match: `(?x)
\\\\ (
u[0-9A-Fa-f]{4}
| U[0-9A-Fa-f]{8}
)
`, name: "constant.character.unicode.regexp" }, "regexp-expression": { patterns: [{ include: "#regexp-base-expression" }, { include: "#regexp-character-set" }, { include: "#regexp-comments" }, { include: "#regexp-flags" }, { include: "#regexp-named-group" }, { include: "#regexp-backreference" }, { include: "#regexp-lookahead" }, { include: "#regexp-lookahead-negative" }, { include: "#regexp-lookbehind" }, { include: "#regexp-lookbehind-negative" }, { include: "#regexp-conditional" }, { include: "#regexp-parentheses-non-capturing" }, { include: "#regexp-parentheses" }] }, "regexp-flags": { match: "\\(\\?[aiLmsux]+\\)", name: "storage.modifier.flag.regexp" }, "regexp-lookahead": { begin: "(\\()\\?=", beginCaptures: { 0: { name: "keyword.operator.lookahead.regexp" }, 1: { name: "punctuation.parenthesis.lookahead.begin.regexp" } }, end: "(\\))", endCaptures: { 1: { name: "keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, patterns: [{ include: "#regexp-expression" }] }, "regexp-lookahead-negative": { begin: "(\\()\\?!", beginCaptures: { 0: { name: "keyword.operator.lookahead.negative.regexp" }, 1: { name: "punctuation.parenthesis.lookahead.begin.regexp" } }, end: "(\\))", endCaptures: { 1: { name: "keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, patterns: [{ include: "#regexp-expression" }] }, "regexp-lookbehind": { begin: "(\\()\\?<=", beginCaptures: { 0: { name: "keyword.operator.lookbehind.regexp" }, 1: { name: "punctuation.parenthesis.lookbehind.begin.regexp" } }, end: "(\\))", endCaptures: { 1: { name: "keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, patterns: [{ include: "#regexp-expression" }] }, "regexp-lookbehind-negative": { begin: "(\\()\\?<!", beginCaptures: { 0: { name: "keyword.operator.lookbehind.negative.regexp" }, 1: { name: "punctuation.parenthesis.lookbehind.begin.regexp" } }, end: "(\\))", endCaptures: { 1: { name: "keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, patterns: [{ include: "#regexp-expression" }] }, "regexp-named-group": { begin: `(?x)
(\\()  (\\?P <\\w+(?:\\s+[[:alnum:]]+)?>)
`, beginCaptures: { 1: { name: "support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp" }, 2: { name: "entity.name.tag.named.group.regexp" } }, end: "(\\))", endCaptures: { 1: { name: "support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, name: "meta.named.regexp", patterns: [{ include: "#regexp-expression" }] }, "regexp-parentheses": { begin: "\\(", beginCaptures: { 0: { name: "support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp" } }, end: "(\\))", endCaptures: { 1: { name: "support.other.parenthesis.regexp punctuation.parenthesis.end.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, patterns: [{ include: "#regexp-expression" }] }, "regexp-parentheses-non-capturing": { begin: "\\(\\?:", beginCaptures: { 0: { name: "support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp" } }, end: "(\\))", endCaptures: { 1: { name: "support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, patterns: [{ include: "#regexp-expression" }] }, "regexp-quantifier": { match: `(?x)
\\{(
\\d+ | \\d+,(\\d+)? | ,\\d+
)\\}
`, name: "keyword.operator.quantifier.regexp" } }, scopeName: "source.regexp.python", aliases: ["regex"] });
var y = [
  Y
];
const K = Object.freeze({ displayName: "GLSL", fileTypes: ["vs", "fs", "gs", "vsh", "fsh", "gsh", "vshader", "fshader", "gshader", "vert", "frag", "geom", "f.glsl", "v.glsl", "g.glsl"], foldingStartMarker: "/\\*\\*|\\{\\s*$", foldingStopMarker: "\\*\\*/|^\\s*\\}", name: "glsl", patterns: [{ match: "\\b(break|case|continue|default|discard|do|else|for|if|return|switch|while)\\b", name: "keyword.control.glsl" }, { match: "\\b(void|bool|int|uint|float|vec2|vec3|vec4|bvec2|bvec3|bvec4|ivec2|ivec2|ivec3|uvec2|uvec2|uvec3|mat2|mat3|mat4|mat2x2|mat2x3|mat2x4|mat3x2|mat3x3|mat3x4|mat4x2|mat4x3|mat4x4|sampler[1|2|3]D|samplerCube|sampler2DRect|sampler[1|2]DShadow|sampler2DRectShadow|sampler[1|2]DArray|sampler[1|2]DArrayShadow|samplerBuffer|sampler2DMS|sampler2DMSArray|struct|isampler[1|2|3]D|isamplerCube|isampler2DRect|isampler[1|2]DArray|isamplerBuffer|isampler2DMS|isampler2DMSArray|usampler[1|2|3]D|usamplerCube|usampler2DRect|usampler[1|2]DArray|usamplerBuffer|usampler2DMS|usampler2DMSArray)\\b", name: "storage.type.glsl" }, { match: "\\b(attribute|centroid|const|flat|in|inout|invariant|noperspective|out|smooth|uniform|varying)\\b", name: "storage.modifier.glsl" }, { match: "\\b(gl_BackColor|gl_BackLightModelProduct|gl_BackLightProduct|gl_BackMaterial|gl_BackSecondaryColor|gl_ClipDistance|gl_ClipPlane|gl_ClipVertex|gl_Color|gl_DepthRange|gl_DepthRangeParameters|gl_EyePlaneQ|gl_EyePlaneR|gl_EyePlaneS|gl_EyePlaneT|gl_Fog|gl_FogCoord|gl_FogFragCoord|gl_FogParameters|gl_FragColor|gl_FragCoord|gl_FragDat|gl_FragDept|gl_FrontColor|gl_FrontFacing|gl_FrontLightModelProduct|gl_FrontLightProduct|gl_FrontMaterial|gl_FrontSecondaryColor|gl_InstanceID|gl_Layer|gl_LightModel|gl_LightModelParameters|gl_LightModelProducts|gl_LightProducts|gl_LightSource|gl_LightSourceParameters|gl_MaterialParameters|gl_ModelViewMatrix|gl_ModelViewMatrixInverse|gl_ModelViewMatrixInverseTranspose|gl_ModelViewMatrixTranspose|gl_ModelViewProjectionMatrix|gl_ModelViewProjectionMatrixInverse|gl_ModelViewProjectionMatrixInverseTranspose|gl_ModelViewProjectionMatrixTranspose|gl_MultiTexCoord[0-7]|gl_Normal|gl_NormalMatrix|gl_NormalScale|gl_ObjectPlaneQ|gl_ObjectPlaneR|gl_ObjectPlaneS|gl_ObjectPlaneT|gl_Point|gl_PointCoord|gl_PointParameters|gl_PointSize|gl_Position|gl_PrimitiveIDIn|gl_ProjectionMatrix|gl_ProjectionMatrixInverse|gl_ProjectionMatrixInverseTranspose|gl_ProjectionMatrixTranspose|gl_SecondaryColor|gl_TexCoord|gl_TextureEnvColor|gl_TextureMatrix|gl_TextureMatrixInverse|gl_TextureMatrixInverseTranspose|gl_TextureMatrixTranspose|gl_Vertex|gl_VertexIDh)\\b", name: "support.variable.glsl" }, { match: "\\b(gl_MaxClipPlanes|gl_MaxCombinedTextureImageUnits|gl_MaxDrawBuffers|gl_MaxFragmentUniformComponents|gl_MaxLights|gl_MaxTextureCoords|gl_MaxTextureImageUnits|gl_MaxTextureUnits|gl_MaxVaryingFloats|gl_MaxVertexAttribs|gl_MaxVertexTextureImageUnits|gl_MaxVertexUniformComponents)\\b", name: "support.constant.glsl" }, { match: "\\b(abs|acos|all|any|asin|atan|ceil|clamp|cos|cross|degrees|dFdx|dFdy|distance|dot|equal|exp|exp2|faceforward|floor|fract|ftransform|fwidth|greaterThan|greaterThanEqual|inversesqrt|length|lessThan|lessThanEqual|log|log2|matrixCompMult|max|min|mix|mod|noise[1-4]|normalize|not|notEqual|outerProduct|pow|radians|reflect|refract|shadow1D|shadow1DLod|shadow1DProj|shadow1DProjLod|shadow2D|shadow2DLod|shadow2DProj|shadow2DProjLod|sign|sin|smoothstep|sqrt|step|tan|texture1D|texture1DLod|texture1DProj|texture1DProjLod|texture2D|texture2DLod|texture2DProj|texture2DProjLod|texture3D|texture3DLod|texture3DProj|texture3DProjLod|textureCube|textureCubeLod|transpose)\\b", name: "support.function.glsl" }, { match: "\\b(asm|double|enum|extern|goto|inline|long|short|sizeof|static|typedef|union|unsigned|volatile)\\b", name: "invalid.illegal.glsl" }, { include: "source.c" }], scopeName: "source.glsl", embeddedLangs: ["c"] });
var x = [
  ...b,
  K
];
const Q = Object.freeze({ displayName: "SQL", name: "sql", patterns: [{ match: "((?<!@)@)\\b(\\w+)\\b", name: "text.variable" }, { match: "(\\[)[^\\]]*(\\])", name: "text.bracketed" }, { include: "#comments" }, { captures: { 1: { name: "keyword.other.create.sql" }, 2: { name: "keyword.other.sql" }, 5: { name: "entity.name.function.sql" } }, match: "(?i:^\\s*(create(?:\\s+or\\s+replace)?)\\s+(aggregate|conversion|database|domain|function|group|(unique\\s+)?index|language|operator class|operator|rule|schema|sequence|table|tablespace|trigger|type|user|view)\\s+)(['\"`]?)(\\w+)\\4", name: "meta.create.sql" }, { captures: { 1: { name: "keyword.other.create.sql" }, 2: { name: "keyword.other.sql" } }, match: "(?i:^\\s*(drop)\\s+(aggregate|conversion|database|domain|function|group|index|language|operator class|operator|rule|schema|sequence|table|tablespace|trigger|type|user|view))", name: "meta.drop.sql" }, { captures: { 1: { name: "keyword.other.create.sql" }, 2: { name: "keyword.other.table.sql" }, 3: { name: "entity.name.function.sql" }, 4: { name: "keyword.other.cascade.sql" } }, match: "(?i:\\s*(drop)\\s+(table)\\s+(\\w+)(\\s+cascade)?\\b)", name: "meta.drop.sql" }, { captures: { 1: { name: "keyword.other.create.sql" }, 2: { name: "keyword.other.table.sql" } }, match: "(?i:^\\s*(alter)\\s+(aggregate|conversion|database|domain|function|group|index|language|operator class|operator|proc(edure)?|rule|schema|sequence|table|tablespace|trigger|type|user|view)\\s+)", name: "meta.alter.sql" }, { captures: { 1: { name: "storage.type.sql" }, 2: { name: "storage.type.sql" }, 3: { name: "constant.numeric.sql" }, 4: { name: "storage.type.sql" }, 5: { name: "constant.numeric.sql" }, 6: { name: "storage.type.sql" }, 7: { name: "constant.numeric.sql" }, 8: { name: "constant.numeric.sql" }, 9: { name: "storage.type.sql" }, 10: { name: "constant.numeric.sql" }, 11: { name: "storage.type.sql" }, 12: { name: "storage.type.sql" }, 13: { name: "storage.type.sql" }, 14: { name: "constant.numeric.sql" }, 15: { name: "storage.type.sql" } }, match: `(?xi)


\\b(bigint|bigserial|bit|boolean|box|bytea|cidr|circle|date|double\\sprecision|inet|int|integer|line|lseg|macaddr|money|oid|path|point|polygon|real|serial|smallint|sysdate|text)\\b


|\\b(bit\\svarying|character\\s(?:varying)?|tinyint|var\\schar|float|interval)\\((\\d+)\\)


|\\b(char|number|varchar\\d?)\\b(?:\\((\\d+)\\))?


|\\b(numeric|decimal)\\b(?:\\((\\d+),(\\d+)\\))?


|\\b(times?)\\b(?:\\((\\d+)\\))?(\\swith(?:out)?\\stime\\szone\\b)?


|\\b(timestamp)(?:(s|tz))?\\b(?:\\((\\d+)\\))?(\\s(with|without)\\stime\\szone\\b)?

` }, { match: "(?i:\\b((?:primary|foreign)\\s+key|references|on\\sdelete(\\s+cascade)?|nocheck|check|constraint|collate|default)\\b)", name: "storage.modifier.sql" }, { match: "\\b\\d+\\b", name: "constant.numeric.sql" }, { match: "(?i:\\b(select(\\s+(all|distinct))?|insert\\s+(ignore\\s+)?into|update|delete|from|set|where|group\\s+by|or|like|and|union(\\s+all)?|having|order\\s+by|limit|cross\\s+join|join|straight_join|(inner|(left|right|full)(\\s+outer)?)\\s+join|natural(\\s+(inner|(left|right|full)(\\s+outer)?))?\\s+join)\\b)", name: "keyword.other.DML.sql" }, { match: "(?i:\\b(on|off|((is\\s+)?not\\s+)?null)\\b)", name: "keyword.other.DDL.create.II.sql" }, { match: "(?i:\\bvalues\\b)", name: "keyword.other.DML.II.sql" }, { match: "(?i:\\b(begin(\\s+work)?|start\\s+transaction|commit(\\s+work)?|rollback(\\s+work)?)\\b)", name: "keyword.other.LUW.sql" }, { match: "(?i:\\b(grant(\\swith\\sgrant\\soption)?|revoke)\\b)", name: "keyword.other.authorization.sql" }, { match: "(?i:\\bin\\b)", name: "keyword.other.data-integrity.sql" }, { match: "(?i:^\\s*(comment\\s+on\\s+(table|column|aggregate|constraint|database|domain|function|index|operator|rule|schema|sequence|trigger|type|view))\\s+.*?\\s+(is)\\s+)", name: "keyword.other.object-comments.sql" }, { match: "(?i)\\bAS\\b", name: "keyword.other.alias.sql" }, { match: "(?i)\\b(DESC|ASC)\\b", name: "keyword.other.order.sql" }, { match: "\\*", name: "keyword.operator.star.sql" }, { match: "[!<>]?=|<>|<|>", name: "keyword.operator.comparison.sql" }, { match: "-|\\+|/", name: "keyword.operator.math.sql" }, { match: "\\|\\|", name: "keyword.operator.concatenator.sql" }, { captures: { 1: { name: "support.function.aggregate.sql" } }, match: "(?i)\\b(approx_count_distinct|approx_percentile_cont|approx_percentile_disc|avg|checksum_agg|count|count_big|group|grouping|grouping_id|max|min|sum|stdev|stdevp|var|varp)\\b\\s*\\(" }, { captures: { 1: { name: "support.function.analytic.sql" } }, match: "(?i)\\b(cume_dist|first_value|lag|last_value|lead|percent_rank|percentile_cont|percentile_disc)\\b\\s*\\(" }, { captures: { 1: { name: "support.function.bitmanipulation.sql" } }, match: "(?i)\\b(bit_count|get_bit|left_shift|right_shift|set_bit)\\b\\s*\\(" }, { captures: { 1: { name: "support.function.conversion.sql" } }, match: "(?i)\\b(cast|convert|parse|try_cast|try_convert|try_parse)\\b\\s*\\(" }, { captures: { 1: { name: "support.function.collation.sql" } }, match: "(?i)\\b(collationproperty|tertiary_weights)\\b\\s*\\(" }, { captures: { 1: { name: "support.function.cryptographic.sql" } }, match: "(?i)\\b(asymkey_id|asymkeyproperty|certproperty|cert_id|crypt_gen_random|decryptbyasymkey|decryptbycert|decryptbykey|decryptbykeyautoasymkey|decryptbykeyautocert|decryptbypassphrase|encryptbyasymkey|encryptbycert|encryptbykey|encryptbypassphrase|hashbytes|is_objectsigned|key_guid|key_id|key_name|signbyasymkey|signbycert|symkeyproperty|verifysignedbycert|verifysignedbyasymkey)\\b\\s*\\(" }, { captures: { 1: { name: "support.function.cursor.sql" } }, match: "(?i)\\b(cursor_status)\\b\\s*\\(" }, { captures: { 1: { name: "support.function.datetime.sql" } }, match: "(?i)\\b(sysdatetime|sysdatetimeoffset|sysutcdatetime|current_time(stamp)?|getdate|getutcdate|datename|datepart|day|month|year|datefromparts|datetime2fromparts|datetimefromparts|datetimeoffsetfromparts|smalldatetimefromparts|timefromparts|datediff|dateadd|datetrunc|eomonth|switchoffset|todatetimeoffset|isdate|date_bucket)\\b\\s*\\(" }, { captures: { 1: { name: "support.function.datatype.sql" } }, match: "(?i)\\b(datalength|ident_current|ident_incr|ident_seed|identity|sql_variant_property)\\b\\s*\\(" }, { captures: { 1: { name: "support.function.expression.sql" } }, match: "(?i)\\b(coalesce|nullif)\\b\\s*\\(" }, { captures: { 1: { name: "support.function.globalvar.sql" } }, match: "(?<!@)@@(?i)\\b(cursor_rows|connections|cpu_busy|datefirst|dbts|error|fetch_status|identity|idle|io_busy|langid|language|lock_timeout|max_connections|max_precision|nestlevel|options|packet_errors|pack_received|pack_sent|procid|remserver|rowcount|servername|servicename|spid|textsize|timeticks|total_errors|total_read|total_write|trancount|version)\\b\\s*\\(" }, { captures: { 1: { name: "support.function.json.sql" } }, match: "(?i)\\b(json|isjson|json_object|json_array|json_value|json_query|json_modify|json_path_exists)\\b\\s*\\(" }, { captures: { 1: { name: "support.function.logical.sql" } }, match: "(?i)\\b(choose|iif|greatest|least)\\b\\s*\\(" }, { captures: { 1: { name: "support.function.mathematical.sql" } }, match: "(?i)\\b(abs|acos|asin|atan|atn2|ceiling|cos|cot|degrees|exp|floor|log|log10|pi|power|radians|rand|round|sign|sin|sqrt|square|tan)\\b\\s*\\(" }, { captures: { 1: { name: "support.function.metadata.sql" } }, match: "(?i)\\b(app_name|applock_mode|applock_test|assemblyproperty|col_length|col_name|columnproperty|database_principal_id|databasepropertyex|db_id|db_name|file_id|file_idex|file_name|filegroup_id|filegroup_name|filegroupproperty|fileproperty|fulltextcatalogproperty|fulltextserviceproperty|index_col|indexkey_property|indexproperty|object_definition|object_id|object_name|object_schema_name|objectproperty|objectpropertyex|original_db_name|parsename|schema_id|schema_name|scope_identity|serverproperty|stats_date|type_id|type_name|typeproperty)\\b\\s*\\(" }, { captures: { 1: { name: "support.function.ranking.sql" } }, match: "(?i)\\b(rank|dense_rank|ntile|row_number)\\b\\s*\\(" }, { captures: { 1: { name: "support.function.rowset.sql" } }, match: "(?i)\\b(generate_series|opendatasource|openjson|openrowset|openquery|openxml|predict|string_split)\\b\\s*\\(" }, { captures: { 1: { name: "support.function.security.sql" } }, match: "(?i)\\b(certencoded|certprivatekey|current_user|database_principal_id|has_perms_by_name|is_member|is_rolemember|is_srvrolemember|original_login|permissions|pwdcompare|pwdencrypt|schema_id|schema_name|session_user|suser_id|suser_sid|suser_sname|system_user|suser_name|user_id|user_name)\\b\\s*\\(" }, { captures: { 1: { name: "support.function.string.sql" } }, match: "(?i)\\b(ascii|char|charindex|concat|difference|format|left|len|lower|ltrim|nchar|nodes|patindex|quotename|replace|replicate|reverse|right|rtrim|soundex|space|str|string_agg|string_escape|string_split|stuff|substring|translate|trim|unicode|upper)\\b\\s*\\(" }, { captures: { 1: { name: "support.function.system.sql" } }, match: "(?i)\\b(binary_checksum|checksum|compress|connectionproperty|context_info|current_request_id|current_transaction_id|decompress|error_line|error_message|error_number|error_procedure|error_severity|error_state|formatmessage|get_filestream_transaction_context|getansinull|host_id|host_name|isnull|isnumeric|min_active_rowversion|newid|newsequentialid|rowcount_big|session_context|session_id|xact_state)\\b\\s*\\(" }, { captures: { 1: { name: "support.function.textimage.sql" } }, match: "(?i)\\b(patindex|textptr|textvalid)\\b\\s*\\(" }, { captures: { 1: { name: "constant.other.database-name.sql" }, 2: { name: "constant.other.table-name.sql" } }, match: "(\\w+?)\\.(\\w+)" }, { include: "#strings" }, { include: "#regexps" }, { match: "\\b(?i)(abort|abort_after_wait|absent|absolute|accent_sensitivity|acceptable_cursopt|acp|action|activation|add|address|admin|aes_128|aes_192|aes_256|affinity|after|aggregate|algorithm|all_constraints|all_errormsgs|all_indexes|all_levels|all_results|allow_connections|allow_dup_row|allow_encrypted_value_modifications|allow_page_locks|allow_row_locks|allow_snapshot_isolation|alter|altercolumn|always|anonymous|ansi_defaults|ansi_null_default|ansi_null_dflt_off|ansi_null_dflt_on|ansi_nulls|ansi_padding|ansi_warnings|appdomain|append|application|apply|arithabort|arithignore|array|assembly|asymmetric|asynchronous_commit|at|atan2|atomic|attach|attach_force_rebuild_log|attach_rebuild_log|audit|auth_realm|authentication|auto|auto_cleanup|auto_close|auto_create_statistics|auto_drop|auto_shrink|auto_update_statistics|auto_update_statistics_async|automated_backup_preference|automatic|autopilot|availability|availability_mode|backup|backup_priority|base64|basic|batches|batchsize|before|between|bigint|binary|binding|bit|block|blockers|blocksize|bmk|both|break|broker|broker_instance|bucket_count|buffer|buffercount|bulk_logged|by|call|caller|card|case|catalog|catch|cert|certificate|change_retention|change_tracking|change_tracking_context|changes|char|character|character_set|check_expiration|check_policy|checkconstraints|checkindex|checkpoint|checksum|cleanup_policy|clear|clear_port|close|clustered|codepage|collection|column_encryption_key|column_master_key|columnstore|columnstore_archive|colv_80_to_100|colv_100_to_80|commit_differential_base|committed|compatibility_level|compress_all_row_groups|compression|compression_delay|concat_null_yields_null|concatenate|configuration|connect|connection|containment|continue|continue_after_error|contract|contract_name|control|conversation|conversation_group_id|conversation_handle|copy|copy_only|count_rows|counter|create(\\\\s+or\\\\s+alter)?|credential|cross|cryptographic|cryptographic_provider|cube|cursor|cursor_close_on_commit|cursor_default|data|data_compression|data_flush_interval_seconds|data_mirroring|data_purity|data_source|database|database_name|database_snapshot|datafiletype|date_correlation_optimization|date|datefirst|dateformat|date_format|datetime|datetime2|datetimeoffset|day(s)?|db_chaining|dbid|dbidexec|dbo_only|deadlock_priority|deallocate|dec|decimal|declare|decrypt|decrypt_a|decryption|default_database|default_fulltext_language|default_language|default_logon_domain|default_schema|definition|delay|delayed_durability|delimitedtext|density_vector|dependent|des|description|desired_state|desx|differential|digest|disable|disable_broker|disable_def_cnst_chk|disabled|disk|distinct|distributed|distribution|drop|drop_existing|dts_buffers|dump|durability|dynamic|edition|elements|else|emergency|empty|enable|enable_broker|enabled|encoding|encrypted|encrypted_value|encryption|encryption_type|end|endpoint|endpoint_url|enhancedintegrity|entry|error_broker_conversations|errorfile|estimateonly|event|except|exec|executable|execute|exists|expand|expiredate|expiry_date|explicit|external|external_access|failover|failover_mode|failure_condition_level|fast|fast_forward|fastfirstrow|federated_service_account|fetch|field_terminator|fieldterminator|file|filelistonly|filegroup|filegrowth|filename|filestream|filestream_log|filestream_on|filetable|file_format|filter|first_row|fips_flagger|fire_triggers|first|firstrow|float|flush_interval_seconds|fmtonly|following|for|force|force_failover_allow_data_loss|force_service_allow_data_loss|forced|forceplan|formatfile|format_options|format_type|formsof|forward_only|free_cursors|free_exec_context|fullscan|fulltext|fulltextall|fulltextkey|function|generated|get|geography|geometry|global|go|goto|governor|guid|hadoop|hardening|hash|hashed|header_limit|headeronly|health_check_timeout|hidden|hierarchyid|histogram|histogram_steps|hits_cursors|hits_exec_context|hour(s)?|http|identity|identity_value|if|ifnull|ignore|ignore_constraints|ignore_dup_key|ignore_dup_row|ignore_triggers|image|immediate|implicit_transactions|include|include_null_values|incremental|index|inflectional|init|initiator|insensitive|insert|instead|int|integer|integrated|intersect|intermediate|interval_length_minutes|into|inuse_cursors|inuse_exec_context|io|is|isabout|iso_week|isolation|job_tracker_location|json|keep|keep_nulls|keep_replication|keepdefaults|keepfixed|keepidentity|keepnulls|kerberos|key|key_path|key_source|key_store_provider_name|keyset|kill|kilobytes_per_batch|labelonly|langid|language|last|lastrow|leading|legacy_cardinality_estimation|length|level|lifetime|lineage_80_to_100|lineage_100_to_80|listener_ip|listener_port|load|loadhistory|lob_compaction|local|local_service_name|locate|location|lock_escalation|lock_timeout|lockres|log|login|login_type|loop|manual|mark_in_use_for_removal|masked|master|match|matched|max_queue_readers|max_duration|max_outstanding_io_per_volume|maxdop|maxerrors|maxlength|maxtransfersize|max_plans_per_query|max_storage_size_mb|mediadescription|medianame|mediapassword|memogroup|memory_optimized|merge|message|message_forward_size|message_forwarding|microsecond|millisecond|minute(s)?|mirror_address|misses_cursors|misses_exec_context|mixed|modify|money|month|move|multi_user|must_change|name|namespace|nanosecond|native|native_compilation|nchar|ncharacter|nested_triggers|never|new_account|new_broker|newname|next|no|no_browsetable|no_checksum|no_compression|no_infomsgs|no_triggers|no_truncate|nocount|noexec|noexpand|noformat|noinit|nolock|nonatomic|nonclustered|nondurable|none|norecompute|norecovery|noreset|norewind|noskip|not|notification|nounload|now|nowait|ntext|ntlm|nulls|numeric|numeric_roundabort|nvarchar|object|objid|oem|offline|old_account|online|operation_mode|open|openjson|optimistic|option|orc|out|outer|output|over|override|owner|ownership|pad_index|page|page_checksum|page_verify|pagecount|paglock|param|parameter_sniffing|parameter_type_expansion|parameterization|parquet|parseonly|partial|partition|partner|password|path|pause|percentage|permission_set|persisted|period|physical_only|plan_forcing_mode|policy|pool|population|ports|preceding|precision|predicate|presume_abort|primary|primary_role|print|prior|priority |priority_level|private|proc(edure)?|procedure_name|profile|provider|quarter|query_capture_mode|query_governor_cost_limit|query_optimizer_hotfixes|query_store|queue|quoted_identifier|raiserror|range|raw|rcfile|rc2|rc4|rc4_128|rdbms|read_committed_snapshot|read|read_only|read_write|readcommitted|readcommittedlock|readonly|readpast|readuncommitted|readwrite|real|rebuild|receive|recmodel_70backcomp|recompile|reconfigure|recovery|recursive|recursive_triggers|redo_queue|reject_sample_value|reject_type|reject_value|relative|remote|remote_data_archive|remote_proc_transactions|remote_service_name|remove|removed_cursors|removed_exec_context|reorganize|repeat|repeatable|repeatableread|replace|replica|replicated|replnick_100_to_80|replnickarray_80_to_100|replnickarray_100_to_80|required|required_cursopt|resample|reset|resource|resource_manager_location|respect|restart|restore|restricted_user|resume|retaindays|retention|return|revert|rewind|rewindonly|returns|robust|role|rollup|root|round_robin|route|row|rowdump|rowguidcol|rowlock|row_terminator|rows|rows_per_batch|rowsets_only|rowterminator|rowversion|rsa_1024|rsa_2048|rsa_3072|rsa_4096|rsa_512|safe|safety|sample|save|scalar|schema|schemabinding|scoped|scroll|scroll_locks|sddl|second|secexpr|seconds|secondary|secondary_only|secondary_role|secret|security|securityaudit|selective|self|send|sent|sequence|serde_method|serializable|server|service|service_broker|service_name|service_objective|session_timeout|session|sessions|seterror|setopts|sets|shard_map_manager|shard_map_name|sharded|shared_memory|shortest_path|show_statistics|showplan_all|showplan_text|showplan_xml|showplan_xml_with_recompile|shrinkdb|shutdown|sid|signature|simple|single_blob|single_clob|single_nclob|single_user|singleton|site|size|size_based_cleanup_mode|skip|smalldatetime|smallint|smallmoney|snapshot|snapshot_import|snapshotrestorephase|soap|softnuma|sort_in_tempdb|sorted_data|sorted_data_reorg|spatial|sql|sql_bigint|sql_binary|sql_bit|sql_char|sql_date|sql_decimal|sql_double|sql_float|sql_guid|sql_handle|sql_longvarbinary|sql_longvarchar|sql_numeric|sql_real|sql_smallint|sql_time|sql_timestamp|sql_tinyint|sql_tsi_day|sql_tsi_frac_second|sql_tsi_hour|sql_tsi_minute|sql_tsi_month|sql_tsi_quarter|sql_tsi_second|sql_tsi_week|sql_tsi_year|sql_type_date|sql_type_time|sql_type_timestamp|sql_varbinary|sql_varchar|sql_variant|sql_wchar|sql_wlongvarchar|ssl|ssl_port|standard|standby|start|start_date|started|stat_header|state|statement|static|statistics|statistics_incremental|statistics_norecompute|statistics_only|statman|stats|stats_stream|status|stop|stop_on_error|stopat|stopatmark|stopbeforemark|stoplist|stopped|string_delimiter|subject|supplemental_logging|supported|suspend|symmetric|synchronous_commit|synonym|sysname|system|system_time|system_versioning|table|tableresults|tablock|tablockx|take|tape|target|target_index|target_partition|target_recovery_time|tcp|temporal_history_retention|text|textimage_on|then|thesaurus|throw|time|timeout|timestamp|tinyint|to|top|torn_page_detection|track_columns_updated|trailing|tran|transaction|transfer|transform_noise_words|triple_des|triple_des_3key|truncate|trustworthy|try|tsql|two_digit_year_cutoff|type|type_desc|type_warning|tzoffset|uid|unbounded|uncommitted|unique|uniqueidentifier|unlimited|unload|unlock|unsafe|updlock|url|use|useplan|useroptions|use_type_default|using|utcdatetime|valid_xml|validation|value|values|varbinary|varchar|verbose|verifyonly|version|view_metadata|virtual_device|visiblity|wait_at_low_priority|waitfor|webmethod|week|weekday|weight|well_formed_xml|when|while|widechar|widechar_ansi|widenative|window|windows|with|within|within group|witness|without|without_array_wrapper|workload|wsdl|xact_abort|xlock|xml|xmlschema|xquery|xsinil|year|zone)\\b", name: "keyword.other.sql" }, { captures: { 1: { name: "punctuation.section.scope.begin.sql" }, 2: { name: "punctuation.section.scope.end.sql" } }, comment: "Allow for special ↩ behavior", match: "(\\()(\\))", name: "meta.block.sql" }], repository: { "comment-block": { begin: "/\\*", captures: { 0: { name: "punctuation.definition.comment.sql" } }, end: "\\*/", name: "comment.block", patterns: [{ include: "#comment-block" }] }, comments: { patterns: [{ begin: "(^[ \\t]+)?(?=--)", beginCaptures: { 1: { name: "punctuation.whitespace.comment.leading.sql" } }, end: "(?!\\G)", patterns: [{ begin: "--", beginCaptures: { 0: { name: "punctuation.definition.comment.sql" } }, end: "\\n", name: "comment.line.double-dash.sql" }] }, { begin: "(^[ \\t]+)?(?=#)", beginCaptures: { 1: { name: "punctuation.whitespace.comment.leading.sql" } }, end: "(?!\\G)", patterns: [] }, { include: "#comment-block" }] }, regexps: { patterns: [{ begin: "/(?=\\S.*/)", beginCaptures: { 0: { name: "punctuation.definition.string.begin.sql" } }, end: "/", endCaptures: { 0: { name: "punctuation.definition.string.end.sql" } }, name: "string.regexp.sql", patterns: [{ include: "#string_interpolation" }, { match: "\\\\/", name: "constant.character.escape.slash.sql" }] }, { begin: "%r\\{", beginCaptures: { 0: { name: "punctuation.definition.string.begin.sql" } }, comment: "We should probably handle nested bracket pairs!?! -- Allan", end: "\\}", endCaptures: { 0: { name: "punctuation.definition.string.end.sql" } }, name: "string.regexp.modr.sql", patterns: [{ include: "#string_interpolation" }] }] }, string_escape: { match: "\\\\.", name: "constant.character.escape.sql" }, string_interpolation: { captures: { 1: { name: "punctuation.definition.string.begin.sql" }, 3: { name: "punctuation.definition.string.end.sql" } }, match: "(#\\{)([^\\}]*)(\\})", name: "string.interpolated.sql" }, strings: { patterns: [{ captures: { 2: { name: "punctuation.definition.string.begin.sql" }, 3: { name: "punctuation.definition.string.end.sql" } }, comment: "this is faster than the next begin/end rule since sub-pattern will match till end-of-line and SQL files tend to have very long lines.", match: "(N)?(')[^']*(')", name: "string.quoted.single.sql" }, { begin: "'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.sql" } }, end: "'", endCaptures: { 0: { name: "punctuation.definition.string.end.sql" } }, name: "string.quoted.single.sql", patterns: [{ include: "#string_escape" }] }, { captures: { 1: { name: "punctuation.definition.string.begin.sql" }, 2: { name: "punctuation.definition.string.end.sql" } }, comment: "this is faster than the next begin/end rule since sub-pattern will match till end-of-line and SQL files tend to have very long lines.", match: "(`)[^`\\\\]*(`)", name: "string.quoted.other.backtick.sql" }, { begin: "`", beginCaptures: { 0: { name: "punctuation.definition.string.begin.sql" } }, end: "`", endCaptures: { 0: { name: "punctuation.definition.string.end.sql" } }, name: "string.quoted.other.backtick.sql", patterns: [{ include: "#string_escape" }] }, { captures: { 1: { name: "punctuation.definition.string.begin.sql" }, 2: { name: "punctuation.definition.string.end.sql" } }, comment: "this is faster than the next begin/end rule since sub-pattern will match till end-of-line and SQL files tend to have very long lines.", match: '(")[^"#]*(")', name: "string.quoted.double.sql" }, { begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.sql" } }, end: '"', endCaptures: { 0: { name: "punctuation.definition.string.end.sql" } }, name: "string.quoted.double.sql", patterns: [{ include: "#string_interpolation" }] }, { begin: "%\\{", beginCaptures: { 0: { name: "punctuation.definition.string.begin.sql" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.string.end.sql" } }, name: "string.other.quoted.brackets.sql", patterns: [{ include: "#string_interpolation" }] }] } }, scopeName: "source.sql" });
var a = [
  Q
];
const J = Object.freeze({ displayName: "C++", name: "cpp-macro", patterns: [{ include: "#ever_present_context" }, { include: "#constructor_root" }, { include: "#destructor_root" }, { include: "#function_definition" }, { include: "#operator_overload" }, { include: "#using_namespace" }, { include: "source.cpp#type_alias" }, { include: "source.cpp#using_name" }, { include: "source.cpp#namespace_alias" }, { include: "#namespace_block" }, { include: "#extern_block" }, { include: "#typedef_class" }, { include: "#typedef_struct" }, { include: "#typedef_union" }, { include: "source.cpp#misc_keywords" }, { include: "source.cpp#standard_declares" }, { include: "#class_block" }, { include: "#struct_block" }, { include: "#union_block" }, { include: "#enum_block" }, { include: "source.cpp#template_isolated_definition" }, { include: "#template_definition" }, { include: "source.cpp#template_explicit_instantiation" }, { include: "source.cpp#access_control_keywords" }, { include: "#block" }, { include: "#static_assert" }, { include: "#assembly" }, { include: "#function_pointer" }, { include: "#evaluation_context" }], repository: { alignas_attribute: { begin: "alignas\\(", beginCaptures: { 0: { name: "punctuation.section.attribute.begin.cpp" } }, end: `\\)|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.attribute.end.cpp" } }, name: "support.other.attribute.cpp", patterns: [{ include: "#attributes_context" }, { begin: "\\(", beginCaptures: {}, end: `\\)|(?=(?<!\\\\)
)`, endCaptures: {}, patterns: [{ include: "#attributes_context" }, { include: "#string_context" }, { include: "#ever_present_context" }] }, { captures: { 1: { name: "keyword.other.using.directive.cpp" }, 2: { name: "entity.name.namespace.cpp" } }, match: "(using)\\s+((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))" }, { match: ",", name: "punctuation.separator.attribute.cpp" }, { match: ":", name: "punctuation.accessor.attribute.cpp" }, { match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)(?=::)", name: "entity.name.namespace.cpp" }, { match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)", name: "entity.other.attribute.$0.cpp" }, { include: "source.cpp#number_literal" }, { include: "#ever_present_context" }] }, alignas_operator: { begin: "((?<!\\w)alignas(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\()", beginCaptures: { 1: { name: "keyword.operator.functionlike.cpp keyword.operator.alignas.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "punctuation.section.arguments.begin.bracket.round.operator.alignas.cpp" } }, contentName: "meta.arguments.operator.alignas", end: `\\)|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.operator.alignas.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, alignof_operator: { begin: "((?<!\\w)alignof(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\()", beginCaptures: { 1: { name: "keyword.operator.functionlike.cpp keyword.operator.alignof.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "punctuation.section.arguments.begin.bracket.round.operator.alignof.cpp" } }, contentName: "meta.arguments.operator.alignof", end: `\\)|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.operator.alignof.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, assembly: { begin: "(\\b(?:__asm__|asm)\\b)(?:\\s+)?((?:volatile)?)", beginCaptures: { 1: { name: "storage.type.asm.cpp" }, 2: { name: "storage.modifier.cpp" } }, end: `(?!\\G)|(?=(?<!\\\\)
)`, endCaptures: {}, name: "meta.asm.cpp", patterns: [{ captures: { 1: { patterns: [{ include: "source.cpp#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "^((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:\\n|$)" }, { include: "#comments" }, { begin: "((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))\\(", beginCaptures: { 0: { name: "punctuation.section.parens.begin.bracket.round.assembly.cpp" }, 1: { patterns: [{ include: "source.cpp#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, end: `\\)|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.parens.end.bracket.round.assembly.cpp" } }, patterns: [{ begin: '(R?)(")', beginCaptures: { 1: { name: "meta.encoding.cpp" }, 2: { name: "punctuation.definition.string.begin.assembly.cpp" } }, contentName: "meta.embedded.assembly", end: `"|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.definition.string.end.assembly.cpp" } }, name: "string.quoted.double.cpp", patterns: [{ include: "source.asm" }, { include: "source.x86" }, { include: "source.x86_64" }, { include: "source.arm" }, { include: "source.cpp#backslash_escapes" }, { include: "#string_escaped_char" }] }, { begin: "\\(", beginCaptures: { 0: { name: "punctuation.section.parens.begin.bracket.round.assembly.inner.cpp" } }, end: `\\)|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.parens.end.bracket.round.assembly.inner.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, { captures: { 1: { patterns: [{ include: "source.cpp#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 5: { name: "variable.other.asm.label.cpp" }, 6: { patterns: [{ include: "source.cpp#inline_comment" }] }, 7: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 8: { name: "comment.block.cpp" }, 9: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\[((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))\\]" }, { match: ":", name: "punctuation.separator.delimiter.colon.assembly.cpp" }, { include: "#comments" }] }] }, attributes_context: { patterns: [{ include: "#cpp_attributes" }, { include: "#gcc_attributes" }, { include: "#ms_attributes" }, { include: "#alignas_attribute" }] }, block: { begin: "{", beginCaptures: { 0: { name: "punctuation.section.block.begin.bracket.curly.cpp" } }, end: `}|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.block.end.bracket.curly.cpp" } }, name: "meta.block.cpp", patterns: [{ include: "#function_body_context" }] }, block_comment: { begin: "\\s*+(\\/\\*)", beginCaptures: { 1: { name: "punctuation.definition.comment.begin.cpp" } }, end: `\\*\\/|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.definition.comment.end.cpp" } }, name: "comment.block.cpp" }, builtin_storage_type_initilizer: { begin: "\\s*+(?<!\\w)(?:(?:(?:((?:(?:unsigned)|(?:wchar_t)|(?:double)|(?:signed)|(?:short)|(?:float)|(?:auto)|(?:void)|(?:long)|(?:char)|(?:bool)|(?:int)))|((?:(?:uint_least32_t)|(?:uint_least64_t)|(?:uint_least16_t)|(?:uint_fast64_t)|(?:uint_least8_t)|(?:int_least64_t)|(?:int_least32_t)|(?:int_least16_t)|(?:uint_fast16_t)|(?:uint_fast32_t)|(?:int_least8_t)|(?:int_fast16_t)|(?:int_fast32_t)|(?:int_fast64_t)|(?:uint_fast8_t)|(?:int_fast8_t)|(?:suseconds_t)|(?:useconds_t)|(?:uintmax_t)|(?:uintmax_t)|(?:in_port_t)|(?:uintmax_t)|(?:in_addr_t)|(?:blksize_t)|(?:uintptr_t)|(?:intmax_t)|(?:intptr_t)|(?:blkcnt_t)|(?:intmax_t)|(?:u_quad_t)|(?:uint16_t)|(?:uint32_t)|(?:uint64_t)|(?:ssize_t)|(?:fixpt_t)|(?:qaddr_t)|(?:u_short)|(?:int16_t)|(?:int32_t)|(?:int64_t)|(?:uint8_t)|(?:daddr_t)|(?:caddr_t)|(?:swblk_t)|(?:clock_t)|(?:segsz_t)|(?:nlink_t)|(?:time_t)|(?:u_long)|(?:ushort)|(?:quad_t)|(?:mode_t)|(?:size_t)|(?:u_char)|(?:int8_t)|(?:u_int)|(?:uid_t)|(?:off_t)|(?:pid_t)|(?:gid_t)|(?:dev_t)|(?:div_t)|(?:key_t)|(?:ino_t)|(?:id_t)|(?:id_t)|(?:uint))))|((?:(?:pthread_rwlockattr_t)|(?:pthread_mutexattr_t)|(?:pthread_condattr_t)|(?:pthread_rwlock_t)|(?:pthread_mutex_t)|(?:pthread_cond_t)|(?:pthread_attr_t)|(?:pthread_once_t)|(?:pthread_key_t)|(?:pthread_t))))|([a-zA-Z_]\\w*_t))(?!\\w)\\s*+(?<!\\w)(\\()", beginCaptures: { 1: { name: "storage.type.primitive.cpp storage.type.built-in.primitive.cpp" }, 2: { name: "storage.type.cpp storage.type.built-in.cpp" }, 3: { name: "support.type.posix-reserved.pthread.cpp support.type.built-in.posix-reserved.pthread.cpp" }, 4: { name: "support.type.posix-reserved.cpp support.type.built-in.posix-reserved.cpp" }, 5: { name: "punctuation.section.arguments.begin.bracket.round.initializer.cpp" } }, end: `\\)|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.initializer.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, case_statement: { begin: "((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)case(?!\\w))", beginCaptures: { 1: { patterns: [{ include: "source.cpp#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 5: { name: "keyword.control.case.cpp" } }, end: `:|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.separator.colon.case.cpp" } }, name: "meta.conditional.case.cpp", patterns: [{ include: "#evaluation_context" }] }, class_block: { begin: "((?<!\\w)class(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(?={)|(?:((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?((?:(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*+)?(?:((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(:(?!:)))?)", beginCaptures: { 0: { name: "meta.head.class.cpp" }, 1: { name: "storage.type.$1.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { patterns: [{ include: "#attributes_context" }, { include: "source.cpp#number_literal" }] }, 7: { patterns: [{ include: "source.cpp#inline_comment" }] }, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 11: { patterns: [{ captures: { 1: { name: "storage.type.modifier.final.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "((?<!\\w)final(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))" }, { captures: { 1: { name: "entity.name.type.class.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "storage.type.modifier.final.cpp" }, 7: { patterns: [{ include: "source.cpp#inline_comment" }] }, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:((?<!\\w)final(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?(?=:|{|$)" }, { match: "DLLEXPORT", name: "entity.name.other.preprocessor.macro.predefined.DLLEXPORT.cpp" }, { match: "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*", name: "entity.name.other.preprocessor.macro.predefined.probably.$0.cpp" }] }, 12: { patterns: [{ include: "source.cpp#inline_comment" }] }, 13: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 14: { name: "comment.block.cpp" }, 15: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 16: { patterns: [{ include: "source.cpp#inline_comment" }] }, 17: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 18: { name: "comment.block.cpp" }, 19: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 20: { name: "punctuation.separator.colon.inheritance.cpp" } }, end: `(?:(?:(?<=\\}|%>|\\?\\?>)(?:\\s+)?(;)|(;))|(?=[;>\\[\\]=]))|(?=(?<!\\\\)
)`, endCaptures: { 1: { name: "punctuation.terminator.statement.cpp" }, 2: { name: "punctuation.terminator.statement.cpp" } }, name: "meta.block.class.cpp", patterns: [{ begin: "\\G ?", beginCaptures: {}, end: `(?:\\{|<%|\\?\\?<|(?=;))|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.block.begin.bracket.curly.class.cpp" } }, name: "meta.head.class.cpp", patterns: [{ include: "#ever_present_context" }, { include: "#inheritance_context" }, { include: "#template_call_range" }] }, { begin: "(?<=\\{|<%|\\?\\?<)", beginCaptures: {}, end: `\\}|%>|\\?\\?>|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.block.end.bracket.curly.class.cpp" } }, name: "meta.body.class.cpp", patterns: [{ include: "#function_pointer" }, { include: "#static_assert" }, { include: "#constructor_inline" }, { include: "#destructor_inline" }, { include: "$self" }] }, { begin: "(?<=\\}|%>|\\?\\?>)[\\s]*", beginCaptures: {}, end: `[\\s]*(?=;)|(?=(?<!\\\\)
)`, endCaptures: {}, name: "meta.tail.class.cpp", patterns: [{ include: "$self" }] }] }, comments: { patterns: [{ begin: "^(?:\\s+)?+(\\/\\/[!\\/]+)", beginCaptures: { 1: { name: "punctuation.definition.comment.documentation.cpp" } }, end: `(?<=\\n)(?<!\\\\\\n)|(?=(?<!\\\\)
)`, endCaptures: {}, name: "comment.line.double-slash.documentation.cpp", patterns: [{ include: "source.cpp#line_continuation_character" }, { match: '(?<=[\\s*!\\/])[\\\\@](?:callergraph|callgraph|else|endif|f\\$|f\\[|f\\]|hidecallergraph|hidecallgraph|hiderefby|hiderefs|hideinitializer|htmlinclude|n|nosubgrouping|private|privatesection|protected|protectedsection|public|publicsection|pure|showinitializer|showrefby|showrefs|tableofcontents|\\$|\\#|<|>|%|"|\\.|=|::|\\||\\-\\-|\\-\\-\\-)\\b(?:\\{[^}]*\\})?', name: "storage.type.class.doxygen.cpp" }, { captures: { 1: { name: "storage.type.class.doxygen.cpp" }, 2: { name: "markup.italic.doxygen.cpp" } }, match: "((?<=[\\s*!\\/])[\\\\@](?:a|em|e))\\s+(\\S+)" }, { captures: { 1: { name: "storage.type.class.doxygen.cpp" }, 2: { name: "markup.bold.doxygen.cpp" } }, match: "((?<=[\\s*!\\/])[\\\\@]b)\\s+(\\S+)" }, { captures: { 1: { name: "storage.type.class.doxygen.cpp" }, 2: { name: "markup.inline.raw.string.cpp" } }, match: "((?<=[\\s*!\\/])[\\\\@](?:c|p))\\s+(\\S+)" }, { match: "(?<=[\\s*!\\/])[\\\\@](?:a|anchor|b|c|cite|copybrief|copydetail|copydoc|def|dir|dontinclude|e|em|emoji|enum|example|extends|file|idlexcept|implements|include|includedoc|includelineno|latexinclude|link|memberof|namespace|p|package|ref|refitem|related|relates|relatedalso|relatesalso|verbinclude)\\b(?:\\{[^}]*\\})?", name: "storage.type.class.doxygen.cpp" }, { match: "(?<=[\\s*!\\/])[\\\\@](?:addindex|addtogroup|category|class|defgroup|diafile|dotfile|elseif|fn|headerfile|if|ifnot|image|ingroup|interface|line|mainpage|mscfile|name|overload|page|property|protocol|section|skip|skipline|snippet|snippetdoc|snippetlineno|struct|subpage|subsection|subsubsection|typedef|union|until|vhdlflow|weakgroup)\\b(?:\\{[^}]*\\})?", name: "storage.type.class.doxygen.cpp" }, { captures: { 1: { name: "storage.type.class.doxygen.cpp" }, 2: { patterns: [{ match: "in|out", name: "keyword.other.parameter.direction.$0.cpp" }] }, 3: { patterns: [{ match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)", name: "variable.parameter.cpp" }, { match: ",", name: "punctuation.cpp" }] }, 4: { name: "variable.parameter.cpp" }, 5: { name: "punctuation.cpp" }, 6: { name: "variable.parameter.cpp" } }, match: "((?<=[\\s*!\\/])[\\\\@]param)(?:\\s*\\[((?:,?(?:\\s+)?(?:in|out)(?:\\s+)?)+)\\])?(\\s+((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(?:(,)(?:\\s+)?((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)))*)" }, { match: "(?<=[\\s*!\\/])[\\\\@](?:arg|attention|author|authors|brief|bug|copyright|date|deprecated|details|exception|invariant|li|note|par|paragraph|param|post|pre|remark|remarks|result|return|returns|retval|sa|see|short|since|test|throw|throws|todo|tparam|version|warning|xrefitem)\\b(?:\\{[^}]*\\})?", name: "storage.type.class.doxygen.cpp" }, { match: "(?<=[\\s*!\\/])[\\\\@](?:code|cond|docbookonly|dot|htmlonly|internal|latexonly|link|manonly|msc|parblock|rtfonly|secreflist|startuml|verbatim|xmlonly|endcode|endcond|enddocbookonly|enddot|endhtmlonly|endinternal|endlatexonly|endlink|endmanonly|endmsc|endparblock|endrtfonly|endsecreflist|enduml|endverbatim|endxmlonly)\\b(?:\\{[^}]*\\})?", name: "storage.type.class.doxygen.cpp" }, { match: "(?:\\b[A-Z]+:|@[a-z_]+:)", name: "storage.type.class.gtkdoc.cpp" }] }, { captures: { 1: { name: "punctuation.definition.comment.begin.documentation.cpp" }, 2: { patterns: [{ match: '(?<=[\\s*!\\/])[\\\\@](?:callergraph|callgraph|else|endif|f\\$|f\\[|f\\]|hidecallergraph|hidecallgraph|hiderefby|hiderefs|hideinitializer|htmlinclude|n|nosubgrouping|private|privatesection|protected|protectedsection|public|publicsection|pure|showinitializer|showrefby|showrefs|tableofcontents|\\$|\\#|<|>|%|"|\\.|=|::|\\||\\-\\-|\\-\\-\\-)\\b(?:\\{[^}]*\\})?', name: "storage.type.class.doxygen.cpp" }, { captures: { 1: { name: "storage.type.class.doxygen.cpp" }, 2: { name: "markup.italic.doxygen.cpp" } }, match: "((?<=[\\s*!\\/])[\\\\@](?:a|em|e))\\s+(\\S+)" }, { captures: { 1: { name: "storage.type.class.doxygen.cpp" }, 2: { name: "markup.bold.doxygen.cpp" } }, match: "((?<=[\\s*!\\/])[\\\\@]b)\\s+(\\S+)" }, { captures: { 1: { name: "storage.type.class.doxygen.cpp" }, 2: { name: "markup.inline.raw.string.cpp" } }, match: "((?<=[\\s*!\\/])[\\\\@](?:c|p))\\s+(\\S+)" }, { match: "(?<=[\\s*!\\/])[\\\\@](?:a|anchor|b|c|cite|copybrief|copydetail|copydoc|def|dir|dontinclude|e|em|emoji|enum|example|extends|file|idlexcept|implements|include|includedoc|includelineno|latexinclude|link|memberof|namespace|p|package|ref|refitem|related|relates|relatedalso|relatesalso|verbinclude)\\b(?:\\{[^}]*\\})?", name: "storage.type.class.doxygen.cpp" }, { match: "(?<=[\\s*!\\/])[\\\\@](?:addindex|addtogroup|category|class|defgroup|diafile|dotfile|elseif|fn|headerfile|if|ifnot|image|ingroup|interface|line|mainpage|mscfile|name|overload|page|property|protocol|section|skip|skipline|snippet|snippetdoc|snippetlineno|struct|subpage|subsection|subsubsection|typedef|union|until|vhdlflow|weakgroup)\\b(?:\\{[^}]*\\})?", name: "storage.type.class.doxygen.cpp" }, { captures: { 1: { name: "storage.type.class.doxygen.cpp" }, 2: { patterns: [{ match: "in|out", name: "keyword.other.parameter.direction.$0.cpp" }] }, 3: { patterns: [{ match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)", name: "variable.parameter.cpp" }, { match: ",", name: "punctuation.cpp" }] }, 4: { name: "variable.parameter.cpp" }, 5: { name: "punctuation.cpp" }, 6: { name: "variable.parameter.cpp" } }, match: "((?<=[\\s*!\\/])[\\\\@]param)(?:\\s*\\[((?:,?(?:\\s+)?(?:in|out)(?:\\s+)?)+)\\])?(\\s+((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(?:(,)(?:\\s+)?((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)))*)" }, { match: "(?<=[\\s*!\\/])[\\\\@](?:arg|attention|author|authors|brief|bug|copyright|date|deprecated|details|exception|invariant|li|note|par|paragraph|param|post|pre|remark|remarks|result|return|returns|retval|sa|see|short|since|test|throw|throws|todo|tparam|version|warning|xrefitem)\\b(?:\\{[^}]*\\})?", name: "storage.type.class.doxygen.cpp" }, { match: "(?<=[\\s*!\\/])[\\\\@](?:code|cond|docbookonly|dot|htmlonly|internal|latexonly|link|manonly|msc|parblock|rtfonly|secreflist|startuml|verbatim|xmlonly|endcode|endcond|enddocbookonly|enddot|endhtmlonly|endinternal|endlatexonly|endlink|endmanonly|endmsc|endparblock|endrtfonly|endsecreflist|enduml|endverbatim|endxmlonly)\\b(?:\\{[^}]*\\})?", name: "storage.type.class.doxygen.cpp" }, { match: "(?:\\b[A-Z]+:|@[a-z_]+:)", name: "storage.type.class.gtkdoc.cpp" }] }, 3: { name: "punctuation.definition.comment.end.documentation.cpp" } }, match: "(\\/\\*[!*]+(?=\\s))(.+)([!*]*\\*\\/)", name: "comment.block.documentation.cpp" }, { begin: "(?:\\s+)?+\\/\\*[!*]+(?:(?:\\n|$)|(?=\\s))", beginCaptures: { 0: { name: "punctuation.definition.comment.begin.documentation.cpp" } }, end: `[!*]*\\*\\/|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.definition.comment.end.documentation.cpp" } }, name: "comment.block.documentation.cpp", patterns: [{ match: '(?<=[\\s*!\\/])[\\\\@](?:callergraph|callgraph|else|endif|f\\$|f\\[|f\\]|hidecallergraph|hidecallgraph|hiderefby|hiderefs|hideinitializer|htmlinclude|n|nosubgrouping|private|privatesection|protected|protectedsection|public|publicsection|pure|showinitializer|showrefby|showrefs|tableofcontents|\\$|\\#|<|>|%|"|\\.|=|::|\\||\\-\\-|\\-\\-\\-)\\b(?:\\{[^}]*\\})?', name: "storage.type.class.doxygen.cpp" }, { captures: { 1: { name: "storage.type.class.doxygen.cpp" }, 2: { name: "markup.italic.doxygen.cpp" } }, match: "((?<=[\\s*!\\/])[\\\\@](?:a|em|e))\\s+(\\S+)" }, { captures: { 1: { name: "storage.type.class.doxygen.cpp" }, 2: { name: "markup.bold.doxygen.cpp" } }, match: "((?<=[\\s*!\\/])[\\\\@]b)\\s+(\\S+)" }, { captures: { 1: { name: "storage.type.class.doxygen.cpp" }, 2: { name: "markup.inline.raw.string.cpp" } }, match: "((?<=[\\s*!\\/])[\\\\@](?:c|p))\\s+(\\S+)" }, { match: "(?<=[\\s*!\\/])[\\\\@](?:a|anchor|b|c|cite|copybrief|copydetail|copydoc|def|dir|dontinclude|e|em|emoji|enum|example|extends|file|idlexcept|implements|include|includedoc|includelineno|latexinclude|link|memberof|namespace|p|package|ref|refitem|related|relates|relatedalso|relatesalso|verbinclude)\\b(?:\\{[^}]*\\})?", name: "storage.type.class.doxygen.cpp" }, { match: "(?<=[\\s*!\\/])[\\\\@](?:addindex|addtogroup|category|class|defgroup|diafile|dotfile|elseif|fn|headerfile|if|ifnot|image|ingroup|interface|line|mainpage|mscfile|name|overload|page|property|protocol|section|skip|skipline|snippet|snippetdoc|snippetlineno|struct|subpage|subsection|subsubsection|typedef|union|until|vhdlflow|weakgroup)\\b(?:\\{[^}]*\\})?", name: "storage.type.class.doxygen.cpp" }, { captures: { 1: { name: "storage.type.class.doxygen.cpp" }, 2: { patterns: [{ match: "in|out", name: "keyword.other.parameter.direction.$0.cpp" }] }, 3: { patterns: [{ match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)", name: "variable.parameter.cpp" }, { match: ",", name: "punctuation.cpp" }] }, 4: { name: "variable.parameter.cpp" }, 5: { name: "punctuation.cpp" }, 6: { name: "variable.parameter.cpp" } }, match: "((?<=[\\s*!\\/])[\\\\@]param)(?:\\s*\\[((?:,?(?:\\s+)?(?:in|out)(?:\\s+)?)+)\\])?(\\s+((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(?:(,)(?:\\s+)?((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)))*)" }, { match: "(?<=[\\s*!\\/])[\\\\@](?:arg|attention|author|authors|brief|bug|copyright|date|deprecated|details|exception|invariant|li|note|par|paragraph|param|post|pre|remark|remarks|result|return|returns|retval|sa|see|short|since|test|throw|throws|todo|tparam|version|warning|xrefitem)\\b(?:\\{[^}]*\\})?", name: "storage.type.class.doxygen.cpp" }, { match: "(?<=[\\s*!\\/])[\\\\@](?:code|cond|docbookonly|dot|htmlonly|internal|latexonly|link|manonly|msc|parblock|rtfonly|secreflist|startuml|verbatim|xmlonly|endcode|endcond|enddocbookonly|enddot|endhtmlonly|endinternal|endlatexonly|endlink|endmanonly|endmsc|endparblock|endrtfonly|endsecreflist|enduml|endverbatim|endxmlonly)\\b(?:\\{[^}]*\\})?", name: "storage.type.class.doxygen.cpp" }, { match: "(?:\\b[A-Z]+:|@[a-z_]+:)", name: "storage.type.class.gtkdoc.cpp" }] }, { include: "source.cpp#emacs_file_banner" }, { include: "#block_comment" }, { include: "#line_comment" }, { include: "source.cpp#invalid_comment_end" }] }, constructor_inline: { begin: "^((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?:(?:(?:constexpr)|(?:consteval)|(?:explicit)|(?:mutable)|(?:virtual)|(?:inline)|(?:friend))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*)((?:__cdecl|__clrcall|__stdcall|__fastcall|__thiscall|__vectorcall)?)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)(?=\\())", beginCaptures: { 0: { name: "meta.head.function.definition.special.constructor.cpp" }, 1: { patterns: [{ include: "source.cpp#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 5: { patterns: [{ include: "source.cpp#functional_specifiers_pre_parameters" }] }, 6: { patterns: [{ include: "source.cpp#inline_comment" }] }, 7: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 8: { name: "comment.block.cpp" }, 9: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 10: { name: "storage.type.modifier.calling-convention.cpp" }, 11: { patterns: [{ include: "source.cpp#inline_comment" }] }, 12: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 13: { name: "comment.block.cpp" }, 14: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 15: { name: "entity.name.function.constructor.cpp entity.name.function.definition.special.constructor.cpp" } }, end: `(?:(?<=\\}|%>|\\?\\?>)|(?=[;>\\[\\]=]))|(?=(?<!\\\\)
)`, endCaptures: {}, name: "meta.function.definition.special.constructor.cpp", patterns: [{ begin: "\\G ?", beginCaptures: {}, end: `(?:\\{|<%|\\?\\?<|(?=;))|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.block.begin.bracket.curly.function.definition.special.constructor.cpp" } }, name: "meta.head.function.definition.special.constructor.cpp", patterns: [{ include: "#ever_present_context" }, { captures: { 1: { name: "keyword.operator.assignment.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "keyword.other.default.function.cpp keyword.other.default.constructor.cpp" }, 7: { name: "keyword.other.delete.function.cpp keyword.other.delete.constructor.cpp" } }, match: "(\\=)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(default)|(delete))" }, { include: "source.cpp#functional_specifiers_pre_parameters" }, { begin: ":", beginCaptures: { 0: { name: "punctuation.separator.initializers.cpp" } }, end: `(?=\\{)|(?=(?<!\\\\)
)`, endCaptures: {}, patterns: [{ begin: `((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(((?<!<)<(?!<)(?:(?:(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/)))|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<3>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?(\\()`, beginCaptures: { 1: { name: "entity.name.function.call.initializer.cpp" }, 2: { name: "meta.template.call.cpp", patterns: [{ include: "#template_call_range" }] }, 3: {}, 4: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 5: { name: "comment.block.cpp" }, 6: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 7: { name: "punctuation.section.arguments.begin.bracket.round.function.call.initializer.cpp" } }, contentName: "meta.parameter.initialization", end: `\\)|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.function.call.initializer.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, { begin: "((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(\\{)", beginCaptures: { 1: { name: "entity.name.function.call.initializer.cpp" }, 2: { name: "punctuation.section.arguments.begin.bracket.round.function.call.initializer.cpp" } }, contentName: "meta.parameter.initialization", end: `\\}|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.function.call.initializer.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, { match: ",", name: "punctuation.separator.delimiter.comma.cpp" }, { include: "#comments" }] }, { begin: "\\(", beginCaptures: { 0: { name: "punctuation.section.parameters.begin.bracket.round.special.constructor.cpp" } }, contentName: "meta.function.definition.parameters.special.constructor", end: `\\)|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.parameters.end.bracket.round.special.constructor.cpp" } }, patterns: [{ include: "#function_parameter_context" }, { include: "#evaluation_context" }] }, { include: "source.cpp#qualifiers_and_specifiers_post_parameters" }, { include: "$self" }] }, { begin: "(?<=\\{|<%|\\?\\?<)", beginCaptures: {}, end: `\\}|%>|\\?\\?>|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.block.end.bracket.curly.function.definition.special.constructor.cpp" } }, name: "meta.body.function.definition.special.constructor.cpp", patterns: [{ include: "#function_body_context" }] }, { begin: "(?<=\\}|%>|\\?\\?>)[\\s]*", beginCaptures: {}, end: `[\\s]*(?=;)|(?=(?<!\\\\)
)`, endCaptures: {}, name: "meta.tail.function.definition.special.constructor.cpp", patterns: [{ include: "$self" }] }] }, constructor_root: { begin: `\\s*+((?:__cdecl|__clrcall|__stdcall|__fastcall|__thiscall|__vectorcall)?)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<8>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*+)(((?>(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))::((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:\\10)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?=\\())`, beginCaptures: { 0: { name: "meta.head.function.definition.special.constructor.cpp" }, 1: { name: "storage.type.modifier.calling-convention.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.constructor.cpp" }, { match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)", name: "entity.name.scope-resolution.constructor.cpp" }, { include: "#template_call_range" }] }, 7: { patterns: [{ include: "#template_call_range" }] }, 8: {}, 9: { patterns: [{ match: "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?=:)", name: "entity.name.type.constructor.cpp" }, { match: "(?<=:)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*", name: "entity.name.function.definition.special.constructor.cpp" }, { match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.constructor.cpp" }] }, 10: {}, 11: { patterns: [{ include: "source.cpp#inline_comment" }] }, 12: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 13: { name: "comment.block.cpp" }, 14: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 15: { patterns: [{ include: "source.cpp#inline_comment" }] }, 16: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 17: { name: "comment.block.cpp" }, 18: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 19: { patterns: [{ include: "source.cpp#inline_comment" }] }, 20: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 21: { name: "comment.block.cpp" }, 22: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, end: `(?:(?<=\\}|%>|\\?\\?>)|(?=[;>\\[\\]=]))|(?=(?<!\\\\)
)`, endCaptures: {}, name: "meta.function.definition.special.constructor.cpp", patterns: [{ begin: "\\G ?", beginCaptures: {}, end: `(?:\\{|<%|\\?\\?<|(?=;))|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.block.begin.bracket.curly.function.definition.special.constructor.cpp" } }, name: "meta.head.function.definition.special.constructor.cpp", patterns: [{ include: "#ever_present_context" }, { captures: { 1: { name: "keyword.operator.assignment.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "keyword.other.default.function.cpp keyword.other.default.constructor.cpp" }, 7: { name: "keyword.other.delete.function.cpp keyword.other.delete.constructor.cpp" } }, match: "(\\=)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(default)|(delete))" }, { include: "source.cpp#functional_specifiers_pre_parameters" }, { begin: ":", beginCaptures: { 0: { name: "punctuation.separator.initializers.cpp" } }, end: `(?=\\{)|(?=(?<!\\\\)
)`, endCaptures: {}, patterns: [{ begin: `((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(((?<!<)<(?!<)(?:(?:(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/)))|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<3>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?(\\()`, beginCaptures: { 1: { name: "entity.name.function.call.initializer.cpp" }, 2: { name: "meta.template.call.cpp", patterns: [{ include: "#template_call_range" }] }, 3: {}, 4: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 5: { name: "comment.block.cpp" }, 6: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 7: { name: "punctuation.section.arguments.begin.bracket.round.function.call.initializer.cpp" } }, contentName: "meta.parameter.initialization", end: `\\)|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.function.call.initializer.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, { begin: "((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(\\{)", beginCaptures: { 1: { name: "entity.name.function.call.initializer.cpp" }, 2: { name: "punctuation.section.arguments.begin.bracket.round.function.call.initializer.cpp" } }, contentName: "meta.parameter.initialization", end: `\\}|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.function.call.initializer.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, { match: ",", name: "punctuation.separator.delimiter.comma.cpp" }, { include: "#comments" }] }, { begin: "\\(", beginCaptures: { 0: { name: "punctuation.section.parameters.begin.bracket.round.special.constructor.cpp" } }, contentName: "meta.function.definition.parameters.special.constructor", end: `\\)|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.parameters.end.bracket.round.special.constructor.cpp" } }, patterns: [{ include: "#function_parameter_context" }, { include: "#evaluation_context" }] }, { include: "source.cpp#qualifiers_and_specifiers_post_parameters" }, { include: "$self" }] }, { begin: "(?<=\\{|<%|\\?\\?<)", beginCaptures: {}, end: `\\}|%>|\\?\\?>|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.block.end.bracket.curly.function.definition.special.constructor.cpp" } }, name: "meta.body.function.definition.special.constructor.cpp", patterns: [{ include: "#function_body_context" }] }, { begin: "(?<=\\}|%>|\\?\\?>)[\\s]*", beginCaptures: {}, end: `[\\s]*(?=;)|(?=(?<!\\\\)
)`, endCaptures: {}, name: "meta.tail.function.definition.special.constructor.cpp", patterns: [{ include: "$self" }] }] }, cpp_attributes: { begin: "\\[\\[", beginCaptures: { 0: { name: "punctuation.section.attribute.begin.cpp" } }, end: `\\]\\]|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.attribute.end.cpp" } }, name: "support.other.attribute.cpp", patterns: [{ include: "#attributes_context" }, { begin: "\\(", beginCaptures: {}, end: `\\)|(?=(?<!\\\\)
)`, endCaptures: {}, patterns: [{ include: "#attributes_context" }, { include: "#string_context" }, { include: "#ever_present_context" }] }, { captures: { 1: { name: "keyword.other.using.directive.cpp" }, 2: { name: "entity.name.namespace.cpp" } }, match: "(using)\\s+((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))" }, { match: ",", name: "punctuation.separator.attribute.cpp" }, { match: ":", name: "punctuation.accessor.attribute.cpp" }, { match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)(?=::)", name: "entity.name.namespace.cpp" }, { match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)", name: "entity.other.attribute.$0.cpp" }, { include: "source.cpp#number_literal" }, { include: "#ever_present_context" }] }, curly_initializer: { begin: `(\\s*+((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))?((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(?:(?:(?:unsigned)|(?:signed)|(?:short)|(?:long))|(?:(?:struct)|(?:class)|(?:union)|(?:enum)))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<18>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*+)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?(?!(?:(?:transaction_safe_dynamic)|(?:__has_cpp_attribute)|(?:reinterpret_cast)|(?:transaction_safe)|(?:atomic_noexcept)|(?:atomic_commit)|(?:__has_include)|(?:atomic_cancel)|(?:synchronized)|(?:thread_local)|(?:dynamic_cast)|(?:static_cast)|(?:const_cast)|(?:constexpr)|(?:co_return)|(?:constinit)|(?:namespace)|(?:protected)|(?:consteval)|(?:constexpr)|(?:constexpr)|(?:co_return)|(?:consteval)|(?:co_await)|(?:continue)|(?:template)|(?:reflexpr)|(?:volatile)|(?:register)|(?:co_await)|(?:co_yield)|(?:restrict)|(?:noexcept)|(?:volatile)|(?:override)|(?:explicit)|(?:decltype)|(?:operator)|(?:noexcept)|(?:noexcept)|(?:typename)|(?:requires)|(?:co_yield)|(?:nullptr)|(?:alignof)|(?:alignas)|(?:default)|(?:mutable)|(?:virtual)|(?:mutable)|(?:private)|(?:include)|(?:warning)|(?:_Pragma)|(?:defined)|(?:typedef)|(?:__asm__)|(?:concept)|(?:define)|(?:module)|(?:sizeof)|(?:switch)|(?:delete)|(?:pragma)|(?:and_eq)|(?:inline)|(?:xor_eq)|(?:typeid)|(?:import)|(?:extern)|(?:public)|(?:bitand)|(?:static)|(?:export)|(?:return)|(?:friend)|(?:ifndef)|(?:not_eq)|(?:false)|(?:final)|(?:break)|(?:const)|(?:catch)|(?:endif)|(?:ifdef)|(?:undef)|(?:error)|(?:audit)|(?:while)|(?:using)|(?:axiom)|(?:or_eq)|(?:compl)|(?:throw)|(?:bitor)|(?:const)|(?:line)|(?:case)|(?:else)|(?:this)|(?:true)|(?:goto)|(?:else)|(?:NULL)|(?:elif)|(?:new)|(?:asm)|(?:xor)|(?:and)|(?:try)|(?:not)|(?:for)|(?:do)|(?:if)|(?:or)|(?:if))\\b)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\b((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<18>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)?(?![\\w<:.]))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\{)`, beginCaptures: { 1: { name: "meta.qualified_type.cpp", patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.cpp" }, { match: "(?<!\\w)(?:(?:struct)|(?:class)|(?:union)|(?:enum))(?!\\w)", name: "storage.type.$0.cpp" }, { include: "#attributes_context" }, { include: "#storage_types" }, { include: "source.cpp#number_literal" }, { include: "#string_context" }, { include: "source.cpp#comma" }, { include: "source.cpp#scope_resolution_inner_generated" }, { begin: "<", beginCaptures: { 0: { name: "punctuation.section.angle-brackets.begin.template.call.cpp" } }, end: `>|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.angle-brackets.end.template.call.cpp" } }, name: "meta.template.call.cpp", patterns: [{ include: "#template_call_context" }] }, { match: "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*", name: "entity.name.type.cpp" }] }, 2: { patterns: [{ include: "#attributes_context" }, { include: "source.cpp#number_literal" }] }, 3: { patterns: [{ include: "source.cpp#inline_comment" }] }, 4: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 5: { name: "comment.block.cpp" }, 6: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 7: { patterns: [{ include: "source.cpp#inline_comment" }] }, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 11: { patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.type.cpp" }, { match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)", name: "entity.name.scope-resolution.type.cpp" }, { include: "#template_call_range" }] }, 12: { patterns: [{ include: "#template_call_range" }] }, 13: {}, 14: { patterns: [{ include: "source.cpp#inline_comment" }] }, 15: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 16: { name: "comment.block.cpp" }, 17: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 18: {}, 19: { patterns: [{ include: "source.cpp#inline_comment" }] }, 20: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 21: { name: "comment.block.cpp" }, 22: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 23: { name: "punctuation.section.arguments.begin.bracket.curly.initializer.cpp" } }, end: `\\}|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.curly.initializer.cpp" } }, name: "meta.initialization.cpp", patterns: [{ include: "#evaluation_context" }, { include: "source.cpp#comma" }] }, decltype: { begin: "((?<!\\w)decltype(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\()", beginCaptures: { 1: { name: "keyword.operator.functionlike.cpp keyword.other.decltype.cpp storage.type.decltype.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "punctuation.section.arguments.begin.bracket.round.decltype.cpp" } }, contentName: "meta.arguments.decltype", end: `\\)|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.decltype.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, decltype_specifier: { begin: "((?<!\\w)decltype(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\()", beginCaptures: { 1: { name: "keyword.operator.functionlike.cpp keyword.other.decltype.cpp storage.type.decltype.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "punctuation.section.arguments.begin.bracket.round.decltype.cpp" } }, contentName: "meta.arguments.decltype", end: `\\)|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.decltype.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, default_statement: { begin: "((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)default(?!\\w))", beginCaptures: { 1: { patterns: [{ include: "source.cpp#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 5: { name: "keyword.control.default.cpp" } }, end: `:|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.separator.colon.case.default.cpp" } }, name: "meta.conditional.case.cpp", patterns: [{ include: "#evaluation_context" }] }, destructor_inline: { begin: "^((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?:__cdecl|__clrcall|__stdcall|__fastcall|__thiscall|__vectorcall)?)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?:(?:(?:constexpr)|(?:consteval)|(?:explicit)|(?:mutable)|(?:virtual)|(?:inline)|(?:friend))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*)(~(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)(?=\\())", beginCaptures: { 0: { name: "meta.head.function.definition.special.member.destructor.cpp" }, 1: { patterns: [{ include: "source.cpp#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 5: { name: "storage.type.modifier.calling-convention.cpp" }, 6: { patterns: [{ include: "source.cpp#inline_comment" }] }, 7: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 8: { name: "comment.block.cpp" }, 9: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 10: { patterns: [{ include: "source.cpp#functional_specifiers_pre_parameters" }] }, 11: { patterns: [{ include: "source.cpp#inline_comment" }] }, 12: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 13: { name: "comment.block.cpp" }, 14: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 15: { name: "entity.name.function.destructor.cpp entity.name.function.definition.special.member.destructor.cpp" } }, end: `(?:(?<=\\}|%>|\\?\\?>)|(?=[;>\\[\\]=]))|(?=(?<!\\\\)
)`, endCaptures: {}, name: "meta.function.definition.special.member.destructor.cpp", patterns: [{ begin: "\\G ?", beginCaptures: {}, end: `(?:\\{|<%|\\?\\?<|(?=;))|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.block.begin.bracket.curly.function.definition.special.member.destructor.cpp" } }, name: "meta.head.function.definition.special.member.destructor.cpp", patterns: [{ include: "#ever_present_context" }, { captures: { 1: { name: "keyword.operator.assignment.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "keyword.other.default.function.cpp keyword.other.default.constructor.cpp keyword.other.default.destructor.cpp" }, 7: { name: "keyword.other.delete.function.cpp keyword.other.delete.constructor.cpp keyword.other.delete.destructor.cpp" } }, match: "(\\=)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(default)|(delete))" }, { begin: "\\(", beginCaptures: { 0: { name: "punctuation.section.parameters.begin.bracket.round.special.member.destructor.cpp" } }, contentName: "meta.function.definition.parameters.special.member.destructor", end: `\\)|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.parameters.end.bracket.round.special.member.destructor.cpp" } }, patterns: [] }, { include: "source.cpp#qualifiers_and_specifiers_post_parameters" }, { include: "$self" }] }, { begin: "(?<=\\{|<%|\\?\\?<)", beginCaptures: {}, end: `\\}|%>|\\?\\?>|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.block.end.bracket.curly.function.definition.special.member.destructor.cpp" } }, name: "meta.body.function.definition.special.member.destructor.cpp", patterns: [{ include: "#function_body_context" }] }, { begin: "(?<=\\}|%>|\\?\\?>)[\\s]*", beginCaptures: {}, end: `[\\s]*(?=;)|(?=(?<!\\\\)
)`, endCaptures: {}, name: "meta.tail.function.definition.special.member.destructor.cpp", patterns: [{ include: "$self" }] }] }, destructor_root: { begin: `((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?:__cdecl|__clrcall|__stdcall|__fastcall|__thiscall|__vectorcall)?)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<12>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*+)(((?>(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))::((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))~(?:\\14)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?=\\())`, beginCaptures: { 0: { name: "meta.head.function.definition.special.member.destructor.cpp" }, 1: { patterns: [{ include: "source.cpp#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 5: { name: "storage.type.modifier.calling-convention.cpp" }, 6: { patterns: [{ include: "source.cpp#inline_comment" }] }, 7: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 8: { name: "comment.block.cpp" }, 9: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 10: { patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.destructor.cpp" }, { match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)", name: "entity.name.scope-resolution.destructor.cpp" }, { include: "#template_call_range" }] }, 11: { patterns: [{ include: "#template_call_range" }] }, 12: {}, 13: { patterns: [{ match: "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?=:)", name: "entity.name.type.destructor.cpp" }, { match: "(?<=:)~(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*", name: "entity.name.function.definition.special.member.destructor.cpp" }, { match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.destructor.cpp" }] }, 14: {}, 15: { patterns: [{ include: "source.cpp#inline_comment" }] }, 16: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 17: { name: "comment.block.cpp" }, 18: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 19: { patterns: [{ include: "source.cpp#inline_comment" }] }, 20: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 21: { name: "comment.block.cpp" }, 22: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 23: { patterns: [{ include: "source.cpp#inline_comment" }] }, 24: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 25: { name: "comment.block.cpp" }, 26: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, end: `(?:(?<=\\}|%>|\\?\\?>)|(?=[;>\\[\\]=]))|(?=(?<!\\\\)
)`, endCaptures: {}, name: "meta.function.definition.special.member.destructor.cpp", patterns: [{ begin: "\\G ?", beginCaptures: {}, end: `(?:\\{|<%|\\?\\?<|(?=;))|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.block.begin.bracket.curly.function.definition.special.member.destructor.cpp" } }, name: "meta.head.function.definition.special.member.destructor.cpp", patterns: [{ include: "#ever_present_context" }, { captures: { 1: { name: "keyword.operator.assignment.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "keyword.other.default.function.cpp keyword.other.default.constructor.cpp keyword.other.default.destructor.cpp" }, 7: { name: "keyword.other.delete.function.cpp keyword.other.delete.constructor.cpp keyword.other.delete.destructor.cpp" } }, match: "(\\=)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(default)|(delete))" }, { begin: "\\(", beginCaptures: { 0: { name: "punctuation.section.parameters.begin.bracket.round.special.member.destructor.cpp" } }, contentName: "meta.function.definition.parameters.special.member.destructor", end: `\\)|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.parameters.end.bracket.round.special.member.destructor.cpp" } }, patterns: [] }, { include: "source.cpp#qualifiers_and_specifiers_post_parameters" }, { include: "$self" }] }, { begin: "(?<=\\{|<%|\\?\\?<)", beginCaptures: {}, end: `\\}|%>|\\?\\?>|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.block.end.bracket.curly.function.definition.special.member.destructor.cpp" } }, name: "meta.body.function.definition.special.member.destructor.cpp", patterns: [{ include: "#function_body_context" }] }, { begin: "(?<=\\}|%>|\\?\\?>)[\\s]*", beginCaptures: {}, end: `[\\s]*(?=;)|(?=(?<!\\\\)
)`, endCaptures: {}, name: "meta.tail.function.definition.special.member.destructor.cpp", patterns: [{ include: "$self" }] }] }, diagnostic: { begin: "(^((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(#)(?:\\s+)?((?:error|warning)))\\b(?:\\s+)?", beginCaptures: { 1: { name: "keyword.control.directive.diagnostic.$7.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "punctuation.definition.directive.cpp" }, 7: {} }, end: `(?<!\\\\)(?:(?=\\n)|(?<=^\\n|[^\\\\]\\n)(?=$))|(?=(?<!\\\\)
)`, endCaptures: {}, name: "meta.preprocessor.diagnostic.$reference(directive).cpp", patterns: [{ include: "#comments" }, { begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.cpp" } }, end: `(?:(")|(?<!\\\\)(?:(?=\\n)|(?<=^\\n|[^\\\\]\\n)(?=$)))|(?=(?<!\\\\)
)`, endCaptures: { 1: { name: "punctuation.definition.string.end.cpp" } }, name: "string.quoted.double.cpp", patterns: [{ include: "source.cpp#line_continuation_character" }] }, { begin: "'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.cpp" } }, end: `(?:(')|(?<!\\\\)(?:(?=\\n)|(?<=^\\n|[^\\\\]\\n)(?=$)))|(?=(?<!\\\\)
)`, endCaptures: { 1: { name: "punctuation.definition.string.end.cpp" } }, name: "string.quoted.single.cpp", patterns: [{ include: "source.cpp#line_continuation_character" }] }, { begin: `[^'"]`, beginCaptures: {}, end: `(?<!\\\\)(?:(?=\\n)|(?<=^\\n|[^\\\\]\\n)(?=$))|(?=(?<!\\\\)
)`, endCaptures: {}, name: "string.unquoted.cpp", patterns: [{ include: "source.cpp#line_continuation_character" }, { include: "#comments" }] }] }, enum_block: { begin: `((?<!\\w)enum(?!\\w))(?:\\s+(class|struct))?(?:(?:\\s+|((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\))))|(?={))(?:\\s+)?((?:(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))?)(?:(?:\\s+)?(:)(?:\\s+)?(?:((::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<12>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*\\s*+)((?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))\\s*+(((?<!<)<(?!<)(?:(?:(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/)))|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<12>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?(::))?(?:\\s+)?((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)))?`, beginCaptures: { 0: { name: "meta.head.enum.cpp" }, 1: { name: "storage.type.enum.cpp" }, 2: { name: "storage.type.enum.enum-key.$2.cpp" }, 3: { patterns: [{ include: "#attributes_context" }, { include: "source.cpp#number_literal" }] }, 4: { name: "entity.name.type.enum.cpp" }, 5: { name: "punctuation.separator.colon.type-specifier.cpp" }, 6: { patterns: [{ include: "source.cpp#scope_resolution_inner_generated" }] }, 7: { name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.cpp" }, 8: { patterns: [{ include: "#template_call_range" }] }, 9: {}, 10: { name: "entity.name.scope-resolution.cpp" }, 11: { name: "meta.template.call.cpp", patterns: [{ include: "#template_call_range" }] }, 12: {}, 13: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 14: { name: "comment.block.cpp" }, 15: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 16: { name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.cpp" }, 17: { name: "storage.type.integral.$17.cpp" } }, end: `(?:(?:(?<=\\}|%>|\\?\\?>)(?:\\s+)?(;)|(;))|(?=[;>\\[\\]=]))|(?=(?<!\\\\)
)`, endCaptures: { 1: { name: "punctuation.terminator.statement.cpp" }, 2: { name: "punctuation.terminator.statement.cpp" } }, name: "meta.block.enum.cpp", patterns: [{ begin: "\\G ?", beginCaptures: {}, end: `(?:\\{|<%|\\?\\?<|(?=;))|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.block.begin.bracket.curly.enum.cpp" } }, name: "meta.head.enum.cpp", patterns: [{ include: "$self" }] }, { begin: "(?<=\\{|<%|\\?\\?<)", beginCaptures: {}, end: `\\}|%>|\\?\\?>|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.block.end.bracket.curly.enum.cpp" } }, name: "meta.body.enum.cpp", patterns: [{ include: "#ever_present_context" }, { include: "source.cpp#enumerator_list" }, { include: "#comments" }, { include: "source.cpp#comma" }, { include: "source.cpp#semicolon" }] }, { begin: "(?<=\\}|%>|\\?\\?>)[\\s]*", beginCaptures: {}, end: `[\\s]*(?=;)|(?=(?<!\\\\)
)`, endCaptures: {}, name: "meta.tail.enum.cpp", patterns: [{ include: "$self" }] }] }, evaluation_context: { patterns: [{ include: "#ever_present_context" }, { include: "#string_context" }, { include: "source.cpp#number_literal" }, { include: "#method_access" }, { include: "source.cpp#member_access" }, { include: "source.cpp#predefined_macros" }, { include: "#operators" }, { include: "source.cpp#memory_operators" }, { include: "source.cpp#wordlike_operators" }, { include: "source.cpp#type_casting_operators" }, { include: "source.cpp#control_flow_keywords" }, { include: "source.cpp#exception_keywords" }, { include: "source.cpp#the_this_keyword" }, { include: "source.cpp#language_constants" }, { include: "#builtin_storage_type_initilizer" }, { include: "source.cpp#qualifiers_and_specifiers_post_parameters" }, { include: "source.cpp#functional_specifiers_pre_parameters" }, { include: "#storage_types" }, { include: "#lambdas" }, { include: "#attributes_context" }, { include: "#parentheses" }, { include: "#function_call" }, { include: "source.cpp#scope_resolution_inner_generated" }, { include: "#square_brackets" }, { include: "source.cpp#semicolon" }, { include: "source.cpp#comma" }] }, ever_present_context: { patterns: [{ include: "source.cpp#pragma_mark" }, { include: "#pragma" }, { include: "source.cpp#include" }, { include: "#line" }, { include: "#diagnostic" }, { include: "source.cpp#undef" }, { include: "#preprocessor_conditional_range" }, { include: "source.cpp#single_line_macro" }, { include: "#macro" }, { include: "source.cpp#preprocessor_conditional_standalone" }, { include: "source.cpp#macro_argument" }, { include: "#comments" }, { include: "source.cpp#line_continuation_character" }] }, extern_block: { begin: '((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(extern)(?=\\s*\\")', beginCaptures: { 0: { name: "meta.head.extern.cpp" }, 1: { patterns: [{ include: "source.cpp#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 5: { name: "storage.type.extern.cpp" } }, end: `(?:(?:(?<=\\}|%>|\\?\\?>)(?:\\s+)?(;)|(;))|(?=[;>\\[\\]=]))|(?=(?<!\\\\)
)`, endCaptures: { 1: { name: "punctuation.terminator.statement.cpp" }, 2: { name: "punctuation.terminator.statement.cpp" } }, name: "meta.block.extern.cpp", patterns: [{ begin: "\\G ?", beginCaptures: {}, end: `(?:\\{|<%|\\?\\?<|(?=;))|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.block.begin.bracket.curly.extern.cpp" } }, name: "meta.head.extern.cpp", patterns: [{ include: "$self" }] }, { begin: "(?<=\\{|<%|\\?\\?<)", beginCaptures: {}, end: `\\}|%>|\\?\\?>|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.block.end.bracket.curly.extern.cpp" } }, name: "meta.body.extern.cpp", patterns: [{ include: "$self" }] }, { begin: "(?<=\\}|%>|\\?\\?>)[\\s]*", beginCaptures: {}, end: `[\\s]*(?=;)|(?=(?<!\\\\)
)`, endCaptures: {}, name: "meta.tail.extern.cpp", patterns: [{ include: "$self" }] }, { include: "$self" }] }, function_body_context: { patterns: [{ include: "#ever_present_context" }, { include: "#using_namespace" }, { include: "source.cpp#type_alias" }, { include: "source.cpp#using_name" }, { include: "source.cpp#namespace_alias" }, { include: "#typedef_class" }, { include: "#typedef_struct" }, { include: "#typedef_union" }, { include: "source.cpp#misc_keywords" }, { include: "source.cpp#standard_declares" }, { include: "#class_block" }, { include: "#struct_block" }, { include: "#union_block" }, { include: "#enum_block" }, { include: "source.cpp#access_control_keywords" }, { include: "#block" }, { include: "#static_assert" }, { include: "#assembly" }, { include: "#function_pointer" }, { include: "#switch_statement" }, { include: "source.cpp#goto_statement" }, { include: "#evaluation_context" }, { include: "source.cpp#label" }] }, function_call: { begin: `((::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<11>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*\\s*+)((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)\\b(?<!\\Wreinterpret_cast|^reinterpret_cast|\\Watomic_noexcept|^atomic_noexcept|\\Wuint_least16_t|^uint_least16_t|\\Wuint_least32_t|^uint_least32_t|\\Wuint_least64_t|^uint_least64_t|\\Watomic_cancel|^atomic_cancel|\\Watomic_commit|^atomic_commit|\\Wuint_least8_t|^uint_least8_t|\\Wuint_fast16_t|^uint_fast16_t|\\Wuint_fast32_t|^uint_fast32_t|\\Wint_least16_t|^int_least16_t|\\Wint_least32_t|^int_least32_t|\\Wint_least64_t|^int_least64_t|\\Wuint_fast64_t|^uint_fast64_t|\\Wthread_local|^thread_local|\\Wint_fast16_t|^int_fast16_t|\\Wint_fast32_t|^int_fast32_t|\\Wint_fast64_t|^int_fast64_t|\\Wsynchronized|^synchronized|\\Wuint_fast8_t|^uint_fast8_t|\\Wdynamic_cast|^dynamic_cast|\\Wint_least8_t|^int_least8_t|\\Wint_fast8_t|^int_fast8_t|\\Wstatic_cast|^static_cast|\\Wsuseconds_t|^suseconds_t|\\Wconst_cast|^const_cast|\\Wuseconds_t|^useconds_t|\\Wconstinit|^constinit|\\Wco_return|^co_return|\\Wuintmax_t|^uintmax_t|\\Wuintmax_t|^uintmax_t|\\Wuintmax_t|^uintmax_t|\\Wconstexpr|^constexpr|\\Wconsteval|^consteval|\\Wconstexpr|^constexpr|\\Wconstexpr|^constexpr|\\Wconsteval|^consteval|\\Wprotected|^protected|\\Wnamespace|^namespace|\\Wblksize_t|^blksize_t|\\Wco_return|^co_return|\\Win_addr_t|^in_addr_t|\\Win_port_t|^in_port_t|\\Wuintptr_t|^uintptr_t|\\Wtemplate|^template|\\Wnoexcept|^noexcept|\\Wnoexcept|^noexcept|\\Wcontinue|^continue|\\Wco_await|^co_await|\\Wco_yield|^co_yield|\\Wunsigned|^unsigned|\\Wu_quad_t|^u_quad_t|\\Wblkcnt_t|^blkcnt_t|\\Wuint16_t|^uint16_t|\\Wuint32_t|^uint32_t|\\Wuint64_t|^uint64_t|\\Wintptr_t|^intptr_t|\\Wintmax_t|^intmax_t|\\Wintmax_t|^intmax_t|\\Wvolatile|^volatile|\\Wregister|^register|\\Wrestrict|^restrict|\\Wexplicit|^explicit|\\Wvolatile|^volatile|\\Wnoexcept|^noexcept|\\Woperator|^operator|\\Wdecltype|^decltype|\\Wtypename|^typename|\\Wrequires|^requires|\\Wco_await|^co_await|\\Wco_yield|^co_yield|\\Wreflexpr|^reflexpr|\\Wswblk_t|^swblk_t|\\Wvirtual|^virtual|\\Wssize_t|^ssize_t|\\Wconcept|^concept|\\Wmutable|^mutable|\\Wfixpt_t|^fixpt_t|\\Wint16_t|^int16_t|\\Wint32_t|^int32_t|\\Wint64_t|^int64_t|\\Wuint8_t|^uint8_t|\\Wtypedef|^typedef|\\Wdaddr_t|^daddr_t|\\Wcaddr_t|^caddr_t|\\Wqaddr_t|^qaddr_t|\\Wdefault|^default|\\Wnlink_t|^nlink_t|\\Wsegsz_t|^segsz_t|\\Wu_short|^u_short|\\Wwchar_t|^wchar_t|\\Wprivate|^private|\\W__asm__|^__asm__|\\Walignas|^alignas|\\Walignof|^alignof|\\Wmutable|^mutable|\\Wnullptr|^nullptr|\\Wclock_t|^clock_t|\\Wmode_t|^mode_t|\\Wpublic|^public|\\Wsize_t|^size_t|\\Wdouble|^double|\\Wquad_t|^quad_t|\\Wstatic|^static|\\Wtime_t|^time_t|\\Wmodule|^module|\\Wimport|^import|\\Wexport|^export|\\Wextern|^extern|\\Winline|^inline|\\Wxor_eq|^xor_eq|\\Wand_eq|^and_eq|\\Wreturn|^return|\\Wfriend|^friend|\\Wnot_eq|^not_eq|\\Wsigned|^signed|\\Wstruct|^struct|\\Wint8_t|^int8_t|\\Wushort|^ushort|\\Wswitch|^switch|\\Wu_long|^u_long|\\Wtypeid|^typeid|\\Wu_char|^u_char|\\Wsizeof|^sizeof|\\Wbitand|^bitand|\\Wdelete|^delete|\\Wino_t|^ino_t|\\Wkey_t|^key_t|\\Wpid_t|^pid_t|\\Woff_t|^off_t|\\Wuid_t|^uid_t|\\Wshort|^short|\\Wbreak|^break|\\Wcatch|^catch|\\Wcompl|^compl|\\Wwhile|^while|\\Wfalse|^false|\\Wclass|^class|\\Wunion|^union|\\Wconst|^const|\\Wor_eq|^or_eq|\\Wconst|^const|\\Wthrow|^throw|\\Wbitor|^bitor|\\Wu_int|^u_int|\\Wusing|^using|\\Wdiv_t|^div_t|\\Wdev_t|^dev_t|\\Wgid_t|^gid_t|\\Wfloat|^float|\\Wlong|^long|\\Wgoto|^goto|\\Wuint|^uint|\\Wid_t|^id_t|\\Wcase|^case|\\Wauto|^auto|\\Wvoid|^void|\\Wenum|^enum|\\Wtrue|^true|\\Wchar|^char|\\Wid_t|^id_t|\\WNULL|^NULL|\\Wthis|^this|\\Wbool|^bool|\\Welse|^else|\\Wfor|^for|\\Wnew|^new|\\Wnot|^not|\\Wxor|^xor|\\Wand|^and|\\Wasm|^asm|\\Wint|^int|\\Wtry|^try|\\Wdo|^do|\\Wif|^if|\\Wor|^or)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(((?<!<)<(?!<)(?:(?:(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/)))|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<11>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?(\\()`, beginCaptures: { 1: { patterns: [{ include: "source.cpp#scope_resolution_function_call_inner_generated" }] }, 2: { name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.function.call.cpp" }, 3: { patterns: [{ include: "#template_call_range" }] }, 4: {}, 5: { name: "entity.name.function.call.cpp" }, 6: { patterns: [{ include: "source.cpp#inline_comment" }] }, 7: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 8: { name: "comment.block.cpp" }, 9: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 10: { name: "meta.template.call.cpp", patterns: [{ include: "#template_call_range" }] }, 11: {}, 12: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 13: { name: "comment.block.cpp" }, 14: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 15: { name: "punctuation.section.arguments.begin.bracket.round.function.call.cpp" } }, end: `\\)|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.function.call.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, function_definition: { begin: `(?:(?:^|\\G|(?<=;|\\}))|(?<=>|\\*\\/))\\s*+(?:((?<!\\w)template(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))?((?:((?<!\\w)(?:(?:(?:constexpr)|(?:consteval)|(?:explicit)|(?:mutable)|(?:virtual)|(?:inline)|(?:friend))|(?:(?:thread_local)|(?:volatile)|(?:register)|(?:restrict)|(?:static)|(?:extern)|(?:const)))(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*)(\\s*+((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))?((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(?:(?:(?:unsigned)|(?:signed)|(?:short)|(?:long))|(?:(?:struct)|(?:class)|(?:union)|(?:enum)))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<52>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*+)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?(?!(?:(?:transaction_safe_dynamic)|(?:__has_cpp_attribute)|(?:reinterpret_cast)|(?:transaction_safe)|(?:atomic_noexcept)|(?:atomic_commit)|(?:__has_include)|(?:atomic_cancel)|(?:synchronized)|(?:thread_local)|(?:dynamic_cast)|(?:static_cast)|(?:const_cast)|(?:constexpr)|(?:co_return)|(?:constinit)|(?:namespace)|(?:protected)|(?:consteval)|(?:constexpr)|(?:constexpr)|(?:co_return)|(?:consteval)|(?:co_await)|(?:continue)|(?:template)|(?:reflexpr)|(?:volatile)|(?:register)|(?:co_await)|(?:co_yield)|(?:restrict)|(?:noexcept)|(?:volatile)|(?:override)|(?:explicit)|(?:decltype)|(?:operator)|(?:noexcept)|(?:noexcept)|(?:typename)|(?:requires)|(?:co_yield)|(?:nullptr)|(?:alignof)|(?:alignas)|(?:default)|(?:mutable)|(?:virtual)|(?:mutable)|(?:private)|(?:include)|(?:warning)|(?:_Pragma)|(?:defined)|(?:typedef)|(?:__asm__)|(?:concept)|(?:define)|(?:module)|(?:sizeof)|(?:switch)|(?:delete)|(?:pragma)|(?:and_eq)|(?:inline)|(?:xor_eq)|(?:typeid)|(?:import)|(?:extern)|(?:public)|(?:bitand)|(?:static)|(?:export)|(?:return)|(?:friend)|(?:ifndef)|(?:not_eq)|(?:false)|(?:final)|(?:break)|(?:const)|(?:catch)|(?:endif)|(?:ifdef)|(?:undef)|(?:error)|(?:audit)|(?:while)|(?:using)|(?:axiom)|(?:or_eq)|(?:compl)|(?:throw)|(?:bitor)|(?:const)|(?:line)|(?:case)|(?:else)|(?:this)|(?:true)|(?:goto)|(?:else)|(?:NULL)|(?:elif)|(?:new)|(?:asm)|(?:xor)|(?:and)|(?:try)|(?:not)|(?:for)|(?:do)|(?:if)|(?:or)|(?:if))\\b)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\b((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<52>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)?(?![\\w<:.]))(((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))?(?:(?:&|\\*)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:&|\\*))?((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?:__cdecl|__clrcall|__stdcall|__fastcall|__thiscall|__vectorcall)?)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<52>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*\\s*+)((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)\\b(?<!\\Wreinterpret_cast|^reinterpret_cast|\\Watomic_noexcept|^atomic_noexcept|\\Wuint_least16_t|^uint_least16_t|\\Wuint_least32_t|^uint_least32_t|\\Wuint_least64_t|^uint_least64_t|\\Watomic_cancel|^atomic_cancel|\\Watomic_commit|^atomic_commit|\\Wuint_least8_t|^uint_least8_t|\\Wuint_fast16_t|^uint_fast16_t|\\Wuint_fast32_t|^uint_fast32_t|\\Wint_least16_t|^int_least16_t|\\Wint_least32_t|^int_least32_t|\\Wint_least64_t|^int_least64_t|\\Wuint_fast64_t|^uint_fast64_t|\\Wthread_local|^thread_local|\\Wint_fast16_t|^int_fast16_t|\\Wint_fast32_t|^int_fast32_t|\\Wint_fast64_t|^int_fast64_t|\\Wsynchronized|^synchronized|\\Wuint_fast8_t|^uint_fast8_t|\\Wdynamic_cast|^dynamic_cast|\\Wint_least8_t|^int_least8_t|\\Wint_fast8_t|^int_fast8_t|\\Wstatic_cast|^static_cast|\\Wsuseconds_t|^suseconds_t|\\Wconst_cast|^const_cast|\\Wuseconds_t|^useconds_t|\\Wconstinit|^constinit|\\Wco_return|^co_return|\\Wuintmax_t|^uintmax_t|\\Wuintmax_t|^uintmax_t|\\Wuintmax_t|^uintmax_t|\\Wconstexpr|^constexpr|\\Wconsteval|^consteval|\\Wconstexpr|^constexpr|\\Wconstexpr|^constexpr|\\Wconsteval|^consteval|\\Wprotected|^protected|\\Wnamespace|^namespace|\\Wblksize_t|^blksize_t|\\Wco_return|^co_return|\\Win_addr_t|^in_addr_t|\\Win_port_t|^in_port_t|\\Wuintptr_t|^uintptr_t|\\Wtemplate|^template|\\Wnoexcept|^noexcept|\\Wnoexcept|^noexcept|\\Wcontinue|^continue|\\Wco_await|^co_await|\\Wco_yield|^co_yield|\\Wunsigned|^unsigned|\\Wu_quad_t|^u_quad_t|\\Wblkcnt_t|^blkcnt_t|\\Wuint16_t|^uint16_t|\\Wuint32_t|^uint32_t|\\Wuint64_t|^uint64_t|\\Wintptr_t|^intptr_t|\\Wintmax_t|^intmax_t|\\Wintmax_t|^intmax_t|\\Wvolatile|^volatile|\\Wregister|^register|\\Wrestrict|^restrict|\\Wexplicit|^explicit|\\Wvolatile|^volatile|\\Wnoexcept|^noexcept|\\Woperator|^operator|\\Wdecltype|^decltype|\\Wtypename|^typename|\\Wrequires|^requires|\\Wco_await|^co_await|\\Wco_yield|^co_yield|\\Wreflexpr|^reflexpr|\\Wswblk_t|^swblk_t|\\Wvirtual|^virtual|\\Wssize_t|^ssize_t|\\Wconcept|^concept|\\Wmutable|^mutable|\\Wfixpt_t|^fixpt_t|\\Wint16_t|^int16_t|\\Wint32_t|^int32_t|\\Wint64_t|^int64_t|\\Wuint8_t|^uint8_t|\\Wtypedef|^typedef|\\Wdaddr_t|^daddr_t|\\Wcaddr_t|^caddr_t|\\Wqaddr_t|^qaddr_t|\\Wdefault|^default|\\Wnlink_t|^nlink_t|\\Wsegsz_t|^segsz_t|\\Wu_short|^u_short|\\Wwchar_t|^wchar_t|\\Wprivate|^private|\\W__asm__|^__asm__|\\Walignas|^alignas|\\Walignof|^alignof|\\Wmutable|^mutable|\\Wnullptr|^nullptr|\\Wclock_t|^clock_t|\\Wmode_t|^mode_t|\\Wpublic|^public|\\Wsize_t|^size_t|\\Wdouble|^double|\\Wquad_t|^quad_t|\\Wstatic|^static|\\Wtime_t|^time_t|\\Wmodule|^module|\\Wimport|^import|\\Wexport|^export|\\Wextern|^extern|\\Winline|^inline|\\Wxor_eq|^xor_eq|\\Wand_eq|^and_eq|\\Wreturn|^return|\\Wfriend|^friend|\\Wnot_eq|^not_eq|\\Wsigned|^signed|\\Wstruct|^struct|\\Wint8_t|^int8_t|\\Wushort|^ushort|\\Wswitch|^switch|\\Wu_long|^u_long|\\Wtypeid|^typeid|\\Wu_char|^u_char|\\Wsizeof|^sizeof|\\Wbitand|^bitand|\\Wdelete|^delete|\\Wino_t|^ino_t|\\Wkey_t|^key_t|\\Wpid_t|^pid_t|\\Woff_t|^off_t|\\Wuid_t|^uid_t|\\Wshort|^short|\\Wbreak|^break|\\Wcatch|^catch|\\Wcompl|^compl|\\Wwhile|^while|\\Wfalse|^false|\\Wclass|^class|\\Wunion|^union|\\Wconst|^const|\\Wor_eq|^or_eq|\\Wconst|^const|\\Wthrow|^throw|\\Wbitor|^bitor|\\Wu_int|^u_int|\\Wusing|^using|\\Wdiv_t|^div_t|\\Wdev_t|^dev_t|\\Wgid_t|^gid_t|\\Wfloat|^float|\\Wlong|^long|\\Wgoto|^goto|\\Wuint|^uint|\\Wid_t|^id_t|\\Wcase|^case|\\Wauto|^auto|\\Wvoid|^void|\\Wenum|^enum|\\Wtrue|^true|\\Wchar|^char|\\Wid_t|^id_t|\\WNULL|^NULL|\\Wthis|^this|\\Wbool|^bool|\\Welse|^else|\\Wfor|^for|\\Wnew|^new|\\Wnot|^not|\\Wxor|^xor|\\Wand|^and|\\Wasm|^asm|\\Wint|^int|\\Wtry|^try|\\Wdo|^do|\\Wif|^if|\\Wor|^or)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?=\\()`, beginCaptures: { 0: { name: "meta.head.function.definition.cpp" }, 1: { name: "storage.type.template.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { patterns: [{ include: "#attributes_context" }, { include: "source.cpp#number_literal" }] }, 7: { patterns: [{ captures: { 1: { name: "storage.modifier.$1.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "((?<!\\w)(?:(?:(?:constexpr)|(?:consteval)|(?:explicit)|(?:mutable)|(?:virtual)|(?:inline)|(?:friend))|(?:(?:thread_local)|(?:volatile)|(?:register)|(?:restrict)|(?:static)|(?:extern)|(?:const)))(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))" }] }, 8: { name: "storage.modifier.$8.cpp" }, 9: { patterns: [{ include: "source.cpp#inline_comment" }] }, 10: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 11: { name: "comment.block.cpp" }, 12: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 13: { name: "meta.qualified_type.cpp", patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.cpp" }, { match: "(?<!\\w)(?:(?:struct)|(?:class)|(?:union)|(?:enum))(?!\\w)", name: "storage.type.$0.cpp" }, { include: "#attributes_context" }, { include: "#storage_types" }, { include: "source.cpp#number_literal" }, { include: "#string_context" }, { include: "source.cpp#comma" }, { include: "source.cpp#scope_resolution_inner_generated" }, { begin: "<", beginCaptures: { 0: { name: "punctuation.section.angle-brackets.begin.template.call.cpp" } }, end: `>|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.angle-brackets.end.template.call.cpp" } }, name: "meta.template.call.cpp", patterns: [{ include: "#template_call_context" }] }, { match: "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*", name: "entity.name.type.cpp" }] }, 14: { patterns: [{ include: "#attributes_context" }, { include: "source.cpp#number_literal" }] }, 15: { patterns: [{ include: "source.cpp#inline_comment" }] }, 16: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 17: { name: "comment.block.cpp" }, 18: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 19: { patterns: [{ include: "source.cpp#inline_comment" }] }, 20: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 21: { name: "comment.block.cpp" }, 22: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 23: { patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.type.cpp" }, { match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)", name: "entity.name.scope-resolution.type.cpp" }, { include: "#template_call_range" }] }, 24: { patterns: [{ include: "#template_call_range" }] }, 25: {}, 26: { patterns: [{ include: "source.cpp#inline_comment" }] }, 27: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 28: { name: "comment.block.cpp" }, 29: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 30: {}, 31: { patterns: [{ match: "\\*", name: "storage.modifier.pointer.cpp" }, { captures: { 1: { patterns: [{ include: "source.cpp#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "(?:\\&((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))){2,}\\&", name: "invalid.illegal.reference-type.cpp" }, { match: "\\&", name: "storage.modifier.reference.cpp" }] }, 32: { patterns: [{ include: "source.cpp#inline_comment" }] }, 33: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 34: { name: "comment.block.cpp" }, 35: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 36: { patterns: [{ include: "source.cpp#inline_comment" }] }, 37: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 38: { name: "comment.block.cpp" }, 39: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 40: { patterns: [{ include: "source.cpp#inline_comment" }] }, 41: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 42: { name: "comment.block.cpp" }, 43: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 44: { name: "storage.type.modifier.calling-convention.cpp" }, 45: { patterns: [{ include: "source.cpp#inline_comment" }] }, 46: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 47: { name: "comment.block.cpp" }, 48: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 49: { patterns: [{ include: "source.cpp#scope_resolution_function_definition_inner_generated" }] }, 50: { name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.function.definition.cpp" }, 51: { patterns: [{ include: "#template_call_range" }] }, 52: {}, 53: { name: "entity.name.function.definition.cpp" }, 54: { patterns: [{ include: "source.cpp#inline_comment" }] }, 55: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 56: { name: "comment.block.cpp" }, 57: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, end: `(?:(?<=\\}|%>|\\?\\?>)|(?=[;>\\[\\]=]))|(?=(?<!\\\\)
)`, endCaptures: {}, name: "meta.function.definition.cpp", patterns: [{ begin: "\\G ?", beginCaptures: {}, end: `(?:\\{|<%|\\?\\?<|(?=;))|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.block.begin.bracket.curly.function.definition.cpp" } }, name: "meta.head.function.definition.cpp", patterns: [{ include: "#ever_present_context" }, { begin: "\\(", beginCaptures: { 0: { name: "punctuation.section.parameters.begin.bracket.round.cpp" } }, contentName: "meta.function.definition.parameters", end: `\\)|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.parameters.end.bracket.round.cpp" } }, patterns: [{ include: "#ever_present_context" }, { include: "#parameter_or_maybe_value" }, { include: "source.cpp#comma" }, { include: "#evaluation_context" }] }, { captures: { 1: { name: "punctuation.definition.function.return-type.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "meta.qualified_type.cpp", patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.cpp" }, { match: "(?<!\\w)(?:(?:struct)|(?:class)|(?:union)|(?:enum))(?!\\w)", name: "storage.type.$0.cpp" }, { include: "#attributes_context" }, { include: "#storage_types" }, { include: "source.cpp#number_literal" }, { include: "#string_context" }, { include: "source.cpp#comma" }, { include: "source.cpp#scope_resolution_inner_generated" }, { begin: "<", beginCaptures: { 0: { name: "punctuation.section.angle-brackets.begin.template.call.cpp" } }, end: `>|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.angle-brackets.end.template.call.cpp" } }, name: "meta.template.call.cpp", patterns: [{ include: "#template_call_context" }] }, { match: "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*", name: "entity.name.type.cpp" }] }, 7: { patterns: [{ include: "#attributes_context" }, { include: "source.cpp#number_literal" }] }, 8: { patterns: [{ include: "source.cpp#inline_comment" }] }, 9: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 10: { name: "comment.block.cpp" }, 11: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 12: { patterns: [{ include: "source.cpp#inline_comment" }] }, 13: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 14: { name: "comment.block.cpp" }, 15: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 16: { patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.type.cpp" }, { match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)", name: "entity.name.scope-resolution.type.cpp" }, { include: "#template_call_range" }] }, 17: { patterns: [{ include: "#template_call_range" }] }, 18: {}, 19: { patterns: [{ include: "source.cpp#inline_comment" }] }, 20: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 21: { name: "comment.block.cpp" }, 22: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 23: {} }, match: `(?<=^|\\))(?:\\s+)?(->)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\s*+((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))?((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(?:(?:(?:unsigned)|(?:signed)|(?:short)|(?:long))|(?:(?:struct)|(?:class)|(?:union)|(?:enum)))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<23>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*+)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?(?!(?:(?:transaction_safe_dynamic)|(?:__has_cpp_attribute)|(?:reinterpret_cast)|(?:transaction_safe)|(?:atomic_noexcept)|(?:atomic_commit)|(?:__has_include)|(?:atomic_cancel)|(?:synchronized)|(?:thread_local)|(?:dynamic_cast)|(?:static_cast)|(?:const_cast)|(?:constexpr)|(?:co_return)|(?:constinit)|(?:namespace)|(?:protected)|(?:consteval)|(?:constexpr)|(?:constexpr)|(?:co_return)|(?:consteval)|(?:co_await)|(?:continue)|(?:template)|(?:reflexpr)|(?:volatile)|(?:register)|(?:co_await)|(?:co_yield)|(?:restrict)|(?:noexcept)|(?:volatile)|(?:override)|(?:explicit)|(?:decltype)|(?:operator)|(?:noexcept)|(?:noexcept)|(?:typename)|(?:requires)|(?:co_yield)|(?:nullptr)|(?:alignof)|(?:alignas)|(?:default)|(?:mutable)|(?:virtual)|(?:mutable)|(?:private)|(?:include)|(?:warning)|(?:_Pragma)|(?:defined)|(?:typedef)|(?:__asm__)|(?:concept)|(?:define)|(?:module)|(?:sizeof)|(?:switch)|(?:delete)|(?:pragma)|(?:and_eq)|(?:inline)|(?:xor_eq)|(?:typeid)|(?:import)|(?:extern)|(?:public)|(?:bitand)|(?:static)|(?:export)|(?:return)|(?:friend)|(?:ifndef)|(?:not_eq)|(?:false)|(?:final)|(?:break)|(?:const)|(?:catch)|(?:endif)|(?:ifdef)|(?:undef)|(?:error)|(?:audit)|(?:while)|(?:using)|(?:axiom)|(?:or_eq)|(?:compl)|(?:throw)|(?:bitor)|(?:const)|(?:line)|(?:case)|(?:else)|(?:this)|(?:true)|(?:goto)|(?:else)|(?:NULL)|(?:elif)|(?:new)|(?:asm)|(?:xor)|(?:and)|(?:try)|(?:not)|(?:for)|(?:do)|(?:if)|(?:or)|(?:if))\\b)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\b((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<23>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)?(?![\\w<:.]))` }, { include: "$self" }] }, { begin: "(?<=\\{|<%|\\?\\?<)", beginCaptures: {}, end: `\\}|%>|\\?\\?>|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.block.end.bracket.curly.function.definition.cpp" } }, name: "meta.body.function.definition.cpp", patterns: [{ include: "#function_body_context" }] }, { begin: "(?<=\\}|%>|\\?\\?>)[\\s]*", beginCaptures: {}, end: `[\\s]*(?=;)|(?=(?<!\\\\)
)`, endCaptures: {}, name: "meta.tail.function.definition.cpp", patterns: [{ include: "$self" }] }] }, function_parameter_context: { patterns: [{ include: "#ever_present_context" }, { include: "#parameter" }, { include: "source.cpp#comma" }] }, function_pointer: { begin: `(\\s*+((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))?((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(?:(?:(?:unsigned)|(?:signed)|(?:short)|(?:long))|(?:(?:struct)|(?:class)|(?:union)|(?:enum)))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<18>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*+)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?(?!(?:(?:transaction_safe_dynamic)|(?:__has_cpp_attribute)|(?:reinterpret_cast)|(?:transaction_safe)|(?:atomic_noexcept)|(?:atomic_commit)|(?:__has_include)|(?:atomic_cancel)|(?:synchronized)|(?:thread_local)|(?:dynamic_cast)|(?:static_cast)|(?:const_cast)|(?:constexpr)|(?:co_return)|(?:constinit)|(?:namespace)|(?:protected)|(?:consteval)|(?:constexpr)|(?:constexpr)|(?:co_return)|(?:consteval)|(?:co_await)|(?:continue)|(?:template)|(?:reflexpr)|(?:volatile)|(?:register)|(?:co_await)|(?:co_yield)|(?:restrict)|(?:noexcept)|(?:volatile)|(?:override)|(?:explicit)|(?:decltype)|(?:operator)|(?:noexcept)|(?:noexcept)|(?:typename)|(?:requires)|(?:co_yield)|(?:nullptr)|(?:alignof)|(?:alignas)|(?:default)|(?:mutable)|(?:virtual)|(?:mutable)|(?:private)|(?:include)|(?:warning)|(?:_Pragma)|(?:defined)|(?:typedef)|(?:__asm__)|(?:concept)|(?:define)|(?:module)|(?:sizeof)|(?:switch)|(?:delete)|(?:pragma)|(?:and_eq)|(?:inline)|(?:xor_eq)|(?:typeid)|(?:import)|(?:extern)|(?:public)|(?:bitand)|(?:static)|(?:export)|(?:return)|(?:friend)|(?:ifndef)|(?:not_eq)|(?:false)|(?:final)|(?:break)|(?:const)|(?:catch)|(?:endif)|(?:ifdef)|(?:undef)|(?:error)|(?:audit)|(?:while)|(?:using)|(?:axiom)|(?:or_eq)|(?:compl)|(?:throw)|(?:bitor)|(?:const)|(?:line)|(?:case)|(?:else)|(?:this)|(?:true)|(?:goto)|(?:else)|(?:NULL)|(?:elif)|(?:new)|(?:asm)|(?:xor)|(?:and)|(?:try)|(?:not)|(?:for)|(?:do)|(?:if)|(?:or)|(?:if))\\b)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\b((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<18>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)?(?![\\w<:.]))(((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))?(?:(?:&|\\*)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:&|\\*))?((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\()(\\*)(?:\\s+)?((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)?)(?:\\s+)?(?:(\\[)(\\w*)(\\])(?:\\s+)?)*(\\))(?:\\s+)?(\\()`, beginCaptures: { 1: { name: "meta.qualified_type.cpp", patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.cpp" }, { match: "(?<!\\w)(?:(?:struct)|(?:class)|(?:union)|(?:enum))(?!\\w)", name: "storage.type.$0.cpp" }, { include: "#attributes_context" }, { include: "#storage_types" }, { include: "source.cpp#number_literal" }, { include: "#string_context" }, { include: "source.cpp#comma" }, { include: "source.cpp#scope_resolution_inner_generated" }, { begin: "<", beginCaptures: { 0: { name: "punctuation.section.angle-brackets.begin.template.call.cpp" } }, end: `>|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.angle-brackets.end.template.call.cpp" } }, name: "meta.template.call.cpp", patterns: [{ include: "#template_call_context" }] }, { match: "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*", name: "entity.name.type.cpp" }] }, 2: { patterns: [{ include: "#attributes_context" }, { include: "source.cpp#number_literal" }] }, 3: { patterns: [{ include: "source.cpp#inline_comment" }] }, 4: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 5: { name: "comment.block.cpp" }, 6: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 7: { patterns: [{ include: "source.cpp#inline_comment" }] }, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 11: { patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.type.cpp" }, { match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)", name: "entity.name.scope-resolution.type.cpp" }, { include: "#template_call_range" }] }, 12: { patterns: [{ include: "#template_call_range" }] }, 13: {}, 14: { patterns: [{ include: "source.cpp#inline_comment" }] }, 15: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 16: { name: "comment.block.cpp" }, 17: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 18: {}, 19: { patterns: [{ match: "\\*", name: "storage.modifier.pointer.cpp" }, { captures: { 1: { patterns: [{ include: "source.cpp#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "(?:\\&((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))){2,}\\&", name: "invalid.illegal.reference-type.cpp" }, { match: "\\&", name: "storage.modifier.reference.cpp" }] }, 20: { patterns: [{ include: "source.cpp#inline_comment" }] }, 21: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 22: { name: "comment.block.cpp" }, 23: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 24: { patterns: [{ include: "source.cpp#inline_comment" }] }, 25: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 26: { name: "comment.block.cpp" }, 27: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 28: { patterns: [{ include: "source.cpp#inline_comment" }] }, 29: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 30: { name: "comment.block.cpp" }, 31: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 32: { name: "punctuation.section.parens.begin.bracket.round.function.pointer.cpp" }, 33: { name: "punctuation.definition.function.pointer.dereference.cpp" }, 34: { name: "variable.other.definition.pointer.function.cpp" }, 35: { name: "punctuation.definition.begin.bracket.square.cpp" }, 36: { patterns: [{ include: "#evaluation_context" }] }, 37: { name: "punctuation.definition.end.bracket.square.cpp" }, 38: { name: "punctuation.section.parens.end.bracket.round.function.pointer.cpp" }, 39: { name: "punctuation.section.parameters.begin.bracket.round.function.pointer.cpp" } }, end: `(\\))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?=[{=,);>]|\\n)(?!\\()|(?=(?<!\\\\)
)`, endCaptures: { 1: { name: "punctuation.section.parameters.end.bracket.round.function.pointer.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, patterns: [{ include: "#function_parameter_context" }] }, function_pointer_parameter: { begin: `(\\s*+((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))?((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(?:(?:(?:unsigned)|(?:signed)|(?:short)|(?:long))|(?:(?:struct)|(?:class)|(?:union)|(?:enum)))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<18>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*+)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?(?!(?:(?:transaction_safe_dynamic)|(?:__has_cpp_attribute)|(?:reinterpret_cast)|(?:transaction_safe)|(?:atomic_noexcept)|(?:atomic_commit)|(?:__has_include)|(?:atomic_cancel)|(?:synchronized)|(?:thread_local)|(?:dynamic_cast)|(?:static_cast)|(?:const_cast)|(?:constexpr)|(?:co_return)|(?:constinit)|(?:namespace)|(?:protected)|(?:consteval)|(?:constexpr)|(?:constexpr)|(?:co_return)|(?:consteval)|(?:co_await)|(?:continue)|(?:template)|(?:reflexpr)|(?:volatile)|(?:register)|(?:co_await)|(?:co_yield)|(?:restrict)|(?:noexcept)|(?:volatile)|(?:override)|(?:explicit)|(?:decltype)|(?:operator)|(?:noexcept)|(?:noexcept)|(?:typename)|(?:requires)|(?:co_yield)|(?:nullptr)|(?:alignof)|(?:alignas)|(?:default)|(?:mutable)|(?:virtual)|(?:mutable)|(?:private)|(?:include)|(?:warning)|(?:_Pragma)|(?:defined)|(?:typedef)|(?:__asm__)|(?:concept)|(?:define)|(?:module)|(?:sizeof)|(?:switch)|(?:delete)|(?:pragma)|(?:and_eq)|(?:inline)|(?:xor_eq)|(?:typeid)|(?:import)|(?:extern)|(?:public)|(?:bitand)|(?:static)|(?:export)|(?:return)|(?:friend)|(?:ifndef)|(?:not_eq)|(?:false)|(?:final)|(?:break)|(?:const)|(?:catch)|(?:endif)|(?:ifdef)|(?:undef)|(?:error)|(?:audit)|(?:while)|(?:using)|(?:axiom)|(?:or_eq)|(?:compl)|(?:throw)|(?:bitor)|(?:const)|(?:line)|(?:case)|(?:else)|(?:this)|(?:true)|(?:goto)|(?:else)|(?:NULL)|(?:elif)|(?:new)|(?:asm)|(?:xor)|(?:and)|(?:try)|(?:not)|(?:for)|(?:do)|(?:if)|(?:or)|(?:if))\\b)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\b((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<18>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)?(?![\\w<:.]))(((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))?(?:(?:&|\\*)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:&|\\*))?((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\()(\\*)(?:\\s+)?((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)?)(?:\\s+)?(?:(\\[)(\\w*)(\\])(?:\\s+)?)*(\\))(?:\\s+)?(\\()`, beginCaptures: { 1: { name: "meta.qualified_type.cpp", patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.cpp" }, { match: "(?<!\\w)(?:(?:struct)|(?:class)|(?:union)|(?:enum))(?!\\w)", name: "storage.type.$0.cpp" }, { include: "#attributes_context" }, { include: "#storage_types" }, { include: "source.cpp#number_literal" }, { include: "#string_context" }, { include: "source.cpp#comma" }, { include: "source.cpp#scope_resolution_inner_generated" }, { begin: "<", beginCaptures: { 0: { name: "punctuation.section.angle-brackets.begin.template.call.cpp" } }, end: `>|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.angle-brackets.end.template.call.cpp" } }, name: "meta.template.call.cpp", patterns: [{ include: "#template_call_context" }] }, { match: "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*", name: "entity.name.type.cpp" }] }, 2: { patterns: [{ include: "#attributes_context" }, { include: "source.cpp#number_literal" }] }, 3: { patterns: [{ include: "source.cpp#inline_comment" }] }, 4: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 5: { name: "comment.block.cpp" }, 6: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 7: { patterns: [{ include: "source.cpp#inline_comment" }] }, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 11: { patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.type.cpp" }, { match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)", name: "entity.name.scope-resolution.type.cpp" }, { include: "#template_call_range" }] }, 12: { patterns: [{ include: "#template_call_range" }] }, 13: {}, 14: { patterns: [{ include: "source.cpp#inline_comment" }] }, 15: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 16: { name: "comment.block.cpp" }, 17: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 18: {}, 19: { patterns: [{ match: "\\*", name: "storage.modifier.pointer.cpp" }, { captures: { 1: { patterns: [{ include: "source.cpp#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "(?:\\&((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))){2,}\\&", name: "invalid.illegal.reference-type.cpp" }, { match: "\\&", name: "storage.modifier.reference.cpp" }] }, 20: { patterns: [{ include: "source.cpp#inline_comment" }] }, 21: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 22: { name: "comment.block.cpp" }, 23: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 24: { patterns: [{ include: "source.cpp#inline_comment" }] }, 25: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 26: { name: "comment.block.cpp" }, 27: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 28: { patterns: [{ include: "source.cpp#inline_comment" }] }, 29: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 30: { name: "comment.block.cpp" }, 31: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 32: { name: "punctuation.section.parens.begin.bracket.round.function.pointer.cpp" }, 33: { name: "punctuation.definition.function.pointer.dereference.cpp" }, 34: { name: "variable.parameter.pointer.function.cpp" }, 35: { name: "punctuation.definition.begin.bracket.square.cpp" }, 36: { patterns: [{ include: "#evaluation_context" }] }, 37: { name: "punctuation.definition.end.bracket.square.cpp" }, 38: { name: "punctuation.section.parens.end.bracket.round.function.pointer.cpp" }, 39: { name: "punctuation.section.parameters.begin.bracket.round.function.pointer.cpp" } }, end: `(\\))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?=[{=,);>]|\\n)(?!\\()|(?=(?<!\\\\)
)`, endCaptures: { 1: { name: "punctuation.section.parameters.end.bracket.round.function.pointer.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, patterns: [{ include: "#function_parameter_context" }] }, gcc_attributes: { begin: "__attribute(?:__)?\\s*\\(\\s*\\(", beginCaptures: { 0: { name: "punctuation.section.attribute.begin.cpp" } }, end: `\\)\\s*\\)|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.attribute.end.cpp" } }, name: "support.other.attribute.cpp", patterns: [{ include: "#attributes_context" }, { begin: "\\(", beginCaptures: {}, end: `\\)|(?=(?<!\\\\)
)`, endCaptures: {}, patterns: [{ include: "#attributes_context" }, { include: "#string_context" }, { include: "#ever_present_context" }] }, { captures: { 1: { name: "keyword.other.using.directive.cpp" }, 2: { name: "entity.name.namespace.cpp" } }, match: "(using)\\s+((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))" }, { match: ",", name: "punctuation.separator.attribute.cpp" }, { match: ":", name: "punctuation.accessor.attribute.cpp" }, { match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)(?=::)", name: "entity.name.namespace.cpp" }, { match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)", name: "entity.other.attribute.$0.cpp" }, { include: "source.cpp#number_literal" }, { include: "#ever_present_context" }] }, inheritance_context: { patterns: [{ include: "#ever_present_context" }, { match: ",", name: "punctuation.separator.delimiter.comma.inheritance.cpp" }, { match: "(?<!\\w)(?:(?:protected)|(?:private)|(?:public))(?!\\w)", name: "storage.type.modifier.access.$0.cpp" }, { match: "(?<!\\w)virtual(?!\\w)", name: "storage.type.modifier.virtual.cpp" }, { captures: { 1: { name: "meta.qualified_type.cpp", patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.cpp" }, { match: "(?<!\\w)(?:(?:struct)|(?:class)|(?:union)|(?:enum))(?!\\w)", name: "storage.type.$0.cpp" }, { include: "#attributes_context" }, { include: "#storage_types" }, { include: "source.cpp#number_literal" }, { include: "#string_context" }, { include: "source.cpp#comma" }, { include: "source.cpp#scope_resolution_inner_generated" }, { begin: "<", beginCaptures: { 0: { name: "punctuation.section.angle-brackets.begin.template.call.cpp" } }, end: `>|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.angle-brackets.end.template.call.cpp" } }, name: "meta.template.call.cpp", patterns: [{ include: "#template_call_context" }] }, { match: "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*", name: "entity.name.type.cpp" }] }, 2: { patterns: [{ include: "#attributes_context" }, { include: "source.cpp#number_literal" }] }, 3: { patterns: [{ include: "source.cpp#inline_comment" }] }, 4: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 5: { patterns: [{ include: "source.cpp#inline_comment" }] }, 6: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 7: { patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.type.cpp" }, { match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)", name: "entity.name.scope-resolution.type.cpp" }, { include: "#template_call_range" }] }, 8: { patterns: [{ include: "#template_call_range" }] }, 9: {}, 10: { patterns: [{ include: "source.cpp#inline_comment" }] }, 11: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 12: {} }, match: `(?<=protected|virtual|private|public|,|:)(?:\\s+)?(?!(?:(?:(?:protected)|(?:private)|(?:public))|virtual))(\\s*+((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))?((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(?:(?:(?:unsigned)|(?:signed)|(?:short)|(?:long))|(?:(?:struct)|(?:class)|(?:union)|(?:enum)))((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<12>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*+)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?(?!(?:(?:transaction_safe_dynamic)|(?:__has_cpp_attribute)|(?:reinterpret_cast)|(?:transaction_safe)|(?:atomic_noexcept)|(?:atomic_commit)|(?:__has_include)|(?:atomic_cancel)|(?:synchronized)|(?:thread_local)|(?:dynamic_cast)|(?:static_cast)|(?:const_cast)|(?:constexpr)|(?:co_return)|(?:constinit)|(?:namespace)|(?:protected)|(?:consteval)|(?:constexpr)|(?:constexpr)|(?:co_return)|(?:consteval)|(?:co_await)|(?:continue)|(?:template)|(?:reflexpr)|(?:volatile)|(?:register)|(?:co_await)|(?:co_yield)|(?:restrict)|(?:noexcept)|(?:volatile)|(?:override)|(?:explicit)|(?:decltype)|(?:operator)|(?:noexcept)|(?:noexcept)|(?:typename)|(?:requires)|(?:co_yield)|(?:nullptr)|(?:alignof)|(?:alignas)|(?:default)|(?:mutable)|(?:virtual)|(?:mutable)|(?:private)|(?:include)|(?:warning)|(?:_Pragma)|(?:defined)|(?:typedef)|(?:__asm__)|(?:concept)|(?:define)|(?:module)|(?:sizeof)|(?:switch)|(?:delete)|(?:pragma)|(?:and_eq)|(?:inline)|(?:xor_eq)|(?:typeid)|(?:import)|(?:extern)|(?:public)|(?:bitand)|(?:static)|(?:export)|(?:return)|(?:friend)|(?:ifndef)|(?:not_eq)|(?:false)|(?:final)|(?:break)|(?:const)|(?:catch)|(?:endif)|(?:ifdef)|(?:undef)|(?:error)|(?:audit)|(?:while)|(?:using)|(?:axiom)|(?:or_eq)|(?:compl)|(?:throw)|(?:bitor)|(?:const)|(?:line)|(?:case)|(?:else)|(?:this)|(?:true)|(?:goto)|(?:else)|(?:NULL)|(?:elif)|(?:new)|(?:asm)|(?:xor)|(?:and)|(?:try)|(?:not)|(?:for)|(?:do)|(?:if)|(?:or)|(?:if))\\b)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\b((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<12>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)?(?![\\w<:.]))` }] }, lambdas: { begin: '(?:(?<=[^\\s]|^)(?<![\\w\\]\\)\\[\\*&">])|(?<=\\Wreturn|^return))(?:\\s+)?(\\[(?!\\[| *+"| *+\\d))((?:[^\\[\\]]|((?<!\\[)\\[(?!\\[)(?:[^\\[\\]]*+\\g<3>?)++\\]))*+)(\\](?!((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))[\\[\\];=]))', beginCaptures: { 1: { name: "punctuation.definition.capture.begin.lambda.cpp" }, 2: { name: "meta.lambda.capture.cpp", patterns: [{ include: "source.cpp#the_this_keyword" }, { captures: { 1: { name: "variable.parameter.capture.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "punctuation.separator.delimiter.comma.cpp" }, 7: { name: "keyword.operator.assignment.cpp" } }, match: "((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(?:(?=\\]|\\z|$)|(,))|(\\=))" }, { include: "#evaluation_context" }] }, 3: {}, 4: { name: "punctuation.definition.capture.end.lambda.cpp" }, 5: { patterns: [{ include: "source.cpp#inline_comment" }] }, 6: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 7: { name: "comment.block.cpp" }, 8: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, end: `(?<=[;}])|(?=(?<!\\\\)
)`, endCaptures: {}, patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.parameters.begin.lambda.cpp" } }, end: `\\)|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.definition.parameters.end.lambda.cpp" } }, name: "meta.function.definition.parameters.lambda.cpp", patterns: [{ include: "#function_parameter_context" }] }, { match: "(?<!\\w)(?:(?:constexpr)|(?:consteval)|(?:mutable))(?!\\w)", name: "storage.modifier.lambda.$0.cpp" }, { begin: "->", beginCaptures: { 0: { name: "punctuation.definition.lambda.return-type.cpp" } }, end: `(?=\\{)|(?=(?<!\\\\)
)`, endCaptures: {}, patterns: [{ include: "#comments" }, { match: "\\S+", name: "storage.type.return-type.lambda.cpp" }] }, { begin: "\\{", beginCaptures: { 0: { name: "punctuation.section.block.begin.bracket.curly.lambda.cpp" } }, end: `\\}|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.block.end.bracket.curly.lambda.cpp" } }, name: "meta.function.definition.body.lambda.cpp", patterns: [{ include: "$self" }] }] }, line: { begin: "^((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(#)(?:\\s+)?line\\b", beginCaptures: { 0: { name: "keyword.control.directive.line.cpp" }, 1: { patterns: [{ include: "source.cpp#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 5: { name: "punctuation.definition.directive.cpp" } }, end: `(?<!\\\\)(?:(?=\\n)|(?<=^\\n|[^\\\\]\\n)(?=$))|(?=(?<!\\\\)
)`, endCaptures: {}, name: "meta.preprocessor.line.cpp", patterns: [{ include: "#string_context" }, { include: "#preprocessor_number_literal" }, { include: "source.cpp#line_continuation_character" }] }, line_comment: { begin: "\\s*+(\\/\\/)", beginCaptures: { 1: { name: "punctuation.definition.comment.cpp" } }, end: `(?<!\\\\)(?:(?=\\n)|(?<=^\\n|[^\\\\]\\n)(?=$))|(?=(?<!\\\\)
)`, endCaptures: {}, name: "comment.line.double-slash.cpp", patterns: [{ include: "source.cpp#line_continuation_character" }] }, macro: { begin: "(^((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(#)(?:\\s+)?define\\b)(?:\\s+)?((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))", beginCaptures: { 1: { name: "keyword.control.directive.define.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "punctuation.definition.directive.cpp" }, 7: { name: "entity.name.function.preprocessor.cpp" } }, end: `(?<!\\\\)(?:(?=\\n)|(?<=^\\n|[^\\\\]\\n)(?=$))|(?=(?<!\\\\)
)`, endCaptures: {}, name: "meta.preprocessor.macro.cpp", patterns: [{ captures: { 1: { name: "punctuation.definition.parameters.begin.preprocessor.cpp" }, 2: { name: "meta.function.preprocessor.parameters.cpp", patterns: [{ captures: { 1: { name: "variable.parameter.preprocessor.cpp" } }, match: "(?<=[(,])(?:\\s+)?((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)(?:\\s+)?" }, { match: ",", name: "punctuation.separator.parameters.cpp" }, { match: "\\.\\.\\.", name: "punctuation.vararg-ellipses.variable.parameter.preprocessor.cpp" }] }, 3: { name: "punctuation.definition.parameters.end.preprocessor.cpp" } }, match: "\\G(?:\\s+)?(\\()([^\\(]*)(\\))" }, { include: "#macro_context" }, { include: "source.cpp#macro_argument" }] }, macro_context: { patterns: [{ include: "source.cpp.embedded.macro" }] }, method_access: { begin: "(?:((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)this(?!\\w))|((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*|(?<=\\]|\\)))(?:\\s+)?))(?:((?:\\.\\*|\\.))|((?:->\\*|->)))((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?:\\s+)?(?:(?:\\.\\*|\\.)|(?:->\\*|->))(?:\\s+)?)*)(?:\\s+)?(~?(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)(?:\\s+)?(\\()", beginCaptures: { 1: { patterns: [{ include: "source.cpp#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 5: { name: "variable.language.this.cpp" }, 6: { name: "variable.other.object.access.cpp" }, 7: { name: "punctuation.separator.dot-access.cpp" }, 8: { name: "punctuation.separator.pointer-access.cpp" }, 9: { patterns: [{ captures: { 1: { patterns: [{ include: "source.cpp#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 5: { name: "variable.language.this.cpp" }, 6: { name: "variable.other.object.property.cpp" }, 7: { name: "punctuation.separator.dot-access.cpp" }, 8: { name: "punctuation.separator.pointer-access.cpp" } }, match: "(?<=(?:\\.\\*|\\.|->|->\\*))(?:\\s+)?(?:((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)this(?!\\w))|((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*|(?<=\\]|\\)))(?:\\s+)?))(?:((?:\\.\\*|\\.))|((?:->\\*|->)))" }, { captures: { 1: { patterns: [{ include: "source.cpp#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 5: { name: "variable.language.this.cpp" }, 6: { name: "variable.other.object.access.cpp" }, 7: { name: "punctuation.separator.dot-access.cpp" }, 8: { name: "punctuation.separator.pointer-access.cpp" } }, match: "(?:((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)this(?!\\w))|((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*|(?<=\\]|\\)))(?:\\s+)?))(?:((?:\\.\\*|\\.))|((?:->\\*|->)))" }, { include: "source.cpp#member_access" }, { include: "#method_access" }] }, 10: { name: "entity.name.function.member.cpp" }, 11: { name: "punctuation.section.arguments.begin.bracket.round.function.member.cpp" } }, end: `\\)|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.function.member.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, ms_attributes: { begin: "__declspec\\(", beginCaptures: { 0: { name: "punctuation.section.attribute.begin.cpp" } }, end: `\\)|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.attribute.end.cpp" } }, name: "support.other.attribute.cpp", patterns: [{ include: "#attributes_context" }, { begin: "\\(", beginCaptures: {}, end: `\\)|(?=(?<!\\\\)
)`, endCaptures: {}, patterns: [{ include: "#attributes_context" }, { include: "#string_context" }, { include: "#ever_present_context" }] }, { captures: { 1: { name: "keyword.other.using.directive.cpp" }, 2: { name: "entity.name.namespace.cpp" } }, match: "(using)\\s+((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))" }, { match: ",", name: "punctuation.separator.attribute.cpp" }, { match: ":", name: "punctuation.accessor.attribute.cpp" }, { match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)(?=::)", name: "entity.name.namespace.cpp" }, { match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)", name: "entity.other.attribute.$0.cpp" }, { include: "source.cpp#number_literal" }, { include: "#ever_present_context" }] }, namespace_block: { begin: "((?<!\\w)namespace(?!\\w))", beginCaptures: { 0: { name: "meta.head.namespace.cpp" }, 1: { name: "keyword.other.namespace.definition.cpp storage.type.namespace.definition.cpp" } }, end: `(?:(?<=\\}|%>|\\?\\?>)|(?=[;>\\[\\]=]))|(?=(?<!\\\\)
)`, endCaptures: {}, name: "meta.block.namespace.cpp", patterns: [{ begin: "\\G ?", beginCaptures: {}, end: `(?:\\{|<%|\\?\\?<|(?=;))|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.block.begin.bracket.curly.namespace.cpp" } }, name: "meta.head.namespace.cpp", patterns: [{ include: "#ever_present_context" }, { include: "#attributes_context" }, { captures: { 1: { patterns: [{ include: "source.cpp#scope_resolution_namespace_block_inner_generated" }] }, 2: { name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.namespace.block.cpp" }, 3: { patterns: [{ include: "#template_call_range" }] }, 4: {}, 5: { name: "entity.name.namespace.cpp" }, 6: { name: "punctuation.separator.scope-resolution.namespace.block.cpp" }, 7: { name: "storage.modifier.inline.cpp" } }, match: `((::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<4>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*\\s*+)(?:\\s+)?((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(?:\\s+)?(?:(::)(?:\\s+)?(inline))?` }] }, { begin: "(?<=\\{|<%|\\?\\?<)", beginCaptures: {}, end: `\\}|%>|\\?\\?>|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.block.end.bracket.curly.namespace.cpp" } }, name: "meta.body.namespace.cpp", patterns: [{ include: "$self" }] }, { begin: "(?<=\\}|%>|\\?\\?>)[\\s]*", beginCaptures: {}, end: `[\\s]*(?=;)|(?=(?<!\\\\)
)`, endCaptures: {}, name: "meta.tail.namespace.cpp", patterns: [{ include: "$self" }] }] }, noexcept_operator: { begin: "((?<!\\w)noexcept(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\()", beginCaptures: { 1: { name: "keyword.operator.functionlike.cpp keyword.operator.noexcept.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "punctuation.section.arguments.begin.bracket.round.operator.noexcept.cpp" } }, contentName: "meta.arguments.operator.noexcept", end: `\\)|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.operator.noexcept.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, operator_overload: { begin: `((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(\\s*+((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))?((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(?:(?:(?:unsigned)|(?:signed)|(?:short)|(?:long))|(?:(?:struct)|(?:class)|(?:union)|(?:enum)))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<55>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*+)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?(?!(?:(?:transaction_safe_dynamic)|(?:__has_cpp_attribute)|(?:reinterpret_cast)|(?:transaction_safe)|(?:atomic_noexcept)|(?:atomic_commit)|(?:__has_include)|(?:atomic_cancel)|(?:synchronized)|(?:thread_local)|(?:dynamic_cast)|(?:static_cast)|(?:const_cast)|(?:constexpr)|(?:co_return)|(?:constinit)|(?:namespace)|(?:protected)|(?:consteval)|(?:constexpr)|(?:constexpr)|(?:co_return)|(?:consteval)|(?:co_await)|(?:continue)|(?:template)|(?:reflexpr)|(?:volatile)|(?:register)|(?:co_await)|(?:co_yield)|(?:restrict)|(?:noexcept)|(?:volatile)|(?:override)|(?:explicit)|(?:decltype)|(?:operator)|(?:noexcept)|(?:noexcept)|(?:typename)|(?:requires)|(?:co_yield)|(?:nullptr)|(?:alignof)|(?:alignas)|(?:default)|(?:mutable)|(?:virtual)|(?:mutable)|(?:private)|(?:include)|(?:warning)|(?:_Pragma)|(?:defined)|(?:typedef)|(?:__asm__)|(?:concept)|(?:define)|(?:module)|(?:sizeof)|(?:switch)|(?:delete)|(?:pragma)|(?:and_eq)|(?:inline)|(?:xor_eq)|(?:typeid)|(?:import)|(?:extern)|(?:public)|(?:bitand)|(?:static)|(?:export)|(?:return)|(?:friend)|(?:ifndef)|(?:not_eq)|(?:false)|(?:final)|(?:break)|(?:const)|(?:catch)|(?:endif)|(?:ifdef)|(?:undef)|(?:error)|(?:audit)|(?:while)|(?:using)|(?:axiom)|(?:or_eq)|(?:compl)|(?:throw)|(?:bitor)|(?:const)|(?:line)|(?:case)|(?:else)|(?:this)|(?:true)|(?:goto)|(?:else)|(?:NULL)|(?:elif)|(?:new)|(?:asm)|(?:xor)|(?:and)|(?:try)|(?:not)|(?:for)|(?:do)|(?:if)|(?:or)|(?:if))\\b)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\b((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<55>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)?(?![\\w<:.]))(((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))?(?:(?:&|\\*)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:&|\\*))?((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?((?:__cdecl|__clrcall|__stdcall|__fastcall|__thiscall|__vectorcall)?)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<55>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*+)(operator)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<55>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*+)(?:(?:((?:(?:delete\\[\\])|(?:delete)|(?:new\\[\\])|(?:<=>)|(?:<<=)|(?:new)|(?:>>=)|(?:\\->\\*)|(?:\\/=)|(?:%=)|(?:&=)|(?:>=)|(?:\\|=)|(?:\\+\\+)|(?:\\-\\-)|(?:\\(\\))|(?:\\[\\])|(?:\\->)|(?:\\+\\+)|(?:<<)|(?:>>)|(?:\\-\\-)|(?:<=)|(?:\\^=)|(?:==)|(?:!=)|(?:&&)|(?:\\|\\|)|(?:\\+=)|(?:\\-=)|(?:\\*=)|,|\\+|\\-|!|~|\\*|&|\\*|\\/|%|\\+|\\-|<|>|&|\\^|\\||=))|((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)(((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))?(?:(?:&|\\*)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:&|\\*))?((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?:\\[\\])?)))|("")((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?=\\<|\\()`, beginCaptures: { 0: { name: "meta.head.function.definition.special.operator-overload.cpp" }, 1: { patterns: [{ include: "source.cpp#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 5: { name: "meta.qualified_type.cpp", patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.cpp" }, { match: "(?<!\\w)(?:(?:struct)|(?:class)|(?:union)|(?:enum))(?!\\w)", name: "storage.type.$0.cpp" }, { include: "#attributes_context" }, { include: "#storage_types" }, { include: "source.cpp#number_literal" }, { include: "#string_context" }, { include: "source.cpp#comma" }, { include: "source.cpp#scope_resolution_inner_generated" }, { begin: "<", beginCaptures: { 0: { name: "punctuation.section.angle-brackets.begin.template.call.cpp" } }, end: `>|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.angle-brackets.end.template.call.cpp" } }, name: "meta.template.call.cpp", patterns: [{ include: "#template_call_context" }] }, { match: "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*", name: "entity.name.type.cpp" }] }, 6: { patterns: [{ include: "#attributes_context" }, { include: "source.cpp#number_literal" }] }, 7: { patterns: [{ include: "source.cpp#inline_comment" }] }, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 11: { patterns: [{ include: "source.cpp#inline_comment" }] }, 12: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 13: { name: "comment.block.cpp" }, 14: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 15: { patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.type.cpp" }, { match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)", name: "entity.name.scope-resolution.type.cpp" }, { include: "#template_call_range" }] }, 16: { patterns: [{ include: "#template_call_range" }] }, 17: {}, 18: { patterns: [{ include: "source.cpp#inline_comment" }] }, 19: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 20: { name: "comment.block.cpp" }, 21: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 22: {}, 23: { patterns: [{ match: "\\*", name: "storage.modifier.pointer.cpp" }, { captures: { 1: { patterns: [{ include: "source.cpp#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "(?:\\&((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))){2,}\\&", name: "invalid.illegal.reference-type.cpp" }, { match: "\\&", name: "storage.modifier.reference.cpp" }] }, 24: { patterns: [{ include: "source.cpp#inline_comment" }] }, 25: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 26: { name: "comment.block.cpp" }, 27: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 28: { patterns: [{ include: "source.cpp#inline_comment" }] }, 29: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 30: { name: "comment.block.cpp" }, 31: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 32: { patterns: [{ include: "source.cpp#inline_comment" }] }, 33: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 34: { name: "comment.block.cpp" }, 35: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 36: { name: "storage.type.modifier.calling-convention.cpp" }, 37: { patterns: [{ include: "source.cpp#inline_comment" }] }, 38: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 39: { name: "comment.block.cpp" }, 40: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 41: { patterns: [{ include: "source.cpp#inline_comment" }] }, 42: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 43: { name: "comment.block.cpp" }, 44: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 45: { patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.operator.cpp" }, { match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)", name: "entity.name.scope-resolution.operator.cpp" }, { include: "#template_call_range" }] }, 46: { patterns: [{ include: "#template_call_range" }] }, 47: {}, 48: { name: "keyword.other.operator.overload.cpp" }, 49: { patterns: [{ include: "source.cpp#inline_comment" }] }, 50: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 51: { name: "comment.block.cpp" }, 52: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 53: { patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.operator-overload.cpp" }, { match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)", name: "entity.name.scope-resolution.operator-overload.cpp" }, { include: "#template_call_range" }] }, 54: { patterns: [{ include: "#template_call_range" }] }, 55: {}, 56: { name: "entity.name.operator.cpp" }, 57: { name: "entity.name.operator.type.cpp" }, 58: { patterns: [{ match: "\\*", name: "entity.name.operator.type.pointer.cpp" }, { captures: { 1: { patterns: [{ include: "source.cpp#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "(?:\\&((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))){2,}\\&", name: "invalid.illegal.reference-type.cpp" }, { match: "\\&", name: "entity.name.operator.type.reference.cpp" }] }, 59: { patterns: [{ include: "source.cpp#inline_comment" }] }, 60: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 61: { name: "comment.block.cpp" }, 62: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 63: { patterns: [{ include: "source.cpp#inline_comment" }] }, 64: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 65: { name: "comment.block.cpp" }, 66: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 67: { patterns: [{ include: "source.cpp#inline_comment" }] }, 68: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 69: { name: "comment.block.cpp" }, 70: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 71: { name: "entity.name.operator.type.array.cpp" }, 72: { name: "entity.name.operator.custom-literal.cpp" }, 73: { patterns: [{ include: "source.cpp#inline_comment" }] }, 74: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 75: { name: "comment.block.cpp" }, 76: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 77: { name: "entity.name.operator.custom-literal.cpp" }, 78: { patterns: [{ include: "source.cpp#inline_comment" }] }, 79: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 80: { name: "comment.block.cpp" }, 81: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, end: `(?:(?<=\\}|%>|\\?\\?>)|(?=[;>\\[\\]=]))|(?=(?<!\\\\)
)`, endCaptures: {}, name: "meta.function.definition.special.operator-overload.cpp", patterns: [{ begin: "\\G ?", beginCaptures: {}, end: `(?:\\{|<%|\\?\\?<|(?=;))|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload.cpp" } }, name: "meta.head.function.definition.special.operator-overload.cpp", patterns: [{ include: "#ever_present_context" }, { include: "#template_call_range" }, { begin: "\\(", beginCaptures: { 0: { name: "punctuation.section.parameters.begin.bracket.round.special.operator-overload.cpp" } }, contentName: "meta.function.definition.parameters.special.operator-overload", end: `\\)|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.parameters.end.bracket.round.special.operator-overload.cpp" } }, patterns: [{ include: "#function_parameter_context" }, { include: "#evaluation_context" }] }, { include: "source.cpp#qualifiers_and_specifiers_post_parameters" }, { captures: { 1: { name: "keyword.operator.assignment.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "keyword.other.default.function.cpp" }, 7: { name: "keyword.other.delete.function.cpp" } }, match: "(\\=)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(default)|(delete))" }, { include: "$self" }] }, { begin: "(?<=\\{|<%|\\?\\?<)", beginCaptures: {}, end: `\\}|%>|\\?\\?>|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload.cpp" } }, name: "meta.body.function.definition.special.operator-overload.cpp", patterns: [{ include: "#function_body_context" }] }, { begin: "(?<=\\}|%>|\\?\\?>)[\\s]*", beginCaptures: {}, end: `[\\s]*(?=;)|(?=(?<!\\\\)
)`, endCaptures: {}, name: "meta.tail.function.definition.special.operator-overload.cpp", patterns: [{ include: "$self" }] }] }, operators: { patterns: [{ begin: "((?<!\\w)sizeof(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\()", beginCaptures: { 1: { name: "keyword.operator.functionlike.cpp keyword.operator.sizeof.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "punctuation.section.arguments.begin.bracket.round.operator.sizeof.cpp" } }, contentName: "meta.arguments.operator.sizeof", end: `\\)|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.operator.sizeof.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, { begin: "((?<!\\w)alignof(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\()", beginCaptures: { 1: { name: "keyword.operator.functionlike.cpp keyword.operator.alignof.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "punctuation.section.arguments.begin.bracket.round.operator.alignof.cpp" } }, contentName: "meta.arguments.operator.alignof", end: `\\)|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.operator.alignof.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, { begin: "((?<!\\w)alignas(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\()", beginCaptures: { 1: { name: "keyword.operator.functionlike.cpp keyword.operator.alignas.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "punctuation.section.arguments.begin.bracket.round.operator.alignas.cpp" } }, contentName: "meta.arguments.operator.alignas", end: `\\)|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.operator.alignas.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, { begin: "((?<!\\w)typeid(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\()", beginCaptures: { 1: { name: "keyword.operator.functionlike.cpp keyword.operator.typeid.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "punctuation.section.arguments.begin.bracket.round.operator.typeid.cpp" } }, contentName: "meta.arguments.operator.typeid", end: `\\)|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.operator.typeid.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, { begin: "((?<!\\w)noexcept(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\()", beginCaptures: { 1: { name: "keyword.operator.functionlike.cpp keyword.operator.noexcept.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "punctuation.section.arguments.begin.bracket.round.operator.noexcept.cpp" } }, contentName: "meta.arguments.operator.noexcept", end: `\\)|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.operator.noexcept.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, { begin: "(\\bsizeof\\.\\.\\.)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\()", beginCaptures: { 1: { name: "keyword.operator.functionlike.cpp keyword.operator.sizeof.variadic.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "punctuation.section.arguments.begin.bracket.round.operator.sizeof.variadic.cpp" } }, contentName: "meta.arguments.operator.sizeof.variadic", end: `\\)|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.operator.sizeof.variadic.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, { match: "--", name: "keyword.operator.decrement.cpp" }, { match: "\\+\\+", name: "keyword.operator.increment.cpp" }, { match: "%=|\\+=|-=|\\*=|(?<!\\()\\/=", name: "keyword.operator.assignment.compound.cpp" }, { match: "&=|\\^=|<<=|>>=|\\|=", name: "keyword.operator.assignment.compound.bitwise.cpp" }, { match: "<<|>>", name: "keyword.operator.bitwise.shift.cpp" }, { match: "!=|<=|>=|==|<|>", name: "keyword.operator.comparison.cpp" }, { match: "&&|!|\\|\\|", name: "keyword.operator.logical.cpp" }, { match: "&|\\||\\^|~", name: "keyword.operator.bitwise.cpp" }, { include: "source.cpp#assignment_operator" }, { match: "%|\\*|\\/|-|\\+", name: "keyword.operator.arithmetic.cpp" }, { include: "#ternary_operator" }] }, parameter: { begin: "((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?=\\w)", beginCaptures: { 1: { patterns: [{ include: "source.cpp#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, end: `(?:(?=\\))|(,))|(?=(?<!\\\\)
)`, endCaptures: { 1: { name: "punctuation.separator.delimiter.comma.cpp" } }, name: "meta.parameter.cpp", patterns: [{ include: "#ever_present_context" }, { include: "#string_context" }, { include: "#function_pointer_parameter" }, { include: "#decltype" }, { include: "source.cpp#vararg_ellipses" }, { captures: { 1: { patterns: [{ include: "#storage_types" }] }, 2: { name: "storage.modifier.specifier.parameter.cpp" }, 3: { patterns: [{ include: "source.cpp#inline_comment" }] }, 4: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 5: { name: "comment.block.cpp" }, 6: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 7: { patterns: [{ include: "source.cpp#inline_comment" }] }, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 11: { name: "storage.type.primitive.cpp storage.type.built-in.primitive.cpp" }, 12: { name: "storage.type.cpp storage.type.built-in.cpp" }, 13: { name: "support.type.posix-reserved.pthread.cpp support.type.built-in.posix-reserved.pthread.cpp" }, 14: { name: "support.type.posix-reserved.cpp support.type.built-in.posix-reserved.cpp" }, 15: { name: "entity.name.type.parameter.cpp" }, 16: { patterns: [{ include: "source.cpp#inline_comment" }] }, 17: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 18: { name: "comment.block.cpp" }, 19: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "((?:((?:(?:thread_local)|(?:volatile)|(?:register)|(?:restrict)|(?:static)|(?:extern)|(?:const)))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))+)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:\\s*+(?<!\\w)(?:(?:(?:((?:(?:unsigned)|(?:wchar_t)|(?:double)|(?:signed)|(?:short)|(?:float)|(?:auto)|(?:void)|(?:long)|(?:char)|(?:bool)|(?:int)))|((?:(?:uint_least32_t)|(?:uint_least64_t)|(?:uint_least16_t)|(?:uint_fast64_t)|(?:uint_least8_t)|(?:int_least64_t)|(?:int_least32_t)|(?:int_least16_t)|(?:uint_fast16_t)|(?:uint_fast32_t)|(?:int_least8_t)|(?:int_fast16_t)|(?:int_fast32_t)|(?:int_fast64_t)|(?:uint_fast8_t)|(?:int_fast8_t)|(?:suseconds_t)|(?:useconds_t)|(?:uintmax_t)|(?:uintmax_t)|(?:in_port_t)|(?:uintmax_t)|(?:in_addr_t)|(?:blksize_t)|(?:uintptr_t)|(?:intmax_t)|(?:intptr_t)|(?:blkcnt_t)|(?:intmax_t)|(?:u_quad_t)|(?:uint16_t)|(?:uint32_t)|(?:uint64_t)|(?:ssize_t)|(?:fixpt_t)|(?:qaddr_t)|(?:u_short)|(?:int16_t)|(?:int32_t)|(?:int64_t)|(?:uint8_t)|(?:daddr_t)|(?:caddr_t)|(?:swblk_t)|(?:clock_t)|(?:segsz_t)|(?:nlink_t)|(?:time_t)|(?:u_long)|(?:ushort)|(?:quad_t)|(?:mode_t)|(?:size_t)|(?:u_char)|(?:int8_t)|(?:u_int)|(?:uid_t)|(?:off_t)|(?:pid_t)|(?:gid_t)|(?:dev_t)|(?:div_t)|(?:key_t)|(?:ino_t)|(?:id_t)|(?:id_t)|(?:uint))))|((?:(?:pthread_rwlockattr_t)|(?:pthread_mutexattr_t)|(?:pthread_condattr_t)|(?:pthread_rwlock_t)|(?:pthread_mutex_t)|(?:pthread_cond_t)|(?:pthread_attr_t)|(?:pthread_once_t)|(?:pthread_key_t)|(?:pthread_t))))|([a-zA-Z_]\\w*_t))(?!\\w)|((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\b\\b(?<!\\Wthread_local|^thread_local|\\Wvolatile|^volatile|\\Wregister|^register|\\Wrestrict|^restrict|\\Wstatic|^static|\\Wextern|^extern|\\Wconst|^const)))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?=,|\\)|=)" }, { include: "#storage_types" }, { include: "source.cpp#scope_resolution_parameter_inner_generated" }, { match: "(?:(?:struct)|(?:class)|(?:union)|(?:enum))", name: "storage.type.$0.cpp" }, { begin: "(?<==)", beginCaptures: {}, end: `(?:(?=\\))|(,))|(?=(?<!\\\\)
)`, endCaptures: { 1: { name: "punctuation.separator.delimiter.comma.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, { match: "\\=", name: "keyword.operator.assignment.cpp" }, { captures: { 1: { patterns: [{ include: "source.cpp#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 5: { name: "variable.parameter.cpp" }, 6: { patterns: [{ include: "source.cpp#inline_comment" }] }, 7: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 8: { name: "comment.block.cpp" }, 9: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "(?<!\\s|\\(|,|:)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?=\\)|,|\\[|=|\\n)" }, { include: "#attributes_context" }, { begin: "\\[", beginCaptures: { 0: { name: "punctuation.definition.begin.bracket.square.array.type.cpp" } }, end: `\\]|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.definition.end.bracket.square.array.type.cpp" } }, name: "meta.bracket.square.array.cpp", patterns: [{ include: "#evaluation_context" }] }, { match: "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\b(?<!\\Wstruct|^struct|\\Wclass|^class|\\Wunion|^union|\\Wenum|^enum)", name: "entity.name.type.parameter.cpp" }, { include: "#template_call_range" }, { captures: { 0: { patterns: [{ match: "\\*", name: "storage.modifier.pointer.cpp" }, { captures: { 1: { patterns: [{ include: "source.cpp#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "(?:\\&((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))){2,}\\&", name: "invalid.illegal.reference-type.cpp" }, { match: "\\&", name: "storage.modifier.reference.cpp" }] }, 1: { patterns: [{ include: "source.cpp#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 5: { patterns: [{ include: "source.cpp#inline_comment" }] }, 6: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 7: { name: "comment.block.cpp" }, 8: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))?(?:(?:&|\\*)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:&|\\*)" }, { include: "#ever_present_context" }] }, parameter_or_maybe_value: { begin: "((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?=\\w)", beginCaptures: { 1: { patterns: [{ include: "source.cpp#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, end: `(?:(?=\\))|(,))|(?=(?<!\\\\)
)`, endCaptures: { 1: { name: "punctuation.separator.delimiter.comma.cpp" } }, name: "meta.parameter.cpp", patterns: [{ include: "#ever_present_context" }, { include: "#function_pointer_parameter" }, { include: "source.cpp#memory_operators" }, { include: "#builtin_storage_type_initilizer" }, { include: "#curly_initializer" }, { include: "#decltype" }, { include: "source.cpp#vararg_ellipses" }, { captures: { 1: { patterns: [{ include: "#storage_types" }] }, 2: { name: "storage.modifier.specifier.parameter.cpp" }, 3: { patterns: [{ include: "source.cpp#inline_comment" }] }, 4: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 5: { name: "comment.block.cpp" }, 6: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 7: { patterns: [{ include: "source.cpp#inline_comment" }] }, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 11: { name: "storage.type.primitive.cpp storage.type.built-in.primitive.cpp" }, 12: { name: "storage.type.cpp storage.type.built-in.cpp" }, 13: { name: "support.type.posix-reserved.pthread.cpp support.type.built-in.posix-reserved.pthread.cpp" }, 14: { name: "support.type.posix-reserved.cpp support.type.built-in.posix-reserved.cpp" }, 15: { name: "entity.name.type.parameter.cpp" }, 16: { patterns: [{ include: "source.cpp#inline_comment" }] }, 17: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 18: { name: "comment.block.cpp" }, 19: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "((?:((?:(?:thread_local)|(?:volatile)|(?:register)|(?:restrict)|(?:static)|(?:extern)|(?:const)))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))+)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:\\s*+(?<!\\w)(?:(?:(?:((?:(?:unsigned)|(?:wchar_t)|(?:double)|(?:signed)|(?:short)|(?:float)|(?:auto)|(?:void)|(?:long)|(?:char)|(?:bool)|(?:int)))|((?:(?:uint_least32_t)|(?:uint_least64_t)|(?:uint_least16_t)|(?:uint_fast64_t)|(?:uint_least8_t)|(?:int_least64_t)|(?:int_least32_t)|(?:int_least16_t)|(?:uint_fast16_t)|(?:uint_fast32_t)|(?:int_least8_t)|(?:int_fast16_t)|(?:int_fast32_t)|(?:int_fast64_t)|(?:uint_fast8_t)|(?:int_fast8_t)|(?:suseconds_t)|(?:useconds_t)|(?:uintmax_t)|(?:uintmax_t)|(?:in_port_t)|(?:uintmax_t)|(?:in_addr_t)|(?:blksize_t)|(?:uintptr_t)|(?:intmax_t)|(?:intptr_t)|(?:blkcnt_t)|(?:intmax_t)|(?:u_quad_t)|(?:uint16_t)|(?:uint32_t)|(?:uint64_t)|(?:ssize_t)|(?:fixpt_t)|(?:qaddr_t)|(?:u_short)|(?:int16_t)|(?:int32_t)|(?:int64_t)|(?:uint8_t)|(?:daddr_t)|(?:caddr_t)|(?:swblk_t)|(?:clock_t)|(?:segsz_t)|(?:nlink_t)|(?:time_t)|(?:u_long)|(?:ushort)|(?:quad_t)|(?:mode_t)|(?:size_t)|(?:u_char)|(?:int8_t)|(?:u_int)|(?:uid_t)|(?:off_t)|(?:pid_t)|(?:gid_t)|(?:dev_t)|(?:div_t)|(?:key_t)|(?:ino_t)|(?:id_t)|(?:id_t)|(?:uint))))|((?:(?:pthread_rwlockattr_t)|(?:pthread_mutexattr_t)|(?:pthread_condattr_t)|(?:pthread_rwlock_t)|(?:pthread_mutex_t)|(?:pthread_cond_t)|(?:pthread_attr_t)|(?:pthread_once_t)|(?:pthread_key_t)|(?:pthread_t))))|([a-zA-Z_]\\w*_t))(?!\\w)|((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\b\\b(?<!\\Wthread_local|^thread_local|\\Wvolatile|^volatile|\\Wregister|^register|\\Wrestrict|^restrict|\\Wstatic|^static|\\Wextern|^extern|\\Wconst|^const)))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?=,|\\)|=)" }, { include: "#storage_types" }, { include: "#function_call" }, { include: "source.cpp#scope_resolution_parameter_inner_generated" }, { match: "(?:(?:struct)|(?:class)|(?:union)|(?:enum))", name: "storage.type.$0.cpp" }, { begin: "(?<==)", beginCaptures: {}, end: `(?:(?=\\))|(,))|(?=(?<!\\\\)
)`, endCaptures: { 1: { name: "punctuation.separator.delimiter.comma.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, { captures: { 1: { patterns: [{ include: "source.cpp#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 5: { name: "variable.parameter.cpp" }, 6: { patterns: [{ include: "source.cpp#inline_comment" }] }, 7: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 8: { name: "comment.block.cpp" }, 9: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "(?<!\\s|\\(|,|:)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?=(?:\\)|,|\\[|=|\\/\\/|(?:\\n|$)))" }, { include: "#attributes_context" }, { begin: "\\[", beginCaptures: { 0: { name: "punctuation.definition.begin.bracket.square.array.type.cpp" } }, end: `\\]|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.definition.end.bracket.square.array.type.cpp" } }, name: "meta.bracket.square.array.cpp", patterns: [{ include: "#evaluation_context" }] }, { match: "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\b(?<!\\Wstruct|^struct|\\Wclass|^class|\\Wunion|^union|\\Wenum|^enum)", name: "entity.name.type.parameter.cpp" }, { include: "#template_call_range" }, { captures: { 0: { patterns: [{ match: "\\*", name: "storage.modifier.pointer.cpp" }, { captures: { 1: { patterns: [{ include: "source.cpp#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "(?:\\&((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))){2,}\\&", name: "invalid.illegal.reference-type.cpp" }, { match: "\\&", name: "storage.modifier.reference.cpp" }] }, 1: { patterns: [{ include: "source.cpp#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 5: { patterns: [{ include: "source.cpp#inline_comment" }] }, 6: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 7: { name: "comment.block.cpp" }, 8: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))?(?:(?:&|\\*)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:&|\\*)" }, { include: "#evaluation_context" }, { include: "#ever_present_context" }] }, parentheses: { begin: "\\(", beginCaptures: { 0: { name: "punctuation.section.parens.begin.bracket.round.cpp" } }, end: `\\)|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.parens.end.bracket.round.cpp" } }, name: "meta.parens.cpp", patterns: [{ include: "source.cpp#over_qualified_types" }, { match: "(?<!:):(?!:)", name: "punctuation.separator.colon.range-based.cpp" }, { include: "#evaluation_context" }] }, pragma: { begin: "^((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(#)(?:\\s+)?pragma\\b", beginCaptures: { 0: { name: "keyword.control.directive.pragma.cpp" }, 1: { patterns: [{ include: "source.cpp#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 5: { name: "punctuation.definition.directive.cpp" } }, end: `(?<!\\\\)(?:(?=\\n)|(?<=^\\n|[^\\\\]\\n)(?=$))|(?=(?<!\\\\)
)`, endCaptures: {}, name: "meta.preprocessor.pragma.cpp", patterns: [{ include: "#comments" }, { include: "#string_context" }, { match: "[a-zA-Z_$][\\w\\-$]*", name: "entity.other.attribute-name.pragma.preprocessor.cpp" }, { include: "#preprocessor_number_literal" }, { include: "source.cpp#line_continuation_character" }] }, preprocessor_conditional_context: { patterns: [{ include: "#preprocessor_conditional_defined" }, { include: "#comments" }, { include: "source.cpp#language_constants" }, { include: "#string_context" }, { include: "source.cpp#d9bc4796b0b_preprocessor_number_literal" }, { include: "#operators" }, { include: "source.cpp#predefined_macros" }, { include: "source.cpp#macro_name" }, { include: "source.cpp#line_continuation_character" }] }, preprocessor_conditional_defined: { begin: "((?<!\\w)defined(?!\\w))(\\()", beginCaptures: { 1: { name: "keyword.control.directive.conditional.defined.cpp" }, 2: { name: "punctuation.section.parens.control.defined.cpp" } }, end: `(?:\\)|(?<!\\\\)(?:(?=\\n)|(?<=^\\n|[^\\\\]\\n)(?=$)))|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.parens.control.defined.cpp" } }, patterns: [{ include: "source.cpp#macro_name" }] }, preprocessor_conditional_parentheses: { begin: "\\(", beginCaptures: { 0: { name: "punctuation.section.parens.begin.bracket.round.cpp" } }, end: `\\)|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.parens.end.bracket.round.cpp" } }, name: "meta.parens.preprocessor.conditional.cpp" }, preprocessor_conditional_range: { begin: "^((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(#)(?:\\s+)?((?:(?:ifndef|ifdef)|if))", beginCaptures: { 0: { name: "keyword.control.directive.conditional.$6.cpp" }, 1: { patterns: [{ include: "source.cpp#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 5: { name: "punctuation.definition.directive.cpp" }, 6: {} }, contentName: "meta.preprocessor.conditional", end: `(?<!\\\\)(?:(?=\\n)|(?<=^\\n|[^\\\\]\\n)(?=$))|(?=(?<!\\\\)
)`, endCaptures: {}, patterns: [{ include: "#preprocessor_conditional_context" }] }, preprocessor_context: { patterns: [{ include: "source.cpp#pragma_mark" }, { include: "#pragma" }, { include: "source.cpp#include" }, { include: "#line" }, { include: "#diagnostic" }, { include: "source.cpp#undef" }, { include: "#preprocessor_conditional_range" }, { include: "source.cpp#single_line_macro" }, { include: "#macro" }, { include: "source.cpp#preprocessor_conditional_standalone" }, { include: "source.cpp#macro_argument" }] }, sizeof_operator: { begin: "((?<!\\w)sizeof(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\()", beginCaptures: { 1: { name: "keyword.operator.functionlike.cpp keyword.operator.sizeof.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "punctuation.section.arguments.begin.bracket.round.operator.sizeof.cpp" } }, contentName: "meta.arguments.operator.sizeof", end: `\\)|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.operator.sizeof.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, sizeof_variadic_operator: { begin: "(\\bsizeof\\.\\.\\.)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\()", beginCaptures: { 1: { name: "keyword.operator.functionlike.cpp keyword.operator.sizeof.variadic.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "punctuation.section.arguments.begin.bracket.round.operator.sizeof.variadic.cpp" } }, contentName: "meta.arguments.operator.sizeof.variadic", end: `\\)|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.operator.sizeof.variadic.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, square_brackets: { begin: "([a-zA-Z_][a-zA-Z_0-9]*|(?<=[\\]\\)]))?(\\[)(?!\\])", beginCaptures: { 1: { name: "variable.other.object" }, 2: { name: "punctuation.definition.begin.bracket.square" } }, end: `\\]|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.definition.end.bracket.square" } }, name: "meta.bracket.square.access", patterns: [{ include: "#evaluation_context" }] }, static_assert: { begin: "((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)static_assert|_Static_assert(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\()", beginCaptures: { 1: { patterns: [{ include: "source.cpp#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 5: { name: "keyword.other.static_assert.cpp" }, 6: { patterns: [{ include: "source.cpp#inline_comment" }] }, 7: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 8: { name: "comment.block.cpp" }, 9: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 10: { name: "punctuation.section.arguments.begin.bracket.round.static_assert.cpp" } }, end: `\\)|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.static_assert.cpp" } }, patterns: [{ begin: '(,)(?:\\s+)?(?=(?:L|u8|u|U(?:\\s+)?\\")?)', beginCaptures: { 1: { name: "punctuation.separator.delimiter.comma.cpp" } }, end: `(?=\\))|(?=(?<!\\\\)
)`, endCaptures: {}, name: "meta.static_assert.message.cpp", patterns: [{ include: "#string_context" }] }, { include: "#evaluation_context" }] }, storage_types: { patterns: [{ include: "source.cpp#storage_specifiers" }, { include: "source.cpp#inline_builtin_storage_type" }, { include: "#decltype" }, { include: "source.cpp#typename" }] }, string_context: { patterns: [{ begin: '((?:u|u8|U|L)?)"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.cpp" }, 1: { name: "meta.encoding.cpp" } }, end: `(")(?:((?:[a-zA-Z]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)|(_(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*))?|(?=(?<!\\\\)
)`, endCaptures: { 1: { name: "punctuation.definition.string.end.cpp" }, 2: { name: "keyword.other.suffix.literal.user-defined.reserved.string.cpp" }, 3: { name: "keyword.other.suffix.literal.user-defined.string.cpp" } }, name: "string.quoted.double.cpp", patterns: [{ match: "(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8})", name: "constant.character.escape.cpp" }, { match: `\\\\['"?\\\\abfnrtv]`, name: "constant.character.escape.cpp" }, { match: "\\\\[0-7]{1,3}", name: "constant.character.escape.cpp" }, { captures: { 1: { name: "constant.character.escape.cpp" }, 2: { name: "invalid.illegal.unknown-escape.cpp" } }, match: "(?:(\\\\x0*[0-9a-fA-F]{2}(?![0-9a-fA-F]))|((?:\\\\x[0-9a-fA-F]*|\\\\x)))" }, { include: "source.cpp#string_escapes_context_c" }] }, { begin: "(?<![0-9A-Fa-f])((?:u|u8|U|L)?)'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.cpp" }, 1: { name: "meta.encoding.cpp" } }, end: `(')(?:((?:[a-zA-Z]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)|(_(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*))?|(?=(?<!\\\\)
)`, endCaptures: { 1: { name: "punctuation.definition.string.end.cpp" }, 2: { name: "keyword.other.suffix.literal.user-defined.reserved.character.cpp" }, 3: { name: "keyword.other.suffix.literal.user-defined.character.cpp" } }, name: "string.quoted.single.cpp", patterns: [{ captures: { 1: { name: "constant.character.escape.cpp" }, 2: { name: "invalid.illegal.unknown-escape.cpp" } }, match: "(?:(\\\\x0*[0-9a-fA-F]{2}(?![0-9a-fA-F]))|((?:\\\\x[0-9a-fA-F]*|\\\\x)))" }, { include: "source.cpp#string_escapes_context_c" }, { include: "source.cpp#line_continuation_character" }] }, { begin: '((?:[uUL]8?)?R)\\"(?:(?:_r|re)|regex)\\(', beginCaptures: { 0: { name: "punctuation.definition.string.begin.cpp" }, 1: { name: "meta.encoding.cpp" } }, end: `\\)(?:(?:_r|re)|regex)\\"|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.definition.string.end.cpp" } }, name: "string.quoted.double.raw.regex.cpp", patterns: [{ include: "source.regexp.python" }] }, { begin: '((?:[uUL]8?)?R)\\"(?:glsl|GLSL)\\(', beginCaptures: { 0: { name: "punctuation.definition.string.begin.cpp" }, 1: { name: "meta.encoding.cpp" } }, end: `\\)(?:glsl|GLSL)\\"|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.definition.string.end.cpp" } }, name: "meta.string.quoted.double.raw.glsl.cpp", patterns: [{ include: "source.glsl" }] }, { begin: '((?:[uUL]8?)?R)\\"(?:[pP]?(?:sql|SQL)|d[dm]l)\\(', beginCaptures: { 0: { name: "punctuation.definition.string.begin.cpp" }, 1: { name: "meta.encoding.cpp" } }, end: `\\)(?:[pP]?(?:sql|SQL)|d[dm]l)\\"|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.definition.string.end.cpp" } }, name: "meta.string.quoted.double.raw.sql.cpp", patterns: [{ include: "source.sql" }] }, { begin: '((?:u|u8|U|L)?R)"(?:([^ ()\\\\\\t]{0,16})|([^ ()\\\\\\t]*))\\(', beginCaptures: { 0: { name: "punctuation.definition.string.begin" }, 1: { name: "meta.encoding" }, 3: { name: "invalid.illegal.delimiter-too-long" } }, end: `(\\)\\2(\\3)")(?:((?:[a-zA-Z]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)|(_(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*))?|(?=(?<!\\\\)
)`, endCaptures: { 1: { name: "punctuation.definition.string.end" }, 2: { name: "invalid.illegal.delimiter-too-long" }, 3: { name: "keyword.other.suffix.literal.user-defined.reserved.string.cpp" }, 4: { name: "keyword.other.suffix.literal.user-defined.string.cpp" } }, name: "string.quoted.double.raw" }] }, struct_block: { begin: "((?<!\\w)struct(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(?={)|(?:((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?((?:(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*+)?(?:((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(:(?!:)))?)", beginCaptures: { 0: { name: "meta.head.struct.cpp" }, 1: { name: "storage.type.$1.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { patterns: [{ include: "#attributes_context" }, { include: "source.cpp#number_literal" }] }, 7: { patterns: [{ include: "source.cpp#inline_comment" }] }, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 11: { patterns: [{ captures: { 1: { name: "storage.type.modifier.final.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "((?<!\\w)final(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))" }, { captures: { 1: { name: "entity.name.type.struct.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "storage.type.modifier.final.cpp" }, 7: { patterns: [{ include: "source.cpp#inline_comment" }] }, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:((?<!\\w)final(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?(?=:|{|$)" }, { match: "DLLEXPORT", name: "entity.name.other.preprocessor.macro.predefined.DLLEXPORT.cpp" }, { match: "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*", name: "entity.name.other.preprocessor.macro.predefined.probably.$0.cpp" }] }, 12: { patterns: [{ include: "source.cpp#inline_comment" }] }, 13: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 14: { name: "comment.block.cpp" }, 15: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 16: { patterns: [{ include: "source.cpp#inline_comment" }] }, 17: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 18: { name: "comment.block.cpp" }, 19: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 20: { name: "punctuation.separator.colon.inheritance.cpp" } }, end: `(?:(?:(?<=\\}|%>|\\?\\?>)(?:\\s+)?(;)|(;))|(?=[;>\\[\\]=]))|(?=(?<!\\\\)
)`, endCaptures: { 1: { name: "punctuation.terminator.statement.cpp" }, 2: { name: "punctuation.terminator.statement.cpp" } }, name: "meta.block.struct.cpp", patterns: [{ begin: "\\G ?", beginCaptures: {}, end: `(?:\\{|<%|\\?\\?<|(?=;))|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.block.begin.bracket.curly.struct.cpp" } }, name: "meta.head.struct.cpp", patterns: [{ include: "#ever_present_context" }, { include: "#inheritance_context" }, { include: "#template_call_range" }] }, { begin: "(?<=\\{|<%|\\?\\?<)", beginCaptures: {}, end: `\\}|%>|\\?\\?>|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.block.end.bracket.curly.struct.cpp" } }, name: "meta.body.struct.cpp", patterns: [{ include: "#function_pointer" }, { include: "#static_assert" }, { include: "#constructor_inline" }, { include: "#destructor_inline" }, { include: "$self" }] }, { begin: "(?<=\\}|%>|\\?\\?>)[\\s]*", beginCaptures: {}, end: `[\\s]*(?=;)|(?=(?<!\\\\)
)`, endCaptures: {}, name: "meta.tail.struct.cpp", patterns: [{ include: "$self" }] }] }, switch_conditional_parentheses: { begin: "((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\()", beginCaptures: { 1: { patterns: [{ include: "source.cpp#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 5: { name: "punctuation.section.parens.begin.bracket.round.conditional.switch.cpp" } }, end: `\\)|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.parens.end.bracket.round.conditional.switch.cpp" } }, name: "meta.conditional.switch.cpp", patterns: [{ include: "#evaluation_context" }] }, switch_statement: { begin: "((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)switch(?!\\w))", beginCaptures: { 0: { name: "meta.head.switch.cpp" }, 1: { patterns: [{ include: "source.cpp#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 5: { name: "keyword.control.switch.cpp" } }, end: `(?:(?<=\\}|%>|\\?\\?>)|(?=[;>\\[\\]=]))|(?=(?<!\\\\)
)`, endCaptures: {}, name: "meta.block.switch.cpp", patterns: [{ begin: "\\G ?", beginCaptures: {}, end: `(?:\\{|<%|\\?\\?<|(?=;))|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.block.begin.bracket.curly.switch.cpp" } }, name: "meta.head.switch.cpp", patterns: [{ include: "#switch_conditional_parentheses" }, { include: "$self" }] }, { begin: "(?<=\\{|<%|\\?\\?<)", beginCaptures: {}, end: `\\}|%>|\\?\\?>|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.block.end.bracket.curly.switch.cpp" } }, name: "meta.body.switch.cpp", patterns: [{ include: "#default_statement" }, { include: "#case_statement" }, { include: "$self" }] }, { begin: "(?<=\\}|%>|\\?\\?>)[\\s]*", beginCaptures: {}, end: `[\\s]*(?=;)|(?=(?<!\\\\)
)`, endCaptures: {}, name: "meta.tail.switch.cpp", patterns: [{ include: "$self" }] }] }, template_call_context: { patterns: [{ include: "#ever_present_context" }, { include: "#template_call_range" }, { include: "#storage_types" }, { include: "source.cpp#language_constants" }, { include: "source.cpp#scope_resolution_template_call_inner_generated" }, { include: "#operators" }, { include: "source.cpp#number_literal" }, { include: "#string_context" }, { include: "source.cpp#comma_in_template_argument" }, { include: "source.cpp#qualified_type" }] }, template_call_range: { begin: "<", beginCaptures: { 0: { name: "punctuation.section.angle-brackets.begin.template.call.cpp" } }, end: `>|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.angle-brackets.end.template.call.cpp" } }, name: "meta.template.call.cpp", patterns: [{ include: "#template_call_context" }] }, template_definition: { begin: "(?<!\\w)(template)(?:\\s+)?(<)", beginCaptures: { 1: { name: "storage.type.template.cpp" }, 2: { name: "punctuation.section.angle-brackets.begin.template.definition.cpp" } }, end: `>|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.angle-brackets.end.template.definition.cpp" } }, name: "meta.template.definition.cpp", patterns: [{ begin: "(?<=\\w)(?:\\s+)?<", beginCaptures: { 0: { name: "punctuation.section.angle-brackets.begin.template.call.cpp" } }, end: `>|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.angle-brackets.end.template.call.cpp" } }, patterns: [{ include: "#template_call_context" }] }, { include: "#template_definition_context" }] }, template_definition_context: { patterns: [{ include: "source.cpp#scope_resolution_template_definition_inner_generated" }, { include: "source.cpp#template_definition_argument" }, { include: "source.cpp#template_argument_defaulted" }, { include: "source.cpp#template_call_innards" }, { include: "#evaluation_context" }] }, ternary_operator: { applyEndPatternLast: 1, begin: "\\?", beginCaptures: { 0: { name: "keyword.operator.ternary.cpp" } }, end: `:|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "keyword.operator.ternary.cpp" } }, patterns: [{ include: "#ever_present_context" }, { include: "#string_context" }, { include: "source.cpp#number_literal" }, { include: "#method_access" }, { include: "source.cpp#member_access" }, { include: "source.cpp#predefined_macros" }, { include: "#operators" }, { include: "source.cpp#memory_operators" }, { include: "source.cpp#wordlike_operators" }, { include: "source.cpp#type_casting_operators" }, { include: "source.cpp#control_flow_keywords" }, { include: "source.cpp#exception_keywords" }, { include: "source.cpp#the_this_keyword" }, { include: "source.cpp#language_constants" }, { include: "#builtin_storage_type_initilizer" }, { include: "source.cpp#qualifiers_and_specifiers_post_parameters" }, { include: "source.cpp#functional_specifiers_pre_parameters" }, { include: "#storage_types" }, { include: "#lambdas" }, { include: "#attributes_context" }, { include: "#parentheses" }, { include: "#function_call" }, { include: "source.cpp#scope_resolution_inner_generated" }, { include: "#square_brackets" }, { include: "source.cpp#semicolon" }, { include: "source.cpp#comma" }] }, typedef_class: { begin: "((?<!\\w)typedef(?!\\w))(?:\\s+)?(?=(?<!\\w)class(?!\\w))", beginCaptures: { 1: { name: "keyword.other.typedef.cpp" } }, end: `(?<=;)|(?=(?<!\\\\)
)`, endCaptures: {}, patterns: [{ begin: "((?<!\\w)class(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(?={)|(?:((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?((?:(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*+)?(?:((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(:(?!:)))?)", beginCaptures: { 0: { name: "meta.head.class.cpp" }, 1: { name: "storage.type.$1.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { patterns: [{ include: "#attributes_context" }, { include: "source.cpp#number_literal" }] }, 7: { patterns: [{ include: "source.cpp#inline_comment" }] }, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 11: { patterns: [{ captures: { 1: { name: "storage.type.modifier.final.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "((?<!\\w)final(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))" }, { captures: { 1: { name: "entity.name.type.class.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "storage.type.modifier.final.cpp" }, 7: { patterns: [{ include: "source.cpp#inline_comment" }] }, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:((?<!\\w)final(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?(?=:|{|$)" }, { match: "DLLEXPORT", name: "entity.name.other.preprocessor.macro.predefined.DLLEXPORT.cpp" }, { match: "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*", name: "entity.name.other.preprocessor.macro.predefined.probably.$0.cpp" }] }, 12: { patterns: [{ include: "source.cpp#inline_comment" }] }, 13: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 14: { name: "comment.block.cpp" }, 15: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 16: { patterns: [{ include: "source.cpp#inline_comment" }] }, 17: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 18: { name: "comment.block.cpp" }, 19: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 20: { name: "punctuation.separator.colon.inheritance.cpp" } }, end: `(?:(?:(?<=\\}|%>|\\?\\?>)(?:\\s+)?(;)|(;))|(?=[;>\\[\\]=]))|(?=(?<!\\\\)
)`, endCaptures: { 1: { name: "punctuation.terminator.statement.cpp" }, 2: { name: "punctuation.terminator.statement.cpp" } }, name: "meta.block.class.cpp", patterns: [{ begin: "\\G ?", beginCaptures: {}, end: `(?:\\{|<%|\\?\\?<|(?=;))|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.block.begin.bracket.curly.class.cpp" } }, name: "meta.head.class.cpp", patterns: [{ include: "#ever_present_context" }, { include: "#inheritance_context" }, { include: "#template_call_range" }] }, { begin: "(?<=\\{|<%|\\?\\?<)", beginCaptures: {}, end: `\\}|%>|\\?\\?>|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.block.end.bracket.curly.class.cpp" } }, name: "meta.body.class.cpp", patterns: [{ include: "#function_pointer" }, { include: "#static_assert" }, { include: "#constructor_inline" }, { include: "#destructor_inline" }, { include: "$self" }] }, { begin: "(?<=\\}|%>|\\?\\?>)[\\s]*", beginCaptures: {}, end: `[\\s]*(?=;)|(?=(?<!\\\\)
)`, endCaptures: {}, name: "meta.tail.class.cpp", patterns: [{ captures: { 1: { patterns: [{ match: "\\*", name: "storage.modifier.pointer.cpp" }, { captures: { 1: { patterns: [{ include: "source.cpp#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "(?:\\&((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))){2,}\\&", name: "invalid.illegal.reference-type.cpp" }, { match: "\\&", name: "storage.modifier.reference.cpp" }] }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { patterns: [{ include: "source.cpp#inline_comment" }] }, 7: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 8: { name: "comment.block.cpp" }, 9: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 10: { patterns: [{ include: "source.cpp#inline_comment" }] }, 11: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 12: { name: "comment.block.cpp" }, 13: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 14: { name: "entity.name.type.alias.cpp" } }, match: "(((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))?(?:(?:&|\\*)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:&|\\*))?((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))" }, { match: "," }] }] }] }, typedef_function_pointer: { begin: "((?<!\\w)typedef(?!\\w))(?:\\s+)?(?=.*\\(\\*\\s*(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\s*\\))", beginCaptures: { 1: { name: "keyword.other.typedef.cpp" } }, end: `(?<=;)|(?=(?<!\\\\)
)`, endCaptures: {}, patterns: [{ begin: `(\\s*+((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))?((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(?:(?:(?:unsigned)|(?:signed)|(?:short)|(?:long))|(?:(?:struct)|(?:class)|(?:union)|(?:enum)))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<18>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*+)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?(?!(?:(?:transaction_safe_dynamic)|(?:__has_cpp_attribute)|(?:reinterpret_cast)|(?:transaction_safe)|(?:atomic_noexcept)|(?:atomic_commit)|(?:__has_include)|(?:atomic_cancel)|(?:synchronized)|(?:thread_local)|(?:dynamic_cast)|(?:static_cast)|(?:const_cast)|(?:constexpr)|(?:co_return)|(?:constinit)|(?:namespace)|(?:protected)|(?:consteval)|(?:constexpr)|(?:constexpr)|(?:co_return)|(?:consteval)|(?:co_await)|(?:continue)|(?:template)|(?:reflexpr)|(?:volatile)|(?:register)|(?:co_await)|(?:co_yield)|(?:restrict)|(?:noexcept)|(?:volatile)|(?:override)|(?:explicit)|(?:decltype)|(?:operator)|(?:noexcept)|(?:noexcept)|(?:typename)|(?:requires)|(?:co_yield)|(?:nullptr)|(?:alignof)|(?:alignas)|(?:default)|(?:mutable)|(?:virtual)|(?:mutable)|(?:private)|(?:include)|(?:warning)|(?:_Pragma)|(?:defined)|(?:typedef)|(?:__asm__)|(?:concept)|(?:define)|(?:module)|(?:sizeof)|(?:switch)|(?:delete)|(?:pragma)|(?:and_eq)|(?:inline)|(?:xor_eq)|(?:typeid)|(?:import)|(?:extern)|(?:public)|(?:bitand)|(?:static)|(?:export)|(?:return)|(?:friend)|(?:ifndef)|(?:not_eq)|(?:false)|(?:final)|(?:break)|(?:const)|(?:catch)|(?:endif)|(?:ifdef)|(?:undef)|(?:error)|(?:audit)|(?:while)|(?:using)|(?:axiom)|(?:or_eq)|(?:compl)|(?:throw)|(?:bitor)|(?:const)|(?:line)|(?:case)|(?:else)|(?:this)|(?:true)|(?:goto)|(?:else)|(?:NULL)|(?:elif)|(?:new)|(?:asm)|(?:xor)|(?:and)|(?:try)|(?:not)|(?:for)|(?:do)|(?:if)|(?:or)|(?:if))\\b)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\b((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<18>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)?(?![\\w<:.]))(((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))?(?:(?:&|\\*)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:&|\\*))?((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\()(\\*)(?:\\s+)?((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)?)(?:\\s+)?(?:(\\[)(\\w*)(\\])(?:\\s+)?)*(\\))(?:\\s+)?(\\()`, beginCaptures: { 1: { name: "meta.qualified_type.cpp", patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.cpp" }, { match: "(?<!\\w)(?:(?:struct)|(?:class)|(?:union)|(?:enum))(?!\\w)", name: "storage.type.$0.cpp" }, { include: "#attributes_context" }, { include: "#storage_types" }, { include: "source.cpp#number_literal" }, { include: "#string_context" }, { include: "source.cpp#comma" }, { include: "source.cpp#scope_resolution_inner_generated" }, { begin: "<", beginCaptures: { 0: { name: "punctuation.section.angle-brackets.begin.template.call.cpp" } }, end: `>|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.angle-brackets.end.template.call.cpp" } }, name: "meta.template.call.cpp", patterns: [{ include: "#template_call_context" }] }, { match: "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*", name: "entity.name.type.cpp" }] }, 2: { patterns: [{ include: "#attributes_context" }, { include: "source.cpp#number_literal" }] }, 3: { patterns: [{ include: "source.cpp#inline_comment" }] }, 4: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 5: { name: "comment.block.cpp" }, 6: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 7: { patterns: [{ include: "source.cpp#inline_comment" }] }, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 11: { patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.type.cpp" }, { match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)", name: "entity.name.scope-resolution.type.cpp" }, { include: "#template_call_range" }] }, 12: { patterns: [{ include: "#template_call_range" }] }, 13: {}, 14: { patterns: [{ include: "source.cpp#inline_comment" }] }, 15: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 16: { name: "comment.block.cpp" }, 17: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 18: {}, 19: { patterns: [{ match: "\\*", name: "storage.modifier.pointer.cpp" }, { captures: { 1: { patterns: [{ include: "source.cpp#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "(?:\\&((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))){2,}\\&", name: "invalid.illegal.reference-type.cpp" }, { match: "\\&", name: "storage.modifier.reference.cpp" }] }, 20: { patterns: [{ include: "source.cpp#inline_comment" }] }, 21: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 22: { name: "comment.block.cpp" }, 23: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 24: { patterns: [{ include: "source.cpp#inline_comment" }] }, 25: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 26: { name: "comment.block.cpp" }, 27: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 28: { patterns: [{ include: "source.cpp#inline_comment" }] }, 29: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 30: { name: "comment.block.cpp" }, 31: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 32: { name: "punctuation.section.parens.begin.bracket.round.function.pointer.cpp" }, 33: { name: "punctuation.definition.function.pointer.dereference.cpp" }, 34: { name: "entity.name.type.alias.cpp entity.name.type.pointer.function.cpp" }, 35: { name: "punctuation.definition.begin.bracket.square.cpp" }, 36: { patterns: [{ include: "#evaluation_context" }] }, 37: { name: "punctuation.definition.end.bracket.square.cpp" }, 38: { name: "punctuation.section.parens.end.bracket.round.function.pointer.cpp" }, 39: { name: "punctuation.section.parameters.begin.bracket.round.function.pointer.cpp" } }, end: `(\\))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?=[{=,);>]|\\n)(?!\\()|(?=(?<!\\\\)
)`, endCaptures: { 1: { name: "punctuation.section.parameters.end.bracket.round.function.pointer.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, patterns: [{ include: "#function_parameter_context" }] }] }, typedef_struct: { begin: "((?<!\\w)typedef(?!\\w))(?:\\s+)?(?=(?<!\\w)struct(?!\\w))", beginCaptures: { 1: { name: "keyword.other.typedef.cpp" } }, end: `(?<=;)|(?=(?<!\\\\)
)`, endCaptures: {}, patterns: [{ begin: "((?<!\\w)struct(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(?={)|(?:((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?((?:(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*+)?(?:((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(:(?!:)))?)", beginCaptures: { 0: { name: "meta.head.struct.cpp" }, 1: { name: "storage.type.$1.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { patterns: [{ include: "#attributes_context" }, { include: "source.cpp#number_literal" }] }, 7: { patterns: [{ include: "source.cpp#inline_comment" }] }, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 11: { patterns: [{ captures: { 1: { name: "storage.type.modifier.final.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "((?<!\\w)final(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))" }, { captures: { 1: { name: "entity.name.type.struct.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "storage.type.modifier.final.cpp" }, 7: { patterns: [{ include: "source.cpp#inline_comment" }] }, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:((?<!\\w)final(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?(?=:|{|$)" }, { match: "DLLEXPORT", name: "entity.name.other.preprocessor.macro.predefined.DLLEXPORT.cpp" }, { match: "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*", name: "entity.name.other.preprocessor.macro.predefined.probably.$0.cpp" }] }, 12: { patterns: [{ include: "source.cpp#inline_comment" }] }, 13: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 14: { name: "comment.block.cpp" }, 15: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 16: { patterns: [{ include: "source.cpp#inline_comment" }] }, 17: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 18: { name: "comment.block.cpp" }, 19: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 20: { name: "punctuation.separator.colon.inheritance.cpp" } }, end: `(?:(?:(?<=\\}|%>|\\?\\?>)(?:\\s+)?(;)|(;))|(?=[;>\\[\\]=]))|(?=(?<!\\\\)
)`, endCaptures: { 1: { name: "punctuation.terminator.statement.cpp" }, 2: { name: "punctuation.terminator.statement.cpp" } }, name: "meta.block.struct.cpp", patterns: [{ begin: "\\G ?", beginCaptures: {}, end: `(?:\\{|<%|\\?\\?<|(?=;))|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.block.begin.bracket.curly.struct.cpp" } }, name: "meta.head.struct.cpp", patterns: [{ include: "#ever_present_context" }, { include: "#inheritance_context" }, { include: "#template_call_range" }] }, { begin: "(?<=\\{|<%|\\?\\?<)", beginCaptures: {}, end: `\\}|%>|\\?\\?>|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.block.end.bracket.curly.struct.cpp" } }, name: "meta.body.struct.cpp", patterns: [{ include: "#function_pointer" }, { include: "#static_assert" }, { include: "#constructor_inline" }, { include: "#destructor_inline" }, { include: "$self" }] }, { begin: "(?<=\\}|%>|\\?\\?>)[\\s]*", beginCaptures: {}, end: `[\\s]*(?=;)|(?=(?<!\\\\)
)`, endCaptures: {}, name: "meta.tail.struct.cpp", patterns: [{ captures: { 1: { patterns: [{ match: "\\*", name: "storage.modifier.pointer.cpp" }, { captures: { 1: { patterns: [{ include: "source.cpp#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "(?:\\&((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))){2,}\\&", name: "invalid.illegal.reference-type.cpp" }, { match: "\\&", name: "storage.modifier.reference.cpp" }] }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { patterns: [{ include: "source.cpp#inline_comment" }] }, 7: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 8: { name: "comment.block.cpp" }, 9: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 10: { patterns: [{ include: "source.cpp#inline_comment" }] }, 11: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 12: { name: "comment.block.cpp" }, 13: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 14: { name: "entity.name.type.alias.cpp" } }, match: "(((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))?(?:(?:&|\\*)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:&|\\*))?((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))" }, { match: "," }] }] }] }, typedef_union: { begin: "((?<!\\w)typedef(?!\\w))(?:\\s+)?(?=(?<!\\w)union(?!\\w))", beginCaptures: { 1: { name: "keyword.other.typedef.cpp" } }, end: `(?<=;)|(?=(?<!\\\\)
)`, endCaptures: {}, patterns: [{ begin: "((?<!\\w)union(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(?={)|(?:((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?((?:(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*+)?(?:((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(:(?!:)))?)", beginCaptures: { 0: { name: "meta.head.union.cpp" }, 1: { name: "storage.type.$1.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { patterns: [{ include: "#attributes_context" }, { include: "source.cpp#number_literal" }] }, 7: { patterns: [{ include: "source.cpp#inline_comment" }] }, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 11: { patterns: [{ captures: { 1: { name: "storage.type.modifier.final.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "((?<!\\w)final(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))" }, { captures: { 1: { name: "entity.name.type.union.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "storage.type.modifier.final.cpp" }, 7: { patterns: [{ include: "source.cpp#inline_comment" }] }, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:((?<!\\w)final(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?(?=:|{|$)" }, { match: "DLLEXPORT", name: "entity.name.other.preprocessor.macro.predefined.DLLEXPORT.cpp" }, { match: "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*", name: "entity.name.other.preprocessor.macro.predefined.probably.$0.cpp" }] }, 12: { patterns: [{ include: "source.cpp#inline_comment" }] }, 13: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 14: { name: "comment.block.cpp" }, 15: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 16: { patterns: [{ include: "source.cpp#inline_comment" }] }, 17: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 18: { name: "comment.block.cpp" }, 19: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 20: { name: "punctuation.separator.colon.inheritance.cpp" } }, end: `(?:(?:(?<=\\}|%>|\\?\\?>)(?:\\s+)?(;)|(;))|(?=[;>\\[\\]=]))|(?=(?<!\\\\)
)`, endCaptures: { 1: { name: "punctuation.terminator.statement.cpp" }, 2: { name: "punctuation.terminator.statement.cpp" } }, name: "meta.block.union.cpp", patterns: [{ begin: "\\G ?", beginCaptures: {}, end: `(?:\\{|<%|\\?\\?<|(?=;))|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.block.begin.bracket.curly.union.cpp" } }, name: "meta.head.union.cpp", patterns: [{ include: "#ever_present_context" }, { include: "#inheritance_context" }, { include: "#template_call_range" }] }, { begin: "(?<=\\{|<%|\\?\\?<)", beginCaptures: {}, end: `\\}|%>|\\?\\?>|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.block.end.bracket.curly.union.cpp" } }, name: "meta.body.union.cpp", patterns: [{ include: "#function_pointer" }, { include: "#static_assert" }, { include: "#constructor_inline" }, { include: "#destructor_inline" }, { include: "$self" }] }, { begin: "(?<=\\}|%>|\\?\\?>)[\\s]*", beginCaptures: {}, end: `[\\s]*(?=;)|(?=(?<!\\\\)
)`, endCaptures: {}, name: "meta.tail.union.cpp", patterns: [{ captures: { 1: { patterns: [{ match: "\\*", name: "storage.modifier.pointer.cpp" }, { captures: { 1: { patterns: [{ include: "source.cpp#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "(?:\\&((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))){2,}\\&", name: "invalid.illegal.reference-type.cpp" }, { match: "\\&", name: "storage.modifier.reference.cpp" }] }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { patterns: [{ include: "source.cpp#inline_comment" }] }, 7: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 8: { name: "comment.block.cpp" }, 9: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 10: { patterns: [{ include: "source.cpp#inline_comment" }] }, 11: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 12: { name: "comment.block.cpp" }, 13: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 14: { name: "entity.name.type.alias.cpp" } }, match: "(((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))?(?:(?:&|\\*)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:&|\\*))?((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))" }, { match: "," }] }] }] }, typeid_operator: { begin: "((?<!\\w)typeid(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\()", beginCaptures: { 1: { name: "keyword.operator.functionlike.cpp keyword.operator.typeid.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "punctuation.section.arguments.begin.bracket.round.operator.typeid.cpp" } }, contentName: "meta.arguments.operator.typeid", end: `\\)|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.operator.typeid.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, union_block: { begin: "((?<!\\w)union(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(?={)|(?:((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?((?:(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*+)?(?:((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(:(?!:)))?)", beginCaptures: { 0: { name: "meta.head.union.cpp" }, 1: { name: "storage.type.$1.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { patterns: [{ include: "#attributes_context" }, { include: "source.cpp#number_literal" }] }, 7: { patterns: [{ include: "source.cpp#inline_comment" }] }, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 11: { patterns: [{ captures: { 1: { name: "storage.type.modifier.final.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "((?<!\\w)final(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))" }, { captures: { 1: { name: "entity.name.type.union.cpp" }, 2: { patterns: [{ include: "source.cpp#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "storage.type.modifier.final.cpp" }, 7: { patterns: [{ include: "source.cpp#inline_comment" }] }, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:((?<!\\w)final(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?(?=:|{|$)" }, { match: "DLLEXPORT", name: "entity.name.other.preprocessor.macro.predefined.DLLEXPORT.cpp" }, { match: "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*", name: "entity.name.other.preprocessor.macro.predefined.probably.$0.cpp" }] }, 12: { patterns: [{ include: "source.cpp#inline_comment" }] }, 13: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 14: { name: "comment.block.cpp" }, 15: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 16: { patterns: [{ include: "source.cpp#inline_comment" }] }, 17: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 18: { name: "comment.block.cpp" }, 19: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 20: { name: "punctuation.separator.colon.inheritance.cpp" } }, end: `(?:(?:(?<=\\}|%>|\\?\\?>)(?:\\s+)?(;)|(;))|(?=[;>\\[\\]=]))|(?=(?<!\\\\)
)`, endCaptures: { 1: { name: "punctuation.terminator.statement.cpp" }, 2: { name: "punctuation.terminator.statement.cpp" } }, name: "meta.block.union.cpp", patterns: [{ begin: "\\G ?", beginCaptures: {}, end: `(?:\\{|<%|\\?\\?<|(?=;))|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.block.begin.bracket.curly.union.cpp" } }, name: "meta.head.union.cpp", patterns: [{ include: "#ever_present_context" }, { include: "#inheritance_context" }, { include: "#template_call_range" }] }, { begin: "(?<=\\{|<%|\\?\\?<)", beginCaptures: {}, end: `\\}|%>|\\?\\?>|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.section.block.end.bracket.curly.union.cpp" } }, name: "meta.body.union.cpp", patterns: [{ include: "#function_pointer" }, { include: "#static_assert" }, { include: "#constructor_inline" }, { include: "#destructor_inline" }, { include: "$self" }] }, { begin: "(?<=\\}|%>|\\?\\?>)[\\s]*", beginCaptures: {}, end: `[\\s]*(?=;)|(?=(?<!\\\\)
)`, endCaptures: {}, name: "meta.tail.union.cpp", patterns: [{ include: "$self" }] }] }, using_namespace: { begin: `(?<!\\w)(using)\\s+(namespace)\\s+((::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<6>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*\\s*+)?((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(?=;|\\n)`, beginCaptures: { 1: { name: "keyword.other.using.directive.cpp" }, 2: { name: "keyword.other.namespace.directive.cpp storage.type.namespace.directive.cpp" }, 3: { patterns: [{ include: "source.cpp#scope_resolution_namespace_using_inner_generated" }] }, 4: { name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.namespace.using.cpp" }, 5: { patterns: [{ include: "#template_call_range" }] }, 6: {}, 7: { name: "entity.name.namespace.cpp" } }, end: `;|(?=(?<!\\\\)
)`, endCaptures: { 0: { name: "punctuation.terminator.statement.cpp" } }, name: "meta.using-namespace.cpp" } }, scopeName: "source.cpp.embedded.macro", embeddedLangs: ["regexp", "glsl", "sql"] });
var ee = [
  ...y,
  ...x,
  ...a,
  J
];
const ne = Object.freeze({ displayName: "C++", name: "cpp", patterns: [{ include: "#ever_present_context" }, { include: "#constructor_root" }, { include: "#destructor_root" }, { include: "#function_definition" }, { include: "#operator_overload" }, { include: "#using_namespace" }, { include: "#type_alias" }, { include: "#using_name" }, { include: "#namespace_alias" }, { include: "#namespace_block" }, { include: "#extern_block" }, { include: "#typedef_class" }, { include: "#typedef_struct" }, { include: "#typedef_union" }, { include: "#misc_keywords" }, { include: "#standard_declares" }, { include: "#class_block" }, { include: "#struct_block" }, { include: "#union_block" }, { include: "#enum_block" }, { include: "#template_isolated_definition" }, { include: "#template_definition" }, { include: "#template_explicit_instantiation" }, { include: "#access_control_keywords" }, { include: "#block" }, { include: "#static_assert" }, { include: "#assembly" }, { include: "#function_pointer" }, { include: "#evaluation_context" }], repository: { access_control_keywords: { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 3: { name: "storage.type.modifier.access.control.$4.cpp" }, 4: {}, 5: { name: "punctuation.separator.colon.access.control.cpp" } }, match: "((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(((?:(?:protected)|(?:private)|(?:public)))(?:\\s+)?(:))" }, alignas_attribute: { begin: "alignas\\(", beginCaptures: { 0: { name: "punctuation.section.attribute.begin.cpp" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.attribute.end.cpp" } }, name: "support.other.attribute.cpp", patterns: [{ include: "#attributes_context" }, { begin: "\\(", beginCaptures: {}, end: "\\)", endCaptures: {}, patterns: [{ include: "#attributes_context" }, { include: "#string_context" }, { include: "#ever_present_context" }] }, { captures: { 1: { name: "keyword.other.using.directive.cpp" }, 2: { name: "entity.name.namespace.cpp" } }, match: "(using)\\s+((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))" }, { match: ",", name: "punctuation.separator.attribute.cpp" }, { match: ":", name: "punctuation.accessor.attribute.cpp" }, { match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)(?=::)", name: "entity.name.namespace.cpp" }, { match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)", name: "entity.other.attribute.$0.cpp" }, { include: "#number_literal" }, { include: "#ever_present_context" }] }, alignas_operator: { begin: "((?<!\\w)alignas(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\()", beginCaptures: { 1: { name: "keyword.operator.functionlike.cpp keyword.operator.alignas.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "punctuation.section.arguments.begin.bracket.round.operator.alignas.cpp" } }, contentName: "meta.arguments.operator.alignas", end: "\\)", endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.operator.alignas.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, alignof_operator: { begin: "((?<!\\w)alignof(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\()", beginCaptures: { 1: { name: "keyword.operator.functionlike.cpp keyword.operator.alignof.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "punctuation.section.arguments.begin.bracket.round.operator.alignof.cpp" } }, contentName: "meta.arguments.operator.alignof", end: "\\)", endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.operator.alignof.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, assembly: { begin: "(\\b(?:__asm__|asm)\\b)(?:\\s+)?((?:volatile)?)", beginCaptures: { 1: { name: "storage.type.asm.cpp" }, 2: { name: "storage.modifier.cpp" } }, end: "(?!\\G)", endCaptures: {}, name: "meta.asm.cpp", patterns: [{ captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "^((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:\\n|$)" }, { include: "#comments" }, { begin: "((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))\\(", beginCaptures: { 0: { name: "punctuation.section.parens.begin.bracket.round.assembly.cpp" }, 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.parens.end.bracket.round.assembly.cpp" } }, patterns: [{ begin: '(R?)(")', beginCaptures: { 1: { name: "meta.encoding.cpp" }, 2: { name: "punctuation.definition.string.begin.assembly.cpp" } }, contentName: "meta.embedded.assembly", end: '"', endCaptures: { 0: { name: "punctuation.definition.string.end.assembly.cpp" } }, name: "string.quoted.double.cpp", patterns: [{ include: "source.asm" }, { include: "source.x86" }, { include: "source.x86_64" }, { include: "source.arm" }, { include: "#backslash_escapes" }, { include: "#string_escaped_char" }] }, { begin: "\\(", beginCaptures: { 0: { name: "punctuation.section.parens.begin.bracket.round.assembly.inner.cpp" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.parens.end.bracket.round.assembly.inner.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 5: { name: "variable.other.asm.label.cpp" }, 6: { patterns: [{ include: "#inline_comment" }] }, 7: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 8: { name: "comment.block.cpp" }, 9: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\[((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))\\]" }, { match: ":", name: "punctuation.separator.delimiter.colon.assembly.cpp" }, { include: "#comments" }] }] }, assignment_operator: { match: "\\=", name: "keyword.operator.assignment.cpp" }, attributes_context: { patterns: [{ include: "#cpp_attributes" }, { include: "#gcc_attributes" }, { include: "#ms_attributes" }, { include: "#alignas_attribute" }] }, backslash_escapes: { match: `(?x)\\\\ (
\\\\			 |
[abefnprtv'"?]   |
[0-3][0-7]{,2}	 |
[4-7]\\d?		|
x[a-fA-F0-9]{,2} |
u[a-fA-F0-9]{,4} |
U[a-fA-F0-9]{,8} )`, name: "constant.character.escape" }, block: { begin: "{", beginCaptures: { 0: { name: "punctuation.section.block.begin.bracket.curly.cpp" } }, end: "}", endCaptures: { 0: { name: "punctuation.section.block.end.bracket.curly.cpp" } }, name: "meta.block.cpp", patterns: [{ include: "#function_body_context" }] }, block_comment: { begin: "\\s*+(\\/\\*)", beginCaptures: { 1: { name: "punctuation.definition.comment.begin.cpp" } }, end: "\\*\\/", endCaptures: { 0: { name: "punctuation.definition.comment.end.cpp" } }, name: "comment.block.cpp" }, builtin_storage_type_initilizer: { begin: "\\s*+(?<!\\w)(?:(?:(?:((?:(?:unsigned)|(?:wchar_t)|(?:double)|(?:signed)|(?:short)|(?:float)|(?:auto)|(?:void)|(?:long)|(?:char)|(?:bool)|(?:int)))|((?:(?:uint_least32_t)|(?:uint_least64_t)|(?:uint_least16_t)|(?:uint_fast64_t)|(?:uint_least8_t)|(?:int_least64_t)|(?:int_least32_t)|(?:int_least16_t)|(?:uint_fast16_t)|(?:uint_fast32_t)|(?:int_least8_t)|(?:int_fast16_t)|(?:int_fast32_t)|(?:int_fast64_t)|(?:uint_fast8_t)|(?:int_fast8_t)|(?:suseconds_t)|(?:useconds_t)|(?:uintmax_t)|(?:uintmax_t)|(?:in_port_t)|(?:uintmax_t)|(?:in_addr_t)|(?:blksize_t)|(?:uintptr_t)|(?:intmax_t)|(?:intptr_t)|(?:blkcnt_t)|(?:intmax_t)|(?:u_quad_t)|(?:uint16_t)|(?:uint32_t)|(?:uint64_t)|(?:ssize_t)|(?:fixpt_t)|(?:qaddr_t)|(?:u_short)|(?:int16_t)|(?:int32_t)|(?:int64_t)|(?:uint8_t)|(?:daddr_t)|(?:caddr_t)|(?:swblk_t)|(?:clock_t)|(?:segsz_t)|(?:nlink_t)|(?:time_t)|(?:u_long)|(?:ushort)|(?:quad_t)|(?:mode_t)|(?:size_t)|(?:u_char)|(?:int8_t)|(?:u_int)|(?:uid_t)|(?:off_t)|(?:pid_t)|(?:gid_t)|(?:dev_t)|(?:div_t)|(?:key_t)|(?:ino_t)|(?:id_t)|(?:id_t)|(?:uint))))|((?:(?:pthread_rwlockattr_t)|(?:pthread_mutexattr_t)|(?:pthread_condattr_t)|(?:pthread_rwlock_t)|(?:pthread_mutex_t)|(?:pthread_cond_t)|(?:pthread_attr_t)|(?:pthread_once_t)|(?:pthread_key_t)|(?:pthread_t))))|([a-zA-Z_]\\w*_t))(?!\\w)\\s*+(?<!\\w)(\\()", beginCaptures: { 1: { name: "storage.type.primitive.cpp storage.type.built-in.primitive.cpp" }, 2: { name: "storage.type.cpp storage.type.built-in.cpp" }, 3: { name: "support.type.posix-reserved.pthread.cpp support.type.built-in.posix-reserved.pthread.cpp" }, 4: { name: "support.type.posix-reserved.cpp support.type.built-in.posix-reserved.cpp" }, 5: { name: "punctuation.section.arguments.begin.bracket.round.initializer.cpp" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.initializer.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, case_statement: { begin: "((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)case(?!\\w))", beginCaptures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 5: { name: "keyword.control.case.cpp" } }, end: ":", endCaptures: { 0: { name: "punctuation.separator.colon.case.cpp" } }, name: "meta.conditional.case.cpp", patterns: [{ include: "#evaluation_context" }] }, class_block: { begin: "((?<!\\w)class(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(?={)|(?:((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?((?:(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*+)?(?:((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(:(?!:)))?)", beginCaptures: { 0: { name: "meta.head.class.cpp" }, 1: { name: "storage.type.$1.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { patterns: [{ include: "#attributes_context" }, { include: "#number_literal" }] }, 7: { patterns: [{ include: "#inline_comment" }] }, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 11: { patterns: [{ captures: { 1: { name: "storage.type.modifier.final.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "((?<!\\w)final(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))" }, { captures: { 1: { name: "entity.name.type.class.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "storage.type.modifier.final.cpp" }, 7: { patterns: [{ include: "#inline_comment" }] }, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:((?<!\\w)final(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?(?=:|{|$)" }, { match: "DLLEXPORT", name: "entity.name.other.preprocessor.macro.predefined.DLLEXPORT.cpp" }, { match: "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*", name: "entity.name.other.preprocessor.macro.predefined.probably.$0.cpp" }] }, 12: { patterns: [{ include: "#inline_comment" }] }, 13: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 14: { name: "comment.block.cpp" }, 15: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 16: { patterns: [{ include: "#inline_comment" }] }, 17: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 18: { name: "comment.block.cpp" }, 19: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 20: { name: "punctuation.separator.colon.inheritance.cpp" } }, end: "(?:(?:(?<=\\}|%>|\\?\\?>)(?:\\s+)?(;)|(;))|(?=[;>\\[\\]=]))", endCaptures: { 1: { name: "punctuation.terminator.statement.cpp" }, 2: { name: "punctuation.terminator.statement.cpp" } }, name: "meta.block.class.cpp", patterns: [{ begin: "\\G ?", beginCaptures: {}, end: "(?:\\{|<%|\\?\\?<|(?=;))", endCaptures: { 0: { name: "punctuation.section.block.begin.bracket.curly.class.cpp" } }, name: "meta.head.class.cpp", patterns: [{ include: "#ever_present_context" }, { include: "#inheritance_context" }, { include: "#template_call_range" }] }, { begin: "(?<=\\{|<%|\\?\\?<)", beginCaptures: {}, end: "\\}|%>|\\?\\?>", endCaptures: { 0: { name: "punctuation.section.block.end.bracket.curly.class.cpp" } }, name: "meta.body.class.cpp", patterns: [{ include: "#function_pointer" }, { include: "#static_assert" }, { include: "#constructor_inline" }, { include: "#destructor_inline" }, { include: "$self" }] }, { begin: "(?<=\\}|%>|\\?\\?>)[\\s]*", beginCaptures: {}, end: "[\\s]*(?=;)", endCaptures: {}, name: "meta.tail.class.cpp", patterns: [{ include: "$self" }] }] }, class_declare: { captures: { 1: { name: "storage.type.class.declare.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 4: { name: "entity.name.type.class.cpp" }, 5: { patterns: [{ match: "\\*", name: "storage.modifier.pointer.cpp" }, { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "(?:\\&((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))){2,}\\&", name: "invalid.illegal.reference-type.cpp" }, { match: "\\&", name: "storage.modifier.reference.cpp" }] }, 6: { patterns: [{ include: "#inline_comment" }] }, 7: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 8: { patterns: [{ include: "#inline_comment" }] }, 9: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 10: { patterns: [{ include: "#inline_comment" }] }, 11: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 12: { name: "variable.other.object.declare.cpp" }, 13: { patterns: [{ include: "#inline_comment" }] }, 14: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] } }, match: "((?<!\\w)class(?!\\w))((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))?(?:(?:&|\\*)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:&|\\*))?((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))\\b(?!override\\W|override\\$|final\\W|final\\$)((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?=\\S)(?![:{a-zA-Z])" }, comma: { match: ",", name: "punctuation.separator.delimiter.comma.cpp" }, comma_in_template_argument: { match: ",", name: "punctuation.separator.delimiter.comma.template.argument.cpp" }, comments: { patterns: [{ begin: "^(?:\\s+)?+(\\/\\/[!\\/]+)", beginCaptures: { 1: { name: "punctuation.definition.comment.documentation.cpp" } }, end: "(?<=\\n)(?<!\\\\\\n)", endCaptures: {}, name: "comment.line.double-slash.documentation.cpp", patterns: [{ include: "#line_continuation_character" }, { match: '(?<=[\\s*!\\/])[\\\\@](?:callergraph|callgraph|else|endif|f\\$|f\\[|f\\]|hidecallergraph|hidecallgraph|hiderefby|hiderefs|hideinitializer|htmlinclude|n|nosubgrouping|private|privatesection|protected|protectedsection|public|publicsection|pure|showinitializer|showrefby|showrefs|tableofcontents|\\$|\\#|<|>|%|"|\\.|=|::|\\||\\-\\-|\\-\\-\\-)\\b(?:\\{[^}]*\\})?', name: "storage.type.class.doxygen.cpp" }, { captures: { 1: { name: "storage.type.class.doxygen.cpp" }, 2: { name: "markup.italic.doxygen.cpp" } }, match: "((?<=[\\s*!\\/])[\\\\@](?:a|em|e))\\s+(\\S+)" }, { captures: { 1: { name: "storage.type.class.doxygen.cpp" }, 2: { name: "markup.bold.doxygen.cpp" } }, match: "((?<=[\\s*!\\/])[\\\\@]b)\\s+(\\S+)" }, { captures: { 1: { name: "storage.type.class.doxygen.cpp" }, 2: { name: "markup.inline.raw.string.cpp" } }, match: "((?<=[\\s*!\\/])[\\\\@](?:c|p))\\s+(\\S+)" }, { match: "(?<=[\\s*!\\/])[\\\\@](?:a|anchor|b|c|cite|copybrief|copydetail|copydoc|def|dir|dontinclude|e|em|emoji|enum|example|extends|file|idlexcept|implements|include|includedoc|includelineno|latexinclude|link|memberof|namespace|p|package|ref|refitem|related|relates|relatedalso|relatesalso|verbinclude)\\b(?:\\{[^}]*\\})?", name: "storage.type.class.doxygen.cpp" }, { match: "(?<=[\\s*!\\/])[\\\\@](?:addindex|addtogroup|category|class|defgroup|diafile|dotfile|elseif|fn|headerfile|if|ifnot|image|ingroup|interface|line|mainpage|mscfile|name|overload|page|property|protocol|section|skip|skipline|snippet|snippetdoc|snippetlineno|struct|subpage|subsection|subsubsection|typedef|union|until|vhdlflow|weakgroup)\\b(?:\\{[^}]*\\})?", name: "storage.type.class.doxygen.cpp" }, { captures: { 1: { name: "storage.type.class.doxygen.cpp" }, 2: { patterns: [{ match: "in|out", name: "keyword.other.parameter.direction.$0.cpp" }] }, 3: { patterns: [{ match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)", name: "variable.parameter.cpp" }, { match: ",", name: "punctuation.cpp" }] }, 4: { name: "variable.parameter.cpp" }, 5: { name: "punctuation.cpp" }, 6: { name: "variable.parameter.cpp" } }, match: "((?<=[\\s*!\\/])[\\\\@]param)(?:\\s*\\[((?:,?(?:\\s+)?(?:in|out)(?:\\s+)?)+)\\])?(\\s+((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(?:(,)(?:\\s+)?((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)))*)" }, { match: "(?<=[\\s*!\\/])[\\\\@](?:arg|attention|author|authors|brief|bug|copyright|date|deprecated|details|exception|invariant|li|note|par|paragraph|param|post|pre|remark|remarks|result|return|returns|retval|sa|see|short|since|test|throw|throws|todo|tparam|version|warning|xrefitem)\\b(?:\\{[^}]*\\})?", name: "storage.type.class.doxygen.cpp" }, { match: "(?<=[\\s*!\\/])[\\\\@](?:code|cond|docbookonly|dot|htmlonly|internal|latexonly|link|manonly|msc|parblock|rtfonly|secreflist|startuml|verbatim|xmlonly|endcode|endcond|enddocbookonly|enddot|endhtmlonly|endinternal|endlatexonly|endlink|endmanonly|endmsc|endparblock|endrtfonly|endsecreflist|enduml|endverbatim|endxmlonly)\\b(?:\\{[^}]*\\})?", name: "storage.type.class.doxygen.cpp" }, { match: "(?:\\b[A-Z]+:|@[a-z_]+:)", name: "storage.type.class.gtkdoc.cpp" }] }, { captures: { 1: { name: "punctuation.definition.comment.begin.documentation.cpp" }, 2: { patterns: [{ match: '(?<=[\\s*!\\/])[\\\\@](?:callergraph|callgraph|else|endif|f\\$|f\\[|f\\]|hidecallergraph|hidecallgraph|hiderefby|hiderefs|hideinitializer|htmlinclude|n|nosubgrouping|private|privatesection|protected|protectedsection|public|publicsection|pure|showinitializer|showrefby|showrefs|tableofcontents|\\$|\\#|<|>|%|"|\\.|=|::|\\||\\-\\-|\\-\\-\\-)\\b(?:\\{[^}]*\\})?', name: "storage.type.class.doxygen.cpp" }, { captures: { 1: { name: "storage.type.class.doxygen.cpp" }, 2: { name: "markup.italic.doxygen.cpp" } }, match: "((?<=[\\s*!\\/])[\\\\@](?:a|em|e))\\s+(\\S+)" }, { captures: { 1: { name: "storage.type.class.doxygen.cpp" }, 2: { name: "markup.bold.doxygen.cpp" } }, match: "((?<=[\\s*!\\/])[\\\\@]b)\\s+(\\S+)" }, { captures: { 1: { name: "storage.type.class.doxygen.cpp" }, 2: { name: "markup.inline.raw.string.cpp" } }, match: "((?<=[\\s*!\\/])[\\\\@](?:c|p))\\s+(\\S+)" }, { match: "(?<=[\\s*!\\/])[\\\\@](?:a|anchor|b|c|cite|copybrief|copydetail|copydoc|def|dir|dontinclude|e|em|emoji|enum|example|extends|file|idlexcept|implements|include|includedoc|includelineno|latexinclude|link|memberof|namespace|p|package|ref|refitem|related|relates|relatedalso|relatesalso|verbinclude)\\b(?:\\{[^}]*\\})?", name: "storage.type.class.doxygen.cpp" }, { match: "(?<=[\\s*!\\/])[\\\\@](?:addindex|addtogroup|category|class|defgroup|diafile|dotfile|elseif|fn|headerfile|if|ifnot|image|ingroup|interface|line|mainpage|mscfile|name|overload|page|property|protocol|section|skip|skipline|snippet|snippetdoc|snippetlineno|struct|subpage|subsection|subsubsection|typedef|union|until|vhdlflow|weakgroup)\\b(?:\\{[^}]*\\})?", name: "storage.type.class.doxygen.cpp" }, { captures: { 1: { name: "storage.type.class.doxygen.cpp" }, 2: { patterns: [{ match: "in|out", name: "keyword.other.parameter.direction.$0.cpp" }] }, 3: { patterns: [{ match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)", name: "variable.parameter.cpp" }, { match: ",", name: "punctuation.cpp" }] }, 4: { name: "variable.parameter.cpp" }, 5: { name: "punctuation.cpp" }, 6: { name: "variable.parameter.cpp" } }, match: "((?<=[\\s*!\\/])[\\\\@]param)(?:\\s*\\[((?:,?(?:\\s+)?(?:in|out)(?:\\s+)?)+)\\])?(\\s+((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(?:(,)(?:\\s+)?((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)))*)" }, { match: "(?<=[\\s*!\\/])[\\\\@](?:arg|attention|author|authors|brief|bug|copyright|date|deprecated|details|exception|invariant|li|note|par|paragraph|param|post|pre|remark|remarks|result|return|returns|retval|sa|see|short|since|test|throw|throws|todo|tparam|version|warning|xrefitem)\\b(?:\\{[^}]*\\})?", name: "storage.type.class.doxygen.cpp" }, { match: "(?<=[\\s*!\\/])[\\\\@](?:code|cond|docbookonly|dot|htmlonly|internal|latexonly|link|manonly|msc|parblock|rtfonly|secreflist|startuml|verbatim|xmlonly|endcode|endcond|enddocbookonly|enddot|endhtmlonly|endinternal|endlatexonly|endlink|endmanonly|endmsc|endparblock|endrtfonly|endsecreflist|enduml|endverbatim|endxmlonly)\\b(?:\\{[^}]*\\})?", name: "storage.type.class.doxygen.cpp" }, { match: "(?:\\b[A-Z]+:|@[a-z_]+:)", name: "storage.type.class.gtkdoc.cpp" }] }, 3: { name: "punctuation.definition.comment.end.documentation.cpp" } }, match: "(\\/\\*[!*]+(?=\\s))(.+)([!*]*\\*\\/)", name: "comment.block.documentation.cpp" }, { begin: "(?:\\s+)?+\\/\\*[!*]+(?:(?:\\n|$)|(?=\\s))", beginCaptures: { 0: { name: "punctuation.definition.comment.begin.documentation.cpp" } }, end: "[!*]*\\*\\/", endCaptures: { 0: { name: "punctuation.definition.comment.end.documentation.cpp" } }, name: "comment.block.documentation.cpp", patterns: [{ match: '(?<=[\\s*!\\/])[\\\\@](?:callergraph|callgraph|else|endif|f\\$|f\\[|f\\]|hidecallergraph|hidecallgraph|hiderefby|hiderefs|hideinitializer|htmlinclude|n|nosubgrouping|private|privatesection|protected|protectedsection|public|publicsection|pure|showinitializer|showrefby|showrefs|tableofcontents|\\$|\\#|<|>|%|"|\\.|=|::|\\||\\-\\-|\\-\\-\\-)\\b(?:\\{[^}]*\\})?', name: "storage.type.class.doxygen.cpp" }, { captures: { 1: { name: "storage.type.class.doxygen.cpp" }, 2: { name: "markup.italic.doxygen.cpp" } }, match: "((?<=[\\s*!\\/])[\\\\@](?:a|em|e))\\s+(\\S+)" }, { captures: { 1: { name: "storage.type.class.doxygen.cpp" }, 2: { name: "markup.bold.doxygen.cpp" } }, match: "((?<=[\\s*!\\/])[\\\\@]b)\\s+(\\S+)" }, { captures: { 1: { name: "storage.type.class.doxygen.cpp" }, 2: { name: "markup.inline.raw.string.cpp" } }, match: "((?<=[\\s*!\\/])[\\\\@](?:c|p))\\s+(\\S+)" }, { match: "(?<=[\\s*!\\/])[\\\\@](?:a|anchor|b|c|cite|copybrief|copydetail|copydoc|def|dir|dontinclude|e|em|emoji|enum|example|extends|file|idlexcept|implements|include|includedoc|includelineno|latexinclude|link|memberof|namespace|p|package|ref|refitem|related|relates|relatedalso|relatesalso|verbinclude)\\b(?:\\{[^}]*\\})?", name: "storage.type.class.doxygen.cpp" }, { match: "(?<=[\\s*!\\/])[\\\\@](?:addindex|addtogroup|category|class|defgroup|diafile|dotfile|elseif|fn|headerfile|if|ifnot|image|ingroup|interface|line|mainpage|mscfile|name|overload|page|property|protocol|section|skip|skipline|snippet|snippetdoc|snippetlineno|struct|subpage|subsection|subsubsection|typedef|union|until|vhdlflow|weakgroup)\\b(?:\\{[^}]*\\})?", name: "storage.type.class.doxygen.cpp" }, { captures: { 1: { name: "storage.type.class.doxygen.cpp" }, 2: { patterns: [{ match: "in|out", name: "keyword.other.parameter.direction.$0.cpp" }] }, 3: { patterns: [{ match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)", name: "variable.parameter.cpp" }, { match: ",", name: "punctuation.cpp" }] }, 4: { name: "variable.parameter.cpp" }, 5: { name: "punctuation.cpp" }, 6: { name: "variable.parameter.cpp" } }, match: "((?<=[\\s*!\\/])[\\\\@]param)(?:\\s*\\[((?:,?(?:\\s+)?(?:in|out)(?:\\s+)?)+)\\])?(\\s+((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(?:(,)(?:\\s+)?((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)))*)" }, { match: "(?<=[\\s*!\\/])[\\\\@](?:arg|attention|author|authors|brief|bug|copyright|date|deprecated|details|exception|invariant|li|note|par|paragraph|param|post|pre|remark|remarks|result|return|returns|retval|sa|see|short|since|test|throw|throws|todo|tparam|version|warning|xrefitem)\\b(?:\\{[^}]*\\})?", name: "storage.type.class.doxygen.cpp" }, { match: "(?<=[\\s*!\\/])[\\\\@](?:code|cond|docbookonly|dot|htmlonly|internal|latexonly|link|manonly|msc|parblock|rtfonly|secreflist|startuml|verbatim|xmlonly|endcode|endcond|enddocbookonly|enddot|endhtmlonly|endinternal|endlatexonly|endlink|endmanonly|endmsc|endparblock|endrtfonly|endsecreflist|enduml|endverbatim|endxmlonly)\\b(?:\\{[^}]*\\})?", name: "storage.type.class.doxygen.cpp" }, { match: "(?:\\b[A-Z]+:|@[a-z_]+:)", name: "storage.type.class.gtkdoc.cpp" }] }, { include: "#emacs_file_banner" }, { include: "#block_comment" }, { include: "#line_comment" }, { include: "#invalid_comment_end" }] }, constructor_inline: { begin: "^((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?:(?:(?:constexpr)|(?:consteval)|(?:explicit)|(?:mutable)|(?:virtual)|(?:inline)|(?:friend))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*)((?:__cdecl|__clrcall|__stdcall|__fastcall|__thiscall|__vectorcall)?)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)(?=\\())", beginCaptures: { 0: { name: "meta.head.function.definition.special.constructor.cpp" }, 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 5: { patterns: [{ include: "#functional_specifiers_pre_parameters" }] }, 6: { patterns: [{ include: "#inline_comment" }] }, 7: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 8: { name: "comment.block.cpp" }, 9: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 10: { name: "storage.type.modifier.calling-convention.cpp" }, 11: { patterns: [{ include: "#inline_comment" }] }, 12: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 13: { name: "comment.block.cpp" }, 14: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 15: { name: "entity.name.function.constructor.cpp entity.name.function.definition.special.constructor.cpp" } }, end: "(?:(?<=\\}|%>|\\?\\?>)|(?=[;>\\[\\]=]))", endCaptures: {}, name: "meta.function.definition.special.constructor.cpp", patterns: [{ begin: "\\G ?", beginCaptures: {}, end: "(?:\\{|<%|\\?\\?<|(?=;))", endCaptures: { 0: { name: "punctuation.section.block.begin.bracket.curly.function.definition.special.constructor.cpp" } }, name: "meta.head.function.definition.special.constructor.cpp", patterns: [{ include: "#ever_present_context" }, { captures: { 1: { name: "keyword.operator.assignment.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "keyword.other.default.function.cpp keyword.other.default.constructor.cpp" }, 7: { name: "keyword.other.delete.function.cpp keyword.other.delete.constructor.cpp" } }, match: "(\\=)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(default)|(delete))" }, { include: "#functional_specifiers_pre_parameters" }, { begin: ":", beginCaptures: { 0: { name: "punctuation.separator.initializers.cpp" } }, end: "(?=\\{)", endCaptures: {}, patterns: [{ begin: `((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(((?<!<)<(?!<)(?:(?:(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/)))|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<3>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?(\\()`, beginCaptures: { 1: { name: "entity.name.function.call.initializer.cpp" }, 2: { name: "meta.template.call.cpp", patterns: [{ include: "#template_call_range" }] }, 3: {}, 4: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 5: { name: "comment.block.cpp" }, 6: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 7: { name: "punctuation.section.arguments.begin.bracket.round.function.call.initializer.cpp" } }, contentName: "meta.parameter.initialization", end: "\\)", endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.function.call.initializer.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, { begin: "((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(\\{)", beginCaptures: { 1: { name: "entity.name.function.call.initializer.cpp" }, 2: { name: "punctuation.section.arguments.begin.bracket.round.function.call.initializer.cpp" } }, contentName: "meta.parameter.initialization", end: "\\}", endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.function.call.initializer.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, { match: ",", name: "punctuation.separator.delimiter.comma.cpp" }, { include: "#comments" }] }, { begin: "\\(", beginCaptures: { 0: { name: "punctuation.section.parameters.begin.bracket.round.special.constructor.cpp" } }, contentName: "meta.function.definition.parameters.special.constructor", end: "\\)", endCaptures: { 0: { name: "punctuation.section.parameters.end.bracket.round.special.constructor.cpp" } }, patterns: [{ include: "#function_parameter_context" }, { include: "#evaluation_context" }] }, { include: "#qualifiers_and_specifiers_post_parameters" }, { include: "$self" }] }, { begin: "(?<=\\{|<%|\\?\\?<)", beginCaptures: {}, end: "\\}|%>|\\?\\?>", endCaptures: { 0: { name: "punctuation.section.block.end.bracket.curly.function.definition.special.constructor.cpp" } }, name: "meta.body.function.definition.special.constructor.cpp", patterns: [{ include: "#function_body_context" }] }, { begin: "(?<=\\}|%>|\\?\\?>)[\\s]*", beginCaptures: {}, end: "[\\s]*(?=;)", endCaptures: {}, name: "meta.tail.function.definition.special.constructor.cpp", patterns: [{ include: "$self" }] }] }, constructor_root: { begin: `\\s*+((?:__cdecl|__clrcall|__stdcall|__fastcall|__thiscall|__vectorcall)?)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<8>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*+)(((?>(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))::((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:\\10)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?=\\())`, beginCaptures: { 0: { name: "meta.head.function.definition.special.constructor.cpp" }, 1: { name: "storage.type.modifier.calling-convention.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.constructor.cpp" }, { match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)", name: "entity.name.scope-resolution.constructor.cpp" }, { include: "#template_call_range" }] }, 7: { patterns: [{ include: "#template_call_range" }] }, 8: {}, 9: { patterns: [{ match: "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?=:)", name: "entity.name.type.constructor.cpp" }, { match: "(?<=:)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*", name: "entity.name.function.definition.special.constructor.cpp" }, { match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.constructor.cpp" }] }, 10: {}, 11: { patterns: [{ include: "#inline_comment" }] }, 12: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 13: { name: "comment.block.cpp" }, 14: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 15: { patterns: [{ include: "#inline_comment" }] }, 16: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 17: { name: "comment.block.cpp" }, 18: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 19: { patterns: [{ include: "#inline_comment" }] }, 20: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 21: { name: "comment.block.cpp" }, 22: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, end: "(?:(?<=\\}|%>|\\?\\?>)|(?=[;>\\[\\]=]))", endCaptures: {}, name: "meta.function.definition.special.constructor.cpp", patterns: [{ begin: "\\G ?", beginCaptures: {}, end: "(?:\\{|<%|\\?\\?<|(?=;))", endCaptures: { 0: { name: "punctuation.section.block.begin.bracket.curly.function.definition.special.constructor.cpp" } }, name: "meta.head.function.definition.special.constructor.cpp", patterns: [{ include: "#ever_present_context" }, { captures: { 1: { name: "keyword.operator.assignment.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "keyword.other.default.function.cpp keyword.other.default.constructor.cpp" }, 7: { name: "keyword.other.delete.function.cpp keyword.other.delete.constructor.cpp" } }, match: "(\\=)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(default)|(delete))" }, { include: "#functional_specifiers_pre_parameters" }, { begin: ":", beginCaptures: { 0: { name: "punctuation.separator.initializers.cpp" } }, end: "(?=\\{)", endCaptures: {}, patterns: [{ begin: `((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(((?<!<)<(?!<)(?:(?:(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/)))|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<3>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?(\\()`, beginCaptures: { 1: { name: "entity.name.function.call.initializer.cpp" }, 2: { name: "meta.template.call.cpp", patterns: [{ include: "#template_call_range" }] }, 3: {}, 4: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 5: { name: "comment.block.cpp" }, 6: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 7: { name: "punctuation.section.arguments.begin.bracket.round.function.call.initializer.cpp" } }, contentName: "meta.parameter.initialization", end: "\\)", endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.function.call.initializer.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, { begin: "((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(\\{)", beginCaptures: { 1: { name: "entity.name.function.call.initializer.cpp" }, 2: { name: "punctuation.section.arguments.begin.bracket.round.function.call.initializer.cpp" } }, contentName: "meta.parameter.initialization", end: "\\}", endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.function.call.initializer.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, { match: ",", name: "punctuation.separator.delimiter.comma.cpp" }, { include: "#comments" }] }, { begin: "\\(", beginCaptures: { 0: { name: "punctuation.section.parameters.begin.bracket.round.special.constructor.cpp" } }, contentName: "meta.function.definition.parameters.special.constructor", end: "\\)", endCaptures: { 0: { name: "punctuation.section.parameters.end.bracket.round.special.constructor.cpp" } }, patterns: [{ include: "#function_parameter_context" }, { include: "#evaluation_context" }] }, { include: "#qualifiers_and_specifiers_post_parameters" }, { include: "$self" }] }, { begin: "(?<=\\{|<%|\\?\\?<)", beginCaptures: {}, end: "\\}|%>|\\?\\?>", endCaptures: { 0: { name: "punctuation.section.block.end.bracket.curly.function.definition.special.constructor.cpp" } }, name: "meta.body.function.definition.special.constructor.cpp", patterns: [{ include: "#function_body_context" }] }, { begin: "(?<=\\}|%>|\\?\\?>)[\\s]*", beginCaptures: {}, end: "[\\s]*(?=;)", endCaptures: {}, name: "meta.tail.function.definition.special.constructor.cpp", patterns: [{ include: "$self" }] }] }, control_flow_keywords: { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 3: { name: "keyword.control.$3.cpp" } }, match: "((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)(?:(?:co_return)|(?:co_yield)|(?:co_await)|(?:continue)|(?:default)|(?:switch)|(?:return)|(?:catch)|(?:while)|(?:throw)|(?:break)|(?:case)|(?:goto)|(?:else)|(?:for)|(?:try)|(?:if)|(?:do))(?!\\w))" }, cpp_attributes: { begin: "\\[\\[", beginCaptures: { 0: { name: "punctuation.section.attribute.begin.cpp" } }, end: "\\]\\]", endCaptures: { 0: { name: "punctuation.section.attribute.end.cpp" } }, name: "support.other.attribute.cpp", patterns: [{ include: "#attributes_context" }, { begin: "\\(", beginCaptures: {}, end: "\\)", endCaptures: {}, patterns: [{ include: "#attributes_context" }, { include: "#string_context" }, { include: "#ever_present_context" }] }, { captures: { 1: { name: "keyword.other.using.directive.cpp" }, 2: { name: "entity.name.namespace.cpp" } }, match: "(using)\\s+((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))" }, { match: ",", name: "punctuation.separator.attribute.cpp" }, { match: ":", name: "punctuation.accessor.attribute.cpp" }, { match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)(?=::)", name: "entity.name.namespace.cpp" }, { match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)", name: "entity.other.attribute.$0.cpp" }, { include: "#number_literal" }, { include: "#ever_present_context" }] }, curly_initializer: { begin: `(\\s*+((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))?((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(?:(?:(?:unsigned)|(?:signed)|(?:short)|(?:long))|(?:(?:struct)|(?:class)|(?:union)|(?:enum)))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<18>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*+)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?(?!(?:(?:transaction_safe_dynamic)|(?:__has_cpp_attribute)|(?:reinterpret_cast)|(?:transaction_safe)|(?:atomic_noexcept)|(?:atomic_commit)|(?:__has_include)|(?:atomic_cancel)|(?:synchronized)|(?:thread_local)|(?:dynamic_cast)|(?:static_cast)|(?:const_cast)|(?:constexpr)|(?:co_return)|(?:constinit)|(?:namespace)|(?:protected)|(?:consteval)|(?:constexpr)|(?:constexpr)|(?:co_return)|(?:consteval)|(?:co_await)|(?:continue)|(?:template)|(?:reflexpr)|(?:volatile)|(?:register)|(?:co_await)|(?:co_yield)|(?:restrict)|(?:noexcept)|(?:volatile)|(?:override)|(?:explicit)|(?:decltype)|(?:operator)|(?:noexcept)|(?:noexcept)|(?:typename)|(?:requires)|(?:co_yield)|(?:nullptr)|(?:alignof)|(?:alignas)|(?:default)|(?:mutable)|(?:virtual)|(?:mutable)|(?:private)|(?:include)|(?:warning)|(?:_Pragma)|(?:defined)|(?:typedef)|(?:__asm__)|(?:concept)|(?:define)|(?:module)|(?:sizeof)|(?:switch)|(?:delete)|(?:pragma)|(?:and_eq)|(?:inline)|(?:xor_eq)|(?:typeid)|(?:import)|(?:extern)|(?:public)|(?:bitand)|(?:static)|(?:export)|(?:return)|(?:friend)|(?:ifndef)|(?:not_eq)|(?:false)|(?:final)|(?:break)|(?:const)|(?:catch)|(?:endif)|(?:ifdef)|(?:undef)|(?:error)|(?:audit)|(?:while)|(?:using)|(?:axiom)|(?:or_eq)|(?:compl)|(?:throw)|(?:bitor)|(?:const)|(?:line)|(?:case)|(?:else)|(?:this)|(?:true)|(?:goto)|(?:else)|(?:NULL)|(?:elif)|(?:new)|(?:asm)|(?:xor)|(?:and)|(?:try)|(?:not)|(?:for)|(?:do)|(?:if)|(?:or)|(?:if))\\b)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\b((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<18>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)?(?![\\w<:.]))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\{)`, beginCaptures: { 1: { name: "meta.qualified_type.cpp", patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.cpp" }, { match: "(?<!\\w)(?:(?:struct)|(?:class)|(?:union)|(?:enum))(?!\\w)", name: "storage.type.$0.cpp" }, { include: "#attributes_context" }, { include: "#storage_types" }, { include: "#number_literal" }, { include: "#string_context" }, { include: "#comma" }, { include: "#scope_resolution_inner_generated" }, { begin: "<", beginCaptures: { 0: { name: "punctuation.section.angle-brackets.begin.template.call.cpp" } }, end: ">", endCaptures: { 0: { name: "punctuation.section.angle-brackets.end.template.call.cpp" } }, name: "meta.template.call.cpp", patterns: [{ include: "#template_call_context" }] }, { match: "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*", name: "entity.name.type.cpp" }] }, 2: { patterns: [{ include: "#attributes_context" }, { include: "#number_literal" }] }, 3: { patterns: [{ include: "#inline_comment" }] }, 4: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 5: { name: "comment.block.cpp" }, 6: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 7: { patterns: [{ include: "#inline_comment" }] }, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 11: { patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.type.cpp" }, { match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)", name: "entity.name.scope-resolution.type.cpp" }, { include: "#template_call_range" }] }, 12: { patterns: [{ include: "#template_call_range" }] }, 13: {}, 14: { patterns: [{ include: "#inline_comment" }] }, 15: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 16: { name: "comment.block.cpp" }, 17: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 18: {}, 19: { patterns: [{ include: "#inline_comment" }] }, 20: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 21: { name: "comment.block.cpp" }, 22: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 23: { name: "punctuation.section.arguments.begin.bracket.curly.initializer.cpp" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.curly.initializer.cpp" } }, name: "meta.initialization.cpp", patterns: [{ include: "#evaluation_context" }, { include: "#comma" }] }, d9bc4796b0b_module_import: { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 3: { name: "keyword.control.directive.import.cpp" }, 5: { name: "string.quoted.other.lt-gt.include.cpp" }, 6: { name: "punctuation.definition.string.begin.cpp" }, 7: { name: "punctuation.definition.string.end.cpp" }, 8: { patterns: [{ include: "#inline_comment" }] }, 9: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 10: { name: "string.quoted.double.include.cpp" }, 11: { name: "punctuation.definition.string.begin.cpp" }, 12: { name: "punctuation.definition.string.end.cpp" }, 13: { patterns: [{ include: "#inline_comment" }] }, 14: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 15: { name: "entity.name.other.preprocessor.macro.include.cpp" }, 16: { patterns: [{ include: "#inline_comment" }] }, 17: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 18: { patterns: [{ include: "#inline_comment" }] }, 19: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 20: { patterns: [{ include: "#inline_comment" }] }, 21: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 22: { name: "punctuation.terminator.statement.cpp" } }, match: '^((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((import))(?:\\s+)?(?:(?:(?:((<)[^>]*(>?)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(?:\\n|$)|(?=\\/\\/)))|((\\")[^\\"]*(\\"?)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(?:\\n|$)|(?=\\/\\/))))|(((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?:\\.(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)*((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(?:\\n|$)|(?=(?:\\/\\/|;)))))|((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(?:\\n|$)|(?=(?:\\/\\/|;))))(?:\\s+)?(;?)', name: "meta.preprocessor.import.cpp" }, d9bc4796b0b_preprocessor_number_literal: { captures: { 0: { patterns: [{ begin: "(?=.)", beginCaptures: {}, end: "$", endCaptures: {}, patterns: [{ captures: { 1: { name: "keyword.other.unit.hexadecimal.cpp" }, 2: { name: "constant.numeric.hexadecimal.cpp", patterns: [{ match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric.cpp" }] }, 3: { name: "punctuation.separator.constant.numeric.cpp" }, 4: { name: "constant.numeric.hexadecimal.cpp" }, 5: { name: "constant.numeric.hexadecimal.cpp", patterns: [{ match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric.cpp" }] }, 6: { name: "punctuation.separator.constant.numeric.cpp" }, 7: { name: "keyword.other.unit.exponent.hexadecimal.cpp" }, 8: { name: "keyword.operator.plus.exponent.hexadecimal.cpp" }, 9: { name: "keyword.operator.minus.exponent.hexadecimal.cpp" }, 10: { name: "constant.numeric.exponent.hexadecimal.cpp", patterns: [{ match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric.cpp" }] }, 11: { name: "keyword.other.suffix.literal.built-in.floating-point.cpp keyword.other.unit.suffix.floating-point.cpp" } }, match: "(\\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?:(?<=[0-9a-fA-F])\\.|\\.(?=[0-9a-fA-F])))([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?(?:(?<!')([pP])(\\+?)(\\-?)([0-9](?:[0-9]|(?<=[0-9a-fA-F])'(?=[0-9a-fA-F]))*))?([lLfF](?!\\w))?$" }, { captures: { 1: { name: "constant.numeric.decimal.cpp", patterns: [{ match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric.cpp" }] }, 2: { name: "punctuation.separator.constant.numeric.cpp" }, 3: { name: "constant.numeric.decimal.point.cpp" }, 4: { name: "constant.numeric.decimal.cpp", patterns: [{ match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric.cpp" }] }, 5: { name: "punctuation.separator.constant.numeric.cpp" }, 6: { name: "keyword.other.unit.exponent.decimal.cpp" }, 7: { name: "keyword.operator.plus.exponent.decimal.cpp" }, 8: { name: "keyword.operator.minus.exponent.decimal.cpp" }, 9: { name: "constant.numeric.exponent.decimal.cpp", patterns: [{ match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric.cpp" }] }, 10: { name: "keyword.other.suffix.literal.built-in.floating-point.cpp keyword.other.unit.suffix.floating-point.cpp" } }, match: "\\G(?=[0-9.])(?!0[xXbB])([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?:(?<=[0-9])\\.|\\.(?=[0-9])))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?(?:(?<!')([eE])(\\+?)(\\-?)([0-9](?:[0-9]|(?<=[0-9a-fA-F])'(?=[0-9a-fA-F]))*))?([lLfF](?!\\w))?$" }, { captures: { 1: { name: "keyword.other.unit.binary.cpp" }, 2: { name: "constant.numeric.binary.cpp", patterns: [{ match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric.cpp" }] }, 3: { name: "punctuation.separator.constant.numeric.cpp" }, 4: { name: "keyword.other.suffix.literal.built-in.integer.cpp keyword.other.unit.suffix.integer.cpp" } }, match: "(\\G0[bB])([01](?:[01]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?:[uU]|(?:[uU]ll?)|(?:[uU]LL?)|(?:ll?[uU]?)|(?:LL?[uU]?)|[fF])(?!\\w))?$" }, { captures: { 1: { name: "keyword.other.unit.octal.cpp" }, 2: { name: "constant.numeric.octal.cpp", patterns: [{ match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric.cpp" }] }, 3: { name: "punctuation.separator.constant.numeric.cpp" }, 4: { name: "keyword.other.suffix.literal.built-in.integer.cpp keyword.other.unit.suffix.integer.cpp" } }, match: "(\\G0)((?:[0-7]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))+)((?:[uU]|(?:[uU]ll?)|(?:[uU]LL?)|(?:ll?[uU]?)|(?:LL?[uU]?)|[fF])(?!\\w))?$" }, { captures: { 1: { name: "keyword.other.unit.hexadecimal.cpp" }, 2: { name: "constant.numeric.hexadecimal.cpp", patterns: [{ match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric.cpp" }] }, 3: { name: "punctuation.separator.constant.numeric.cpp" }, 4: { name: "keyword.other.unit.exponent.hexadecimal.cpp" }, 5: { name: "keyword.operator.plus.exponent.hexadecimal.cpp" }, 6: { name: "keyword.operator.minus.exponent.hexadecimal.cpp" }, 7: { name: "constant.numeric.exponent.hexadecimal.cpp", patterns: [{ match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric.cpp" }] }, 8: { name: "keyword.other.suffix.literal.built-in.integer.cpp keyword.other.unit.suffix.integer.cpp" } }, match: "(\\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)(?:(?<!')([pP])(\\+?)(\\-?)([0-9](?:[0-9]|(?<=[0-9a-fA-F])'(?=[0-9a-fA-F]))*))?((?:[uU]|(?:[uU]ll?)|(?:[uU]LL?)|(?:ll?[uU]?)|(?:LL?[uU]?)|[fF])(?!\\w))?$" }, { captures: { 1: { name: "constant.numeric.decimal.cpp", patterns: [{ match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric.cpp" }] }, 2: { name: "punctuation.separator.constant.numeric.cpp" }, 3: { name: "keyword.other.unit.exponent.decimal.cpp" }, 4: { name: "keyword.operator.plus.exponent.decimal.cpp" }, 5: { name: "keyword.operator.minus.exponent.decimal.cpp" }, 6: { name: "constant.numeric.exponent.decimal.cpp", patterns: [{ match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric.cpp" }] }, 7: { name: "keyword.other.suffix.literal.built-in.integer.cpp keyword.other.unit.suffix.integer.cpp" } }, match: "\\G(?=[0-9.])(?!0[xXbB])([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)(?:(?<!')([eE])(\\+?)(\\-?)([0-9](?:[0-9]|(?<=[0-9a-fA-F])'(?=[0-9a-fA-F]))*))?((?:[uU]|(?:[uU]ll?)|(?:[uU]LL?)|(?:ll?[uU]?)|(?:LL?[uU]?)|[fF])(?!\\w))?$" }, { match: "(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-])+", name: "invalid.illegal.constant.numeric.cpp" }] }] } }, match: "(?<!\\w)\\.?\\d(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-])*" }, decltype: { begin: "((?<!\\w)decltype(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\()", beginCaptures: { 1: { name: "keyword.operator.functionlike.cpp keyword.other.decltype.cpp storage.type.decltype.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "punctuation.section.arguments.begin.bracket.round.decltype.cpp" } }, contentName: "meta.arguments.decltype", end: "\\)", endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.decltype.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, decltype_specifier: { begin: "((?<!\\w)decltype(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\()", beginCaptures: { 1: { name: "keyword.operator.functionlike.cpp keyword.other.decltype.cpp storage.type.decltype.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "punctuation.section.arguments.begin.bracket.round.decltype.cpp" } }, contentName: "meta.arguments.decltype", end: "\\)", endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.decltype.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, default_statement: { begin: "((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)default(?!\\w))", beginCaptures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 5: { name: "keyword.control.default.cpp" } }, end: ":", endCaptures: { 0: { name: "punctuation.separator.colon.case.default.cpp" } }, name: "meta.conditional.case.cpp", patterns: [{ include: "#evaluation_context" }] }, destructor_inline: { begin: "^((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?:__cdecl|__clrcall|__stdcall|__fastcall|__thiscall|__vectorcall)?)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?:(?:(?:constexpr)|(?:consteval)|(?:explicit)|(?:mutable)|(?:virtual)|(?:inline)|(?:friend))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*)(~(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)(?=\\())", beginCaptures: { 0: { name: "meta.head.function.definition.special.member.destructor.cpp" }, 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 5: { name: "storage.type.modifier.calling-convention.cpp" }, 6: { patterns: [{ include: "#inline_comment" }] }, 7: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 8: { name: "comment.block.cpp" }, 9: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 10: { patterns: [{ include: "#functional_specifiers_pre_parameters" }] }, 11: { patterns: [{ include: "#inline_comment" }] }, 12: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 13: { name: "comment.block.cpp" }, 14: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 15: { name: "entity.name.function.destructor.cpp entity.name.function.definition.special.member.destructor.cpp" } }, end: "(?:(?<=\\}|%>|\\?\\?>)|(?=[;>\\[\\]=]))", endCaptures: {}, name: "meta.function.definition.special.member.destructor.cpp", patterns: [{ begin: "\\G ?", beginCaptures: {}, end: "(?:\\{|<%|\\?\\?<|(?=;))", endCaptures: { 0: { name: "punctuation.section.block.begin.bracket.curly.function.definition.special.member.destructor.cpp" } }, name: "meta.head.function.definition.special.member.destructor.cpp", patterns: [{ include: "#ever_present_context" }, { captures: { 1: { name: "keyword.operator.assignment.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "keyword.other.default.function.cpp keyword.other.default.constructor.cpp keyword.other.default.destructor.cpp" }, 7: { name: "keyword.other.delete.function.cpp keyword.other.delete.constructor.cpp keyword.other.delete.destructor.cpp" } }, match: "(\\=)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(default)|(delete))" }, { begin: "\\(", beginCaptures: { 0: { name: "punctuation.section.parameters.begin.bracket.round.special.member.destructor.cpp" } }, contentName: "meta.function.definition.parameters.special.member.destructor", end: "\\)", endCaptures: { 0: { name: "punctuation.section.parameters.end.bracket.round.special.member.destructor.cpp" } }, patterns: [] }, { include: "#qualifiers_and_specifiers_post_parameters" }, { include: "$self" }] }, { begin: "(?<=\\{|<%|\\?\\?<)", beginCaptures: {}, end: "\\}|%>|\\?\\?>", endCaptures: { 0: { name: "punctuation.section.block.end.bracket.curly.function.definition.special.member.destructor.cpp" } }, name: "meta.body.function.definition.special.member.destructor.cpp", patterns: [{ include: "#function_body_context" }] }, { begin: "(?<=\\}|%>|\\?\\?>)[\\s]*", beginCaptures: {}, end: "[\\s]*(?=;)", endCaptures: {}, name: "meta.tail.function.definition.special.member.destructor.cpp", patterns: [{ include: "$self" }] }] }, destructor_root: { begin: `((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?:__cdecl|__clrcall|__stdcall|__fastcall|__thiscall|__vectorcall)?)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<12>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*+)(((?>(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))::((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))~(?:\\14)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?=\\())`, beginCaptures: { 0: { name: "meta.head.function.definition.special.member.destructor.cpp" }, 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 5: { name: "storage.type.modifier.calling-convention.cpp" }, 6: { patterns: [{ include: "#inline_comment" }] }, 7: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 8: { name: "comment.block.cpp" }, 9: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 10: { patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.destructor.cpp" }, { match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)", name: "entity.name.scope-resolution.destructor.cpp" }, { include: "#template_call_range" }] }, 11: { patterns: [{ include: "#template_call_range" }] }, 12: {}, 13: { patterns: [{ match: "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?=:)", name: "entity.name.type.destructor.cpp" }, { match: "(?<=:)~(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*", name: "entity.name.function.definition.special.member.destructor.cpp" }, { match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.destructor.cpp" }] }, 14: {}, 15: { patterns: [{ include: "#inline_comment" }] }, 16: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 17: { name: "comment.block.cpp" }, 18: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 19: { patterns: [{ include: "#inline_comment" }] }, 20: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 21: { name: "comment.block.cpp" }, 22: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 23: { patterns: [{ include: "#inline_comment" }] }, 24: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 25: { name: "comment.block.cpp" }, 26: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, end: "(?:(?<=\\}|%>|\\?\\?>)|(?=[;>\\[\\]=]))", endCaptures: {}, name: "meta.function.definition.special.member.destructor.cpp", patterns: [{ begin: "\\G ?", beginCaptures: {}, end: "(?:\\{|<%|\\?\\?<|(?=;))", endCaptures: { 0: { name: "punctuation.section.block.begin.bracket.curly.function.definition.special.member.destructor.cpp" } }, name: "meta.head.function.definition.special.member.destructor.cpp", patterns: [{ include: "#ever_present_context" }, { captures: { 1: { name: "keyword.operator.assignment.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "keyword.other.default.function.cpp keyword.other.default.constructor.cpp keyword.other.default.destructor.cpp" }, 7: { name: "keyword.other.delete.function.cpp keyword.other.delete.constructor.cpp keyword.other.delete.destructor.cpp" } }, match: "(\\=)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(default)|(delete))" }, { begin: "\\(", beginCaptures: { 0: { name: "punctuation.section.parameters.begin.bracket.round.special.member.destructor.cpp" } }, contentName: "meta.function.definition.parameters.special.member.destructor", end: "\\)", endCaptures: { 0: { name: "punctuation.section.parameters.end.bracket.round.special.member.destructor.cpp" } }, patterns: [] }, { include: "#qualifiers_and_specifiers_post_parameters" }, { include: "$self" }] }, { begin: "(?<=\\{|<%|\\?\\?<)", beginCaptures: {}, end: "\\}|%>|\\?\\?>", endCaptures: { 0: { name: "punctuation.section.block.end.bracket.curly.function.definition.special.member.destructor.cpp" } }, name: "meta.body.function.definition.special.member.destructor.cpp", patterns: [{ include: "#function_body_context" }] }, { begin: "(?<=\\}|%>|\\?\\?>)[\\s]*", beginCaptures: {}, end: "[\\s]*(?=;)", endCaptures: {}, name: "meta.tail.function.definition.special.member.destructor.cpp", patterns: [{ include: "$self" }] }] }, diagnostic: { begin: "(^((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(#)(?:\\s+)?((?:error|warning)))\\b(?:\\s+)?", beginCaptures: { 1: { name: "keyword.control.directive.diagnostic.$7.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "punctuation.definition.directive.cpp" }, 7: {} }, end: "(?<!\\\\)(?:(?=\\n)|(?<=^\\n|[^\\\\]\\n)(?=$))", endCaptures: {}, name: "meta.preprocessor.diagnostic.$reference(directive).cpp", patterns: [{ include: "#comments" }, { begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.cpp" } }, end: '(?:(")|(?<!\\\\)(?:(?=\\n)|(?<=^\\n|[^\\\\]\\n)(?=$)))', endCaptures: { 1: { name: "punctuation.definition.string.end.cpp" } }, name: "string.quoted.double.cpp", patterns: [{ include: "#line_continuation_character" }] }, { begin: "'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.cpp" } }, end: "(?:(')|(?<!\\\\)(?:(?=\\n)|(?<=^\\n|[^\\\\]\\n)(?=$)))", endCaptures: { 1: { name: "punctuation.definition.string.end.cpp" } }, name: "string.quoted.single.cpp", patterns: [{ include: "#line_continuation_character" }] }, { begin: `[^'"]`, beginCaptures: {}, end: "(?<!\\\\)(?:(?=\\n)|(?<=^\\n|[^\\\\]\\n)(?=$))", endCaptures: {}, name: "string.unquoted.cpp", patterns: [{ include: "#line_continuation_character" }, { include: "#comments" }] }] }, emacs_file_banner: { captures: { 1: { name: "meta.toc-list.banner.double-slash.cpp" }, 2: { name: "comment.line.double-slash.cpp" }, 3: { name: "punctuation.definition.comment.cpp" }, 4: { name: "meta.banner.character.cpp" }, 5: { name: "meta.toc-list.banner.block.cpp" }, 6: { name: "comment.line.banner.cpp" }, 7: { name: "punctuation.definition.comment.cpp" }, 8: { name: "meta.banner.character.cpp" } }, match: "(?:(^(?:\\s+)?((\\/\\/)(?:\\s+)?((?:[#;\\/=*C~]+)++(?![#;\\/=*C~]))(?:\\s+)?.+(?:\\s+)?(?:\\4)(?:\\s+)?(?:\\n|$)))|(^(?:\\s+)?((\\/\\*)(?:\\s+)?((?:[#;\\/=*C~]+)++(?![#;\\/=*C~]))(?:\\s+)?.+(?:\\s+)?(?:\\8)(?:\\s+)?\\*\\/)))" }, empty_square_brackets: { match: "(?<!delete)\\[(?:\\s+)?\\]", name: "storage.modifier.array.bracket.square" }, enum_block: { begin: `((?<!\\w)enum(?!\\w))(?:\\s+(class|struct))?(?:(?:\\s+|((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\))))|(?={))(?:\\s+)?((?:(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))?)(?:(?:\\s+)?(:)(?:\\s+)?(?:((::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<12>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*\\s*+)((?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))\\s*+(((?<!<)<(?!<)(?:(?:(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/)))|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<12>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?(::))?(?:\\s+)?((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)))?`, beginCaptures: { 0: { name: "meta.head.enum.cpp" }, 1: { name: "storage.type.enum.cpp" }, 2: { name: "storage.type.enum.enum-key.$2.cpp" }, 3: { patterns: [{ include: "#attributes_context" }, { include: "#number_literal" }] }, 4: { name: "entity.name.type.enum.cpp" }, 5: { name: "punctuation.separator.colon.type-specifier.cpp" }, 6: { patterns: [{ include: "#scope_resolution_inner_generated" }] }, 7: { name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.cpp" }, 8: { patterns: [{ include: "#template_call_range" }] }, 9: {}, 10: { name: "entity.name.scope-resolution.cpp" }, 11: { name: "meta.template.call.cpp", patterns: [{ include: "#template_call_range" }] }, 12: {}, 13: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 14: { name: "comment.block.cpp" }, 15: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 16: { name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.cpp" }, 17: { name: "storage.type.integral.$17.cpp" } }, end: "(?:(?:(?<=\\}|%>|\\?\\?>)(?:\\s+)?(;)|(;))|(?=[;>\\[\\]=]))", endCaptures: { 1: { name: "punctuation.terminator.statement.cpp" }, 2: { name: "punctuation.terminator.statement.cpp" } }, name: "meta.block.enum.cpp", patterns: [{ begin: "\\G ?", beginCaptures: {}, end: "(?:\\{|<%|\\?\\?<|(?=;))", endCaptures: { 0: { name: "punctuation.section.block.begin.bracket.curly.enum.cpp" } }, name: "meta.head.enum.cpp", patterns: [{ include: "$self" }] }, { begin: "(?<=\\{|<%|\\?\\?<)", beginCaptures: {}, end: "\\}|%>|\\?\\?>", endCaptures: { 0: { name: "punctuation.section.block.end.bracket.curly.enum.cpp" } }, name: "meta.body.enum.cpp", patterns: [{ include: "#ever_present_context" }, { include: "#enumerator_list" }, { include: "#comments" }, { include: "#comma" }, { include: "#semicolon" }] }, { begin: "(?<=\\}|%>|\\?\\?>)[\\s]*", beginCaptures: {}, end: "[\\s]*(?=;)", endCaptures: {}, name: "meta.tail.enum.cpp", patterns: [{ include: "$self" }] }] }, enum_declare: { captures: { 1: { name: "storage.type.enum.declare.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 4: { name: "entity.name.type.enum.cpp" }, 5: { patterns: [{ match: "\\*", name: "storage.modifier.pointer.cpp" }, { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "(?:\\&((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))){2,}\\&", name: "invalid.illegal.reference-type.cpp" }, { match: "\\&", name: "storage.modifier.reference.cpp" }] }, 6: { patterns: [{ include: "#inline_comment" }] }, 7: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 8: { patterns: [{ include: "#inline_comment" }] }, 9: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 10: { patterns: [{ include: "#inline_comment" }] }, 11: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 12: { name: "variable.other.object.declare.cpp" }, 13: { patterns: [{ include: "#inline_comment" }] }, 14: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] } }, match: "((?<!\\w)enum(?!\\w))((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))?(?:(?:&|\\*)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:&|\\*))?((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))\\b(?!override\\W|override\\$|final\\W|final\\$)((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?=\\S)(?![:{a-zA-Z])" }, enumerator_list: { captures: { 1: { name: "variable.other.enummember.cpp" }, 2: { patterns: [{ include: "#attributes_context" }, { include: "#number_literal" }] }, 3: { name: "keyword.operator.assignment.cpp" }, 4: { patterns: [{ include: "#evaluation_context" }] }, 5: { patterns: [{ include: "#comma" }, { include: "#semicolon" }] } }, match: "((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(?:\\s+)?((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))?(?:\\s+)?(?:(\\=)(?:\\s+)?(.+?)(?:\\s+)?)?(?:(?:((?:[,;](?!')|\\n))|(?=\\}[^']))|(?=(?:\\/\\/|\\/\\*)))", name: "meta.enum.definition.cpp" }, evaluation_context: { patterns: [{ include: "#ever_present_context" }, { include: "#string_context" }, { include: "#number_literal" }, { include: "#method_access" }, { include: "#member_access" }, { include: "#predefined_macros" }, { include: "#operators" }, { include: "#memory_operators" }, { include: "#wordlike_operators" }, { include: "#type_casting_operators" }, { include: "#control_flow_keywords" }, { include: "#exception_keywords" }, { include: "#the_this_keyword" }, { include: "#language_constants" }, { include: "#builtin_storage_type_initilizer" }, { include: "#qualifiers_and_specifiers_post_parameters" }, { include: "#functional_specifiers_pre_parameters" }, { include: "#storage_types" }, { include: "#lambdas" }, { include: "#attributes_context" }, { include: "#parentheses" }, { include: "#function_call" }, { include: "#scope_resolution_inner_generated" }, { include: "#square_brackets" }, { include: "#semicolon" }, { include: "#comma" }] }, ever_present_context: { patterns: [{ include: "#pragma_mark" }, { include: "#pragma" }, { include: "#include" }, { include: "#line" }, { include: "#diagnostic" }, { include: "#undef" }, { include: "#preprocessor_conditional_range" }, { include: "#single_line_macro" }, { include: "#macro" }, { include: "#preprocessor_conditional_standalone" }, { include: "#macro_argument" }, { include: "#comments" }, { include: "#line_continuation_character" }] }, exception_keywords: { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 3: { name: "keyword.control.exception.$3.cpp" } }, match: "((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)(?:(?:throw)|(?:catch)|(?:try))(?!\\w))" }, extern_block: { begin: '((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(extern)(?=\\s*\\")', beginCaptures: { 0: { name: "meta.head.extern.cpp" }, 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 5: { name: "storage.type.extern.cpp" } }, end: "(?:(?:(?<=\\}|%>|\\?\\?>)(?:\\s+)?(;)|(;))|(?=[;>\\[\\]=]))", endCaptures: { 1: { name: "punctuation.terminator.statement.cpp" }, 2: { name: "punctuation.terminator.statement.cpp" } }, name: "meta.block.extern.cpp", patterns: [{ begin: "\\G ?", beginCaptures: {}, end: "(?:\\{|<%|\\?\\?<|(?=;))", endCaptures: { 0: { name: "punctuation.section.block.begin.bracket.curly.extern.cpp" } }, name: "meta.head.extern.cpp", patterns: [{ include: "$self" }] }, { begin: "(?<=\\{|<%|\\?\\?<)", beginCaptures: {}, end: "\\}|%>|\\?\\?>", endCaptures: { 0: { name: "punctuation.section.block.end.bracket.curly.extern.cpp" } }, name: "meta.body.extern.cpp", patterns: [{ include: "$self" }] }, { begin: "(?<=\\}|%>|\\?\\?>)[\\s]*", beginCaptures: {}, end: "[\\s]*(?=;)", endCaptures: {}, name: "meta.tail.extern.cpp", patterns: [{ include: "$self" }] }, { include: "$self" }] }, function_body_context: { patterns: [{ include: "#ever_present_context" }, { include: "#using_namespace" }, { include: "#type_alias" }, { include: "#using_name" }, { include: "#namespace_alias" }, { include: "#typedef_class" }, { include: "#typedef_struct" }, { include: "#typedef_union" }, { include: "#misc_keywords" }, { include: "#standard_declares" }, { include: "#class_block" }, { include: "#struct_block" }, { include: "#union_block" }, { include: "#enum_block" }, { include: "#access_control_keywords" }, { include: "#block" }, { include: "#static_assert" }, { include: "#assembly" }, { include: "#function_pointer" }, { include: "#switch_statement" }, { include: "#goto_statement" }, { include: "#evaluation_context" }, { include: "#label" }] }, function_call: { begin: `((::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<11>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*\\s*+)((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)\\b(?<!\\Wreinterpret_cast|^reinterpret_cast|\\Watomic_noexcept|^atomic_noexcept|\\Wuint_least16_t|^uint_least16_t|\\Wuint_least32_t|^uint_least32_t|\\Wuint_least64_t|^uint_least64_t|\\Watomic_cancel|^atomic_cancel|\\Watomic_commit|^atomic_commit|\\Wuint_least8_t|^uint_least8_t|\\Wuint_fast16_t|^uint_fast16_t|\\Wuint_fast32_t|^uint_fast32_t|\\Wint_least16_t|^int_least16_t|\\Wint_least32_t|^int_least32_t|\\Wint_least64_t|^int_least64_t|\\Wuint_fast64_t|^uint_fast64_t|\\Wthread_local|^thread_local|\\Wint_fast16_t|^int_fast16_t|\\Wint_fast32_t|^int_fast32_t|\\Wint_fast64_t|^int_fast64_t|\\Wsynchronized|^synchronized|\\Wuint_fast8_t|^uint_fast8_t|\\Wdynamic_cast|^dynamic_cast|\\Wint_least8_t|^int_least8_t|\\Wint_fast8_t|^int_fast8_t|\\Wstatic_cast|^static_cast|\\Wsuseconds_t|^suseconds_t|\\Wconst_cast|^const_cast|\\Wuseconds_t|^useconds_t|\\Wconstinit|^constinit|\\Wco_return|^co_return|\\Wuintmax_t|^uintmax_t|\\Wuintmax_t|^uintmax_t|\\Wuintmax_t|^uintmax_t|\\Wconstexpr|^constexpr|\\Wconsteval|^consteval|\\Wconstexpr|^constexpr|\\Wconstexpr|^constexpr|\\Wconsteval|^consteval|\\Wprotected|^protected|\\Wnamespace|^namespace|\\Wblksize_t|^blksize_t|\\Wco_return|^co_return|\\Win_addr_t|^in_addr_t|\\Win_port_t|^in_port_t|\\Wuintptr_t|^uintptr_t|\\Wtemplate|^template|\\Wnoexcept|^noexcept|\\Wnoexcept|^noexcept|\\Wcontinue|^continue|\\Wco_await|^co_await|\\Wco_yield|^co_yield|\\Wunsigned|^unsigned|\\Wu_quad_t|^u_quad_t|\\Wblkcnt_t|^blkcnt_t|\\Wuint16_t|^uint16_t|\\Wuint32_t|^uint32_t|\\Wuint64_t|^uint64_t|\\Wintptr_t|^intptr_t|\\Wintmax_t|^intmax_t|\\Wintmax_t|^intmax_t|\\Wvolatile|^volatile|\\Wregister|^register|\\Wrestrict|^restrict|\\Wexplicit|^explicit|\\Wvolatile|^volatile|\\Wnoexcept|^noexcept|\\Woperator|^operator|\\Wdecltype|^decltype|\\Wtypename|^typename|\\Wrequires|^requires|\\Wco_await|^co_await|\\Wco_yield|^co_yield|\\Wreflexpr|^reflexpr|\\Wswblk_t|^swblk_t|\\Wvirtual|^virtual|\\Wssize_t|^ssize_t|\\Wconcept|^concept|\\Wmutable|^mutable|\\Wfixpt_t|^fixpt_t|\\Wint16_t|^int16_t|\\Wint32_t|^int32_t|\\Wint64_t|^int64_t|\\Wuint8_t|^uint8_t|\\Wtypedef|^typedef|\\Wdaddr_t|^daddr_t|\\Wcaddr_t|^caddr_t|\\Wqaddr_t|^qaddr_t|\\Wdefault|^default|\\Wnlink_t|^nlink_t|\\Wsegsz_t|^segsz_t|\\Wu_short|^u_short|\\Wwchar_t|^wchar_t|\\Wprivate|^private|\\W__asm__|^__asm__|\\Walignas|^alignas|\\Walignof|^alignof|\\Wmutable|^mutable|\\Wnullptr|^nullptr|\\Wclock_t|^clock_t|\\Wmode_t|^mode_t|\\Wpublic|^public|\\Wsize_t|^size_t|\\Wdouble|^double|\\Wquad_t|^quad_t|\\Wstatic|^static|\\Wtime_t|^time_t|\\Wmodule|^module|\\Wimport|^import|\\Wexport|^export|\\Wextern|^extern|\\Winline|^inline|\\Wxor_eq|^xor_eq|\\Wand_eq|^and_eq|\\Wreturn|^return|\\Wfriend|^friend|\\Wnot_eq|^not_eq|\\Wsigned|^signed|\\Wstruct|^struct|\\Wint8_t|^int8_t|\\Wushort|^ushort|\\Wswitch|^switch|\\Wu_long|^u_long|\\Wtypeid|^typeid|\\Wu_char|^u_char|\\Wsizeof|^sizeof|\\Wbitand|^bitand|\\Wdelete|^delete|\\Wino_t|^ino_t|\\Wkey_t|^key_t|\\Wpid_t|^pid_t|\\Woff_t|^off_t|\\Wuid_t|^uid_t|\\Wshort|^short|\\Wbreak|^break|\\Wcatch|^catch|\\Wcompl|^compl|\\Wwhile|^while|\\Wfalse|^false|\\Wclass|^class|\\Wunion|^union|\\Wconst|^const|\\Wor_eq|^or_eq|\\Wconst|^const|\\Wthrow|^throw|\\Wbitor|^bitor|\\Wu_int|^u_int|\\Wusing|^using|\\Wdiv_t|^div_t|\\Wdev_t|^dev_t|\\Wgid_t|^gid_t|\\Wfloat|^float|\\Wlong|^long|\\Wgoto|^goto|\\Wuint|^uint|\\Wid_t|^id_t|\\Wcase|^case|\\Wauto|^auto|\\Wvoid|^void|\\Wenum|^enum|\\Wtrue|^true|\\Wchar|^char|\\Wid_t|^id_t|\\WNULL|^NULL|\\Wthis|^this|\\Wbool|^bool|\\Welse|^else|\\Wfor|^for|\\Wnew|^new|\\Wnot|^not|\\Wxor|^xor|\\Wand|^and|\\Wasm|^asm|\\Wint|^int|\\Wtry|^try|\\Wdo|^do|\\Wif|^if|\\Wor|^or)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(((?<!<)<(?!<)(?:(?:(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/)))|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<11>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?(\\()`, beginCaptures: { 1: { patterns: [{ include: "#scope_resolution_function_call_inner_generated" }] }, 2: { name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.function.call.cpp" }, 3: { patterns: [{ include: "#template_call_range" }] }, 4: {}, 5: { name: "entity.name.function.call.cpp" }, 6: { patterns: [{ include: "#inline_comment" }] }, 7: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 8: { name: "comment.block.cpp" }, 9: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 10: { name: "meta.template.call.cpp", patterns: [{ include: "#template_call_range" }] }, 11: {}, 12: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 13: { name: "comment.block.cpp" }, 14: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 15: { name: "punctuation.section.arguments.begin.bracket.round.function.call.cpp" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.function.call.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, function_definition: { begin: `(?:(?:^|\\G|(?<=;|\\}))|(?<=>|\\*\\/))\\s*+(?:((?<!\\w)template(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))?((?:((?<!\\w)(?:(?:(?:constexpr)|(?:consteval)|(?:explicit)|(?:mutable)|(?:virtual)|(?:inline)|(?:friend))|(?:(?:thread_local)|(?:volatile)|(?:register)|(?:restrict)|(?:static)|(?:extern)|(?:const)))(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*)(\\s*+((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))?((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(?:(?:(?:unsigned)|(?:signed)|(?:short)|(?:long))|(?:(?:struct)|(?:class)|(?:union)|(?:enum)))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<52>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*+)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?(?!(?:(?:transaction_safe_dynamic)|(?:__has_cpp_attribute)|(?:reinterpret_cast)|(?:transaction_safe)|(?:atomic_noexcept)|(?:atomic_commit)|(?:__has_include)|(?:atomic_cancel)|(?:synchronized)|(?:thread_local)|(?:dynamic_cast)|(?:static_cast)|(?:const_cast)|(?:constexpr)|(?:co_return)|(?:constinit)|(?:namespace)|(?:protected)|(?:consteval)|(?:constexpr)|(?:constexpr)|(?:co_return)|(?:consteval)|(?:co_await)|(?:continue)|(?:template)|(?:reflexpr)|(?:volatile)|(?:register)|(?:co_await)|(?:co_yield)|(?:restrict)|(?:noexcept)|(?:volatile)|(?:override)|(?:explicit)|(?:decltype)|(?:operator)|(?:noexcept)|(?:noexcept)|(?:typename)|(?:requires)|(?:co_yield)|(?:nullptr)|(?:alignof)|(?:alignas)|(?:default)|(?:mutable)|(?:virtual)|(?:mutable)|(?:private)|(?:include)|(?:warning)|(?:_Pragma)|(?:defined)|(?:typedef)|(?:__asm__)|(?:concept)|(?:define)|(?:module)|(?:sizeof)|(?:switch)|(?:delete)|(?:pragma)|(?:and_eq)|(?:inline)|(?:xor_eq)|(?:typeid)|(?:import)|(?:extern)|(?:public)|(?:bitand)|(?:static)|(?:export)|(?:return)|(?:friend)|(?:ifndef)|(?:not_eq)|(?:false)|(?:final)|(?:break)|(?:const)|(?:catch)|(?:endif)|(?:ifdef)|(?:undef)|(?:error)|(?:audit)|(?:while)|(?:using)|(?:axiom)|(?:or_eq)|(?:compl)|(?:throw)|(?:bitor)|(?:const)|(?:line)|(?:case)|(?:else)|(?:this)|(?:true)|(?:goto)|(?:else)|(?:NULL)|(?:elif)|(?:new)|(?:asm)|(?:xor)|(?:and)|(?:try)|(?:not)|(?:for)|(?:do)|(?:if)|(?:or)|(?:if))\\b)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\b((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<52>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)?(?![\\w<:.]))(((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))?(?:(?:&|\\*)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:&|\\*))?((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?:__cdecl|__clrcall|__stdcall|__fastcall|__thiscall|__vectorcall)?)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<52>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*\\s*+)((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)\\b(?<!\\Wreinterpret_cast|^reinterpret_cast|\\Watomic_noexcept|^atomic_noexcept|\\Wuint_least16_t|^uint_least16_t|\\Wuint_least32_t|^uint_least32_t|\\Wuint_least64_t|^uint_least64_t|\\Watomic_cancel|^atomic_cancel|\\Watomic_commit|^atomic_commit|\\Wuint_least8_t|^uint_least8_t|\\Wuint_fast16_t|^uint_fast16_t|\\Wuint_fast32_t|^uint_fast32_t|\\Wint_least16_t|^int_least16_t|\\Wint_least32_t|^int_least32_t|\\Wint_least64_t|^int_least64_t|\\Wuint_fast64_t|^uint_fast64_t|\\Wthread_local|^thread_local|\\Wint_fast16_t|^int_fast16_t|\\Wint_fast32_t|^int_fast32_t|\\Wint_fast64_t|^int_fast64_t|\\Wsynchronized|^synchronized|\\Wuint_fast8_t|^uint_fast8_t|\\Wdynamic_cast|^dynamic_cast|\\Wint_least8_t|^int_least8_t|\\Wint_fast8_t|^int_fast8_t|\\Wstatic_cast|^static_cast|\\Wsuseconds_t|^suseconds_t|\\Wconst_cast|^const_cast|\\Wuseconds_t|^useconds_t|\\Wconstinit|^constinit|\\Wco_return|^co_return|\\Wuintmax_t|^uintmax_t|\\Wuintmax_t|^uintmax_t|\\Wuintmax_t|^uintmax_t|\\Wconstexpr|^constexpr|\\Wconsteval|^consteval|\\Wconstexpr|^constexpr|\\Wconstexpr|^constexpr|\\Wconsteval|^consteval|\\Wprotected|^protected|\\Wnamespace|^namespace|\\Wblksize_t|^blksize_t|\\Wco_return|^co_return|\\Win_addr_t|^in_addr_t|\\Win_port_t|^in_port_t|\\Wuintptr_t|^uintptr_t|\\Wtemplate|^template|\\Wnoexcept|^noexcept|\\Wnoexcept|^noexcept|\\Wcontinue|^continue|\\Wco_await|^co_await|\\Wco_yield|^co_yield|\\Wunsigned|^unsigned|\\Wu_quad_t|^u_quad_t|\\Wblkcnt_t|^blkcnt_t|\\Wuint16_t|^uint16_t|\\Wuint32_t|^uint32_t|\\Wuint64_t|^uint64_t|\\Wintptr_t|^intptr_t|\\Wintmax_t|^intmax_t|\\Wintmax_t|^intmax_t|\\Wvolatile|^volatile|\\Wregister|^register|\\Wrestrict|^restrict|\\Wexplicit|^explicit|\\Wvolatile|^volatile|\\Wnoexcept|^noexcept|\\Woperator|^operator|\\Wdecltype|^decltype|\\Wtypename|^typename|\\Wrequires|^requires|\\Wco_await|^co_await|\\Wco_yield|^co_yield|\\Wreflexpr|^reflexpr|\\Wswblk_t|^swblk_t|\\Wvirtual|^virtual|\\Wssize_t|^ssize_t|\\Wconcept|^concept|\\Wmutable|^mutable|\\Wfixpt_t|^fixpt_t|\\Wint16_t|^int16_t|\\Wint32_t|^int32_t|\\Wint64_t|^int64_t|\\Wuint8_t|^uint8_t|\\Wtypedef|^typedef|\\Wdaddr_t|^daddr_t|\\Wcaddr_t|^caddr_t|\\Wqaddr_t|^qaddr_t|\\Wdefault|^default|\\Wnlink_t|^nlink_t|\\Wsegsz_t|^segsz_t|\\Wu_short|^u_short|\\Wwchar_t|^wchar_t|\\Wprivate|^private|\\W__asm__|^__asm__|\\Walignas|^alignas|\\Walignof|^alignof|\\Wmutable|^mutable|\\Wnullptr|^nullptr|\\Wclock_t|^clock_t|\\Wmode_t|^mode_t|\\Wpublic|^public|\\Wsize_t|^size_t|\\Wdouble|^double|\\Wquad_t|^quad_t|\\Wstatic|^static|\\Wtime_t|^time_t|\\Wmodule|^module|\\Wimport|^import|\\Wexport|^export|\\Wextern|^extern|\\Winline|^inline|\\Wxor_eq|^xor_eq|\\Wand_eq|^and_eq|\\Wreturn|^return|\\Wfriend|^friend|\\Wnot_eq|^not_eq|\\Wsigned|^signed|\\Wstruct|^struct|\\Wint8_t|^int8_t|\\Wushort|^ushort|\\Wswitch|^switch|\\Wu_long|^u_long|\\Wtypeid|^typeid|\\Wu_char|^u_char|\\Wsizeof|^sizeof|\\Wbitand|^bitand|\\Wdelete|^delete|\\Wino_t|^ino_t|\\Wkey_t|^key_t|\\Wpid_t|^pid_t|\\Woff_t|^off_t|\\Wuid_t|^uid_t|\\Wshort|^short|\\Wbreak|^break|\\Wcatch|^catch|\\Wcompl|^compl|\\Wwhile|^while|\\Wfalse|^false|\\Wclass|^class|\\Wunion|^union|\\Wconst|^const|\\Wor_eq|^or_eq|\\Wconst|^const|\\Wthrow|^throw|\\Wbitor|^bitor|\\Wu_int|^u_int|\\Wusing|^using|\\Wdiv_t|^div_t|\\Wdev_t|^dev_t|\\Wgid_t|^gid_t|\\Wfloat|^float|\\Wlong|^long|\\Wgoto|^goto|\\Wuint|^uint|\\Wid_t|^id_t|\\Wcase|^case|\\Wauto|^auto|\\Wvoid|^void|\\Wenum|^enum|\\Wtrue|^true|\\Wchar|^char|\\Wid_t|^id_t|\\WNULL|^NULL|\\Wthis|^this|\\Wbool|^bool|\\Welse|^else|\\Wfor|^for|\\Wnew|^new|\\Wnot|^not|\\Wxor|^xor|\\Wand|^and|\\Wasm|^asm|\\Wint|^int|\\Wtry|^try|\\Wdo|^do|\\Wif|^if|\\Wor|^or)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?=\\()`, beginCaptures: { 0: { name: "meta.head.function.definition.cpp" }, 1: { name: "storage.type.template.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { patterns: [{ include: "#attributes_context" }, { include: "#number_literal" }] }, 7: { patterns: [{ captures: { 1: { name: "storage.modifier.$1.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "((?<!\\w)(?:(?:(?:constexpr)|(?:consteval)|(?:explicit)|(?:mutable)|(?:virtual)|(?:inline)|(?:friend))|(?:(?:thread_local)|(?:volatile)|(?:register)|(?:restrict)|(?:static)|(?:extern)|(?:const)))(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))" }] }, 8: { name: "storage.modifier.$8.cpp" }, 9: { patterns: [{ include: "#inline_comment" }] }, 10: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 11: { name: "comment.block.cpp" }, 12: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 13: { name: "meta.qualified_type.cpp", patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.cpp" }, { match: "(?<!\\w)(?:(?:struct)|(?:class)|(?:union)|(?:enum))(?!\\w)", name: "storage.type.$0.cpp" }, { include: "#attributes_context" }, { include: "#storage_types" }, { include: "#number_literal" }, { include: "#string_context" }, { include: "#comma" }, { include: "#scope_resolution_inner_generated" }, { begin: "<", beginCaptures: { 0: { name: "punctuation.section.angle-brackets.begin.template.call.cpp" } }, end: ">", endCaptures: { 0: { name: "punctuation.section.angle-brackets.end.template.call.cpp" } }, name: "meta.template.call.cpp", patterns: [{ include: "#template_call_context" }] }, { match: "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*", name: "entity.name.type.cpp" }] }, 14: { patterns: [{ include: "#attributes_context" }, { include: "#number_literal" }] }, 15: { patterns: [{ include: "#inline_comment" }] }, 16: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 17: { name: "comment.block.cpp" }, 18: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 19: { patterns: [{ include: "#inline_comment" }] }, 20: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 21: { name: "comment.block.cpp" }, 22: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 23: { patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.type.cpp" }, { match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)", name: "entity.name.scope-resolution.type.cpp" }, { include: "#template_call_range" }] }, 24: { patterns: [{ include: "#template_call_range" }] }, 25: {}, 26: { patterns: [{ include: "#inline_comment" }] }, 27: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 28: { name: "comment.block.cpp" }, 29: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 30: {}, 31: { patterns: [{ match: "\\*", name: "storage.modifier.pointer.cpp" }, { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "(?:\\&((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))){2,}\\&", name: "invalid.illegal.reference-type.cpp" }, { match: "\\&", name: "storage.modifier.reference.cpp" }] }, 32: { patterns: [{ include: "#inline_comment" }] }, 33: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 34: { name: "comment.block.cpp" }, 35: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 36: { patterns: [{ include: "#inline_comment" }] }, 37: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 38: { name: "comment.block.cpp" }, 39: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 40: { patterns: [{ include: "#inline_comment" }] }, 41: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 42: { name: "comment.block.cpp" }, 43: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 44: { name: "storage.type.modifier.calling-convention.cpp" }, 45: { patterns: [{ include: "#inline_comment" }] }, 46: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 47: { name: "comment.block.cpp" }, 48: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 49: { patterns: [{ include: "#scope_resolution_function_definition_inner_generated" }] }, 50: { name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.function.definition.cpp" }, 51: { patterns: [{ include: "#template_call_range" }] }, 52: {}, 53: { name: "entity.name.function.definition.cpp" }, 54: { patterns: [{ include: "#inline_comment" }] }, 55: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 56: { name: "comment.block.cpp" }, 57: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, end: "(?:(?<=\\}|%>|\\?\\?>)|(?=[;>\\[\\]=]))", endCaptures: {}, name: "meta.function.definition.cpp", patterns: [{ begin: "\\G ?", beginCaptures: {}, end: "(?:\\{|<%|\\?\\?<|(?=;))", endCaptures: { 0: { name: "punctuation.section.block.begin.bracket.curly.function.definition.cpp" } }, name: "meta.head.function.definition.cpp", patterns: [{ include: "#ever_present_context" }, { begin: "\\(", beginCaptures: { 0: { name: "punctuation.section.parameters.begin.bracket.round.cpp" } }, contentName: "meta.function.definition.parameters", end: "\\)", endCaptures: { 0: { name: "punctuation.section.parameters.end.bracket.round.cpp" } }, patterns: [{ include: "#ever_present_context" }, { include: "#parameter_or_maybe_value" }, { include: "#comma" }, { include: "#evaluation_context" }] }, { captures: { 1: { name: "punctuation.definition.function.return-type.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "meta.qualified_type.cpp", patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.cpp" }, { match: "(?<!\\w)(?:(?:struct)|(?:class)|(?:union)|(?:enum))(?!\\w)", name: "storage.type.$0.cpp" }, { include: "#attributes_context" }, { include: "#storage_types" }, { include: "#number_literal" }, { include: "#string_context" }, { include: "#comma" }, { include: "#scope_resolution_inner_generated" }, { begin: "<", beginCaptures: { 0: { name: "punctuation.section.angle-brackets.begin.template.call.cpp" } }, end: ">", endCaptures: { 0: { name: "punctuation.section.angle-brackets.end.template.call.cpp" } }, name: "meta.template.call.cpp", patterns: [{ include: "#template_call_context" }] }, { match: "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*", name: "entity.name.type.cpp" }] }, 7: { patterns: [{ include: "#attributes_context" }, { include: "#number_literal" }] }, 8: { patterns: [{ include: "#inline_comment" }] }, 9: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 10: { name: "comment.block.cpp" }, 11: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 12: { patterns: [{ include: "#inline_comment" }] }, 13: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 14: { name: "comment.block.cpp" }, 15: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 16: { patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.type.cpp" }, { match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)", name: "entity.name.scope-resolution.type.cpp" }, { include: "#template_call_range" }] }, 17: { patterns: [{ include: "#template_call_range" }] }, 18: {}, 19: { patterns: [{ include: "#inline_comment" }] }, 20: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 21: { name: "comment.block.cpp" }, 22: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 23: {} }, match: `(?<=^|\\))(?:\\s+)?(->)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\s*+((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))?((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(?:(?:(?:unsigned)|(?:signed)|(?:short)|(?:long))|(?:(?:struct)|(?:class)|(?:union)|(?:enum)))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<23>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*+)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?(?!(?:(?:transaction_safe_dynamic)|(?:__has_cpp_attribute)|(?:reinterpret_cast)|(?:transaction_safe)|(?:atomic_noexcept)|(?:atomic_commit)|(?:__has_include)|(?:atomic_cancel)|(?:synchronized)|(?:thread_local)|(?:dynamic_cast)|(?:static_cast)|(?:const_cast)|(?:constexpr)|(?:co_return)|(?:constinit)|(?:namespace)|(?:protected)|(?:consteval)|(?:constexpr)|(?:constexpr)|(?:co_return)|(?:consteval)|(?:co_await)|(?:continue)|(?:template)|(?:reflexpr)|(?:volatile)|(?:register)|(?:co_await)|(?:co_yield)|(?:restrict)|(?:noexcept)|(?:volatile)|(?:override)|(?:explicit)|(?:decltype)|(?:operator)|(?:noexcept)|(?:noexcept)|(?:typename)|(?:requires)|(?:co_yield)|(?:nullptr)|(?:alignof)|(?:alignas)|(?:default)|(?:mutable)|(?:virtual)|(?:mutable)|(?:private)|(?:include)|(?:warning)|(?:_Pragma)|(?:defined)|(?:typedef)|(?:__asm__)|(?:concept)|(?:define)|(?:module)|(?:sizeof)|(?:switch)|(?:delete)|(?:pragma)|(?:and_eq)|(?:inline)|(?:xor_eq)|(?:typeid)|(?:import)|(?:extern)|(?:public)|(?:bitand)|(?:static)|(?:export)|(?:return)|(?:friend)|(?:ifndef)|(?:not_eq)|(?:false)|(?:final)|(?:break)|(?:const)|(?:catch)|(?:endif)|(?:ifdef)|(?:undef)|(?:error)|(?:audit)|(?:while)|(?:using)|(?:axiom)|(?:or_eq)|(?:compl)|(?:throw)|(?:bitor)|(?:const)|(?:line)|(?:case)|(?:else)|(?:this)|(?:true)|(?:goto)|(?:else)|(?:NULL)|(?:elif)|(?:new)|(?:asm)|(?:xor)|(?:and)|(?:try)|(?:not)|(?:for)|(?:do)|(?:if)|(?:or)|(?:if))\\b)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\b((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<23>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)?(?![\\w<:.]))` }, { include: "$self" }] }, { begin: "(?<=\\{|<%|\\?\\?<)", beginCaptures: {}, end: "\\}|%>|\\?\\?>", endCaptures: { 0: { name: "punctuation.section.block.end.bracket.curly.function.definition.cpp" } }, name: "meta.body.function.definition.cpp", patterns: [{ include: "#function_body_context" }] }, { begin: "(?<=\\}|%>|\\?\\?>)[\\s]*", beginCaptures: {}, end: "[\\s]*(?=;)", endCaptures: {}, name: "meta.tail.function.definition.cpp", patterns: [{ include: "$self" }] }] }, function_parameter_context: { patterns: [{ include: "#ever_present_context" }, { include: "#parameter" }, { include: "#comma" }] }, function_pointer: { begin: `(\\s*+((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))?((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(?:(?:(?:unsigned)|(?:signed)|(?:short)|(?:long))|(?:(?:struct)|(?:class)|(?:union)|(?:enum)))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<18>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*+)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?(?!(?:(?:transaction_safe_dynamic)|(?:__has_cpp_attribute)|(?:reinterpret_cast)|(?:transaction_safe)|(?:atomic_noexcept)|(?:atomic_commit)|(?:__has_include)|(?:atomic_cancel)|(?:synchronized)|(?:thread_local)|(?:dynamic_cast)|(?:static_cast)|(?:const_cast)|(?:constexpr)|(?:co_return)|(?:constinit)|(?:namespace)|(?:protected)|(?:consteval)|(?:constexpr)|(?:constexpr)|(?:co_return)|(?:consteval)|(?:co_await)|(?:continue)|(?:template)|(?:reflexpr)|(?:volatile)|(?:register)|(?:co_await)|(?:co_yield)|(?:restrict)|(?:noexcept)|(?:volatile)|(?:override)|(?:explicit)|(?:decltype)|(?:operator)|(?:noexcept)|(?:noexcept)|(?:typename)|(?:requires)|(?:co_yield)|(?:nullptr)|(?:alignof)|(?:alignas)|(?:default)|(?:mutable)|(?:virtual)|(?:mutable)|(?:private)|(?:include)|(?:warning)|(?:_Pragma)|(?:defined)|(?:typedef)|(?:__asm__)|(?:concept)|(?:define)|(?:module)|(?:sizeof)|(?:switch)|(?:delete)|(?:pragma)|(?:and_eq)|(?:inline)|(?:xor_eq)|(?:typeid)|(?:import)|(?:extern)|(?:public)|(?:bitand)|(?:static)|(?:export)|(?:return)|(?:friend)|(?:ifndef)|(?:not_eq)|(?:false)|(?:final)|(?:break)|(?:const)|(?:catch)|(?:endif)|(?:ifdef)|(?:undef)|(?:error)|(?:audit)|(?:while)|(?:using)|(?:axiom)|(?:or_eq)|(?:compl)|(?:throw)|(?:bitor)|(?:const)|(?:line)|(?:case)|(?:else)|(?:this)|(?:true)|(?:goto)|(?:else)|(?:NULL)|(?:elif)|(?:new)|(?:asm)|(?:xor)|(?:and)|(?:try)|(?:not)|(?:for)|(?:do)|(?:if)|(?:or)|(?:if))\\b)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\b((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<18>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)?(?![\\w<:.]))(((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))?(?:(?:&|\\*)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:&|\\*))?((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\()(\\*)(?:\\s+)?((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)?)(?:\\s+)?(?:(\\[)(\\w*)(\\])(?:\\s+)?)*(\\))(?:\\s+)?(\\()`, beginCaptures: { 1: { name: "meta.qualified_type.cpp", patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.cpp" }, { match: "(?<!\\w)(?:(?:struct)|(?:class)|(?:union)|(?:enum))(?!\\w)", name: "storage.type.$0.cpp" }, { include: "#attributes_context" }, { include: "#storage_types" }, { include: "#number_literal" }, { include: "#string_context" }, { include: "#comma" }, { include: "#scope_resolution_inner_generated" }, { begin: "<", beginCaptures: { 0: { name: "punctuation.section.angle-brackets.begin.template.call.cpp" } }, end: ">", endCaptures: { 0: { name: "punctuation.section.angle-brackets.end.template.call.cpp" } }, name: "meta.template.call.cpp", patterns: [{ include: "#template_call_context" }] }, { match: "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*", name: "entity.name.type.cpp" }] }, 2: { patterns: [{ include: "#attributes_context" }, { include: "#number_literal" }] }, 3: { patterns: [{ include: "#inline_comment" }] }, 4: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 5: { name: "comment.block.cpp" }, 6: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 7: { patterns: [{ include: "#inline_comment" }] }, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 11: { patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.type.cpp" }, { match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)", name: "entity.name.scope-resolution.type.cpp" }, { include: "#template_call_range" }] }, 12: { patterns: [{ include: "#template_call_range" }] }, 13: {}, 14: { patterns: [{ include: "#inline_comment" }] }, 15: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 16: { name: "comment.block.cpp" }, 17: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 18: {}, 19: { patterns: [{ match: "\\*", name: "storage.modifier.pointer.cpp" }, { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "(?:\\&((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))){2,}\\&", name: "invalid.illegal.reference-type.cpp" }, { match: "\\&", name: "storage.modifier.reference.cpp" }] }, 20: { patterns: [{ include: "#inline_comment" }] }, 21: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 22: { name: "comment.block.cpp" }, 23: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 24: { patterns: [{ include: "#inline_comment" }] }, 25: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 26: { name: "comment.block.cpp" }, 27: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 28: { patterns: [{ include: "#inline_comment" }] }, 29: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 30: { name: "comment.block.cpp" }, 31: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 32: { name: "punctuation.section.parens.begin.bracket.round.function.pointer.cpp" }, 33: { name: "punctuation.definition.function.pointer.dereference.cpp" }, 34: { name: "variable.other.definition.pointer.function.cpp" }, 35: { name: "punctuation.definition.begin.bracket.square.cpp" }, 36: { patterns: [{ include: "#evaluation_context" }] }, 37: { name: "punctuation.definition.end.bracket.square.cpp" }, 38: { name: "punctuation.section.parens.end.bracket.round.function.pointer.cpp" }, 39: { name: "punctuation.section.parameters.begin.bracket.round.function.pointer.cpp" } }, end: "(\\))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?=[{=,);>]|\\n)(?!\\()", endCaptures: { 1: { name: "punctuation.section.parameters.end.bracket.round.function.pointer.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, patterns: [{ include: "#function_parameter_context" }] }, function_pointer_parameter: { begin: `(\\s*+((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))?((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(?:(?:(?:unsigned)|(?:signed)|(?:short)|(?:long))|(?:(?:struct)|(?:class)|(?:union)|(?:enum)))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<18>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*+)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?(?!(?:(?:transaction_safe_dynamic)|(?:__has_cpp_attribute)|(?:reinterpret_cast)|(?:transaction_safe)|(?:atomic_noexcept)|(?:atomic_commit)|(?:__has_include)|(?:atomic_cancel)|(?:synchronized)|(?:thread_local)|(?:dynamic_cast)|(?:static_cast)|(?:const_cast)|(?:constexpr)|(?:co_return)|(?:constinit)|(?:namespace)|(?:protected)|(?:consteval)|(?:constexpr)|(?:constexpr)|(?:co_return)|(?:consteval)|(?:co_await)|(?:continue)|(?:template)|(?:reflexpr)|(?:volatile)|(?:register)|(?:co_await)|(?:co_yield)|(?:restrict)|(?:noexcept)|(?:volatile)|(?:override)|(?:explicit)|(?:decltype)|(?:operator)|(?:noexcept)|(?:noexcept)|(?:typename)|(?:requires)|(?:co_yield)|(?:nullptr)|(?:alignof)|(?:alignas)|(?:default)|(?:mutable)|(?:virtual)|(?:mutable)|(?:private)|(?:include)|(?:warning)|(?:_Pragma)|(?:defined)|(?:typedef)|(?:__asm__)|(?:concept)|(?:define)|(?:module)|(?:sizeof)|(?:switch)|(?:delete)|(?:pragma)|(?:and_eq)|(?:inline)|(?:xor_eq)|(?:typeid)|(?:import)|(?:extern)|(?:public)|(?:bitand)|(?:static)|(?:export)|(?:return)|(?:friend)|(?:ifndef)|(?:not_eq)|(?:false)|(?:final)|(?:break)|(?:const)|(?:catch)|(?:endif)|(?:ifdef)|(?:undef)|(?:error)|(?:audit)|(?:while)|(?:using)|(?:axiom)|(?:or_eq)|(?:compl)|(?:throw)|(?:bitor)|(?:const)|(?:line)|(?:case)|(?:else)|(?:this)|(?:true)|(?:goto)|(?:else)|(?:NULL)|(?:elif)|(?:new)|(?:asm)|(?:xor)|(?:and)|(?:try)|(?:not)|(?:for)|(?:do)|(?:if)|(?:or)|(?:if))\\b)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\b((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<18>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)?(?![\\w<:.]))(((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))?(?:(?:&|\\*)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:&|\\*))?((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\()(\\*)(?:\\s+)?((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)?)(?:\\s+)?(?:(\\[)(\\w*)(\\])(?:\\s+)?)*(\\))(?:\\s+)?(\\()`, beginCaptures: { 1: { name: "meta.qualified_type.cpp", patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.cpp" }, { match: "(?<!\\w)(?:(?:struct)|(?:class)|(?:union)|(?:enum))(?!\\w)", name: "storage.type.$0.cpp" }, { include: "#attributes_context" }, { include: "#storage_types" }, { include: "#number_literal" }, { include: "#string_context" }, { include: "#comma" }, { include: "#scope_resolution_inner_generated" }, { begin: "<", beginCaptures: { 0: { name: "punctuation.section.angle-brackets.begin.template.call.cpp" } }, end: ">", endCaptures: { 0: { name: "punctuation.section.angle-brackets.end.template.call.cpp" } }, name: "meta.template.call.cpp", patterns: [{ include: "#template_call_context" }] }, { match: "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*", name: "entity.name.type.cpp" }] }, 2: { patterns: [{ include: "#attributes_context" }, { include: "#number_literal" }] }, 3: { patterns: [{ include: "#inline_comment" }] }, 4: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 5: { name: "comment.block.cpp" }, 6: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 7: { patterns: [{ include: "#inline_comment" }] }, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 11: { patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.type.cpp" }, { match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)", name: "entity.name.scope-resolution.type.cpp" }, { include: "#template_call_range" }] }, 12: { patterns: [{ include: "#template_call_range" }] }, 13: {}, 14: { patterns: [{ include: "#inline_comment" }] }, 15: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 16: { name: "comment.block.cpp" }, 17: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 18: {}, 19: { patterns: [{ match: "\\*", name: "storage.modifier.pointer.cpp" }, { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "(?:\\&((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))){2,}\\&", name: "invalid.illegal.reference-type.cpp" }, { match: "\\&", name: "storage.modifier.reference.cpp" }] }, 20: { patterns: [{ include: "#inline_comment" }] }, 21: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 22: { name: "comment.block.cpp" }, 23: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 24: { patterns: [{ include: "#inline_comment" }] }, 25: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 26: { name: "comment.block.cpp" }, 27: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 28: { patterns: [{ include: "#inline_comment" }] }, 29: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 30: { name: "comment.block.cpp" }, 31: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 32: { name: "punctuation.section.parens.begin.bracket.round.function.pointer.cpp" }, 33: { name: "punctuation.definition.function.pointer.dereference.cpp" }, 34: { name: "variable.parameter.pointer.function.cpp" }, 35: { name: "punctuation.definition.begin.bracket.square.cpp" }, 36: { patterns: [{ include: "#evaluation_context" }] }, 37: { name: "punctuation.definition.end.bracket.square.cpp" }, 38: { name: "punctuation.section.parens.end.bracket.round.function.pointer.cpp" }, 39: { name: "punctuation.section.parameters.begin.bracket.round.function.pointer.cpp" } }, end: "(\\))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?=[{=,);>]|\\n)(?!\\()", endCaptures: { 1: { name: "punctuation.section.parameters.end.bracket.round.function.pointer.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, patterns: [{ include: "#function_parameter_context" }] }, functional_specifiers_pre_parameters: { match: "(?<!\\w)(?:(?:constexpr)|(?:consteval)|(?:explicit)|(?:mutable)|(?:virtual)|(?:inline)|(?:friend))(?!\\w)", name: "storage.modifier.specifier.functional.pre-parameters.$0.cpp" }, gcc_attributes: { begin: "__attribute(?:__)?\\s*\\(\\s*\\(", beginCaptures: { 0: { name: "punctuation.section.attribute.begin.cpp" } }, end: "\\)\\s*\\)", endCaptures: { 0: { name: "punctuation.section.attribute.end.cpp" } }, name: "support.other.attribute.cpp", patterns: [{ include: "#attributes_context" }, { begin: "\\(", beginCaptures: {}, end: "\\)", endCaptures: {}, patterns: [{ include: "#attributes_context" }, { include: "#string_context" }, { include: "#ever_present_context" }] }, { captures: { 1: { name: "keyword.other.using.directive.cpp" }, 2: { name: "entity.name.namespace.cpp" } }, match: "(using)\\s+((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))" }, { match: ",", name: "punctuation.separator.attribute.cpp" }, { match: ":", name: "punctuation.accessor.attribute.cpp" }, { match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)(?=::)", name: "entity.name.namespace.cpp" }, { match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)", name: "entity.other.attribute.$0.cpp" }, { include: "#number_literal" }, { include: "#ever_present_context" }] }, goto_statement: { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 3: { name: "keyword.control.goto.cpp" }, 4: { patterns: [{ include: "#inline_comment" }] }, 5: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 6: { name: "entity.name.label.call.cpp" } }, match: "((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)goto(?!\\w))((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)" }, identifier: { match: "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*" }, include: { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 3: { name: "keyword.control.directive.$5.cpp" }, 4: { name: "punctuation.definition.directive.cpp" }, 6: { name: "string.quoted.other.lt-gt.include.cpp" }, 7: { name: "punctuation.definition.string.begin.cpp" }, 8: { name: "punctuation.definition.string.end.cpp" }, 9: { patterns: [{ include: "#inline_comment" }] }, 10: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 11: { name: "string.quoted.double.include.cpp" }, 12: { name: "punctuation.definition.string.begin.cpp" }, 13: { name: "punctuation.definition.string.end.cpp" }, 14: { patterns: [{ include: "#inline_comment" }] }, 15: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 16: { name: "entity.name.other.preprocessor.macro.include.cpp" }, 17: { patterns: [{ include: "#inline_comment" }] }, 18: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 19: { patterns: [{ include: "#inline_comment" }] }, 20: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 21: { patterns: [{ include: "#inline_comment" }] }, 22: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] } }, match: '^((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((#)(?:\\s+)?((?:include|include_next))\\b)(?:\\s+)?(?:(?:(?:((<)[^>]*(>?)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(?:\\n|$)|(?=\\/\\/)))|((\\")[^\\"]*(\\"?)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(?:\\n|$)|(?=\\/\\/))))|(((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?:\\.(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)*((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(?:\\n|$)|(?=(?:\\/\\/|;)))))|((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(?:\\n|$)|(?=(?:\\/\\/|;))))', name: "meta.preprocessor.include.cpp" }, inheritance_context: { patterns: [{ include: "#ever_present_context" }, { match: ",", name: "punctuation.separator.delimiter.comma.inheritance.cpp" }, { match: "(?<!\\w)(?:(?:protected)|(?:private)|(?:public))(?!\\w)", name: "storage.type.modifier.access.$0.cpp" }, { match: "(?<!\\w)virtual(?!\\w)", name: "storage.type.modifier.virtual.cpp" }, { captures: { 1: { name: "meta.qualified_type.cpp", patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.cpp" }, { match: "(?<!\\w)(?:(?:struct)|(?:class)|(?:union)|(?:enum))(?!\\w)", name: "storage.type.$0.cpp" }, { include: "#attributes_context" }, { include: "#storage_types" }, { include: "#number_literal" }, { include: "#string_context" }, { include: "#comma" }, { include: "#scope_resolution_inner_generated" }, { begin: "<", beginCaptures: { 0: { name: "punctuation.section.angle-brackets.begin.template.call.cpp" } }, end: ">", endCaptures: { 0: { name: "punctuation.section.angle-brackets.end.template.call.cpp" } }, name: "meta.template.call.cpp", patterns: [{ include: "#template_call_context" }] }, { match: "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*", name: "entity.name.type.cpp" }] }, 2: { patterns: [{ include: "#attributes_context" }, { include: "#number_literal" }] }, 3: { patterns: [{ include: "#inline_comment" }] }, 4: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 5: { patterns: [{ include: "#inline_comment" }] }, 6: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 7: { patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.type.cpp" }, { match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)", name: "entity.name.scope-resolution.type.cpp" }, { include: "#template_call_range" }] }, 8: { patterns: [{ include: "#template_call_range" }] }, 9: {}, 10: { patterns: [{ include: "#inline_comment" }] }, 11: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 12: {} }, match: `(?<=protected|virtual|private|public|,|:)(?:\\s+)?(?!(?:(?:(?:protected)|(?:private)|(?:public))|virtual))(\\s*+((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))?((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(?:(?:(?:unsigned)|(?:signed)|(?:short)|(?:long))|(?:(?:struct)|(?:class)|(?:union)|(?:enum)))((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<12>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*+)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?(?!(?:(?:transaction_safe_dynamic)|(?:__has_cpp_attribute)|(?:reinterpret_cast)|(?:transaction_safe)|(?:atomic_noexcept)|(?:atomic_commit)|(?:__has_include)|(?:atomic_cancel)|(?:synchronized)|(?:thread_local)|(?:dynamic_cast)|(?:static_cast)|(?:const_cast)|(?:constexpr)|(?:co_return)|(?:constinit)|(?:namespace)|(?:protected)|(?:consteval)|(?:constexpr)|(?:constexpr)|(?:co_return)|(?:consteval)|(?:co_await)|(?:continue)|(?:template)|(?:reflexpr)|(?:volatile)|(?:register)|(?:co_await)|(?:co_yield)|(?:restrict)|(?:noexcept)|(?:volatile)|(?:override)|(?:explicit)|(?:decltype)|(?:operator)|(?:noexcept)|(?:noexcept)|(?:typename)|(?:requires)|(?:co_yield)|(?:nullptr)|(?:alignof)|(?:alignas)|(?:default)|(?:mutable)|(?:virtual)|(?:mutable)|(?:private)|(?:include)|(?:warning)|(?:_Pragma)|(?:defined)|(?:typedef)|(?:__asm__)|(?:concept)|(?:define)|(?:module)|(?:sizeof)|(?:switch)|(?:delete)|(?:pragma)|(?:and_eq)|(?:inline)|(?:xor_eq)|(?:typeid)|(?:import)|(?:extern)|(?:public)|(?:bitand)|(?:static)|(?:export)|(?:return)|(?:friend)|(?:ifndef)|(?:not_eq)|(?:false)|(?:final)|(?:break)|(?:const)|(?:catch)|(?:endif)|(?:ifdef)|(?:undef)|(?:error)|(?:audit)|(?:while)|(?:using)|(?:axiom)|(?:or_eq)|(?:compl)|(?:throw)|(?:bitor)|(?:const)|(?:line)|(?:case)|(?:else)|(?:this)|(?:true)|(?:goto)|(?:else)|(?:NULL)|(?:elif)|(?:new)|(?:asm)|(?:xor)|(?:and)|(?:try)|(?:not)|(?:for)|(?:do)|(?:if)|(?:or)|(?:if))\\b)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\b((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<12>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)?(?![\\w<:.]))` }] }, inline_builtin_storage_type: { captures: { 1: { name: "storage.type.primitive.cpp storage.type.built-in.primitive.cpp" }, 2: { name: "storage.type.cpp storage.type.built-in.cpp" }, 3: { name: "support.type.posix-reserved.pthread.cpp support.type.built-in.posix-reserved.pthread.cpp" }, 4: { name: "support.type.posix-reserved.cpp support.type.built-in.posix-reserved.cpp" } }, match: "\\s*+(?<!\\w)(?:(?:(?:((?:(?:unsigned)|(?:wchar_t)|(?:double)|(?:signed)|(?:short)|(?:float)|(?:auto)|(?:void)|(?:long)|(?:char)|(?:bool)|(?:int)))|((?:(?:uint_least32_t)|(?:uint_least64_t)|(?:uint_least16_t)|(?:uint_fast64_t)|(?:uint_least8_t)|(?:int_least64_t)|(?:int_least32_t)|(?:int_least16_t)|(?:uint_fast16_t)|(?:uint_fast32_t)|(?:int_least8_t)|(?:int_fast16_t)|(?:int_fast32_t)|(?:int_fast64_t)|(?:uint_fast8_t)|(?:int_fast8_t)|(?:suseconds_t)|(?:useconds_t)|(?:uintmax_t)|(?:uintmax_t)|(?:in_port_t)|(?:uintmax_t)|(?:in_addr_t)|(?:blksize_t)|(?:uintptr_t)|(?:intmax_t)|(?:intptr_t)|(?:blkcnt_t)|(?:intmax_t)|(?:u_quad_t)|(?:uint16_t)|(?:uint32_t)|(?:uint64_t)|(?:ssize_t)|(?:fixpt_t)|(?:qaddr_t)|(?:u_short)|(?:int16_t)|(?:int32_t)|(?:int64_t)|(?:uint8_t)|(?:daddr_t)|(?:caddr_t)|(?:swblk_t)|(?:clock_t)|(?:segsz_t)|(?:nlink_t)|(?:time_t)|(?:u_long)|(?:ushort)|(?:quad_t)|(?:mode_t)|(?:size_t)|(?:u_char)|(?:int8_t)|(?:u_int)|(?:uid_t)|(?:off_t)|(?:pid_t)|(?:gid_t)|(?:dev_t)|(?:div_t)|(?:key_t)|(?:ino_t)|(?:id_t)|(?:id_t)|(?:uint))))|((?:(?:pthread_rwlockattr_t)|(?:pthread_mutexattr_t)|(?:pthread_condattr_t)|(?:pthread_rwlock_t)|(?:pthread_mutex_t)|(?:pthread_cond_t)|(?:pthread_attr_t)|(?:pthread_once_t)|(?:pthread_key_t)|(?:pthread_t))))|([a-zA-Z_]\\w*_t))(?!\\w)" }, inline_comment: { captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))" }, invalid_comment_end: { match: "\\*\\/", name: "invalid.illegal.unexpected.punctuation.definition.comment.end.cpp" }, label: { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 3: { name: "entity.name.label.cpp" }, 4: { patterns: [{ include: "#inline_comment" }] }, 5: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 6: { name: "punctuation.separator.label.cpp" } }, match: "((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))\\b(?<!case|default)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(:)" }, lambdas: { begin: '(?:(?<=[^\\s]|^)(?<![\\w\\]\\)\\[\\*&">])|(?<=\\Wreturn|^return))(?:\\s+)?(\\[(?!\\[| *+"| *+\\d))((?:[^\\[\\]]|((?<!\\[)\\[(?!\\[)(?:[^\\[\\]]*+\\g<3>?)++\\]))*+)(\\](?!((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))[\\[\\];=]))', beginCaptures: { 1: { name: "punctuation.definition.capture.begin.lambda.cpp" }, 2: { name: "meta.lambda.capture.cpp", patterns: [{ include: "#the_this_keyword" }, { captures: { 1: { name: "variable.parameter.capture.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "punctuation.separator.delimiter.comma.cpp" }, 7: { name: "keyword.operator.assignment.cpp" } }, match: "((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(?:(?=\\]|\\z|$)|(,))|(\\=))" }, { include: "#evaluation_context" }] }, 3: {}, 4: { name: "punctuation.definition.capture.end.lambda.cpp" }, 5: { patterns: [{ include: "#inline_comment" }] }, 6: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 7: { name: "comment.block.cpp" }, 8: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, end: "(?<=[;}])", endCaptures: {}, patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.parameters.begin.lambda.cpp" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.parameters.end.lambda.cpp" } }, name: "meta.function.definition.parameters.lambda.cpp", patterns: [{ include: "#function_parameter_context" }] }, { match: "(?<!\\w)(?:(?:constexpr)|(?:consteval)|(?:mutable))(?!\\w)", name: "storage.modifier.lambda.$0.cpp" }, { begin: "->", beginCaptures: { 0: { name: "punctuation.definition.lambda.return-type.cpp" } }, end: "(?=\\{)", endCaptures: {}, patterns: [{ include: "#comments" }, { match: "\\S+", name: "storage.type.return-type.lambda.cpp" }] }, { begin: "\\{", beginCaptures: { 0: { name: "punctuation.section.block.begin.bracket.curly.lambda.cpp" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.section.block.end.bracket.curly.lambda.cpp" } }, name: "meta.function.definition.body.lambda.cpp", patterns: [{ include: "$self" }] }] }, language_constants: { match: "(?<!\\w)(?:(?:nullptr)|(?:false)|(?:NULL)|(?:true))(?!\\w)", name: "constant.language.$0.cpp" }, line: { begin: "^((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(#)(?:\\s+)?line\\b", beginCaptures: { 0: { name: "keyword.control.directive.line.cpp" }, 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 5: { name: "punctuation.definition.directive.cpp" } }, end: "(?<!\\\\)(?:(?=\\n)|(?<=^\\n|[^\\\\]\\n)(?=$))", endCaptures: {}, name: "meta.preprocessor.line.cpp", patterns: [{ include: "#string_context" }, { include: "#preprocessor_number_literal" }, { include: "#line_continuation_character" }] }, line_comment: { begin: "\\s*+(\\/\\/)", beginCaptures: { 1: { name: "punctuation.definition.comment.cpp" } }, end: "(?<!\\\\)(?:(?=\\n)|(?<=^\\n|[^\\\\]\\n)(?=$))", endCaptures: {}, name: "comment.line.double-slash.cpp", patterns: [{ include: "#line_continuation_character" }] }, line_continuation_character: { match: "\\\\\\n", name: "constant.character.escape.line-continuation.cpp" }, macro: { begin: "(^((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(#)(?:\\s+)?define\\b)(?:\\s+)?((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))", beginCaptures: { 1: { name: "keyword.control.directive.define.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "punctuation.definition.directive.cpp" }, 7: { name: "entity.name.function.preprocessor.cpp" } }, end: "(?<!\\\\)(?:(?=\\n)|(?<=^\\n|[^\\\\]\\n)(?=$))", endCaptures: {}, name: "meta.preprocessor.macro.cpp", patterns: [{ captures: { 1: { name: "punctuation.definition.parameters.begin.preprocessor.cpp" }, 2: { name: "meta.function.preprocessor.parameters.cpp", patterns: [{ captures: { 1: { name: "variable.parameter.preprocessor.cpp" } }, match: "(?<=[(,])(?:\\s+)?((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)(?:\\s+)?" }, { match: ",", name: "punctuation.separator.parameters.cpp" }, { match: "\\.\\.\\.", name: "punctuation.vararg-ellipses.variable.parameter.preprocessor.cpp" }] }, 3: { name: "punctuation.definition.parameters.end.preprocessor.cpp" } }, match: "\\G(?:\\s+)?(\\()([^\\(]*)(\\))" }, { include: "#macro_context" }, { include: "#macro_argument" }] }, macro_argument: { match: "##?(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)", name: "variable.other.macro.argument.cpp" }, macro_context: { patterns: [{ include: "source.cpp.embedded.macro" }] }, macro_name: { match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)", name: "entity.name.function.preprocessor.cpp" }, member_access: { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 3: { name: "variable.language.this.cpp" }, 4: { name: "variable.other.object.access.cpp" }, 5: { name: "punctuation.separator.dot-access.cpp" }, 6: { name: "punctuation.separator.pointer-access.cpp" }, 7: { patterns: [{ captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 5: { name: "variable.language.this.cpp" }, 6: { name: "variable.other.object.property.cpp" }, 7: { name: "punctuation.separator.dot-access.cpp" }, 8: { name: "punctuation.separator.pointer-access.cpp" } }, match: "(?<=(?:\\.\\*|\\.|->|->\\*))(?:\\s+)?(?:((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)this(?!\\w))|((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*|(?<=\\]|\\)))(?:\\s+)?))(?:((?:\\.\\*|\\.))|((?:->\\*|->)))" }, { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 5: { name: "variable.language.this.cpp" }, 6: { name: "variable.other.object.access.cpp" }, 7: { name: "punctuation.separator.dot-access.cpp" }, 8: { name: "punctuation.separator.pointer-access.cpp" } }, match: "(?:((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)this(?!\\w))|((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*|(?<=\\]|\\)))(?:\\s+)?))(?:((?:\\.\\*|\\.))|((?:->\\*|->)))" }, { include: "#member_access" }, { include: "#method_access" }] }, 8: { name: "variable.other.property.cpp" } }, match: "(?:((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)this(?!\\w))|((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*|(?<=\\]|\\)))(?:\\s+)?))(?:((?:\\.\\*|\\.))|((?:->\\*|->)))((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?:\\s+)?(?:(?:\\.\\*|\\.)|(?:->\\*|->))(?:\\s+)?)*)(?:\\s+)?(\\b(?!uint_least32_t[^\\w]|uint_least16_t[^\\w]|uint_least64_t[^\\w]|int_least32_t[^\\w]|int_least64_t[^\\w]|uint_fast32_t[^\\w]|uint_fast64_t[^\\w]|uint_least8_t[^\\w]|uint_fast16_t[^\\w]|int_least16_t[^\\w]|int_fast16_t[^\\w]|int_least8_t[^\\w]|uint_fast8_t[^\\w]|int_fast64_t[^\\w]|int_fast32_t[^\\w]|int_fast8_t[^\\w]|suseconds_t[^\\w]|useconds_t[^\\w]|in_addr_t[^\\w]|uintmax_t[^\\w]|uintmax_t[^\\w]|uintmax_t[^\\w]|in_port_t[^\\w]|uintptr_t[^\\w]|blksize_t[^\\w]|uint32_t[^\\w]|uint64_t[^\\w]|u_quad_t[^\\w]|intmax_t[^\\w]|intmax_t[^\\w]|unsigned[^\\w]|blkcnt_t[^\\w]|uint16_t[^\\w]|intptr_t[^\\w]|swblk_t[^\\w]|wchar_t[^\\w]|u_short[^\\w]|qaddr_t[^\\w]|caddr_t[^\\w]|daddr_t[^\\w]|fixpt_t[^\\w]|nlink_t[^\\w]|segsz_t[^\\w]|clock_t[^\\w]|ssize_t[^\\w]|int16_t[^\\w]|int32_t[^\\w]|int64_t[^\\w]|uint8_t[^\\w]|int8_t[^\\w]|mode_t[^\\w]|quad_t[^\\w]|ushort[^\\w]|u_long[^\\w]|u_char[^\\w]|double[^\\w]|signed[^\\w]|time_t[^\\w]|size_t[^\\w]|key_t[^\\w]|div_t[^\\w]|ino_t[^\\w]|uid_t[^\\w]|gid_t[^\\w]|off_t[^\\w]|pid_t[^\\w]|float[^\\w]|dev_t[^\\w]|u_int[^\\w]|short[^\\w]|bool[^\\w]|id_t[^\\w]|uint[^\\w]|long[^\\w]|char[^\\w]|void[^\\w]|auto[^\\w]|id_t[^\\w]|int[^\\w])(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\b(?!\\())" }, memory_operators: { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 3: { name: "keyword.operator.wordlike.cpp" }, 4: { name: "keyword.operator.delete.array.cpp" }, 5: { name: "keyword.operator.delete.array.bracket.cpp" }, 6: { name: "keyword.operator.delete.cpp" }, 7: { name: "keyword.operator.new.cpp" } }, match: "((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?:(?:(delete)(?:\\s+)?(\\[\\])|(delete))|(new))(?!\\w))" }, method_access: { begin: "(?:((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)this(?!\\w))|((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*|(?<=\\]|\\)))(?:\\s+)?))(?:((?:\\.\\*|\\.))|((?:->\\*|->)))((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?:\\s+)?(?:(?:\\.\\*|\\.)|(?:->\\*|->))(?:\\s+)?)*)(?:\\s+)?(~?(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)(?:\\s+)?(\\()", beginCaptures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 5: { name: "variable.language.this.cpp" }, 6: { name: "variable.other.object.access.cpp" }, 7: { name: "punctuation.separator.dot-access.cpp" }, 8: { name: "punctuation.separator.pointer-access.cpp" }, 9: { patterns: [{ captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 5: { name: "variable.language.this.cpp" }, 6: { name: "variable.other.object.property.cpp" }, 7: { name: "punctuation.separator.dot-access.cpp" }, 8: { name: "punctuation.separator.pointer-access.cpp" } }, match: "(?<=(?:\\.\\*|\\.|->|->\\*))(?:\\s+)?(?:((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)this(?!\\w))|((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*|(?<=\\]|\\)))(?:\\s+)?))(?:((?:\\.\\*|\\.))|((?:->\\*|->)))" }, { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 5: { name: "variable.language.this.cpp" }, 6: { name: "variable.other.object.access.cpp" }, 7: { name: "punctuation.separator.dot-access.cpp" }, 8: { name: "punctuation.separator.pointer-access.cpp" } }, match: "(?:((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)this(?!\\w))|((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*|(?<=\\]|\\)))(?:\\s+)?))(?:((?:\\.\\*|\\.))|((?:->\\*|->)))" }, { include: "#member_access" }, { include: "#method_access" }] }, 10: { name: "entity.name.function.member.cpp" }, 11: { name: "punctuation.section.arguments.begin.bracket.round.function.member.cpp" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.function.member.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, misc_keywords: { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 3: { name: "keyword.other.$3.cpp" } }, match: "((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)(?:(?:constinit)|(?:requires)|(?:typedef)|(?:concept)|(?:export)|(?:module))(?!\\w))" }, ms_attributes: { begin: "__declspec\\(", beginCaptures: { 0: { name: "punctuation.section.attribute.begin.cpp" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.attribute.end.cpp" } }, name: "support.other.attribute.cpp", patterns: [{ include: "#attributes_context" }, { begin: "\\(", beginCaptures: {}, end: "\\)", endCaptures: {}, patterns: [{ include: "#attributes_context" }, { include: "#string_context" }, { include: "#ever_present_context" }] }, { captures: { 1: { name: "keyword.other.using.directive.cpp" }, 2: { name: "entity.name.namespace.cpp" } }, match: "(using)\\s+((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))" }, { match: ",", name: "punctuation.separator.attribute.cpp" }, { match: ":", name: "punctuation.accessor.attribute.cpp" }, { match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)(?=::)", name: "entity.name.namespace.cpp" }, { match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)", name: "entity.other.attribute.$0.cpp" }, { include: "#number_literal" }, { include: "#ever_present_context" }] }, namespace_alias: { captures: { 1: { name: "keyword.other.namespace.alias.cpp storage.type.namespace.alias.cpp" }, 2: { name: "entity.name.namespace.alias.cpp" }, 3: { name: "keyword.operator.assignment.cpp" }, 4: { name: "meta.declaration.namespace.alias.value.cpp" }, 5: { patterns: [{ include: "#scope_resolution_namespace_alias_inner_generated" }] }, 6: { name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.namespace.alias.cpp" }, 7: { patterns: [{ include: "#template_call_range" }] }, 9: { name: "entity.name.namespace.cpp" }, 10: { name: "punctuation.terminator.statement.cpp" } }, match: `(?<!\\w)(namespace)\\s+((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(?:\\s+)?(\\=)(?:\\s+)?(((::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<8>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*\\s*+)(?:\\s+)?((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(?:\\s+)?(?:(;)|\\n))`, name: "meta.declaration.namespace.alias.cpp" }, namespace_block: { begin: "((?<!\\w)namespace(?!\\w))", beginCaptures: { 0: { name: "meta.head.namespace.cpp" }, 1: { name: "keyword.other.namespace.definition.cpp storage.type.namespace.definition.cpp" } }, end: "(?:(?<=\\}|%>|\\?\\?>)|(?=[;>\\[\\]=]))", endCaptures: {}, name: "meta.block.namespace.cpp", patterns: [{ begin: "\\G ?", beginCaptures: {}, end: "(?:\\{|<%|\\?\\?<|(?=;))", endCaptures: { 0: { name: "punctuation.section.block.begin.bracket.curly.namespace.cpp" } }, name: "meta.head.namespace.cpp", patterns: [{ include: "#ever_present_context" }, { include: "#attributes_context" }, { captures: { 1: { patterns: [{ include: "#scope_resolution_namespace_block_inner_generated" }] }, 2: { name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.namespace.block.cpp" }, 3: { patterns: [{ include: "#template_call_range" }] }, 4: {}, 5: { name: "entity.name.namespace.cpp" }, 6: { name: "punctuation.separator.scope-resolution.namespace.block.cpp" }, 7: { name: "storage.modifier.inline.cpp" } }, match: `((::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<4>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*\\s*+)(?:\\s+)?((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(?:\\s+)?(?:(::)(?:\\s+)?(inline))?` }] }, { begin: "(?<=\\{|<%|\\?\\?<)", beginCaptures: {}, end: "\\}|%>|\\?\\?>", endCaptures: { 0: { name: "punctuation.section.block.end.bracket.curly.namespace.cpp" } }, name: "meta.body.namespace.cpp", patterns: [{ include: "$self" }] }, { begin: "(?<=\\}|%>|\\?\\?>)[\\s]*", beginCaptures: {}, end: "[\\s]*(?=;)", endCaptures: {}, name: "meta.tail.namespace.cpp", patterns: [{ include: "$self" }] }] }, noexcept_operator: { begin: "((?<!\\w)noexcept(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\()", beginCaptures: { 1: { name: "keyword.operator.functionlike.cpp keyword.operator.noexcept.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "punctuation.section.arguments.begin.bracket.round.operator.noexcept.cpp" } }, contentName: "meta.arguments.operator.noexcept", end: "\\)", endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.operator.noexcept.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, number_literal: { captures: { 0: { patterns: [{ begin: "(?=.)", beginCaptures: {}, end: "$", endCaptures: {}, patterns: [{ captures: { 1: { name: "keyword.other.unit.hexadecimal.cpp" }, 2: { name: "constant.numeric.hexadecimal.cpp", patterns: [{ match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric.cpp" }] }, 3: { name: "punctuation.separator.constant.numeric.cpp" }, 4: { name: "constant.numeric.hexadecimal.cpp" }, 5: { name: "constant.numeric.hexadecimal.cpp", patterns: [{ match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric.cpp" }] }, 6: { name: "punctuation.separator.constant.numeric.cpp" }, 7: { name: "keyword.other.unit.exponent.hexadecimal.cpp" }, 8: { name: "keyword.operator.plus.exponent.hexadecimal.cpp" }, 9: { name: "keyword.operator.minus.exponent.hexadecimal.cpp" }, 10: { name: "constant.numeric.exponent.hexadecimal.cpp", patterns: [{ match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric.cpp" }] }, 11: { name: "keyword.other.suffix.literal.built-in.floating-point.cpp keyword.other.unit.suffix.floating-point.cpp" }, 12: { name: "keyword.other.suffix.literal.user-defined.integer.cpp keyword.other.unit.user-defined.cpp" } }, match: "(\\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?:(?<=[0-9a-fA-F])\\.|\\.(?=[0-9a-fA-F])))([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?(?:(?<!')([pP])(\\+?)(\\-?)([0-9](?:[0-9]|(?<=[0-9a-fA-F])'(?=[0-9a-fA-F]))*))?([lLfF](?!\\w))?((?:\\w(?<![0-9a-fA-FpP])\\w*)?$)" }, { captures: { 1: { name: "constant.numeric.decimal.cpp", patterns: [{ match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric.cpp" }] }, 2: { name: "punctuation.separator.constant.numeric.cpp" }, 3: { name: "constant.numeric.decimal.point.cpp" }, 4: { name: "constant.numeric.decimal.cpp", patterns: [{ match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric.cpp" }] }, 5: { name: "punctuation.separator.constant.numeric.cpp" }, 6: { name: "keyword.other.unit.exponent.decimal.cpp" }, 7: { name: "keyword.operator.plus.exponent.decimal.cpp" }, 8: { name: "keyword.operator.minus.exponent.decimal.cpp" }, 9: { name: "constant.numeric.exponent.decimal.cpp", patterns: [{ match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric.cpp" }] }, 10: { name: "keyword.other.suffix.literal.built-in.floating-point.cpp keyword.other.unit.suffix.floating-point.cpp" }, 11: { name: "keyword.other.suffix.literal.user-defined.integer.cpp keyword.other.unit.user-defined.cpp" } }, match: "\\G(?=[0-9.])(?!0[xXbB])([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?:(?<=[0-9])\\.|\\.(?=[0-9])))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?(?:(?<!')([eE])(\\+?)(\\-?)([0-9](?:[0-9]|(?<=[0-9a-fA-F])'(?=[0-9a-fA-F]))*))?([lLfF](?!\\w))?((?:\\w(?<![0-9eE])\\w*)?$)" }, { captures: { 1: { name: "keyword.other.unit.binary.cpp" }, 2: { name: "constant.numeric.binary.cpp", patterns: [{ match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric.cpp" }] }, 3: { name: "punctuation.separator.constant.numeric.cpp" }, 4: { name: "keyword.other.suffix.literal.built-in.integer.cpp keyword.other.unit.suffix.integer.cpp" }, 5: { name: "keyword.other.suffix.literal.user-defined.integer.cpp keyword.other.unit.user-defined.cpp" } }, match: "(\\G0[bB])([01](?:[01]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?:[uU]|(?:[uU]ll?)|(?:[uU]LL?)|(?:ll?[uU]?)|(?:LL?[uU]?)|[fF])(?!\\w))?((?:\\w(?<![0-9])\\w*)?$)" }, { captures: { 1: { name: "keyword.other.unit.octal.cpp" }, 2: { name: "constant.numeric.octal.cpp", patterns: [{ match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric.cpp" }] }, 3: { name: "punctuation.separator.constant.numeric.cpp" }, 4: { name: "keyword.other.suffix.literal.built-in.integer.cpp keyword.other.unit.suffix.integer.cpp" }, 5: { name: "keyword.other.suffix.literal.user-defined.integer.cpp keyword.other.unit.user-defined.cpp" } }, match: "(\\G0)((?:[0-7]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))+)((?:[uU]|(?:[uU]ll?)|(?:[uU]LL?)|(?:ll?[uU]?)|(?:LL?[uU]?)|[fF])(?!\\w))?((?:\\w(?<![0-9])\\w*)?$)" }, { captures: { 1: { name: "keyword.other.unit.hexadecimal.cpp" }, 2: { name: "constant.numeric.hexadecimal.cpp", patterns: [{ match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric.cpp" }] }, 3: { name: "punctuation.separator.constant.numeric.cpp" }, 4: { name: "keyword.other.unit.exponent.hexadecimal.cpp" }, 5: { name: "keyword.operator.plus.exponent.hexadecimal.cpp" }, 6: { name: "keyword.operator.minus.exponent.hexadecimal.cpp" }, 7: { name: "constant.numeric.exponent.hexadecimal.cpp", patterns: [{ match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric.cpp" }] }, 8: { name: "keyword.other.suffix.literal.built-in.integer.cpp keyword.other.unit.suffix.integer.cpp" }, 9: { name: "keyword.other.suffix.literal.user-defined.integer.cpp keyword.other.unit.user-defined.cpp" } }, match: "(\\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)(?:(?<!')([pP])(\\+?)(\\-?)([0-9](?:[0-9]|(?<=[0-9a-fA-F])'(?=[0-9a-fA-F]))*))?((?:[uU]|(?:[uU]ll?)|(?:[uU]LL?)|(?:ll?[uU]?)|(?:LL?[uU]?)|[fF])(?!\\w))?((?:\\w(?<![0-9a-fA-FpP])\\w*)?$)" }, { captures: { 1: { name: "constant.numeric.decimal.cpp", patterns: [{ match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric.cpp" }] }, 2: { name: "punctuation.separator.constant.numeric.cpp" }, 3: { name: "keyword.other.unit.exponent.decimal.cpp" }, 4: { name: "keyword.operator.plus.exponent.decimal.cpp" }, 5: { name: "keyword.operator.minus.exponent.decimal.cpp" }, 6: { name: "constant.numeric.exponent.decimal.cpp", patterns: [{ match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric.cpp" }] }, 7: { name: "keyword.other.suffix.literal.built-in.integer.cpp keyword.other.unit.suffix.integer.cpp" }, 8: { name: "keyword.other.suffix.literal.user-defined.integer.cpp keyword.other.unit.user-defined.cpp" } }, match: "\\G(?=[0-9.])(?!0[xXbB])([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)(?:(?<!')([eE])(\\+?)(\\-?)([0-9](?:[0-9]|(?<=[0-9a-fA-F])'(?=[0-9a-fA-F]))*))?((?:[uU]|(?:[uU]ll?)|(?:[uU]LL?)|(?:ll?[uU]?)|(?:LL?[uU]?)|[fF])(?!\\w))?((?:\\w(?<![0-9eE])\\w*)?$)" }, { match: "(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-])+", name: "invalid.illegal.constant.numeric.cpp" }] }] } }, match: "(?<!\\w)\\.?\\d(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-])*" }, operator_overload: { begin: `((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(\\s*+((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))?((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(?:(?:(?:unsigned)|(?:signed)|(?:short)|(?:long))|(?:(?:struct)|(?:class)|(?:union)|(?:enum)))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<55>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*+)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?(?!(?:(?:transaction_safe_dynamic)|(?:__has_cpp_attribute)|(?:reinterpret_cast)|(?:transaction_safe)|(?:atomic_noexcept)|(?:atomic_commit)|(?:__has_include)|(?:atomic_cancel)|(?:synchronized)|(?:thread_local)|(?:dynamic_cast)|(?:static_cast)|(?:const_cast)|(?:constexpr)|(?:co_return)|(?:constinit)|(?:namespace)|(?:protected)|(?:consteval)|(?:constexpr)|(?:constexpr)|(?:co_return)|(?:consteval)|(?:co_await)|(?:continue)|(?:template)|(?:reflexpr)|(?:volatile)|(?:register)|(?:co_await)|(?:co_yield)|(?:restrict)|(?:noexcept)|(?:volatile)|(?:override)|(?:explicit)|(?:decltype)|(?:operator)|(?:noexcept)|(?:noexcept)|(?:typename)|(?:requires)|(?:co_yield)|(?:nullptr)|(?:alignof)|(?:alignas)|(?:default)|(?:mutable)|(?:virtual)|(?:mutable)|(?:private)|(?:include)|(?:warning)|(?:_Pragma)|(?:defined)|(?:typedef)|(?:__asm__)|(?:concept)|(?:define)|(?:module)|(?:sizeof)|(?:switch)|(?:delete)|(?:pragma)|(?:and_eq)|(?:inline)|(?:xor_eq)|(?:typeid)|(?:import)|(?:extern)|(?:public)|(?:bitand)|(?:static)|(?:export)|(?:return)|(?:friend)|(?:ifndef)|(?:not_eq)|(?:false)|(?:final)|(?:break)|(?:const)|(?:catch)|(?:endif)|(?:ifdef)|(?:undef)|(?:error)|(?:audit)|(?:while)|(?:using)|(?:axiom)|(?:or_eq)|(?:compl)|(?:throw)|(?:bitor)|(?:const)|(?:line)|(?:case)|(?:else)|(?:this)|(?:true)|(?:goto)|(?:else)|(?:NULL)|(?:elif)|(?:new)|(?:asm)|(?:xor)|(?:and)|(?:try)|(?:not)|(?:for)|(?:do)|(?:if)|(?:or)|(?:if))\\b)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\b((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<55>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)?(?![\\w<:.]))(((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))?(?:(?:&|\\*)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:&|\\*))?((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?((?:__cdecl|__clrcall|__stdcall|__fastcall|__thiscall|__vectorcall)?)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<55>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*+)(operator)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<55>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*+)(?:(?:((?:(?:delete\\[\\])|(?:delete)|(?:new\\[\\])|(?:<=>)|(?:<<=)|(?:new)|(?:>>=)|(?:\\->\\*)|(?:\\/=)|(?:%=)|(?:&=)|(?:>=)|(?:\\|=)|(?:\\+\\+)|(?:\\-\\-)|(?:\\(\\))|(?:\\[\\])|(?:\\->)|(?:\\+\\+)|(?:<<)|(?:>>)|(?:\\-\\-)|(?:<=)|(?:\\^=)|(?:==)|(?:!=)|(?:&&)|(?:\\|\\|)|(?:\\+=)|(?:\\-=)|(?:\\*=)|,|\\+|\\-|!|~|\\*|&|\\*|\\/|%|\\+|\\-|<|>|&|\\^|\\||=))|((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)(((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))?(?:(?:&|\\*)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:&|\\*))?((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?:\\[\\])?)))|("")((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?=\\<|\\()`, beginCaptures: { 0: { name: "meta.head.function.definition.special.operator-overload.cpp" }, 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 5: { name: "meta.qualified_type.cpp", patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.cpp" }, { match: "(?<!\\w)(?:(?:struct)|(?:class)|(?:union)|(?:enum))(?!\\w)", name: "storage.type.$0.cpp" }, { include: "#attributes_context" }, { include: "#storage_types" }, { include: "#number_literal" }, { include: "#string_context" }, { include: "#comma" }, { include: "#scope_resolution_inner_generated" }, { begin: "<", beginCaptures: { 0: { name: "punctuation.section.angle-brackets.begin.template.call.cpp" } }, end: ">", endCaptures: { 0: { name: "punctuation.section.angle-brackets.end.template.call.cpp" } }, name: "meta.template.call.cpp", patterns: [{ include: "#template_call_context" }] }, { match: "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*", name: "entity.name.type.cpp" }] }, 6: { patterns: [{ include: "#attributes_context" }, { include: "#number_literal" }] }, 7: { patterns: [{ include: "#inline_comment" }] }, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 11: { patterns: [{ include: "#inline_comment" }] }, 12: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 13: { name: "comment.block.cpp" }, 14: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 15: { patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.type.cpp" }, { match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)", name: "entity.name.scope-resolution.type.cpp" }, { include: "#template_call_range" }] }, 16: { patterns: [{ include: "#template_call_range" }] }, 17: {}, 18: { patterns: [{ include: "#inline_comment" }] }, 19: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 20: { name: "comment.block.cpp" }, 21: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 22: {}, 23: { patterns: [{ match: "\\*", name: "storage.modifier.pointer.cpp" }, { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "(?:\\&((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))){2,}\\&", name: "invalid.illegal.reference-type.cpp" }, { match: "\\&", name: "storage.modifier.reference.cpp" }] }, 24: { patterns: [{ include: "#inline_comment" }] }, 25: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 26: { name: "comment.block.cpp" }, 27: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 28: { patterns: [{ include: "#inline_comment" }] }, 29: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 30: { name: "comment.block.cpp" }, 31: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 32: { patterns: [{ include: "#inline_comment" }] }, 33: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 34: { name: "comment.block.cpp" }, 35: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 36: { name: "storage.type.modifier.calling-convention.cpp" }, 37: { patterns: [{ include: "#inline_comment" }] }, 38: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 39: { name: "comment.block.cpp" }, 40: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 41: { patterns: [{ include: "#inline_comment" }] }, 42: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 43: { name: "comment.block.cpp" }, 44: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 45: { patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.operator.cpp" }, { match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)", name: "entity.name.scope-resolution.operator.cpp" }, { include: "#template_call_range" }] }, 46: { patterns: [{ include: "#template_call_range" }] }, 47: {}, 48: { name: "keyword.other.operator.overload.cpp" }, 49: { patterns: [{ include: "#inline_comment" }] }, 50: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 51: { name: "comment.block.cpp" }, 52: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 53: { patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.operator-overload.cpp" }, { match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)", name: "entity.name.scope-resolution.operator-overload.cpp" }, { include: "#template_call_range" }] }, 54: { patterns: [{ include: "#template_call_range" }] }, 55: {}, 56: { name: "entity.name.operator.cpp" }, 57: { name: "entity.name.operator.type.cpp" }, 58: { patterns: [{ match: "\\*", name: "entity.name.operator.type.pointer.cpp" }, { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "(?:\\&((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))){2,}\\&", name: "invalid.illegal.reference-type.cpp" }, { match: "\\&", name: "entity.name.operator.type.reference.cpp" }] }, 59: { patterns: [{ include: "#inline_comment" }] }, 60: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 61: { name: "comment.block.cpp" }, 62: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 63: { patterns: [{ include: "#inline_comment" }] }, 64: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 65: { name: "comment.block.cpp" }, 66: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 67: { patterns: [{ include: "#inline_comment" }] }, 68: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 69: { name: "comment.block.cpp" }, 70: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 71: { name: "entity.name.operator.type.array.cpp" }, 72: { name: "entity.name.operator.custom-literal.cpp" }, 73: { patterns: [{ include: "#inline_comment" }] }, 74: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 75: { name: "comment.block.cpp" }, 76: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 77: { name: "entity.name.operator.custom-literal.cpp" }, 78: { patterns: [{ include: "#inline_comment" }] }, 79: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 80: { name: "comment.block.cpp" }, 81: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, end: "(?:(?<=\\}|%>|\\?\\?>)|(?=[;>\\[\\]=]))", endCaptures: {}, name: "meta.function.definition.special.operator-overload.cpp", patterns: [{ begin: "\\G ?", beginCaptures: {}, end: "(?:\\{|<%|\\?\\?<|(?=;))", endCaptures: { 0: { name: "punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload.cpp" } }, name: "meta.head.function.definition.special.operator-overload.cpp", patterns: [{ include: "#ever_present_context" }, { include: "#template_call_range" }, { begin: "\\(", beginCaptures: { 0: { name: "punctuation.section.parameters.begin.bracket.round.special.operator-overload.cpp" } }, contentName: "meta.function.definition.parameters.special.operator-overload", end: "\\)", endCaptures: { 0: { name: "punctuation.section.parameters.end.bracket.round.special.operator-overload.cpp" } }, patterns: [{ include: "#function_parameter_context" }, { include: "#evaluation_context" }] }, { include: "#qualifiers_and_specifiers_post_parameters" }, { captures: { 1: { name: "keyword.operator.assignment.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "keyword.other.default.function.cpp" }, 7: { name: "keyword.other.delete.function.cpp" } }, match: "(\\=)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(default)|(delete))" }, { include: "$self" }] }, { begin: "(?<=\\{|<%|\\?\\?<)", beginCaptures: {}, end: "\\}|%>|\\?\\?>", endCaptures: { 0: { name: "punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload.cpp" } }, name: "meta.body.function.definition.special.operator-overload.cpp", patterns: [{ include: "#function_body_context" }] }, { begin: "(?<=\\}|%>|\\?\\?>)[\\s]*", beginCaptures: {}, end: "[\\s]*(?=;)", endCaptures: {}, name: "meta.tail.function.definition.special.operator-overload.cpp", patterns: [{ include: "$self" }] }] }, operators: { patterns: [{ begin: "((?<!\\w)sizeof(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\()", beginCaptures: { 1: { name: "keyword.operator.functionlike.cpp keyword.operator.sizeof.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "punctuation.section.arguments.begin.bracket.round.operator.sizeof.cpp" } }, contentName: "meta.arguments.operator.sizeof", end: "\\)", endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.operator.sizeof.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, { begin: "((?<!\\w)alignof(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\()", beginCaptures: { 1: { name: "keyword.operator.functionlike.cpp keyword.operator.alignof.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "punctuation.section.arguments.begin.bracket.round.operator.alignof.cpp" } }, contentName: "meta.arguments.operator.alignof", end: "\\)", endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.operator.alignof.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, { begin: "((?<!\\w)alignas(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\()", beginCaptures: { 1: { name: "keyword.operator.functionlike.cpp keyword.operator.alignas.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "punctuation.section.arguments.begin.bracket.round.operator.alignas.cpp" } }, contentName: "meta.arguments.operator.alignas", end: "\\)", endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.operator.alignas.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, { begin: "((?<!\\w)typeid(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\()", beginCaptures: { 1: { name: "keyword.operator.functionlike.cpp keyword.operator.typeid.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "punctuation.section.arguments.begin.bracket.round.operator.typeid.cpp" } }, contentName: "meta.arguments.operator.typeid", end: "\\)", endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.operator.typeid.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, { begin: "((?<!\\w)noexcept(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\()", beginCaptures: { 1: { name: "keyword.operator.functionlike.cpp keyword.operator.noexcept.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "punctuation.section.arguments.begin.bracket.round.operator.noexcept.cpp" } }, contentName: "meta.arguments.operator.noexcept", end: "\\)", endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.operator.noexcept.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, { begin: "(\\bsizeof\\.\\.\\.)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\()", beginCaptures: { 1: { name: "keyword.operator.functionlike.cpp keyword.operator.sizeof.variadic.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "punctuation.section.arguments.begin.bracket.round.operator.sizeof.variadic.cpp" } }, contentName: "meta.arguments.operator.sizeof.variadic", end: "\\)", endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.operator.sizeof.variadic.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, { match: "--", name: "keyword.operator.decrement.cpp" }, { match: "\\+\\+", name: "keyword.operator.increment.cpp" }, { match: "%=|\\+=|-=|\\*=|(?<!\\()\\/=", name: "keyword.operator.assignment.compound.cpp" }, { match: "&=|\\^=|<<=|>>=|\\|=", name: "keyword.operator.assignment.compound.bitwise.cpp" }, { match: "<<|>>", name: "keyword.operator.bitwise.shift.cpp" }, { match: "!=|<=|>=|==|<|>", name: "keyword.operator.comparison.cpp" }, { match: "&&|!|\\|\\|", name: "keyword.operator.logical.cpp" }, { match: "&|\\||\\^|~", name: "keyword.operator.bitwise.cpp" }, { include: "#assignment_operator" }, { match: "%|\\*|\\/|-|\\+", name: "keyword.operator.arithmetic.cpp" }, { include: "#ternary_operator" }] }, over_qualified_types: { patterns: [{ captures: { 1: { name: "storage.type.struct.parameter.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 4: { name: "entity.name.type.struct.parameter.cpp" }, 5: { patterns: [{ include: "#inline_comment" }] }, 6: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 7: { patterns: [{ match: "\\*", name: "storage.modifier.pointer.cpp" }, { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "(?:\\&((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))){2,}\\&", name: "invalid.illegal.reference-type.cpp" }, { match: "\\&", name: "storage.modifier.reference.cpp" }] }, 8: { patterns: [{ include: "#inline_comment" }] }, 9: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 10: { patterns: [{ include: "#inline_comment" }] }, 11: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 12: { patterns: [{ include: "#inline_comment" }] }, 13: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 14: { name: "variable.other.object.declare.cpp" }, 15: { patterns: [{ include: "#inline_comment" }] }, 16: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 17: { patterns: [{ include: "#inline_comment" }] }, 18: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 19: { patterns: [{ include: "#inline_comment" }] }, 20: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] } }, match: "(\\bstruct)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))?(?:(?:&|\\*)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:&|\\*))((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?((?:(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))?)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:\\[((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))\\]((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?(?=,|\\)|\\n)" }, { captures: { 1: { name: "storage.type.enum.parameter.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 4: { name: "entity.name.type.enum.parameter.cpp" }, 5: { patterns: [{ include: "#inline_comment" }] }, 6: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 7: { patterns: [{ match: "\\*", name: "storage.modifier.pointer.cpp" }, { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "(?:\\&((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))){2,}\\&", name: "invalid.illegal.reference-type.cpp" }, { match: "\\&", name: "storage.modifier.reference.cpp" }] }, 8: { patterns: [{ include: "#inline_comment" }] }, 9: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 10: { patterns: [{ include: "#inline_comment" }] }, 11: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 12: { patterns: [{ include: "#inline_comment" }] }, 13: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 14: { name: "variable.other.object.declare.cpp" }, 15: { patterns: [{ include: "#inline_comment" }] }, 16: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 17: { patterns: [{ include: "#inline_comment" }] }, 18: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 19: { patterns: [{ include: "#inline_comment" }] }, 20: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] } }, match: "(\\benum)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))?(?:(?:&|\\*)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:&|\\*))((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?((?:(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))?)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:\\[((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))\\]((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?(?=,|\\)|\\n)" }, { captures: { 1: { name: "storage.type.union.parameter.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 4: { name: "entity.name.type.union.parameter.cpp" }, 5: { patterns: [{ include: "#inline_comment" }] }, 6: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 7: { patterns: [{ match: "\\*", name: "storage.modifier.pointer.cpp" }, { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "(?:\\&((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))){2,}\\&", name: "invalid.illegal.reference-type.cpp" }, { match: "\\&", name: "storage.modifier.reference.cpp" }] }, 8: { patterns: [{ include: "#inline_comment" }] }, 9: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 10: { patterns: [{ include: "#inline_comment" }] }, 11: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 12: { patterns: [{ include: "#inline_comment" }] }, 13: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 14: { name: "variable.other.object.declare.cpp" }, 15: { patterns: [{ include: "#inline_comment" }] }, 16: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 17: { patterns: [{ include: "#inline_comment" }] }, 18: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 19: { patterns: [{ include: "#inline_comment" }] }, 20: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] } }, match: "(\\bunion)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))?(?:(?:&|\\*)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:&|\\*))((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?((?:(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))?)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:\\[((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))\\]((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?(?=,|\\)|\\n)" }, { captures: { 1: { name: "storage.type.class.parameter.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 4: { name: "entity.name.type.class.parameter.cpp" }, 5: { patterns: [{ include: "#inline_comment" }] }, 6: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 7: { patterns: [{ match: "\\*", name: "storage.modifier.pointer.cpp" }, { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "(?:\\&((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))){2,}\\&", name: "invalid.illegal.reference-type.cpp" }, { match: "\\&", name: "storage.modifier.reference.cpp" }] }, 8: { patterns: [{ include: "#inline_comment" }] }, 9: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 10: { patterns: [{ include: "#inline_comment" }] }, 11: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 12: { patterns: [{ include: "#inline_comment" }] }, 13: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 14: { name: "variable.other.object.declare.cpp" }, 15: { patterns: [{ include: "#inline_comment" }] }, 16: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 17: { patterns: [{ include: "#inline_comment" }] }, 18: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 19: { patterns: [{ include: "#inline_comment" }] }, 20: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] } }, match: "(\\bclass)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))?(?:(?:&|\\*)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:&|\\*))((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?((?:(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))?)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:\\[((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))\\]((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?(?=,|\\)|\\n)" }] }, parameter: { begin: "((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?=\\w)", beginCaptures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, end: "(?:(?=\\))|(,))", endCaptures: { 1: { name: "punctuation.separator.delimiter.comma.cpp" } }, name: "meta.parameter.cpp", patterns: [{ include: "#ever_present_context" }, { include: "#string_context" }, { include: "#function_pointer_parameter" }, { include: "#decltype" }, { include: "#vararg_ellipses" }, { captures: { 1: { patterns: [{ include: "#storage_types" }] }, 2: { name: "storage.modifier.specifier.parameter.cpp" }, 3: { patterns: [{ include: "#inline_comment" }] }, 4: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 5: { name: "comment.block.cpp" }, 6: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 7: { patterns: [{ include: "#inline_comment" }] }, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 11: { name: "storage.type.primitive.cpp storage.type.built-in.primitive.cpp" }, 12: { name: "storage.type.cpp storage.type.built-in.cpp" }, 13: { name: "support.type.posix-reserved.pthread.cpp support.type.built-in.posix-reserved.pthread.cpp" }, 14: { name: "support.type.posix-reserved.cpp support.type.built-in.posix-reserved.cpp" }, 15: { name: "entity.name.type.parameter.cpp" }, 16: { patterns: [{ include: "#inline_comment" }] }, 17: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 18: { name: "comment.block.cpp" }, 19: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "((?:((?:(?:thread_local)|(?:volatile)|(?:register)|(?:restrict)|(?:static)|(?:extern)|(?:const)))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))+)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:\\s*+(?<!\\w)(?:(?:(?:((?:(?:unsigned)|(?:wchar_t)|(?:double)|(?:signed)|(?:short)|(?:float)|(?:auto)|(?:void)|(?:long)|(?:char)|(?:bool)|(?:int)))|((?:(?:uint_least32_t)|(?:uint_least64_t)|(?:uint_least16_t)|(?:uint_fast64_t)|(?:uint_least8_t)|(?:int_least64_t)|(?:int_least32_t)|(?:int_least16_t)|(?:uint_fast16_t)|(?:uint_fast32_t)|(?:int_least8_t)|(?:int_fast16_t)|(?:int_fast32_t)|(?:int_fast64_t)|(?:uint_fast8_t)|(?:int_fast8_t)|(?:suseconds_t)|(?:useconds_t)|(?:uintmax_t)|(?:uintmax_t)|(?:in_port_t)|(?:uintmax_t)|(?:in_addr_t)|(?:blksize_t)|(?:uintptr_t)|(?:intmax_t)|(?:intptr_t)|(?:blkcnt_t)|(?:intmax_t)|(?:u_quad_t)|(?:uint16_t)|(?:uint32_t)|(?:uint64_t)|(?:ssize_t)|(?:fixpt_t)|(?:qaddr_t)|(?:u_short)|(?:int16_t)|(?:int32_t)|(?:int64_t)|(?:uint8_t)|(?:daddr_t)|(?:caddr_t)|(?:swblk_t)|(?:clock_t)|(?:segsz_t)|(?:nlink_t)|(?:time_t)|(?:u_long)|(?:ushort)|(?:quad_t)|(?:mode_t)|(?:size_t)|(?:u_char)|(?:int8_t)|(?:u_int)|(?:uid_t)|(?:off_t)|(?:pid_t)|(?:gid_t)|(?:dev_t)|(?:div_t)|(?:key_t)|(?:ino_t)|(?:id_t)|(?:id_t)|(?:uint))))|((?:(?:pthread_rwlockattr_t)|(?:pthread_mutexattr_t)|(?:pthread_condattr_t)|(?:pthread_rwlock_t)|(?:pthread_mutex_t)|(?:pthread_cond_t)|(?:pthread_attr_t)|(?:pthread_once_t)|(?:pthread_key_t)|(?:pthread_t))))|([a-zA-Z_]\\w*_t))(?!\\w)|((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\b\\b(?<!\\Wthread_local|^thread_local|\\Wvolatile|^volatile|\\Wregister|^register|\\Wrestrict|^restrict|\\Wstatic|^static|\\Wextern|^extern|\\Wconst|^const)))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?=,|\\)|=)" }, { include: "#storage_types" }, { include: "#scope_resolution_parameter_inner_generated" }, { match: "(?:(?:struct)|(?:class)|(?:union)|(?:enum))", name: "storage.type.$0.cpp" }, { begin: "(?<==)", beginCaptures: {}, end: "(?:(?=\\))|(,))", endCaptures: { 1: { name: "punctuation.separator.delimiter.comma.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, { match: "\\=", name: "keyword.operator.assignment.cpp" }, { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 5: { name: "variable.parameter.cpp" }, 6: { patterns: [{ include: "#inline_comment" }] }, 7: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 8: { name: "comment.block.cpp" }, 9: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "(?<!\\s|\\(|,|:)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?=\\)|,|\\[|=|\\n)" }, { include: "#attributes_context" }, { begin: "\\[", beginCaptures: { 0: { name: "punctuation.definition.begin.bracket.square.array.type.cpp" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.end.bracket.square.array.type.cpp" } }, name: "meta.bracket.square.array.cpp", patterns: [{ include: "#evaluation_context" }] }, { match: "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\b(?<!\\Wstruct|^struct|\\Wclass|^class|\\Wunion|^union|\\Wenum|^enum)", name: "entity.name.type.parameter.cpp" }, { include: "#template_call_range" }, { captures: { 0: { patterns: [{ match: "\\*", name: "storage.modifier.pointer.cpp" }, { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "(?:\\&((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))){2,}\\&", name: "invalid.illegal.reference-type.cpp" }, { match: "\\&", name: "storage.modifier.reference.cpp" }] }, 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 5: { patterns: [{ include: "#inline_comment" }] }, 6: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 7: { name: "comment.block.cpp" }, 8: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))?(?:(?:&|\\*)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:&|\\*)" }, { include: "#ever_present_context" }] }, parameter_class: { captures: { 1: { name: "storage.type.class.parameter.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 4: { name: "entity.name.type.class.parameter.cpp" }, 5: { patterns: [{ include: "#inline_comment" }] }, 6: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 7: { patterns: [{ match: "\\*", name: "storage.modifier.pointer.cpp" }, { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "(?:\\&((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))){2,}\\&", name: "invalid.illegal.reference-type.cpp" }, { match: "\\&", name: "storage.modifier.reference.cpp" }] }, 8: { patterns: [{ include: "#inline_comment" }] }, 9: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 10: { patterns: [{ include: "#inline_comment" }] }, 11: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 12: { patterns: [{ include: "#inline_comment" }] }, 13: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 14: { name: "variable.other.object.declare.cpp" }, 15: { patterns: [{ include: "#inline_comment" }] }, 16: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 17: { patterns: [{ include: "#inline_comment" }] }, 18: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 19: { patterns: [{ include: "#inline_comment" }] }, 20: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] } }, match: "(\\bclass)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))?(?:(?:&|\\*)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:&|\\*))((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?((?:(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))?)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:\\[((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))\\]((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?(?=,|\\)|\\n)" }, parameter_enum: { captures: { 1: { name: "storage.type.enum.parameter.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 4: { name: "entity.name.type.enum.parameter.cpp" }, 5: { patterns: [{ include: "#inline_comment" }] }, 6: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 7: { patterns: [{ match: "\\*", name: "storage.modifier.pointer.cpp" }, { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "(?:\\&((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))){2,}\\&", name: "invalid.illegal.reference-type.cpp" }, { match: "\\&", name: "storage.modifier.reference.cpp" }] }, 8: { patterns: [{ include: "#inline_comment" }] }, 9: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 10: { patterns: [{ include: "#inline_comment" }] }, 11: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 12: { patterns: [{ include: "#inline_comment" }] }, 13: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 14: { name: "variable.other.object.declare.cpp" }, 15: { patterns: [{ include: "#inline_comment" }] }, 16: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 17: { patterns: [{ include: "#inline_comment" }] }, 18: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 19: { patterns: [{ include: "#inline_comment" }] }, 20: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] } }, match: "(\\benum)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))?(?:(?:&|\\*)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:&|\\*))((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?((?:(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))?)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:\\[((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))\\]((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?(?=,|\\)|\\n)" }, parameter_or_maybe_value: { begin: "((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?=\\w)", beginCaptures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, end: "(?:(?=\\))|(,))", endCaptures: { 1: { name: "punctuation.separator.delimiter.comma.cpp" } }, name: "meta.parameter.cpp", patterns: [{ include: "#ever_present_context" }, { include: "#function_pointer_parameter" }, { include: "#memory_operators" }, { include: "#builtin_storage_type_initilizer" }, { include: "#curly_initializer" }, { include: "#decltype" }, { include: "#vararg_ellipses" }, { captures: { 1: { patterns: [{ include: "#storage_types" }] }, 2: { name: "storage.modifier.specifier.parameter.cpp" }, 3: { patterns: [{ include: "#inline_comment" }] }, 4: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 5: { name: "comment.block.cpp" }, 6: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 7: { patterns: [{ include: "#inline_comment" }] }, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 11: { name: "storage.type.primitive.cpp storage.type.built-in.primitive.cpp" }, 12: { name: "storage.type.cpp storage.type.built-in.cpp" }, 13: { name: "support.type.posix-reserved.pthread.cpp support.type.built-in.posix-reserved.pthread.cpp" }, 14: { name: "support.type.posix-reserved.cpp support.type.built-in.posix-reserved.cpp" }, 15: { name: "entity.name.type.parameter.cpp" }, 16: { patterns: [{ include: "#inline_comment" }] }, 17: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 18: { name: "comment.block.cpp" }, 19: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "((?:((?:(?:thread_local)|(?:volatile)|(?:register)|(?:restrict)|(?:static)|(?:extern)|(?:const)))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))+)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:\\s*+(?<!\\w)(?:(?:(?:((?:(?:unsigned)|(?:wchar_t)|(?:double)|(?:signed)|(?:short)|(?:float)|(?:auto)|(?:void)|(?:long)|(?:char)|(?:bool)|(?:int)))|((?:(?:uint_least32_t)|(?:uint_least64_t)|(?:uint_least16_t)|(?:uint_fast64_t)|(?:uint_least8_t)|(?:int_least64_t)|(?:int_least32_t)|(?:int_least16_t)|(?:uint_fast16_t)|(?:uint_fast32_t)|(?:int_least8_t)|(?:int_fast16_t)|(?:int_fast32_t)|(?:int_fast64_t)|(?:uint_fast8_t)|(?:int_fast8_t)|(?:suseconds_t)|(?:useconds_t)|(?:uintmax_t)|(?:uintmax_t)|(?:in_port_t)|(?:uintmax_t)|(?:in_addr_t)|(?:blksize_t)|(?:uintptr_t)|(?:intmax_t)|(?:intptr_t)|(?:blkcnt_t)|(?:intmax_t)|(?:u_quad_t)|(?:uint16_t)|(?:uint32_t)|(?:uint64_t)|(?:ssize_t)|(?:fixpt_t)|(?:qaddr_t)|(?:u_short)|(?:int16_t)|(?:int32_t)|(?:int64_t)|(?:uint8_t)|(?:daddr_t)|(?:caddr_t)|(?:swblk_t)|(?:clock_t)|(?:segsz_t)|(?:nlink_t)|(?:time_t)|(?:u_long)|(?:ushort)|(?:quad_t)|(?:mode_t)|(?:size_t)|(?:u_char)|(?:int8_t)|(?:u_int)|(?:uid_t)|(?:off_t)|(?:pid_t)|(?:gid_t)|(?:dev_t)|(?:div_t)|(?:key_t)|(?:ino_t)|(?:id_t)|(?:id_t)|(?:uint))))|((?:(?:pthread_rwlockattr_t)|(?:pthread_mutexattr_t)|(?:pthread_condattr_t)|(?:pthread_rwlock_t)|(?:pthread_mutex_t)|(?:pthread_cond_t)|(?:pthread_attr_t)|(?:pthread_once_t)|(?:pthread_key_t)|(?:pthread_t))))|([a-zA-Z_]\\w*_t))(?!\\w)|((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\b\\b(?<!\\Wthread_local|^thread_local|\\Wvolatile|^volatile|\\Wregister|^register|\\Wrestrict|^restrict|\\Wstatic|^static|\\Wextern|^extern|\\Wconst|^const)))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?=,|\\)|=)" }, { include: "#storage_types" }, { include: "#function_call" }, { include: "#scope_resolution_parameter_inner_generated" }, { match: "(?:(?:struct)|(?:class)|(?:union)|(?:enum))", name: "storage.type.$0.cpp" }, { begin: "(?<==)", beginCaptures: {}, end: "(?:(?=\\))|(,))", endCaptures: { 1: { name: "punctuation.separator.delimiter.comma.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 5: { name: "variable.parameter.cpp" }, 6: { patterns: [{ include: "#inline_comment" }] }, 7: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 8: { name: "comment.block.cpp" }, 9: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "(?<!\\s|\\(|,|:)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?=(?:\\)|,|\\[|=|\\/\\/|(?:\\n|$)))" }, { include: "#attributes_context" }, { begin: "\\[", beginCaptures: { 0: { name: "punctuation.definition.begin.bracket.square.array.type.cpp" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.end.bracket.square.array.type.cpp" } }, name: "meta.bracket.square.array.cpp", patterns: [{ include: "#evaluation_context" }] }, { match: "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\b(?<!\\Wstruct|^struct|\\Wclass|^class|\\Wunion|^union|\\Wenum|^enum)", name: "entity.name.type.parameter.cpp" }, { include: "#template_call_range" }, { captures: { 0: { patterns: [{ match: "\\*", name: "storage.modifier.pointer.cpp" }, { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "(?:\\&((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))){2,}\\&", name: "invalid.illegal.reference-type.cpp" }, { match: "\\&", name: "storage.modifier.reference.cpp" }] }, 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 5: { patterns: [{ include: "#inline_comment" }] }, 6: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 7: { name: "comment.block.cpp" }, 8: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))?(?:(?:&|\\*)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:&|\\*)" }, { include: "#evaluation_context" }, { include: "#ever_present_context" }] }, parameter_struct: { captures: { 1: { name: "storage.type.struct.parameter.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 4: { name: "entity.name.type.struct.parameter.cpp" }, 5: { patterns: [{ include: "#inline_comment" }] }, 6: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 7: { patterns: [{ match: "\\*", name: "storage.modifier.pointer.cpp" }, { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "(?:\\&((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))){2,}\\&", name: "invalid.illegal.reference-type.cpp" }, { match: "\\&", name: "storage.modifier.reference.cpp" }] }, 8: { patterns: [{ include: "#inline_comment" }] }, 9: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 10: { patterns: [{ include: "#inline_comment" }] }, 11: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 12: { patterns: [{ include: "#inline_comment" }] }, 13: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 14: { name: "variable.other.object.declare.cpp" }, 15: { patterns: [{ include: "#inline_comment" }] }, 16: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 17: { patterns: [{ include: "#inline_comment" }] }, 18: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 19: { patterns: [{ include: "#inline_comment" }] }, 20: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] } }, match: "(\\bstruct)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))?(?:(?:&|\\*)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:&|\\*))((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?((?:(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))?)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:\\[((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))\\]((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?(?=,|\\)|\\n)" }, parameter_union: { captures: { 1: { name: "storage.type.union.parameter.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 4: { name: "entity.name.type.union.parameter.cpp" }, 5: { patterns: [{ include: "#inline_comment" }] }, 6: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 7: { patterns: [{ match: "\\*", name: "storage.modifier.pointer.cpp" }, { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "(?:\\&((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))){2,}\\&", name: "invalid.illegal.reference-type.cpp" }, { match: "\\&", name: "storage.modifier.reference.cpp" }] }, 8: { patterns: [{ include: "#inline_comment" }] }, 9: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 10: { patterns: [{ include: "#inline_comment" }] }, 11: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 12: { patterns: [{ include: "#inline_comment" }] }, 13: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 14: { name: "variable.other.object.declare.cpp" }, 15: { patterns: [{ include: "#inline_comment" }] }, 16: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 17: { patterns: [{ include: "#inline_comment" }] }, 18: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 19: { patterns: [{ include: "#inline_comment" }] }, 20: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] } }, match: "(\\bunion)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))?(?:(?:&|\\*)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:&|\\*))((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?((?:(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))?)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:\\[((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))\\]((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?(?=,|\\)|\\n)" }, parentheses: { begin: "\\(", beginCaptures: { 0: { name: "punctuation.section.parens.begin.bracket.round.cpp" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.parens.end.bracket.round.cpp" } }, name: "meta.parens.cpp", patterns: [{ include: "#over_qualified_types" }, { match: "(?<!:):(?!:)", name: "punctuation.separator.colon.range-based.cpp" }, { include: "#evaluation_context" }] }, pragma: { begin: "^((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(#)(?:\\s+)?pragma\\b", beginCaptures: { 0: { name: "keyword.control.directive.pragma.cpp" }, 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 5: { name: "punctuation.definition.directive.cpp" } }, end: "(?<!\\\\)(?:(?=\\n)|(?<=^\\n|[^\\\\]\\n)(?=$))", endCaptures: {}, name: "meta.preprocessor.pragma.cpp", patterns: [{ include: "#comments" }, { include: "#string_context" }, { match: "[a-zA-Z_$][\\w\\-$]*", name: "entity.other.attribute-name.pragma.preprocessor.cpp" }, { include: "#preprocessor_number_literal" }, { include: "#line_continuation_character" }] }, pragma_mark: { captures: { 1: { name: "keyword.control.directive.pragma.pragma-mark.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 4: { name: "punctuation.definition.directive.cpp" }, 5: { name: "entity.name.tag.pragma-mark.cpp" } }, match: "(^((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(#)(?:\\s+)?pragma\\s+mark)\\s+(.*)", name: "meta.preprocessor.pragma.cpp" }, predefined_macros: { patterns: [{ captures: { 1: { name: "entity.name.other.preprocessor.macro.predefined.$1.cpp" } }, match: "\\b(__cplusplus|__DATE__|__FILE__|__LINE__|__STDC__|__STDC_HOSTED__|__STDC_NO_COMPLEX__|__STDC_VERSION__|__STDCPP_THREADS__|__TIME__|NDEBUG|__OBJC__|__ASSEMBLER__|__ATOM__|__AVX__|__AVX2__|_CHAR_UNSIGNED|__CLR_VER|_CONTROL_FLOW_GUARD|__COUNTER__|__cplusplus_cli|__cplusplus_winrt|_CPPRTTI|_CPPUNWIND|_DEBUG|_DLL|__FUNCDNAME__|__FUNCSIG__|__FUNCTION__|_INTEGRAL_MAX_BITS|__INTELLISENSE__|_ISO_VOLATILE|_KERNEL_MODE|_M_AMD64|_M_ARM|_M_ARM_ARMV7VE|_M_ARM_FP|_M_ARM64|_M_CEE|_M_CEE_PURE|_M_CEE_SAFE|_M_FP_EXCEPT|_M_FP_FAST|_M_FP_PRECISE|_M_FP_STRICT|_M_IX86|_M_IX86_FP|_M_X64|_MANAGED|_MSC_BUILD|_MSC_EXTENSIONS|_MSC_FULL_VER|_MSC_VER|_MSVC_LANG|__MSVC_RUNTIME_CHECKS|_MT|_NATIVE_WCHAR_T_DEFINED|_OPENMP|_PREFAST|__TIMESTAMP__|_VC_NO_DEFAULTLIB|_WCHAR_T_DEFINED|_WIN32|_WIN64|_WINRT_DLL|_ATL_VER|_MFC_VER|__GFORTRAN__|__GNUC__|__GNUC_MINOR__|__GNUC_PATCHLEVEL__|__GNUG__|__STRICT_ANSI__|__BASE_FILE__|__INCLUDE_LEVEL__|__ELF__|__VERSION__|__OPTIMIZE__|__OPTIMIZE_SIZE__|__NO_INLINE__|__GNUC_STDC_INLINE__|__CHAR_UNSIGNED__|__WCHAR_UNSIGNED__|__REGISTER_PREFIX__|__REGISTER_PREFIX__|__SIZE_TYPE__|__PTRDIFF_TYPE__|__WCHAR_TYPE__|__WINT_TYPE__|__INTMAX_TYPE__|__UINTMAX_TYPE__|__SIG_ATOMIC_TYPE__|__INT8_TYPE__|__INT16_TYPE__|__INT32_TYPE__|__INT64_TYPE__|__UINT8_TYPE__|__UINT16_TYPE__|__UINT32_TYPE__|__UINT64_TYPE__|__INT_LEAST8_TYPE__|__INT_LEAST16_TYPE__|__INT_LEAST32_TYPE__|__INT_LEAST64_TYPE__|__UINT_LEAST8_TYPE__|__UINT_LEAST16_TYPE__|__UINT_LEAST32_TYPE__|__UINT_LEAST64_TYPE__|__INT_FAST8_TYPE__|__INT_FAST16_TYPE__|__INT_FAST32_TYPE__|__INT_FAST64_TYPE__|__UINT_FAST8_TYPE__|__UINT_FAST16_TYPE__|__UINT_FAST32_TYPE__|__UINT_FAST64_TYPE__|__INTPTR_TYPE__|__UINTPTR_TYPE__|__CHAR_BIT__|__SCHAR_MAX__|__WCHAR_MAX__|__SHRT_MAX__|__INT_MAX__|__LONG_MAX__|__LONG_LONG_MAX__|__WINT_MAX__|__SIZE_MAX__|__PTRDIFF_MAX__|__INTMAX_MAX__|__UINTMAX_MAX__|__SIG_ATOMIC_MAX__|__INT8_MAX__|__INT16_MAX__|__INT32_MAX__|__INT64_MAX__|__UINT8_MAX__|__UINT16_MAX__|__UINT32_MAX__|__UINT64_MAX__|__INT_LEAST8_MAX__|__INT_LEAST16_MAX__|__INT_LEAST32_MAX__|__INT_LEAST64_MAX__|__UINT_LEAST8_MAX__|__UINT_LEAST16_MAX__|__UINT_LEAST32_MAX__|__UINT_LEAST64_MAX__|__INT_FAST8_MAX__|__INT_FAST16_MAX__|__INT_FAST32_MAX__|__INT_FAST64_MAX__|__UINT_FAST8_MAX__|__UINT_FAST16_MAX__|__UINT_FAST32_MAX__|__UINT_FAST64_MAX__|__INTPTR_MAX__|__UINTPTR_MAX__|__WCHAR_MIN__|__WINT_MIN__|__SIG_ATOMIC_MIN__|__SCHAR_WIDTH__|__SHRT_WIDTH__|__INT_WIDTH__|__LONG_WIDTH__|__LONG_LONG_WIDTH__|__PTRDIFF_WIDTH__|__SIG_ATOMIC_WIDTH__|__SIZE_WIDTH__|__WCHAR_WIDTH__|__WINT_WIDTH__|__INT_LEAST8_WIDTH__|__INT_LEAST16_WIDTH__|__INT_LEAST32_WIDTH__|__INT_LEAST64_WIDTH__|__INT_FAST8_WIDTH__|__INT_FAST16_WIDTH__|__INT_FAST32_WIDTH__|__INT_FAST64_WIDTH__|__INTPTR_WIDTH__|__INTMAX_WIDTH__|__SIZEOF_INT__|__SIZEOF_LONG__|__SIZEOF_LONG_LONG__|__SIZEOF_SHORT__|__SIZEOF_POINTER__|__SIZEOF_FLOAT__|__SIZEOF_DOUBLE__|__SIZEOF_LONG_DOUBLE__|__SIZEOF_SIZE_T__|__SIZEOF_WCHAR_T__|__SIZEOF_WINT_T__|__SIZEOF_PTRDIFF_T__|__BYTE_ORDER__|__ORDER_LITTLE_ENDIAN__|__ORDER_BIG_ENDIAN__|__ORDER_PDP_ENDIAN__|__FLOAT_WORD_ORDER__|__DEPRECATED|__EXCEPTIONS|__GXX_RTTI|__USING_SJLJ_EXCEPTIONS__|__GXX_EXPERIMENTAL_CXX0X__|__GXX_WEAK__|__NEXT_RUNTIME__|__LP64__|_LP64|__SSP__|__SSP_ALL__|__SSP_STRONG__|__SSP_EXPLICIT__|__SANITIZE_ADDRESS__|__SANITIZE_THREAD__|__GCC_HAVE_SYNC_COMPARE_AND_SWAP_1|__GCC_HAVE_SYNC_COMPARE_AND_SWAP_2|__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4|__GCC_HAVE_SYNC_COMPARE_AND_SWAP_8|__GCC_HAVE_SYNC_COMPARE_AND_SWAP_16|__HAVE_SPECULATION_SAFE_VALUE|__GCC_HAVE_DWARF2_CFI_ASM|__FP_FAST_FMA|__FP_FAST_FMAF|__FP_FAST_FMAL|__FP_FAST_FMAF16|__FP_FAST_FMAF32|__FP_FAST_FMAF64|__FP_FAST_FMAF128|__FP_FAST_FMAF32X|__FP_FAST_FMAF64X|__FP_FAST_FMAF128X|__GCC_IEC_559|__GCC_IEC_559_COMPLEX|__NO_MATH_ERRNO__|__has_builtin|__has_feature|__has_extension|__has_cpp_attribute|__has_c_attribute|__has_attribute|__has_declspec_attribute|__is_identifier|__has_include|__has_include_next|__has_warning|__BASE_FILE__|__FILE_NAME__|__clang__|__clang_major__|__clang_minor__|__clang_patchlevel__|__clang_version__|__fp16|_Float16)\\b" }, { match: "\\b__([A-Z_]+)__\\b", name: "entity.name.other.preprocessor.macro.predefined.probably.$1.cpp" }] }, preprocessor_conditional_context: { patterns: [{ include: "#preprocessor_conditional_defined" }, { include: "#comments" }, { include: "#language_constants" }, { include: "#string_context" }, { include: "#d9bc4796b0b_preprocessor_number_literal" }, { include: "#operators" }, { include: "#predefined_macros" }, { include: "#macro_name" }, { include: "#line_continuation_character" }] }, preprocessor_conditional_defined: { begin: "((?<!\\w)defined(?!\\w))(\\()", beginCaptures: { 1: { name: "keyword.control.directive.conditional.defined.cpp" }, 2: { name: "punctuation.section.parens.control.defined.cpp" } }, end: "(?:\\)|(?<!\\\\)(?:(?=\\n)|(?<=^\\n|[^\\\\]\\n)(?=$)))", endCaptures: { 0: { name: "punctuation.section.parens.control.defined.cpp" } }, patterns: [{ include: "#macro_name" }] }, preprocessor_conditional_parentheses: { begin: "\\(", beginCaptures: { 0: { name: "punctuation.section.parens.begin.bracket.round.cpp" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.parens.end.bracket.round.cpp" } }, name: "meta.parens.preprocessor.conditional.cpp" }, preprocessor_conditional_range: { begin: "^((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(#)(?:\\s+)?((?:(?:ifndef|ifdef)|if))", beginCaptures: { 0: { name: "keyword.control.directive.conditional.$6.cpp" }, 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 5: { name: "punctuation.definition.directive.cpp" }, 6: {} }, contentName: "meta.preprocessor.conditional", end: "(?<!\\\\)(?:(?=\\n)|(?<=^\\n|[^\\\\]\\n)(?=$))", endCaptures: {}, patterns: [{ include: "#preprocessor_conditional_context" }] }, preprocessor_conditional_standalone: { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 3: { name: "punctuation.definition.directive.cpp" } }, match: "^((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(#)(?:\\s+)?((?<!\\w)(?:endif|else|elif)(?!\\w))", name: "keyword.control.directive.$4.cpp" }, preprocessor_context: { patterns: [{ include: "#pragma_mark" }, { include: "#pragma" }, { include: "#include" }, { include: "#line" }, { include: "#diagnostic" }, { include: "#undef" }, { include: "#preprocessor_conditional_range" }, { include: "#single_line_macro" }, { include: "#macro" }, { include: "#preprocessor_conditional_standalone" }, { include: "#macro_argument" }] }, qualified_type: { captures: { 0: { patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.cpp" }, { match: "(?<!\\w)(?:(?:struct)|(?:class)|(?:union)|(?:enum))(?!\\w)", name: "storage.type.$0.cpp" }, { include: "#attributes_context" }, { include: "#storage_types" }, { include: "#number_literal" }, { include: "#string_context" }, { include: "#comma" }, { include: "#scope_resolution_inner_generated" }, { begin: "<", beginCaptures: { 0: { name: "punctuation.section.angle-brackets.begin.template.call.cpp" } }, end: ">", endCaptures: { 0: { name: "punctuation.section.angle-brackets.end.template.call.cpp" } }, name: "meta.template.call.cpp", patterns: [{ include: "#template_call_context" }] }, { match: "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*", name: "entity.name.type.cpp" }] }, 1: { patterns: [{ include: "#attributes_context" }, { include: "#number_literal" }] }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 4: { patterns: [{ include: "#inline_comment" }] }, 5: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 6: { patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.type.cpp" }, { match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)", name: "entity.name.scope-resolution.type.cpp" }, { include: "#template_call_range" }] }, 7: { patterns: [{ include: "#template_call_range" }] }, 9: { patterns: [{ include: "#inline_comment" }] }, 10: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] } }, match: `\\s*+((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))?((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(?:(?:(?:unsigned)|(?:signed)|(?:short)|(?:long))|(?:(?:struct)|(?:class)|(?:union)|(?:enum)))((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<11>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*+)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?(?!(?:(?:transaction_safe_dynamic)|(?:__has_cpp_attribute)|(?:reinterpret_cast)|(?:transaction_safe)|(?:atomic_noexcept)|(?:atomic_commit)|(?:__has_include)|(?:atomic_cancel)|(?:synchronized)|(?:thread_local)|(?:dynamic_cast)|(?:static_cast)|(?:const_cast)|(?:constexpr)|(?:co_return)|(?:constinit)|(?:namespace)|(?:protected)|(?:consteval)|(?:constexpr)|(?:constexpr)|(?:co_return)|(?:consteval)|(?:co_await)|(?:continue)|(?:template)|(?:reflexpr)|(?:volatile)|(?:register)|(?:co_await)|(?:co_yield)|(?:restrict)|(?:noexcept)|(?:volatile)|(?:override)|(?:explicit)|(?:decltype)|(?:operator)|(?:noexcept)|(?:noexcept)|(?:typename)|(?:requires)|(?:co_yield)|(?:nullptr)|(?:alignof)|(?:alignas)|(?:default)|(?:mutable)|(?:virtual)|(?:mutable)|(?:private)|(?:include)|(?:warning)|(?:_Pragma)|(?:defined)|(?:typedef)|(?:__asm__)|(?:concept)|(?:define)|(?:module)|(?:sizeof)|(?:switch)|(?:delete)|(?:pragma)|(?:and_eq)|(?:inline)|(?:xor_eq)|(?:typeid)|(?:import)|(?:extern)|(?:public)|(?:bitand)|(?:static)|(?:export)|(?:return)|(?:friend)|(?:ifndef)|(?:not_eq)|(?:false)|(?:final)|(?:break)|(?:const)|(?:catch)|(?:endif)|(?:ifdef)|(?:undef)|(?:error)|(?:audit)|(?:while)|(?:using)|(?:axiom)|(?:or_eq)|(?:compl)|(?:throw)|(?:bitor)|(?:const)|(?:line)|(?:case)|(?:else)|(?:this)|(?:true)|(?:goto)|(?:else)|(?:NULL)|(?:elif)|(?:new)|(?:asm)|(?:xor)|(?:and)|(?:try)|(?:not)|(?:for)|(?:do)|(?:if)|(?:or)|(?:if))\\b)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\b((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<11>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)?(?![\\w<:.])`, name: "meta.qualified_type.cpp" }, qualifiers_and_specifiers_post_parameters: { captures: { 1: { patterns: [{ captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 5: { name: "storage.modifier.specifier.functional.post-parameters.$5.cpp" } }, match: "((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)(?:(?:override)|(?:volatile)|(?:noexcept)|(?:final)|(?:const))(?!\\w))" }] } }, match: "((?:(?:(?:(?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)(?<!\\w)(?:(?:override)|(?:volatile)|(?:noexcept)|(?:final)|(?:const))(?!\\w))+)(?=\\s*(?:\\{|;|\\n|\\r|=))" }, scope_resolution: { captures: { 0: { patterns: [{ include: "#scope_resolution_inner_generated" }] }, 1: { name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.cpp" }, 2: { patterns: [{ include: "#template_call_range" }] } }, match: `(::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<3>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*\\s*+` }, scope_resolution_function_call: { captures: { 0: { patterns: [{ include: "#scope_resolution_function_call_inner_generated" }] }, 1: { name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.function.call.cpp" }, 2: { patterns: [{ include: "#template_call_range" }] } }, match: `(::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<3>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*\\s*+` }, scope_resolution_function_call_inner_generated: { captures: { 1: { patterns: [{ include: "#scope_resolution_function_call_inner_generated" }] }, 2: { name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.function.call.cpp" }, 3: { patterns: [{ include: "#template_call_range" }] }, 4: {}, 5: { name: "entity.name.scope-resolution.function.call.cpp" }, 6: { name: "meta.template.call.cpp", patterns: [{ include: "#template_call_range" }] }, 7: {}, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 11: { name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.function.call.cpp" } }, match: `((::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<7>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*\\s*+)((?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))\\s*+(((?<!<)<(?!<)(?:(?:(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/)))|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<7>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?(::)` }, scope_resolution_function_definition: { captures: { 0: { patterns: [{ include: "#scope_resolution_function_definition_inner_generated" }] }, 1: { name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.function.definition.cpp" }, 2: { patterns: [{ include: "#template_call_range" }] } }, match: `(::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<3>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*\\s*+` }, scope_resolution_function_definition_inner_generated: { captures: { 1: { patterns: [{ include: "#scope_resolution_function_definition_inner_generated" }] }, 2: { name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.function.definition.cpp" }, 3: { patterns: [{ include: "#template_call_range" }] }, 4: {}, 5: { name: "entity.name.scope-resolution.function.definition.cpp" }, 6: { name: "meta.template.call.cpp", patterns: [{ include: "#template_call_range" }] }, 7: {}, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 11: { name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.function.definition.cpp" } }, match: `((::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<7>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*\\s*+)((?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))\\s*+(((?<!<)<(?!<)(?:(?:(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/)))|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<7>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?(::)` }, scope_resolution_function_definition_operator_overload: { captures: { 0: { patterns: [{ include: "#scope_resolution_function_definition_operator_overload_inner_generated" }] }, 1: { name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.function.definition.operator-overload.cpp" }, 2: { patterns: [{ include: "#template_call_range" }] } }, match: `(::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<3>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*\\s*+` }, scope_resolution_function_definition_operator_overload_inner_generated: { captures: { 1: { patterns: [{ include: "#scope_resolution_function_definition_operator_overload_inner_generated" }] }, 2: { name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.function.definition.operator-overload.cpp" }, 3: { patterns: [{ include: "#template_call_range" }] }, 4: {}, 5: { name: "entity.name.scope-resolution.function.definition.operator-overload.cpp" }, 6: { name: "meta.template.call.cpp", patterns: [{ include: "#template_call_range" }] }, 7: {}, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 11: { name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.function.definition.operator-overload.cpp" } }, match: `((::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<7>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*\\s*+)((?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))\\s*+(((?<!<)<(?!<)(?:(?:(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/)))|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<7>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?(::)` }, scope_resolution_inner_generated: { captures: { 1: { patterns: [{ include: "#scope_resolution_inner_generated" }] }, 2: { name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.cpp" }, 3: { patterns: [{ include: "#template_call_range" }] }, 4: {}, 5: { name: "entity.name.scope-resolution.cpp" }, 6: { name: "meta.template.call.cpp", patterns: [{ include: "#template_call_range" }] }, 7: {}, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 11: { name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.cpp" } }, match: `((::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<7>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*\\s*+)((?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))\\s*+(((?<!<)<(?!<)(?:(?:(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/)))|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<7>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?(::)` }, scope_resolution_namespace_alias: { captures: { 0: { patterns: [{ include: "#scope_resolution_namespace_alias_inner_generated" }] }, 1: { name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.namespace.alias.cpp" }, 2: { patterns: [{ include: "#template_call_range" }] } }, match: `(::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<3>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*\\s*+` }, scope_resolution_namespace_alias_inner_generated: { captures: { 1: { patterns: [{ include: "#scope_resolution_namespace_alias_inner_generated" }] }, 2: { name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.namespace.alias.cpp" }, 3: { patterns: [{ include: "#template_call_range" }] }, 4: {}, 5: { name: "entity.name.scope-resolution.namespace.alias.cpp" }, 6: { name: "meta.template.call.cpp", patterns: [{ include: "#template_call_range" }] }, 7: {}, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 11: { name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.namespace.alias.cpp" } }, match: `((::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<7>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*\\s*+)((?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))\\s*+(((?<!<)<(?!<)(?:(?:(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/)))|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<7>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?(::)` }, scope_resolution_namespace_block: { captures: { 0: { patterns: [{ include: "#scope_resolution_namespace_block_inner_generated" }] }, 1: { name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.namespace.block.cpp" }, 2: { patterns: [{ include: "#template_call_range" }] } }, match: `(::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<3>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*\\s*+` }, scope_resolution_namespace_block_inner_generated: { captures: { 1: { patterns: [{ include: "#scope_resolution_namespace_block_inner_generated" }] }, 2: { name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.namespace.block.cpp" }, 3: { patterns: [{ include: "#template_call_range" }] }, 4: {}, 5: { name: "entity.name.scope-resolution.namespace.block.cpp" }, 6: { name: "meta.template.call.cpp", patterns: [{ include: "#template_call_range" }] }, 7: {}, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 11: { name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.namespace.block.cpp" } }, match: `((::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<7>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*\\s*+)((?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))\\s*+(((?<!<)<(?!<)(?:(?:(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/)))|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<7>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?(::)` }, scope_resolution_namespace_using: { captures: { 0: { patterns: [{ include: "#scope_resolution_namespace_using_inner_generated" }] }, 1: { name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.namespace.using.cpp" }, 2: { patterns: [{ include: "#template_call_range" }] } }, match: `(::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<3>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*\\s*+` }, scope_resolution_namespace_using_inner_generated: { captures: { 1: { patterns: [{ include: "#scope_resolution_namespace_using_inner_generated" }] }, 2: { name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.namespace.using.cpp" }, 3: { patterns: [{ include: "#template_call_range" }] }, 4: {}, 5: { name: "entity.name.scope-resolution.namespace.using.cpp" }, 6: { name: "meta.template.call.cpp", patterns: [{ include: "#template_call_range" }] }, 7: {}, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 11: { name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.namespace.using.cpp" } }, match: `((::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<7>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*\\s*+)((?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))\\s*+(((?<!<)<(?!<)(?:(?:(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/)))|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<7>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?(::)` }, scope_resolution_parameter: { captures: { 0: { patterns: [{ include: "#scope_resolution_parameter_inner_generated" }] }, 1: { name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.parameter.cpp" }, 2: { patterns: [{ include: "#template_call_range" }] } }, match: `(::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<3>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*\\s*+` }, scope_resolution_parameter_inner_generated: { captures: { 1: { patterns: [{ include: "#scope_resolution_parameter_inner_generated" }] }, 2: { name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.parameter.cpp" }, 3: { patterns: [{ include: "#template_call_range" }] }, 4: {}, 5: { name: "entity.name.scope-resolution.parameter.cpp" }, 6: { name: "meta.template.call.cpp", patterns: [{ include: "#template_call_range" }] }, 7: {}, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 11: { name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.parameter.cpp" } }, match: `((::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<7>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*\\s*+)((?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))\\s*+(((?<!<)<(?!<)(?:(?:(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/)))|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<7>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?(::)` }, scope_resolution_template_call: { captures: { 0: { patterns: [{ include: "#scope_resolution_template_call_inner_generated" }] }, 1: { name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.template.call.cpp" }, 2: { patterns: [{ include: "#template_call_range" }] } }, match: `(::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<3>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*\\s*+` }, scope_resolution_template_call_inner_generated: { captures: { 1: { patterns: [{ include: "#scope_resolution_template_call_inner_generated" }] }, 2: { name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.template.call.cpp" }, 3: { patterns: [{ include: "#template_call_range" }] }, 4: {}, 5: { name: "entity.name.scope-resolution.template.call.cpp" }, 6: { name: "meta.template.call.cpp", patterns: [{ include: "#template_call_range" }] }, 7: {}, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 11: { name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.template.call.cpp" } }, match: `((::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<7>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*\\s*+)((?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))\\s*+(((?<!<)<(?!<)(?:(?:(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/)))|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<7>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?(::)` }, scope_resolution_template_definition: { captures: { 0: { patterns: [{ include: "#scope_resolution_template_definition_inner_generated" }] }, 1: { name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.template.definition.cpp" }, 2: { patterns: [{ include: "#template_call_range" }] } }, match: `(::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<3>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*\\s*+` }, scope_resolution_template_definition_inner_generated: { captures: { 1: { patterns: [{ include: "#scope_resolution_template_definition_inner_generated" }] }, 2: { name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.template.definition.cpp" }, 3: { patterns: [{ include: "#template_call_range" }] }, 4: {}, 5: { name: "entity.name.scope-resolution.template.definition.cpp" }, 6: { name: "meta.template.call.cpp", patterns: [{ include: "#template_call_range" }] }, 7: {}, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 11: { name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.template.definition.cpp" } }, match: `((::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<7>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*\\s*+)((?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))\\s*+(((?<!<)<(?!<)(?:(?:(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/)))|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<7>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?(::)` }, semicolon: { match: ";", name: "punctuation.terminator.statement.cpp" }, simple_type: { captures: { 1: { name: "meta.qualified_type.cpp", patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.cpp" }, { match: "(?<!\\w)(?:(?:struct)|(?:class)|(?:union)|(?:enum))(?!\\w)", name: "storage.type.$0.cpp" }, { include: "#attributes_context" }, { include: "#storage_types" }, { include: "#number_literal" }, { include: "#string_context" }, { include: "#comma" }, { include: "#scope_resolution_inner_generated" }, { begin: "<", beginCaptures: { 0: { name: "punctuation.section.angle-brackets.begin.template.call.cpp" } }, end: ">", endCaptures: { 0: { name: "punctuation.section.angle-brackets.end.template.call.cpp" } }, name: "meta.template.call.cpp", patterns: [{ include: "#template_call_context" }] }, { match: "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*", name: "entity.name.type.cpp" }] }, 2: { patterns: [{ include: "#attributes_context" }, { include: "#number_literal" }] }, 3: { patterns: [{ include: "#inline_comment" }] }, 4: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 5: { patterns: [{ include: "#inline_comment" }] }, 6: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 7: { patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.type.cpp" }, { match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)", name: "entity.name.scope-resolution.type.cpp" }, { include: "#template_call_range" }] }, 8: { patterns: [{ include: "#template_call_range" }] }, 9: {}, 10: { patterns: [{ include: "#inline_comment" }] }, 11: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 12: {}, 13: { patterns: [{ match: "\\*", name: "storage.modifier.pointer.cpp" }, { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "(?:\\&((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))){2,}\\&", name: "invalid.illegal.reference-type.cpp" }, { match: "\\&", name: "storage.modifier.reference.cpp" }] }, 14: { patterns: [{ include: "#inline_comment" }] }, 15: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 16: { patterns: [{ include: "#inline_comment" }] }, 17: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] } }, match: `(\\s*+((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))?((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(?:(?:(?:unsigned)|(?:signed)|(?:short)|(?:long))|(?:(?:struct)|(?:class)|(?:union)|(?:enum)))((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<12>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*+)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?(?!(?:(?:transaction_safe_dynamic)|(?:__has_cpp_attribute)|(?:reinterpret_cast)|(?:transaction_safe)|(?:atomic_noexcept)|(?:atomic_commit)|(?:__has_include)|(?:atomic_cancel)|(?:synchronized)|(?:thread_local)|(?:dynamic_cast)|(?:static_cast)|(?:const_cast)|(?:constexpr)|(?:co_return)|(?:constinit)|(?:namespace)|(?:protected)|(?:consteval)|(?:constexpr)|(?:constexpr)|(?:co_return)|(?:consteval)|(?:co_await)|(?:continue)|(?:template)|(?:reflexpr)|(?:volatile)|(?:register)|(?:co_await)|(?:co_yield)|(?:restrict)|(?:noexcept)|(?:volatile)|(?:override)|(?:explicit)|(?:decltype)|(?:operator)|(?:noexcept)|(?:noexcept)|(?:typename)|(?:requires)|(?:co_yield)|(?:nullptr)|(?:alignof)|(?:alignas)|(?:default)|(?:mutable)|(?:virtual)|(?:mutable)|(?:private)|(?:include)|(?:warning)|(?:_Pragma)|(?:defined)|(?:typedef)|(?:__asm__)|(?:concept)|(?:define)|(?:module)|(?:sizeof)|(?:switch)|(?:delete)|(?:pragma)|(?:and_eq)|(?:inline)|(?:xor_eq)|(?:typeid)|(?:import)|(?:extern)|(?:public)|(?:bitand)|(?:static)|(?:export)|(?:return)|(?:friend)|(?:ifndef)|(?:not_eq)|(?:false)|(?:final)|(?:break)|(?:const)|(?:catch)|(?:endif)|(?:ifdef)|(?:undef)|(?:error)|(?:audit)|(?:while)|(?:using)|(?:axiom)|(?:or_eq)|(?:compl)|(?:throw)|(?:bitor)|(?:const)|(?:line)|(?:case)|(?:else)|(?:this)|(?:true)|(?:goto)|(?:else)|(?:NULL)|(?:elif)|(?:new)|(?:asm)|(?:xor)|(?:and)|(?:try)|(?:not)|(?:for)|(?:do)|(?:if)|(?:or)|(?:if))\\b)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\b((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<12>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)?(?![\\w<:.]))(((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))?(?:(?:&|\\*)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:&|\\*))?` }, single_line_macro: { captures: { 0: { patterns: [{ include: "#macro" }, { include: "#comments" }] }, 1: { patterns: [{ include: "#inline_comment" }] }, 2: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] } }, match: "^((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))#define.*(?<![\\\\])(?:\\n|$)" }, sizeof_operator: { begin: "((?<!\\w)sizeof(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\()", beginCaptures: { 1: { name: "keyword.operator.functionlike.cpp keyword.operator.sizeof.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "punctuation.section.arguments.begin.bracket.round.operator.sizeof.cpp" } }, contentName: "meta.arguments.operator.sizeof", end: "\\)", endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.operator.sizeof.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, sizeof_variadic_operator: { begin: "(\\bsizeof\\.\\.\\.)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\()", beginCaptures: { 1: { name: "keyword.operator.functionlike.cpp keyword.operator.sizeof.variadic.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "punctuation.section.arguments.begin.bracket.round.operator.sizeof.variadic.cpp" } }, contentName: "meta.arguments.operator.sizeof.variadic", end: "\\)", endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.operator.sizeof.variadic.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, square_brackets: { begin: "([a-zA-Z_][a-zA-Z_0-9]*|(?<=[\\]\\)]))?(\\[)(?!\\])", beginCaptures: { 1: { name: "variable.other.object" }, 2: { name: "punctuation.definition.begin.bracket.square" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.end.bracket.square" } }, name: "meta.bracket.square.access", patterns: [{ include: "#evaluation_context" }] }, standard_declares: { patterns: [{ captures: { 1: { name: "storage.type.struct.declare.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 4: { name: "entity.name.type.struct.cpp" }, 5: { patterns: [{ match: "\\*", name: "storage.modifier.pointer.cpp" }, { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "(?:\\&((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))){2,}\\&", name: "invalid.illegal.reference-type.cpp" }, { match: "\\&", name: "storage.modifier.reference.cpp" }] }, 6: { patterns: [{ include: "#inline_comment" }] }, 7: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 8: { patterns: [{ include: "#inline_comment" }] }, 9: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 10: { patterns: [{ include: "#inline_comment" }] }, 11: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 12: { name: "variable.other.object.declare.cpp" }, 13: { patterns: [{ include: "#inline_comment" }] }, 14: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] } }, match: "((?<!\\w)struct(?!\\w))((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))?(?:(?:&|\\*)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:&|\\*))?((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))\\b(?!override\\W|override\\$|final\\W|final\\$)((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?=\\S)(?![:{a-zA-Z])" }, { captures: { 1: { name: "storage.type.union.declare.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 4: { name: "entity.name.type.union.cpp" }, 5: { patterns: [{ match: "\\*", name: "storage.modifier.pointer.cpp" }, { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "(?:\\&((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))){2,}\\&", name: "invalid.illegal.reference-type.cpp" }, { match: "\\&", name: "storage.modifier.reference.cpp" }] }, 6: { patterns: [{ include: "#inline_comment" }] }, 7: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 8: { patterns: [{ include: "#inline_comment" }] }, 9: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 10: { patterns: [{ include: "#inline_comment" }] }, 11: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 12: { name: "variable.other.object.declare.cpp" }, 13: { patterns: [{ include: "#inline_comment" }] }, 14: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] } }, match: "((?<!\\w)union(?!\\w))((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))?(?:(?:&|\\*)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:&|\\*))?((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))\\b(?!override\\W|override\\$|final\\W|final\\$)((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?=\\S)(?![:{a-zA-Z])" }, { captures: { 1: { name: "storage.type.enum.declare.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 4: { name: "entity.name.type.enum.cpp" }, 5: { patterns: [{ match: "\\*", name: "storage.modifier.pointer.cpp" }, { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "(?:\\&((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))){2,}\\&", name: "invalid.illegal.reference-type.cpp" }, { match: "\\&", name: "storage.modifier.reference.cpp" }] }, 6: { patterns: [{ include: "#inline_comment" }] }, 7: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 8: { patterns: [{ include: "#inline_comment" }] }, 9: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 10: { patterns: [{ include: "#inline_comment" }] }, 11: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 12: { name: "variable.other.object.declare.cpp" }, 13: { patterns: [{ include: "#inline_comment" }] }, 14: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] } }, match: "((?<!\\w)enum(?!\\w))((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))?(?:(?:&|\\*)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:&|\\*))?((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))\\b(?!override\\W|override\\$|final\\W|final\\$)((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?=\\S)(?![:{a-zA-Z])" }, { captures: { 1: { name: "storage.type.class.declare.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 4: { name: "entity.name.type.class.cpp" }, 5: { patterns: [{ match: "\\*", name: "storage.modifier.pointer.cpp" }, { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "(?:\\&((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))){2,}\\&", name: "invalid.illegal.reference-type.cpp" }, { match: "\\&", name: "storage.modifier.reference.cpp" }] }, 6: { patterns: [{ include: "#inline_comment" }] }, 7: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 8: { patterns: [{ include: "#inline_comment" }] }, 9: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 10: { patterns: [{ include: "#inline_comment" }] }, 11: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 12: { name: "variable.other.object.declare.cpp" }, 13: { patterns: [{ include: "#inline_comment" }] }, 14: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] } }, match: "((?<!\\w)class(?!\\w))((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))?(?:(?:&|\\*)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:&|\\*))?((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))\\b(?!override\\W|override\\$|final\\W|final\\$)((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?=\\S)(?![:{a-zA-Z])" }] }, static_assert: { begin: "((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)static_assert|_Static_assert(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\()", beginCaptures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 5: { name: "keyword.other.static_assert.cpp" }, 6: { patterns: [{ include: "#inline_comment" }] }, 7: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 8: { name: "comment.block.cpp" }, 9: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 10: { name: "punctuation.section.arguments.begin.bracket.round.static_assert.cpp" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.static_assert.cpp" } }, patterns: [{ begin: '(,)(?:\\s+)?(?=(?:L|u8|u|U(?:\\s+)?\\")?)', beginCaptures: { 1: { name: "punctuation.separator.delimiter.comma.cpp" } }, end: "(?=\\))", endCaptures: {}, name: "meta.static_assert.message.cpp", patterns: [{ include: "#string_context" }] }, { include: "#evaluation_context" }] }, std_space: { captures: { 0: { patterns: [{ include: "#inline_comment" }] }, 1: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] } }, match: "(?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)" }, storage_specifiers: { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 3: { name: "storage.modifier.specifier.$3.cpp" } }, match: "((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)(?:(?:thread_local)|(?:volatile)|(?:register)|(?:restrict)|(?:static)|(?:extern)|(?:const))(?!\\w))" }, storage_types: { patterns: [{ include: "#storage_specifiers" }, { include: "#inline_builtin_storage_type" }, { include: "#decltype" }, { include: "#typename" }] }, string_context: { patterns: [{ begin: '((?:u|u8|U|L)?)"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.cpp" }, 1: { name: "meta.encoding.cpp" } }, end: '(")(?:((?:[a-zA-Z]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)|(_(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*))?', endCaptures: { 1: { name: "punctuation.definition.string.end.cpp" }, 2: { name: "keyword.other.suffix.literal.user-defined.reserved.string.cpp" }, 3: { name: "keyword.other.suffix.literal.user-defined.string.cpp" } }, name: "string.quoted.double.cpp", patterns: [{ match: "(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8})", name: "constant.character.escape.cpp" }, { match: `\\\\['"?\\\\abfnrtv]`, name: "constant.character.escape.cpp" }, { match: "\\\\[0-7]{1,3}", name: "constant.character.escape.cpp" }, { captures: { 1: { name: "constant.character.escape.cpp" }, 2: { name: "invalid.illegal.unknown-escape.cpp" } }, match: "(?:(\\\\x0*[0-9a-fA-F]{2}(?![0-9a-fA-F]))|((?:\\\\x[0-9a-fA-F]*|\\\\x)))" }, { include: "#string_escapes_context_c" }] }, { begin: "(?<![0-9A-Fa-f])((?:u|u8|U|L)?)'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.cpp" }, 1: { name: "meta.encoding.cpp" } }, end: "(')(?:((?:[a-zA-Z]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)|(_(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*))?", endCaptures: { 1: { name: "punctuation.definition.string.end.cpp" }, 2: { name: "keyword.other.suffix.literal.user-defined.reserved.character.cpp" }, 3: { name: "keyword.other.suffix.literal.user-defined.character.cpp" } }, name: "string.quoted.single.cpp", patterns: [{ captures: { 1: { name: "constant.character.escape.cpp" }, 2: { name: "invalid.illegal.unknown-escape.cpp" } }, match: "(?:(\\\\x0*[0-9a-fA-F]{2}(?![0-9a-fA-F]))|((?:\\\\x[0-9a-fA-F]*|\\\\x)))" }, { include: "#string_escapes_context_c" }, { include: "#line_continuation_character" }] }, { begin: '((?:[uUL]8?)?R)\\"(?:(?:_r|re)|regex)\\(', beginCaptures: { 0: { name: "punctuation.definition.string.begin.cpp" }, 1: { name: "meta.encoding.cpp" } }, end: '\\)(?:(?:_r|re)|regex)\\"', endCaptures: { 0: { name: "punctuation.definition.string.end.cpp" } }, name: "string.quoted.double.raw.regex.cpp", patterns: [{ include: "source.regexp.python" }] }, { begin: '((?:[uUL]8?)?R)\\"(?:glsl|GLSL)\\(', beginCaptures: { 0: { name: "punctuation.definition.string.begin.cpp" }, 1: { name: "meta.encoding.cpp" } }, end: '\\)(?:glsl|GLSL)\\"', endCaptures: { 0: { name: "punctuation.definition.string.end.cpp" } }, name: "meta.string.quoted.double.raw.glsl.cpp", patterns: [{ include: "source.glsl" }] }, { begin: '((?:[uUL]8?)?R)\\"(?:[pP]?(?:sql|SQL)|d[dm]l)\\(', beginCaptures: { 0: { name: "punctuation.definition.string.begin.cpp" }, 1: { name: "meta.encoding.cpp" } }, end: '\\)(?:[pP]?(?:sql|SQL)|d[dm]l)\\"', endCaptures: { 0: { name: "punctuation.definition.string.end.cpp" } }, name: "meta.string.quoted.double.raw.sql.cpp", patterns: [{ include: "source.sql" }] }, { begin: '((?:u|u8|U|L)?R)"(?:([^ ()\\\\\\t]{0,16})|([^ ()\\\\\\t]*))\\(', beginCaptures: { 0: { name: "punctuation.definition.string.begin" }, 1: { name: "meta.encoding" }, 3: { name: "invalid.illegal.delimiter-too-long" } }, end: '(\\)\\2(\\3)")(?:((?:[a-zA-Z]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)|(_(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*))?', endCaptures: { 1: { name: "punctuation.definition.string.end" }, 2: { name: "invalid.illegal.delimiter-too-long" }, 3: { name: "keyword.other.suffix.literal.user-defined.reserved.string.cpp" }, 4: { name: "keyword.other.suffix.literal.user-defined.string.cpp" } }, name: "string.quoted.double.raw" }] }, string_escapes_context_c: { patterns: [{ match: `(?x)\\\\ (
\\\\			 |
[abefnprtv'"?]   |
[0-3][0-7]{,2}	 |
[4-7]\\d?		|
x[a-fA-F0-9]{,2} |
u[a-fA-F0-9]{,4} |
U[a-fA-F0-9]{,8} )`, name: "constant.character.escape" }, { match: "\\\\.", name: "invalid.illegal.unknown-escape" }, { match: `(?x) (?!%')(?!%")%
(\\d+\\$)?
[#0\\- +']*
[,;:_]?
((-?\\d+)|\\*(-?\\d+\\$)?)?
(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?
(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)?
[diouxXDOUeEfFgGaACcSspn%]`, name: "constant.other.placeholder" }] }, struct_block: { begin: "((?<!\\w)struct(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(?={)|(?:((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?((?:(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*+)?(?:((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(:(?!:)))?)", beginCaptures: { 0: { name: "meta.head.struct.cpp" }, 1: { name: "storage.type.$1.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { patterns: [{ include: "#attributes_context" }, { include: "#number_literal" }] }, 7: { patterns: [{ include: "#inline_comment" }] }, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 11: { patterns: [{ captures: { 1: { name: "storage.type.modifier.final.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "((?<!\\w)final(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))" }, { captures: { 1: { name: "entity.name.type.struct.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "storage.type.modifier.final.cpp" }, 7: { patterns: [{ include: "#inline_comment" }] }, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:((?<!\\w)final(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?(?=:|{|$)" }, { match: "DLLEXPORT", name: "entity.name.other.preprocessor.macro.predefined.DLLEXPORT.cpp" }, { match: "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*", name: "entity.name.other.preprocessor.macro.predefined.probably.$0.cpp" }] }, 12: { patterns: [{ include: "#inline_comment" }] }, 13: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 14: { name: "comment.block.cpp" }, 15: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 16: { patterns: [{ include: "#inline_comment" }] }, 17: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 18: { name: "comment.block.cpp" }, 19: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 20: { name: "punctuation.separator.colon.inheritance.cpp" } }, end: "(?:(?:(?<=\\}|%>|\\?\\?>)(?:\\s+)?(;)|(;))|(?=[;>\\[\\]=]))", endCaptures: { 1: { name: "punctuation.terminator.statement.cpp" }, 2: { name: "punctuation.terminator.statement.cpp" } }, name: "meta.block.struct.cpp", patterns: [{ begin: "\\G ?", beginCaptures: {}, end: "(?:\\{|<%|\\?\\?<|(?=;))", endCaptures: { 0: { name: "punctuation.section.block.begin.bracket.curly.struct.cpp" } }, name: "meta.head.struct.cpp", patterns: [{ include: "#ever_present_context" }, { include: "#inheritance_context" }, { include: "#template_call_range" }] }, { begin: "(?<=\\{|<%|\\?\\?<)", beginCaptures: {}, end: "\\}|%>|\\?\\?>", endCaptures: { 0: { name: "punctuation.section.block.end.bracket.curly.struct.cpp" } }, name: "meta.body.struct.cpp", patterns: [{ include: "#function_pointer" }, { include: "#static_assert" }, { include: "#constructor_inline" }, { include: "#destructor_inline" }, { include: "$self" }] }, { begin: "(?<=\\}|%>|\\?\\?>)[\\s]*", beginCaptures: {}, end: "[\\s]*(?=;)", endCaptures: {}, name: "meta.tail.struct.cpp", patterns: [{ include: "$self" }] }] }, struct_declare: { captures: { 1: { name: "storage.type.struct.declare.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 4: { name: "entity.name.type.struct.cpp" }, 5: { patterns: [{ match: "\\*", name: "storage.modifier.pointer.cpp" }, { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "(?:\\&((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))){2,}\\&", name: "invalid.illegal.reference-type.cpp" }, { match: "\\&", name: "storage.modifier.reference.cpp" }] }, 6: { patterns: [{ include: "#inline_comment" }] }, 7: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 8: { patterns: [{ include: "#inline_comment" }] }, 9: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 10: { patterns: [{ include: "#inline_comment" }] }, 11: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 12: { name: "variable.other.object.declare.cpp" }, 13: { patterns: [{ include: "#inline_comment" }] }, 14: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] } }, match: "((?<!\\w)struct(?!\\w))((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))?(?:(?:&|\\*)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:&|\\*))?((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))\\b(?!override\\W|override\\$|final\\W|final\\$)((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?=\\S)(?![:{a-zA-Z])" }, switch_conditional_parentheses: { begin: "((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\()", beginCaptures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 5: { name: "punctuation.section.parens.begin.bracket.round.conditional.switch.cpp" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.parens.end.bracket.round.conditional.switch.cpp" } }, name: "meta.conditional.switch.cpp", patterns: [{ include: "#evaluation_context" }] }, switch_statement: { begin: "((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)switch(?!\\w))", beginCaptures: { 0: { name: "meta.head.switch.cpp" }, 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 5: { name: "keyword.control.switch.cpp" } }, end: "(?:(?<=\\}|%>|\\?\\?>)|(?=[;>\\[\\]=]))", endCaptures: {}, name: "meta.block.switch.cpp", patterns: [{ begin: "\\G ?", beginCaptures: {}, end: "(?:\\{|<%|\\?\\?<|(?=;))", endCaptures: { 0: { name: "punctuation.section.block.begin.bracket.curly.switch.cpp" } }, name: "meta.head.switch.cpp", patterns: [{ include: "#switch_conditional_parentheses" }, { include: "$self" }] }, { begin: "(?<=\\{|<%|\\?\\?<)", beginCaptures: {}, end: "\\}|%>|\\?\\?>", endCaptures: { 0: { name: "punctuation.section.block.end.bracket.curly.switch.cpp" } }, name: "meta.body.switch.cpp", patterns: [{ include: "#default_statement" }, { include: "#case_statement" }, { include: "$self" }] }, { begin: "(?<=\\}|%>|\\?\\?>)[\\s]*", beginCaptures: {}, end: "[\\s]*(?=;)", endCaptures: {}, name: "meta.tail.switch.cpp", patterns: [{ include: "$self" }] }] }, template_argument_defaulted: { captures: { 1: { name: "storage.type.template.argument.$1.cpp" }, 2: { name: "entity.name.type.template.cpp" }, 3: { name: "keyword.operator.assignment.cpp" } }, match: "(?<=<|,)(?:\\s+)?((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)\\s+((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)?)(?:\\s+)?(\\=)" }, template_call_context: { patterns: [{ include: "#ever_present_context" }, { include: "#template_call_range" }, { include: "#storage_types" }, { include: "#language_constants" }, { include: "#scope_resolution_template_call_inner_generated" }, { include: "#operators" }, { include: "#number_literal" }, { include: "#string_context" }, { include: "#comma_in_template_argument" }, { include: "#qualified_type" }] }, template_call_innards: { captures: { 0: { patterns: [{ include: "#template_call_range" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: `((?<!<)<(?!<)(?:(?:(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/)))|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<1>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+`, name: "meta.template.call.cpp" }, template_call_range: { begin: "<", beginCaptures: { 0: { name: "punctuation.section.angle-brackets.begin.template.call.cpp" } }, end: ">", endCaptures: { 0: { name: "punctuation.section.angle-brackets.end.template.call.cpp" } }, name: "meta.template.call.cpp", patterns: [{ include: "#template_call_context" }] }, template_definition: { begin: "(?<!\\w)(template)(?:\\s+)?(<)", beginCaptures: { 1: { name: "storage.type.template.cpp" }, 2: { name: "punctuation.section.angle-brackets.begin.template.definition.cpp" } }, end: ">", endCaptures: { 0: { name: "punctuation.section.angle-brackets.end.template.definition.cpp" } }, name: "meta.template.definition.cpp", patterns: [{ begin: "(?<=\\w)(?:\\s+)?<", beginCaptures: { 0: { name: "punctuation.section.angle-brackets.begin.template.call.cpp" } }, end: ">", endCaptures: { 0: { name: "punctuation.section.angle-brackets.end.template.call.cpp" } }, patterns: [{ include: "#template_call_context" }] }, { include: "#template_definition_context" }] }, template_definition_argument: { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 3: { name: "storage.type.template.argument.$3.cpp" }, 4: { patterns: [{ match: "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*", name: "storage.type.template.argument.$0.cpp" }] }, 5: { name: "entity.name.type.template.cpp" }, 6: { name: "storage.type.template.argument.$6.cpp" }, 7: { name: "punctuation.vararg-ellipses.template.definition.cpp" }, 8: { name: "entity.name.type.template.cpp" }, 9: { name: "storage.type.template.cpp" }, 10: { name: "punctuation.section.angle-brackets.begin.template.definition.cpp" }, 11: { name: "storage.type.template.argument.$11.cpp" }, 12: { name: "entity.name.type.template.cpp" }, 13: { name: "punctuation.section.angle-brackets.end.template.definition.cpp" }, 14: { name: "storage.type.template.argument.$14.cpp" }, 15: { name: "entity.name.type.template.cpp" }, 16: { name: "keyword.operator.assignment.cpp" }, 17: { name: "punctuation.separator.delimiter.comma.template.argument.cpp" } }, match: "((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(?:(?:((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)|((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\s+)+)((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*))|((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)(?:\\s+)?(\\.\\.\\.)(?:\\s+)?((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*))|(?<!\\w)(template)(?:\\s+)?(<)(?:\\s+)?((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)(?:\\s+)?((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)?)(?:\\s+)?(>)(?:\\s+)?(class|typename)(?:\\s+((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*))?)(?:\\s+)?(?:(\\=)(?:\\s+)?(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)?(?:(,)|(?=>|$))" }, template_definition_context: { patterns: [{ include: "#scope_resolution_template_definition_inner_generated" }, { include: "#template_definition_argument" }, { include: "#template_argument_defaulted" }, { include: "#template_call_innards" }, { include: "#evaluation_context" }] }, template_explicit_instantiation: { captures: { 1: { name: "storage.modifier.specifier.extern.cpp" }, 2: { name: "storage.type.template.cpp" } }, match: "(?<!\\w)(?:(extern)\\s+)?(template)\\s+", name: "meta.template.explicit-instantiation.cpp" }, template_isolated_definition: { captures: { 1: { name: "storage.type.template.cpp" }, 2: { name: "punctuation.section.angle-brackets.begin.template.definition.cpp" }, 3: { name: "meta.template.definition.cpp", patterns: [{ include: "#template_definition_context" }] }, 4: { name: "punctuation.section.angle-brackets.end.template.definition.cpp" } }, match: "(?<!\\w)(template)(?:\\s+)?(<)(.*)(>)(?:\\s+)?$" }, ternary_operator: { applyEndPatternLast: 1, begin: "\\?", beginCaptures: { 0: { name: "keyword.operator.ternary.cpp" } }, end: ":", endCaptures: { 0: { name: "keyword.operator.ternary.cpp" } }, patterns: [{ include: "#ever_present_context" }, { include: "#string_context" }, { include: "#number_literal" }, { include: "#method_access" }, { include: "#member_access" }, { include: "#predefined_macros" }, { include: "#operators" }, { include: "#memory_operators" }, { include: "#wordlike_operators" }, { include: "#type_casting_operators" }, { include: "#control_flow_keywords" }, { include: "#exception_keywords" }, { include: "#the_this_keyword" }, { include: "#language_constants" }, { include: "#builtin_storage_type_initilizer" }, { include: "#qualifiers_and_specifiers_post_parameters" }, { include: "#functional_specifiers_pre_parameters" }, { include: "#storage_types" }, { include: "#lambdas" }, { include: "#attributes_context" }, { include: "#parentheses" }, { include: "#function_call" }, { include: "#scope_resolution_inner_generated" }, { include: "#square_brackets" }, { include: "#semicolon" }, { include: "#comma" }] }, the_this_keyword: { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 3: { name: "variable.language.this.cpp" } }, match: "((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)this(?!\\w))" }, type_alias: { captures: { 1: { name: "keyword.other.using.directive.cpp" }, 2: { name: "entity.name.type.cpp" }, 3: { patterns: [{ include: "#attributes_context" }, { include: "#number_literal" }] }, 4: { name: "keyword.operator.assignment.cpp" }, 5: { name: "keyword.other.typename.cpp" }, 6: { patterns: [{ include: "#storage_specifiers" }] }, 7: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 8: { name: "meta.qualified_type.cpp", patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.cpp" }, { match: "(?<!\\w)(?:(?:struct)|(?:class)|(?:union)|(?:enum))(?!\\w)", name: "storage.type.$0.cpp" }, { include: "#attributes_context" }, { include: "#storage_types" }, { include: "#number_literal" }, { include: "#string_context" }, { include: "#comma" }, { include: "#scope_resolution_inner_generated" }, { begin: "<", beginCaptures: { 0: { name: "punctuation.section.angle-brackets.begin.template.call.cpp" } }, end: ">", endCaptures: { 0: { name: "punctuation.section.angle-brackets.end.template.call.cpp" } }, name: "meta.template.call.cpp", patterns: [{ include: "#template_call_context" }] }, { match: "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*", name: "entity.name.type.cpp" }] }, 9: { patterns: [{ include: "#attributes_context" }, { include: "#number_literal" }] }, 10: { patterns: [{ include: "#inline_comment" }] }, 11: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 12: { patterns: [{ include: "#inline_comment" }] }, 13: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 14: { patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.type.cpp" }, { match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)", name: "entity.name.scope-resolution.type.cpp" }, { include: "#template_call_range" }] }, 15: { patterns: [{ include: "#template_call_range" }] }, 17: { patterns: [{ include: "#inline_comment" }] }, 18: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 20: { name: "meta.declaration.type.alias.value.unknown.cpp", patterns: [{ include: "#evaluation_context" }] }, 21: { patterns: [{ match: "\\*", name: "storage.modifier.pointer.cpp" }, { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "(?:\\&((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))){2,}\\&", name: "invalid.illegal.reference-type.cpp" }, { match: "\\&", name: "storage.modifier.reference.cpp" }] }, 22: { patterns: [{ include: "#inline_comment" }] }, 23: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 24: { patterns: [{ include: "#inline_comment" }] }, 25: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 26: { patterns: [{ include: "#inline_comment" }] }, 27: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 28: { name: "punctuation.definition.begin.bracket.square.cpp" }, 29: { patterns: [{ include: "#evaluation_context" }] }, 30: { name: "punctuation.definition.end.bracket.square.cpp" }, 31: { name: "punctuation.terminator.statement.cpp" } }, match: `(using)\\s+(?!namespace)((?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)(?:\\s+)?((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))?(?:\\s+)?(\\=)(?:\\s+)?((?:typename)?)(?:\\s+)?((?:(?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)(?<!\\w)(?:(?:thread_local)|(?:volatile)|(?:register)|(?:restrict)|(?:static)|(?:extern)|(?:const))(?!\\w)\\s+)+)?(?:(\\s*+((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))?((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(?:(?:(?:unsigned)|(?:signed)|(?:short)|(?:long))|(?:(?:struct)|(?:class)|(?:union)|(?:enum)))((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<19>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*+)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?(?!(?:(?:transaction_safe_dynamic)|(?:__has_cpp_attribute)|(?:reinterpret_cast)|(?:transaction_safe)|(?:atomic_noexcept)|(?:atomic_commit)|(?:__has_include)|(?:atomic_cancel)|(?:synchronized)|(?:thread_local)|(?:dynamic_cast)|(?:static_cast)|(?:const_cast)|(?:constexpr)|(?:co_return)|(?:constinit)|(?:namespace)|(?:protected)|(?:consteval)|(?:constexpr)|(?:constexpr)|(?:co_return)|(?:consteval)|(?:co_await)|(?:continue)|(?:template)|(?:reflexpr)|(?:volatile)|(?:register)|(?:co_await)|(?:co_yield)|(?:restrict)|(?:noexcept)|(?:volatile)|(?:override)|(?:explicit)|(?:decltype)|(?:operator)|(?:noexcept)|(?:noexcept)|(?:typename)|(?:requires)|(?:co_yield)|(?:nullptr)|(?:alignof)|(?:alignas)|(?:default)|(?:mutable)|(?:virtual)|(?:mutable)|(?:private)|(?:include)|(?:warning)|(?:_Pragma)|(?:defined)|(?:typedef)|(?:__asm__)|(?:concept)|(?:define)|(?:module)|(?:sizeof)|(?:switch)|(?:delete)|(?:pragma)|(?:and_eq)|(?:inline)|(?:xor_eq)|(?:typeid)|(?:import)|(?:extern)|(?:public)|(?:bitand)|(?:static)|(?:export)|(?:return)|(?:friend)|(?:ifndef)|(?:not_eq)|(?:false)|(?:final)|(?:break)|(?:const)|(?:catch)|(?:endif)|(?:ifdef)|(?:undef)|(?:error)|(?:audit)|(?:while)|(?:using)|(?:axiom)|(?:or_eq)|(?:compl)|(?:throw)|(?:bitor)|(?:const)|(?:line)|(?:case)|(?:else)|(?:this)|(?:true)|(?:goto)|(?:else)|(?:NULL)|(?:elif)|(?:new)|(?:asm)|(?:xor)|(?:and)|(?:try)|(?:not)|(?:for)|(?:do)|(?:if)|(?:or)|(?:if))\\b)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\b((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<19>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)?(?![\\w<:.]))|(.*(?<!;)))(?:(((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))?(?:(?:&|\\*)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:&|\\*))((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?(?:(\\[)(\\w*)(\\])(?:\\s+)?)?(?:\\s+)?(?:(;)|\\n)`, name: "meta.declaration.type.alias.cpp" }, type_casting_operators: { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 3: { name: "keyword.operator.wordlike.cpp keyword.operator.cast.$3.cpp" } }, match: "((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)(?:(?:reinterpret_cast)|(?:dynamic_cast)|(?:static_cast)|(?:const_cast))(?!\\w))" }, typedef_class: { begin: "((?<!\\w)typedef(?!\\w))(?:\\s+)?(?=(?<!\\w)class(?!\\w))", beginCaptures: { 1: { name: "keyword.other.typedef.cpp" } }, end: "(?<=;)", endCaptures: {}, patterns: [{ begin: "((?<!\\w)class(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(?={)|(?:((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?((?:(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*+)?(?:((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(:(?!:)))?)", beginCaptures: { 0: { name: "meta.head.class.cpp" }, 1: { name: "storage.type.$1.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { patterns: [{ include: "#attributes_context" }, { include: "#number_literal" }] }, 7: { patterns: [{ include: "#inline_comment" }] }, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 11: { patterns: [{ captures: { 1: { name: "storage.type.modifier.final.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "((?<!\\w)final(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))" }, { captures: { 1: { name: "entity.name.type.class.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "storage.type.modifier.final.cpp" }, 7: { patterns: [{ include: "#inline_comment" }] }, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:((?<!\\w)final(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?(?=:|{|$)" }, { match: "DLLEXPORT", name: "entity.name.other.preprocessor.macro.predefined.DLLEXPORT.cpp" }, { match: "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*", name: "entity.name.other.preprocessor.macro.predefined.probably.$0.cpp" }] }, 12: { patterns: [{ include: "#inline_comment" }] }, 13: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 14: { name: "comment.block.cpp" }, 15: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 16: { patterns: [{ include: "#inline_comment" }] }, 17: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 18: { name: "comment.block.cpp" }, 19: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 20: { name: "punctuation.separator.colon.inheritance.cpp" } }, end: "(?:(?:(?<=\\}|%>|\\?\\?>)(?:\\s+)?(;)|(;))|(?=[;>\\[\\]=]))", endCaptures: { 1: { name: "punctuation.terminator.statement.cpp" }, 2: { name: "punctuation.terminator.statement.cpp" } }, name: "meta.block.class.cpp", patterns: [{ begin: "\\G ?", beginCaptures: {}, end: "(?:\\{|<%|\\?\\?<|(?=;))", endCaptures: { 0: { name: "punctuation.section.block.begin.bracket.curly.class.cpp" } }, name: "meta.head.class.cpp", patterns: [{ include: "#ever_present_context" }, { include: "#inheritance_context" }, { include: "#template_call_range" }] }, { begin: "(?<=\\{|<%|\\?\\?<)", beginCaptures: {}, end: "\\}|%>|\\?\\?>", endCaptures: { 0: { name: "punctuation.section.block.end.bracket.curly.class.cpp" } }, name: "meta.body.class.cpp", patterns: [{ include: "#function_pointer" }, { include: "#static_assert" }, { include: "#constructor_inline" }, { include: "#destructor_inline" }, { include: "$self" }] }, { begin: "(?<=\\}|%>|\\?\\?>)[\\s]*", beginCaptures: {}, end: "[\\s]*(?=;)", endCaptures: {}, name: "meta.tail.class.cpp", patterns: [{ captures: { 1: { patterns: [{ match: "\\*", name: "storage.modifier.pointer.cpp" }, { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "(?:\\&((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))){2,}\\&", name: "invalid.illegal.reference-type.cpp" }, { match: "\\&", name: "storage.modifier.reference.cpp" }] }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { patterns: [{ include: "#inline_comment" }] }, 7: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 8: { name: "comment.block.cpp" }, 9: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 10: { patterns: [{ include: "#inline_comment" }] }, 11: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 12: { name: "comment.block.cpp" }, 13: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 14: { name: "entity.name.type.alias.cpp" } }, match: "(((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))?(?:(?:&|\\*)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:&|\\*))?((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))" }, { match: "," }] }] }] }, typedef_function_pointer: { begin: "((?<!\\w)typedef(?!\\w))(?:\\s+)?(?=.*\\(\\*\\s*(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\s*\\))", beginCaptures: { 1: { name: "keyword.other.typedef.cpp" } }, end: "(?<=;)", endCaptures: {}, patterns: [{ begin: `(\\s*+((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))?((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(?:(?:(?:unsigned)|(?:signed)|(?:short)|(?:long))|(?:(?:struct)|(?:class)|(?:union)|(?:enum)))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<18>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*+)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?(?!(?:(?:transaction_safe_dynamic)|(?:__has_cpp_attribute)|(?:reinterpret_cast)|(?:transaction_safe)|(?:atomic_noexcept)|(?:atomic_commit)|(?:__has_include)|(?:atomic_cancel)|(?:synchronized)|(?:thread_local)|(?:dynamic_cast)|(?:static_cast)|(?:const_cast)|(?:constexpr)|(?:co_return)|(?:constinit)|(?:namespace)|(?:protected)|(?:consteval)|(?:constexpr)|(?:constexpr)|(?:co_return)|(?:consteval)|(?:co_await)|(?:continue)|(?:template)|(?:reflexpr)|(?:volatile)|(?:register)|(?:co_await)|(?:co_yield)|(?:restrict)|(?:noexcept)|(?:volatile)|(?:override)|(?:explicit)|(?:decltype)|(?:operator)|(?:noexcept)|(?:noexcept)|(?:typename)|(?:requires)|(?:co_yield)|(?:nullptr)|(?:alignof)|(?:alignas)|(?:default)|(?:mutable)|(?:virtual)|(?:mutable)|(?:private)|(?:include)|(?:warning)|(?:_Pragma)|(?:defined)|(?:typedef)|(?:__asm__)|(?:concept)|(?:define)|(?:module)|(?:sizeof)|(?:switch)|(?:delete)|(?:pragma)|(?:and_eq)|(?:inline)|(?:xor_eq)|(?:typeid)|(?:import)|(?:extern)|(?:public)|(?:bitand)|(?:static)|(?:export)|(?:return)|(?:friend)|(?:ifndef)|(?:not_eq)|(?:false)|(?:final)|(?:break)|(?:const)|(?:catch)|(?:endif)|(?:ifdef)|(?:undef)|(?:error)|(?:audit)|(?:while)|(?:using)|(?:axiom)|(?:or_eq)|(?:compl)|(?:throw)|(?:bitor)|(?:const)|(?:line)|(?:case)|(?:else)|(?:this)|(?:true)|(?:goto)|(?:else)|(?:NULL)|(?:elif)|(?:new)|(?:asm)|(?:xor)|(?:and)|(?:try)|(?:not)|(?:for)|(?:do)|(?:if)|(?:or)|(?:if))\\b)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\b((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<18>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)?(?![\\w<:.]))(((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))?(?:(?:&|\\*)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:&|\\*))?((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\()(\\*)(?:\\s+)?((?:(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*)?)(?:\\s+)?(?:(\\[)(\\w*)(\\])(?:\\s+)?)*(\\))(?:\\s+)?(\\()`, beginCaptures: { 1: { name: "meta.qualified_type.cpp", patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.cpp" }, { match: "(?<!\\w)(?:(?:struct)|(?:class)|(?:union)|(?:enum))(?!\\w)", name: "storage.type.$0.cpp" }, { include: "#attributes_context" }, { include: "#storage_types" }, { include: "#number_literal" }, { include: "#string_context" }, { include: "#comma" }, { include: "#scope_resolution_inner_generated" }, { begin: "<", beginCaptures: { 0: { name: "punctuation.section.angle-brackets.begin.template.call.cpp" } }, end: ">", endCaptures: { 0: { name: "punctuation.section.angle-brackets.end.template.call.cpp" } }, name: "meta.template.call.cpp", patterns: [{ include: "#template_call_context" }] }, { match: "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*", name: "entity.name.type.cpp" }] }, 2: { patterns: [{ include: "#attributes_context" }, { include: "#number_literal" }] }, 3: { patterns: [{ include: "#inline_comment" }] }, 4: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 5: { name: "comment.block.cpp" }, 6: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 7: { patterns: [{ include: "#inline_comment" }] }, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 11: { patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.type.cpp" }, { match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)", name: "entity.name.scope-resolution.type.cpp" }, { include: "#template_call_range" }] }, 12: { patterns: [{ include: "#template_call_range" }] }, 13: {}, 14: { patterns: [{ include: "#inline_comment" }] }, 15: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 16: { name: "comment.block.cpp" }, 17: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 18: {}, 19: { patterns: [{ match: "\\*", name: "storage.modifier.pointer.cpp" }, { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "(?:\\&((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))){2,}\\&", name: "invalid.illegal.reference-type.cpp" }, { match: "\\&", name: "storage.modifier.reference.cpp" }] }, 20: { patterns: [{ include: "#inline_comment" }] }, 21: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 22: { name: "comment.block.cpp" }, 23: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 24: { patterns: [{ include: "#inline_comment" }] }, 25: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 26: { name: "comment.block.cpp" }, 27: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 28: { patterns: [{ include: "#inline_comment" }] }, 29: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 30: { name: "comment.block.cpp" }, 31: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 32: { name: "punctuation.section.parens.begin.bracket.round.function.pointer.cpp" }, 33: { name: "punctuation.definition.function.pointer.dereference.cpp" }, 34: { name: "entity.name.type.alias.cpp entity.name.type.pointer.function.cpp" }, 35: { name: "punctuation.definition.begin.bracket.square.cpp" }, 36: { patterns: [{ include: "#evaluation_context" }] }, 37: { name: "punctuation.definition.end.bracket.square.cpp" }, 38: { name: "punctuation.section.parens.end.bracket.round.function.pointer.cpp" }, 39: { name: "punctuation.section.parameters.begin.bracket.round.function.pointer.cpp" } }, end: "(\\))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?=[{=,);>]|\\n)(?!\\()", endCaptures: { 1: { name: "punctuation.section.parameters.end.bracket.round.function.pointer.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, patterns: [{ include: "#function_parameter_context" }] }] }, typedef_struct: { begin: "((?<!\\w)typedef(?!\\w))(?:\\s+)?(?=(?<!\\w)struct(?!\\w))", beginCaptures: { 1: { name: "keyword.other.typedef.cpp" } }, end: "(?<=;)", endCaptures: {}, patterns: [{ begin: "((?<!\\w)struct(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(?={)|(?:((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?((?:(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*+)?(?:((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(:(?!:)))?)", beginCaptures: { 0: { name: "meta.head.struct.cpp" }, 1: { name: "storage.type.$1.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { patterns: [{ include: "#attributes_context" }, { include: "#number_literal" }] }, 7: { patterns: [{ include: "#inline_comment" }] }, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 11: { patterns: [{ captures: { 1: { name: "storage.type.modifier.final.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "((?<!\\w)final(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))" }, { captures: { 1: { name: "entity.name.type.struct.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "storage.type.modifier.final.cpp" }, 7: { patterns: [{ include: "#inline_comment" }] }, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:((?<!\\w)final(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?(?=:|{|$)" }, { match: "DLLEXPORT", name: "entity.name.other.preprocessor.macro.predefined.DLLEXPORT.cpp" }, { match: "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*", name: "entity.name.other.preprocessor.macro.predefined.probably.$0.cpp" }] }, 12: { patterns: [{ include: "#inline_comment" }] }, 13: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 14: { name: "comment.block.cpp" }, 15: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 16: { patterns: [{ include: "#inline_comment" }] }, 17: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 18: { name: "comment.block.cpp" }, 19: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 20: { name: "punctuation.separator.colon.inheritance.cpp" } }, end: "(?:(?:(?<=\\}|%>|\\?\\?>)(?:\\s+)?(;)|(;))|(?=[;>\\[\\]=]))", endCaptures: { 1: { name: "punctuation.terminator.statement.cpp" }, 2: { name: "punctuation.terminator.statement.cpp" } }, name: "meta.block.struct.cpp", patterns: [{ begin: "\\G ?", beginCaptures: {}, end: "(?:\\{|<%|\\?\\?<|(?=;))", endCaptures: { 0: { name: "punctuation.section.block.begin.bracket.curly.struct.cpp" } }, name: "meta.head.struct.cpp", patterns: [{ include: "#ever_present_context" }, { include: "#inheritance_context" }, { include: "#template_call_range" }] }, { begin: "(?<=\\{|<%|\\?\\?<)", beginCaptures: {}, end: "\\}|%>|\\?\\?>", endCaptures: { 0: { name: "punctuation.section.block.end.bracket.curly.struct.cpp" } }, name: "meta.body.struct.cpp", patterns: [{ include: "#function_pointer" }, { include: "#static_assert" }, { include: "#constructor_inline" }, { include: "#destructor_inline" }, { include: "$self" }] }, { begin: "(?<=\\}|%>|\\?\\?>)[\\s]*", beginCaptures: {}, end: "[\\s]*(?=;)", endCaptures: {}, name: "meta.tail.struct.cpp", patterns: [{ captures: { 1: { patterns: [{ match: "\\*", name: "storage.modifier.pointer.cpp" }, { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "(?:\\&((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))){2,}\\&", name: "invalid.illegal.reference-type.cpp" }, { match: "\\&", name: "storage.modifier.reference.cpp" }] }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { patterns: [{ include: "#inline_comment" }] }, 7: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 8: { name: "comment.block.cpp" }, 9: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 10: { patterns: [{ include: "#inline_comment" }] }, 11: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 12: { name: "comment.block.cpp" }, 13: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 14: { name: "entity.name.type.alias.cpp" } }, match: "(((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))?(?:(?:&|\\*)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:&|\\*))?((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))" }, { match: "," }] }] }] }, typedef_union: { begin: "((?<!\\w)typedef(?!\\w))(?:\\s+)?(?=(?<!\\w)union(?!\\w))", beginCaptures: { 1: { name: "keyword.other.typedef.cpp" } }, end: "(?<=;)", endCaptures: {}, patterns: [{ begin: "((?<!\\w)union(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(?={)|(?:((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?((?:(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*+)?(?:((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(:(?!:)))?)", beginCaptures: { 0: { name: "meta.head.union.cpp" }, 1: { name: "storage.type.$1.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { patterns: [{ include: "#attributes_context" }, { include: "#number_literal" }] }, 7: { patterns: [{ include: "#inline_comment" }] }, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 11: { patterns: [{ captures: { 1: { name: "storage.type.modifier.final.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "((?<!\\w)final(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))" }, { captures: { 1: { name: "entity.name.type.union.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "storage.type.modifier.final.cpp" }, 7: { patterns: [{ include: "#inline_comment" }] }, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:((?<!\\w)final(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?(?=:|{|$)" }, { match: "DLLEXPORT", name: "entity.name.other.preprocessor.macro.predefined.DLLEXPORT.cpp" }, { match: "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*", name: "entity.name.other.preprocessor.macro.predefined.probably.$0.cpp" }] }, 12: { patterns: [{ include: "#inline_comment" }] }, 13: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 14: { name: "comment.block.cpp" }, 15: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 16: { patterns: [{ include: "#inline_comment" }] }, 17: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 18: { name: "comment.block.cpp" }, 19: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 20: { name: "punctuation.separator.colon.inheritance.cpp" } }, end: "(?:(?:(?<=\\}|%>|\\?\\?>)(?:\\s+)?(;)|(;))|(?=[;>\\[\\]=]))", endCaptures: { 1: { name: "punctuation.terminator.statement.cpp" }, 2: { name: "punctuation.terminator.statement.cpp" } }, name: "meta.block.union.cpp", patterns: [{ begin: "\\G ?", beginCaptures: {}, end: "(?:\\{|<%|\\?\\?<|(?=;))", endCaptures: { 0: { name: "punctuation.section.block.begin.bracket.curly.union.cpp" } }, name: "meta.head.union.cpp", patterns: [{ include: "#ever_present_context" }, { include: "#inheritance_context" }, { include: "#template_call_range" }] }, { begin: "(?<=\\{|<%|\\?\\?<)", beginCaptures: {}, end: "\\}|%>|\\?\\?>", endCaptures: { 0: { name: "punctuation.section.block.end.bracket.curly.union.cpp" } }, name: "meta.body.union.cpp", patterns: [{ include: "#function_pointer" }, { include: "#static_assert" }, { include: "#constructor_inline" }, { include: "#destructor_inline" }, { include: "$self" }] }, { begin: "(?<=\\}|%>|\\?\\?>)[\\s]*", beginCaptures: {}, end: "[\\s]*(?=;)", endCaptures: {}, name: "meta.tail.union.cpp", patterns: [{ captures: { 1: { patterns: [{ match: "\\*", name: "storage.modifier.pointer.cpp" }, { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "(?:\\&((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))){2,}\\&", name: "invalid.illegal.reference-type.cpp" }, { match: "\\&", name: "storage.modifier.reference.cpp" }] }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { patterns: [{ include: "#inline_comment" }] }, 7: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 8: { name: "comment.block.cpp" }, 9: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 10: { patterns: [{ include: "#inline_comment" }] }, 11: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 12: { name: "comment.block.cpp" }, 13: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 14: { name: "entity.name.type.alias.cpp" } }, match: "(((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))?(?:(?:&|\\*)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:&|\\*))?((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))" }, { match: "," }] }] }] }, typeid_operator: { begin: "((?<!\\w)typeid(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\()", beginCaptures: { 1: { name: "keyword.operator.functionlike.cpp keyword.operator.typeid.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "punctuation.section.arguments.begin.bracket.round.operator.typeid.cpp" } }, contentName: "meta.arguments.operator.typeid", end: "\\)", endCaptures: { 0: { name: "punctuation.section.arguments.end.bracket.round.operator.typeid.cpp" } }, patterns: [{ include: "#evaluation_context" }] }, typename: { captures: { 1: { name: "storage.modifier.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 4: { patterns: [{ include: "#inline_comment" }] }, 5: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 6: { name: "meta.qualified_type.cpp", patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.cpp" }, { match: "(?<!\\w)(?:(?:struct)|(?:class)|(?:union)|(?:enum))(?!\\w)", name: "storage.type.$0.cpp" }, { include: "#attributes_context" }, { include: "#storage_types" }, { include: "#number_literal" }, { include: "#string_context" }, { include: "#comma" }, { include: "#scope_resolution_inner_generated" }, { begin: "<", beginCaptures: { 0: { name: "punctuation.section.angle-brackets.begin.template.call.cpp" } }, end: ">", endCaptures: { 0: { name: "punctuation.section.angle-brackets.end.template.call.cpp" } }, name: "meta.template.call.cpp", patterns: [{ include: "#template_call_context" }] }, { match: "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*", name: "entity.name.type.cpp" }] }, 7: { patterns: [{ include: "#attributes_context" }, { include: "#number_literal" }] }, 8: { patterns: [{ include: "#inline_comment" }] }, 9: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 10: { patterns: [{ include: "#inline_comment" }] }, 11: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 12: { patterns: [{ match: "::", name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.type.cpp" }, { match: "(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)", name: "entity.name.scope-resolution.type.cpp" }, { include: "#template_call_range" }] }, 13: { patterns: [{ include: "#template_call_range" }] }, 14: {}, 15: { patterns: [{ include: "#inline_comment" }] }, 16: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 17: {} }, match: `(((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?<!\\w)typename(?!\\w))((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(\\s*+((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))?((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(?:(?:(?:unsigned)|(?:signed)|(?:short)|(?:long))|(?:(?:struct)|(?:class)|(?:union)|(?:enum)))((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:((?:::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<17>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*+)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?(?!(?:(?:transaction_safe_dynamic)|(?:__has_cpp_attribute)|(?:reinterpret_cast)|(?:transaction_safe)|(?:atomic_noexcept)|(?:atomic_commit)|(?:__has_include)|(?:atomic_cancel)|(?:synchronized)|(?:thread_local)|(?:dynamic_cast)|(?:static_cast)|(?:const_cast)|(?:constexpr)|(?:co_return)|(?:constinit)|(?:namespace)|(?:protected)|(?:consteval)|(?:constexpr)|(?:constexpr)|(?:co_return)|(?:consteval)|(?:co_await)|(?:continue)|(?:template)|(?:reflexpr)|(?:volatile)|(?:register)|(?:co_await)|(?:co_yield)|(?:restrict)|(?:noexcept)|(?:volatile)|(?:override)|(?:explicit)|(?:decltype)|(?:operator)|(?:noexcept)|(?:noexcept)|(?:typename)|(?:requires)|(?:co_yield)|(?:nullptr)|(?:alignof)|(?:alignas)|(?:default)|(?:mutable)|(?:virtual)|(?:mutable)|(?:private)|(?:include)|(?:warning)|(?:_Pragma)|(?:defined)|(?:typedef)|(?:__asm__)|(?:concept)|(?:define)|(?:module)|(?:sizeof)|(?:switch)|(?:delete)|(?:pragma)|(?:and_eq)|(?:inline)|(?:xor_eq)|(?:typeid)|(?:import)|(?:extern)|(?:public)|(?:bitand)|(?:static)|(?:export)|(?:return)|(?:friend)|(?:ifndef)|(?:not_eq)|(?:false)|(?:final)|(?:break)|(?:const)|(?:catch)|(?:endif)|(?:ifdef)|(?:undef)|(?:error)|(?:audit)|(?:while)|(?:using)|(?:axiom)|(?:or_eq)|(?:compl)|(?:throw)|(?:bitor)|(?:const)|(?:line)|(?:case)|(?:else)|(?:this)|(?:true)|(?:goto)|(?:else)|(?:NULL)|(?:elif)|(?:new)|(?:asm)|(?:xor)|(?:and)|(?:try)|(?:not)|(?:for)|(?:do)|(?:if)|(?:or)|(?:if))\\b)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*\\b((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<17>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)?(?![\\w<:.]))` }, undef: { captures: { 1: { name: "keyword.control.directive.undef.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 4: { name: "punctuation.definition.directive.cpp" }, 5: { patterns: [{ include: "#inline_comment" }] }, 6: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 7: { name: "entity.name.function.preprocessor.cpp" } }, match: "(^((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(#)(?:\\s+)?undef\\b)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))", name: "meta.preprocessor.undef.cpp" }, union_block: { begin: "((?<!\\w)union(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:(?={)|(?:((?:(?:(?:\\[\\[.*?\\]\\]|__attribute(?:__)?\\s*\\(\\s*\\(.*?\\)\\s*\\))|__declspec\\(.*?\\))|alignas\\(.*?\\))(?!\\)))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?((?:(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*+)?(?:((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(:(?!:)))?)", beginCaptures: { 0: { name: "meta.head.union.cpp" }, 1: { name: "storage.type.$1.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { patterns: [{ include: "#attributes_context" }, { include: "#number_literal" }] }, 7: { patterns: [{ include: "#inline_comment" }] }, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 11: { patterns: [{ captures: { 1: { name: "storage.type.modifier.final.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "((?<!\\w)final(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))" }, { captures: { 1: { name: "entity.name.type.union.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 4: { name: "comment.block.cpp" }, 5: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 6: { name: "storage.type.modifier.final.cpp" }, 7: { patterns: [{ include: "#inline_comment" }] }, 8: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 9: { name: "comment.block.cpp" }, 10: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?:((?<!\\w)final(?!\\w))((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))?(?=:|{|$)" }, { match: "DLLEXPORT", name: "entity.name.other.preprocessor.macro.predefined.DLLEXPORT.cpp" }, { match: "(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*", name: "entity.name.other.preprocessor.macro.predefined.probably.$0.cpp" }] }, 12: { patterns: [{ include: "#inline_comment" }] }, 13: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 14: { name: "comment.block.cpp" }, 15: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 16: { patterns: [{ include: "#inline_comment" }] }, 17: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 18: { name: "comment.block.cpp" }, 19: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" }, 20: { name: "punctuation.separator.colon.inheritance.cpp" } }, end: "(?:(?:(?<=\\}|%>|\\?\\?>)(?:\\s+)?(;)|(;))|(?=[;>\\[\\]=]))", endCaptures: { 1: { name: "punctuation.terminator.statement.cpp" }, 2: { name: "punctuation.terminator.statement.cpp" } }, name: "meta.block.union.cpp", patterns: [{ begin: "\\G ?", beginCaptures: {}, end: "(?:\\{|<%|\\?\\?<|(?=;))", endCaptures: { 0: { name: "punctuation.section.block.begin.bracket.curly.union.cpp" } }, name: "meta.head.union.cpp", patterns: [{ include: "#ever_present_context" }, { include: "#inheritance_context" }, { include: "#template_call_range" }] }, { begin: "(?<=\\{|<%|\\?\\?<)", beginCaptures: {}, end: "\\}|%>|\\?\\?>", endCaptures: { 0: { name: "punctuation.section.block.end.bracket.curly.union.cpp" } }, name: "meta.body.union.cpp", patterns: [{ include: "#function_pointer" }, { include: "#static_assert" }, { include: "#constructor_inline" }, { include: "#destructor_inline" }, { include: "$self" }] }, { begin: "(?<=\\}|%>|\\?\\?>)[\\s]*", beginCaptures: {}, end: "[\\s]*(?=;)", endCaptures: {}, name: "meta.tail.union.cpp", patterns: [{ include: "$self" }] }] }, union_declare: { captures: { 1: { name: "storage.type.union.declare.cpp" }, 2: { patterns: [{ include: "#inline_comment" }] }, 3: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 4: { name: "entity.name.type.union.cpp" }, 5: { patterns: [{ match: "\\*", name: "storage.modifier.pointer.cpp" }, { captures: { 1: { patterns: [{ include: "#inline_comment" }] }, 2: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 3: { name: "comment.block.cpp" }, 4: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "(?:\\&((?:(?:(?:\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))){2,}\\&", name: "invalid.illegal.reference-type.cpp" }, { match: "\\&", name: "storage.modifier.reference.cpp" }] }, 6: { patterns: [{ include: "#inline_comment" }] }, 7: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 8: { patterns: [{ include: "#inline_comment" }] }, 9: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 10: { patterns: [{ include: "#inline_comment" }] }, 11: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] }, 12: { name: "variable.other.object.declare.cpp" }, 13: { patterns: [{ include: "#inline_comment" }] }, 14: { patterns: [{ captures: { 1: { name: "comment.block.cpp punctuation.definition.comment.begin.cpp" }, 2: { name: "comment.block.cpp" }, 3: { name: "comment.block.cpp punctuation.definition.comment.end.cpp" } }, match: "\\s*+(\\/\\*)((?:[^\\*]++|\\*+(?!\\/))*+(\\*\\/))\\s*+" }] } }, match: "((?<!\\w)union(?!\\w))((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))?(?:(?:&|\\*)((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z)))*(?:&|\\*))?((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))\\b(?!override\\W|override\\$|final\\W|final\\$)((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))((?:((?:\\s*+\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/\\s*+)+)|(?:\\s++)|(?<=\\W)|(?=\\W)|^|(?:\\n?$)|\\A|\\Z))(?=\\S)(?![:{a-zA-Z])" }, using_name: { captures: { 1: { name: "keyword.other.using.directive.cpp" } }, match: "(using)\\s+(?!namespace\\b)" }, using_namespace: { begin: `(?<!\\w)(using)\\s+(namespace)\\s+((::)?(?:(?!\\b(?:__has_cpp_attribute|reinterpret_cast|atomic_noexcept|atomic_commit|atomic_cancel|__has_include|thread_local|dynamic_cast|synchronized|static_cast|const_cast|consteval|co_return|protected|constinit|constexpr|co_return|consteval|namespace|constexpr|constexpr|co_await|explicit|volatile|noexcept|co_yield|noexcept|noexcept|requires|typename|decltype|operator|template|continue|co_await|co_yield|volatile|register|restrict|reflexpr|mutable|alignof|include|private|defined|typedef|_Pragma|__asm__|concept|mutable|warning|default|virtual|alignas|public|sizeof|delete|not_eq|bitand|and_eq|xor_eq|typeid|switch|return|struct|static|extern|inline|friend|ifndef|define|pragma|export|import|module|catch|throw|const|or_eq|compl|while|ifdef|const|bitor|union|class|undef|error|break|using|endif|goto|line|enum|this|case|else|elif|else|not|try|for|asm|and|xor|new|do|if|or|if)\\b)(?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w)\\s*+(((?<!<)<(?!<)(?:(?:\\/\\*(?:[^\\*]++|\\*+(?!\\/))*+\\*\\/)|(?:"(?:[^"]*|\\\\")")|(?:'(?:[^']*|\\\\')')|\\g<6>|(?:(?:[^'"<>\\/]|\\/[^*])++))*>)\\s*+)?::)*\\s*+)?((?<!\\w)(?:[a-zA-Z_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))(?:[a-zA-Z0-9_]|(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}))*(?!\\w))(?=;|\\n)`, beginCaptures: { 1: { name: "keyword.other.using.directive.cpp" }, 2: { name: "keyword.other.namespace.directive.cpp storage.type.namespace.directive.cpp" }, 3: { patterns: [{ include: "#scope_resolution_namespace_using_inner_generated" }] }, 4: { name: "punctuation.separator.namespace.access.cpp punctuation.separator.scope-resolution.namespace.using.cpp" }, 5: { patterns: [{ include: "#template_call_range" }] }, 6: {}, 7: { name: "entity.name.namespace.cpp" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.statement.cpp" } }, name: "meta.using-namespace.cpp" }, vararg_ellipses: { match: "(?<!\\.)\\.\\.\\.(?!\\.)", name: "punctuation.vararg-ellipses.cpp" }, wordlike_operators: { patterns: [{ match: "(?<!\\w)(?:(?:noexcept)|(?:xor_eq)|(?:and_eq)|(?:delete)|(?:not_eq)|(?:bitand)|(?:bitor)|(?:compl)|(?:or_eq)|(?:not)|(?:xor)|(?:new)|(?:and)|(?:or))(?!\\w)", name: "keyword.operator.wordlike.cpp keyword.operator.$0.cpp" }] } }, scopeName: "source.cpp", embeddedLangs: ["cpp-macro", "regexp", "glsl", "sql"], aliases: ["c++"] });
var k = [
  ...ee,
  ...y,
  ...x,
  ...a,
  ne
];
const te = Object.freeze({ displayName: "C#", name: "csharp", patterns: [{ include: "#preprocessor" }, { include: "#comment" }, { include: "#directives" }, { include: "#declarations" }, { include: "#script-top-level" }], repository: { "accessor-getter": { patterns: [{ begin: "\\{", beginCaptures: { 0: { name: "punctuation.curlybrace.open.cs" } }, contentName: "meta.accessor.getter.cs", end: "\\}", endCaptures: { 0: { name: "punctuation.curlybrace.close.cs" } }, patterns: [{ include: "#statement" }] }, { include: "#accessor-getter-expression" }, { include: "#punctuation-semicolon" }] }, "accessor-getter-expression": { begin: "=>", beginCaptures: { 0: { name: "keyword.operator.arrow.cs" } }, contentName: "meta.accessor.getter.cs", end: "(?=;|\\})", patterns: [{ include: "#ref-modifier" }, { include: "#expression" }] }, "accessor-setter": { patterns: [{ begin: "\\{", beginCaptures: { 0: { name: "punctuation.curlybrace.open.cs" } }, contentName: "meta.accessor.setter.cs", end: "\\}", endCaptures: { 0: { name: "punctuation.curlybrace.close.cs" } }, patterns: [{ include: "#statement" }] }, { begin: "=>", beginCaptures: { 0: { name: "keyword.operator.arrow.cs" } }, contentName: "meta.accessor.setter.cs", end: "(?=;|\\})", patterns: [{ include: "#ref-modifier" }, { include: "#expression" }] }, { include: "#punctuation-semicolon" }] }, "anonymous-method-expression": { patterns: [{ begin: `(?x)
((?:\\b(?:async|static)\\b\\s*)*)
(?:
(@?[_[:alpha:]][_[:alnum:]]*)\\b|
(\\()
(?<tuple>(?:[^()]|\\(\\g<tuple>\\))*)
(\\))
)\\s*
(=>)`, beginCaptures: { 1: { patterns: [{ match: "async|static", name: "storage.modifier.$0.cs" }] }, 2: { name: "entity.name.variable.parameter.cs" }, 3: { name: "punctuation.parenthesis.open.cs" }, 4: { patterns: [{ include: "#comment" }, { include: "#explicit-anonymous-function-parameter" }, { include: "#implicit-anonymous-function-parameter" }, { include: "#default-argument" }, { include: "#punctuation-comma" }] }, 5: { name: "punctuation.parenthesis.close.cs" }, 6: { name: "keyword.operator.arrow.cs" } }, end: "(?=[,;)}])", patterns: [{ include: "#intrusive" }, { begin: "(?={)", end: "(?=[,;)}])", patterns: [{ include: "#block" }, { include: "#intrusive" }] }, { begin: "\\b(ref)\\b|(?=\\S)", beginCaptures: { 1: { name: "storage.modifier.ref.cs" } }, end: "(?=[,;)}])", patterns: [{ include: "#expression" }] }] }, { begin: `(?x)
((?:\\b(?:async|static)\\b\\s*)*)
\\b(delegate)\\b\\s*`, beginCaptures: { 1: { patterns: [{ match: "async|static", name: "storage.modifier.$0.cs" }] }, 2: { name: "storage.type.delegate.cs" } }, end: "(?<=})|(?=[,;)}])", patterns: [{ include: "#intrusive" }, { begin: "\\(", beginCaptures: { 0: { name: "punctuation.parenthesis.open.cs" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } }, patterns: [{ include: "#intrusive" }, { include: "#explicit-anonymous-function-parameter" }, { include: "#punctuation-comma" }] }, { include: "#block" }] }] }, "anonymous-object-creation-expression": { begin: "\\b(new)\\b\\s*(?=\\{|//|/\\*|$)", beginCaptures: { 1: { name: "keyword.operator.expression.new.cs" } }, end: "(?<=\\})", patterns: [{ include: "#comment" }, { include: "#initializer-expression" }] }, argument: { patterns: [{ match: "\\b(ref|in)\\b", name: "storage.modifier.$1.cs" }, { begin: "\\b(out)\\b", beginCaptures: { 1: { name: "storage.modifier.out.cs" } }, end: "(?=,|\\)|\\])", patterns: [{ include: "#declaration-expression-local" }, { include: "#expression" }] }, { include: "#expression" }] }, "argument-list": { begin: "\\(", beginCaptures: { 0: { name: "punctuation.parenthesis.open.cs" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } }, patterns: [{ include: "#named-argument" }, { include: "#argument" }, { include: "#punctuation-comma" }] }, "array-creation-expression": { begin: `(?x)
\\b(new|stackalloc)\\b\\s*
(?<type_name>
(?:
(?:
(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)?
(?<name_and_type_args>
\\g<identifier>\\s*
(?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?
)
(?:\\s*\\.\\s*\\g<name_and_type_args>)* |
(?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))
)
(?:\\s*\\?\\s*)?
(?:\\s*
\\[
(?:\\s*,\\s*)*
\\]
\\s*
(?:\\?)?
\\s*
)*
)
)?\\s*
(?=\\[)`, beginCaptures: { 1: { name: "keyword.operator.expression.$1.cs" }, 2: { patterns: [{ include: "#type" }] } }, end: "(?<=\\])", patterns: [{ include: "#bracketed-argument-list" }] }, "as-expression": { captures: { 1: { name: "keyword.operator.expression.as.cs" }, 2: { patterns: [{ include: "#type" }] } }, match: `(?x)
(?<!\\.)\\b(as)\\b\\s*
(?<type_name>
(?:
(?:
(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)?
(?<name_and_type_args>
\\g<identifier>\\s*
(?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?
)
(?:\\s*\\.\\s*\\g<name_and_type_args>)* |
(?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))
)
(?:\\s*\\?(?!\\?))?
(?:\\s*
\\[
\\s*(?:,\\s*)*
\\]
(?:\\s*\\?(?!\\?))?
)*
)
)?` }, "assignment-expression": { begin: "(?:\\*|/|%|\\+|-|\\?\\?|\\&|\\^|<<|>>>?|\\|)?=(?!=|>)", beginCaptures: { 0: { patterns: [{ include: "#assignment-operators" }] } }, end: "(?=[,\\)\\];}])", patterns: [{ include: "#ref-modifier" }, { include: "#expression" }] }, "assignment-operators": { patterns: [{ match: "\\*=|/=|%=|\\+=|-=|\\?\\?=", name: "keyword.operator.assignment.compound.cs" }, { match: "\\&=|\\^=|<<=|>>>?=|\\|=", name: "keyword.operator.assignment.compound.bitwise.cs" }, { match: "\\=", name: "keyword.operator.assignment.cs" }] }, attribute: { patterns: [{ include: "#type-name" }, { include: "#type-arguments" }, { include: "#attribute-arguments" }] }, "attribute-arguments": { begin: "(\\()", beginCaptures: { 1: { name: "punctuation.parenthesis.open.cs" } }, end: "(\\))", endCaptures: { 1: { name: "punctuation.parenthesis.close.cs" } }, patterns: [{ include: "#attribute-named-argument" }, { include: "#expression" }, { include: "#punctuation-comma" }] }, "attribute-named-argument": { begin: "(@?[_[:alpha:]][_[:alnum:]]*)\\s*(?==)", beginCaptures: { 1: { name: "entity.name.variable.property.cs" } }, end: "(?=(,|\\)))", patterns: [{ include: "#operator-assignment" }, { include: "#expression" }] }, "attribute-section": { begin: "(\\[)(assembly|module|field|event|method|param|property|return|type)?(\\:)?", beginCaptures: { 1: { name: "punctuation.squarebracket.open.cs" }, 2: { name: "keyword.other.attribute-specifier.cs" }, 3: { name: "punctuation.separator.colon.cs" } }, end: "(\\])", endCaptures: { 1: { name: "punctuation.squarebracket.close.cs" } }, patterns: [{ include: "#comment" }, { include: "#attribute" }, { include: "#punctuation-comma" }] }, "await-expression": { match: "(?<!\\.\\s*)\\b(await)\\b", name: "keyword.operator.expression.await.cs" }, "await-statement": { begin: "(?<!\\.\\s*)\\b(await)\\b", beginCaptures: { 1: { name: "keyword.operator.expression.await.cs" } }, end: "(?<=})|(?=;|})", patterns: [{ include: "#foreach-statement" }, { include: "#using-statement" }, { include: "#expression" }] }, "base-types": { begin: ":", beginCaptures: { 0: { name: "punctuation.separator.colon.cs" } }, end: "(?=\\{|where|;)", patterns: [{ include: "#type" }, { include: "#punctuation-comma" }, { include: "#preprocessor" }] }, block: { begin: "\\{", beginCaptures: { 0: { name: "punctuation.curlybrace.open.cs" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.curlybrace.close.cs" } }, patterns: [{ include: "#statement" }] }, "boolean-literal": { patterns: [{ match: "(?<!\\.)\\btrue\\b", name: "constant.language.boolean.true.cs" }, { match: "(?<!\\.)\\bfalse\\b", name: "constant.language.boolean.false.cs" }] }, "bracketed-argument-list": { begin: "\\[", beginCaptures: { 0: { name: "punctuation.squarebracket.open.cs" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.squarebracket.close.cs" } }, patterns: [{ include: "#named-argument" }, { include: "#argument" }, { include: "#punctuation-comma" }] }, "bracketed-parameter-list": { begin: "(?=(\\[))", beginCaptures: { 1: { name: "punctuation.squarebracket.open.cs" } }, end: "(?=(\\]))", endCaptures: { 1: { name: "punctuation.squarebracket.close.cs" } }, patterns: [{ begin: "(?<=\\[)", end: "(?=\\])", patterns: [{ include: "#comment" }, { include: "#attribute-section" }, { include: "#parameter" }, { include: "#punctuation-comma" }, { include: "#variable-initializer" }] }] }, "break-or-continue-statement": { match: "(?<!\\.)\\b(break|continue)\\b", name: "keyword.control.flow.$1.cs" }, "case-guard": { patterns: [{ include: "#parenthesized-expression" }, { include: "#expression" }] }, "cast-expression": { captures: { 1: { name: "punctuation.parenthesis.open.cs" }, 2: { patterns: [{ include: "#type" }] }, 7: { name: "punctuation.parenthesis.close.cs" } }, match: `(?x)
(\\()\\s*
(?<type_name>
(?:
(?:
(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)?
(?<name_and_type_args>
\\g<identifier>\\s*
(?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?
)
(?:\\s*\\.\\s*\\g<name_and_type_args>)* |
(?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))
)
(?:\\s*\\?\\s*)?
(?:\\s*
\\[
(?:\\s*,\\s*)*
\\]
\\s*
(?:\\?)?
\\s*
)*
)
)\\s*
(\\))(?=\\s*-*!*@?[_[:alnum:]\\(])` }, "casted-constant-pattern": { begin: `(?x)
(\\()
([\\s.:@_[:alnum:]]+)
(\\))
(?=[\\s+\\-!~]*@?[_[:alnum:]('"]+)`, beginCaptures: { 1: { name: "punctuation.parenthesis.open.cs" }, 2: { patterns: [{ include: "#type-builtin" }, { include: "#type-name" }] }, 3: { name: "punctuation.parenthesis.close.cs" } }, end: "(?=[)}\\],;:?=&|^]|!=|\\b(and|or|when)\\b)", patterns: [{ include: "#casted-constant-pattern" }, { begin: "\\(", beginCaptures: { 0: { name: "punctuation.parenthesis.open.cs" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } }, patterns: [{ include: "#constant-pattern" }] }, { include: "#constant-pattern" }, { captures: { 1: { name: "entity.name.type.alias.cs" }, 2: { name: "punctuation.separator.coloncolon.cs" } }, match: "(@?[_[:alpha:]][_[:alnum:]]*)\\s*(\\:\\:)" }, { captures: { 1: { name: "entity.name.type.cs" }, 2: { name: "punctuation.accessor.cs" } }, match: "(@?[_[:alpha:]][_[:alnum:]]*)\\s*(\\.)" }, { match: "\\@?[_[:alpha:]][_[:alnum:]]*", name: "variable.other.constant.cs" }] }, "catch-clause": { begin: "(?<!\\.)\\b(catch)\\b", beginCaptures: { 1: { name: "keyword.control.exception.catch.cs" } }, end: "(?<=\\})", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.parenthesis.open.cs" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } }, patterns: [{ captures: { 1: { patterns: [{ include: "#type" }] }, 6: { name: "entity.name.variable.local.cs" } }, match: `(?x)
(?<type_name>
(?:
(?:
(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)?
(?<name_and_type_args>
\\g<identifier>\\s*
(?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?
)
(?:\\s*\\.\\s*\\g<name_and_type_args>)* |
(?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))
)
(?:\\s*\\?\\s*)?
(?:\\s*
\\[
(?:\\s*,\\s*)*
\\]
\\s*
(?:\\?)?
\\s*
)*
)
)\\s*
(?:(\\g<identifier>)\\b)?` }] }, { include: "#when-clause" }, { include: "#comment" }, { include: "#block" }] }, "char-character-escape": { match: "\\\\(x[0-9a-fA-F]{1,4}|u[0-9a-fA-F]{4}|.)", name: "constant.character.escape.cs" }, "char-literal": { begin: "'", beginCaptures: { 0: { name: "punctuation.definition.char.begin.cs" } }, end: "(\\')|((?:[^\\\\\\n])$)", endCaptures: { 1: { name: "punctuation.definition.char.end.cs" }, 2: { name: "invalid.illegal.newline.cs" } }, name: "string.quoted.single.cs", patterns: [{ include: "#char-character-escape" }] }, "class-declaration": { begin: "(?=(\\brecord\\b\\s+)?\\bclass\\b)", end: "(?<=\\})|(?=;)", patterns: [{ begin: `(?x)
(\\b(record)\\b\\s+)?
\\b(class)\\b\\s+
(@?[_[:alpha:]][_[:alnum:]]*)\\s*`, beginCaptures: { 2: { name: "storage.type.record.cs" }, 3: { name: "storage.type.class.cs" }, 4: { name: "entity.name.type.class.cs" } }, end: "(?=\\{)|(?=;)", patterns: [{ include: "#comment" }, { include: "#type-parameter-list" }, { include: "#parenthesized-parameter-list" }, { include: "#base-types" }, { include: "#generic-constraints" }] }, { begin: "\\{", beginCaptures: { 0: { name: "punctuation.curlybrace.open.cs" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.curlybrace.close.cs" } }, patterns: [{ include: "#class-or-struct-members" }] }, { include: "#preprocessor" }, { include: "#comment" }] }, "class-or-struct-members": { patterns: [{ include: "#preprocessor" }, { include: "#comment" }, { include: "#storage-modifier" }, { include: "#type-declarations" }, { include: "#property-declaration" }, { include: "#field-declaration" }, { include: "#event-declaration" }, { include: "#indexer-declaration" }, { include: "#variable-initializer" }, { include: "#constructor-declaration" }, { include: "#destructor-declaration" }, { include: "#operator-declaration" }, { include: "#conversion-operator-declaration" }, { include: "#method-declaration" }, { include: "#attribute-section" }, { include: "#punctuation-semicolon" }] }, "combinator-pattern": { match: "\\b(and|or|not)\\b", name: "keyword.operator.expression.pattern.combinator.$1.cs" }, comment: { patterns: [{ begin: "(^\\s+)?(///)(?!/)", captures: { 1: { name: "punctuation.whitespace.comment.leading.cs" }, 2: { name: "punctuation.definition.comment.cs" } }, name: "comment.block.documentation.cs", patterns: [{ include: "#xml-doc-comment" }], while: "^(\\s*)(///)(?!/)" }, { begin: "(^\\s+)?(/\\*\\*)(?!/)", captures: { 1: { name: "punctuation.whitespace.comment.leading.cs" }, 2: { name: "punctuation.definition.comment.cs" } }, end: "(^\\s+)?(\\*/)", name: "comment.block.documentation.cs", patterns: [{ begin: "\\G(?=(?~\\*/)$)", patterns: [{ include: "#xml-doc-comment" }], while: "^(\\s*+)(\\*(?!/))?(?=(?~\\*/)$)", whileCaptures: { 1: { name: "punctuation.whitespace.comment.leading.cs" }, 2: { name: "punctuation.definition.comment.cs" } } }, { include: "#xml-doc-comment" }] }, { begin: "(^\\s+)?(//).*$", captures: { 1: { name: "punctuation.whitespace.comment.leading.cs" }, 2: { name: "punctuation.definition.comment.cs" } }, name: "comment.line.double-slash.cs", while: "^(\\s*)(//).*$" }, { begin: "/\\*", captures: { 0: { name: "punctuation.definition.comment.cs" } }, end: "\\*/", name: "comment.block.cs" }] }, "conditional-operator": { patterns: [{ match: "\\?(?!\\?|\\s*[.\\[])", name: "keyword.operator.conditional.question-mark.cs" }, { match: ":", name: "keyword.operator.conditional.colon.cs" }] }, "constant-pattern": { patterns: [{ include: "#boolean-literal" }, { include: "#null-literal" }, { include: "#numeric-literal" }, { include: "#char-literal" }, { include: "#string-literal" }, { include: "#raw-string-literal" }, { include: "#verbatim-string-literal" }, { include: "#type-operator-expression" }, { include: "#expression-operator-expression" }, { include: "#expression-operators" }, { include: "#casted-constant-pattern" }] }, "constructor-declaration": { begin: "(?=@?[_[:alpha:]][_[:alnum:]]*\\s*\\()", end: "(?<=\\})|(?=;)", patterns: [{ captures: { 1: { name: "entity.name.function.cs" } }, match: "(@?[_[:alpha:]][_[:alnum:]]*)\\b" }, { begin: "(:)", beginCaptures: { 1: { name: "punctuation.separator.colon.cs" } }, end: "(?=\\{|=>)", patterns: [{ include: "#constructor-initializer" }] }, { include: "#parenthesized-parameter-list" }, { include: "#preprocessor" }, { include: "#comment" }, { include: "#expression-body" }, { include: "#block" }] }, "constructor-initializer": { begin: "\\b(base|this)\\b\\s*(?=\\()", beginCaptures: { 1: { name: "variable.language.$1.cs" } }, end: "(?<=\\))", patterns: [{ include: "#argument-list" }] }, "context-control-paren-statement": { patterns: [{ include: "#fixed-statement" }, { include: "#lock-statement" }, { include: "#using-statement" }] }, "context-control-statement": { match: "\\b(checked|unchecked|unsafe)\\b(?!\\s*[@_[:alpha:](])", name: "keyword.control.context.$1.cs" }, "conversion-operator-declaration": { begin: `(?x)
(?<explicit_or_implicit_keyword>(?:\\b(?:explicit|implicit)))\\s*
(?<operator_keyword>(?:\\b(?:operator)))\\s*
(?<type_name>
(?:
(?:ref\\s+(?:readonly\\s+)?)?
(?:
(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)?
(?<name_and_type_args>
\\g<identifier>\\s*
(?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?
)
(?:\\s*\\.\\s*\\g<name_and_type_args>)* |
(?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))
)
(?:\\s*\\?\\s*)?
(?:\\s*
\\[
(?:\\s*,\\s*)*
\\]
\\s*
(?:\\?)?
\\s*
)*
)
)\\s*
(?=\\()`, beginCaptures: { 1: { patterns: [{ captures: { 1: { name: "storage.modifier.explicit.cs" } }, match: "\\b(explicit)\\b" }, { captures: { 1: { name: "storage.modifier.implicit.cs" } }, match: "\\b(implicit)\\b" }] }, 2: { name: "storage.type.operator.cs" }, 3: { patterns: [{ include: "#type" }] } }, end: "(?<=\\})|(?=;)", patterns: [{ include: "#comment" }, { include: "#parenthesized-parameter-list" }, { include: "#expression-body" }, { include: "#block" }] }, "declaration-expression-local": { captures: { 1: { name: "storage.type.var.cs" }, 2: { patterns: [{ include: "#type" }] }, 7: { name: "entity.name.variable.local.cs" } }, match: `(?x)
(?:
\\b(var)\\b|
(?<type_name>
(?:
(?:
(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)?
(?<name_and_type_args>
\\g<identifier>\\s*
(?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?
)
(?:\\s*\\.\\s*\\g<name_and_type_args>)* |
(?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))
)
(?:\\s*\\?\\s*)?
(?:\\s*
\\[
(?:\\s*,\\s*)*
\\]
\\s*
(?:\\?)?
\\s*
)*
)
)
)\\s+
(\\g<identifier>)\\b\\s*
(?=[,)\\]])` }, "declaration-expression-tuple": { captures: { 1: { name: "storage.type.var.cs" }, 2: { patterns: [{ include: "#type" }] }, 7: { name: "entity.name.variable.tuple-element.cs" } }, match: `(?x)
(?:
\\b(var)\\b|
(?<type_name>
(?:
(?:
(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)?
(?<name_and_type_args>
\\g<identifier>\\s*
(?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?
)
(?:\\s*\\.\\s*\\g<name_and_type_args>)* |
(?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))
)
(?:\\s*\\?\\s*)?
(?:\\s*
\\[
(?:\\s*,\\s*)*
\\]
\\s*
(?:\\?)?
\\s*
)*
)
)
)\\s+
(\\g<identifier>)\\b\\s*
(?=[,)])` }, declarations: { patterns: [{ include: "#namespace-declaration" }, { include: "#type-declarations" }, { include: "#punctuation-semicolon" }] }, "default-argument": { begin: "=", beginCaptures: { 0: { name: "keyword.operator.assignment.cs" } }, end: "(?=,|\\))", patterns: [{ include: "#expression" }] }, "default-literal-expression": { captures: { 1: { name: "keyword.operator.expression.default.cs" } }, match: "\\b(default)\\b" }, "delegate-declaration": { begin: `(?x)
(?:\\b(delegate)\\b)\\s+
(?<type_name>
(?:
(?:ref\\s+(?:readonly\\s+)?)?
(?:
(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)?
(?<name_and_type_args>
\\g<identifier>\\s*
(?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?
)
(?:\\s*\\.\\s*\\g<name_and_type_args>)* |
(?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))
)
(?:\\s*\\?\\s*)?
(?:\\s*
\\[
(?:\\s*,\\s*)*
\\]
\\s*
(?:\\?)?
\\s*
)*
)
)\\s+
(\\g<identifier>)\\s*
(<([^<>]+)>)?\\s*
(?=\\()`, beginCaptures: { 1: { name: "storage.type.delegate.cs" }, 2: { patterns: [{ include: "#type" }] }, 7: { name: "entity.name.type.delegate.cs" }, 8: { patterns: [{ include: "#type-parameter-list" }] } }, end: "(?=;)", patterns: [{ include: "#comment" }, { include: "#parenthesized-parameter-list" }, { include: "#generic-constraints" }] }, "designation-pattern": { patterns: [{ include: "#intrusive" }, { begin: "\\(", beginCaptures: { 0: { name: "punctuation.parenthesis.open.cs" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } }, patterns: [{ include: "#punctuation-comma" }, { include: "#designation-pattern" }] }, { include: "#simple-designation-pattern" }] }, "destructor-declaration": { begin: "(~)(@?[_[:alpha:]][_[:alnum:]]*)\\s*(?=\\()", beginCaptures: { 1: { name: "punctuation.tilde.cs" }, 2: { name: "entity.name.function.cs" } }, end: "(?<=\\})|(?=;)", patterns: [{ include: "#comment" }, { include: "#parenthesized-parameter-list" }, { include: "#expression-body" }, { include: "#block" }] }, directives: { patterns: [{ include: "#extern-alias-directive" }, { include: "#using-directive" }, { include: "#attribute-section" }, { include: "#punctuation-semicolon" }] }, "discard-pattern": { match: "_(?![_[:alnum:]])", name: "variable.language.discard.cs" }, "do-statement": { begin: "(?<!\\.)\\b(do)\\b", beginCaptures: { 1: { name: "keyword.control.loop.do.cs" } }, end: "(?=;|})", patterns: [{ include: "#statement" }] }, "double-raw-interpolation": { begin: "(?<=[^\\{][^\\{]|^)((?:\\{)*)(\\{\\{)(?=[^\\{])", beginCaptures: { 1: { name: "string.quoted.double.cs" }, 2: { name: "punctuation.definition.interpolation.begin.cs" } }, end: "\\}\\}", endCaptures: { 0: { name: "punctuation.definition.interpolation.end.cs" } }, name: "meta.interpolation.cs", patterns: [{ include: "#expression" }] }, "element-access-expression": { begin: `(?x)
(?:
(?:(\\?)\\s*)?
(\\.)\\s*|
(->)\\s*
)?
(?:(@?[_[:alpha:]][_[:alnum:]]*)\\s*)?
(?:(\\?)\\s*)?
(?=\\[)`, beginCaptures: { 1: { name: "keyword.operator.null-conditional.cs" }, 2: { name: "punctuation.accessor.cs" }, 3: { name: "punctuation.accessor.pointer.cs" }, 4: { name: "variable.other.object.property.cs" }, 5: { name: "keyword.operator.null-conditional.cs" } }, end: "(?<=\\])(?!\\s*\\[)", patterns: [{ include: "#bracketed-argument-list" }] }, "else-part": { begin: "(?<!\\.)\\b(else)\\b", beginCaptures: { 1: { name: "keyword.control.conditional.else.cs" } }, end: "(?<=})|(?=;)", patterns: [{ include: "#statement" }] }, "enum-declaration": { begin: "(?=\\benum\\b)", end: "(?<=\\})", patterns: [{ begin: "(?=enum)", end: "(?=\\{)", patterns: [{ include: "#comment" }, { captures: { 1: { name: "storage.type.enum.cs" }, 2: { name: "entity.name.type.enum.cs" } }, match: "(enum)\\s+(@?[_[:alpha:]][_[:alnum:]]*)" }, { begin: ":", beginCaptures: { 0: { name: "punctuation.separator.colon.cs" } }, end: "(?=\\{)", patterns: [{ include: "#type" }] }] }, { begin: "\\{", beginCaptures: { 0: { name: "punctuation.curlybrace.open.cs" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.curlybrace.close.cs" } }, patterns: [{ include: "#preprocessor" }, { include: "#comment" }, { include: "#attribute-section" }, { include: "#punctuation-comma" }, { begin: "@?[_[:alpha:]][_[:alnum:]]*", beginCaptures: { 0: { name: "entity.name.variable.enum-member.cs" } }, end: "(?=(,|\\}))", patterns: [{ include: "#comment" }, { include: "#variable-initializer" }] }] }, { include: "#preprocessor" }, { include: "#comment" }] }, "event-accessors": { begin: "\\{", beginCaptures: { 0: { name: "punctuation.curlybrace.open.cs" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.curlybrace.close.cs" } }, patterns: [{ include: "#comment" }, { include: "#attribute-section" }, { begin: "\\b(add|remove)\\b\\s*(?=\\{|;|=>|//|/\\*|$)", beginCaptures: { 1: { name: "storage.type.accessor.$1.cs" } }, end: "(?<=\\}|;)|(?=\\})", patterns: [{ include: "#accessor-setter" }] }] }, "event-declaration": { begin: `(?x)
\\b(event)\\b\\s*
(?<return_type>
(?<type_name>
(?:
(?:
(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)?
(?<name_and_type_args>
\\g<identifier>\\s*
(?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?
)
(?:\\s*\\.\\s*\\g<name_and_type_args>)* |
(?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))
)
(?:\\s*\\?\\s*)?
(?:\\s*
\\[
(?:\\s*,\\s*)*
\\]
\\s*
(?:\\?)?
\\s*
)*
)
)\\s+
)
(?<interface_name>\\g<type_name>\\s*\\.\\s*)?
(\\g<identifier>)\\s*
(?=\\{|;|,|=|//|/\\*|$)`, beginCaptures: { 1: { name: "storage.type.event.cs" }, 2: { patterns: [{ include: "#type" }] }, 8: { patterns: [{ include: "#type" }, { include: "#punctuation-accessor" }] }, 9: { name: "entity.name.variable.event.cs" } }, end: "(?<=\\})|(?=;)", patterns: [{ include: "#comment" }, { include: "#event-accessors" }, { match: "@?[_[:alpha:]][_[:alnum:]]*", name: "entity.name.variable.event.cs" }, { include: "#punctuation-comma" }, { begin: "=", beginCaptures: { 0: { name: "keyword.operator.assignment.cs" } }, end: "(?<=,)|(?=;)", patterns: [{ include: "#expression" }, { include: "#punctuation-comma" }] }] }, "explicit-anonymous-function-parameter": { captures: { 1: { name: "storage.modifier.$1.cs" }, 2: { patterns: [{ include: "#type" }] }, 7: { name: "entity.name.variable.parameter.cs" } }, match: `(?x)
(?:\\b(ref|params|out|in)\\b\\s*)?
(?<type_name>
(?:
(?:
(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)?
(?<name_and_type_args>
\\g<identifier>\\s*
(?<type_args><(?:[^<>]|\\g<type_args>)*>\\s*)?
)
(?:\\s*\\.\\s*\\g<name_and_type_args>)* |
(?<tuple>\\s*\\((?:[^()]|\\g<tuple>)*\\))
)
(?:\\s*\\?\\s*)?
(?:\\s*
\\[
(?:\\s*,\\s*)*
\\]
\\s*
(?:\\?)?
\\s*
)*
)
)\\s*
\\b(\\g<identifier>)\\b` }, expression: { patterns: [{ include: "#preprocessor" }, { include: "#comment" }, { include: "#expression-operator-expression" }, { include: "#type-operator-expression" }, { include: "#default-literal-expression" }, { include: "#throw-expression" }, { include: "#raw-interpolated-string" }, { include: "#interpolated-string" }, { include: "#verbatim-interpolated-string" }, { include: "#type-builtin" }, { include: "#language-variable" }, { include: "#switch-statement-or-expression" }, { include: "#with-expression" }, { include: "#conditional-operator" }, { include: "#assignment-expression" }, { include: "#expression-operators" }, { include: "#await-expression" }, { include: "#query-expression" }, { include: "#as-expression" }, { include: "#is-expression" }, { include: "#anonymous-method-expression" }, { include: "#object-creation-expression" }, { include: "#array-creation-expression" }, { include: "#anonymous-object-creation-expression" }, { include: "#invocation-expression" }, { include: "#member-access-expression" }, { include: "#element-access-expression" }, { include: "#cast-expression" }, { include: "#literal" }, { include: "#parenthesized-expression" }, { include: "#tuple-deconstruction-assignment" }, { include: "#initializer-expression" }, { include: "#identifier" }] }, "expression-body": { begin: "=>", beginCaptures: { 0: { name: "keyword.operator.arrow.cs" } }, end: "(?=[,\\);}])", patterns: [{ include: "#ref-modifier" }, { include: "#expression" }] }, "expression-operator-expression": { begin: "\\b(checked|unchecked|nameof)\\s*(\\()", beginCaptures: { 1: { name: "keyword.operator.expression.$1.cs" }, 2: { name: "punctuation.parenthesis.open.cs" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } }, patterns: [{ include: "#expression" }] }, "expression-operators": { patterns: [{ match: "<<|>>>?", name: "keyword.operator.bitwise.shift.cs" }, { match: "==|!=", name: "keyword.operator.comparison.cs" }, { match: "<=|>=|<|>", name: "keyword.operator.relational.cs" }, { match: "\\!|&&|\\|\\|", name: "keyword.operator.logical.cs" }, { match: "\\&|~|\\^|\\|", name: "keyword.operator.bitwise.cs" }, { match: "--", name: "keyword.operator.decrement.cs" }, { match: "\\+\\+", name: "keyword.operator.increment.cs" }, { match: "\\+|-(?!>)|\\*|/|%", name: "keyword.operator.arithmetic.cs" }, { match: "\\?\\?", name: "keyword.operator.null-coalescing.cs" }, { match: "\\.\\.", name: "keyword.operator.range.cs" }] }, "extern-alias-directive": { begin: "\\b(extern)\\s+(alias)\\b", beginCaptures: { 1: { name: "keyword.other.directive.extern.cs" }, 2: { name: "keyword.other.directive.alias.cs" } }, end: "(?=;)", patterns: [{ match: "\\@?[_[:alpha:]][_[:alnum:]]*", name: "variable.other.alias.cs" }] }, "field-declaration": { begin: `(?x)
(?<type_name>
(?:
(?:
(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)?
(?<name_and_type_args>
\\g<identifier>\\s*
(?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?
)
(?:\\s*\\.\\s*\\g<name_and_type_args>)* |
(?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))
)
(?:\\s*\\?\\s*)?
(?:\\s*
\\[
(?:\\s*,\\s*)*
\\]
\\s*
(?:\\?)?
\\s*
)*
)
)\\s+
(\\g<identifier>)\\s*
(?!=>|==)(?=,|;|=|$)`, beginCaptures: { 1: { patterns: [{ include: "#type" }] }, 6: { name: "entity.name.variable.field.cs" } }, end: "(?=;)", patterns: [{ match: "@?[_[:alpha:]][_[:alnum:]]*", name: "entity.name.variable.field.cs" }, { include: "#punctuation-comma" }, { include: "#comment" }, { include: "#variable-initializer" }, { include: "#class-or-struct-members" }] }, "finally-clause": { begin: "(?<!\\.)\\b(finally)\\b", beginCaptures: { 1: { name: "keyword.control.exception.finally.cs" } }, end: "(?<=\\})", patterns: [{ include: "#comment" }, { include: "#block" }] }, "fixed-statement": { begin: "\\b(fixed)\\b", beginCaptures: { 1: { name: "keyword.control.context.fixed.cs" } }, end: "(?<=\\))|(?=;|})", patterns: [{ include: "#intrusive" }, { begin: "\\(", beginCaptures: { 0: { name: "punctuation.parenthesis.open.cs" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } }, patterns: [{ include: "#intrusive" }, { include: "#local-variable-declaration" }] }] }, "for-statement": { begin: "\\b(for)\\b", beginCaptures: { 1: { name: "keyword.control.loop.for.cs" } }, end: "(?<=\\))|(?=;|})", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.parenthesis.open.cs" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } }, patterns: [{ begin: "(?=[^;\\)])", end: "(?=;|\\))", patterns: [{ include: "#intrusive" }, { include: "#local-variable-declaration" }] }, { begin: "(?=;)", end: "(?=\\))", patterns: [{ include: "#intrusive" }, { include: "#expression" }, { include: "#punctuation-comma" }, { include: "#punctuation-semicolon" }] }] }] }, "foreach-statement": { begin: "\\b(foreach)\\b", beginCaptures: { 1: { name: "keyword.control.loop.foreach.cs" } }, end: "(?<=\\))|(?=;|})", patterns: [{ include: "#intrusive" }, { begin: "\\(", beginCaptures: { 0: { name: "punctuation.parenthesis.open.cs" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } }, patterns: [{ include: "#intrusive" }, { captures: { 1: { name: "storage.modifier.ref.cs" }, 2: { name: "storage.type.var.cs" }, 3: { patterns: [{ include: "#type" }] }, 8: { name: "entity.name.variable.local.cs" }, 9: { name: "keyword.control.loop.in.cs" } }, match: `(?x)
(?:
(?:(\\bref)\\s+)?(\\bvar\\b)|
(?<type_name>
(?:
(?:ref\\s+)?
(?:
(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)?
(?<name_and_type_args>
\\g<identifier>\\s*
(?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?
)
(?:\\s*\\.\\s*\\g<name_and_type_args>)* |
(?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))
)
(?:\\s*\\?\\s*)?
(?:\\s*
\\[
(?:\\s*,\\s*)*
\\]
\\s*
(?:\\?)?
\\s*
)*
)
)
)\\s+
(\\g<identifier>)\\s+
\\b(in)\\b` }, { captures: { 1: { name: "storage.type.var.cs" }, 2: { patterns: [{ include: "#tuple-declaration-deconstruction-element-list" }] }, 3: { name: "keyword.control.loop.in.cs" } }, match: `(?x)
(?:\\b(var)\\b\\s*)?
(?<tuple>\\((?:[^\\(\\)]|\\g<tuple>)+\\))\\s+
\\b(in)\\b` }, { include: "#expression" }] }] }, "generic-constraints": { begin: "(where)\\s+(@?[_[:alpha:]][_[:alnum:]]*)\\s*(:)", beginCaptures: { 1: { name: "storage.modifier.where.cs" }, 2: { name: "entity.name.type.type-parameter.cs" }, 3: { name: "punctuation.separator.colon.cs" } }, end: "(?=\\{|where|;|=>)", patterns: [{ match: "\\bclass\\b", name: "storage.type.class.cs" }, { match: "\\bstruct\\b", name: "storage.type.struct.cs" }, { match: "\\bdefault\\b", name: "keyword.other.constraint.default.cs" }, { match: "\\bnotnull\\b", name: "keyword.other.constraint.notnull.cs" }, { match: "\\bunmanaged\\b", name: "keyword.other.constraint.unmanaged.cs" }, { captures: { 1: { name: "keyword.operator.expression.new.cs" }, 2: { name: "punctuation.parenthesis.open.cs" }, 3: { name: "punctuation.parenthesis.close.cs" } }, match: "(new)\\s*(\\()\\s*(\\))" }, { include: "#type" }, { include: "#punctuation-comma" }, { include: "#generic-constraints" }] }, "goto-statement": { begin: "(?<!\\.)\\b(goto)\\b", beginCaptures: { 1: { name: "keyword.control.flow.goto.cs" } }, end: "(?=[;}])", patterns: [{ begin: "\\b(case)\\b", beginCaptures: { 1: { name: "keyword.control.conditional.case.cs" } }, end: "(?=[;}])", patterns: [{ include: "#expression" }] }, { captures: { 1: { name: "keyword.control.conditional.default.cs" } }, match: "\\b(default)\\b" }, { match: "@?[_[:alpha:]][_[:alnum:]]*", name: "entity.name.label.cs" }] }, "group-by": { captures: { 1: { name: "keyword.operator.expression.query.by.cs" } }, match: "\\b(by)\\b\\s*" }, "group-clause": { begin: "\\b(group)\\b\\s*", beginCaptures: { 1: { name: "keyword.operator.expression.query.group.cs" } }, end: "(?=;|\\))", patterns: [{ include: "#group-by" }, { include: "#group-into" }, { include: "#query-body" }, { include: "#expression" }] }, "group-into": { captures: { 1: { name: "keyword.operator.expression.query.into.cs" }, 2: { name: "entity.name.variable.range-variable.cs" } }, match: `(?x)
\\b(into)\\b\\s*
(@?[_[:alpha:]][_[:alnum:]]*)\\b\\s*` }, identifier: { match: "@?[_[:alpha:]][_[:alnum:]]*", name: "variable.other.readwrite.cs" }, "if-statement": { begin: "(?<!\\.)\\b(if)\\b\\s*(?=\\()", beginCaptures: { 1: { name: "keyword.control.conditional.if.cs" } }, end: "(?<=})|(?=;)", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.parenthesis.open.cs" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } }, patterns: [{ include: "#expression" }] }, { include: "#statement" }] }, "implicit-anonymous-function-parameter": { match: "\\@?[_[:alpha:]][_[:alnum:]]*\\b", name: "entity.name.variable.parameter.cs" }, "indexer-declaration": { begin: `(?x)
(?<return_type>
(?<type_name>
(?:
(?:ref\\s+(?:readonly\\s+)?)?
(?:
(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)?
(?<name_and_type_args>
\\g<identifier>\\s*
(?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?
)
(?:\\s*\\.\\s*\\g<name_and_type_args>)* |
(?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))
)
(?:\\s*\\?\\s*)?
(?:\\s*
\\[
(?:\\s*,\\s*)*
\\]
\\s*
(?:\\?)?
\\s*
)*
)
)\\s+
)
(?<interface_name>\\g<type_name>\\s*\\.\\s*)?
(?<indexer_name>this)\\s*
(?=\\[)`, beginCaptures: { 1: { patterns: [{ include: "#type" }] }, 7: { patterns: [{ include: "#type" }, { include: "#punctuation-accessor" }] }, 8: { name: "variable.language.this.cs" } }, end: "(?<=\\})|(?=;)", patterns: [{ include: "#comment" }, { include: "#bracketed-parameter-list" }, { include: "#property-accessors" }, { include: "#accessor-getter-expression" }, { include: "#variable-initializer" }] }, "initializer-expression": { begin: "\\{", beginCaptures: { 0: { name: "punctuation.curlybrace.open.cs" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.curlybrace.close.cs" } }, patterns: [{ include: "#expression" }, { include: "#punctuation-comma" }] }, "interface-declaration": { begin: "(?=\\binterface\\b)", end: "(?<=\\})", patterns: [{ begin: `(?x)
(interface)\\b\\s+
(@?[_[:alpha:]][_[:alnum:]]*)`, beginCaptures: { 1: { name: "storage.type.interface.cs" }, 2: { name: "entity.name.type.interface.cs" } }, end: "(?=\\{)", patterns: [{ include: "#comment" }, { include: "#type-parameter-list" }, { include: "#base-types" }, { include: "#generic-constraints" }] }, { begin: "\\{", beginCaptures: { 0: { name: "punctuation.curlybrace.open.cs" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.curlybrace.close.cs" } }, patterns: [{ include: "#interface-members" }] }, { include: "#preprocessor" }, { include: "#comment" }] }, "interface-members": { patterns: [{ include: "#preprocessor" }, { include: "#comment" }, { include: "#storage-modifier" }, { include: "#property-declaration" }, { include: "#event-declaration" }, { include: "#indexer-declaration" }, { include: "#method-declaration" }, { include: "#operator-declaration" }, { include: "#attribute-section" }, { include: "#punctuation-semicolon" }] }, "interpolated-string": { begin: '\\$"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.cs" } }, end: '(")|((?:[^\\\\\\n])$)', endCaptures: { 1: { name: "punctuation.definition.string.end.cs" }, 2: { name: "invalid.illegal.newline.cs" } }, name: "string.quoted.double.cs", patterns: [{ include: "#string-character-escape" }, { include: "#interpolation" }] }, interpolation: { begin: "(?<=[^\\{]|^)((?:\\{\\{)*)(\\{)(?=[^\\{])", beginCaptures: { 1: { name: "string.quoted.double.cs" }, 2: { name: "punctuation.definition.interpolation.begin.cs" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.interpolation.end.cs" } }, name: "meta.interpolation.cs", patterns: [{ include: "#expression" }] }, intrusive: { patterns: [{ include: "#preprocessor" }, { include: "#comment" }] }, "invocation-expression": { begin: `(?x)
(?:
(?:(\\?)\\s*)?
(\\.)\\s*|
(->)\\s*
)?
(@?[_[:alpha:]][_[:alnum:]]*)\\s*
(
<
(?<type_args>
[^<>()]++|
<\\g<type_args>*+>|
\\(\\g<type_args>*+\\)
)*+
>\\s*
)?
(?=\\()`, beginCaptures: { 1: { name: "keyword.operator.null-conditional.cs" }, 2: { name: "punctuation.accessor.cs" }, 3: { name: "punctuation.accessor.pointer.cs" }, 4: { name: "entity.name.function.cs" }, 5: { patterns: [{ include: "#type-arguments" }] } }, end: "(?<=\\))", patterns: [{ include: "#argument-list" }] }, "is-expression": { begin: "(?<!\\.)\\b(is)\\b", beginCaptures: { 1: { name: "keyword.operator.expression.pattern.is.cs" } }, end: "(?=[)}\\],;:?=&|^]|!=)", patterns: [{ include: "#pattern" }] }, "join-clause": { begin: `(?x)
\\b(join)\\b\\s*
(?<type_name>
(?:
(?:
(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)?
(?<name_and_type_args>
\\g<identifier>\\s*
(?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?
)
(?:\\s*\\.\\s*\\g<name_and_type_args>)* |
(?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))
)
(?:\\s*\\?\\s*)?
(?:\\s*
\\[
(?:\\s*,\\s*)*
\\]
\\s*
(?:\\?)?
\\s*
)*
)
)?
\\s+(\\g<identifier>)\\b\\s*
\\b(in)\\b\\s*`, beginCaptures: { 1: { name: "keyword.operator.expression.query.join.cs" }, 2: { patterns: [{ include: "#type" }] }, 7: { name: "entity.name.variable.range-variable.cs" }, 8: { name: "keyword.operator.expression.query.in.cs" } }, end: "(?=;|\\))", patterns: [{ include: "#join-on" }, { include: "#join-equals" }, { include: "#join-into" }, { include: "#query-body" }, { include: "#expression" }] }, "join-equals": { captures: { 1: { name: "keyword.operator.expression.query.equals.cs" } }, match: "\\b(equals)\\b\\s*" }, "join-into": { captures: { 1: { name: "keyword.operator.expression.query.into.cs" }, 2: { name: "entity.name.variable.range-variable.cs" } }, match: `(?x)
\\b(into)\\b\\s*
(@?[_[:alpha:]][_[:alnum:]]*)\\b\\s*` }, "join-on": { captures: { 1: { name: "keyword.operator.expression.query.on.cs" } }, match: "\\b(on)\\b\\s*" }, "labeled-statement": { captures: { 1: { name: "entity.name.label.cs" }, 2: { name: "punctuation.separator.colon.cs" } }, match: "(@?[_[:alpha:]][_[:alnum:]]*)\\s*(:)" }, "language-variable": { patterns: [{ match: "\\b(base|this)\\b", name: "variable.language.$1.cs" }, { match: "\\b(value)\\b", name: "variable.other.$1.cs" }] }, "let-clause": { begin: `(?x)
\\b(let)\\b\\s*
(@?[_[:alpha:]][_[:alnum:]]*)\\b\\s*
(=)\\s*`, beginCaptures: { 1: { name: "keyword.operator.expression.query.let.cs" }, 2: { name: "entity.name.variable.range-variable.cs" }, 3: { name: "keyword.operator.assignment.cs" } }, end: "(?=;|\\))", patterns: [{ include: "#query-body" }, { include: "#expression" }] }, "list-pattern": { begin: "(?=\\[)", end: "(?=[)}\\],;:?=&|^]|!=|\\b(and|or|when)\\b)", patterns: [{ begin: "\\[", beginCaptures: { 0: { name: "punctuation.squarebracket.open.cs" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.squarebracket.close.cs" } }, patterns: [{ include: "#pattern" }, { include: "#punctuation-comma" }] }, { begin: "(?<=\\])", end: "(?=[)}\\],;:?=&|^]|!=|\\b(and|or|when)\\b)", patterns: [{ include: "#intrusive" }, { include: "#simple-designation-pattern" }] }] }, literal: { patterns: [{ include: "#boolean-literal" }, { include: "#null-literal" }, { include: "#numeric-literal" }, { include: "#char-literal" }, { include: "#raw-string-literal" }, { include: "#string-literal" }, { include: "#verbatim-string-literal" }, { include: "#tuple-literal" }] }, "local-constant-declaration": { begin: `(?x)
(?<const_keyword>\\b(?:const)\\b)\\s*
(?<type_name>
(?:
(?:
(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)?
(?<name_and_type_args>
\\g<identifier>\\s*
(?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?
)
(?:\\s*\\.\\s*\\g<name_and_type_args>)* |
(?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))
)
(?:\\s*\\?\\s*)?
(?:\\s*
\\[
(?:\\s*,\\s*)*
\\]
\\s*
(?:\\?)?
\\s*
)*
)
)\\s+
(\\g<identifier>)\\s*
(?=,|;|=)`, beginCaptures: { 1: { name: "storage.modifier.const.cs" }, 2: { patterns: [{ include: "#type" }] }, 7: { name: "entity.name.variable.local.cs" } }, end: "(?=;)", patterns: [{ match: "@?[_[:alpha:]][_[:alnum:]]*", name: "entity.name.variable.local.cs" }, { include: "#punctuation-comma" }, { include: "#comment" }, { include: "#variable-initializer" }] }, "local-declaration": { patterns: [{ include: "#local-constant-declaration" }, { include: "#local-variable-declaration" }, { include: "#local-function-declaration" }, { include: "#local-tuple-var-deconstruction" }] }, "local-function-declaration": { begin: `(?x)
\\b((?:(?:async|unsafe|static|extern)\\s+)*)
(?<type_name>
(?:ref\\s+(?:readonly\\s+)?)?
(?:
(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)?
(?<name_and_type_args>
\\g<identifier>\\s*
(?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?
)
(?:\\s*\\.\\s*\\g<name_and_type_args>)* |
(?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))
)
(?:\\s*\\?)?
(?:\\s*
\\[
\\s*(?:,\\s*)*
\\]
(?:\\s*\\?)?
)*
)\\s+
(\\g<identifier>)\\s*
(<[^<>]+>)?\\s*
(?=\\()`, beginCaptures: { 1: { patterns: [{ include: "#storage-modifier" }] }, 2: { patterns: [{ include: "#type" }] }, 7: { name: "entity.name.function.cs" }, 8: { patterns: [{ include: "#type-parameter-list" }] } }, end: "(?<=\\})|(?=;)", patterns: [{ include: "#comment" }, { include: "#parenthesized-parameter-list" }, { include: "#generic-constraints" }, { include: "#expression-body" }, { include: "#block" }] }, "local-tuple-var-deconstruction": { begin: `(?x)
(?:\\b(var)\\b\\s*)
(?<tuple>\\((?:[^\\(\\)]|\\g<tuple>)+\\))\\s*
(?=;|=|\\))`, beginCaptures: { 1: { name: "storage.type.var.cs" }, 2: { patterns: [{ include: "#tuple-declaration-deconstruction-element-list" }] } }, end: "(?=;|\\))", patterns: [{ include: "#comment" }, { include: "#variable-initializer" }] }, "local-variable-declaration": { begin: `(?x)
(?:
(?:(\\bref)\\s+(?:(\\breadonly)\\s+)?)?(\\bvar\\b)|
(?<type_name>
(?:
(?:ref\\s+(?:readonly\\s+)?)?
(?:
(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)?
(?<name_and_type_args>
\\g<identifier>\\s*
(?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?
)
(?:\\s*\\.\\s*\\g<name_and_type_args>)* |
(?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))
)
(?:\\s*[?*]\\s*)?
(?:\\s*
\\[
(?:\\s*,\\s*)*
\\]
\\s*
(?:\\?)?
\\s*
)*
)
)
)\\s+
(\\g<identifier>)\\s*
(?!=>)
(?=,|;|=|\\))`, beginCaptures: { 1: { name: "storage.modifier.ref.cs" }, 2: { name: "storage.modifier.readonly.cs" }, 3: { name: "storage.type.var.cs" }, 4: { patterns: [{ include: "#type" }] }, 9: { name: "entity.name.variable.local.cs" } }, end: "(?=[;)}])", patterns: [{ match: "@?[_[:alpha:]][_[:alnum:]]*", name: "entity.name.variable.local.cs" }, { include: "#punctuation-comma" }, { include: "#comment" }, { include: "#variable-initializer" }] }, "lock-statement": { begin: "\\b(lock)\\b", beginCaptures: { 1: { name: "keyword.control.context.lock.cs" } }, end: "(?<=\\))|(?=;|})", patterns: [{ include: "#intrusive" }, { begin: "\\(", beginCaptures: { 0: { name: "punctuation.parenthesis.open.cs" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } }, patterns: [{ include: "#intrusive" }, { include: "#expression" }] }] }, "member-access-expression": { patterns: [{ captures: { 1: { name: "keyword.operator.null-conditional.cs" }, 2: { name: "punctuation.accessor.cs" }, 3: { name: "punctuation.accessor.pointer.cs" }, 4: { name: "variable.other.object.property.cs" } }, match: `(?x)
(?:
(?:(\\?)\\s*)?
(\\.)\\s*|
(->)\\s*
)
(@?[_[:alpha:]][_[:alnum:]]*)\\s*
(?![_[:alnum:]]|\\(|(\\?)?\\[|<)` }, { captures: { 1: { name: "punctuation.accessor.cs" }, 2: { name: "variable.other.object.cs" }, 3: { patterns: [{ include: "#type-arguments" }] } }, match: `(?x)
(\\.)?\\s*
(@?[_[:alpha:]][_[:alnum:]]*)
(?<type_params>\\s*<([^<>]|\\g<type_params>)+>\\s*)
(?=
(\\s*\\?)?
\\s*\\.\\s*@?[_[:alpha:]][_[:alnum:]]*
)` }, { captures: { 1: { name: "variable.other.object.cs" } }, match: `(?x)
(@?[_[:alpha:]][_[:alnum:]]*)
(?=
\\s*(?:(?:\\?\\s*)?\\.|->)
\\s*@?[_[:alpha:]][_[:alnum:]]*
)` }] }, "method-declaration": { begin: `(?x)
(?<return_type>
(?<type_name>
(?:
(?:ref\\s+(?:readonly\\s+)?)?
(?:
(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)?
(?<name_and_type_args>
\\g<identifier>\\s*
(?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?
)
(?:\\s*\\.\\s*\\g<name_and_type_args>)* |
(?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))
)
(?:\\s*\\?\\s*)?
(?:\\s*
\\[
(?:\\s*,\\s*)*
\\]
\\s*
(?:\\?)?
\\s*
)*
)
)\\s+
)
(?<interface_name>\\g<type_name>\\s*\\.\\s*)?
(\\g<identifier>)\\s*
(<([^<>]+)>)?\\s*
(?=\\()`, beginCaptures: { 1: { patterns: [{ include: "#type" }] }, 7: { patterns: [{ include: "#type" }, { include: "#punctuation-accessor" }] }, 8: { name: "entity.name.function.cs" }, 9: { patterns: [{ include: "#type-parameter-list" }] } }, end: "(?<=\\})|(?=;)", patterns: [{ include: "#comment" }, { include: "#parenthesized-parameter-list" }, { include: "#generic-constraints" }, { include: "#expression-body" }, { include: "#block" }] }, "named-argument": { begin: "(@?[_[:alpha:]][_[:alnum:]]*)\\s*(:)", beginCaptures: { 1: { name: "entity.name.variable.parameter.cs" }, 2: { name: "punctuation.separator.colon.cs" } }, end: "(?=(,|\\)|\\]))", patterns: [{ include: "#argument" }] }, "namespace-declaration": { begin: "\\b(namespace)\\s+", beginCaptures: { 1: { name: "storage.type.namespace.cs" } }, end: "(?<=\\})|(?=;)", patterns: [{ include: "#comment" }, { match: "@?[_[:alpha:]][_[:alnum:]]*", name: "entity.name.type.namespace.cs" }, { include: "#punctuation-accessor" }, { begin: "\\{", beginCaptures: { 0: { name: "punctuation.curlybrace.open.cs" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.curlybrace.close.cs" } }, patterns: [{ include: "#declarations" }, { include: "#using-directive" }, { include: "#punctuation-semicolon" }] }] }, "null-literal": { match: "(?<!\\.)\\bnull\\b", name: "constant.language.null.cs" }, "numeric-literal": { captures: { 0: { patterns: [{ begin: "(?=.)", end: "$", patterns: [{ captures: { 2: { name: "constant.numeric.decimal.cs", patterns: [{ match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])", name: "constant.numeric.other.separator.thousands.cs" }] }, 3: { name: "constant.numeric.other.separator.thousands.cs" }, 4: { name: "constant.numeric.other.separator.decimals.cs" }, 5: { name: "constant.numeric.decimal.cs", patterns: [{ match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])", name: "constant.numeric.other.separator.thousands.cs" }] }, 6: { name: "constant.numeric.other.separator.thousands.cs" }, 8: { name: "constant.numeric.other.exponent.cs" }, 9: { name: "keyword.operator.arithmetic.cs" }, 10: { name: "keyword.operator.arithmetic.cs" }, 11: { name: "constant.numeric.decimal.cs", patterns: [{ match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])", name: "constant.numeric.other.separator.thousands.cs" }] }, 12: { name: "constant.numeric.other.suffix.cs" } }, match: "(\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)?((?:(?<=[0-9])|\\.(?=[0-9])))([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)?((?<!_)([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)))?([fFdDmM](?!\\w))?$" }, { captures: { 1: { name: "constant.numeric.other.preffix.binary.cs" }, 2: { name: "constant.numeric.binary.cs", patterns: [{ match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])", name: "constant.numeric.other.separator.thousands.cs" }] }, 3: { name: "constant.numeric.other.separator.thousands.cs" }, 4: { name: "constant.numeric.other.suffix.cs" } }, match: "(\\G0[bB])([01_](?:[01_]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)((?:(?:(?:(?:(?:[uU]|[uU]l)|[uU]L)|l[uU]?)|L[uU]?)|[fFdDmM])(?!\\w))?$" }, { captures: { 1: { name: "constant.numeric.other.preffix.hex.cs" }, 2: { name: "constant.numeric.hex.cs", patterns: [{ match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])", name: "constant.numeric.other.separator.thousands.cs" }] }, 3: { name: "constant.numeric.other.separator.thousands.cs" }, 4: { name: "constant.numeric.other.suffix.cs" } }, match: "(\\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)((?:(?:(?:(?:(?:[uU]|[uU]l)|[uU]L)|l[uU]?)|L[uU]?)|[fFdDmM])(?!\\w))?$" }, { captures: { 2: { name: "constant.numeric.decimal.cs", patterns: [{ match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])", name: "constant.numeric.other.separator.thousands.cs" }] }, 3: { name: "constant.numeric.other.separator.thousands.cs" }, 5: { name: "constant.numeric.other.exponent.cs" }, 6: { name: "keyword.operator.arithmetic.cs" }, 7: { name: "keyword.operator.arithmetic.cs" }, 8: { name: "constant.numeric.decimal.cs", patterns: [{ match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])", name: "constant.numeric.other.separator.thousands.cs" }] }, 9: { name: "constant.numeric.other.suffix.cs" } }, match: "(\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)((?<!_)([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)))?((?:(?:(?:(?:(?:[uU]|[uU]l)|[uU]L)|l[uU]?)|L[uU]?)|[fFdDmM])(?!\\w))?$" }, { match: "(?:(?:[0-9a-zA-Z_]|_)|(?<=[eE])[+-]|\\.\\d)+", name: "invalid.illegal.constant.numeric.cs" }] }] } }, match: "(?<!\\w)\\.?\\d(?:(?:[0-9a-zA-Z_]|_)|(?<=[eE])[+-]|\\.\\d)*" }, "object-creation-expression": { patterns: [{ include: "#object-creation-expression-with-parameters" }, { include: "#object-creation-expression-with-no-parameters" }] }, "object-creation-expression-with-no-parameters": { captures: { 1: { name: "keyword.operator.expression.new.cs" }, 2: { patterns: [{ include: "#type" }] } }, match: `(?x)
(new)\\s+
(?<type_name>
(?:
(?:
(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)?
(?<name_and_type_args>
\\g<identifier>\\s*
(?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?
)
(?:\\s*\\.\\s*\\g<name_and_type_args>)* |
(?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))
)
(?:\\s*\\?\\s*)?
(?:\\s*
\\[
(?:\\s*,\\s*)*
\\]
\\s*
(?:\\?)?
\\s*
)*
)
)\\s*
(?=\\{|//|/\\*|$)` }, "object-creation-expression-with-parameters": { begin: `(?x)
(new)(?:\\s+
(?<type_name>
(?:
(?:
(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)?
(?<name_and_type_args>
\\g<identifier>\\s*
(?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?
)
(?:\\s*\\.\\s*\\g<name_and_type_args>)* |
(?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))
)
(?:\\s*\\?\\s*)?
(?:\\s*
\\[
(?:\\s*,\\s*)*
\\]
\\s*
(?:\\?)?
\\s*
)*
)
))?\\s*
(?=\\()`, beginCaptures: { 1: { name: "keyword.operator.expression.new.cs" }, 2: { patterns: [{ include: "#type" }] } }, end: "(?<=\\))", patterns: [{ include: "#argument-list" }] }, "operator-assignment": { match: "(?<!=|!)(=)(?!=)", name: "keyword.operator.assignment.cs" }, "operator-declaration": { begin: `(?x)
(?<type_name>
(?:
(?:ref\\s+(?:readonly\\s+)?)?
(?:
(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)?
(?<name_and_type_args>
\\g<identifier>\\s*
(?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?
)
(?:\\s*\\.\\s*\\g<name_and_type_args>)* |
(?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))
)
(?:\\s*\\?\\s*)?
(?:\\s*
\\[
(?:\\s*,\\s*)*
\\]
\\s*
(?:\\?)?
\\s*
)*
)
)\\s*
\\b(?<operator_keyword>operator)\\b\\s*
(?<operator>[+\\-*/%&|\\^!=~<>]+|true|false)\\s*
(?=\\()`, beginCaptures: { 1: { patterns: [{ include: "#type" }] }, 6: { name: "storage.type.operator.cs" }, 7: { name: "entity.name.function.cs" } }, end: "(?<=\\})|(?=;)", patterns: [{ include: "#comment" }, { include: "#parenthesized-parameter-list" }, { include: "#expression-body" }, { include: "#block" }] }, "orderby-clause": { begin: "\\b(orderby)\\b\\s*", beginCaptures: { 1: { name: "keyword.operator.expression.query.orderby.cs" } }, end: "(?=;|\\))", patterns: [{ include: "#ordering-direction" }, { include: "#query-body" }, { include: "#expression" }, { include: "#punctuation-comma" }] }, "ordering-direction": { captures: { 1: { name: "keyword.operator.expression.query.$1.cs" } }, match: "\\b(ascending|descending)\\b" }, parameter: { captures: { 1: { name: "storage.modifier.$1.cs" }, 2: { patterns: [{ include: "#type" }] }, 7: { name: "entity.name.variable.parameter.cs" } }, match: `(?x)
(?:(?:\\b(ref|params|out|in|this)\\b)\\s+)?
(?<type_name>
(?:
(?:ref\\s+)?
(?:
(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)?
(?<name_and_type_args>
\\g<identifier>\\s*
(?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?
)
(?:\\s*\\.\\s*\\g<name_and_type_args>)* |
(?<tuple>\\s*\\((?:[^()]|\\g<tuple>)+\\))
)
(?:\\s*\\?\\s*)?
(?:\\s*
\\[
(?:\\s*,\\s*)*
\\]
\\s*
(?:\\?)?
\\s*
)*
)
)\\s+
(\\g<identifier>)` }, "parenthesized-expression": { begin: "\\(", beginCaptures: { 0: { name: "punctuation.parenthesis.open.cs" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } }, patterns: [{ include: "#expression" }] }, "parenthesized-parameter-list": { begin: "(\\()", beginCaptures: { 0: { name: "punctuation.parenthesis.open.cs" } }, end: "(\\))", endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } }, patterns: [{ include: "#comment" }, { include: "#attribute-section" }, { include: "#parameter" }, { include: "#punctuation-comma" }, { include: "#variable-initializer" }] }, pattern: { patterns: [{ include: "#intrusive" }, { include: "#combinator-pattern" }, { include: "#discard-pattern" }, { include: "#constant-pattern" }, { include: "#relational-pattern" }, { include: "#var-pattern" }, { include: "#type-pattern" }, { include: "#positional-pattern" }, { include: "#property-pattern" }, { include: "#list-pattern" }, { include: "#slice-pattern" }] }, "positional-pattern": { begin: "(?=\\()", end: "(?=[)}\\],;:?=&|^]|!=|\\b(and|or|when)\\b)", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.parenthesis.open.cs" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } }, patterns: [{ include: "#subpattern" }, { include: "#punctuation-comma" }] }, { begin: "(?<=\\))", end: "(?=[)}\\],;:?=&|^]|!=|\\b(and|or|when)\\b)", patterns: [{ include: "#intrusive" }, { include: "#property-pattern" }, { include: "#simple-designation-pattern" }] }] }, preprocessor: { begin: "^\\s*(\\#)\\s*", beginCaptures: { 1: { name: "punctuation.separator.hash.cs" } }, end: "(?<=$)", name: "meta.preprocessor.cs", patterns: [{ include: "#comment" }, { include: "#preprocessor-define-or-undef" }, { include: "#preprocessor-if-or-elif" }, { include: "#preprocessor-else-or-endif" }, { include: "#preprocessor-warning-or-error" }, { include: "#preprocessor-region" }, { include: "#preprocessor-endregion" }, { include: "#preprocessor-load" }, { include: "#preprocessor-r" }, { include: "#preprocessor-line" }, { include: "#preprocessor-pragma-warning" }, { include: "#preprocessor-pragma-checksum" }] }, "preprocessor-define-or-undef": { captures: { 1: { name: "keyword.preprocessor.define.cs" }, 2: { name: "keyword.preprocessor.undef.cs" }, 3: { name: "entity.name.variable.preprocessor.symbol.cs" } }, match: "\\b(?:(define)|(undef))\\b\\s*\\b([_[:alpha:]][_[:alnum:]]*)\\b" }, "preprocessor-else-or-endif": { captures: { 1: { name: "keyword.preprocessor.else.cs" }, 2: { name: "keyword.preprocessor.endif.cs" } }, match: "\\b(?:(else)|(endif))\\b" }, "preprocessor-endregion": { captures: { 1: { name: "keyword.preprocessor.endregion.cs" } }, match: "\\b(endregion)\\b" }, "preprocessor-expression": { patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.parenthesis.open.cs" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } }, patterns: [{ include: "#preprocessor-expression" }] }, { captures: { 1: { name: "constant.language.boolean.true.cs" }, 2: { name: "constant.language.boolean.false.cs" }, 3: { name: "entity.name.variable.preprocessor.symbol.cs" } }, match: "\\b(?:(true)|(false)|([_[:alpha:]][_[:alnum:]]*))\\b" }, { captures: { 1: { name: "keyword.operator.comparison.cs" }, 2: { name: "keyword.operator.logical.cs" } }, match: "(==|!=)|(\\!|&&|\\|\\|)" }] }, "preprocessor-if-or-elif": { begin: "\\b(?:(if)|(elif))\\b", beginCaptures: { 1: { name: "keyword.preprocessor.if.cs" }, 2: { name: "keyword.preprocessor.elif.cs" } }, end: "(?=$)", patterns: [{ include: "#comment" }, { include: "#preprocessor-expression" }] }, "preprocessor-line": { begin: "\\b(line)\\b", beginCaptures: { 1: { name: "keyword.preprocessor.line.cs" } }, end: "(?=$)", patterns: [{ captures: { 1: { name: "keyword.preprocessor.default.cs" }, 2: { name: "keyword.preprocessor.hidden.cs" } }, match: "\\b(?:(default|hidden))" }, { captures: { 0: { name: "constant.numeric.decimal.cs" } }, match: "[0-9]+" }, { captures: { 0: { name: "string.quoted.double.cs" } }, match: '\\"[^"]*\\"' }] }, "preprocessor-load": { begin: "\\b(load)\\b", beginCaptures: { 1: { name: "keyword.preprocessor.load.cs" } }, end: "(?=$)", patterns: [{ captures: { 0: { name: "string.quoted.double.cs" } }, match: '\\"[^"]*\\"' }] }, "preprocessor-pragma-checksum": { captures: { 1: { name: "keyword.preprocessor.pragma.cs" }, 2: { name: "keyword.preprocessor.checksum.cs" }, 3: { name: "string.quoted.double.cs" }, 4: { name: "string.quoted.double.cs" }, 5: { name: "string.quoted.double.cs" } }, match: '\\b(pragma)\\b\\s*\\b(checksum)\\b\\s*(\\"[^"]*\\")\\s*(\\"[^"]*\\")\\s*(\\"[^"]*\\")' }, "preprocessor-pragma-warning": { captures: { 1: { name: "keyword.preprocessor.pragma.cs" }, 2: { name: "keyword.preprocessor.warning.cs" }, 3: { name: "keyword.preprocessor.disable.cs" }, 4: { name: "keyword.preprocessor.restore.cs" }, 5: { patterns: [{ captures: { 0: { name: "constant.numeric.decimal.cs" } }, match: "[0-9]+" }, { include: "#punctuation-comma" }] } }, match: "\\b(pragma)\\b\\s*\\b(warning)\\b\\s*\\b(?:(disable)|(restore))\\b(\\s*[0-9]+(?:\\s*,\\s*[0-9]+)?)?" }, "preprocessor-r": { begin: "\\b(r)\\b", beginCaptures: { 1: { name: "keyword.preprocessor.r.cs" } }, end: "(?=$)", patterns: [{ captures: { 0: { name: "string.quoted.double.cs" } }, match: '\\"[^"]*\\"' }] }, "preprocessor-region": { captures: { 1: { name: "keyword.preprocessor.region.cs" }, 2: { name: "string.unquoted.preprocessor.message.cs" } }, match: "\\b(region)\\b\\s*(.*)(?=$)" }, "preprocessor-warning-or-error": { captures: { 1: { name: "keyword.preprocessor.warning.cs" }, 2: { name: "keyword.preprocessor.error.cs" }, 3: { name: "string.unquoted.preprocessor.message.cs" } }, match: "\\b(?:(warning)|(error))\\b\\s*(.*)(?=$)" }, "property-accessors": { begin: "\\{", beginCaptures: { 0: { name: "punctuation.curlybrace.open.cs" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.curlybrace.close.cs" } }, patterns: [{ include: "#comment" }, { include: "#attribute-section" }, { match: "\\b(private|protected|internal)\\b", name: "storage.modifier.$1.cs" }, { begin: "\\b(get)\\b\\s*(?=\\{|;|=>|//|/\\*|$)", beginCaptures: { 1: { name: "storage.type.accessor.$1.cs" } }, end: "(?<=\\}|;)|(?=\\})", patterns: [{ include: "#accessor-getter" }] }, { begin: "\\b(set|init)\\b\\s*(?=\\{|;|=>|//|/\\*|$)", beginCaptures: { 1: { name: "storage.type.accessor.$1.cs" } }, end: "(?<=\\}|;)|(?=\\})", patterns: [{ include: "#accessor-setter" }] }] }, "property-declaration": { begin: `(?x)

# The negative lookahead below ensures that we don't match nested types
# or other declarations as properties.
(?![[:word:][:space:]]*\\b(?:class|interface|struct|enum|event)\\b)

(?<return_type>
(?<type_name>
(?:
(?:ref\\s+(?:readonly\\s+)?)?
(?:
(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)?
(?<name_and_type_args>
\\g<identifier>\\s*
(?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?
)
(?:\\s*\\.\\s*\\g<name_and_type_args>)* |
(?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))
)
(?:\\s*\\?\\s*)?
(?:\\s*
\\[
(?:\\s*,\\s*)*
\\]
\\s*
(?:\\?)?
\\s*
)*
)
)\\s+
)
(?<interface_name>\\g<type_name>\\s*\\.\\s*)?
(?<property_name>\\g<identifier>)\\s*
(?=\\{|=>|//|/\\*|$)`, beginCaptures: { 1: { patterns: [{ include: "#type" }] }, 7: { patterns: [{ include: "#type" }, { include: "#punctuation-accessor" }] }, 8: { name: "entity.name.variable.property.cs" } }, end: "(?<=\\})|(?=;)", patterns: [{ include: "#comment" }, { include: "#property-accessors" }, { include: "#accessor-getter-expression" }, { include: "#variable-initializer" }, { include: "#class-or-struct-members" }] }, "property-pattern": { begin: "(?={)", end: "(?=[)}\\],;:?=&|^]|!=|\\b(and|or|when)\\b)", patterns: [{ begin: "\\{", beginCaptures: { 0: { name: "punctuation.curlybrace.open.cs" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.curlybrace.close.cs" } }, patterns: [{ include: "#subpattern" }, { include: "#punctuation-comma" }] }, { begin: "(?<=\\})", end: "(?=[)}\\],;:?=&|^]|!=|\\b(and|or|when)\\b)", patterns: [{ include: "#intrusive" }, { include: "#simple-designation-pattern" }] }] }, "punctuation-accessor": { match: "\\.", name: "punctuation.accessor.cs" }, "punctuation-comma": { match: ",", name: "punctuation.separator.comma.cs" }, "punctuation-semicolon": { match: ";", name: "punctuation.terminator.statement.cs" }, "query-body": { patterns: [{ include: "#let-clause" }, { include: "#where-clause" }, { include: "#join-clause" }, { include: "#orderby-clause" }, { include: "#select-clause" }, { include: "#group-clause" }] }, "query-expression": { begin: `(?x)
\\b(from)\\b\\s*
(?<type_name>
(?:
(?:
(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)?
(?<name_and_type_args>
\\g<identifier>\\s*
(?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?
)
(?:\\s*\\.\\s*\\g<name_and_type_args>)* |
(?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))
)
(?:\\s*\\?\\s*)?
(?:\\s*
\\[
(?:\\s*,\\s*)*
\\]
\\s*
(?:\\?)?
\\s*
)*
)
)?
\\s+(\\g<identifier>)\\b\\s*
\\b(in)\\b\\s*`, beginCaptures: { 1: { name: "keyword.operator.expression.query.from.cs" }, 2: { patterns: [{ include: "#type" }] }, 7: { name: "entity.name.variable.range-variable.cs" }, 8: { name: "keyword.operator.expression.query.in.cs" } }, end: "(?=;|\\))", patterns: [{ include: "#query-body" }, { include: "#expression" }] }, "raw-interpolated-string": { patterns: [{ include: "#raw-interpolated-string-five-or-more-quote-one-or-more-interpolation" }, { include: "#raw-interpolated-string-three-or-more-quote-three-or-more-interpolation" }, { include: "#raw-interpolated-string-quadruple-quote-double-interpolation" }, { include: "#raw-interpolated-string-quadruple-quote-single-interpolation" }, { include: "#raw-interpolated-string-triple-quote-double-interpolation" }, { include: "#raw-interpolated-string-triple-quote-single-interpolation" }] }, "raw-interpolated-string-five-or-more-quote-one-or-more-interpolation": { begin: '\\$+"""""+', beginCaptures: { 0: { name: "punctuation.definition.string.begin.cs" } }, end: '"""""+', endCaptures: { 0: { name: "punctuation.definition.string.end.cs" } }, name: "string.quoted.double.cs" }, "raw-interpolated-string-quadruple-quote-double-interpolation": { begin: '\\$\\$""""', beginCaptures: { 0: { name: "punctuation.definition.string.begin.cs" } }, end: '""""', endCaptures: { 0: { name: "punctuation.definition.string.end.cs" } }, name: "string.quoted.double.cs", patterns: [{ include: "#double-raw-interpolation" }] }, "raw-interpolated-string-quadruple-quote-single-interpolation": { begin: '\\$""""', beginCaptures: { 0: { name: "punctuation.definition.string.begin.cs" } }, end: '""""', endCaptures: { 0: { name: "punctuation.definition.string.end.cs" } }, name: "string.quoted.double.cs", patterns: [{ include: "#raw-interpolation" }] }, "raw-interpolated-string-three-or-more-quote-three-or-more-interpolation": { begin: '\\$\\$\\$+"""+', beginCaptures: { 0: { name: "punctuation.definition.string.begin.cs" } }, end: '"""+', endCaptures: { 0: { name: "punctuation.definition.string.end.cs" } }, name: "string.quoted.double.cs" }, "raw-interpolated-string-triple-quote-double-interpolation": { begin: '\\$\\$"""', beginCaptures: { 0: { name: "punctuation.definition.string.begin.cs" } }, end: '"""', endCaptures: { 0: { name: "punctuation.definition.string.end.cs" } }, name: "string.quoted.double.cs", patterns: [{ include: "#double-raw-interpolation" }] }, "raw-interpolated-string-triple-quote-single-interpolation": { begin: '\\$"""', beginCaptures: { 0: { name: "punctuation.definition.string.begin.cs" } }, end: '"""', endCaptures: { 0: { name: "punctuation.definition.string.end.cs" } }, name: "string.quoted.double.cs", patterns: [{ include: "#raw-interpolation" }] }, "raw-interpolation": { begin: "(?<=[^\\{]|^)((?:\\{)*)(\\{)(?=[^\\{])", beginCaptures: { 1: { name: "string.quoted.double.cs" }, 2: { name: "punctuation.definition.interpolation.begin.cs" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.interpolation.end.cs" } }, name: "meta.interpolation.cs", patterns: [{ include: "#expression" }] }, "raw-string-literal": { patterns: [{ include: "#raw-string-literal-more" }, { include: "#raw-string-literal-quadruple" }, { include: "#raw-string-literal-triple" }] }, "raw-string-literal-more": { begin: '"""""+', beginCaptures: { 0: { name: "punctuation.definition.string.begin.cs" } }, end: '"""""+', endCaptures: { 0: { name: "punctuation.definition.string.end.cs" } }, name: "string.quoted.double.cs" }, "raw-string-literal-quadruple": { begin: '""""', beginCaptures: { 0: { name: "punctuation.definition.string.begin.cs" } }, end: '""""', endCaptures: { 0: { name: "punctuation.definition.string.end.cs" } }, name: "string.quoted.double.cs" }, "raw-string-literal-triple": { begin: '"""', beginCaptures: { 0: { name: "punctuation.definition.string.begin.cs" } }, end: '"""', endCaptures: { 0: { name: "punctuation.definition.string.end.cs" } }, name: "string.quoted.double.cs" }, "readonly-modifier": { match: "\\breadonly\\b", name: "storage.modifier.readonly.cs" }, "record-declaration": { begin: "(?=\\brecord\\b)", end: "(?<=\\})|(?=;)", patterns: [{ begin: `(?x)
(record)\\b\\s+
(@?[_[:alpha:]][_[:alnum:]]*)`, beginCaptures: { 1: { name: "storage.type.record.cs" }, 2: { name: "entity.name.type.class.cs" } }, end: "(?=\\{)|(?=;)", patterns: [{ include: "#comment" }, { include: "#type-parameter-list" }, { include: "#parenthesized-parameter-list" }, { include: "#base-types" }, { include: "#generic-constraints" }] }, { begin: "\\{", beginCaptures: { 0: { name: "punctuation.curlybrace.open.cs" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.curlybrace.close.cs" } }, patterns: [{ include: "#class-or-struct-members" }] }, { include: "#preprocessor" }, { include: "#comment" }] }, "ref-modifier": { match: "\\bref\\b", name: "storage.modifier.ref.cs" }, "relational-pattern": { begin: "<=?|>=?", beginCaptures: { 0: { name: "keyword.operator.relational.cs" } }, end: "(?=[)}\\],;:?=&|^]|!=|\\b(and|or|when)\\b)", patterns: [{ include: "#expression" }] }, "return-statement": { begin: "(?<!\\.)\\b(return)\\b", beginCaptures: { 1: { name: "keyword.control.flow.return.cs" } }, end: "(?=[;}])", patterns: [{ include: "#ref-modifier" }, { include: "#expression" }] }, "script-top-level": { patterns: [{ include: "#statement" }, { include: "#method-declaration" }, { include: "#punctuation-semicolon" }] }, "select-clause": { begin: "\\b(select)\\b\\s*", beginCaptures: { 1: { name: "keyword.operator.expression.query.select.cs" } }, end: "(?=;|\\))", patterns: [{ include: "#query-body" }, { include: "#expression" }] }, "simple-designation-pattern": { patterns: [{ include: "#discard-pattern" }, { match: "@?[_[:alpha:]][_[:alnum:]]*", name: "entity.name.variable.local.cs" }] }, "slice-pattern": { match: "\\.\\.", name: "keyword.operator.range.cs" }, statement: { patterns: [{ include: "#preprocessor" }, { include: "#comment" }, { include: "#while-statement" }, { include: "#do-statement" }, { include: "#for-statement" }, { include: "#foreach-statement" }, { include: "#if-statement" }, { include: "#else-part" }, { include: "#goto-statement" }, { include: "#return-statement" }, { include: "#break-or-continue-statement" }, { include: "#throw-statement" }, { include: "#yield-statement" }, { include: "#await-statement" }, { include: "#try-statement" }, { include: "#expression-operator-expression" }, { include: "#context-control-statement" }, { include: "#context-control-paren-statement" }, { include: "#labeled-statement" }, { include: "#object-creation-expression" }, { include: "#array-creation-expression" }, { include: "#anonymous-object-creation-expression" }, { include: "#local-declaration" }, { include: "#block" }, { include: "#expression" }, { include: "#punctuation-semicolon" }] }, "storage-modifier": { match: "(?<!\\.)\\b(new|public|protected|internal|private|abstract|virtual|override|sealed|static|partial|readonly|volatile|const|extern|async|unsafe|ref|required|file)\\b", name: "storage.modifier.$1.cs" }, "string-character-escape": { match: "\\\\(x[0-9a-fA-F]{1,4}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4}|.)", name: "constant.character.escape.cs" }, "string-literal": { begin: '(?<!@)"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.cs" } }, end: '(")|((?:[^\\\\\\n])$)', endCaptures: { 1: { name: "punctuation.definition.string.end.cs" }, 2: { name: "invalid.illegal.newline.cs" } }, name: "string.quoted.double.cs", patterns: [{ include: "#string-character-escape" }] }, "struct-declaration": { begin: "(?=(\\brecord\\b\\s+)?\\bstruct\\b)", end: "(?<=\\})|(?=;)", patterns: [{ begin: `(?x)
(\\b(record)\\b\\s+)?
(struct)\\b\\s+
(@?[_[:alpha:]][_[:alnum:]]*)`, beginCaptures: { 2: { name: "storage.type.record.cs" }, 3: { name: "storage.type.struct.cs" }, 4: { name: "entity.name.type.struct.cs" } }, end: "(?=\\{)|(?=;)", patterns: [{ include: "#comment" }, { include: "#type-parameter-list" }, { include: "#parenthesized-parameter-list" }, { include: "#base-types" }, { include: "#generic-constraints" }] }, { begin: "\\{", beginCaptures: { 0: { name: "punctuation.curlybrace.open.cs" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.curlybrace.close.cs" } }, patterns: [{ include: "#class-or-struct-members" }] }, { include: "#preprocessor" }, { include: "#comment" }] }, subpattern: { patterns: [{ captures: { 1: { patterns: [{ match: "\\@?[_[:alpha:]][_[:alnum:]]*", name: "variable.other.object.property.cs" }, { include: "#punctuation-accessor" }] }, 2: { name: "punctuation.separator.colon.cs" } }, match: "(@?[_[:alpha:]][_[:alnum:]]*(?:\\s*\\.\\s*@?[_[:alpha:]][_[:alnum:]]*)*)\\s*(:)" }, { include: "#pattern" }] }, "switch-expression": { begin: "\\{", beginCaptures: { 0: { name: "punctuation.curlybrace.open.cs" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.curlybrace.close.cs" } }, patterns: [{ include: "#punctuation-comma" }, { begin: "=>", beginCaptures: { 0: { name: "keyword.operator.arrow.cs" } }, end: "(?=,|})", patterns: [{ include: "#expression" }] }, { begin: "\\b(when)\\b", beginCaptures: { 1: { name: "keyword.control.conditional.when.cs" } }, end: "(?==>|,|})", patterns: [{ include: "#case-guard" }] }, { begin: "(?!\\s)", end: "(?=\\bwhen\\b|=>|,|})", patterns: [{ include: "#pattern" }] }] }, "switch-label": { begin: "\\b(case|default)\\b", beginCaptures: { 1: { name: "keyword.control.conditional.$1.cs" } }, end: "(:)|(?=})", endCaptures: { 1: { name: "punctuation.separator.colon.cs" } }, patterns: [{ begin: "\\b(when)\\b", beginCaptures: { 1: { name: "keyword.control.conditional.when.cs" } }, end: "(?=:|})", patterns: [{ include: "#case-guard" }] }, { begin: "(?!\\s)", end: "(?=\\bwhen\\b|:|})", patterns: [{ include: "#pattern" }] }] }, "switch-statement": { patterns: [{ include: "#intrusive" }, { begin: "\\(", beginCaptures: { 0: { name: "punctuation.parenthesis.open.cs" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } }, patterns: [{ include: "#expression" }] }, { begin: "\\{", beginCaptures: { 0: { name: "punctuation.curlybrace.open.cs" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.curlybrace.close.cs" } }, patterns: [{ include: "#switch-label" }, { include: "#statement" }] }] }, "switch-statement-or-expression": { begin: "(?<!\\.)\\b(switch)\\b", beginCaptures: { 1: { name: "keyword.control.conditional.switch.cs" } }, end: "(?<=})|(?=})", patterns: [{ include: "#intrusive" }, { begin: "(?=\\()", end: "(?<=\\})|(?=\\})", patterns: [{ include: "#switch-statement" }] }, { begin: "(?=\\{)", end: "(?<=\\})|(?=\\})", patterns: [{ include: "#switch-expression" }] }] }, "throw-expression": { captures: { 1: { name: "keyword.control.flow.throw.cs" } }, match: "\\b(throw)\\b" }, "throw-statement": { begin: "(?<!\\.)\\b(throw)\\b", beginCaptures: { 1: { name: "keyword.control.flow.throw.cs" } }, end: "(?=[;}])", patterns: [{ include: "#expression" }] }, "try-block": { begin: "(?<!\\.)\\b(try)\\b", beginCaptures: { 1: { name: "keyword.control.exception.try.cs" } }, end: "(?<=\\})", patterns: [{ include: "#comment" }, { include: "#block" }] }, "try-statement": { patterns: [{ include: "#try-block" }, { include: "#catch-clause" }, { include: "#finally-clause" }] }, "tuple-declaration-deconstruction-element-list": { begin: "\\(", beginCaptures: { 0: { name: "punctuation.parenthesis.open.cs" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } }, patterns: [{ include: "#comment" }, { include: "#tuple-declaration-deconstruction-element-list" }, { include: "#declaration-expression-tuple" }, { include: "#punctuation-comma" }, { captures: { 1: { name: "entity.name.variable.tuple-element.cs" } }, match: `(?x)
(@?[_[:alpha:]][_[:alnum:]]*)\\b\\s*
(?=[,)])` }] }, "tuple-deconstruction-assignment": { captures: { 1: { patterns: [{ include: "#tuple-deconstruction-element-list" }] } }, match: `(?x)
(?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\\s*
(?!=>|==)(?==)` }, "tuple-deconstruction-element-list": { begin: "\\(", beginCaptures: { 0: { name: "punctuation.parenthesis.open.cs" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } }, patterns: [{ include: "#comment" }, { include: "#tuple-deconstruction-element-list" }, { include: "#declaration-expression-tuple" }, { include: "#punctuation-comma" }, { captures: { 1: { name: "variable.other.readwrite.cs" } }, match: `(?x)
(@?[_[:alpha:]][_[:alnum:]]*)\\b\\s*
(?=[,)])` }] }, "tuple-element": { captures: { 1: { patterns: [{ include: "#type" }] }, 6: { name: "entity.name.variable.tuple-element.cs" } }, match: `(?x)
(?<type_name>
(?:
(?:
(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)?
(?<name_and_type_args>
\\g<identifier>\\s*
(?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?
)
(?:\\s*\\.\\s*\\g<name_and_type_args>)* |
(?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))
)
(?:\\s*\\?\\s*)?
(?:\\s*
\\[
(?:\\s*,\\s*)*
\\]
\\s*
(?:\\?)?
\\s*
)*
)
)
(?:(?<tuple_name>\\g<identifier>)\\b)?` }, "tuple-literal": { begin: "(\\()(?=.*[:,])", beginCaptures: { 1: { name: "punctuation.parenthesis.open.cs" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } }, patterns: [{ include: "#comment" }, { include: "#tuple-literal-element" }, { include: "#expression" }, { include: "#punctuation-comma" }] }, "tuple-literal-element": { begin: `(?x)
(@?[_[:alpha:]][_[:alnum:]]*)\\s*
(?=:)`, beginCaptures: { 1: { name: "entity.name.variable.tuple-element.cs" } }, end: "(:)", endCaptures: { 0: { name: "punctuation.separator.colon.cs" } } }, "tuple-type": { begin: "\\(", beginCaptures: { 0: { name: "punctuation.parenthesis.open.cs" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } }, patterns: [{ include: "#tuple-element" }, { include: "#punctuation-comma" }] }, type: { patterns: [{ include: "#comment" }, { include: "#ref-modifier" }, { include: "#readonly-modifier" }, { include: "#tuple-type" }, { include: "#type-builtin" }, { include: "#type-name" }, { include: "#type-arguments" }, { include: "#type-array-suffix" }, { include: "#type-nullable-suffix" }, { include: "#type-pointer-suffix" }] }, "type-arguments": { begin: "<", beginCaptures: { 0: { name: "punctuation.definition.typeparameters.begin.cs" } }, end: ">", endCaptures: { 0: { name: "punctuation.definition.typeparameters.end.cs" } }, patterns: [{ include: "#type" }, { include: "#punctuation-comma" }] }, "type-array-suffix": { begin: "\\[", beginCaptures: { 0: { name: "punctuation.squarebracket.open.cs" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.squarebracket.close.cs" } }, patterns: [{ include: "#intrusive" }, { include: "#punctuation-comma" }] }, "type-builtin": { captures: { 1: { name: "keyword.type.$1.cs" } }, match: "\\b(bool|s?byte|u?short|n?u?int|u?long|float|double|decimal|char|string|object|void|dynamic)\\b" }, "type-declarations": { patterns: [{ include: "#preprocessor" }, { include: "#comment" }, { include: "#storage-modifier" }, { include: "#class-declaration" }, { include: "#delegate-declaration" }, { include: "#enum-declaration" }, { include: "#interface-declaration" }, { include: "#struct-declaration" }, { include: "#record-declaration" }, { include: "#attribute-section" }, { include: "#punctuation-semicolon" }] }, "type-name": { patterns: [{ captures: { 1: { name: "entity.name.type.alias.cs" }, 2: { name: "punctuation.separator.coloncolon.cs" } }, match: "(@?[_[:alpha:]][_[:alnum:]]*)\\s*(\\:\\:)" }, { captures: { 1: { name: "entity.name.type.cs" }, 2: { name: "punctuation.accessor.cs" } }, match: "(@?[_[:alpha:]][_[:alnum:]]*)\\s*(\\.)" }, { captures: { 1: { name: "punctuation.accessor.cs" }, 2: { name: "entity.name.type.cs" } }, match: "(\\.)\\s*(@?[_[:alpha:]][_[:alnum:]]*)" }, { match: "@?[_[:alpha:]][_[:alnum:]]*", name: "entity.name.type.cs" }] }, "type-nullable-suffix": { match: "\\?", name: "punctuation.separator.question-mark.cs" }, "type-operator-expression": { begin: "\\b(default|sizeof|typeof)\\s*(\\()", beginCaptures: { 1: { name: "keyword.operator.expression.$1.cs" }, 2: { name: "punctuation.parenthesis.open.cs" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } }, patterns: [{ include: "#type" }] }, "type-parameter-list": { begin: "\\<", beginCaptures: { 0: { name: "punctuation.definition.typeparameters.begin.cs" } }, end: "\\>", endCaptures: { 0: { name: "punctuation.definition.typeparameters.end.cs" } }, patterns: [{ match: "\\b(in|out)\\b", name: "storage.modifier.$1.cs" }, { match: "(@?[_[:alpha:]][_[:alnum:]]*)\\b", name: "entity.name.type.type-parameter.cs" }, { include: "#comment" }, { include: "#punctuation-comma" }, { include: "#attribute-section" }] }, "type-pattern": { begin: "(?=@?[_[:alpha:]][_[:alnum:]]*)", end: "(?=[)}\\],;:?=&|^]|!=|\\b(and|or|when)\\b)", patterns: [{ begin: "\\G", end: "(?!\\G[@_[:alpha:]])(?=[\\({@_[:alpha:])}\\],;:=&|^]|(?:\\s|^)\\?|!=|\\b(and|or|when)\\b)", patterns: [{ include: "#intrusive" }, { include: "#type-subpattern" }] }, { begin: "(?=[\\({@_[:alpha:]])", end: "(?=[)}\\],;:?=&|^]|!=|\\b(and|or|when)\\b)", patterns: [{ include: "#intrusive" }, { include: "#positional-pattern" }, { include: "#property-pattern" }, { include: "#simple-designation-pattern" }] }] }, "type-pointer-suffix": { match: "\\*", name: "punctuation.separator.asterisk.cs" }, "type-subpattern": { patterns: [{ include: "#type-builtin" }, { begin: "(@?[_[:alpha:]][_[:alnum:]]*)\\s*(::)", beginCaptures: { 1: { name: "entity.name.type.alias.cs" }, 2: { name: "punctuation.separator.coloncolon.cs" } }, end: "(?<=[_[:alnum:]])|(?=[.<\\[\\({)}\\],;:?=&|^]|!=|\\b(and|or|when)\\b)", patterns: [{ include: "#intrusive" }, { match: "\\@?[_[:alpha:]][_[:alnum:]]*", name: "entity.name.type.cs" }] }, { match: "\\@?[_[:alpha:]][_[:alnum:]]*", name: "entity.name.type.cs" }, { begin: "\\.", beginCaptures: { 0: { name: "punctuation.accessor.cs" } }, end: "(?<=[_[:alnum:]])|(?=[<\\[\\({)}\\],;:?=&|^]|!=|\\b(and|or|when)\\b)", patterns: [{ include: "#intrusive" }, { match: "\\@?[_[:alpha:]][_[:alnum:]]*", name: "entity.name.type.cs" }] }, { include: "#type-arguments" }, { include: "#type-array-suffix" }, { match: "(?<!\\s)\\?", name: "punctuation.separator.question-mark.cs" }] }, "using-directive": { patterns: [{ begin: "\\b(?:(global)\\s+)?(using)\\s+(static)\\b\\s*(?:(unsafe)\\b\\s*)?", beginCaptures: { 1: { name: "keyword.other.directive.global.cs" }, 2: { name: "keyword.other.directive.using.cs" }, 3: { name: "keyword.other.directive.static.cs" }, 4: { name: "storage.modifier.unsafe.cs" } }, end: "(?=;)", patterns: [{ include: "#type" }] }, { begin: "\\b(?:(global)\\s+)?(using)\\b\\s*(?:(unsafe)\\b\\s*)?(@?[_[:alpha:]][_[:alnum:]]*)\\s*(=)", beginCaptures: { 1: { name: "keyword.other.directive.global.cs" }, 2: { name: "keyword.other.directive.using.cs" }, 3: { name: "storage.modifier.unsafe.cs" }, 4: { name: "entity.name.type.alias.cs" }, 5: { name: "keyword.operator.assignment.cs" } }, end: "(?=;)", patterns: [{ include: "#comment" }, { include: "#type" }] }, { begin: "\\b(?:(global)\\s+)?(using)\\b\\s*+(?!\\(|var\\b)", beginCaptures: { 1: { name: "keyword.other.directive.global.cs" }, 2: { name: "keyword.other.directive.using.cs" } }, end: "(?=;)", patterns: [{ include: "#comment" }, { match: "\\@?[_[:alpha:]][_[:alnum:]]*", name: "entity.name.type.namespace.cs" }, { include: "#punctuation-accessor" }, { include: "#operator-assignment" }] }] }, "using-statement": { begin: "\\b(using)\\b", beginCaptures: { 1: { name: "keyword.control.context.using.cs" } }, end: "(?<=\\))|(?=;|})", patterns: [{ include: "#intrusive" }, { begin: "\\(", beginCaptures: { 0: { name: "punctuation.parenthesis.open.cs" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } }, patterns: [{ include: "#intrusive" }, { include: "#await-expression" }, { include: "#local-variable-declaration" }, { include: "#expression" }] }, { include: "#local-variable-declaration" }] }, "var-pattern": { begin: "\\b(var)\\b", beginCaptures: { 1: { name: "storage.type.var.cs" } }, end: "(?=[)}\\],;:?=&|^]|!=|\\b(and|or|when)\\b)", patterns: [{ include: "#designation-pattern" }] }, "variable-initializer": { begin: "(?<!=|!)(=)(?!=|>)", beginCaptures: { 1: { name: "keyword.operator.assignment.cs" } }, end: "(?=[,\\)\\];}])", patterns: [{ include: "#ref-modifier" }, { include: "#expression" }] }, "verbatim-interpolated-string": { begin: '(?:\\$@|@\\$)"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.cs" } }, end: '"(?=[^"])', endCaptures: { 0: { name: "punctuation.definition.string.end.cs" } }, name: "string.quoted.double.cs", patterns: [{ include: "#verbatim-string-character-escape" }, { include: "#interpolation" }] }, "verbatim-string-character-escape": { match: '""', name: "constant.character.escape.cs" }, "verbatim-string-literal": { begin: '@"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.cs" } }, end: '"(?=[^"])', endCaptures: { 0: { name: "punctuation.definition.string.end.cs" } }, name: "string.quoted.double.cs", patterns: [{ include: "#verbatim-string-character-escape" }] }, "when-clause": { begin: "(?<!\\.)\\b(when)\\b\\s*(\\()", beginCaptures: { 1: { name: "keyword.control.exception.when.cs" }, 2: { name: "punctuation.parenthesis.open.cs" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } }, patterns: [{ include: "#expression" }, { include: "#comment" }] }, "where-clause": { begin: `(?x)
\\b(where)\\b\\s*`, beginCaptures: { 1: { name: "keyword.operator.expression.query.where.cs" } }, end: "(?=;|\\))", patterns: [{ include: "#query-body" }, { include: "#expression" }] }, "while-statement": { begin: "(?<!\\.)\\b(while)\\b\\s*(?=\\()", beginCaptures: { 1: { name: "keyword.control.loop.while.cs" } }, end: "(?<=\\})|(?=;)", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.parenthesis.open.cs" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } }, patterns: [{ include: "#expression" }] }, { include: "#statement" }] }, "with-expression": { begin: "(?<!\\.)\\b(with)\\b\\s*(?=\\{|//|/\\*|$)", beginCaptures: { 1: { name: "keyword.operator.expression.with.cs" } }, end: "(?<=\\})", patterns: [{ include: "#comment" }, { include: "#initializer-expression" }] }, "xml-attribute": { patterns: [{ captures: { 1: { name: "entity.other.attribute-name.cs" }, 2: { name: "entity.other.attribute-name.namespace.cs" }, 3: { name: "punctuation.separator.colon.cs" }, 4: { name: "entity.other.attribute-name.localname.cs" }, 5: { name: "punctuation.separator.equals.cs" } }, match: `(?x)
(?:^|\\s+)
(
(?:
([-_[:alnum:]]+)
(:)
)?
([-_[:alnum:]]+)
)
(=)` }, { include: "#xml-string" }] }, "xml-cdata": { begin: "<!\\[CDATA\\[", beginCaptures: { 0: { name: "punctuation.definition.string.begin.cs" } }, end: "\\]\\]>", endCaptures: { 0: { name: "punctuation.definition.string.end.cs" } }, name: "string.unquoted.cdata.cs" }, "xml-character-entity": { patterns: [{ captures: { 1: { name: "punctuation.definition.constant.cs" }, 3: { name: "punctuation.definition.constant.cs" } }, match: `(?x)
(&)
(
(?:[[:alpha:]:_][[:alnum:]:_.-]*)|
(?:\\#[[:digit:]]+)|
(?:\\#x[[:xdigit:]]+)
)
(;)`, name: "constant.character.entity.cs" }, { match: "&", name: "invalid.illegal.bad-ampersand.cs" }] }, "xml-comment": { begin: "<!--", beginCaptures: { 0: { name: "punctuation.definition.comment.cs" } }, end: "-->", endCaptures: { 0: { name: "punctuation.definition.comment.cs" } }, name: "comment.block.cs" }, "xml-doc-comment": { patterns: [{ include: "#xml-comment" }, { include: "#xml-character-entity" }, { include: "#xml-cdata" }, { include: "#xml-tag" }] }, "xml-string": { patterns: [{ begin: "\\'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.cs" } }, end: "\\'", endCaptures: { 0: { name: "punctuation.definition.string.end.cs" } }, name: "string.quoted.single.cs", patterns: [{ include: "#xml-character-entity" }] }, { begin: '\\"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.cs" } }, end: '\\"', endCaptures: { 0: { name: "punctuation.definition.string.end.cs" } }, name: "string.quoted.double.cs", patterns: [{ include: "#xml-character-entity" }] }] }, "xml-tag": { begin: `(?x)
(</?)
(
(?:
([-_[:alnum:]]+)
(:)
)?
([-_[:alnum:]]+)
)`, beginCaptures: { 1: { name: "punctuation.definition.tag.cs" }, 2: { name: "entity.name.tag.cs" }, 3: { name: "entity.name.tag.namespace.cs" }, 4: { name: "punctuation.separator.colon.cs" }, 5: { name: "entity.name.tag.localname.cs" } }, end: "(/?>)", endCaptures: { 1: { name: "punctuation.definition.tag.cs" } }, name: "meta.tag.cs", patterns: [{ include: "#xml-attribute" }] }, "yield-break-statement": { captures: { 1: { name: "keyword.control.flow.yield.cs" }, 2: { name: "keyword.control.flow.break.cs" } }, match: "(?<!\\.)\\b(yield)\\b\\s*\\b(break)\\b" }, "yield-return-statement": { begin: "(?<!\\.)\\b(yield)\\b\\s*\\b(return)\\b", beginCaptures: { 1: { name: "keyword.control.flow.yield.cs" }, 2: { name: "keyword.control.flow.return.cs" } }, end: "(?=[;}])", patterns: [{ include: "#expression" }] }, "yield-statement": { patterns: [{ include: "#yield-return-statement" }, { include: "#yield-break-statement" }] } }, scopeName: "source.cs", aliases: ["c#", "cs"] });
var ae = [
  te
];
const ie = Object.freeze({ displayName: "CSV", fileTypes: ["csv"], name: "csv", patterns: [{ captures: { 1: { name: "rainbow1" }, 2: { name: "keyword.rainbow2" }, 3: { name: "entity.name.function.rainbow3" }, 4: { name: "comment.rainbow4" }, 5: { name: "string.rainbow5" }, 6: { name: "variable.parameter.rainbow6" }, 7: { name: "constant.numeric.rainbow7" }, 8: { name: "entity.name.type.rainbow8" }, 9: { name: "markup.bold.rainbow9" }, 10: { name: "invalid.rainbow10" } }, match: '((?: *"(?:[^"]*"")*[^"]*" *(?:,|$))|(?:[^,]*(?:,|$)))?((?: *"(?:[^"]*"")*[^"]*" *(?:,|$))|(?:[^,]*(?:,|$)))?((?: *"(?:[^"]*"")*[^"]*" *(?:,|$))|(?:[^,]*(?:,|$)))?((?: *"(?:[^"]*"")*[^"]*" *(?:,|$))|(?:[^,]*(?:,|$)))?((?: *"(?:[^"]*"")*[^"]*" *(?:,|$))|(?:[^,]*(?:,|$)))?((?: *"(?:[^"]*"")*[^"]*" *(?:,|$))|(?:[^,]*(?:,|$)))?((?: *"(?:[^"]*"")*[^"]*" *(?:,|$))|(?:[^,]*(?:,|$)))?((?: *"(?:[^"]*"")*[^"]*" *(?:,|$))|(?:[^,]*(?:,|$)))?((?: *"(?:[^"]*"")*[^"]*" *(?:,|$))|(?:[^,]*(?:,|$)))?((?: *"(?:[^"]*"")*[^"]*" *(?:,|$))|(?:[^,]*(?:,|$)))?', name: "rainbowgroup" }], scopeName: "text.csv" });
var re = [
  ie
];
const se = Object.freeze({ displayName: "Diff", name: "diff", patterns: [{ captures: { 1: { name: "punctuation.definition.separator.diff" } }, match: "^((\\*{15})|(={67})|(-{3}))$\\n?", name: "meta.separator.diff" }, { match: "^\\d+(,\\d+)*(a|d|c)\\d+(,\\d+)*$\\n?", name: "meta.diff.range.normal" }, { captures: { 1: { name: "punctuation.definition.range.diff" }, 2: { name: "meta.toc-list.line-number.diff" }, 3: { name: "punctuation.definition.range.diff" } }, match: "^(@@)\\s*(.+?)\\s*(@@)($\\n?)?", name: "meta.diff.range.unified" }, { captures: { 3: { name: "punctuation.definition.range.diff" }, 4: { name: "punctuation.definition.range.diff" }, 6: { name: "punctuation.definition.range.diff" }, 7: { name: "punctuation.definition.range.diff" } }, match: "^(((\\-{3}) .+ (\\-{4}))|((\\*{3}) .+ (\\*{4})))$\\n?", name: "meta.diff.range.context" }, { match: "^diff --git a/.*$\\n?", name: "meta.diff.header.git" }, { match: "^diff (-|\\S+\\s+\\S+).*$\\n?", name: "meta.diff.header.command" }, { captures: { 4: { name: "punctuation.definition.from-file.diff" }, 6: { name: "punctuation.definition.from-file.diff" }, 7: { name: "punctuation.definition.from-file.diff" } }, match: "(^(((-{3}) .+)|((\\*{3}) .+))$\\n?|^(={4}) .+(?= - ))", name: "meta.diff.header.from-file" }, { captures: { 2: { name: "punctuation.definition.to-file.diff" }, 3: { name: "punctuation.definition.to-file.diff" }, 4: { name: "punctuation.definition.to-file.diff" } }, match: "(^(\\+{3}) .+$\\n?| (-) .* (={4})$\\n?)", name: "meta.diff.header.to-file" }, { captures: { 3: { name: "punctuation.definition.inserted.diff" }, 6: { name: "punctuation.definition.inserted.diff" } }, match: "^(((>)( .*)?)|((\\+).*))$\\n?", name: "markup.inserted.diff" }, { captures: { 1: { name: "punctuation.definition.changed.diff" } }, match: "^(!).*$\\n?", name: "markup.changed.diff" }, { captures: { 3: { name: "punctuation.definition.deleted.diff" }, 6: { name: "punctuation.definition.deleted.diff" } }, match: "^(((<)( .*)?)|((-).*))$\\n?", name: "markup.deleted.diff" }, { begin: "^(#)", captures: { 1: { name: "punctuation.definition.comment.diff" } }, comment: 'Git produces unified diffs with embedded comments"', end: "\\n", name: "comment.line.number-sign.diff" }, { match: "^index [0-9a-f]{7,40}\\.\\.[0-9a-f]{7,40}.*$\\n?", name: "meta.diff.index.git" }, { captures: { 1: { name: "punctuation.separator.key-value.diff" }, 2: { name: "meta.toc-list.file-name.diff" } }, match: "^Index(:) (.+)$\\n?", name: "meta.diff.index" }, { match: "^Only in .*: .*$\\n?", name: "meta.diff.only-in" }], scopeName: "source.diff" });
var oe = [
  se
];
const ce = Object.freeze({ displayName: "Dockerfile", name: "docker", patterns: [{ captures: { 1: { name: "keyword.other.special-method.dockerfile" }, 2: { name: "keyword.other.special-method.dockerfile" } }, match: "^\\s*\\b(?i:(FROM))\\b.*?\\b(?i:(AS))\\b" }, { captures: { 1: { name: "keyword.control.dockerfile" }, 2: { name: "keyword.other.special-method.dockerfile" } }, match: "^\\s*(?i:(ONBUILD)\\s+)?(?i:(ADD|ARG|CMD|COPY|ENTRYPOINT|ENV|EXPOSE|FROM|HEALTHCHECK|LABEL|MAINTAINER|RUN|SHELL|STOPSIGNAL|USER|VOLUME|WORKDIR))\\s" }, { captures: { 1: { name: "keyword.operator.dockerfile" }, 2: { name: "keyword.other.special-method.dockerfile" } }, match: "^\\s*(?i:(ONBUILD)\\s+)?(?i:(CMD|ENTRYPOINT))\\s" }, { begin: '"', beginCaptures: { 1: { name: "punctuation.definition.string.begin.dockerfile" } }, end: '"', endCaptures: { 1: { name: "punctuation.definition.string.end.dockerfile" } }, name: "string.quoted.double.dockerfile", patterns: [{ match: "\\\\.", name: "constant.character.escaped.dockerfile" }] }, { begin: "'", beginCaptures: { 1: { name: "punctuation.definition.string.begin.dockerfile" } }, end: "'", endCaptures: { 1: { name: "punctuation.definition.string.end.dockerfile" } }, name: "string.quoted.single.dockerfile", patterns: [{ match: "\\\\.", name: "constant.character.escaped.dockerfile" }] }, { captures: { 1: { name: "punctuation.whitespace.comment.leading.dockerfile" }, 2: { name: "comment.line.number-sign.dockerfile" }, 3: { name: "punctuation.definition.comment.dockerfile" } }, comment: "comment.line", match: "^(\\s*)((#).*$\\n?)" }], scopeName: "source.dockerfile", aliases: ["dockerfile"] });
var pe = [
  ce
];
const me = Object.freeze({ displayName: "dotEnv", name: "dotenv", patterns: [{ captures: { 1: { patterns: [{ include: "#line-comment" }] } }, comment: "Full Line Comment", match: "^\\s?(#.*$)\\n" }, { captures: { 1: { patterns: [{ include: "#key" }] }, 2: { name: "keyword.operator.assignment.dotenv" }, 3: { name: "property.value.dotenv", patterns: [{ include: "#line-comment" }, { include: "#double-quoted-string" }, { include: "#single-quoted-string" }, { include: "#interpolation" }] } }, comment: "ENV entry", match: "^\\s?(.*?)\\s?(\\=)(.*)$" }], repository: { "double-quoted-string": { captures: { 1: { patterns: [{ include: "#interpolation" }, { include: "#escape-characters" }] } }, comment: "Double Quoted String", match: '"(.*)"', name: "string.quoted.double.dotenv" }, "escape-characters": { comment: "Escape characters", match: `\\\\[nrtfb"'\\\\]|\\\\u[0123456789ABCDEF]{4}`, name: "constant.character.escape.dotenv" }, interpolation: { captures: { 1: { name: "keyword.interpolation.begin.dotenv" }, 2: { name: "variable.interpolation.dotenv" }, 3: { name: "keyword.interpolation.end.dotenv" } }, comment: "Interpolation (variable substitution)", match: "(\\$\\{)(.*)(\\})" }, key: { captures: { 1: { name: "keyword.key.export.dotenv" }, 2: { name: "variable.key.dotenv", patterns: [{ include: "#variable" }] } }, comment: "Key", match: "(export\\s)?(.*)" }, "line-comment": { comment: "Comment", match: "#.*$", name: "comment.line.dotenv" }, "single-quoted-string": { comment: "Single Quoted String", match: "'(.*)'", name: "string.quoted.single.dotenv" }, variable: { comment: "env variable", match: "[a-zA-Z_]+[a-zA-Z0-9_]*" } }, scopeName: "source.dotenv" });
var ue = [
  me
];
const le = Object.freeze({ displayName: "HTML", injections: { "R:text.html - (comment.block, text.html meta.embedded, meta.tag.*.*.html, meta.tag.*.*.*.html, meta.tag.*.*.*.*.html)": { comment: "Uses R: to ensure this matches after any other injections.", patterns: [{ match: "<", name: "invalid.illegal.bad-angle-bracket.html" }] } }, name: "html", patterns: [{ include: "#xml-processing" }, { include: "#comment" }, { include: "#doctype" }, { include: "#cdata" }, { include: "#tags-valid" }, { include: "#tags-invalid" }, { include: "#entities" }], repository: { attribute: { patterns: [{ begin: "(s(hape|cope|t(ep|art)|ize(s)?|p(ellcheck|an)|elected|lot|andbox|rc(set|doc|lang)?)|h(ttp-equiv|i(dden|gh)|e(ight|aders)|ref(lang)?)|n(o(nce|validate|module)|ame)|c(h(ecked|arset)|ite|o(nt(ent(editable)?|rols)|ords|l(s(pan)?|or))|lass|rossorigin)|t(ype(mustmatch)?|itle|a(rget|bindex)|ranslate)|i(s(map)?|n(tegrity|putmode)|tem(scope|type|id|prop|ref)|d)|op(timum|en)|d(i(sabled|r(name)?)|ownload|e(coding|f(er|ault))|at(etime|a)|raggable)|usemap|p(ing|oster|la(ysinline|ceholder)|attern|reload)|enctype|value|kind|for(m(novalidate|target|enctype|action|method)?)?|w(idth|rap)|l(ist|o(op|w)|a(ng|bel))|a(s(ync)?|c(ce(sskey|pt(-charset)?)|tion)|uto(c(omplete|apitalize)|play|focus)|l(t|low(usermedia|paymentrequest|fullscreen))|bbr)|r(ows(pan)?|e(versed|quired|ferrerpolicy|l|adonly))|m(in(length)?|u(ted|ltiple)|e(thod|dia)|a(nifest|x(length)?)))(?![\\w:-])", beginCaptures: { 0: { name: "entity.other.attribute-name.html" } }, comment: "HTML5 attributes, not event handlers", end: "(?=\\s*+[^=\\s])", name: "meta.attribute.$1.html", patterns: [{ include: "#attribute-interior" }] }, { begin: "style(?![\\w:-])", beginCaptures: { 0: { name: "entity.other.attribute-name.html" } }, comment: "HTML5 style attribute", end: "(?=\\s*+[^=\\s])", name: "meta.attribute.style.html", patterns: [{ begin: "=", beginCaptures: { 0: { name: "punctuation.separator.key-value.html" } }, end: "(?<=[^\\s=])(?!\\s*=)|(?=/?>)", patterns: [{ begin: "(?=[^\\s=<>`/]|/(?!>))", end: "(?!\\G)", name: "meta.embedded.line.css", patterns: [{ captures: { 0: { name: "source.css" } }, match: "([^\\s\"'=<>`/]|/(?!>))+", name: "string.unquoted.html" }, { begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.html" } }, contentName: "source.css", end: '(")', endCaptures: { 0: { name: "punctuation.definition.string.end.html" }, 1: { name: "source.css" } }, name: "string.quoted.double.html", patterns: [{ include: "#entities" }] }, { begin: "'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.html" } }, contentName: "source.css", end: "(')", endCaptures: { 0: { name: "punctuation.definition.string.end.html" }, 1: { name: "source.css" } }, name: "string.quoted.single.html", patterns: [{ include: "#entities" }] }] }, { match: "=", name: "invalid.illegal.unexpected-equals-sign.html" }] }] }, { begin: "on(s(croll|t(orage|alled)|u(spend|bmit)|e(curitypolicyviolation|ek(ing|ed)|lect))|hashchange|c(hange|o(ntextmenu|py)|u(t|echange)|l(ick|ose)|an(cel|play(through)?))|t(imeupdate|oggle)|in(put|valid)|o(nline|ffline)|d(urationchange|r(op|ag(start|over|e(n(ter|d)|xit)|leave)?)|blclick)|un(handledrejection|load)|p(opstate|lay(ing)?|a(ste|use|ge(show|hide))|rogress)|e(nded|rror|mptied)|volumechange|key(down|up|press)|focus|w(heel|aiting)|l(oad(start|e(nd|d(data|metadata)))?|anguagechange)|a(uxclick|fterprint|bort)|r(e(s(ize|et)|jectionhandled)|atechange)|m(ouse(o(ut|ver)|down|up|enter|leave|move)|essage(error)?)|b(efore(unload|print)|lur))(?![\\w:-])", beginCaptures: { 0: { name: "entity.other.attribute-name.html" } }, comment: "HTML5 attributes, event handlers", end: "(?=\\s*+[^=\\s])", name: "meta.attribute.event-handler.$1.html", patterns: [{ begin: "=", beginCaptures: { 0: { name: "punctuation.separator.key-value.html" } }, end: "(?<=[^\\s=])(?!\\s*=)|(?=/?>)", patterns: [{ begin: "(?=[^\\s=<>`/]|/(?!>))", end: "(?!\\G)", name: "meta.embedded.line.js", patterns: [{ captures: { 0: { name: "source.js" }, 1: { patterns: [{ include: "source.js" }] } }, match: "(([^\\s\"'=<>`/]|/(?!>))+)", name: "string.unquoted.html" }, { begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.html" } }, contentName: "source.js", end: '(")', endCaptures: { 0: { name: "punctuation.definition.string.end.html" }, 1: { name: "source.js" } }, name: "string.quoted.double.html", patterns: [{ captures: { 0: { patterns: [{ include: "source.js" }] } }, match: '([^\\n"/]|/(?![/*]))+' }, { begin: "//", beginCaptures: { 0: { name: "punctuation.definition.comment.js" } }, end: '(?=")|\\n', name: "comment.line.double-slash.js" }, { begin: "/\\*", beginCaptures: { 0: { name: "punctuation.definition.comment.begin.js" } }, end: '(?=")|\\*/', endCaptures: { 0: { name: "punctuation.definition.comment.end.js" } }, name: "comment.block.js" }] }, { begin: "'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.html" } }, contentName: "source.js", end: "(')", endCaptures: { 0: { name: "punctuation.definition.string.end.html" }, 1: { name: "source.js" } }, name: "string.quoted.single.html", patterns: [{ captures: { 0: { patterns: [{ include: "source.js" }] } }, match: "([^\\n'/]|/(?![/*]))+" }, { begin: "//", beginCaptures: { 0: { name: "punctuation.definition.comment.js" } }, end: "(?=')|\\n", name: "comment.line.double-slash.js" }, { begin: "/\\*", beginCaptures: { 0: { name: "punctuation.definition.comment.begin.js" } }, end: "(?=')|\\*/", endCaptures: { 0: { name: "punctuation.definition.comment.end.js" } }, name: "comment.block.js" }] }] }, { match: "=", name: "invalid.illegal.unexpected-equals-sign.html" }] }] }, { begin: "(data-[a-z\\-]+)(?![\\w:-])", beginCaptures: { 0: { name: "entity.other.attribute-name.html" } }, comment: "HTML5 attributes, data-*", end: "(?=\\s*+[^=\\s])", name: "meta.attribute.data-x.$1.html", patterns: [{ include: "#attribute-interior" }] }, { begin: "(align|bgcolor|border)(?![\\w:-])", beginCaptures: { 0: { name: "invalid.deprecated.entity.other.attribute-name.html" } }, comment: "HTML attributes, deprecated", end: "(?=\\s*+[^=\\s])", name: "meta.attribute.$1.html", patterns: [{ include: "#attribute-interior" }] }, { begin: `([^\\x{0020}"'<>/=\\x{0000}-\\x{001F}\\x{007F}-\\x{009F}\\x{FDD0}-\\x{FDEF}\\x{FFFE}\\x{FFFF}\\x{1FFFE}\\x{1FFFF}\\x{2FFFE}\\x{2FFFF}\\x{3FFFE}\\x{3FFFF}\\x{4FFFE}\\x{4FFFF}\\x{5FFFE}\\x{5FFFF}\\x{6FFFE}\\x{6FFFF}\\x{7FFFE}\\x{7FFFF}\\x{8FFFE}\\x{8FFFF}\\x{9FFFE}\\x{9FFFF}\\x{AFFFE}\\x{AFFFF}\\x{BFFFE}\\x{BFFFF}\\x{CFFFE}\\x{CFFFF}\\x{DFFFE}\\x{DFFFF}\\x{EFFFE}\\x{EFFFF}\\x{FFFFE}\\x{FFFFF}\\x{10FFFE}\\x{10FFFF}]+)`, beginCaptures: { 0: { name: "entity.other.attribute-name.html" } }, comment: "Anything else that is valid", end: "(?=\\s*+[^=\\s])", name: "meta.attribute.unrecognized.$1.html", patterns: [{ include: "#attribute-interior" }] }, { match: "[^\\s>]+", name: "invalid.illegal.character-not-allowed-here.html" }] }, "attribute-interior": { patterns: [{ begin: "=", beginCaptures: { 0: { name: "punctuation.separator.key-value.html" } }, end: "(?<=[^\\s=])(?!\\s*=)|(?=/?>)", patterns: [{ match: "([^\\s\"'=<>`/]|/(?!>))+", name: "string.unquoted.html" }, { begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.html" } }, end: '"', endCaptures: { 0: { name: "punctuation.definition.string.end.html" } }, name: "string.quoted.double.html", patterns: [{ include: "#entities" }] }, { begin: "'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.html" } }, end: "'", endCaptures: { 0: { name: "punctuation.definition.string.end.html" } }, name: "string.quoted.single.html", patterns: [{ include: "#entities" }] }, { match: "=", name: "invalid.illegal.unexpected-equals-sign.html" }] }] }, cdata: { begin: "<!\\[CDATA\\[", beginCaptures: { 0: { name: "punctuation.definition.tag.begin.html" } }, contentName: "string.other.inline-data.html", end: "]]>", endCaptures: { 0: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.metadata.cdata.html" }, comment: { begin: "<!--", captures: { 0: { name: "punctuation.definition.comment.html" } }, end: "-->", name: "comment.block.html", patterns: [{ match: "\\G-?>", name: "invalid.illegal.characters-not-allowed-here.html" }, { match: "<!--(?!>)|<!-(?=-->)", name: "invalid.illegal.characters-not-allowed-here.html" }, { match: "--!>", name: "invalid.illegal.characters-not-allowed-here.html" }] }, "core-minus-invalid": { comment: "This should be the root pattern array includes minus #tags-invalid", patterns: [{ include: "#xml-processing" }, { include: "#comment" }, { include: "#doctype" }, { include: "#cdata" }, { include: "#tags-valid" }, { include: "#entities" }] }, doctype: { begin: "<!(?=(?i:DOCTYPE\\s))", beginCaptures: { 0: { name: "punctuation.definition.tag.begin.html" } }, end: ">", endCaptures: { 0: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.metadata.doctype.html", patterns: [{ match: "\\G(?i:DOCTYPE)", name: "entity.name.tag.html" }, { begin: '"', end: '"', name: "string.quoted.double.html" }, { match: "[^\\s>]+", name: "entity.other.attribute-name.html" }] }, entities: { patterns: [{ captures: { 1: { name: "punctuation.definition.entity.html" }, 912: { name: "punctuation.definition.entity.html" } }, comment: "Yes this is a bit ridiculous, there are quite a lot of these", match: `(?x)
(&)	(?=[a-zA-Z])
(
(a(s(ymp(eq)?|cr|t)|n(d(slope|d|v|and)?|g(s(t|ph)|zarr|e|le|rt(vb(d)?)?|msd(a(h|c|d|e|f|a|g|b))?)?)|c(y|irc|d|ute|E)?|tilde|o(pf|gon)|uml|p(id|os|prox(eq)?|e|E|acir)?|elig|f(r)?|w(conint|int)|l(pha|e(ph|fsym))|acute|ring|grave|m(p|a(cr|lg))|breve)|A(s(sign|cr)|nd|MP|c(y|irc)|tilde|o(pf|gon)|uml|pplyFunction|fr|Elig|lpha|acute|ring|grave|macr|breve))
| (B(scr|cy|opf|umpeq|e(cause|ta|rnoullis)|fr|a(ckslash|r(v|wed))|reve)|b(s(cr|im(e)?|ol(hsub|b)?|emi)|n(ot|e(quiv)?)|c(y|ong)|ig(s(tar|qcup)|c(irc|up|ap)|triangle(down|up)|o(times|dot|plus)|uplus|vee|wedge)|o(t(tom)?|pf|wtie|x(h(d|u|D|U)?|times|H(d|u|D|U)?|d(R|l|r|L)|u(R|l|r|L)|plus|D(R|l|r|L)|v(R|h|H|l|r|L)?|U(R|l|r|L)|V(R|h|H|l|r|L)?|minus|box))|Not|dquo|u(ll(et)?|mp(e(q)?|E)?)|prime|e(caus(e)?|t(h|ween|a)|psi|rnou|mptyv)|karow|fr|l(ock|k(1(2|4)|34)|a(nk|ck(square|triangle(down|left|right)?|lozenge)))|a(ck(sim(eq)?|cong|prime|epsilon)|r(vee|wed(ge)?))|r(eve|vbar)|brk(tbrk)?))
| (c(s(cr|u(p(e)?|b(e)?))|h(cy|i|eck(mark)?)|ylcty|c(irc|ups(sm)?|edil|a(ps|ron))|tdot|ir(scir|c(eq|le(d(R|circ|S|dash|ast)|arrow(left|right)))?|e|fnint|E|mid)?|o(n(int|g(dot)?)|p(y(sr)?|f|rod)|lon(e(q)?)?|m(p(fn|le(xes|ment))?|ma(t)?))|dot|u(darr(l|r)|p(s|c(up|ap)|or|dot|brcap)?|e(sc|pr)|vee|wed|larr(p)?|r(vearrow(left|right)|ly(eq(succ|prec)|vee|wedge)|arr(m)?|ren))|e(nt(erdot)?|dil|mptyv)|fr|w(conint|int)|lubs(uit)?|a(cute|p(s|c(up|ap)|dot|and|brcup)?|r(on|et))|r(oss|arr))|C(scr|hi|c(irc|onint|edil|aron)|ircle(Minus|Times|Dot|Plus)|Hcy|o(n(tourIntegral|int|gruent)|unterClockwiseContourIntegral|p(f|roduct)|lon(e)?)|dot|up(Cap)?|OPY|e(nterDot|dilla)|fr|lo(seCurly(DoubleQuote|Quote)|ckwiseContourIntegral)|a(yleys|cute|p(italDifferentialD)?)|ross))
| (d(s(c(y|r)|trok|ol)|har(l|r)|c(y|aron)|t(dot|ri(f)?)|i(sin|e|v(ide(ontimes)?|onx)?|am(s|ond(suit)?)?|gamma)|Har|z(cy|igrarr)|o(t(square|plus|eq(dot)?|minus)?|ublebarwedge|pf|wn(harpoon(left|right)|downarrows|arrow)|llar)|d(otseq|a(rr|gger))?|u(har|arr)|jcy|e(lta|g|mptyv)|f(isht|r)|wangle|lc(orn|rop)|a(sh(v)?|leth|rr|gger)|r(c(orn|rop)|bkarow)|b(karow|lac)|Arr)|D(s(cr|trok)|c(y|aron)|Scy|i(fferentialD|a(critical(Grave|Tilde|Do(t|ubleAcute)|Acute)|mond))|o(t(Dot|Equal)?|uble(Right(Tee|Arrow)|ContourIntegral|Do(t|wnArrow)|Up(DownArrow|Arrow)|VerticalBar|L(ong(RightArrow|Left(RightArrow|Arrow))|eft(RightArrow|Tee|Arrow)))|pf|wn(Right(TeeVector|Vector(Bar)?)|Breve|Tee(Arrow)?|arrow|Left(RightVector|TeeVector|Vector(Bar)?)|Arrow(Bar|UpArrow)?))|Zcy|el(ta)?|D(otrahd)?|Jcy|fr|a(shv|rr|gger)))
| (e(s(cr|im|dot)|n(sp|g)|c(y|ir(c)?|olon|aron)|t(h|a)|o(pf|gon)|dot|u(ro|ml)|p(si(v|lon)?|lus|ar(sl)?)|e|D(ot|Dot)|q(s(im|lant(less|gtr))|c(irc|olon)|u(iv(DD)?|est|als)|vparsl)|f(Dot|r)|l(s(dot)?|inters|l)?|a(ster|cute)|r(Dot|arr)|g(s(dot)?|rave)?|x(cl|ist|p(onentiale|ectation))|m(sp(1(3|4))?|pty(set|v)?|acr))|E(s(cr|im)|c(y|irc|aron)|ta|o(pf|gon)|NG|dot|uml|TH|psilon|qu(ilibrium|al(Tilde)?)|fr|lement|acute|grave|x(ists|ponentialE)|m(pty(SmallSquare|VerySmallSquare)|acr)))
| (f(scr|nof|cy|ilig|o(pf|r(k(v)?|all))|jlig|partint|emale|f(ilig|l(ig|lig)|r)|l(tns|lig|at)|allingdotseq|r(own|a(sl|c(1(2|8|3|4|5|6)|78|2(3|5)|3(8|4|5)|45|5(8|6)))))|F(scr|cy|illed(SmallSquare|VerySmallSquare)|o(uriertrf|pf|rAll)|fr))
| (G(scr|c(y|irc|edil)|t|opf|dot|T|Jcy|fr|amma(d)?|reater(Greater|SlantEqual|Tilde|Equal(Less)?|FullEqual|Less)|g|breve)|g(s(cr|im(e|l)?)|n(sim|e(q(q)?)?|E|ap(prox)?)|c(y|irc)|t(c(c|ir)|dot|quest|lPar|r(sim|dot|eq(qless|less)|less|a(pprox|rr)))?|imel|opf|dot|jcy|e(s(cc|dot(o(l)?)?|l(es)?)?|q(slant|q)?|l)?|v(nE|ertneqq)|fr|E(l)?|l(j|E|a)?|a(cute|p|mma(d)?)|rave|g(g)?|breve))
| (h(s(cr|trok|lash)|y(phen|bull)|circ|o(ok(leftarrow|rightarrow)|pf|arr|rbar|mtht)|e(llip|arts(uit)?|rcon)|ks(earow|warow)|fr|a(irsp|lf|r(dcy|r(cir|w)?)|milt)|bar|Arr)|H(s(cr|trok)|circ|ilbertSpace|o(pf|rizontalLine)|ump(DownHump|Equal)|fr|a(cek|t)|ARDcy))
| (i(s(cr|in(s(v)?|dot|v|E)?)|n(care|t(cal|prod|e(rcal|gers)|larhk)?|odot|fin(tie)?)?|c(y|irc)?|t(ilde)?|i(nfin|i(nt|int)|ota)?|o(cy|ta|pf|gon)|u(kcy|ml)|jlig|prod|e(cy|xcl)|quest|f(f|r)|acute|grave|m(of|ped|a(cr|th|g(part|e|line))))|I(scr|n(t(e(rsection|gral))?|visible(Comma|Times))|c(y|irc)|tilde|o(ta|pf|gon)|dot|u(kcy|ml)|Ocy|Jlig|fr|Ecy|acute|grave|m(plies|a(cr|ginaryI))?))
| (j(s(cr|ercy)|c(y|irc)|opf|ukcy|fr|math)|J(s(cr|ercy)|c(y|irc)|opf|ukcy|fr))
| (k(scr|hcy|c(y|edil)|opf|jcy|fr|appa(v)?|green)|K(scr|c(y|edil)|Hcy|opf|Jcy|fr|appa))
| (l(s(h|cr|trok|im(e|g)?|q(uo(r)?|b)|aquo)|h(ar(d|u(l)?)|blk)|n(sim|e(q(q)?)?|E|ap(prox)?)|c(y|ub|e(il|dil)|aron)|Barr|t(hree|c(c|ir)|imes|dot|quest|larr|r(i(e|f)?|Par))?|Har|o(ng(left(arrow|rightarrow)|rightarrow|mapsto)|times|z(enge|f)?|oparrow(left|right)|p(f|lus|ar)|w(ast|bar)|a(ng|rr)|brk)|d(sh|ca|quo(r)?|r(dhar|ushar))|ur(dshar|uhar)|jcy|par(lt)?|e(s(s(sim|dot|eq(qgtr|gtr)|approx|gtr)|cc|dot(o(r)?)?|g(es)?)?|q(slant|q)?|ft(harpoon(down|up)|threetimes|leftarrows|arrow(tail)?|right(squigarrow|harpoons|arrow(s)?))|g)?|v(nE|ertneqq)|f(isht|loor|r)|E(g)?|l(hard|corner|tri|arr)?|a(ng(d|le)?|cute|t(e(s)?|ail)?|p|emptyv|quo|rr(sim|hk|tl|pl|fs|lp|b(fs)?)?|gran|mbda)|r(har(d)?|corner|tri|arr|m)|g(E)?|m(idot|oust(ache)?)|b(arr|r(k(sl(d|u)|e)|ac(e|k))|brk)|A(tail|arr|rr))|L(s(h|cr|trok)|c(y|edil|aron)|t|o(ng(RightArrow|left(arrow|rightarrow)|rightarrow|Left(RightArrow|Arrow))|pf|wer(RightArrow|LeftArrow))|T|e(ss(Greater|SlantEqual|Tilde|EqualGreater|FullEqual|Less)|ft(Right(Vector|Arrow)|Ceiling|T(ee(Vector|Arrow)?|riangle(Bar|Equal)?)|Do(ubleBracket|wn(TeeVector|Vector(Bar)?))|Up(TeeVector|DownVector|Vector(Bar)?)|Vector(Bar)?|arrow|rightarrow|Floor|A(ngleBracket|rrow(RightArrow|Bar)?)))|Jcy|fr|l(eftarrow)?|a(ng|cute|placetrf|rr|mbda)|midot))
| (M(scr|cy|inusPlus|opf|u|e(diumSpace|llintrf)|fr|ap)|m(s(cr|tpos)|ho|nplus|c(y|omma)|i(nus(d(u)?|b)?|cro|d(cir|dot|ast)?)|o(dels|pf)|dash|u(ltimap|map)?|p|easuredangle|DDot|fr|l(cp|dr)|a(cr|p(sto(down|up|left)?)?|l(t(ese)?|e)|rker)))
| (n(s(hort(parallel|mid)|c(cue|e|r)?|im(e(q)?)?|u(cc(eq)?|p(set(eq(q)?)?|e|E)?|b(set(eq(q)?)?|e|E)?)|par|qsu(pe|be)|mid)|Rightarrow|h(par|arr|Arr)|G(t(v)?|g)|c(y|ong(dot)?|up|edil|a(p|ron))|t(ilde|lg|riangle(left(eq)?|right(eq)?)|gl)|i(s(d)?|v)?|o(t(ni(v(c|a|b))?|in(dot|v(c|a|b)|E)?)?|pf)|dash|u(m(sp|ero)?)?|jcy|p(olint|ar(sl|t|allel)?|r(cue|e(c(eq)?)?)?)|e(s(im|ear)|dot|quiv|ar(hk|r(ow)?)|xist(s)?|Arr)?|v(sim|infin|Harr|dash|Dash|l(t(rie)?|e|Arr)|ap|r(trie|Arr)|g(t|e))|fr|w(near|ar(hk|r(ow)?)|Arr)|V(dash|Dash)|l(sim|t(ri(e)?)?|dr|e(s(s)?|q(slant|q)?|ft(arrow|rightarrow))?|E|arr|Arr)|a(ng|cute|tur(al(s)?)?|p(id|os|prox|E)?|bla)|r(tri(e)?|ightarrow|arr(c|w)?|Arr)|g(sim|t(r)?|e(s|q(slant|q)?)?|E)|mid|L(t(v)?|eft(arrow|rightarrow)|l)|b(sp|ump(e)?))|N(scr|c(y|edil|aron)|tilde|o(nBreakingSpace|Break|t(R(ightTriangle(Bar|Equal)?|everseElement)|Greater(Greater|SlantEqual|Tilde|Equal|FullEqual|Less)?|S(u(cceeds(SlantEqual|Tilde|Equal)?|perset(Equal)?|bset(Equal)?)|quareSu(perset(Equal)?|bset(Equal)?))|Hump(DownHump|Equal)|Nested(GreaterGreater|LessLess)|C(ongruent|upCap)|Tilde(Tilde|Equal|FullEqual)?|DoubleVerticalBar|Precedes(SlantEqual|Equal)?|E(qual(Tilde)?|lement|xists)|VerticalBar|Le(ss(Greater|SlantEqual|Tilde|Equal|Less)?|ftTriangle(Bar|Equal)?))?|pf)|u|e(sted(GreaterGreater|LessLess)|wLine|gative(MediumSpace|Thi(nSpace|ckSpace)|VeryThinSpace))|Jcy|fr|acute))
| (o(s(cr|ol|lash)|h(m|bar)|c(y|ir(c)?)|ti(lde|mes(as)?)|S|int|opf|d(sold|iv|ot|ash|blac)|uml|p(erp|lus|ar)|elig|vbar|f(cir|r)|l(c(ir|ross)|t|ine|arr)|a(st|cute)|r(slope|igof|or|d(er(of)?|f|m)?|v|arr)?|g(t|on|rave)|m(i(nus|cron|d)|ega|acr))|O(s(cr|lash)|c(y|irc)|ti(lde|mes)|opf|dblac|uml|penCurly(DoubleQuote|Quote)|ver(B(ar|rac(e|ket))|Parenthesis)|fr|Elig|acute|r|grave|m(icron|ega|acr)))
| (p(s(cr|i)|h(i(v)?|one|mmat)|cy|i(tchfork|v)?|o(intint|und|pf)|uncsp|er(cnt|tenk|iod|p|mil)|fr|l(us(sim|cir|two|d(o|u)|e|acir|mn|b)?|an(ck(h)?|kv))|ar(s(im|l)|t|a(llel)?)?|r(sim|n(sim|E|ap)|cue|ime(s)?|o(d|p(to)?|f(surf|line|alar))|urel|e(c(sim|n(sim|eqq|approx)|curlyeq|eq|approx)?)?|E|ap)?|m)|P(s(cr|i)|hi|cy|i|o(incareplane|pf)|fr|lusMinus|artialD|r(ime|o(duct|portion(al)?)|ecedes(SlantEqual|Tilde|Equal)?)?))
| (q(scr|int|opf|u(ot|est(eq)?|at(int|ernions))|prime|fr)|Q(scr|opf|UOT|fr))
| (R(s(h|cr)|ho|c(y|edil|aron)|Barr|ight(Ceiling|T(ee(Vector|Arrow)?|riangle(Bar|Equal)?)|Do(ubleBracket|wn(TeeVector|Vector(Bar)?))|Up(TeeVector|DownVector|Vector(Bar)?)|Vector(Bar)?|arrow|Floor|A(ngleBracket|rrow(Bar|LeftArrow)?))|o(undImplies|pf)|uleDelayed|e(verse(UpEquilibrium|E(quilibrium|lement)))?|fr|EG|a(ng|cute|rr(tl)?)|rightarrow)|r(s(h|cr|q(uo(r)?|b)|aquo)|h(o(v)?|ar(d|u(l)?))|nmid|c(y|ub|e(il|dil)|aron)|Barr|t(hree|imes|ri(e|f|ltri)?)|i(singdotseq|ng|ght(squigarrow|harpoon(down|up)|threetimes|left(harpoons|arrows)|arrow(tail)?|rightarrows))|Har|o(times|p(f|lus|ar)|a(ng|rr)|brk)|d(sh|ca|quo(r)?|ldhar)|uluhar|p(polint|ar(gt)?)|e(ct|al(s|ine|part)?|g)|f(isht|loor|r)|l(har|arr|m)|a(ng(d|e|le)?|c(ute|e)|t(io(nals)?|ail)|dic|emptyv|quo|rr(sim|hk|c|tl|pl|fs|w|lp|ap|b(fs)?)?)|rarr|x|moust(ache)?|b(arr|r(k(sl(d|u)|e)|ac(e|k))|brk)|A(tail|arr|rr)))
| (s(s(cr|tarf|etmn|mile)|h(y|c(hcy|y)|ort(parallel|mid)|arp)|c(sim|y|n(sim|E|ap)|cue|irc|polint|e(dil)?|E|a(p|ron))?|t(ar(f)?|r(ns|aight(phi|epsilon)))|i(gma(v|f)?|m(ne|dot|plus|e(q)?|l(E)?|rarr|g(E)?)?)|zlig|o(pf|ftcy|l(b(ar)?)?)|dot(e|b)?|u(ng|cc(sim|n(sim|eqq|approx)|curlyeq|eq|approx)?|p(s(im|u(p|b)|et(neq(q)?|eq(q)?)?)|hs(ol|ub)|1|n(e|E)|2|d(sub|ot)|3|plus|e(dot)?|E|larr|mult)?|m|b(s(im|u(p|b)|et(neq(q)?|eq(q)?)?)|n(e|E)|dot|plus|e(dot)?|E|rarr|mult)?)|pa(des(uit)?|r)|e(swar|ct|tm(n|inus)|ar(hk|r(ow)?)|xt|mi|Arr)|q(su(p(set(eq)?|e)?|b(set(eq)?|e)?)|c(up(s)?|ap(s)?)|u(f|ar(e|f))?)|fr(own)?|w(nwar|ar(hk|r(ow)?)|Arr)|larr|acute|rarr|m(t(e(s)?)?|i(d|le)|eparsl|a(shp|llsetminus))|bquo)|S(scr|hort(RightArrow|DownArrow|UpArrow|LeftArrow)|c(y|irc|edil|aron)?|tar|igma|H(cy|CHcy)|opf|u(c(hThat|ceeds(SlantEqual|Tilde|Equal)?)|p(set|erset(Equal)?)?|m|b(set(Equal)?)?)|OFTcy|q(uare(Su(perset(Equal)?|bset(Equal)?)|Intersection|Union)?|rt)|fr|acute|mallCircle))
| (t(s(hcy|c(y|r)|trok)|h(i(nsp|ck(sim|approx))|orn|e(ta(sym|v)?|re(4|fore))|k(sim|ap))|c(y|edil|aron)|i(nt|lde|mes(d|b(ar)?)?)|o(sa|p(cir|f(ork)?|bot)?|ea)|dot|prime|elrec|fr|w(ixt|ohead(leftarrow|rightarrow))|a(u|rget)|r(i(sb|time|dot|plus|e|angle(down|q|left(eq)?|right(eq)?)?|minus)|pezium|ade)|brk)|T(s(cr|trok)|RADE|h(i(nSpace|ckSpace)|e(ta|refore))|c(y|edil|aron)|S(cy|Hcy)|ilde(Tilde|Equal|FullEqual)?|HORN|opf|fr|a(u|b)|ripleDot))
| (u(scr|h(ar(l|r)|blk)|c(y|irc)|t(ilde|dot|ri(f)?)|Har|o(pf|gon)|d(har|arr|blac)|u(arr|ml)|p(si(h|lon)?|harpoon(left|right)|downarrow|uparrows|lus|arrow)|f(isht|r)|wangle|l(c(orn(er)?|rop)|tri)|a(cute|rr)|r(c(orn(er)?|rop)|tri|ing)|grave|m(l|acr)|br(cy|eve)|Arr)|U(scr|n(ion(Plus)?|der(B(ar|rac(e|ket))|Parenthesis))|c(y|irc)|tilde|o(pf|gon)|dblac|uml|p(si(lon)?|downarrow|Tee(Arrow)?|per(RightArrow|LeftArrow)|DownArrow|Equilibrium|arrow|Arrow(Bar|DownArrow)?)|fr|a(cute|rr(ocir)?)|ring|grave|macr|br(cy|eve)))
| (v(s(cr|u(pn(e|E)|bn(e|E)))|nsu(p|b)|cy|Bar(v)?|zigzag|opf|dash|prop|e(e(eq|bar)?|llip|r(t|bar))|Dash|fr|ltri|a(ngrt|r(s(igma|u(psetneq(q)?|bsetneq(q)?))|nothing|t(heta|riangle(left|right))|p(hi|i|ropto)|epsilon|kappa|r(ho)?))|rtri|Arr)|V(scr|cy|opf|dash(l)?|e(e|r(yThinSpace|t(ical(Bar|Separator|Tilde|Line))?|bar))|Dash|vdash|fr|bar))
| (w(scr|circ|opf|p|e(ierp|d(ge(q)?|bar))|fr|r(eath)?)|W(scr|circ|opf|edge|fr))
| (X(scr|i|opf|fr)|x(s(cr|qcup)|h(arr|Arr)|nis|c(irc|up|ap)|i|o(time|dot|p(f|lus))|dtri|u(tri|plus)|vee|fr|wedge|l(arr|Arr)|r(arr|Arr)|map))
| (y(scr|c(y|irc)|icy|opf|u(cy|ml)|en|fr|ac(y|ute))|Y(scr|c(y|irc)|opf|uml|Icy|Ucy|fr|acute|Acy))
| (z(scr|hcy|c(y|aron)|igrarr|opf|dot|e(ta|etrf)|fr|w(nj|j)|acute)|Z(scr|c(y|aron)|Hcy|opf|dot|e(ta|roWidthSpace)|fr|acute))
)
(;)
`, name: "constant.character.entity.named.$2.html" }, { captures: { 1: { name: "punctuation.definition.entity.html" }, 3: { name: "punctuation.definition.entity.html" } }, match: "(&)#[0-9]+(;)", name: "constant.character.entity.numeric.decimal.html" }, { captures: { 1: { name: "punctuation.definition.entity.html" }, 3: { name: "punctuation.definition.entity.html" } }, match: "(&)#[xX][0-9a-fA-F]+(;)", name: "constant.character.entity.numeric.hexadecimal.html" }, { match: "&(?=[a-zA-Z0-9]+;)", name: "invalid.illegal.ambiguous-ampersand.html" }] }, math: { patterns: [{ begin: `(?i)(<)(math)(?=\\s|/?>)(?:(([^"'>]|"[^"]*"|'[^']*')*)(>))?`, beginCaptures: { 0: { name: "meta.tag.structure.$2.start.html" }, 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { patterns: [{ include: "#attribute" }] }, 5: { name: "punctuation.definition.tag.end.html" } }, end: "(?i)(</)(\\2)\\s*(>)", endCaptures: { 0: { name: "meta.tag.structure.$2.end.html" }, 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { name: "punctuation.definition.tag.end.html" } }, name: "meta.element.structure.$2.html", patterns: [{ begin: "(?<!>)\\G", end: ">", endCaptures: { 0: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.structure.start.html", patterns: [{ include: "#attribute" }] }, { include: "#tags" }] }], repository: { attribute: { patterns: [{ begin: "(s(hift|ymmetric|cript(sizemultiplier|level|minsize)|t(ackalign|retchy)|ide|u(pscriptshift|bscriptshift)|e(parator(s)?|lection)|rc)|h(eight|ref)|n(otation|umalign)|c(haralign|olumn(spa(n|cing)|width|lines|align)|lose|rossout)|i(n(dent(shift(first|last)?|target|align(first|last)?)|fixlinebreakstyle)|d)|o(pen|verflow)|d(i(splay(style)?|r)|e(nomalign|cimalpoint|pth))|position|e(dge|qual(columns|rows))|voffset|f(orm|ence|rame(spacing)?)|width|l(space|ine(thickness|leading|break(style|multchar)?)|o(ngdivstyle|cation)|ength|quote|argeop)|a(c(cent(under)?|tiontype)|l(t(text|img(-(height|valign|width))?)|ign(mentscope)?))|r(space|ow(spa(n|cing)|lines|align)|quote)|groupalign|x(link:href|mlns)|m(in(size|labelspacing)|ovablelimits|a(th(size|color|variant|background)|xsize))|bevelled)(?![\\w:-])", beginCaptures: { 0: { name: "entity.other.attribute-name.html" } }, end: "(?=\\s*+[^=\\s])", name: "meta.attribute.$1.html", patterns: [{ include: "#attribute-interior" }] }, { begin: `([^\\x{0020}"'<>/=\\x{0000}-\\x{001F}\\x{007F}-\\x{009F}\\x{FDD0}-\\x{FDEF}\\x{FFFE}\\x{FFFF}\\x{1FFFE}\\x{1FFFF}\\x{2FFFE}\\x{2FFFF}\\x{3FFFE}\\x{3FFFF}\\x{4FFFE}\\x{4FFFF}\\x{5FFFE}\\x{5FFFF}\\x{6FFFE}\\x{6FFFF}\\x{7FFFE}\\x{7FFFF}\\x{8FFFE}\\x{8FFFF}\\x{9FFFE}\\x{9FFFF}\\x{AFFFE}\\x{AFFFF}\\x{BFFFE}\\x{BFFFF}\\x{CFFFE}\\x{CFFFF}\\x{DFFFE}\\x{DFFFF}\\x{EFFFE}\\x{EFFFF}\\x{FFFFE}\\x{FFFFF}\\x{10FFFE}\\x{10FFFF}]+)`, beginCaptures: { 0: { name: "entity.other.attribute-name.html" } }, comment: "Anything else that is valid", end: "(?=\\s*+[^=\\s])", name: "meta.attribute.unrecognized.$1.html", patterns: [{ include: "#attribute-interior" }] }, { match: "[^\\s>]+", name: "invalid.illegal.character-not-allowed-here.html" }] }, tags: { patterns: [{ include: "#comment" }, { include: "#cdata" }, { captures: { 0: { name: "meta.tag.structure.math.$2.void.html" }, 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { patterns: [{ include: "#attribute" }] }, 5: { name: "punctuation.definition.tag.end.html" } }, match: `(?i)(<)(annotation|annotation-xml|semantics|menclose|merror|mfenced|mfrac|mpadded|mphantom|mroot|mrow|msqrt|mstyle|mmultiscripts|mover|mprescripts|msub|msubsup|msup|munder|munderover|none|mlabeledtr|mtable|mtd|mtr|mlongdiv|mscarries|mscarry|msgroup|msline|msrow|mstack|maction)(?=\\s|/?>)(?:(([^"'>]|"[^"]*"|'[^']*')*)(/>))`, name: "meta.element.structure.math.$2.html" }, { begin: `(?i)(<)(annotation|annotation-xml|semantics|menclose|merror|mfenced|mfrac|mpadded|mphantom|mroot|mrow|msqrt|mstyle|mmultiscripts|mover|mprescripts|msub|msubsup|msup|munder|munderover|none|mlabeledtr|mtable|mtd|mtr|mlongdiv|mscarries|mscarry|msgroup|msline|msrow|mstack|maction)(?=\\s|/?>)(?:(([^"'>]|"[^"]*"|'[^']*')*)(>))?`, beginCaptures: { 0: { name: "meta.tag.structure.math.$2.start.html" }, 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { patterns: [{ include: "#attribute" }] }, 5: { name: "punctuation.definition.tag.end.html" } }, end: "(?i)(</)(\\2)\\s*(>)|(/>)|(?=</\\w+)", endCaptures: { 0: { name: "meta.tag.structure.math.$2.end.html" }, 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { name: "punctuation.definition.tag.end.html" }, 4: { name: "punctuation.definition.tag.end.html" } }, name: "meta.element.structure.math.$2.html", patterns: [{ begin: "(?<!>)\\G", end: "(?=/>)|>", endCaptures: { 0: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.structure.start.html", patterns: [{ include: "#attribute" }] }, { include: "#tags" }] }, { captures: { 0: { name: "meta.tag.inline.math.$2.void.html" }, 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { patterns: [{ include: "#attribute" }] }, 5: { name: "punctuation.definition.tag.end.html" } }, match: `(?i)(<)(mi|mn|mo|ms|mspace|mtext|maligngroup|malignmark)(?=\\s|/?>)(?:(([^"'>]|"[^"]*"|'[^']*')*)(/>))`, name: "meta.element.inline.math.$2.html" }, { begin: `(?i)(<)(mi|mn|mo|ms|mspace|mtext|maligngroup|malignmark)(?=\\s|/?>)(?:(([^"'>]|"[^"]*"|'[^']*')*)(>))?`, beginCaptures: { 0: { name: "meta.tag.inline.math.$2.start.html" }, 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { patterns: [{ include: "#attribute" }] }, 5: { name: "punctuation.definition.tag.end.html" } }, end: "(?i)(</)(\\2)\\s*(>)|(/>)|(?=</\\w+)", endCaptures: { 0: { name: "meta.tag.inline.math.$2.end.html" }, 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { name: "punctuation.definition.tag.end.html" }, 4: { name: "punctuation.definition.tag.end.html" } }, name: "meta.element.inline.math.$2.html", patterns: [{ begin: "(?<!>)\\G", end: "(?=/>)|>", endCaptures: { 0: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.inline.start.html", patterns: [{ include: "#attribute" }] }, { include: "#tags" }] }, { captures: { 0: { name: "meta.tag.object.math.$2.void.html" }, 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { patterns: [{ include: "#attribute" }] }, 5: { name: "punctuation.definition.tag.end.html" } }, match: `(?i)(<)(mglyph)(?=\\s|/?>)(?:(([^"'>]|"[^"]*"|'[^']*')*)(/>))`, name: "meta.element.object.math.$2.html" }, { begin: `(?i)(<)(mglyph)(?=\\s|/?>)(?:(([^"'>]|"[^"]*"|'[^']*')*)(>))?`, beginCaptures: { 0: { name: "meta.tag.object.math.$2.start.html" }, 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { patterns: [{ include: "#attribute" }] }, 5: { name: "punctuation.definition.tag.end.html" } }, end: "(?i)(</)(\\2)\\s*(>)|(/>)|(?=</\\w+)", endCaptures: { 0: { name: "meta.tag.object.math.$2.end.html" }, 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { name: "punctuation.definition.tag.end.html" }, 4: { name: "punctuation.definition.tag.end.html" } }, name: "meta.element.object.math.$2.html", patterns: [{ begin: "(?<!>)\\G", end: "(?=/>)|>", endCaptures: { 0: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.object.start.html", patterns: [{ include: "#attribute" }] }, { include: "#tags" }] }, { captures: { 0: { name: "meta.tag.other.invalid.void.html" }, 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { name: "invalid.illegal.unrecognized-tag.html" }, 4: { patterns: [{ include: "#attribute" }] }, 6: { name: "punctuation.definition.tag.end.html" } }, match: `(?i)(<)(([\\w:]+))(?=\\s|/?>)(?:(([^"'>]|"[^"]*"|'[^']*')*)(/>))`, name: "meta.element.other.invalid.html" }, { begin: `(?i)(<)((\\w[^\\s>]*))(?=\\s|/?>)(?:(([^"'>]|"[^"]*"|'[^']*')*)(>))?`, beginCaptures: { 0: { name: "meta.tag.other.invalid.start.html" }, 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { name: "invalid.illegal.unrecognized-tag.html" }, 4: { patterns: [{ include: "#attribute" }] }, 6: { name: "punctuation.definition.tag.end.html" } }, end: "(?i)(</)((\\2))\\s*(>)|(/>)|(?=</\\w+)", endCaptures: { 0: { name: "meta.tag.other.invalid.end.html" }, 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { name: "invalid.illegal.unrecognized-tag.html" }, 4: { name: "punctuation.definition.tag.end.html" }, 5: { name: "punctuation.definition.tag.end.html" } }, name: "meta.element.other.invalid.html", patterns: [{ begin: "(?<!>)\\G", end: "(?=/>)|>", endCaptures: { 0: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.other.invalid.start.html", patterns: [{ include: "#attribute" }] }, { include: "#tags" }] }, { include: "#tags-invalid" }] } } }, svg: { patterns: [{ begin: `(?i)(<)(svg)(?=\\s|/?>)(?:(([^"'>]|"[^"]*"|'[^']*')*)(>))?`, beginCaptures: { 0: { name: "meta.tag.structure.$2.start.html" }, 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { patterns: [{ include: "#attribute" }] }, 5: { name: "punctuation.definition.tag.end.html" } }, end: "(?i)(</)(\\2)\\s*(>)", endCaptures: { 0: { name: "meta.tag.structure.$2.end.html" }, 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { name: "punctuation.definition.tag.end.html" } }, name: "meta.element.structure.$2.html", patterns: [{ begin: "(?<!>)\\G", end: ">", endCaptures: { 0: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.structure.start.html", patterns: [{ include: "#attribute" }] }, { include: "#tags" }] }], repository: { attribute: { patterns: [{ begin: "(s(hape-rendering|ystemLanguage|cale|t(yle|itchTiles|op-(color|opacity)|dDeviation|em(h|v)|artOffset|r(i(ng|kethrough-(thickness|position))|oke(-(opacity|dash(offset|array)|width|line(cap|join)|miterlimit))?))|urfaceScale|p(e(cular(Constant|Exponent)|ed)|acing|readMethod)|eed|lope)|h(oriz-(origin-x|adv-x)|eight|anging|ref(lang)?)|y(1|2|ChannelSelector)?|n(umOctaves|ame)|c(y|o(ntentS(criptType|tyleType)|lor(-(interpolation(-filters)?|profile|rendering))?)|ursor|l(ip(-(path|rule)|PathUnits)?|ass)|a(p-height|lcMode)|x)|t(ype|o|ext(-(decoration|anchor|rendering)|Length)|a(rget(X|Y)?|b(index|leValues))|ransform)|i(n(tercept|2)?|d(eographic)?|mage-rendering)|z(oomAndPan)?|o(p(erator|acity)|ver(flow|line-(thickness|position))|ffset|r(i(ent(ation)?|gin)|der))|d(y|i(splay|visor|ffuseConstant|rection)|ominant-baseline|ur|e(scent|celerate)|x)?|u(1|n(i(code(-(range|bidi))?|ts-per-em)|derline-(thickness|position))|2)|p(ing|oint(s(At(X|Y|Z))?|er-events)|a(nose-1|t(h(Length)?|tern(ContentUnits|Transform|Units))|int-order)|r(imitiveUnits|eserveA(spectRatio|lpha)))|e(n(d|able-background)|dgeMode|levation|x(ternalResourcesRequired|ponent))|v(i(sibility|ew(Box|Target))|-(hanging|ideographic|alphabetic|mathematical)|e(ctor-effect|r(sion|t-(origin-(y|x)|adv-y)))|alues)|k(1|2|3|e(y(Splines|Times|Points)|rn(ing|el(Matrix|UnitLength)))|4)?|f(y|il(ter(Res|Units)?|l(-(opacity|rule))?)|o(nt-(s(t(yle|retch)|ize(-adjust)?)|variant|family|weight)|rmat)|lood-(color|opacity)|r(om)?|x)|w(idth(s)?|ord-spacing|riting-mode)|l(i(ghting-color|mitingConeAngle)|ocal|e(ngthAdjust|tter-spacing)|ang)|a(scent|cc(umulate|ent-height)|ttribute(Name|Type)|zimuth|dditive|utoReverse|l(ignment-baseline|phabetic|lowReorder)|rabic-form|mplitude)|r(y|otate|e(s(tart|ult)|ndering-intent|peat(Count|Dur)|quired(Extensions|Features)|f(X|Y|errerPolicy)|l)|adius|x)?|g(1|2|lyph(Ref|-(name|orientation-(horizontal|vertical)))|radient(Transform|Units))|x(1|2|ChannelSelector|-height|link:(show|href|t(ype|itle)|a(ctuate|rcrole)|role)|ml:(space|lang|base))?|m(in|ode|e(thod|dia)|a(sk(ContentUnits|Units)?|thematical|rker(Height|-(start|end|mid)|Units|Width)|x))|b(y|ias|egin|ase(Profile|line-shift|Frequency)|box))(?![\\w:-])", beginCaptures: { 0: { name: "entity.other.attribute-name.html" } }, end: "(?=\\s*+[^=\\s])", name: "meta.attribute.$1.html", patterns: [{ include: "#attribute-interior" }] }, { begin: `([^\\x{0020}"'<>/=\\x{0000}-\\x{001F}\\x{007F}-\\x{009F}\\x{FDD0}-\\x{FDEF}\\x{FFFE}\\x{FFFF}\\x{1FFFE}\\x{1FFFF}\\x{2FFFE}\\x{2FFFF}\\x{3FFFE}\\x{3FFFF}\\x{4FFFE}\\x{4FFFF}\\x{5FFFE}\\x{5FFFF}\\x{6FFFE}\\x{6FFFF}\\x{7FFFE}\\x{7FFFF}\\x{8FFFE}\\x{8FFFF}\\x{9FFFE}\\x{9FFFF}\\x{AFFFE}\\x{AFFFF}\\x{BFFFE}\\x{BFFFF}\\x{CFFFE}\\x{CFFFF}\\x{DFFFE}\\x{DFFFF}\\x{EFFFE}\\x{EFFFF}\\x{FFFFE}\\x{FFFFF}\\x{10FFFE}\\x{10FFFF}]+)`, beginCaptures: { 0: { name: "entity.other.attribute-name.html" } }, comment: "Anything else that is valid", end: "(?=\\s*+[^=\\s])", name: "meta.attribute.unrecognized.$1.html", patterns: [{ include: "#attribute-interior" }] }, { match: "[^\\s>]+", name: "invalid.illegal.character-not-allowed-here.html" }] }, tags: { patterns: [{ include: "#comment" }, { include: "#cdata" }, { captures: { 0: { name: "meta.tag.metadata.svg.$2.void.html" }, 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { patterns: [{ include: "#attribute" }] }, 5: { name: "punctuation.definition.tag.end.html" } }, match: `(?i)(<)(color-profile|desc|metadata|script|style|title)(?=\\s|/?>)(?:(([^"'>]|"[^"]*"|'[^']*')*)(/>))`, name: "meta.element.metadata.svg.$2.html" }, { begin: `(?i)(<)(color-profile|desc|metadata|script|style|title)(?=\\s|/?>)(?:(([^"'>]|"[^"]*"|'[^']*')*)(>))?`, beginCaptures: { 0: { name: "meta.tag.metadata.svg.$2.start.html" }, 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { patterns: [{ include: "#attribute" }] }, 5: { name: "punctuation.definition.tag.end.html" } }, end: "(?i)(</)(\\2)\\s*(>)|(/>)|(?=</\\w+)", endCaptures: { 0: { name: "meta.tag.metadata.svg.$2.end.html" }, 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { name: "punctuation.definition.tag.end.html" }, 4: { name: "punctuation.definition.tag.end.html" } }, name: "meta.element.metadata.svg.$2.html", patterns: [{ begin: "(?<!>)\\G", end: "(?=/>)|>", endCaptures: { 0: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.metadata.start.html", patterns: [{ include: "#attribute" }] }, { include: "#tags" }] }, { captures: { 0: { name: "meta.tag.structure.svg.$2.void.html" }, 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { patterns: [{ include: "#attribute" }] }, 5: { name: "punctuation.definition.tag.end.html" } }, match: `(?i)(<)(animateMotion|clipPath|defs|feComponentTransfer|feDiffuseLighting|feMerge|feSpecularLighting|filter|g|hatch|linearGradient|marker|mask|mesh|meshgradient|meshpatch|meshrow|pattern|radialGradient|switch|text|textPath)(?=\\s|/?>)(?:(([^"'>]|"[^"]*"|'[^']*')*)(/>))`, name: "meta.element.structure.svg.$2.html" }, { begin: `(?i)(<)(animateMotion|clipPath|defs|feComponentTransfer|feDiffuseLighting|feMerge|feSpecularLighting|filter|g|hatch|linearGradient|marker|mask|mesh|meshgradient|meshpatch|meshrow|pattern|radialGradient|switch|text|textPath)(?=\\s|/?>)(?:(([^"'>]|"[^"]*"|'[^']*')*)(>))?`, beginCaptures: { 0: { name: "meta.tag.structure.svg.$2.start.html" }, 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { patterns: [{ include: "#attribute" }] }, 5: { name: "punctuation.definition.tag.end.html" } }, end: "(?i)(</)(\\2)\\s*(>)|(/>)|(?=</\\w+)", endCaptures: { 0: { name: "meta.tag.structure.svg.$2.end.html" }, 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { name: "punctuation.definition.tag.end.html" }, 4: { name: "punctuation.definition.tag.end.html" } }, name: "meta.element.structure.svg.$2.html", patterns: [{ begin: "(?<!>)\\G", end: "(?=/>)|>", endCaptures: { 0: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.structure.start.html", patterns: [{ include: "#attribute" }] }, { include: "#tags" }] }, { captures: { 0: { name: "meta.tag.inline.svg.$2.void.html" }, 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { patterns: [{ include: "#attribute" }] }, 5: { name: "punctuation.definition.tag.end.html" } }, match: `(?i)(<)(a|animate|discard|feBlend|feColorMatrix|feComposite|feConvolveMatrix|feDisplacementMap|feDistantLight|feDropShadow|feFlood|feFuncA|feFuncB|feFuncG|feFuncR|feGaussianBlur|feMergeNode|feMorphology|feOffset|fePointLight|feSpotLight|feTile|feTurbulence|hatchPath|mpath|set|solidcolor|stop|tspan)(?=\\s|/?>)(?:(([^"'>]|"[^"]*"|'[^']*')*)(/>))`, name: "meta.element.inline.svg.$2.html" }, { begin: `(?i)(<)(a|animate|discard|feBlend|feColorMatrix|feComposite|feConvolveMatrix|feDisplacementMap|feDistantLight|feDropShadow|feFlood|feFuncA|feFuncB|feFuncG|feFuncR|feGaussianBlur|feMergeNode|feMorphology|feOffset|fePointLight|feSpotLight|feTile|feTurbulence|hatchPath|mpath|set|solidcolor|stop|tspan)(?=\\s|/?>)(?:(([^"'>]|"[^"]*"|'[^']*')*)(>))?`, beginCaptures: { 0: { name: "meta.tag.inline.svg.$2.start.html" }, 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { patterns: [{ include: "#attribute" }] }, 5: { name: "punctuation.definition.tag.end.html" } }, end: "(?i)(</)(\\2)\\s*(>)|(/>)|(?=</\\w+)", endCaptures: { 0: { name: "meta.tag.inline.svg.$2.end.html" }, 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { name: "punctuation.definition.tag.end.html" }, 4: { name: "punctuation.definition.tag.end.html" } }, name: "meta.element.inline.svg.$2.html", patterns: [{ begin: "(?<!>)\\G", end: "(?=/>)|>", endCaptures: { 0: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.inline.start.html", patterns: [{ include: "#attribute" }] }, { include: "#tags" }] }, { captures: { 0: { name: "meta.tag.object.svg.$2.void.html" }, 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { patterns: [{ include: "#attribute" }] }, 5: { name: "punctuation.definition.tag.end.html" } }, match: `(?i)(<)(circle|ellipse|feImage|foreignObject|image|line|path|polygon|polyline|rect|symbol|use|view)(?=\\s|/?>)(?:(([^"'>]|"[^"]*"|'[^']*')*)(/>))`, name: "meta.element.object.svg.$2.html" }, { begin: `(?i)(<)(a|circle|ellipse|feImage|foreignObject|image|line|path|polygon|polyline|rect|symbol|use|view)(?=\\s|/?>)(?:(([^"'>]|"[^"]*"|'[^']*')*)(>))?`, beginCaptures: { 0: { name: "meta.tag.object.svg.$2.start.html" }, 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { patterns: [{ include: "#attribute" }] }, 5: { name: "punctuation.definition.tag.end.html" } }, end: "(?i)(</)(\\2)\\s*(>)|(/>)|(?=</\\w+)", endCaptures: { 0: { name: "meta.tag.object.svg.$2.end.html" }, 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { name: "punctuation.definition.tag.end.html" }, 4: { name: "punctuation.definition.tag.end.html" } }, name: "meta.element.object.svg.$2.html", patterns: [{ begin: "(?<!>)\\G", end: "(?=/>)|>", endCaptures: { 0: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.object.start.html", patterns: [{ include: "#attribute" }] }, { include: "#tags" }] }, { captures: { 0: { name: "meta.tag.other.svg.$2.void.html" }, 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { name: "invalid.deprecated.html" }, 4: { patterns: [{ include: "#attribute" }] }, 6: { name: "punctuation.definition.tag.end.html" } }, match: `(?i)(<)((altGlyph|altGlyphDef|altGlyphItem|animateColor|animateTransform|cursor|font|font-face|font-face-format|font-face-name|font-face-src|font-face-uri|glyph|glyphRef|hkern|missing-glyph|tref|vkern))(?=\\s|/?>)(?:(([^"'>]|"[^"]*"|'[^']*')*)(/>))`, name: "meta.element.other.svg.$2.html" }, { begin: `(?i)(<)((altGlyph|altGlyphDef|altGlyphItem|animateColor|animateTransform|cursor|font|font-face|font-face-format|font-face-name|font-face-src|font-face-uri|glyph|glyphRef|hkern|missing-glyph|tref|vkern))(?=\\s|/?>)(?:(([^"'>]|"[^"]*"|'[^']*')*)(>))?`, beginCaptures: { 0: { name: "meta.tag.other.svg.$2.start.html" }, 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { name: "invalid.deprecated.html" }, 4: { patterns: [{ include: "#attribute" }] }, 6: { name: "punctuation.definition.tag.end.html" } }, end: "(?i)(</)((\\2))\\s*(>)|(/>)|(?=</\\w+)", endCaptures: { 0: { name: "meta.tag.other.svg.$2.end.html" }, 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { name: "invalid.deprecated.html" }, 4: { name: "punctuation.definition.tag.end.html" }, 5: { name: "punctuation.definition.tag.end.html" } }, name: "meta.element.other.svg.$2.html", patterns: [{ begin: "(?<!>)\\G", end: "(?=/>)|>", endCaptures: { 0: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.other.start.html", patterns: [{ include: "#attribute" }] }, { include: "#tags" }] }, { captures: { 0: { name: "meta.tag.other.invalid.void.html" }, 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { name: "invalid.illegal.unrecognized-tag.html" }, 4: { patterns: [{ include: "#attribute" }] }, 6: { name: "punctuation.definition.tag.end.html" } }, match: `(?i)(<)(([\\w:]+))(?=\\s|/?>)(?:(([^"'>]|"[^"]*"|'[^']*')*)(/>))`, name: "meta.element.other.invalid.html" }, { begin: `(?i)(<)((\\w[^\\s>]*))(?=\\s|/?>)(?:(([^"'>]|"[^"]*"|'[^']*')*)(>))?`, beginCaptures: { 0: { name: "meta.tag.other.invalid.start.html" }, 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { name: "invalid.illegal.unrecognized-tag.html" }, 4: { patterns: [{ include: "#attribute" }] }, 6: { name: "punctuation.definition.tag.end.html" } }, end: "(?i)(</)((\\2))\\s*(>)|(/>)|(?=</\\w+)", endCaptures: { 0: { name: "meta.tag.other.invalid.end.html" }, 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { name: "invalid.illegal.unrecognized-tag.html" }, 4: { name: "punctuation.definition.tag.end.html" }, 5: { name: "punctuation.definition.tag.end.html" } }, name: "meta.element.other.invalid.html", patterns: [{ begin: "(?<!>)\\G", end: "(?=/>)|>", endCaptures: { 0: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.other.invalid.start.html", patterns: [{ include: "#attribute" }] }, { include: "#tags" }] }, { include: "#tags-invalid" }] } } }, "tags-invalid": { patterns: [{ begin: "(</?)((\\w[^\\s>]*))(?<!/)", beginCaptures: { 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { name: "invalid.illegal.unrecognized-tag.html" } }, end: "((?: ?/)?>)", endCaptures: { 1: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.other.$2.html", patterns: [{ include: "#attribute" }] }] }, "tags-valid": { patterns: [{ begin: "(^[ \\t]+)?(?=<(?i:style)\\b(?!-))", beginCaptures: { 1: { name: "punctuation.whitespace.embedded.leading.html" } }, end: "(?!\\G)([ \\t]*$\\n?)?", endCaptures: { 1: { name: "punctuation.whitespace.embedded.trailing.html" } }, patterns: [{ begin: "(?i)(<)(style)(?=\\s|/?>)", beginCaptures: { 0: { name: "meta.tag.metadata.style.start.html" }, 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" } }, end: "(?i)((<)/)(style)\\s*(>)", endCaptures: { 0: { name: "meta.tag.metadata.style.end.html" }, 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "source.css-ignored-vscode" }, 3: { name: "entity.name.tag.html" }, 4: { name: "punctuation.definition.tag.end.html" } }, name: "meta.embedded.block.html", patterns: [{ begin: "\\G", captures: { 1: { name: "punctuation.definition.tag.end.html" } }, end: "(>)", name: "meta.tag.metadata.style.start.html", patterns: [{ include: "#attribute" }] }, { begin: "(?!\\G)", end: "(?=</(?i:style))", name: "source.css", patterns: [{ include: "source.css" }] }] }] }, { begin: "(^[ \\t]+)?(?=<(?i:script)\\b(?!-))", beginCaptures: { 1: { name: "punctuation.whitespace.embedded.leading.html" } }, end: "(?!\\G)([ \\t]*$\\n?)?", endCaptures: { 1: { name: "punctuation.whitespace.embedded.trailing.html" } }, patterns: [{ begin: "(<)((?i:script))\\b", beginCaptures: { 0: { name: "meta.tag.metadata.script.start.html" }, 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" } }, end: "(/)((?i:script))(>)", endCaptures: { 0: { name: "meta.tag.metadata.script.end.html" }, 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { name: "punctuation.definition.tag.end.html" } }, name: "meta.embedded.block.html", patterns: [{ begin: "\\G", end: "(?=/)", patterns: [{ begin: "(>)", beginCaptures: { 0: { name: "meta.tag.metadata.script.start.html" }, 1: { name: "punctuation.definition.tag.end.html" } }, end: "((<))(?=/(?i:script))", endCaptures: { 0: { name: "meta.tag.metadata.script.end.html" }, 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "source.js-ignored-vscode" } }, patterns: [{ begin: "\\G", end: "(?=</(?i:script))", name: "source.js", patterns: [{ begin: "(^[ \\t]+)?(?=//)", beginCaptures: { 1: { name: "punctuation.whitespace.comment.leading.js" } }, end: "(?!\\G)", patterns: [{ begin: "//", beginCaptures: { 0: { name: "punctuation.definition.comment.js" } }, end: "(?=<\/script)|\\n", name: "comment.line.double-slash.js" }] }, { begin: "/\\*", captures: { 0: { name: "punctuation.definition.comment.js" } }, end: "\\*/|(?=<\/script)", name: "comment.block.js" }, { include: "source.js" }] }] }, { begin: "\\G", end: `(?ix:
(?=>
| type(?=[\\s=])
(?!\\s*=\\s*
(
''
| ""
| ('|"|)
(
text/
(
javascript(1\\.[0-5])?
| x-javascript
| jscript
| livescript
| (x-)?ecmascript
| babel

)
| application/
(
(x-)?javascript
| (x-)?ecmascript
)
| module
)
[\\s"'>]
)
)
)
)`, name: "meta.tag.metadata.script.start.html", patterns: [{ include: "#attribute" }] }, { begin: `(?ix:
(?=
type\\s*=\\s*
('|"|)
text/
(
x-handlebars
| (x-(handlebars-)?|ng-)?template
| html
)
[\\s"'>]
)
)`, end: "((<))(?=/(?i:script))", endCaptures: { 0: { name: "meta.tag.metadata.script.end.html" }, 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "text.html.basic" } }, patterns: [{ begin: "\\G", end: "(>)", endCaptures: { 1: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.metadata.script.start.html", patterns: [{ include: "#attribute" }] }, { begin: "(?!\\G)", end: "(?=</(?i:script))", name: "text.html.basic", patterns: [{ include: "text.html.basic" }] }] }, { begin: "(?=(?i:type))", end: "(<)(?=/(?i:script))", endCaptures: { 0: { name: "meta.tag.metadata.script.end.html" }, 1: { name: "punctuation.definition.tag.begin.html" } }, patterns: [{ begin: "\\G", end: "(>)", endCaptures: { 1: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.metadata.script.start.html", patterns: [{ include: "#attribute" }] }, { begin: "(?!\\G)", end: "(?=</(?i:script))", name: "source.unknown" }] }] }] }] }, { begin: "(?i)(<)(base|link|meta)(?=\\s|/?>)", beginCaptures: { 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" } }, end: "/?>", endCaptures: { 0: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.metadata.$2.void.html", patterns: [{ include: "#attribute" }] }, { begin: "(?i)(<)(noscript|title)(?=\\s|/?>)", beginCaptures: { 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" } }, end: ">", endCaptures: { 0: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.metadata.$2.start.html", patterns: [{ include: "#attribute" }] }, { begin: "(?i)(</)(noscript|title)(?=\\s|/?>)", beginCaptures: { 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" } }, end: ">", endCaptures: { 0: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.metadata.$2.end.html", patterns: [{ include: "#attribute" }] }, { begin: "(?i)(<)(col|hr|input)(?=\\s|/?>)", beginCaptures: { 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" } }, end: "/?>", endCaptures: { 0: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.structure.$2.void.html", patterns: [{ include: "#attribute" }] }, { begin: "(?i)(<)(address|article|aside|blockquote|body|button|caption|colgroup|datalist|dd|details|dialog|div|dl|dt|fieldset|figcaption|figure|footer|form|head|header|hgroup|html|h[1-6]|label|legend|li|main|map|menu|meter|nav|ol|optgroup|option|output|p|pre|progress|section|select|slot|summary|table|tbody|td|template|textarea|tfoot|th|thead|tr|ul)(?=\\s|/?>)", beginCaptures: { 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" } }, end: ">", endCaptures: { 0: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.structure.$2.start.html", patterns: [{ include: "#attribute" }] }, { begin: "(?i)(</)(address|article|aside|blockquote|body|button|caption|colgroup|datalist|dd|details|dialog|div|dl|dt|fieldset|figcaption|figure|footer|form|head|header|hgroup|html|h[1-6]|label|legend|li|main|map|menu|meter|nav|ol|optgroup|option|output|p|pre|progress|section|select|slot|summary|table|tbody|td|template|textarea|tfoot|th|thead|tr|ul)(?=\\s|/?>)", beginCaptures: { 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" } }, end: ">", endCaptures: { 0: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.structure.$2.end.html", patterns: [{ include: "#attribute" }] }, { begin: "(?i)(<)(area|br|wbr)(?=\\s|/?>)", beginCaptures: { 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" } }, end: "/?>", endCaptures: { 0: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.inline.$2.void.html", patterns: [{ include: "#attribute" }] }, { begin: "(?i)(<)(a|abbr|b|bdi|bdo|cite|code|data|del|dfn|em|i|ins|kbd|mark|q|rp|rt|ruby|s|samp|small|span|strong|sub|sup|time|u|var)(?=\\s|/?>)", beginCaptures: { 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" } }, end: ">", endCaptures: { 0: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.inline.$2.start.html", patterns: [{ include: "#attribute" }] }, { begin: "(?i)(</)(a|abbr|b|bdi|bdo|cite|code|data|del|dfn|em|i|ins|kbd|mark|q|rp|rt|ruby|s|samp|small|span|strong|sub|sup|time|u|var)(?=\\s|/?>)", beginCaptures: { 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" } }, end: ">", endCaptures: { 0: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.inline.$2.end.html", patterns: [{ include: "#attribute" }] }, { begin: "(?i)(<)(embed|img|param|source|track)(?=\\s|/?>)", beginCaptures: { 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" } }, end: "/?>", endCaptures: { 0: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.object.$2.void.html", patterns: [{ include: "#attribute" }] }, { begin: "(?i)(<)(audio|canvas|iframe|object|picture|video)(?=\\s|/?>)", beginCaptures: { 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" } }, end: ">", endCaptures: { 0: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.object.$2.start.html", patterns: [{ include: "#attribute" }] }, { begin: "(?i)(</)(audio|canvas|iframe|object|picture|video)(?=\\s|/?>)", beginCaptures: { 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" } }, end: ">", endCaptures: { 0: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.object.$2.end.html", patterns: [{ include: "#attribute" }] }, { begin: "(?i)(<)((basefont|isindex))(?=\\s|/?>)", beginCaptures: { 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { name: "invalid.deprecated.html" } }, end: "/?>", endCaptures: { 0: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.metadata.$2.void.html", patterns: [{ include: "#attribute" }] }, { begin: "(?i)(<)((center|frameset|noembed|noframes))(?=\\s|/?>)", beginCaptures: { 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { name: "invalid.deprecated.html" } }, end: ">", endCaptures: { 0: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.structure.$2.start.html", patterns: [{ include: "#attribute" }] }, { begin: "(?i)(</)((center|frameset|noembed|noframes))(?=\\s|/?>)", beginCaptures: { 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { name: "invalid.deprecated.html" } }, end: ">", endCaptures: { 0: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.structure.$2.end.html", patterns: [{ include: "#attribute" }] }, { begin: "(?i)(<)((acronym|big|blink|font|strike|tt|xmp))(?=\\s|/?>)", beginCaptures: { 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { name: "invalid.deprecated.html" } }, end: ">", endCaptures: { 0: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.inline.$2.start.html", patterns: [{ include: "#attribute" }] }, { begin: "(?i)(</)((acronym|big|blink|font|strike|tt|xmp))(?=\\s|/?>)", beginCaptures: { 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { name: "invalid.deprecated.html" } }, end: ">", endCaptures: { 0: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.inline.$2.end.html", patterns: [{ include: "#attribute" }] }, { begin: "(?i)(<)((frame))(?=\\s|/?>)", beginCaptures: { 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { name: "invalid.deprecated.html" } }, end: "/?>", endCaptures: { 0: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.object.$2.void.html", patterns: [{ include: "#attribute" }] }, { begin: "(?i)(<)((applet))(?=\\s|/?>)", beginCaptures: { 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { name: "invalid.deprecated.html" } }, end: ">", endCaptures: { 0: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.object.$2.start.html", patterns: [{ include: "#attribute" }] }, { begin: "(?i)(</)((applet))(?=\\s|/?>)", beginCaptures: { 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { name: "invalid.deprecated.html" } }, end: ">", endCaptures: { 0: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.object.$2.end.html", patterns: [{ include: "#attribute" }] }, { begin: "(?i)(<)((dir|keygen|listing|menuitem|plaintext|spacer))(?=\\s|/?>)", beginCaptures: { 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { name: "invalid.illegal.no-longer-supported.html" } }, end: ">", endCaptures: { 0: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.other.$2.start.html", patterns: [{ include: "#attribute" }] }, { begin: "(?i)(</)((dir|keygen|listing|menuitem|plaintext|spacer))(?=\\s|/?>)", beginCaptures: { 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" }, 3: { name: "invalid.illegal.no-longer-supported.html" } }, end: ">", endCaptures: { 0: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.other.$2.end.html", patterns: [{ include: "#attribute" }] }, { include: "#math" }, { include: "#svg" }, { begin: "(<)([a-zA-Z][.0-9_a-zA-Z\\x{00B7}\\x{00C0}-\\x{00D6}\\x{00D8}-\\x{00F6}\\x{00F8}-\\x{037D}\\x{037F}-\\x{1FFF}\\x{200C}-\\x{200D}\\x{203F}-\\x{2040}\\x{2070}-\\x{218F}\\x{2C00}-\\x{2FEF}\\x{3001}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFFD}\\x{10000}-\\x{EFFFF}]*-[\\-.0-9_a-zA-Z\\x{00B7}\\x{00C0}-\\x{00D6}\\x{00D8}-\\x{00F6}\\x{00F8}-\\x{037D}\\x{037F}-\\x{1FFF}\\x{200C}-\\x{200D}\\x{203F}-\\x{2040}\\x{2070}-\\x{218F}\\x{2C00}-\\x{2FEF}\\x{3001}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFFD}\\x{10000}-\\x{EFFFF}]*)(?=\\s|/?>)", beginCaptures: { 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" } }, end: "/?>", endCaptures: { 0: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.custom.start.html", patterns: [{ include: "#attribute" }] }, { begin: "(</)([a-zA-Z][.0-9_a-zA-Z\\x{00B7}\\x{00C0}-\\x{00D6}\\x{00D8}-\\x{00F6}\\x{00F8}-\\x{037D}\\x{037F}-\\x{1FFF}\\x{200C}-\\x{200D}\\x{203F}-\\x{2040}\\x{2070}-\\x{218F}\\x{2C00}-\\x{2FEF}\\x{3001}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFFD}\\x{10000}-\\x{EFFFF}]*-[\\-.0-9_a-zA-Z\\x{00B7}\\x{00C0}-\\x{00D6}\\x{00D8}-\\x{00F6}\\x{00F8}-\\x{037D}\\x{037F}-\\x{1FFF}\\x{200C}-\\x{200D}\\x{203F}-\\x{2040}\\x{2070}-\\x{218F}\\x{2C00}-\\x{2FEF}\\x{3001}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFFD}\\x{10000}-\\x{EFFFF}]*)(?=\\s|/?>)", beginCaptures: { 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" } }, end: ">", endCaptures: { 0: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.custom.end.html", patterns: [{ include: "#attribute" }] }] }, "xml-processing": { begin: "(<\\?)(xml)", captures: { 1: { name: "punctuation.definition.tag.html" }, 2: { name: "entity.name.tag.html" } }, end: "(\\?>)", name: "meta.tag.metadata.processing.xml.html", patterns: [{ include: "#attribute" }] } }, scopeName: "text.html.basic", embeddedLangs: ["javascript", "css"] });
var t = [
  ...e,
  ...n,
  le
];
const de = Object.freeze({ displayName: "Java", name: "java", patterns: [{ begin: "\\b(package)\\b\\s*", beginCaptures: { 1: { name: "keyword.other.package.java" } }, contentName: "storage.modifier.package.java", end: "\\s*(;)", endCaptures: { 1: { name: "punctuation.terminator.java" } }, name: "meta.package.java", patterns: [{ include: "#comments" }, { match: "(?<=\\.)\\s*\\.|\\.(?=\\s*;)", name: "invalid.illegal.character_not_allowed_here.java" }, { match: "(?<!_)_(?=\\s*(\\.|;))|\\b\\d+|-+", name: "invalid.illegal.character_not_allowed_here.java" }, { match: "[A-Z]+", name: "invalid.deprecated.package_name_not_lowercase.java" }, { match: `(?x)\\b(?<!\\$)
(abstract|assert|boolean|break|byte|case|catch|char|class|
const|continue|default|do|double|else|enum|extends|final|
finally|float|for|goto|if|implements|import|instanceof|int|
interface|long|native|new|non-sealed|package|permits|private|protected|public|
return|sealed|short|static|strictfp|super|switch|syncronized|this|
throw|throws|transient|try|void|volatile|while|yield|
true|false|null)\\b`, name: "invalid.illegal.character_not_allowed_here.java" }, { match: "\\.", name: "punctuation.separator.java" }] }, { begin: "\\b(import)\\b\\s*\\b(static)?\\b\\s", beginCaptures: { 1: { name: "keyword.other.import.java" }, 2: { name: "storage.modifier.java" } }, contentName: "storage.modifier.import.java", end: "\\s*(;)", endCaptures: { 1: { name: "punctuation.terminator.java" } }, name: "meta.import.java", patterns: [{ include: "#comments" }, { match: "(?<=\\.)\\s*\\.|\\.(?=\\s*;)", name: "invalid.illegal.character_not_allowed_here.java" }, { match: "(?<!\\.)\\s*\\*", name: "invalid.illegal.character_not_allowed_here.java" }, { match: "(?<!_)_(?=\\s*(\\.|;))|\\b\\d+|-+", name: "invalid.illegal.character_not_allowed_here.java" }, { match: `(?x)\\b(?<!\\$)
(abstract|assert|boolean|break|byte|case|catch|char|class|
const|continue|default|do|double|else|enum|extends|final|
finally|float|for|goto|if|implements|import|instanceof|int|
interface|long|native|new|non-sealed|package|permits|private|protected|public|
return|sealed|short|static|strictfp|super|switch|syncronized|this|
throw|throws|transient|try|void|volatile|while|yield|
true|false|null)\\b`, name: "invalid.illegal.character_not_allowed_here.java" }, { match: "\\.", name: "punctuation.separator.java" }, { match: "\\*", name: "variable.language.wildcard.java" }] }, { include: "#comments-javadoc" }, { include: "#code" }, { include: "#module" }], repository: { "all-types": { patterns: [{ include: "#primitive-arrays" }, { include: "#primitive-types" }, { include: "#object-types" }] }, annotations: { patterns: [{ begin: "((@)\\s*([^\\s(]+))(\\()", beginCaptures: { 2: { name: "punctuation.definition.annotation.java" }, 3: { name: "storage.type.annotation.java" }, 4: { name: "punctuation.definition.annotation-arguments.begin.bracket.round.java" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.annotation-arguments.end.bracket.round.java" } }, name: "meta.declaration.annotation.java", patterns: [{ captures: { 1: { name: "constant.other.key.java" }, 2: { name: "keyword.operator.assignment.java" } }, match: "(\\w*)\\s*(=)" }, { include: "#code" }] }, { captures: { 1: { name: "punctuation.definition.annotation.java" }, 2: { name: "storage.modifier.java" }, 3: { name: "storage.type.annotation.java" }, 5: { name: "punctuation.definition.annotation.java" }, 6: { name: "storage.type.annotation.java" } }, match: "(@)(interface)\\s+(\\w*)|((@)\\s*(\\w+))", name: "meta.declaration.annotation.java" }] }, "anonymous-block-and-instance-initializer": { begin: "{", beginCaptures: { 0: { name: "punctuation.section.block.begin.bracket.curly.java" } }, end: "}", endCaptures: { 0: { name: "punctuation.section.block.end.bracket.curly.java" } }, patterns: [{ include: "#code" }] }, "anonymous-classes-and-new": { begin: "\\bnew\\b", beginCaptures: { 0: { name: "keyword.control.new.java" } }, end: "(?=;|\\)|\\]|\\.|,|\\?|:|}|\\+|\\-|\\*|\\/(?!\\/|\\*)|%|!|&|\\||\\^|=)", patterns: [{ include: "#comments" }, { include: "#function-call" }, { include: "#all-types" }, { begin: "(?<=\\))", end: "(?=;|\\)|\\]|\\.|,|\\?|:|}|\\+|\\-|\\*|\\/(?!\\/|\\*)|%|!|&|\\||\\^|=)", patterns: [{ include: "#comments" }, { begin: "{", beginCaptures: { 0: { name: "punctuation.section.inner-class.begin.bracket.curly.java" } }, end: "}", endCaptures: { 0: { name: "punctuation.section.inner-class.end.bracket.curly.java" } }, name: "meta.inner-class.java", patterns: [{ include: "#class-body" }] }] }, { begin: "(?<=\\])", end: "(?=;|\\)|\\]|\\.|,|\\?|:|}|\\+|\\-|\\*|\\/(?!\\/|\\*)|%|!|&|\\||\\^|=)", patterns: [{ include: "#comments" }, { begin: "{", beginCaptures: { 0: { name: "punctuation.section.array-initializer.begin.bracket.curly.java" } }, end: "}", endCaptures: { 0: { name: "punctuation.section.array-initializer.end.bracket.curly.java" } }, name: "meta.array-initializer.java", patterns: [{ include: "#code" }] }] }, { include: "#parens" }] }, assertions: { patterns: [{ begin: "\\b(assert)\\s", beginCaptures: { 1: { name: "keyword.control.assert.java" } }, end: "$", name: "meta.declaration.assertion.java", patterns: [{ match: ":", name: "keyword.operator.assert.expression-separator.java" }, { include: "#code" }] }] }, class: { begin: "(?=\\w?[\\w\\s-]*\\b(?:class|(?<!@)interface|enum)\\s+[\\w$]+)", end: "}", endCaptures: { 0: { name: "punctuation.section.class.end.bracket.curly.java" } }, name: "meta.class.java", patterns: [{ include: "#storage-modifiers" }, { include: "#generics" }, { include: "#comments" }, { captures: { 1: { name: "storage.modifier.java" }, 2: { name: "entity.name.type.class.java" } }, match: "(class|(?<!@)interface|enum)\\s+([\\w$]+)", name: "meta.class.identifier.java" }, { begin: "extends", beginCaptures: { 0: { name: "storage.modifier.extends.java" } }, end: "(?={|implements|permits)", name: "meta.definition.class.inherited.classes.java", patterns: [{ include: "#object-types-inherited" }, { include: "#comments" }] }, { begin: "(implements)\\s", beginCaptures: { 1: { name: "storage.modifier.implements.java" } }, end: "(?=\\s*extends|permits|\\{)", name: "meta.definition.class.implemented.interfaces.java", patterns: [{ include: "#object-types-inherited" }, { include: "#comments" }] }, { begin: "(permits)\\s", beginCaptures: { 1: { name: "storage.modifier.permits.java" } }, end: "(?=\\s*extends|implements|\\{)", name: "meta.definition.class.permits.classes.java", patterns: [{ include: "#object-types-inherited" }, { include: "#comments" }] }, { begin: "{", beginCaptures: { 0: { name: "punctuation.section.class.begin.bracket.curly.java" } }, contentName: "meta.class.body.java", end: "(?=})", patterns: [{ include: "#class-body" }] }] }, "class-body": { patterns: [{ include: "#comments-javadoc" }, { include: "#comments" }, { include: "#enums" }, { include: "#class" }, { include: "#generics" }, { include: "#static-initializer" }, { include: "#class-fields-and-methods" }, { include: "#annotations" }, { include: "#storage-modifiers" }, { include: "#member-variables" }, { include: "#code" }] }, "class-fields-and-methods": { patterns: [{ begin: "(?=\\=)", end: "(?=;)", patterns: [{ include: "#code" }] }, { include: "#methods" }] }, code: { patterns: [{ include: "#annotations" }, { include: "#comments" }, { include: "#enums" }, { include: "#class" }, { include: "#record" }, { include: "#anonymous-block-and-instance-initializer" }, { include: "#try-catch-finally" }, { include: "#assertions" }, { include: "#parens" }, { include: "#constants-and-special-vars" }, { include: "#numbers" }, { include: "#anonymous-classes-and-new" }, { include: "#lambda-expression" }, { include: "#keywords" }, { include: "#storage-modifiers" }, { include: "#method-call" }, { include: "#function-call" }, { include: "#variables" }, { include: "#variables-local" }, { include: "#objects" }, { include: "#properties" }, { include: "#strings" }, { include: "#all-types" }, { match: ",", name: "punctuation.separator.delimiter.java" }, { match: "\\.", name: "punctuation.separator.period.java" }, { match: ";", name: "punctuation.terminator.java" }] }, comments: { patterns: [{ captures: { 0: { name: "punctuation.definition.comment.java" } }, match: "/\\*\\*/", name: "comment.block.empty.java" }, { include: "#comments-inline" }] }, "comments-inline": { patterns: [{ begin: "/\\*", captures: { 0: { name: "punctuation.definition.comment.java" } }, end: "\\*/", name: "comment.block.java" }, { begin: "(^[ \\t]+)?(?=//)", beginCaptures: { 1: { name: "punctuation.whitespace.comment.leading.java" } }, end: "(?!\\G)", patterns: [{ begin: "//", beginCaptures: { 0: { name: "punctuation.definition.comment.java" } }, end: "\\n", name: "comment.line.double-slash.java" }] }] }, "comments-javadoc": { patterns: [{ begin: "^\\s*(/\\*\\*)(?!/)", beginCaptures: { 1: { name: "punctuation.definition.comment.java" } }, end: "\\*/", endCaptures: { 0: { name: "punctuation.definition.comment.java" } }, name: "comment.block.javadoc.java", patterns: [{ match: "@(author|deprecated|return|see|serial|since|version)\\b", name: "keyword.other.documentation.javadoc.java" }, { captures: { 1: { name: "keyword.other.documentation.javadoc.java" }, 2: { name: "variable.parameter.java" } }, match: "(@param)\\s+(\\S+)" }, { captures: { 1: { name: "keyword.other.documentation.javadoc.java" }, 2: { name: "entity.name.type.class.java" } }, match: "(@(?:exception|throws))\\s+(\\S+)" }, { captures: { 1: { name: "keyword.other.documentation.javadoc.java" }, 2: { name: "entity.name.type.class.java" }, 3: { name: "variable.parameter.java" } }, match: "{(@link)\\s+(\\S+)?#([\\w$]+\\s*\\([^\\(\\)]*\\)).*?}" }] }] }, "constants-and-special-vars": { patterns: [{ match: "\\b(true|false|null)\\b", name: "constant.language.java" }, { match: "\\bthis\\b", name: "variable.language.this.java" }, { match: "\\bsuper\\b", name: "variable.language.java" }] }, enums: { begin: "^\\s*([\\w\\s]*)(enum)\\s+(\\w+)", beginCaptures: { 1: { patterns: [{ include: "#storage-modifiers" }] }, 2: { name: "storage.modifier.java" }, 3: { name: "entity.name.type.enum.java" } }, end: "}", endCaptures: { 0: { name: "punctuation.section.enum.end.bracket.curly.java" } }, name: "meta.enum.java", patterns: [{ begin: "\\b(extends)\\b", beginCaptures: { 1: { name: "storage.modifier.extends.java" } }, end: "(?={|\\bimplements\\b)", name: "meta.definition.class.inherited.classes.java", patterns: [{ include: "#object-types-inherited" }, { include: "#comments" }] }, { begin: "\\b(implements)\\b", beginCaptures: { 1: { name: "storage.modifier.implements.java" } }, end: "(?={|\\bextends\\b)", name: "meta.definition.class.implemented.interfaces.java", patterns: [{ include: "#object-types-inherited" }, { include: "#comments" }] }, { begin: "{", beginCaptures: { 0: { name: "punctuation.section.enum.begin.bracket.curly.java" } }, end: "(?=})", patterns: [{ begin: "(?<={)", end: "(?=;|})", patterns: [{ include: "#comments-javadoc" }, { include: "#comments" }, { begin: "\\b(\\w+)\\b", beginCaptures: { 1: { name: "constant.other.enum.java" } }, end: "(,)|(?=;|})", endCaptures: { 1: { name: "punctuation.separator.delimiter.java" } }, patterns: [{ include: "#comments-javadoc" }, { include: "#comments" }, { begin: "\\(", beginCaptures: { 0: { name: "punctuation.bracket.round.java" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.bracket.round.java" } }, patterns: [{ include: "#code" }] }, { begin: "{", beginCaptures: { 0: { name: "punctuation.bracket.curly.java" } }, end: "}", endCaptures: { 0: { name: "punctuation.bracket.curly.java" } }, patterns: [{ include: "#class-body" }] }] }] }, { include: "#class-body" }] }] }, "function-call": { begin: "([A-Za-z_$][\\w$]*)\\s*(\\()", beginCaptures: { 1: { name: "entity.name.function.java" }, 2: { name: "punctuation.definition.parameters.begin.bracket.round.java" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.parameters.end.bracket.round.java" } }, name: "meta.function-call.java", patterns: [{ include: "#code" }] }, generics: { begin: "<", beginCaptures: { 0: { name: "punctuation.bracket.angle.java" } }, end: ">", endCaptures: { 0: { name: "punctuation.bracket.angle.java" } }, patterns: [{ match: "\\b(extends|super)\\b", name: "storage.modifier.$1.java" }, { captures: { 1: { name: "storage.type.java" } }, match: "(?<!\\.)([a-zA-Z$_][a-zA-Z0-9$_]*)(?=\\s*<)" }, { include: "#primitive-arrays" }, { match: "[a-zA-Z$_][a-zA-Z0-9$_]*", name: "storage.type.generic.java" }, { match: "\\?", name: "storage.type.generic.wildcard.java" }, { match: "&", name: "punctuation.separator.types.java" }, { match: ",", name: "punctuation.separator.delimiter.java" }, { match: "\\.", name: "punctuation.separator.period.java" }, { include: "#parens" }, { include: "#generics" }, { include: "#comments" }] }, keywords: { patterns: [{ match: "\\bthrow\\b", name: "keyword.control.throw.java" }, { match: "\\?|:", name: "keyword.control.ternary.java" }, { match: "\\b(return|yield|break|case|continue|default|do|while|for|switch|if|else)\\b", name: "keyword.control.java" }, { match: "\\b(instanceof)\\b", name: "keyword.operator.instanceof.java" }, { match: "(<<|>>>?|~|\\^)", name: "keyword.operator.bitwise.java" }, { match: "((&|\\^|\\||<<|>>>?)=)", name: "keyword.operator.assignment.bitwise.java" }, { match: "(===?|!=|<=|>=|<>|<|>)", name: "keyword.operator.comparison.java" }, { match: "([+*/%-]=)", name: "keyword.operator.assignment.arithmetic.java" }, { match: "(=)", name: "keyword.operator.assignment.java" }, { match: "(\\-\\-|\\+\\+)", name: "keyword.operator.increment-decrement.java" }, { match: "(\\-|\\+|\\*|\\/|%)", name: "keyword.operator.arithmetic.java" }, { match: "(!|&&|\\|\\|)", name: "keyword.operator.logical.java" }, { match: "(\\||&)", name: "keyword.operator.bitwise.java" }, { match: "\\b(const|goto)\\b", name: "keyword.reserved.java" }] }, "lambda-expression": { patterns: [{ match: "->", name: "storage.type.function.arrow.java" }] }, "member-variables": { begin: "(?=private|protected|public|native|synchronized|abstract|threadsafe|transient|static|final)", end: "(?=\\=|;)", patterns: [{ include: "#storage-modifiers" }, { include: "#variables" }, { include: "#primitive-arrays" }, { include: "#object-types" }] }, "method-call": { begin: "(\\.)\\s*([A-Za-z_$][\\w$]*)\\s*(\\()", beginCaptures: { 1: { name: "punctuation.separator.period.java" }, 2: { name: "entity.name.function.java" }, 3: { name: "punctuation.definition.parameters.begin.bracket.round.java" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.parameters.end.bracket.round.java" } }, name: "meta.method-call.java", patterns: [{ include: "#code" }] }, methods: { begin: "(?!new)(?=[\\w<].*\\s+)(?=([^=/]|/(?!/))+\\()", end: "(})|(?=;)", endCaptures: { 1: { name: "punctuation.section.method.end.bracket.curly.java" } }, name: "meta.method.java", patterns: [{ include: "#storage-modifiers" }, { begin: "(\\w+)\\s*(\\()", beginCaptures: { 1: { name: "entity.name.function.java" }, 2: { name: "punctuation.definition.parameters.begin.bracket.round.java" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.parameters.end.bracket.round.java" } }, name: "meta.method.identifier.java", patterns: [{ include: "#parameters" }, { include: "#parens" }, { include: "#comments" }] }, { include: "#generics" }, { begin: "(?=\\w.*\\s+\\w+\\s*\\()", end: "(?=\\s+\\w+\\s*\\()", name: "meta.method.return-type.java", patterns: [{ include: "#all-types" }, { include: "#parens" }, { include: "#comments" }] }, { include: "#throws" }, { begin: "{", beginCaptures: { 0: { name: "punctuation.section.method.begin.bracket.curly.java" } }, contentName: "meta.method.body.java", end: "(?=})", patterns: [{ include: "#code" }] }, { include: "#comments" }] }, module: { begin: "((open)\\s)?(module)\\s+(\\w+)", beginCaptures: { 1: { name: "storage.modifier.java" }, 3: { name: "storage.modifier.java" }, 4: { name: "entity.name.type.module.java" } }, end: "}", endCaptures: { 0: { name: "punctuation.section.module.end.bracket.curly.java" } }, name: "meta.module.java", patterns: [{ begin: "{", beginCaptures: { 0: { name: "punctuation.section.module.begin.bracket.curly.java" } }, contentName: "meta.module.body.java", end: "(?=})", patterns: [{ include: "#comments" }, { include: "#comments-javadoc" }, { match: "\\b(requires|transitive|exports|opens|to|uses|provides|with)\\b", name: "keyword.module.java" }] }] }, numbers: { patterns: [{ match: `(?x)
\\b(?<!\\$)
0(x|X)
(
(?<!\\.)[0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?[Ll]?(?!\\.)
|
(
[0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?\\.?
|
([0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?)?\\.[0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?
)
[Pp][+-]?[0-9]([0-9_]*[0-9])?[FfDd]?
)
\\b(?!\\$)`, name: "constant.numeric.hex.java" }, { match: "\\b(?<!\\$)0(b|B)[01]([01_]*[01])?[Ll]?\\b(?!\\$)", name: "constant.numeric.binary.java" }, { match: "\\b(?<!\\$)0[0-7]([0-7_]*[0-7])?[Ll]?\\b(?!\\$)", name: "constant.numeric.octal.java" }, { match: `(?x)
(?<!\\$)
(
\\b[0-9]([0-9_]*[0-9])?\\.\\B(?!\\.)
|
\\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b
|
\\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b
|
\\b[0-9]([0-9_]*[0-9])?\\.([0-9]([0-9_]*[0-9])?)([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b
|
(?<!\\.)\\B\\.[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b
|
\\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b
|
\\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b
|
\\b(0|[1-9]([0-9_]*[0-9])?)(?!\\.)[Ll]?\\b
)
(?!\\$)`, name: "constant.numeric.decimal.java" }] }, "object-types": { patterns: [{ include: "#generics" }, { begin: "\\b((?:[A-Za-z_]\\w*\\s*\\.\\s*)*)([A-Z_]\\w*)\\s*(?=\\[)", beginCaptures: { 1: { patterns: [{ match: "[A-Za-z_]\\w*", name: "storage.type.java" }, { match: "\\.", name: "punctuation.separator.period.java" }] }, 2: { name: "storage.type.object.array.java" } }, end: "(?!\\s*\\[)", patterns: [{ include: "#comments" }, { include: "#parens" }] }, { captures: { 1: { patterns: [{ match: "[A-Za-z_]\\w*", name: "storage.type.java" }, { match: "\\.", name: "punctuation.separator.period.java" }] } }, match: "\\b((?:[A-Za-z_]\\w*\\s*\\.\\s*)*[A-Z_]\\w*)\\s*(?=<)" }, { captures: { 1: { patterns: [{ match: "[A-Za-z_]\\w*", name: "storage.type.java" }, { match: "\\.", name: "punctuation.separator.period.java" }] } }, match: "\\b((?:[A-Za-z_]\\w*\\s*\\.\\s*)*[A-Z_]\\w*)\\b((?=\\s*[A-Za-z$_\\n])|(?=\\s*\\.\\.\\.))" }] }, "object-types-inherited": { patterns: [{ include: "#generics" }, { captures: { 1: { name: "punctuation.separator.period.java" } }, match: "\\b(?:[A-Z]\\w*\\s*(\\.)\\s*)*[A-Z]\\w*\\b", name: "entity.other.inherited-class.java" }, { match: ",", name: "punctuation.separator.delimiter.java" }] }, objects: { match: "(?<![\\w$])[a-zA-Z_$][\\w$]*(?=\\s*\\.\\s*[\\w$]+)", name: "variable.other.object.java" }, parameters: { patterns: [{ match: "\\bfinal\\b", name: "storage.modifier.java" }, { include: "#annotations" }, { include: "#all-types" }, { include: "#strings" }, { match: "\\w+", name: "variable.parameter.java" }, { match: ",", name: "punctuation.separator.delimiter.java" }, { match: "\\.\\.\\.", name: "punctuation.definition.parameters.varargs.java" }] }, parens: { patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.bracket.round.java" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.bracket.round.java" } }, patterns: [{ include: "#code" }] }, { begin: "\\[", beginCaptures: { 0: { name: "punctuation.bracket.square.java" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.bracket.square.java" } }, patterns: [{ include: "#code" }] }, { begin: "{", beginCaptures: { 0: { name: "punctuation.bracket.curly.java" } }, end: "}", endCaptures: { 0: { name: "punctuation.bracket.curly.java" } }, patterns: [{ include: "#code" }] }] }, "primitive-arrays": { patterns: [{ begin: "\\b(void|boolean|byte|char|short|int|float|long|double)\\b\\s*(?=\\[)", beginCaptures: { 1: { name: "storage.type.primitive.array.java" } }, end: "(?!\\s*\\[)", patterns: [{ include: "#comments" }, { include: "#parens" }] }] }, "primitive-types": { match: "\\b(void|boolean|byte|char|short|int|float|long|double)\\b", name: "storage.type.primitive.java" }, properties: { patterns: [{ captures: { 1: { name: "punctuation.separator.period.java" }, 2: { name: "keyword.control.new.java" } }, match: "(\\.)\\s*(new)" }, { captures: { 1: { name: "punctuation.separator.period.java" }, 2: { name: "variable.other.object.property.java" } }, match: "(\\.)\\s*([a-zA-Z_$][\\w$]*)(?=\\s*\\.\\s*[a-zA-Z_$][\\w$]*)" }, { captures: { 1: { name: "punctuation.separator.period.java" }, 2: { name: "variable.other.object.property.java" } }, match: "(\\.)\\s*([a-zA-Z_$][\\w$]*)" }, { captures: { 1: { name: "punctuation.separator.period.java" }, 2: { name: "invalid.illegal.identifier.java" } }, match: "(\\.)\\s*([0-9][\\w$]*)" }] }, record: { begin: "(?=\\w?[\\w\\s]*\\b(?:record)\\s+[\\w$]+)", end: "}", endCaptures: { 0: { name: "punctuation.section.class.end.bracket.curly.java" } }, name: "meta.record.java", patterns: [{ include: "#storage-modifiers" }, { include: "#generics" }, { include: "#comments" }, { begin: "(record)\\s+([\\w$]+)(<[\\w$]+>)?(\\()", beginCaptures: { 1: { name: "storage.modifier.java" }, 2: { name: "entity.name.type.record.java" }, 3: { patterns: [{ include: "#generics" }] }, 4: { name: "punctuation.definition.parameters.begin.bracket.round.java" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.parameters.end.bracket.round.java" } }, name: "meta.record.identifier.java", patterns: [{ include: "#code" }] }, { begin: "(implements)\\s", beginCaptures: { 1: { name: "storage.modifier.implements.java" } }, end: "(?=\\s*\\{)", name: "meta.definition.class.implemented.interfaces.java", patterns: [{ include: "#object-types-inherited" }, { include: "#comments" }] }, { include: "#record-body" }] }, "record-body": { begin: "{", beginCaptures: { 0: { name: "punctuation.section.class.begin.bracket.curly.java" } }, end: "(?=})", name: "meta.record.body.java", patterns: [{ include: "#record-constructor" }, { include: "#class-body" }] }, "record-constructor": { begin: "(?!new)(?=[\\w<].*\\s+)(?=([^\\(=/]|/(?!/))+(?={))", end: "(})|(?=;)", endCaptures: { 1: { name: "punctuation.section.method.end.bracket.curly.java" } }, name: "meta.method.java", patterns: [{ include: "#storage-modifiers" }, { begin: "(\\w+)", beginCaptures: { 1: { name: "entity.name.function.java" } }, end: "(?=\\s*{)", name: "meta.method.identifier.java", patterns: [{ include: "#comments" }] }, { include: "#comments" }, { begin: "{", beginCaptures: { 0: { name: "punctuation.section.method.begin.bracket.curly.java" } }, contentName: "meta.method.body.java", end: "(?=})", patterns: [{ include: "#code" }] }] }, "static-initializer": { patterns: [{ include: "#anonymous-block-and-instance-initializer" }, { match: "static", name: "storage.modifier.java" }] }, "storage-modifiers": { match: "\\b(public|private|protected|static|final|native|synchronized|abstract|threadsafe|transient|volatile|default|strictfp|sealed|non-sealed)\\b", name: "storage.modifier.java" }, strings: { patterns: [{ begin: '"""', beginCaptures: { 0: { name: "punctuation.definition.string.begin.java" } }, end: '"""', endCaptures: { 0: { name: "punctuation.definition.string.end.java" } }, name: "string.quoted.triple.java", patterns: [{ match: '(\\\\""")(?!")|(\\\\.)', name: "constant.character.escape.java" }] }, { begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.java" } }, end: '"', endCaptures: { 0: { name: "punctuation.definition.string.end.java" } }, name: "string.quoted.double.java", patterns: [{ match: "\\\\.", name: "constant.character.escape.java" }] }, { begin: "'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.java" } }, end: "'", endCaptures: { 0: { name: "punctuation.definition.string.end.java" } }, name: "string.quoted.single.java", patterns: [{ match: "\\\\.", name: "constant.character.escape.java" }] }] }, throws: { begin: "throws", beginCaptures: { 0: { name: "storage.modifier.java" } }, end: "(?={|;)", name: "meta.throwables.java", patterns: [{ match: ",", name: "punctuation.separator.delimiter.java" }, { match: "[a-zA-Z$_][\\.a-zA-Z0-9$_]*", name: "storage.type.java" }, { include: "#comments" }] }, "try-catch-finally": { patterns: [{ begin: "\\btry\\b", beginCaptures: { 0: { name: "keyword.control.try.java" } }, end: "}", endCaptures: { 0: { name: "punctuation.section.try.end.bracket.curly.java" } }, name: "meta.try.java", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.section.try.resources.begin.bracket.round.java" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.try.resources.end.bracket.round.java" } }, name: "meta.try.resources.java", patterns: [{ include: "#code" }] }, { begin: "{", beginCaptures: { 0: { name: "punctuation.section.try.begin.bracket.curly.java" } }, contentName: "meta.try.body.java", end: "(?=})", patterns: [{ include: "#code" }] }] }, { begin: "\\b(catch)\\b", beginCaptures: { 1: { name: "keyword.control.catch.java" } }, end: "}", endCaptures: { 0: { name: "punctuation.section.catch.end.bracket.curly.java" } }, name: "meta.catch.java", patterns: [{ include: "#comments" }, { begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.parameters.begin.bracket.round.java" } }, contentName: "meta.catch.parameters.java", end: "\\)", endCaptures: { 0: { name: "punctuation.definition.parameters.end.bracket.round.java" } }, patterns: [{ include: "#comments" }, { include: "#storage-modifiers" }, { begin: "[a-zA-Z$_][\\.a-zA-Z0-9$_]*", beginCaptures: { 0: { name: "storage.type.java" } }, end: "(\\|)|(?=\\))", endCaptures: { 1: { name: "punctuation.catch.separator.java" } }, patterns: [{ include: "#comments" }, { captures: { 0: { name: "variable.parameter.java" } }, match: "\\w+" }] }] }, { begin: "{", beginCaptures: { 0: { name: "punctuation.section.catch.begin.bracket.curly.java" } }, contentName: "meta.catch.body.java", end: "(?=})", patterns: [{ include: "#code" }] }] }, { begin: "\\bfinally\\b", beginCaptures: { 0: { name: "keyword.control.finally.java" } }, end: "}", endCaptures: { 0: { name: "punctuation.section.finally.end.bracket.curly.java" } }, name: "meta.finally.java", patterns: [{ begin: "{", beginCaptures: { 0: { name: "punctuation.section.finally.begin.bracket.curly.java" } }, contentName: "meta.finally.body.java", end: "(?=})", patterns: [{ include: "#code" }] }] }] }, variables: { begin: `(?x)
(?=
\\b
(
(void|boolean|byte|char|short|int|float|long|double)
|
(?>(\\w+\\.)*[A-Z_]+\\w*)
)
\\b
\\s*
(
<[\\w<>,\\.?\\s\\[\\]]*>
)?
\\s*
(
(\\[\\])*
)?
\\s+
[A-Za-z_$][\\w$]*
([\\w\\[\\],$][\\w\\[\\],\\s]*)?
\\s*(=|:|;)
)`, end: "(?=\\=|:|;)", name: "meta.definition.variable.java", patterns: [{ captures: { 1: { name: "variable.other.definition.java" } }, match: "([A-Za-z$_][\\w$]*)(?=\\s*(\\[\\])*\\s*(;|:|=|,))" }, { include: "#all-types" }, { include: "#code" }] }, "variables-local": { begin: "(?=\\b(var)\\b\\s+[A-Za-z_$][\\w$]*\\s*(=|:|;))", end: "(?=\\=|:|;)", name: "meta.definition.variable.local.java", patterns: [{ match: "\\bvar\\b", name: "storage.type.local.java" }, { captures: { 1: { name: "variable.other.definition.java" } }, match: "([A-Za-z$_][\\w$]*)(?=\\s*(\\[\\])*\\s*(=|:|;))" }, { include: "#code" }] } }, scopeName: "source.java" });
var w = [
  de
];
const be = Object.freeze({ displayName: "XML", name: "xml", patterns: [{ begin: "(<\\?)\\s*([-_a-zA-Z0-9]+)", captures: { 1: { name: "punctuation.definition.tag.xml" }, 2: { name: "entity.name.tag.xml" } }, end: "(\\?>)", name: "meta.tag.preprocessor.xml", patterns: [{ match: " ([a-zA-Z-]+)", name: "entity.other.attribute-name.xml" }, { include: "#doublequotedString" }, { include: "#singlequotedString" }] }, { begin: "(<!)(DOCTYPE)\\s+([:a-zA-Z_][:a-zA-Z0-9_.-]*)", captures: { 1: { name: "punctuation.definition.tag.xml" }, 2: { name: "keyword.other.doctype.xml" }, 3: { name: "variable.language.documentroot.xml" } }, end: "\\s*(>)", name: "meta.tag.sgml.doctype.xml", patterns: [{ include: "#internalSubset" }] }, { include: "#comments" }, { begin: "(<)((?:([-_a-zA-Z0-9]+)(:))?([-_a-zA-Z0-9:]+))(?=(\\s[^>]*)?></\\2>)", beginCaptures: { 1: { name: "punctuation.definition.tag.xml" }, 2: { name: "entity.name.tag.xml" }, 3: { name: "entity.name.tag.namespace.xml" }, 4: { name: "punctuation.separator.namespace.xml" }, 5: { name: "entity.name.tag.localname.xml" } }, end: "(>)(</)((?:([-_a-zA-Z0-9]+)(:))?([-_a-zA-Z0-9:]+))(>)", endCaptures: { 1: { name: "punctuation.definition.tag.xml" }, 2: { name: "punctuation.definition.tag.xml" }, 3: { name: "entity.name.tag.xml" }, 4: { name: "entity.name.tag.namespace.xml" }, 5: { name: "punctuation.separator.namespace.xml" }, 6: { name: "entity.name.tag.localname.xml" }, 7: { name: "punctuation.definition.tag.xml" } }, name: "meta.tag.no-content.xml", patterns: [{ include: "#tagStuff" }] }, { begin: "(</?)(?:([-\\w\\.]+)((:)))?([-\\w\\.:]+)", captures: { 1: { name: "punctuation.definition.tag.xml" }, 2: { name: "entity.name.tag.namespace.xml" }, 3: { name: "entity.name.tag.xml" }, 4: { name: "punctuation.separator.namespace.xml" }, 5: { name: "entity.name.tag.localname.xml" } }, end: "(/?>)", name: "meta.tag.xml", patterns: [{ include: "#tagStuff" }] }, { include: "#entity" }, { include: "#bare-ampersand" }, { begin: "<%@", beginCaptures: { 0: { name: "punctuation.section.embedded.begin.xml" } }, end: "%>", endCaptures: { 0: { name: "punctuation.section.embedded.end.xml" } }, name: "source.java-props.embedded.xml", patterns: [{ match: "page|include|taglib", name: "keyword.other.page-props.xml" }] }, { begin: "<%[!=]?(?!--)", beginCaptures: { 0: { name: "punctuation.section.embedded.begin.xml" } }, end: "(?!--)%>", endCaptures: { 0: { name: "punctuation.section.embedded.end.xml" } }, name: "source.java.embedded.xml", patterns: [{ include: "source.java" }] }, { begin: "<!\\[CDATA\\[", beginCaptures: { 0: { name: "punctuation.definition.string.begin.xml" } }, end: "]]>", endCaptures: { 0: { name: "punctuation.definition.string.end.xml" } }, name: "string.unquoted.cdata.xml" }], repository: { EntityDecl: { begin: "(<!)(ENTITY)\\s+(%\\s+)?([:a-zA-Z_][:a-zA-Z0-9_.-]*)(\\s+(?:SYSTEM|PUBLIC)\\s+)?", captures: { 1: { name: "punctuation.definition.tag.xml" }, 2: { name: "keyword.other.entity.xml" }, 3: { name: "punctuation.definition.entity.xml" }, 4: { name: "variable.language.entity.xml" }, 5: { name: "keyword.other.entitytype.xml" } }, end: "(>)", patterns: [{ include: "#doublequotedString" }, { include: "#singlequotedString" }] }, "bare-ampersand": { match: "&", name: "invalid.illegal.bad-ampersand.xml" }, comments: { patterns: [{ begin: "<%--", captures: { 0: { name: "punctuation.definition.comment.xml" }, end: "--%>", name: "comment.block.xml" } }, { begin: "<!--", captures: { 0: { name: "punctuation.definition.comment.xml" } }, end: "-->", name: "comment.block.xml", patterns: [{ begin: "--(?!>)", captures: { 0: { name: "invalid.illegal.bad-comments-or-CDATA.xml" } } }] }] }, doublequotedString: { begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.xml" } }, end: '"', endCaptures: { 0: { name: "punctuation.definition.string.end.xml" } }, name: "string.quoted.double.xml", patterns: [{ include: "#entity" }, { include: "#bare-ampersand" }] }, entity: { captures: { 1: { name: "punctuation.definition.constant.xml" }, 3: { name: "punctuation.definition.constant.xml" } }, match: "(&)([:a-zA-Z_][:a-zA-Z0-9_.-]*|#[0-9]+|#x[0-9a-fA-F]+)(;)", name: "constant.character.entity.xml" }, internalSubset: { begin: "(\\[)", captures: { 1: { name: "punctuation.definition.constant.xml" } }, end: "(\\])", name: "meta.internalsubset.xml", patterns: [{ include: "#EntityDecl" }, { include: "#parameterEntity" }, { include: "#comments" }] }, parameterEntity: { captures: { 1: { name: "punctuation.definition.constant.xml" }, 3: { name: "punctuation.definition.constant.xml" } }, match: "(%)([:a-zA-Z_][:a-zA-Z0-9_.-]*)(;)", name: "constant.character.parameter-entity.xml" }, singlequotedString: { begin: "'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.xml" } }, end: "'", endCaptures: { 0: { name: "punctuation.definition.string.end.xml" } }, name: "string.quoted.single.xml", patterns: [{ include: "#entity" }, { include: "#bare-ampersand" }] }, tagStuff: { patterns: [{ captures: { 1: { name: "entity.other.attribute-name.namespace.xml" }, 2: { name: "entity.other.attribute-name.xml" }, 3: { name: "punctuation.separator.namespace.xml" }, 4: { name: "entity.other.attribute-name.localname.xml" } }, match: "(?:^|\\s+)(?:([-\\w.]+)((:)))?([-\\w.:]+)\\s*=" }, { include: "#doublequotedString" }, { include: "#singlequotedString" }] } }, scopeName: "text.xml", embeddedLangs: ["java"] });
var s = [
  ...w,
  be
];
const ge = Object.freeze({ displayName: "Shell", name: "shellscript", patterns: [{ include: "#initial_context" }], repository: { alias_statement: { begin: "(?:(?:[ \\t]*+)(alias)(?:[ \\t]*+)((?:(?:((?<!\\w)-\\w+\\b)(?:[ \\t]*+))*))(?:(?:[ \\t]*+)(?:((?<!\\w)(?:[a-zA-Z_0-9-]+)(?!\\w))(?:(?:(\\[)((?:(?:(?:(?:\\$?)(?:(?<!\\w)(?:[a-zA-Z_0-9-]+)(?!\\w))|@)|\\*)|(-?\\d+)))(\\]))?))(?:(?:(\\=)|(\\+\\=))|(\\-\\=))))", beginCaptures: { 1: { name: "storage.type.alias.shell" }, 2: { patterns: [{ match: "(?<!\\w)-\\w+\\b", name: "string.unquoted.argument.shell constant.other.option.shell" }] }, 3: { name: "string.unquoted.argument.shell constant.other.option.shell" }, 4: { name: "variable.other.assignment.shell" }, 5: { name: "punctuation.definition.array.access.shell" }, 6: { name: "variable.other.assignment.shell" }, 7: { name: "constant.numeric.shell constant.numeric.integer.shell" }, 8: { name: "punctuation.definition.array.access.shell" }, 9: { name: "keyword.operator.assignment.shell" }, 10: { name: "keyword.operator.assignment.compound.shell" }, 11: { name: "keyword.operator.assignment.compound.shell" } }, end: "(?:(?= |\\t|$)|(?:(?:(?:(;)|(&&))|(\\|\\|))|(&)))", endCaptures: { 1: { name: "punctuation.terminator.statement.semicolon.shell" }, 2: { name: "punctuation.separator.statement.and.shell" }, 3: { name: "punctuation.separator.statement.or.shell" }, 4: { name: "punctuation.separator.statement.background.shell" } }, name: "meta.expression.assignment.alias.shell", patterns: [{ include: "#normal_context" }] }, argument: { begin: "(?:[ \\t]++)(?!(?:&|\\||\\(|\\[|#|\\n|$|;))", beginCaptures: {}, end: "(?= |\\t|;|\\||&|$|\\n|\\)|\\`)", endCaptures: {}, name: "meta.argument.shell", patterns: [{ include: "#argument_context" }, { include: "#line_continuation" }] }, argument_context: { patterns: [{ captures: { 1: { name: "string.unquoted.argument.shell", patterns: [{ match: "\\*", name: "variable.language.special.wildcard.shell" }, { include: "#variable" }, { include: "#numeric_literal" }, { captures: { 1: { name: "constant.language.$1.shell" } }, match: "(?<!\\w)(\\b(?:true|false)\\b)(?!\\w)" }] } }, match: "(?:[ \\t]*+)((?:[^ \\t\\n>&;<>\\(\\)\\$`\\\\\"'<\\|]+)(?!>))" }, { include: "#normal_context" }] }, arithmetic_double: { patterns: [{ begin: "\\(\\(", beginCaptures: { 0: { name: "punctuation.section.arithmetic.double.shell" } }, end: "\\)(?:\\s*)\\)", endCaptures: { 0: { name: "punctuation.section.arithmetic.double.shell" } }, name: "meta.arithmetic.shell", patterns: [{ include: "#math" }, { include: "#string" }] }] }, arithmetic_no_dollar: { patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.section.arithmetic.single.shell" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.arithmetic.single.shell" } }, name: "meta.arithmetic.shell", patterns: [{ include: "#math" }, { include: "#string" }] }] }, array_access_inline: { captures: { 1: { name: "punctuation.section.array.shell" }, 2: { patterns: [{ include: "#special_expansion" }, { include: "#string" }, { include: "#variable" }] }, 3: { name: "punctuation.section.array.shell" } }, match: "(?:(\\[)([^\\[\\]]+)(\\]))" }, array_value: { begin: "(?:[ \\t]*+)(?:((?<!\\w)(?:[a-zA-Z_0-9-]+)(?!\\w))(?:(?:(\\[)((?:(?:(?:(?:\\$?)(?:(?<!\\w)(?:[a-zA-Z_0-9-]+)(?!\\w))|@)|\\*)|(-?\\d+)))(\\]))?))(?:(?:(\\=)|(\\+\\=))|(\\-\\=))(?:[ \\t]*+)(\\()", beginCaptures: { 1: { name: "variable.other.assignment.shell" }, 2: { name: "punctuation.definition.array.access.shell" }, 3: { name: "variable.other.assignment.shell" }, 4: { name: "constant.numeric.shell constant.numeric.integer.shell" }, 5: { name: "punctuation.definition.array.access.shell" }, 6: { name: "keyword.operator.assignment.shell" }, 7: { name: "keyword.operator.assignment.compound.shell" }, 8: { name: "keyword.operator.assignment.compound.shell" }, 9: { name: "punctuation.definition.array.shell" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.array.shell" } }, patterns: [{ include: "#comment" }, { captures: { 1: { name: "variable.other.assignment.array.shell entity.other.attribute-name.shell" }, 2: { name: "keyword.operator.assignment.shell punctuation.definition.assignment.shell" } }, match: "(?:((?<!\\w)(?:[a-zA-Z_0-9-]+)(?!\\w))(\\=))" }, { captures: { 1: { name: "punctuation.definition.bracket.named-array.shell" }, 2: { name: "string.unquoted.shell entity.other.attribute-name.bracket.shell" }, 3: { name: "punctuation.definition.bracket.named-array.shell" }, 4: { name: "punctuation.definition.assignment.shell" } }, match: "(?:(\\[)(.+?)(\\])(\\=))" }, { include: "#normal_context" }, { include: "#simple_unquoted" }] }, assignment_statement: { patterns: [{ include: "#array_value" }, { include: "#modified_assignment_statement" }, { include: "#normal_assignment_statement" }] }, basic_command_name: { captures: { 1: { name: "storage.modifier.$1.shell" }, 2: { name: "entity.name.function.call.shell entity.name.command.shell", patterns: [{ match: "(?<!\\w)(?:continue|return|break)(?!\\w)", name: "keyword.control.$0.shell" }, { match: "(?<!\\w)(?:(?:unfunction|continue|autoload|unsetopt|bindkey|builtin|getopts|command|declare|unalias|history|unlimit|typeset|suspend|source|printf|unhash|disown|ulimit|return|which|alias|break|false|print|shift|times|umask|umask|unset|read|type|exec|eval|wait|echo|dirs|jobs|kill|hash|stat|exit|test|trap|true|let|set|pwd|cd|fg|bg|fc|:|\\.)(?!\\/))(?!\\w)(?!-)", name: "support.function.builtin.shell" }, { include: "#variable" }] } }, match: `(?:(?:(?!(?:!|&|\\||\\(|\\)|\\{|\\[|<|>|#|\\n|$|;|[ \\t]))(?!nocorrect |nocorrect	|nocorrect$|readonly |readonly	|readonly$|function |function	|function$|foreach |foreach	|foreach$|coproc |coproc	|coproc$|logout |logout	|logout$|export |export	|export$|select |select	|select$|repeat |repeat	|repeat$|pushd |pushd	|pushd$|until |until	|until$|while |while	|while$|local |local	|local$|case |case	|case$|done |done	|done$|elif |elif	|elif$|else |else	|else$|esac |esac	|esac$|popd |popd	|popd$|then |then	|then$|time |time	|time$|for |for	|for$|end |end	|end$|fi |fi	|fi$|do |do	|do$|in |in	|in$|if |if	|if$))(?:((?<=^|;|&|[ \\t])(?:readonly|declare|typeset|export|local)(?=[ \\t]|;|&|$))|((?!"|'|\\\\\\n?$)(?:[^!'"<> \\t\\n\\r]+?)))(?:(?= |\\t)|(?:(?=;|\\||&|\\n|\\)|\\\`|\\{|\\}|[ \\t]*#|\\])(?<!\\\\))))`, name: "meta.statement.command.name.basic.shell" }, block_comment: { begin: "(?:(?:\\s*+)(\\/\\*))", beginCaptures: { 1: { name: "punctuation.definition.comment.begin.shell" } }, end: "\\*\\/", endCaptures: { 0: { name: "punctuation.definition.comment.end.shell" } }, name: "comment.block.shell" }, boolean: { match: "\\b(?:true|false)\\b", name: "constant.language.$0.shell" }, case_statement: { begin: "(?:(\\bcase\\b)(?:[ \\t]*+)(.+?)(?:[ \\t]*+)(\\bin\\b))", beginCaptures: { 1: { name: "keyword.control.case.shell" }, 2: { patterns: [{ include: "#initial_context" }] }, 3: { name: "keyword.control.in.shell" } }, end: "\\besac\\b", endCaptures: { 0: { name: "keyword.control.esac.shell" } }, name: "meta.case.shell", patterns: [{ include: "#comment" }, { captures: { 1: { name: "keyword.operator.pattern.case.default.shell" } }, match: "(?:[ \\t]*+)(\\* *\\))" }, { begin: "(?<!\\))(?!(?:[ \\t]*+)(?:esac\\b|$))", beginCaptures: {}, end: "(?:(?=\\besac\\b)|(\\)))", endCaptures: { 1: { name: "keyword.operator.pattern.case.shell" } }, name: "meta.case.entry.pattern.shell", patterns: [{ include: "#case_statement_context" }] }, { begin: "(?<=\\))", beginCaptures: {}, end: "(?:(;;)|(?=\\besac\\b))", endCaptures: { 1: { name: "punctuation.terminator.statement.case.shell" } }, name: "meta.case.entry.body.shell", patterns: [{ include: "#typical_statements" }, { include: "#initial_context" }] }] }, case_statement_context: { patterns: [{ match: "\\*", name: "variable.language.special.quantifier.star.shell keyword.operator.quantifier.star.shell punctuation.definition.arbitrary-repetition.shell punctuation.definition.regex.arbitrary-repetition.shell" }, { match: "\\+", name: "variable.language.special.quantifier.plus.shell keyword.operator.quantifier.plus.shell punctuation.definition.arbitrary-repetition.shell punctuation.definition.regex.arbitrary-repetition.shell" }, { match: "\\?", name: "variable.language.special.quantifier.question.shell keyword.operator.quantifier.question.shell punctuation.definition.arbitrary-repetition.shell punctuation.definition.regex.arbitrary-repetition.shell" }, { match: "@", name: "variable.language.special.at.shell keyword.operator.at.shell punctuation.definition.regex.at.shell" }, { match: "\\|", name: "keyword.operator.orvariable.language.special.or.shell keyword.operator.alternation.ruby.shell punctuation.definition.regex.alternation.shell punctuation.separator.regex.alternation.shell" }, { match: "\\\\.", name: "constant.character.escape.shell" }, { match: "(?<=\\tin| in| |\\t|;;)\\(", name: "keyword.operator.pattern.case.shell" }, { begin: "(?<=\\S)(\\()", beginCaptures: { 1: { name: "punctuation.definition.group.shell punctuation.definition.regex.group.shell" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.shell punctuation.definition.regex.group.shell" } }, name: "meta.parenthese.shell", patterns: [{ include: "#case_statement_context" }] }, { begin: "\\[", beginCaptures: { 0: { name: "punctuation.definition.character-class.shell" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.character-class.shell" } }, name: "string.regexp.character-class.shell", patterns: [{ match: "\\\\.", name: "constant.character.escape.shell" }] }, { include: "#string" }, { match: "[^) \\t\\n\\[\\?\\*\\|\\@]", name: "string.unquoted.pattern.shell string.regexp.unquoted.shell" }] }, command_name_range: { begin: "\\G", beginCaptures: {}, end: "(?:(?= |\\t|;|\\||&|$|\\n|\\)|\\`)|(?=<))", endCaptures: {}, name: "meta.statement.command.name.shell", patterns: [{ match: "(?<!\\w)(?:continue|return|break)(?!\\w)", name: "entity.name.function.call.shell entity.name.command.shell keyword.control.$0.shell" }, { match: "(?<!\\w)(?:(?:unfunction|continue|autoload|unsetopt|bindkey|builtin|getopts|command|declare|unalias|history|unlimit|typeset|suspend|source|printf|unhash|disown|ulimit|return|which|alias|break|false|print|shift|times|umask|umask|unset|read|type|exec|eval|wait|echo|dirs|jobs|kill|hash|stat|exit|test|trap|true|let|set|pwd|cd|fg|bg|fc|:|\\.)(?!\\/))(?!\\w)(?!-)", name: "entity.name.function.call.shell entity.name.command.shell support.function.builtin.shell" }, { include: "#variable" }, { captures: { 1: { name: "entity.name.function.call.shell entity.name.command.shell" } }, match: `(?:(?<!\\w)(?<=\\G|'|"|\\}|\\))([^ \\n\\t\\r"'=;&\\|\`\\)\\{<>]+))` }, { begin: `(?:(?:\\G|(?<! |\\t|;|\\||&|\\n|\\{|#))(?:(\\$?)((?:(")|(')))))`, beginCaptures: { 1: { name: "meta.statement.command.name.quoted.shell punctuation.definition.string.shell entity.name.function.call.shell entity.name.command.shell" }, 2: {}, 3: { name: "meta.statement.command.name.quoted.shell string.quoted.double.shell punctuation.definition.string.begin.shell entity.name.function.call.shell entity.name.command.shell" }, 4: { name: "meta.statement.command.name.quoted.shell string.quoted.single.shell punctuation.definition.string.begin.shell entity.name.function.call.shell entity.name.command.shell" } }, end: "(?<!\\G)(?<=(?:\\2))", endCaptures: {}, patterns: [{ include: "#continuation_of_single_quoted_command_name" }, { include: "#continuation_of_double_quoted_command_name" }] }, { include: "#line_continuation" }, { include: "#simple_unquoted" }] }, command_statement: { begin: "(?:(?:[ \\t]*+)(?:(?!(?:!|&|\\||\\(|\\)|\\{|\\[|<|>|#|\\n|$|;|[ \\t]))(?!nocorrect |nocorrect	|nocorrect$|readonly |readonly	|readonly$|function |function	|function$|foreach |foreach	|foreach$|coproc |coproc	|coproc$|logout |logout	|logout$|export |export	|export$|select |select	|select$|repeat |repeat	|repeat$|pushd |pushd	|pushd$|until |until	|until$|while |while	|while$|local |local	|local$|case |case	|case$|done |done	|done$|elif |elif	|elif$|else |else	|else$|esac |esac	|esac$|popd |popd	|popd$|then |then	|then$|time |time	|time$|for |for	|for$|end |end	|end$|fi |fi	|fi$|do |do	|do$|in |in	|in$|if |if	|if$)(?!\\\\\\n?$)))", beginCaptures: {}, end: "(?=;|\\||&|\\n|\\)|\\`|\\{|\\}|[ \\t]*#|\\])(?<!\\\\)", endCaptures: {}, name: "meta.statement.command.shell", patterns: [{ include: "#command_name_range" }, { include: "#line_continuation" }, { include: "#option" }, { include: "#argument" }, { include: "#string" }, { include: "#heredoc" }] }, comment: { captures: { 1: { name: "comment.line.number-sign.shell meta.shebang.shell" }, 2: { name: "punctuation.definition.comment.shebang.shell" }, 3: { name: "comment.line.number-sign.shell" }, 4: { name: "punctuation.definition.comment.shell" } }, match: "(?:(?:^|(?:[ \\t]++))(?:((?:(#!)(?:.*)))|((?:(#)(?:.*)))))" }, comments: { patterns: [{ include: "#block_comment" }, { include: "#line_comment" }] }, "compound-command": { patterns: [{ begin: "\\[", beginCaptures: { 0: { name: "punctuation.definition.logical-expression.shell" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.logical-expression.shell" } }, name: "meta.scope.logical-expression.shell", patterns: [{ include: "#logical-expression" }, { include: "#initial_context" }] }, { begin: "(?<=\\s|^){(?=\\s|$)", beginCaptures: { 0: { name: "punctuation.definition.group.shell" } }, end: "(?<=^|;)\\s*(})", endCaptures: { 1: { name: "punctuation.definition.group.shell" } }, name: "meta.scope.group.shell", patterns: [{ include: "#initial_context" }] }] }, continuation_of_double_quoted_command_name: { begin: '(?:\\G(?<="))', beginCaptures: {}, contentName: "meta.statement.command.name.continuation string.quoted.double entity.name.function.call entity.name.command", end: '"', endCaptures: { 0: { name: "string.quoted.double.shell punctuation.definition.string.end.shell entity.name.function.call.shell entity.name.command.shell" } }, patterns: [{ match: '\\\\[\\$\\n`"\\\\]', name: "constant.character.escape.shell" }, { include: "#variable" }, { include: "#interpolation" }] }, continuation_of_single_quoted_command_name: { begin: "(?:\\G(?<='))", beginCaptures: {}, contentName: "meta.statement.command.name.continuation string.quoted.single entity.name.function.call entity.name.command", end: "'", endCaptures: { 0: { name: "string.quoted.single.shell punctuation.definition.string.end.shell entity.name.function.call.shell entity.name.command.shell" } } }, custom_command_names: { patterns: [] }, custom_commands: { patterns: [] }, double_quote_context: { patterns: [{ match: '\\\\[\\$`"\\\\\\n]', name: "constant.character.escape.shell" }, { include: "#variable" }, { include: "#interpolation" }] }, double_quote_escape_char: { match: '\\\\[\\$`"\\\\\\n]', name: "constant.character.escape.shell" }, floating_keyword: { patterns: [{ match: "(?<=^|;|&| |\\t)(?:then|elif|else|done|end|do|if|fi)(?= |\\t|;|&|$)", name: "keyword.control.$0.shell" }] }, for_statement: { patterns: [{ begin: "(?:(\\bfor\\b)(?:(?:[ \\t]*+)((?<!\\w)(?:[a-zA-Z_0-9-]+)(?!\\w))(?:[ \\t]*+)(\\bin\\b)))", beginCaptures: { 1: { name: "keyword.control.for.shell" }, 2: { name: "variable.other.for.shell" }, 3: { name: "keyword.control.in.shell" } }, end: "(?=;|\\||&|\\n|\\)|\\`|\\{|\\}|[ \\t]*#|\\])(?<!\\\\)", endCaptures: {}, name: "meta.for.in.shell", patterns: [{ include: "#string" }, { include: "#simple_unquoted" }, { include: "#normal_context" }] }, { begin: "(\\bfor\\b)", beginCaptures: { 1: { name: "keyword.control.for.shell" } }, end: "(?=;|\\||&|\\n|\\)|\\`|\\{|\\}|[ \\t]*#|\\])(?<!\\\\)", endCaptures: {}, name: "meta.for.shell", patterns: [{ include: "#arithmetic_double" }, { include: "#normal_context" }] }] }, function_definition: { applyEndPatternLast: 1, begin: `(?:[ \\t]*+)(?:(?:(\\bfunction\\b)(?:[ \\t]*+)([^ \\t\\n\\r\\(\\)="']+)(?:(?:(\\()(?:[ \\t]*+)(\\)))?))|(?:([^ \\t\\n\\r\\(\\)="']+)(?:[ \\t]*+)(\\()(?:[ \\t]*+)(\\))))`, beginCaptures: { 1: { name: "storage.type.function.shell" }, 2: { name: "entity.name.function.shell" }, 3: { name: "punctuation.definition.arguments.shell" }, 4: { name: "punctuation.definition.arguments.shell" }, 5: { name: "entity.name.function.shell" }, 6: { name: "punctuation.definition.arguments.shell" }, 7: { name: "punctuation.definition.arguments.shell" } }, end: "(?<=\\}|\\))", endCaptures: {}, name: "meta.function.shell", patterns: [{ match: "(?:\\G(?:\\t| |\\n))" }, { begin: "\\{", beginCaptures: { 0: { name: "punctuation.definition.group.shell punctuation.section.function.definition.shell" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.group.shell punctuation.section.function.definition.shell" } }, name: "meta.function.body.shell", patterns: [{ include: "#initial_context" }] }, { begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.group.shell punctuation.section.function.definition.shell" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.shell punctuation.section.function.definition.shell" } }, name: "meta.function.body.shell", patterns: [{ include: "#initial_context" }] }, { include: "#initial_context" }] }, heredoc: { patterns: [{ begin: `(?:((?<!<)(?:<<-))(?:[ \\t]*+)("|')(?:[ \\t]*+)([^"']+?)(?=\\s|;|&|<|"|')((?:\\2))(.*))`, beginCaptures: { 1: { name: "keyword.operator.heredoc.shell" }, 2: { name: "punctuation.definition.string.heredoc.quote.shell" }, 3: { name: "punctuation.definition.string.heredoc.delimiter.shell" }, 4: { name: "punctuation.definition.string.heredoc.quote.shell" }, 5: { patterns: [{ include: "#redirect_fix" }, { include: "#typical_statements" }] } }, contentName: "string.quoted.heredoc.indent.$3", end: "(?:(?:^\\t*)(?:\\3)(?=\\s|;|&|$))", endCaptures: { 0: { name: "punctuation.definition.string.heredoc.$0.shell" } }, patterns: [] }, { begin: `(?:((?<!<)(?:<<)(?!<))(?:[ \\t]*+)("|')(?:[ \\t]*+)([^"']+?)(?=\\s|;|&|<|"|')((?:\\2))(.*))`, beginCaptures: { 1: { name: "keyword.operator.heredoc.shell" }, 2: { name: "punctuation.definition.string.heredoc.quote.shell" }, 3: { name: "punctuation.definition.string.heredoc.delimiter.shell" }, 4: { name: "punctuation.definition.string.heredoc.quote.shell" }, 5: { patterns: [{ include: "#redirect_fix" }, { include: "#typical_statements" }] } }, contentName: "string.quoted.heredoc.no-indent.$3", end: "(?:^(?:\\3)(?=\\s|;|&|$))", endCaptures: { 0: { name: "punctuation.definition.string.heredoc.delimiter.shell" } }, patterns: [] }, { begin: `(?:((?<!<)(?:<<-))(?:[ \\t]*+)([^"' \\t]+)(?=\\s|;|&|<|"|')(.*))`, beginCaptures: { 1: { name: "keyword.operator.heredoc.shell" }, 2: { name: "punctuation.definition.string.heredoc.delimiter.shell" }, 3: { patterns: [{ include: "#redirect_fix" }, { include: "#typical_statements" }] } }, contentName: "string.unquoted.heredoc.indent.$2", end: "(?:(?:^\\t*)(?:\\2)(?=\\s|;|&|$))", endCaptures: { 0: { name: "punctuation.definition.string.heredoc.delimiter.shell" } }, patterns: [{ include: "#double_quote_escape_char" }, { include: "#variable" }, { include: "#interpolation" }] }, { begin: `(?:((?<!<)(?:<<)(?!<))(?:[ \\t]*+)([^"' \\t]+)(?=\\s|;|&|<|"|')(.*))`, beginCaptures: { 1: { name: "keyword.operator.heredoc.shell" }, 2: { name: "punctuation.definition.string.heredoc.delimiter.shell" }, 3: { patterns: [{ include: "#redirect_fix" }, { include: "#typical_statements" }] } }, contentName: "string.unquoted.heredoc.no-indent.$2", end: "(?:^(?:\\2)(?=\\s|;|&|$))", endCaptures: { 0: { name: "punctuation.definition.string.heredoc.delimiter.shell" } }, patterns: [{ include: "#double_quote_escape_char" }, { include: "#variable" }, { include: "#interpolation" }] }] }, herestring: { patterns: [{ begin: "(<<<)\\s*(('))", beginCaptures: { 1: { name: "keyword.operator.herestring.shell" }, 2: { name: "string.quoted.single.shell" }, 3: { name: "punctuation.definition.string.begin.shell" } }, contentName: "string.quoted.single.shell", end: "(')", endCaptures: { 0: { name: "string.quoted.single.shell" }, 1: { name: "punctuation.definition.string.end.shell" } }, name: "meta.herestring.shell" }, { begin: '(<<<)\\s*(("))', beginCaptures: { 1: { name: "keyword.operator.herestring.shell" }, 2: { name: "string.quoted.double.shell" }, 3: { name: "punctuation.definition.string.begin.shell" } }, contentName: "string.quoted.double.shell", end: '(")', endCaptures: { 0: { name: "string.quoted.double.shell" }, 1: { name: "punctuation.definition.string.end.shell" } }, name: "meta.herestring.shell", patterns: [{ include: "#double_quote_context" }] }, { captures: { 1: { name: "keyword.operator.herestring.shell" }, 2: { name: "string.unquoted.herestring.shell", patterns: [{ include: "#initial_context" }] } }, match: "(<<<)\\s*(([^\\s)\\\\]|\\\\.)+)", name: "meta.herestring.shell" }] }, initial_context: { patterns: [{ include: "#comment" }, { include: "#pipeline" }, { include: "#normal_statement_seperator" }, { include: "#logical_expression_double" }, { include: "#logical_expression_single" }, { include: "#assignment_statement" }, { include: "#case_statement" }, { include: "#for_statement" }, { include: "#loop" }, { include: "#function_definition" }, { include: "#line_continuation" }, { include: "#arithmetic_double" }, { include: "#misc_ranges" }, { include: "#variable" }, { include: "#interpolation" }, { include: "#heredoc" }, { include: "#herestring" }, { include: "#redirection" }, { include: "#pathname" }, { include: "#floating_keyword" }, { include: "#alias_statement" }, { include: "#normal_statement" }, { include: "#string" }, { include: "#support" }] }, inline_comment: { captures: { 1: { name: "comment.block.shell punctuation.definition.comment.begin.shell" }, 2: { name: "comment.block.shell" }, 3: { patterns: [{ match: "\\*\\/", name: "comment.block.shell punctuation.definition.comment.end.shell" }, { match: "\\*", name: "comment.block.shell" }] } }, match: "(\\/\\*)((?:(?:[^\\*]|(?:(?:\\*++)[^\\/]))*+)((?:(?:\\*++)\\/)))" }, interpolation: { patterns: [{ include: "#arithmetic_dollar" }, { include: "#subshell_dollar" }, { begin: "`", beginCaptures: { 0: { name: "punctuation.definition.evaluation.backticks.shell" } }, end: "`", endCaptures: { 0: { name: "punctuation.definition.evaluation.backticks.shell" } }, name: "string.interpolated.backtick.shell", patterns: [{ match: "\\\\[`\\\\$]", name: "constant.character.escape.shell" }, { begin: "(?<=\\W)(?=#)(?!#{)", beginCaptures: { 1: { name: "punctuation.whitespace.comment.leading.shell" } }, end: "(?!\\G)", patterns: [{ begin: "#", beginCaptures: { 0: { name: "punctuation.definition.comment.shell" } }, end: "(?=`)", name: "comment.line.number-sign.shell" }] }, { include: "#initial_context" }] }] }, keyword: { patterns: [{ match: "(?<=^|;|&|\\s)(then|else|elif|fi|for|in|do|done|select|continue|esac|while|until|return)(?=\\s|;|&|$)", name: "keyword.control.shell" }, { match: "(?<=^|;|&|\\s)(?:export|declare|typeset|local|readonly)(?=\\s|;|&|$)", name: "storage.modifier.shell" }] }, line_comment: { begin: "(?:\\s*+)(\\/\\/)", beginCaptures: { 1: { name: "punctuation.definition.comment.shell" } }, end: "(?<=\\n)(?<!\\\\\\n)", endCaptures: {}, name: "comment.line.double-slash.shell", patterns: [{ include: "#line_continuation_character" }] }, line_continuation: { match: "\\\\(?=\\n)", name: "constant.character.escape.line-continuation.shell" }, "logical-expression": { patterns: [{ include: "#arithmetic_no_dollar" }, { comment: "do we want a special rule for ( expr )?", match: "=[=~]?|!=?|<|>|&&|\\|\\|", name: "keyword.operator.logical.shell" }, { match: "(?<!\\S)-(nt|ot|ef|eq|ne|l[te]|g[te]|[a-hknoprstuwxzOGLSN])\\b", name: "keyword.operator.logical.shell" }] }, logical_expression_context: { patterns: [{ include: "#regex_comparison" }, { include: "#arithmetic_no_dollar" }, { include: "#logical-expression" }, { include: "#logical_expression_single" }, { include: "#logical_expression_double" }, { include: "#comment" }, { include: "#boolean" }, { include: "#redirect_number" }, { include: "#numeric_literal" }, { include: "#pipeline" }, { include: "#normal_statement_seperator" }, { include: "#string" }, { include: "#variable" }, { include: "#interpolation" }, { include: "#heredoc" }, { include: "#herestring" }, { include: "#pathname" }, { include: "#floating_keyword" }, { include: "#support" }] }, logical_expression_double: { begin: "\\[\\[", beginCaptures: { 0: { name: "punctuation.definition.logical-expression.shell" } }, end: "\\]\\]", endCaptures: { 0: { name: "punctuation.definition.logical-expression.shell" } }, name: "meta.scope.logical-expression.shell", patterns: [{ include: "#logical_expression_context" }] }, logical_expression_single: { begin: "\\[", beginCaptures: { 0: { name: "punctuation.definition.logical-expression.shell" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.logical-expression.shell" } }, name: "meta.scope.logical-expression.shell", patterns: [{ include: "#logical_expression_context" }] }, loop: { patterns: [{ begin: "(?<=^|;|&|\\s)(for)\\s+(.+?)\\s+(in)(?=\\s|;|&|$)", beginCaptures: { 1: { name: "keyword.control.shell" }, 2: { name: "variable.other.loop.shell", patterns: [{ include: "#string" }] }, 3: { name: "keyword.control.shell" } }, end: "(?<=^|;|&|\\s)done(?=\\s|;|&|$|\\))", endCaptures: { 0: { name: "keyword.control.shell" } }, name: "meta.scope.for-in-loop.shell", patterns: [{ include: "#initial_context" }] }, { begin: "(?<=^|;|&|\\s)(while|until)(?=\\s|;|&|$)", beginCaptures: { 1: { name: "keyword.control.shell" } }, end: "(?<=^|;|&|\\s)done(?=\\s|;|&|$|\\))", endCaptures: { 0: { name: "keyword.control.shell" } }, name: "meta.scope.while-loop.shell", patterns: [{ include: "#initial_context" }] }, { begin: "(?<=^|;|&|\\s)(select)\\s+((?:[^\\s\\\\]|\\\\.)+)(?=\\s|;|&|$)", beginCaptures: { 1: { name: "keyword.control.shell" }, 2: { name: "variable.other.loop.shell" } }, end: "(?<=^|;|&|\\s)(done)(?=\\s|;|&|$|\\))", endCaptures: { 1: { name: "keyword.control.shell" } }, name: "meta.scope.select-block.shell", patterns: [{ include: "#initial_context" }] }, { begin: "(?<=^|;|&|\\s)if(?=\\s|;|&|$)", beginCaptures: { 0: { name: "keyword.control.if.shell" } }, end: "(?<=^|;|&|\\s)fi(?=\\s|;|&|$)", endCaptures: { 0: { name: "keyword.control.fi.shell" } }, name: "meta.scope.if-block.shell", patterns: [{ include: "#initial_context" }] }] }, math: { patterns: [{ include: "#variable" }, { match: "\\+{1,2}|-{1,2}|!|~|\\*{1,2}|/|%|<[<=]?|>[>=]?|==|!=|^|\\|{1,2}|&{1,2}|\\?|\\:|,|=|[*/%+\\-&^|]=|<<=|>>=", name: "keyword.operator.arithmetic.shell" }, { match: "0[xX][0-9A-Fa-f]+", name: "constant.numeric.hex.shell" }, { match: ";", name: "punctuation.separator.semicolon.range" }, { match: "0\\d+", name: "constant.numeric.octal.shell" }, { match: "\\d{1,2}#[0-9a-zA-Z@_]+", name: "constant.numeric.other.shell" }, { match: "\\d+", name: "constant.numeric.integer.shell" }, { match: "(?<!\\w)(?:[a-zA-Z_0-9]+)(?!\\w)", name: "variable.other.normal.shell" }] }, math_operators: { patterns: [{ match: "\\+{1,2}|-{1,2}|!|~|\\*{1,2}|/|%|<[<=]?|>[>=]?|==|!=|^|\\|{1,2}|&{1,2}|\\?|\\:|,|=|[*/%+\\-&^|]=|<<=|>>=", name: "keyword.operator.arithmetic.shell" }, { match: "0[xX][0-9A-Fa-f]+", name: "constant.numeric.hex.shell" }, { match: "0\\d+", name: "constant.numeric.octal.shell" }, { match: "\\d{1,2}#[0-9a-zA-Z@_]+", name: "constant.numeric.other.shell" }, { match: "\\d+", name: "constant.numeric.integer.shell" }] }, misc_ranges: { patterns: [{ include: "#logical_expression_single" }, { include: "#logical_expression_double" }, { include: "#subshell_dollar" }, { begin: "(?<![^ \\t])({)(?!\\w|\\$)", beginCaptures: { 1: { name: "punctuation.definition.group.shell" } }, end: "}", endCaptures: { 0: { name: "punctuation.definition.group.shell" } }, name: "meta.scope.group.shell", patterns: [{ include: "#initial_context" }] }] }, modified_assignment_statement: { begin: "(?<=^|;|&|[ \\t])(?:readonly|declare|typeset|export|local)(?=[ \\t]|;|&|$)", beginCaptures: { 0: { name: "storage.modifier.$0.shell" } }, end: "(?=;|\\||&|\\n|\\)|\\`|\\{|\\}|[ \\t]*#|\\])(?<!\\\\)", endCaptures: {}, name: "meta.statement.shell meta.expression.assignment.modified.shell", patterns: [{ match: "(?<!\\w)-\\w+\\b", name: "string.unquoted.argument.shell constant.other.option.shell" }, { include: "#array_value" }, { captures: { 1: { name: "variable.other.assignment.shell" }, 2: { name: "punctuation.definition.array.access.shell" }, 3: { name: "variable.other.assignment.shell" }, 4: { name: "constant.numeric.shell constant.numeric.integer.shell" }, 5: { name: "punctuation.definition.array.access.shell" }, 6: { name: "keyword.operator.assignment.shell" }, 7: { name: "keyword.operator.assignment.compound.shell" }, 8: { name: "keyword.operator.assignment.compound.shell" }, 9: { name: "constant.numeric.shell constant.numeric.hex.shell" }, 10: { name: "constant.numeric.shell constant.numeric.octal.shell" }, 11: { name: "constant.numeric.shell constant.numeric.other.shell" }, 12: { name: "constant.numeric.shell constant.numeric.decimal.shell" }, 13: { name: "constant.numeric.shell constant.numeric.version.shell" }, 14: { name: "constant.numeric.shell constant.numeric.integer.shell" } }, match: "(?:((?<!\\w)(?:[a-zA-Z_0-9-]+)(?!\\w))(?:(?:(\\[)((?:(?:(?:(?:\\$?)(?:(?<!\\w)(?:[a-zA-Z_0-9-]+)(?!\\w))|@)|\\*)|(-?\\d+)))(\\]))?)(?:(?:(?:(\\=)|(\\+\\=))|(\\-\\=))?)(?:(?:(?<==| |\\t|^|\\{|\\(|\\[)(?:(?:(?:(?:(?:(0[xX][0-9A-Fa-f]+)|(0\\d+))|(\\d{1,2}#[0-9a-zA-Z@_]+))|(-?\\d+(?:\\.\\d+)))|(-?\\d+(?:\\.\\d+)+))|(-?\\d+))(?= |\\t|$|\\}|\\)|;))?))" }, { include: "#normal_context" }] }, modifiers: { match: "(?<=^|;|&|[ \\t])(?:readonly|declare|typeset|export|local)(?=[ \\t]|;|&|$)", name: "storage.modifier.$0.shell" }, normal_assignment_statement: { begin: "(?:[ \\t]*+)(?:((?<!\\w)(?:[a-zA-Z_0-9-]+)(?!\\w))(?:(?:(\\[)((?:(?:(?:(?:\\$?)(?:(?<!\\w)(?:[a-zA-Z_0-9-]+)(?!\\w))|@)|\\*)|(-?\\d+)))(\\]))?))(?:(?:(\\=)|(\\+\\=))|(\\-\\=))", beginCaptures: { 1: { name: "variable.other.assignment.shell" }, 2: { name: "punctuation.definition.array.access.shell" }, 3: { name: "variable.other.assignment.shell" }, 4: { name: "constant.numeric.shell constant.numeric.integer.shell" }, 5: { name: "punctuation.definition.array.access.shell" }, 6: { name: "keyword.operator.assignment.shell" }, 7: { name: "keyword.operator.assignment.compound.shell" }, 8: { name: "keyword.operator.assignment.compound.shell" } }, end: "(?=;|\\||&|\\n|\\)|\\`|\\{|\\}|[ \\t]*#|\\])(?<!\\\\)", endCaptures: {}, name: "meta.expression.assignment.shell", patterns: [{ include: "#comment" }, { include: "#string" }, { include: "#normal_assignment_statement" }, { begin: "(?<= |\\t)(?! |\\t|\\w+=)", beginCaptures: {}, end: "(?=;|\\||&|\\n|\\)|\\`|\\{|\\}|[ \\t]*#|\\])(?<!\\\\)", endCaptures: {}, name: "meta.statement.command.env.shell", patterns: [{ include: "#command_name_range" }, { include: "#line_continuation" }, { include: "#option" }, { include: "#argument" }, { include: "#string" }] }, { include: "#simple_unquoted" }, { include: "#normal_context" }] }, normal_context: { patterns: [{ include: "#comment" }, { include: "#pipeline" }, { include: "#normal_statement_seperator" }, { include: "#misc_ranges" }, { include: "#boolean" }, { include: "#redirect_number" }, { include: "#numeric_literal" }, { include: "#string" }, { include: "#variable" }, { include: "#interpolation" }, { include: "#heredoc" }, { include: "#herestring" }, { include: "#redirection" }, { include: "#pathname" }, { include: "#floating_keyword" }, { include: "#support" }, { include: "#parenthese" }] }, normal_statement: { begin: "(?:(?!^[ \\t]*+$)(?:(?<=^until | until |\\tuntil |^while | while |\\twhile |^elif | elif |\\telif |^else | else |\\telse |^then | then |\\tthen |^do | do |\\tdo |^if | if |\\tif )|(?<=(?:^|;|\\||&|!|\\(|\\{|\\`)))(?:[ \\t]*+)(?!nocorrect\\W|nocorrect\\$|function\\W|function\\$|foreach\\W|foreach\\$|repeat\\W|repeat\\$|logout\\W|logout\\$|coproc\\W|coproc\\$|select\\W|select\\$|while\\W|while\\$|pushd\\W|pushd\\$|until\\W|until\\$|case\\W|case\\$|done\\W|done\\$|elif\\W|elif\\$|else\\W|else\\$|esac\\W|esac\\$|popd\\W|popd\\$|then\\W|then\\$|time\\W|time\\$|for\\W|for\\$|end\\W|end\\$|fi\\W|fi\\$|do\\W|do\\$|in\\W|in\\$|if\\W|if\\$))", beginCaptures: {}, end: "(?=;|\\||&|\\n|\\)|\\`|\\{|\\}|[ \\t]*#|\\])(?<!\\\\)", endCaptures: {}, name: "meta.statement.shell", patterns: [{ include: "#typical_statements" }] }, normal_statement_seperator: { captures: { 1: { name: "punctuation.terminator.statement.semicolon.shell" }, 2: { name: "punctuation.separator.statement.and.shell" }, 3: { name: "punctuation.separator.statement.or.shell" }, 4: { name: "punctuation.separator.statement.background.shell" } }, match: "(?:(?:(?:(;)|(&&))|(\\|\\|))|(&))" }, numeric_literal: { captures: { 1: { name: "constant.numeric.shell constant.numeric.hex.shell" }, 2: { name: "constant.numeric.shell constant.numeric.octal.shell" }, 3: { name: "constant.numeric.shell constant.numeric.other.shell" }, 4: { name: "constant.numeric.shell constant.numeric.decimal.shell" }, 5: { name: "constant.numeric.shell constant.numeric.version.shell" }, 6: { name: "constant.numeric.shell constant.numeric.integer.shell" } }, match: "(?<==| |\\t|^|\\{|\\(|\\[)(?:(?:(?:(?:(?:(0[xX][0-9A-Fa-f]+)|(0\\d+))|(\\d{1,2}#[0-9a-zA-Z@_]+))|(-?\\d+(?:\\.\\d+)))|(-?\\d+(?:\\.\\d+)+))|(-?\\d+))(?= |\\t|$|\\}|\\)|;)" }, option: { begin: "(?:(?:[ \\t]++)(-)((?!(?:!|&|\\||\\(|\\)|\\{|\\[|<|>|#|\\n|$|;|[ \\t]))))", beginCaptures: { 1: { name: "string.unquoted.argument.shell constant.other.option.dash.shell" }, 2: { name: "string.unquoted.argument.shell constant.other.option.shell" } }, contentName: "string.unquoted.argument constant.other.option", end: "(?:(?=[ \\t])|(?:(?=;|\\||&|\\n|\\)|\\`|\\{|\\}|[ \\t]*#|\\])(?<!\\\\)))", endCaptures: {}, patterns: [{ include: "#option_context" }] }, option_context: { patterns: [{ include: "#misc_ranges" }, { include: "#string" }, { include: "#variable" }, { include: "#interpolation" }, { include: "#heredoc" }, { include: "#herestring" }, { include: "#redirection" }, { include: "#pathname" }, { include: "#floating_keyword" }, { include: "#support" }] }, parenthese: { patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.section.parenthese.shell" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.parenthese.shell" } }, name: "meta.parenthese.group.shell", patterns: [{ include: "#initial_context" }] }] }, pathname: { patterns: [{ match: "(?<=\\s|:|=|^)~", name: "keyword.operator.tilde.shell" }, { match: "\\*|\\?", name: "keyword.operator.glob.shell" }, { begin: "([?*+@!])(\\()", beginCaptures: { 1: { name: "keyword.operator.extglob.shell" }, 2: { name: "punctuation.definition.extglob.shell" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.extglob.shell" } }, name: "meta.structure.extglob.shell", patterns: [{ include: "#initial_context" }] }] }, pipeline: { patterns: [{ match: "(?<=^|;|&|\\s)(time)(?=\\s|;|&|$)", name: "keyword.other.shell" }, { match: "[|!]", name: "keyword.operator.pipe.shell" }] }, redirect_fix: { captures: { 1: { name: "keyword.operator.redirect.shell" }, 2: { name: "string.unquoted.argument.shell" } }, match: "(?:(>>?)(?:[ \\t]*+)([^ \\t\\n>&;<>\\(\\)\\$`\\\\\"'<\\|]+))" }, redirect_number: { captures: { 1: { name: "keyword.operator.redirect.stdout.shell" }, 2: { name: "keyword.operator.redirect.stderr.shell" }, 3: { name: "keyword.operator.redirect.$3.shell" } }, match: "(?<=[ \\t])(?:(?:(1)|(2)|(\\d+))(?=>))" }, redirection: { patterns: [{ begin: "[><]\\(", beginCaptures: { 0: { name: "punctuation.definition.string.begin.shell" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.string.end.shell" } }, name: "string.interpolated.process-substitution.shell", patterns: [{ include: "#initial_context" }] }, { match: "(?<![<>])(&>|\\d*>&\\d*|\\d*(>>|>|<)|\\d*<&|\\d*<>)(?![<>])", name: "keyword.operator.redirect.shell" }] }, regex_comparison: { match: "\\=~", name: "keyword.operator.logical.regex.shell" }, regexp: { patterns: [{ match: "(?:.+)" }] }, simple_options: { captures: { 0: { patterns: [{ captures: { 1: { name: "string.unquoted.argument.shell constant.other.option.dash.shell" }, 2: { name: "string.unquoted.argument.shell constant.other.option.shell" } }, match: "(?:[ \\t]++)(\\-)(\\w+)" }] } }, match: "(?:(?:[ \\t]++)\\-(?:\\w+))*" }, simple_unquoted: { match: "[^ \\t\\n>&;<>\\(\\)\\$`\\\\\"'<\\|]", name: "string.unquoted.shell" }, special_expansion: { match: "!|:[-=?]?|\\*|@|##|#|%%|%|\\/", name: "keyword.operator.expansion.shell" }, start_of_command: { match: "(?:(?:[ \\t]*+)(?:(?!(?:!|&|\\||\\(|\\)|\\{|\\[|<|>|#|\\n|$|;|[ \\t]))(?!nocorrect |nocorrect	|nocorrect$|readonly |readonly	|readonly$|function |function	|function$|foreach |foreach	|foreach$|coproc |coproc	|coproc$|logout |logout	|logout$|export |export	|export$|select |select	|select$|repeat |repeat	|repeat$|pushd |pushd	|pushd$|until |until	|until$|while |while	|while$|local |local	|local$|case |case	|case$|done |done	|done$|elif |elif	|elif$|else |else	|else$|esac |esac	|esac$|popd |popd	|popd$|then |then	|then$|time |time	|time$|for |for	|for$|end |end	|end$|fi |fi	|fi$|do |do	|do$|in |in	|in$|if |if	|if$)(?!\\\\\\n?$)))" }, string: { patterns: [{ match: "\\\\.", name: "constant.character.escape.shell" }, { begin: "'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.shell" } }, end: "'", endCaptures: { 0: { name: "punctuation.definition.string.end.shell" } }, name: "string.quoted.single.shell" }, { begin: '\\$?"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.shell" } }, end: '"', endCaptures: { 0: { name: "punctuation.definition.string.end.shell" } }, name: "string.quoted.double.shell", patterns: [{ match: '\\\\[\\$\\n`"\\\\]', name: "constant.character.escape.shell" }, { include: "#variable" }, { include: "#interpolation" }] }, { begin: "\\$'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.shell" } }, end: "'", endCaptures: { 0: { name: "punctuation.definition.string.end.shell" } }, name: "string.quoted.single.dollar.shell", patterns: [{ match: "\\\\(?:a|b|e|f|n|r|t|v|\\\\|')", name: "constant.character.escape.ansi-c.shell" }, { match: '\\\\[0-9]{3}"', name: "constant.character.escape.octal.shell" }, { match: '\\\\x[0-9a-fA-F]{2}"', name: "constant.character.escape.hex.shell" }, { match: '\\\\c."', name: "constant.character.escape.control-char.shell" }] }] }, subshell_dollar: { patterns: [{ begin: "(?:\\$\\()", beginCaptures: { 0: { name: "punctuation.definition.subshell.single.shell" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.subshell.single.shell" } }, name: "meta.scope.subshell", patterns: [{ include: "#parenthese" }, { include: "#initial_context" }] }] }, support: { patterns: [{ match: "(?<=^|;|&|\\s)(?::|\\.)(?=\\s|;|&|$)", name: "support.function.builtin.shell" }] }, typical_statements: { patterns: [{ include: "#assignment_statement" }, { include: "#case_statement" }, { include: "#for_statement" }, { include: "#while_statement" }, { include: "#function_definition" }, { include: "#command_statement" }, { include: "#line_continuation" }, { include: "#arithmetic_double" }, { include: "#normal_context" }] }, variable: { patterns: [{ captures: { 1: { name: "punctuation.definition.variable.shell variable.parameter.positional.all.shell" }, 2: { name: "variable.parameter.positional.all.shell" } }, match: "(?:(\\$)(\\@(?!\\w)))" }, { captures: { 1: { name: "punctuation.definition.variable.shell variable.parameter.positional.shell" }, 2: { name: "variable.parameter.positional.shell" } }, match: "(?:(\\$)([0-9](?!\\w)))" }, { captures: { 1: { name: "punctuation.definition.variable.shell variable.language.special.shell" }, 2: { name: "variable.language.special.shell" } }, match: "(?:(\\$)([-*#?$!0_](?!\\w)))" }, { begin: "(?:(\\$)(\\{)(?:[ \\t]*+)(?=\\d))", beginCaptures: { 1: { name: "punctuation.definition.variable.shell variable.parameter.positional.shell" }, 2: { name: "punctuation.section.bracket.curly.variable.begin.shell punctuation.definition.variable.shell variable.parameter.positional.shell" } }, contentName: "meta.parameter-expansion", end: "\\}", endCaptures: { 0: { name: "punctuation.section.bracket.curly.variable.end.shell punctuation.definition.variable.shell variable.parameter.positional.shell" } }, patterns: [{ include: "#special_expansion" }, { include: "#array_access_inline" }, { match: "[0-9]+", name: "variable.parameter.positional.shell" }, { match: "(?<!\\w)(?:[a-zA-Z_0-9-]+)(?!\\w)", name: "variable.other.normal.shell" }, { include: "#variable" }, { include: "#string" }] }, { begin: "(?:(\\$)(\\{))", beginCaptures: { 1: { name: "punctuation.definition.variable.shell" }, 2: { name: "punctuation.section.bracket.curly.variable.begin.shell punctuation.definition.variable.shell" } }, contentName: "meta.parameter-expansion", end: "\\}", endCaptures: { 0: { name: "punctuation.section.bracket.curly.variable.end.shell punctuation.definition.variable.shell" } }, patterns: [{ include: "#special_expansion" }, { include: "#array_access_inline" }, { match: "(?<!\\w)(?:[a-zA-Z_0-9-]+)(?!\\w)", name: "variable.other.normal.shell" }, { include: "#variable" }, { include: "#string" }] }, { captures: { 1: { name: "punctuation.definition.variable.shell variable.other.normal.shell" }, 2: { name: "variable.other.normal.shell" } }, match: "(?:(\\$)((?:\\w+)(?!\\w)))" }] }, while_statement: { patterns: [{ begin: "(\\bwhile\\b)", beginCaptures: { 1: { name: "keyword.control.while.shell" } }, end: "(?=;|\\||&|\\n|\\)|\\`|\\{|\\}|[ \\t]*#|\\])(?<!\\\\)", endCaptures: {}, name: "meta.while.shell", patterns: [{ include: "#line_continuation" }, { include: "#math_operators" }, { include: "#option" }, { include: "#simple_unquoted" }, { include: "#normal_context" }, { include: "#string" }] }] } }, scopeName: "source.shell", aliases: ["bash", "sh", "shell", "zsh"] });
var o = [
  ge
];
const _e = Object.freeze({ displayName: "Lua", name: "lua", patterns: [{ begin: "\\b(?:(local)\\s+)?(function)\\b(?![,:])", beginCaptures: { 1: { name: "keyword.local.lua" }, 2: { name: "keyword.control.lua" } }, end: `(?<=[\\)\\-{}\\[\\]"'])`, name: "meta.function.lua", patterns: [{ include: "#comment" }, { begin: "(\\()", beginCaptures: { 1: { name: "punctuation.definition.parameters.begin.lua" } }, end: `(\\))|(?=[\\-\\.{}\\[\\]"'])`, endCaptures: { 1: { name: "punctuation.definition.parameters.finish.lua" } }, name: "meta.parameter.lua", patterns: [{ include: "#comment" }, { match: "[a-zA-Z_][a-zA-Z0-9_]*", name: "variable.parameter.function.lua" }, { match: ",", name: "punctuation.separator.arguments.lua" }, { begin: ":", beginCaptures: { 0: { name: "punctuation.separator.arguments.lua" } }, end: "(?=[\\),])", patterns: [{ include: "#emmydoc.type" }] }] }, { match: "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b\\s*(?=:)", name: "entity.name.class.lua" }, { match: "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b", name: "entity.name.function.lua" }] }, { match: "(?<![\\w\\d.])0[xX][0-9A-Fa-f]+(\\.[0-9A-Fa-f]*)?([eE]-?\\d*)?([pP][-+]\\d+)?", name: "constant.numeric.float.hexadecimal.lua" }, { match: "(?<![\\w\\d.])0[xX]\\.[0-9A-Fa-f]+([eE]-?\\d*)?([pP][-+]\\d+)?", name: "constant.numeric.float.hexadecimal.lua" }, { match: "(?<![\\w\\d.])0[xX][0-9A-Fa-f]+(?![pPeE.0-9])", name: "constant.numeric.integer.hexadecimal.lua" }, { match: "(?<![\\w\\d.])\\d+(\\.\\d*)?([eE]-?\\d*)?", name: "constant.numeric.float.lua" }, { match: "(?<![\\w\\d.])\\.\\d+([eE]-?\\d*)?", name: "constant.numeric.float.lua" }, { match: "(?<![\\w\\d.])\\d+(?![pPeE.0-9])", name: "constant.numeric.integer.lua" }, { include: "#string" }, { captures: { 1: { name: "punctuation.definition.comment.lua" } }, match: "\\A(#!).*$\\n?", name: "comment.line.shebang.lua" }, { include: "#comment" }, { captures: { 1: { name: "keyword.control.goto.lua" }, 2: { name: "string.tag.lua" } }, match: "\\b(goto)\\s+([a-zA-Z_][a-zA-Z0-9_]*)" }, { captures: { 1: { name: "punctuation.section.embedded.begin.lua" }, 2: { name: "punctuation.section.embedded.end.lua" } }, match: "(::)\\s*[a-zA-Z_][a-zA-Z0-9_]*\\s*(::)", name: "string.tag.lua" }, { captures: { 0: { name: "storage.type.attribute.lua" } }, match: "<\\s*(const|close)\\s*>" }, { match: "\\<[a-zA-Z_\\*][a-zA-Z0-9_\\.\\*\\-]*\\>", name: "storage.type.generic.lua" }, { match: "\\b(break|do|else|for|if|elseif|goto|return|then|repeat|while|until|end|in)\\b", name: "keyword.control.lua" }, { match: "\\b(local)\\b", name: "keyword.local.lua" }, { match: "\\b(function)\\b(?![,:])", name: "keyword.control.lua" }, { match: "(?<![^.]\\.|:)\\b(false|nil(?!:)|true|_ENV|_G|_VERSION|math\\.(pi|huge|maxinteger|mininteger)|utf8\\.charpattern|io\\.(stdin|stdout|stderr)|package\\.(config|cpath|loaded|loaders|path|preload|searchers))\\b|(?<![.])\\.{3}(?!\\.)", name: "constant.language.lua" }, { match: "(?<![^.]\\.|:)\\b(self)\\b", name: "variable.language.self.lua" }, { match: "(?<![^.]\\.|:)\\b(assert|collectgarbage|dofile|error|getfenv|getmetatable|ipairs|load|loadfile|loadstring|module|next|pairs|pcall|print|rawequal|rawget|rawlen|rawset|require|select|setfenv|setmetatable|tonumber|tostring|type|unpack|xpcall)\\b(?!\\s*=(?!=))", name: "support.function.lua" }, { match: "(?<![^.]\\.|:)\\b(async)\\b(?!\\s*=(?!=))", name: "entity.name.tag.lua" }, { match: "(?<![^.]\\.|:)\\b(coroutine\\.(create|isyieldable|close|resume|running|status|wrap|yield)|string\\.(byte|char|dump|find|format|gmatch|gsub|len|lower|match|pack|packsize|rep|reverse|sub|unpack|upper)|table\\.(concat|insert|maxn|move|pack|remove|sort|unpack)|math\\.(abs|acos|asin|atan2?|ceil|cosh?|deg|exp|floor|fmod|frexp|ldexp|log|log10|max|min|modf|pow|rad|random|randomseed|sinh?|sqrt|tanh?|tointeger|type)|io\\.(close|flush|input|lines|open|output|popen|read|tmpfile|type|write)|os\\.(clock|date|difftime|execute|exit|getenv|remove|rename|setlocale|time|tmpname)|package\\.(loadlib|seeall|searchpath)|debug\\.(debug|[gs]etfenv|[gs]ethook|getinfo|[gs]etlocal|[gs]etmetatable|getregistry|[gs]etupvalue|[gs]etuservalue|set[Cc]stacklimit|traceback|upvalueid|upvaluejoin)|bit32\\.(arshift|band|bnot|bor|btest|bxor|extract|replace|lrotate|lshift|rrotate|rshift)|utf8\\.(char|codes|codepoint|len|offset))\\b(?!\\s*=(?!=))", name: "support.function.library.lua" }, { match: "\\b(and|or|not|\\|\\||\\&\\&|\\!)\\b", name: "keyword.operator.lua" }, { match: `\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?=\\s*(?:[({"']|\\[\\[))`, name: "support.function.any-method.lua" }, { match: "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?=\\s*\\??:)", name: "entity.name.class.lua" }, { match: "(?<=[^.]\\.|:)\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?!\\s*=\\s*\\b(function)\\b)", name: "entity.other.attribute.lua" }, { match: "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?!\\s*=\\s*\\b(function)\\b)", name: "variable.other.lua" }, { match: "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?=\\s*=\\s*\\b(function)\\b)", name: "entity.name.function.lua" }, { match: "\\+|-|%|#|\\*|\\/|\\^|==?|~=|!=|<=?|>=?|(?<!\\.)\\.{2}(?!\\.)", name: "keyword.operator.lua" }], repository: { comment: { patterns: [{ begin: "(^[ \\t]+)?(?=--)", beginCaptures: { 1: { name: "punctuation.whitespace.comment.leading.lua" } }, end: "(?!\\G)((?!^)[ \\t]+\\n)?", endCaptures: { 1: { name: "punctuation.whitespace.comment.trailing.lua" } }, patterns: [{ begin: "--\\[(=*)\\[@@@", beginCaptures: { 0: { name: "punctuation.definition.comment.begin.lua" } }, end: "(--)?\\]\\1\\]", endCaptures: { 0: { name: "punctuation.definition.comment.end.lua" } }, name: "", patterns: [{ include: "source.lua" }] }, { begin: "--\\[(=*)\\[", beginCaptures: { 0: { name: "punctuation.definition.comment.begin.lua" } }, end: "(--)?\\]\\1\\]", endCaptures: { 0: { name: "punctuation.definition.comment.end.lua" } }, name: "comment.block.lua", patterns: [{ include: "#emmydoc" }, { include: "#ldoc_tag" }] }, { begin: "----", beginCaptures: { 0: { name: "punctuation.definition.comment.lua" } }, end: "\\n", name: "comment.line.double-dash.lua" }, { begin: "---", beginCaptures: { 0: { name: "punctuation.definition.comment.lua" } }, end: "\\n", name: "comment.line.double-dash.documentation.lua", patterns: [{ include: "#emmydoc" }, { include: "#ldoc_tag" }] }, { begin: "--", beginCaptures: { 0: { name: "punctuation.definition.comment.lua" } }, end: "\\n", name: "comment.line.double-dash.lua", patterns: [{ include: "#ldoc_tag" }] }] }, { begin: "\\/\\*", beginCaptures: { 0: { name: "punctuation.definition.comment.begin.lua" } }, end: "\\*\\/", endCaptures: { 0: { name: "punctuation.definition.comment.end.lua" } }, name: "comment.block.lua", patterns: [{ include: "#emmydoc" }, { include: "#ldoc_tag" }] }] }, emmydoc: { patterns: [{ begin: "(?<=---)[ \\t]*@class", beginCaptures: { 0: { name: "storage.type.annotation.lua" } }, end: "(?=[\\n@#])", patterns: [{ match: "\\b([a-zA-Z_\\*][a-zA-Z0-9_\\.\\*\\-]*)", name: "support.class.lua" }, { match: ":|,", name: "keyword.operator.lua" }] }, { begin: "(?<=---)[ \\t]*@enum", beginCaptures: { 0: { name: "storage.type.annotation.lua" } }, end: "(?=[\\n@#])", patterns: [{ begin: "\\b([a-zA-Z_\\*][a-zA-Z0-9_\\.\\*\\-]*)", beginCaptures: { 0: { name: "variable.lua" } }, end: "(?=\\n)" }] }, { begin: "(?<=---)[ \\t]*@type", beginCaptures: { 0: { name: "storage.type.annotation.lua" } }, end: "(?=[\\n@#])", patterns: [{ include: "#emmydoc.type" }] }, { begin: "(?<=---)[ \\t]*@alias", beginCaptures: { 0: { name: "storage.type.annotation.lua" } }, end: "(?=[\\n@#])", patterns: [{ begin: "\\b([a-zA-Z_\\*][a-zA-Z0-9_\\.\\*\\-]*)", beginCaptures: { 0: { name: "variable.lua" } }, end: "(?=[\\n#])", patterns: [{ include: "#emmydoc.type" }] }] }, { begin: "(?<=---)[ \\t]*(@operator)\\s*(\\b[a-z]+)?", beginCaptures: { 1: { name: "storage.type.annotation.lua" }, 2: { name: "support.function.library.lua" } }, end: "(?=[\\n@#])", patterns: [{ include: "#emmydoc.type" }] }, { begin: "(?<=---)[ \\t]*@cast", beginCaptures: { 0: { name: "storage.type.annotation.lua" } }, end: "(?=[\\n@#])", patterns: [{ begin: "\\b([a-zA-Z_\\*][a-zA-Z0-9_\\.\\*\\-]*)", beginCaptures: { 0: { name: "variable.other.lua" } }, end: "(?=\\n)", patterns: [{ include: "#emmydoc.type" }, { match: "([+-|])", name: "keyword.operator.lua" }] }] }, { begin: "(?<=---)[ \\t]*@param", beginCaptures: { 0: { name: "storage.type.annotation.lua" } }, end: "(?=[\\n@#])", patterns: [{ begin: "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(\\??)", beginCaptures: { 1: { name: "entity.name.variable.lua" }, 2: { name: "keyword.operator.lua" } }, end: "(?=[\\n#])", patterns: [{ include: "#emmydoc.type" }] }] }, { begin: "(?<=---)[ \\t]*@return", beginCaptures: { 0: { name: "storage.type.annotation.lua" } }, end: "(?=[\\n@#])", patterns: [{ match: "\\?", name: "keyword.operator.lua" }, { include: "#emmydoc.type" }] }, { begin: "(?<=---)[ \\t]*@field", beginCaptures: { 0: { name: "storage.type.annotation.lua" } }, end: "(?=[\\n@#])", patterns: [{ begin: "(\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b|(\\[))(\\??)", beginCaptures: { 2: { name: "entity.name.variable.lua" }, 3: { name: "keyword.operator.lua" } }, end: "(?=[\\n#])", patterns: [{ include: "#string" }, { include: "#emmydoc.type" }, { match: "\\]", name: "keyword.operator.lua" }] }] }, { begin: "(?<=---)[ \\t]*@generic", beginCaptures: { 0: { name: "storage.type.annotation.lua" } }, end: "(?=[\\n@#])", patterns: [{ begin: "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b", beginCaptures: { 0: { name: "storage.type.generic.lua" } }, end: "(?=\\n)|(,)", endCaptures: { 0: { name: "keyword.operator.lua" } }, patterns: [{ match: ":", name: "keyword.operator.lua" }, { include: "#emmydoc.type" }] }] }, { begin: "(?<=---)[ \\t]*@vararg", beginCaptures: { 0: { name: "storage.type.annotation.lua" } }, end: "(?=[\\n@#])", patterns: [{ include: "#emmydoc.type" }] }, { begin: "(?<=---)[ \\t]*@overload", beginCaptures: { 0: { name: "storage.type.annotation.lua" } }, end: "(?=[\\n@#])", patterns: [{ include: "#emmydoc.type" }] }, { begin: "(?<=---)[ \\t]*@deprecated", beginCaptures: { 0: { name: "storage.type.annotation.lua" } }, end: "(?=[\\n@#])" }, { begin: "(?<=---)[ \\t]*@meta", beginCaptures: { 0: { name: "storage.type.annotation.lua" } }, end: "(?=[\\n@#])" }, { begin: "(?<=---)[ \\t]*@private", beginCaptures: { 0: { name: "storage.type.annotation.lua" } }, end: "(?=[\\n@#])" }, { begin: "(?<=---)[ \\t]*@protected", beginCaptures: { 0: { name: "storage.type.annotation.lua" } }, end: "(?=[\\n@#])" }, { begin: "(?<=---)[ \\t]*@package", beginCaptures: { 0: { name: "storage.type.annotation.lua" } }, end: "(?=[\\n@#])" }, { begin: "(?<=---)[ \\t]*@version", beginCaptures: { 0: { name: "storage.type.annotation.lua" } }, end: "(?=[\\n@#])", patterns: [{ match: "\\b(5\\.1|5\\.2|5\\.3|5\\.4|JIT)\\b", name: "support.class.lua" }, { match: ",|\\>|\\<", name: "keyword.operator.lua" }] }, { begin: "(?<=---)[ \\t]*@see", beginCaptures: { 0: { name: "storage.type.annotation.lua" } }, end: "(?=[\\n@#])", patterns: [{ match: "\\b([a-zA-Z_\\*][a-zA-Z0-9_\\.\\*\\-]*)", name: "support.class.lua" }, { match: "#", name: "keyword.operator.lua" }] }, { begin: "(?<=---)[ \\t]*@diagnostic", beginCaptures: { 0: { name: "storage.type.annotation.lua" } }, end: "(?=[\\n@#])", patterns: [{ begin: "([a-zA-Z_\\-0-9]+)[ \\t]*(:)?", beginCaptures: { 1: { name: "keyword.other.unit" }, 2: { name: "keyword.operator.unit" } }, end: "(?=\\n)", patterns: [{ match: "\\b([a-zA-Z_\\*][a-zA-Z0-9_\\-]*)", name: "support.class.lua" }, { match: ",", name: "keyword.operator.lua" }] }] }, { begin: "(?<=---)[ \\t]*@module", beginCaptures: { 0: { name: "storage.type.annotation.lua" } }, end: "(?=[\\n@#])", patterns: [{ include: "#string" }] }, { match: "(?<=---)[ \\t]*@(async|nodiscard)", name: "storage.type.annotation.lua" }, { begin: "(?<=---)\\|\\s*[\\>\\+]?", beginCaptures: { 0: { name: "storage.type.annotation.lua" } }, end: "(?=[\\n@#])", patterns: [{ include: "#string" }] }] }, "emmydoc.type": { patterns: [{ begin: "\\bfun\\b", beginCaptures: { 0: { name: "keyword.control.lua" } }, end: "(?=[\\s#])", patterns: [{ match: "[\\(\\),:\\?][ \\t]*", name: "keyword.operator.lua" }, { match: "([a-zA-Z_][a-zA-Z0-9_\\.\\*\\[\\]\\<\\>\\,\\-]*)(?<!,)[ \\t]*(?=\\??:)", name: "entity.name.variable.lua" }, { include: "#emmydoc.type" }, { include: "#string" }] }, { match: "\\<[a-zA-Z_\\*][a-zA-Z0-9_\\.\\*\\-]*\\>", name: "storage.type.generic.lua" }, { match: "\\basync\\b", name: "entity.name.tag.lua" }, { match: "[\\{\\}\\:\\,\\?\\|\\`][ \\t]*", name: "keyword.operator.lua" }, { begin: `(?=[a-zA-Z_\\.\\*"'\\[])`, end: "(?=[\\s\\)\\,\\?\\:\\}\\|#])", patterns: [{ match: "([a-zA-Z0-9_\\.\\*\\[\\]\\<\\>\\,\\-]+)(?<!,)[ \\t]*", name: "support.type.lua" }, { match: "(\\.\\.\\.)[ \\t]*", name: "constant.language.lua" }, { include: "#string" }] }] }, escaped_char: { patterns: [{ match: `\\\\[abfnrtv\\\\"'\\n]`, name: "constant.character.escape.lua" }, { match: "\\\\z[\\n\\t ]*", name: "constant.character.escape.lua" }, { match: "\\\\\\d{1,3}", name: "constant.character.escape.byte.lua" }, { match: "\\\\x[0-9A-Fa-f][0-9A-Fa-f]", name: "constant.character.escape.byte.lua" }, { match: "\\\\u\\{[0-9A-Fa-f]+\\}", name: "constant.character.escape.unicode.lua" }, { match: "\\\\.", name: "invalid.illegal.character.escape.lua" }] }, ldoc_tag: { captures: { 1: { name: "punctuation.definition.block.tag.ldoc" }, 2: { name: "storage.type.class.ldoc" } }, match: "\\G[ \\t]*(@)(alias|annotation|author|charset|class|classmod|comment|constructor|copyright|description|example|export|factory|field|file|fixme|function|include|lfunction|license|local|module|name|param|pragma|private|raise|release|return|script|section|see|set|static|submodule|summary|tfield|thread|tparam|treturn|todo|topic|type|usage|warning|within)\\b" }, string: { patterns: [{ begin: "'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.lua" } }, end: "'[ \\t]*|(?=\\n)", endCaptures: { 0: { name: "punctuation.definition.string.end.lua" } }, name: "string.quoted.single.lua", patterns: [{ include: "#escaped_char" }] }, { begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.lua" } }, end: '"[ \\t]*|(?=\\n)', endCaptures: { 0: { name: "punctuation.definition.string.end.lua" } }, name: "string.quoted.double.lua", patterns: [{ include: "#escaped_char" }] }, { begin: "`", beginCaptures: { 0: { name: "punctuation.definition.string.begin.lua" } }, end: "`[ \\t]*|(?=\\n)", endCaptures: { 0: { name: "punctuation.definition.string.end.lua" } }, name: "string.quoted.double.lua" }, { begin: "(?<=\\.cdef)\\s*(\\[(=*)\\[)", beginCaptures: { 0: { name: "string.quoted.other.multiline.lua" }, 1: { name: "punctuation.definition.string.begin.lua" } }, contentName: "meta.embedded.lua", end: "(\\]\\2\\])[ \\t]*", endCaptures: { 0: { name: "string.quoted.other.multiline.lua" }, 1: { name: "punctuation.definition.string.end.lua" } }, patterns: [{ include: "source.c" }] }, { begin: "(?<!--)\\[(=*)\\[", beginCaptures: { 0: { name: "punctuation.definition.string.begin.lua" } }, end: "\\]\\1\\][ \\t]*", endCaptures: { 0: { name: "punctuation.definition.string.end.lua" } }, name: "string.quoted.other.multiline.lua" }] } }, scopeName: "source.lua", embeddedLangs: ["c"] });
var g = [
  ...b,
  _e
];
const fe = Object.freeze({ displayName: "Ruby", name: "ruby", patterns: [{ captures: { 1: { name: "keyword.control.class.ruby" }, 2: { name: "entity.name.type.class.ruby" }, 3: { name: "keyword.operator.other.ruby" }, 4: { name: "entity.other.inherited-class.ruby" }, 5: { name: "keyword.operator.other.ruby" }, 6: { name: "variable.other.object.ruby" } }, match: "^\\s*(class)\\s+(?:([.a-zA-Z0-9_:]+)(?:\\s*(<)\\s*([.a-zA-Z0-9_:]+))?|(<<)\\s*([.a-zA-Z0-9_:]+))", name: "meta.class.ruby" }, { captures: { 1: { name: "keyword.control.module.ruby" }, 2: { name: "entity.name.type.module.ruby" }, 3: { name: "entity.other.inherited-class.module.first.ruby" }, 4: { name: "punctuation.separator.inheritance.ruby" }, 5: { name: "entity.other.inherited-class.module.second.ruby" }, 6: { name: "punctuation.separator.inheritance.ruby" }, 7: { name: "entity.other.inherited-class.module.third.ruby" }, 8: { name: "punctuation.separator.inheritance.ruby" } }, match: "^\\s*(module)\\s+(([A-Z]\\w*(::))?([A-Z]\\w*(::))?([A-Z]\\w*(::))*[A-Z]\\w*)", name: "meta.module.ruby" }, { comment: "else if is a common mistake carried over from other languages. it works if you put in a second end, but it’s never what you want.", match: "(?<!\\.)\\belse(\\s)+if\\b", name: "invalid.deprecated.ruby" }, { captures: { 1: { name: "punctuation.definition.constant.ruby" } }, comment: "symbols as hash key (1.9 syntax)", match: "(?>[a-zA-Z_]\\w*(?>[?!])?)(:)(?!:)", name: "constant.other.symbol.hashkey.ruby" }, { captures: { 1: { name: "punctuation.definition.constant.ruby" } }, comment: "symbols as hash key (1.8 syntax)", match: "(?<!:)(:)(?>[a-zA-Z_]\\w*(?>[?!])?)(?=\\s*=>)", name: "constant.other.symbol.hashkey.ruby" }, { comment: "everything being a reserved word, not a value and needing a 'end' is a..", match: "(?<!\\.)\\b(BEGIN|begin|case|class|else|elsif|END|end|ensure|for|if|in|module|rescue|then|unless|until|when|while)\\b(?![?!])", name: "keyword.control.ruby" }, { comment: "contextual smart pair support for block parameters", match: "(?<!\\.)\\bdo\\b", name: "keyword.control.start-block.ruby" }, { comment: "contextual smart pair support", match: "(?<=\\{)(\\s+)", name: "meta.syntax.ruby.start-block" }, { match: "(?<!\\.)\\b(alias|alias_method|block_given[?]|break|defined[?]|iterator[?]|next|redo|retry|return|super|undef|yield)(\\b|(?<=[?]))(?![?!])", name: "keyword.control.pseudo-method.ruby" }, { match: "\\b(nil|true|false)\\b(?![?!])", name: "constant.language.ruby" }, { match: "\\b(__(dir|FILE|LINE)__)\\b(?![?!])", name: "variable.language.ruby" }, { begin: "^__END__\\n", captures: { 0: { name: "string.unquoted.program-block.ruby" } }, comment: "__END__ marker", contentName: "text.plain", end: "(?=not)impossible", patterns: [{ begin: "(?=<?xml|<(?i:html\\b)|!DOCTYPE (?i:html\\b))", end: "(?=not)impossible", name: "text.html.embedded.ruby", patterns: [{ include: "text.html.basic" }] }] }, { match: "\\b(self)\\b(?![?!])", name: "variable.language.self.ruby" }, { comment: " everything being a method but having a special function is a..", match: "\\b(initialize|new|loop|include|extend|prepend|fail|raise|attr_reader|attr_writer|attr_accessor|attr|catch|throw|private|private_class_method|module_function|public|public_class_method|protected|refine|using)\\b(?![?!])", name: "keyword.other.special-method.ruby" }, { begin: "\\b(?<!\\.|::)(require|require_relative)\\b", captures: { 1: { name: "keyword.other.special-method.ruby" } }, end: "$|(?=#|\\})", name: "meta.require.ruby", patterns: [{ include: "$self" }] }, { captures: { 1: { name: "punctuation.definition.variable.ruby" } }, match: "(@)[a-zA-Z_]\\w*", name: "variable.other.readwrite.instance.ruby" }, { captures: { 1: { name: "punctuation.definition.variable.ruby" } }, match: "(@@)[a-zA-Z_]\\w*", name: "variable.other.readwrite.class.ruby" }, { captures: { 1: { name: "punctuation.definition.variable.ruby" } }, match: "(\\$)[a-zA-Z_]\\w*", name: "variable.other.readwrite.global.ruby" }, { captures: { 1: { name: "punctuation.definition.variable.ruby" } }, match: "(\\$)(!|@|&|`|'|\\+|\\d+|~|=|/|\\\\|,|;|\\.|<|>|_|\\*|\\$|\\?|:|\"|-[0adFiIlpvw])", name: "variable.other.readwrite.global.pre-defined.ruby" }, { begin: "\\b(ENV)\\[", beginCaptures: { 1: { name: "variable.other.constant.ruby" } }, end: "\\]", name: "meta.environment-variable.ruby", patterns: [{ include: "$self" }] }, { match: "\\b[A-Z]\\w*(?=((\\.|::)[A-Za-z]|\\[))", name: "support.class.ruby" }, { match: "\\b(abort|at_exit|autoload[?]?|binding|callcc|caller|caller_locations|chomp|chop|eval|exec|exit|exit!|fork|format|gets|global_variables|gsub|lambda|load|local_variables|open|p|print|printf|proc|putc|puts|rand|readline|readlines|select|set_trace_func|sleep|spawn|sprintf|srand|sub|syscall|system|test|trace_var|trap|untrace_var|warn)(\\b|(?<=[?!]))(?![?!])", name: "support.function.kernel.ruby" }, { match: "\\b[A-Z]\\w*\\b", name: "variable.other.constant.ruby" }, { begin: `(?x)
(?=def\\b)
(?<=^|\\s)(def)\\s+
( (?>[a-zA-Z_]\\w*(?>\\.|::))?
(?>[a-zA-Z_]\\w*(?>[?!]|=(?!>))?
|===?|!=|!~|>[>=]?|<=>|<[<=]?|[%&\`/\\|^]|\\*\\*?|=?~|[-+]@?|\\[\\]=?) )
\\s*(\\()
`, beginCaptures: { 1: { name: "keyword.control.def.ruby" }, 2: { name: "entity.name.function.ruby" }, 3: { name: "punctuation.definition.parameters.ruby" } }, comment: "the method pattern comes from the symbol pattern, see there for a explaination", end: "\\)", endCaptures: { 0: { name: "punctuation.definition.parameters.ruby" } }, name: "meta.function.method.with-arguments.ruby", patterns: [{ begin: "(?=[&*_a-zA-Z])", end: "(?=[,)])", patterns: [{ captures: { 1: { name: "storage.type.variable.ruby" }, 2: { name: "constant.other.symbol.hashkey.parameter.function.ruby" }, 3: { name: "punctuation.definition.constant.ruby" }, 4: { name: "variable.parameter.function.ruby" } }, match: "\\G([&*]?)(?:([_a-zA-Z]\\w*(:))|([_a-zA-Z]\\w*))" }, { include: "#parens" }, { include: "#braces" }, { include: "$self" }] }], repository: { braces: { begin: "\\{", beginCaptures: { 0: { name: "punctuation.section.function.begin.ruby" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.section.function.end.ruby" } }, patterns: [{ include: "#parens" }, { include: "#braces" }, { include: "$self" }] }, parens: { begin: "\\(", beginCaptures: { 0: { name: "punctuation.section.function.begin.ruby" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.function.end.ruby" } }, patterns: [{ include: "#parens" }, { include: "#braces" }, { include: "$self" }] } } }, { begin: `(?x)
(?=def\\b)
(?<=^|\\s)(def)\\s+
( (?>[a-zA-Z_]\\w*(?>\\.|::))?
(?>[a-zA-Z_]\\w*(?>[?!]|=(?!>))?
|===?|!=|!~|>[>=]?|<=>|<[<=]?|[%&\`/\\|^]|\\*\\*?|=?~|[-+]@?|\\[\\]=?) )
[ \\t]
(?=[ \\t]*[^\\s#;])
`, beginCaptures: { 1: { name: "keyword.control.def.ruby" }, 2: { name: "entity.name.function.ruby" } }, comment: "same as the previous rule, but without parentheses around the arguments", end: "$", name: "meta.function.method.with-arguments.ruby", patterns: [{ begin: "(?![\\s,])", end: "(?=,|$)", patterns: [{ captures: { 1: { name: "storage.type.variable.ruby" }, 2: { name: "constant.other.symbol.hashkey.parameter.function.ruby" }, 3: { name: "punctuation.definition.constant.ruby" }, 4: { name: "variable.parameter.function.ruby" } }, match: "\\G([&*]?)(?:([_a-zA-Z]\\w*(:))|([_a-zA-Z]\\w*))", name: "variable.parameter.function.ruby" }, { include: "$self" }] }] }, { captures: { 1: { name: "keyword.control.def.ruby" }, 3: { name: "entity.name.function.ruby" } }, comment: " the optional name is just to catch the def also without a method-name", match: `(?x)
(?=def\\b)
(?<=^|\\s)(def)\\b
( \\s+
( (?>[a-zA-Z_]\\w*(?>\\.|::))?
(?>[a-zA-Z_]\\w*(?>[?!]|=(?!>))?
|===?|!=|!~|>[>=]?|<=>|<[<=]?|[%&\`/\\|^]|\\*\\*?|=?~|[-+]@?|\\[\\]=?) ) )?
`, name: "meta.function.method.without-arguments.ruby" }, { match: "\\b\\d(?>_?\\d)*(?=\\.\\d|[eE])(\\.\\d(?>_?\\d)*)?([eE][-+]?\\d(?>_?\\d)*)?r?i?\\b", name: "constant.numeric.float.ruby" }, { match: "\\b(0|(0[dD]\\d|[1-9])(?>_?\\d)*)r?i?\\b", name: "constant.numeric.integer.ruby" }, { match: "\\b0[xX]\\h(?>_?\\h)*r?i?\\b", name: "constant.numeric.hex.ruby" }, { match: "\\b0[bB][01](?>_?[01])*r?i?\\b", name: "constant.numeric.binary.ruby" }, { match: "\\b0([oO]?[0-7](?>_?[0-7])*)?r?i?\\b", name: "constant.numeric.octal.ruby" }, { begin: ":'", captures: { 0: { name: "punctuation.definition.constant.ruby" } }, end: "'", name: "constant.other.symbol.single-quoted.ruby", patterns: [{ match: "\\\\['\\\\]", name: "constant.character.escape.ruby" }] }, { begin: ':"', captures: { 0: { name: "punctuation.definition.constant.ruby" } }, end: '"', name: "constant.other.symbol.double-quoted.ruby", patterns: [{ include: "#interpolated_ruby" }, { include: "#escaped_char" }] }, { comment: "Needs higher precedence than regular expressions.", match: "(?<!\\()/=", name: "keyword.operator.assignment.augmented.ruby" }, { begin: "'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.ruby" } }, comment: "single quoted string (does not allow interpolation)", end: "'", endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } }, name: "string.quoted.single.ruby", patterns: [{ match: "\\\\'|\\\\\\\\", name: "constant.character.escape.ruby" }] }, { begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.ruby" } }, comment: "double quoted string (allows for interpolation)", end: '"', endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } }, name: "string.quoted.double.ruby", patterns: [{ include: "#interpolated_ruby" }, { include: "#escaped_char" }] }, { begin: "`", beginCaptures: { 0: { name: "punctuation.definition.string.begin.ruby" } }, comment: "execute string (allows for interpolation)", end: "`", endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } }, name: "string.interpolated.ruby", patterns: [{ include: "#interpolated_ruby" }, { include: "#escaped_char" }] }, { include: "#percent_literals" }, { begin: `(?x)
(?:
^
| (?<=
[=>~(?:\\[,|&;]
| [\\s;]if\\s
| [\\s;]elsif\\s
| [\\s;]while\\s
| [\\s;]unless\\s
| [\\s;]when\\s
| [\\s;]assert_match\\s
| [\\s;]or\\s
| [\\s;]and\\s
| [\\s;]not\\s
| [\\s.]index\\s
| [\\s.]scan\\s
| [\\s.]sub\\s
| [\\s.]sub!\\s
| [\\s.]gsub\\s
| [\\s.]gsub!\\s
| [\\s.]match\\s
)
| (?<=
^when\\s
| ^if\\s
| ^elsif\\s
| ^while\\s
| ^unless\\s
)
)
\\s*((/))(?![*+{}?])
`, captures: { 1: { name: "string.regexp.classic.ruby" }, 2: { name: "punctuation.definition.string.ruby" } }, comment: `regular expressions (normal)
			we only start a regexp if the character before it (excluding whitespace)
			is what we think is before a regexp
			`, contentName: "string.regexp.classic.ruby", end: "((/[eimnosux]*))", patterns: [{ include: "#regex_sub" }] }, { captures: { 1: { name: "punctuation.definition.constant.ruby" } }, comment: "symbols", match: "(?<!:)(:)(?>[a-zA-Z_]\\w*(?>[?!]|=(?![>=]))?|===?|>[>=]?|<=>|<[<=]?|[%&`/\\|]|\\*\\*?|=?~|[-+]@?|\\[\\]=?|(@@?|\\$)[a-zA-Z_]\\w*)", name: "constant.other.symbol.ruby" }, { begin: "^=begin", captures: { 0: { name: "punctuation.definition.comment.ruby" } }, comment: "multiline comments", end: "^=end", name: "comment.block.documentation.ruby" }, { begin: "(^[ \\t]+)?(?=#)", beginCaptures: { 1: { name: "punctuation.whitespace.comment.leading.ruby" } }, end: "(?!\\G)", patterns: [{ begin: "#", beginCaptures: { 0: { name: "punctuation.definition.comment.ruby" } }, end: "\\n", name: "comment.line.number-sign.ruby" }] }, { comment: `
			matches questionmark-letters.

			examples (1st alternation = hex):
			?\\x1     ?\\x61

			examples (2nd alternation = octal):
			?\\0      ?\\07     ?\\017

			examples (3rd alternation = escaped):
			?\\n      ?\\b

			examples (4th alternation = meta-ctrl):
			?\\C-a    ?\\M-a    ?\\C-\\M-\\C-\\M-a

			examples (4th alternation = normal):
			?a       ?A       ?0 
			?*       ?"       ?( 
			?.       ?#
			
			
			the negative lookbehind prevents against matching
			p(42.tainted?)
			`, match: "(?<!\\w)\\?(\\\\(x\\h{1,2}(?!\\h)\\b|0[0-7]{0,2}(?![0-7])\\b|[^x0MC])|(\\\\[MC]-)+\\w|[^\\s\\\\])", name: "constant.numeric.ruby" }, { begin: '(?=(?><<[-~]("?)((?:[_\\w]+_|)HTML)\\b\\1))', comment: "Heredoc with embedded html", end: "(?!\\G)", name: "meta.embedded.block.html", patterns: [{ begin: '(?><<[-~]("?)((?:[_\\w]+_|)HTML)\\b\\1)', beginCaptures: { 0: { name: "punctuation.definition.string.begin.ruby" } }, contentName: "text.html", end: "\\s*\\2$\\n?", endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } }, name: "string.unquoted.heredoc.ruby", patterns: [{ include: "#heredoc" }, { include: "#interpolated_ruby" }, { include: "text.html.basic" }, { include: "#escaped_char" }] }] }, { begin: '(?=(?><<[-~]("?)((?:[_\\w]+_|)XML)\\b\\1))', comment: "Heredoc with embedded xml", end: "(?!\\G)", name: "meta.embedded.block.xml", patterns: [{ begin: '(?><<[-~]("?)((?:[_\\w]+_|)XML)\\b\\1)', beginCaptures: { 0: { name: "punctuation.definition.string.begin.ruby" } }, contentName: "text.xml", end: "\\s*\\2$\\n?", endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } }, name: "string.unquoted.heredoc.ruby", patterns: [{ include: "#heredoc" }, { include: "#interpolated_ruby" }, { include: "text.xml" }, { include: "#escaped_char" }] }] }, { begin: '(?=(?><<[-~]("?)((?:[_\\w]+_|)SQL)\\b\\1))', comment: "Heredoc with embedded sql", end: "(?!\\G)", name: "meta.embedded.block.sql", patterns: [{ begin: '(?><<[-~]("?)((?:[_\\w]+_|)SQL)\\b\\1)', beginCaptures: { 0: { name: "punctuation.definition.string.begin.ruby" } }, contentName: "source.sql", end: "\\s*\\2$\\n?", endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } }, name: "string.unquoted.heredoc.ruby", patterns: [{ include: "#heredoc" }, { include: "#interpolated_ruby" }, { include: "source.sql" }, { include: "#escaped_char" }] }] }, { begin: '(?=(?><<[-~]("?)((?:[_\\w]+_|)CSS)\\b\\1))', comment: "Heredoc with embedded css", end: "(?!\\G)", name: "meta.embedded.block.css", patterns: [{ begin: '(?><<[-~]("?)((?:[_\\w]+_|)CSS)\\b\\1)', beginCaptures: { 0: { name: "punctuation.definition.string.begin.ruby" } }, contentName: "source.css", end: "\\s*\\2$\\n?", endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } }, name: "string.unquoted.heredoc.ruby", patterns: [{ include: "#heredoc" }, { include: "#interpolated_ruby" }, { include: "source.css" }, { include: "#escaped_char" }] }] }, { begin: '(?=(?><<[-~]("?)((?:[_\\w]+_|)CPP)\\b\\1))', comment: "Heredoc with embedded c++", end: "(?!\\G)", name: "meta.embedded.block.c++", patterns: [{ begin: '(?><<[-~]("?)((?:[_\\w]+_|)CPP)\\b\\1)', beginCaptures: { 0: { name: "punctuation.definition.string.begin.ruby" } }, contentName: "source.c++", end: "\\s*\\2$\\n?", endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } }, name: "string.unquoted.heredoc.ruby", patterns: [{ include: "#heredoc" }, { include: "#interpolated_ruby" }, { include: "source.c++" }, { include: "#escaped_char" }] }] }, { begin: '(?=(?><<[-~]("?)((?:[_\\w]+_|)C)\\b\\1))', comment: "Heredoc with embedded c", end: "(?!\\G)", name: "meta.embedded.block.c", patterns: [{ begin: '(?><<[-~]("?)((?:[_\\w]+_|)C)\\b\\1)', beginCaptures: { 0: { name: "punctuation.definition.string.begin.ruby" } }, contentName: "source.c", end: "\\s*\\2$\\n?", endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } }, name: "string.unquoted.heredoc.ruby", patterns: [{ include: "#heredoc" }, { include: "#interpolated_ruby" }, { include: "source.c" }, { include: "#escaped_char" }] }] }, { begin: '(?=(?><<[-~]("?)((?:[_\\w]+_|)(?:JS|JAVASCRIPT))\\b\\1))', comment: "Heredoc with embedded javascript", end: "(?!\\G)", name: "meta.embedded.block.js", patterns: [{ begin: '(?><<[-~]("?)((?:[_\\w]+_|)(?:JS|JAVASCRIPT))\\b\\1)', beginCaptures: { 0: { name: "punctuation.definition.string.begin.ruby" } }, contentName: "source.js", end: "\\s*\\2$\\n?", endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } }, name: "string.unquoted.heredoc.ruby", patterns: [{ include: "#heredoc" }, { include: "#interpolated_ruby" }, { include: "source.js" }, { include: "#escaped_char" }] }] }, { begin: '(?=(?><<[-~]("?)((?:[_\\w]+_|)JQUERY)\\b\\1))', comment: "Heredoc with embedded jQuery javascript", end: "(?!\\G)", name: "meta.embedded.block.js.jquery", patterns: [{ begin: '(?><<[-~]("?)((?:[_\\w]+_|)JQUERY)\\b\\1)', beginCaptures: { 0: { name: "punctuation.definition.string.begin.ruby" } }, contentName: "source.js.jquery", end: "\\s*\\2$\\n?", endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } }, name: "string.unquoted.heredoc.ruby", patterns: [{ include: "#heredoc" }, { include: "#interpolated_ruby" }, { include: "source.js.jquery" }, { include: "#escaped_char" }] }] }, { begin: '(?=(?><<[-~]("?)((?:[_\\w]+_|)(?:SH|SHELL))\\b\\1))', comment: "Heredoc with embedded shell", end: "(?!\\G)", name: "meta.embedded.block.shell", patterns: [{ begin: '(?><<[-~]("?)((?:[_\\w]+_|)(?:SH|SHELL))\\b\\1)', beginCaptures: { 0: { name: "punctuation.definition.string.begin.ruby" } }, contentName: "source.shell", end: "\\s*\\2$\\n?", endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } }, name: "string.unquoted.heredoc.ruby", patterns: [{ include: "#heredoc" }, { include: "#interpolated_ruby" }, { include: "source.shell" }, { include: "#escaped_char" }] }] }, { begin: '(?=(?><<[-~]("?)((?:[_\\w]+_|)LUA)\\b\\1))', comment: "Heredoc with embedded lua", end: "(?!\\G)", name: "meta.embedded.block.lua", patterns: [{ begin: '(?><<[-~]("?)((?:[_\\w]+_|)LUA)\\b\\1)', beginCaptures: { 0: { name: "punctuation.definition.string.begin.ruby" } }, contentName: "source.lua", end: "\\s*\\2$\\n?", endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } }, name: "string.unquoted.heredoc.ruby", patterns: [{ include: "#heredoc" }, { include: "#interpolated_ruby" }, { include: "source.lua" }, { include: "#escaped_char" }] }] }, { begin: '(?=(?><<[-~]("?)((?:[_\\w]+_|)RUBY)\\b\\1))', comment: "Heredoc with embedded ruby", end: "(?!\\G)", name: "meta.embedded.block.ruby", patterns: [{ begin: '(?><<[-~]("?)((?:[_\\w]+_|)RUBY)\\b\\1)', beginCaptures: { 0: { name: "punctuation.definition.string.begin.ruby" } }, contentName: "source.ruby", end: "\\s*\\2$\\n?", endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } }, name: "string.unquoted.heredoc.ruby", patterns: [{ include: "#heredoc" }, { include: "#interpolated_ruby" }, { include: "source.ruby" }, { include: "#escaped_char" }] }] }, { begin: "(?>=\\s*<<(\\w+))", beginCaptures: { 0: { name: "punctuation.definition.string.begin.ruby" } }, end: "^\\1$", endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } }, name: "string.unquoted.heredoc.ruby", patterns: [{ include: "#heredoc" }, { include: "#interpolated_ruby" }, { include: "#escaped_char" }] }, { begin: "(?><<[-~](\\w+))", beginCaptures: { 0: { name: "punctuation.definition.string.begin.ruby" } }, comment: "heredoc with indented terminator", end: "\\s*\\1$", endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } }, name: "string.unquoted.heredoc.ruby", patterns: [{ include: "#heredoc" }, { include: "#interpolated_ruby" }, { include: "#escaped_char" }] }, { begin: "(?<=\\{|do|\\{\\s|do\\s)(\\|)", captures: { 1: { name: "punctuation.separator.arguments.ruby" } }, end: "(?<!\\|)(\\|)(?!\\|)", patterns: [{ include: "$self" }, { match: "[_a-zA-Z][_a-zA-Z0-9]*", name: "variable.other.block.ruby" }, { match: ",", name: "punctuation.separator.variable.ruby" }] }, { match: "=>", name: "punctuation.separator.key-value" }, { match: "->", name: "support.function.kernel.lambda.ruby" }, { match: "<<=|%=|&{1,2}=|\\*=|\\*\\*=|\\+=|-=|\\^=|\\|{1,2}=|<<", name: "keyword.operator.assignment.augmented.ruby" }, { match: "<=>|<(?!<|=)|>(?!<|=|>)|<=|>=|===|==|=~|!=|!~|(?<=[ \\t])\\?", name: "keyword.operator.comparison.ruby" }, { match: "(?<!\\.)\\b(and|not|or)\\b(?![?!])", name: "keyword.operator.logical.ruby" }, { comment: "Make sure this goes after assignment and comparison", match: "(?<=^|[ \\t])!|&&|\\|\\||\\^", name: "keyword.operator.logical.ruby" }, { captures: { 1: { name: "punctuation.separator.method.ruby" } }, comment: "Safe navigation operator - Added in 2.3", match: "(&\\.)\\s*(?![A-Z])" }, { match: "(%|&|\\*\\*|\\*|\\+|-|/)", name: "keyword.operator.arithmetic.ruby" }, { match: "=", name: "keyword.operator.assignment.ruby" }, { match: "\\||~|>>", name: "keyword.operator.other.ruby" }, { match: ";", name: "punctuation.separator.statement.ruby" }, { match: ",", name: "punctuation.separator.object.ruby" }, { captures: { 1: { name: "punctuation.separator.namespace.ruby" } }, comment: "Mark as namespace separator if double colons followed by capital letter", match: "(::)\\s*(?=[A-Z])" }, { captures: { 1: { name: "punctuation.separator.method.ruby" } }, comment: "Mark as method separator if double colons not followed by capital letter", match: "(\\.|::)\\s*(?![A-Z])" }, { comment: "Must come after method and constant separators to prefer double colons", match: ":", name: "punctuation.separator.other.ruby" }, { match: "\\{", name: "punctuation.section.scope.begin.ruby" }, { match: "\\}", name: "punctuation.section.scope.end.ruby" }, { match: "\\[", name: "punctuation.section.array.begin.ruby" }, { match: "\\]", name: "punctuation.section.array.end.ruby" }, { match: "\\(|\\)", name: "punctuation.section.function.ruby" }], repository: { escaped_char: { match: "\\\\(?:[0-7]{1,3}|x[\\da-fA-F]{1,2}|.)", name: "constant.character.escape.ruby" }, heredoc: { begin: "^<<[-~]?\\w+", end: "$", patterns: [{ include: "$self" }] }, interpolated_ruby: { patterns: [{ begin: "#\\{", beginCaptures: { 0: { name: "punctuation.section.embedded.begin.ruby" } }, contentName: "source.ruby", end: "(\\})", endCaptures: { 0: { name: "punctuation.section.embedded.end.ruby" }, 1: { name: "source.ruby" } }, name: "meta.embedded.line.ruby", patterns: [{ include: "#nest_curly_and_self" }, { include: "$self" }], repository: { nest_curly_and_self: { patterns: [{ begin: "\\{", captures: { 0: { name: "punctuation.section.scope.ruby" } }, end: "\\}", patterns: [{ include: "#nest_curly_and_self" }] }, { include: "$self" }] } } }, { captures: { 1: { name: "punctuation.definition.variable.ruby" } }, match: "(#@)[a-zA-Z_]\\w*", name: "variable.other.readwrite.instance.ruby" }, { captures: { 1: { name: "punctuation.definition.variable.ruby" } }, match: "(#@@)[a-zA-Z_]\\w*", name: "variable.other.readwrite.class.ruby" }, { captures: { 1: { name: "punctuation.definition.variable.ruby" } }, match: "(#\\$)[a-zA-Z_]\\w*", name: "variable.other.readwrite.global.ruby" }] }, percent_literals: { patterns: [{ begin: "%i(?:([(\\[{<])|([^\\w\\s]|_))", beginCaptures: { 0: { name: "punctuation.section.array.begin.ruby" } }, end: "[)\\]}>]\\2|\\1\\2", endCaptures: { 0: { name: "punctuation.section.array.end.ruby" } }, name: "meta.array.symbol.ruby", patterns: [{ begin: "\\G(?<=\\()(?!\\))", end: "(?=\\))", patterns: [{ include: "#parens" }, { include: "#symbol" }] }, { begin: "\\G(?<=\\[)(?!\\])", end: "(?=\\])", patterns: [{ include: "#brackets" }, { include: "#symbol" }] }, { begin: "\\G(?<=\\{)(?!\\})", end: "(?=\\})", patterns: [{ include: "#braces" }, { include: "#symbol" }] }, { begin: "\\G(?<=<)(?!>)", end: "(?=>)", patterns: [{ include: "#angles" }, { include: "#symbol" }] }, { include: "#symbol" }], repository: { angles: { patterns: [{ captures: { 0: { name: "constant.character.escape.ruby" } }, match: "\\\\<|\\\\>", name: "constant.other.symbol.ruby" }, { begin: "<", captures: { 0: { name: "constant.other.symbol.ruby" } }, end: ">", patterns: [{ include: "#angles" }, { include: "#symbol" }] }] }, braces: { patterns: [{ captures: { 0: { name: "constant.character.escape.ruby" } }, match: "\\\\\\{|\\\\\\}", name: "constant.other.symbol.ruby" }, { begin: "\\{", captures: { 0: { name: "constant.other.symbol.ruby" } }, end: "\\}", patterns: [{ include: "#braces" }, { include: "#symbol" }] }] }, brackets: { patterns: [{ captures: { 0: { name: "constant.character.escape.ruby" } }, match: "\\\\\\[|\\\\\\]", name: "constant.other.symbol.ruby" }, { begin: "\\[", captures: { 0: { name: "constant.other.symbol.ruby" } }, end: "\\]", patterns: [{ include: "#brackets" }, { include: "#symbol" }] }] }, parens: { patterns: [{ captures: { 0: { name: "constant.character.escape.ruby" } }, match: "\\\\\\(|\\\\\\)", name: "constant.other.symbol.ruby" }, { begin: "\\(", captures: { 0: { name: "constant.other.symbol.ruby" } }, end: "\\)", patterns: [{ include: "#parens" }, { include: "#symbol" }] }] }, symbol: { patterns: [{ captures: { 0: { name: "constant.character.escape.ruby" } }, match: "\\\\\\\\|\\\\[ ]", name: "constant.other.symbol.ruby" }, { match: "\\S\\w*", name: "constant.other.symbol.ruby" }] } } }, { begin: "%I(?:([(\\[{<])|([^\\w\\s]|_))", beginCaptures: { 0: { name: "punctuation.section.array.begin.ruby" } }, end: "[)\\]}>]\\2|\\1\\2", endCaptures: { 0: { name: "punctuation.section.array.end.ruby" } }, name: "meta.array.symbol.interpolated.ruby", patterns: [{ begin: "\\G(?<=\\()(?!\\))", end: "(?=\\))", patterns: [{ include: "#parens" }, { include: "#symbol" }] }, { begin: "\\G(?<=\\[)(?!\\])", end: "(?=\\])", patterns: [{ include: "#brackets" }, { include: "#symbol" }] }, { begin: "\\G(?<=\\{)(?!\\})", end: "(?=\\})", patterns: [{ include: "#braces" }, { include: "#symbol" }] }, { begin: "\\G(?<=<)(?!>)", end: "(?=>)", patterns: [{ include: "#angles" }, { include: "#symbol" }] }, { include: "#symbol" }], repository: { angles: { patterns: [{ begin: "<", captures: { 0: { name: "constant.other.symbol.ruby" } }, end: ">", patterns: [{ include: "#angles" }, { include: "#symbol" }] }] }, braces: { patterns: [{ begin: "\\{", captures: { 0: { name: "constant.other.symbol.ruby" } }, end: "\\}", patterns: [{ include: "#braces" }, { include: "#symbol" }] }] }, brackets: { patterns: [{ begin: "\\[", captures: { 0: { name: "constant.other.symbol.ruby" } }, end: "\\]", patterns: [{ include: "#brackets" }, { include: "#symbol" }] }] }, parens: { patterns: [{ begin: "\\(", captures: { 0: { name: "constant.other.symbol.ruby" } }, end: "\\)", patterns: [{ include: "#parens" }, { include: "#symbol" }] }] }, symbol: { patterns: [{ begin: "(?=\\\\|#\\{)", end: "(?!\\G)", name: "constant.other.symbol.ruby", patterns: [{ include: "#escaped_char" }, { include: "#interpolated_ruby" }] }, { match: "\\S\\w*", name: "constant.other.symbol.ruby" }] } } }, { begin: "%q(?:([(\\[{<])|([^\\w\\s]|_))", beginCaptures: { 0: { name: "punctuation.definition.string.begin.ruby" } }, end: "[)\\]}>]\\2|\\1\\2", endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } }, name: "string.quoted.other.ruby", patterns: [{ begin: "\\G(?<=\\()(?!\\))", end: "(?=\\))", patterns: [{ include: "#parens" }] }, { begin: "\\G(?<=\\[)(?!\\])", end: "(?=\\])", patterns: [{ include: "#brackets" }] }, { begin: "\\G(?<=\\{)(?!\\})", end: "(?=\\})", patterns: [{ include: "#braces" }] }, { begin: "\\G(?<=<)(?!>)", end: "(?=>)", patterns: [{ include: "#angles" }] }], repository: { angles: { patterns: [{ match: "\\\\<|\\\\>|\\\\\\\\", name: "constant.character.escape.ruby" }, { begin: "<", end: ">", patterns: [{ include: "#angles" }] }] }, braces: { patterns: [{ match: "\\\\\\{|\\\\\\}|\\\\\\\\", name: "constant.character.escape.ruby" }, { begin: "\\{", end: "\\}", patterns: [{ include: "#braces" }] }] }, brackets: { patterns: [{ match: "\\\\\\[|\\\\\\]|\\\\\\\\", name: "constant.character.escape.ruby" }, { begin: "\\[", end: "\\]", patterns: [{ include: "#brackets" }] }] }, parens: { patterns: [{ match: "\\\\\\(|\\\\\\)|\\\\\\\\", name: "constant.character.escape.ruby" }, { begin: "\\(", end: "\\)", patterns: [{ include: "#parens" }] }] } } }, { begin: "%Q?(?:([(\\[{<])|([^\\w\\s=]|_))", beginCaptures: { 0: { name: "punctuation.definition.string.begin.ruby" } }, end: "[)\\]}>]\\2|\\1\\2", endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } }, name: "string.quoted.other.interpolated.ruby", patterns: [{ begin: "\\G(?<=\\()(?!\\))", end: "(?=\\))", patterns: [{ include: "#parens" }] }, { begin: "\\G(?<=\\[)(?!\\])", end: "(?=\\])", patterns: [{ include: "#brackets" }] }, { begin: "\\G(?<=\\{)(?!\\})", end: "(?=\\})", patterns: [{ include: "#braces" }] }, { begin: "\\G(?<=<)(?!>)", end: "(?=>)", patterns: [{ include: "#angles" }] }, { include: "#escaped_char" }, { include: "#interpolated_ruby" }], repository: { angles: { patterns: [{ include: "#escaped_char" }, { include: "#interpolated_ruby" }, { begin: "<", end: ">", patterns: [{ include: "#angles" }] }] }, braces: { patterns: [{ include: "#escaped_char" }, { include: "#interpolated_ruby" }, { begin: "\\{", end: "\\}", patterns: [{ include: "#braces" }] }] }, brackets: { patterns: [{ include: "#escaped_char" }, { include: "#interpolated_ruby" }, { begin: "\\[", end: "\\]", patterns: [{ include: "#brackets" }] }] }, parens: { patterns: [{ include: "#escaped_char" }, { include: "#interpolated_ruby" }, { begin: "\\(", end: "\\)", patterns: [{ include: "#parens" }] }] } } }, { begin: "%r(?:([(\\[{<])|([^\\w\\s]|_))", beginCaptures: { 0: { name: "punctuation.definition.string.begin.ruby" } }, end: "([)\\]}>]\\2|\\1\\2)[eimnosux]*", endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } }, name: "string.regexp.percent.ruby", patterns: [{ begin: "\\G(?<=\\()(?!\\))", end: "(?=\\))", patterns: [{ include: "#parens" }] }, { begin: "\\G(?<=\\[)(?!\\])", end: "(?=\\])", patterns: [{ include: "#brackets" }] }, { begin: "\\G(?<=\\{)(?!\\})", end: "(?=\\})", patterns: [{ include: "#braces" }] }, { begin: "\\G(?<=<)(?!>)", end: "(?=>)", patterns: [{ include: "#angles" }] }, { include: "#regex_sub" }], repository: { angles: { patterns: [{ include: "#regex_sub" }, { begin: "<", end: ">", patterns: [{ include: "#angles" }] }] }, braces: { patterns: [{ include: "#regex_sub" }, { begin: "\\{", end: "\\}", patterns: [{ include: "#braces" }] }] }, brackets: { patterns: [{ include: "#regex_sub" }, { begin: "\\[", end: "\\]", patterns: [{ include: "#brackets" }] }] }, parens: { patterns: [{ include: "#regex_sub" }, { begin: "\\(", end: "\\)", patterns: [{ include: "#parens" }] }] } } }, { begin: "%s(?:([(\\[{<])|([^\\w\\s]|_))", beginCaptures: { 0: { name: "punctuation.definition.constant.begin.ruby" } }, end: "[)\\]}>]\\2|\\1\\2", endCaptures: { 0: { name: "punctuation.definition.constant.end.ruby" } }, name: "constant.other.symbol.percent.ruby", patterns: [{ begin: "\\G(?<=\\()(?!\\))", end: "(?=\\))", patterns: [{ include: "#parens" }] }, { begin: "\\G(?<=\\[)(?!\\])", end: "(?=\\])", patterns: [{ include: "#brackets" }] }, { begin: "\\G(?<=\\{)(?!\\})", end: "(?=\\})", patterns: [{ include: "#braces" }] }, { begin: "\\G(?<=<)(?!>)", end: "(?=>)", patterns: [{ include: "#angles" }] }], repository: { angles: { patterns: [{ match: "\\\\<|\\\\>|\\\\\\\\", name: "constant.character.escape.ruby" }, { begin: "<", end: ">", patterns: [{ include: "#angles" }] }] }, braces: { patterns: [{ match: "\\\\\\{|\\\\\\}|\\\\\\\\", name: "constant.character.escape.ruby" }, { begin: "\\{", end: "\\}", patterns: [{ include: "#braces" }] }] }, brackets: { patterns: [{ match: "\\\\\\[|\\\\\\]|\\\\\\\\", name: "constant.character.escape.ruby" }, { begin: "\\[", end: "\\]", patterns: [{ include: "#brackets" }] }] }, parens: { patterns: [{ match: "\\\\\\(|\\\\\\)|\\\\\\\\", name: "constant.character.escape.ruby" }, { begin: "\\(", end: "\\)", patterns: [{ include: "#parens" }] }] } } }, { begin: "%w(?:([(\\[{<])|([^\\w\\s]|_))", beginCaptures: { 0: { name: "punctuation.section.array.begin.ruby" } }, end: "[)\\]}>]\\2|\\1\\2", endCaptures: { 0: { name: "punctuation.section.array.end.ruby" } }, name: "meta.array.string.ruby", patterns: [{ begin: "\\G(?<=\\()(?!\\))", end: "(?=\\))", patterns: [{ include: "#parens" }, { include: "#string" }] }, { begin: "\\G(?<=\\[)(?!\\])", end: "(?=\\])", patterns: [{ include: "#brackets" }, { include: "#string" }] }, { begin: "\\G(?<=\\{)(?!\\})", end: "(?=\\})", patterns: [{ include: "#braces" }, { include: "#string" }] }, { begin: "\\G(?<=<)(?!>)", end: "(?=>)", patterns: [{ include: "#angles" }, { include: "#string" }] }, { include: "#string" }], repository: { angles: { patterns: [{ captures: { 0: { name: "constant.character.escape.ruby" } }, match: "\\\\<|\\\\>", name: "string.other.ruby" }, { begin: "<", captures: { 0: { name: "string.other.ruby" } }, end: ">", patterns: [{ include: "#angles" }, { include: "#string" }] }] }, braces: { patterns: [{ captures: { 0: { name: "constant.character.escape.ruby" } }, match: "\\\\\\{|\\\\\\}", name: "string.other.ruby" }, { begin: "\\{", captures: { 0: { name: "string.other.ruby" } }, end: "\\}", patterns: [{ include: "#braces" }, { include: "#string" }] }] }, brackets: { patterns: [{ captures: { 0: { name: "constant.character.escape.ruby" } }, match: "\\\\\\[|\\\\\\]", name: "string.other.ruby" }, { begin: "\\[", captures: { 0: { name: "string.other.ruby" } }, end: "\\]", patterns: [{ include: "#brackets" }, { include: "#string" }] }] }, parens: { patterns: [{ captures: { 0: { name: "constant.character.escape.ruby" } }, match: "\\\\\\(|\\\\\\)", name: "string.other.ruby" }, { begin: "\\(", captures: { 0: { name: "string.other.ruby" } }, end: "\\)", patterns: [{ include: "#parens" }, { include: "#string" }] }] }, string: { patterns: [{ captures: { 0: { name: "constant.character.escape.ruby" } }, match: "\\\\\\\\|\\\\[ ]", name: "string.other.ruby" }, { match: "\\S\\w*", name: "string.other.ruby" }] } } }, { begin: "%W(?:([(\\[{<])|([^\\w\\s]|_))", beginCaptures: { 0: { name: "punctuation.section.array.begin.ruby" } }, end: "[)\\]}>]\\2|\\1\\2", endCaptures: { 0: { name: "punctuation.section.array.end.ruby" } }, name: "meta.array.string.interpolated.ruby", patterns: [{ begin: "\\G(?<=\\()(?!\\))", end: "(?=\\))", patterns: [{ include: "#parens" }, { include: "#string" }] }, { begin: "\\G(?<=\\[)(?!\\])", end: "(?=\\])", patterns: [{ include: "#brackets" }, { include: "#string" }] }, { begin: "\\G(?<=\\{)(?!\\})", end: "(?=\\})", patterns: [{ include: "#braces" }, { include: "#string" }] }, { begin: "\\G(?<=<)(?!>)", end: "(?=>)", patterns: [{ include: "#angles" }, { include: "#string" }] }, { include: "#string" }], repository: { angles: { patterns: [{ begin: "<", captures: { 0: { name: "string.other.ruby" } }, end: ">", patterns: [{ include: "#angles" }, { include: "#string" }] }] }, braces: { patterns: [{ begin: "\\{", captures: { 0: { name: "string.other.ruby" } }, end: "\\}", patterns: [{ include: "#braces" }, { include: "#string" }] }] }, brackets: { patterns: [{ begin: "\\[", captures: { 0: { name: "string.other.ruby" } }, end: "\\]", patterns: [{ include: "#brackets" }, { include: "#string" }] }] }, parens: { patterns: [{ begin: "\\(", captures: { 0: { name: "string.other.ruby" } }, end: "\\)", patterns: [{ include: "#parens" }, { include: "#string" }] }] }, string: { patterns: [{ begin: "(?=\\\\|#\\{)", end: "(?!\\G)", name: "string.other.ruby", patterns: [{ include: "#escaped_char" }, { include: "#interpolated_ruby" }] }, { match: "\\S\\w*", name: "string.other.ruby" }] } } }, { begin: "%x(?:([(\\[{<])|([^\\w\\s]|_))", beginCaptures: { 0: { name: "punctuation.definition.string.begin.ruby" } }, end: "[)\\]}>]\\2|\\1\\2", endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } }, name: "string.interpolated.percent.ruby", patterns: [{ begin: "\\G(?<=\\()(?!\\))", end: "(?=\\))", patterns: [{ include: "#parens" }] }, { begin: "\\G(?<=\\[)(?!\\])", end: "(?=\\])", patterns: [{ include: "#brackets" }] }, { begin: "\\G(?<=\\{)(?!\\})", end: "(?=\\})", patterns: [{ include: "#braces" }] }, { begin: "\\G(?<=<)(?!>)", end: "(?=>)", patterns: [{ include: "#angles" }] }, { include: "#escaped_char" }, { include: "#interpolated_ruby" }], repository: { angles: { patterns: [{ include: "#escaped_char" }, { include: "#interpolated_ruby" }, { begin: "<", end: ">", patterns: [{ include: "#angles" }] }] }, braces: { patterns: [{ include: "#escaped_char" }, { include: "#interpolated_ruby" }, { begin: "\\{", end: "\\}", patterns: [{ include: "#braces" }] }] }, brackets: { patterns: [{ include: "#escaped_char" }, { include: "#interpolated_ruby" }, { begin: "\\[", end: "\\]", patterns: [{ include: "#brackets" }] }] }, parens: { patterns: [{ include: "#escaped_char" }, { include: "#interpolated_ruby" }, { begin: "\\(", end: "\\)", patterns: [{ include: "#parens" }] }] } } }] }, regex_sub: { patterns: [{ include: "#interpolated_ruby" }, { include: "#escaped_char" }, { captures: { 1: { name: "punctuation.definition.quantifier.begin.ruby" }, 3: { name: "punctuation.definition.quantifier.end.ruby" } }, match: "(\\{)\\d+(,\\d+)?(\\})", name: "keyword.operator.quantifier.ruby" }, { begin: "\\[\\^?", beginCaptures: { 0: { name: "punctuation.definition.character-class.begin.ruby" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.character-class.end.ruby" } }, name: "constant.other.character-class.set.ruby", patterns: [{ include: "#escaped_char" }] }, { begin: "\\(\\?#", beginCaptures: { 0: { name: "punctuation.definition.comment.begin.ruby" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.comment.end.ruby" } }, name: "comment.line.number-sign.ruby", patterns: [{ include: "#escaped_char" }] }, { begin: "\\(", captures: { 0: { name: "punctuation.definition.group.ruby" } }, end: "\\)", name: "meta.group.regexp.ruby", patterns: [{ include: "#regex_sub" }] }, { begin: "(?<=^|\\s)(#)\\s(?=[[a-zA-Z0-9,. \\t?!-][^\\x{00}-\\x{7F}]]*$)", beginCaptures: { 1: { name: "punctuation.definition.comment.ruby" } }, comment: "We are restrictive in what we allow to go after the comment character to avoid false positives, since the availability of comments depend on regexp flags.", end: "$\\n?", name: "comment.line.number-sign.ruby" }] } }, scopeName: "source.ruby", embeddedLangs: ["html", "xml", "sql", "css", "c", "javascript", "shellscript", "lua"], aliases: ["rb"] });
var _ = [
  ...t,
  ...s,
  ...a,
  ...n,
  ...b,
  ...e,
  ...o,
  ...g,
  fe
];
const he = Object.freeze({ displayName: "ERB", fileTypes: ["erb", "rhtml", "html.erb"], injections: { "text.html.erb - (meta.embedded.block.erb | meta.embedded.line.erb | comment)": { patterns: [{ begin: "(^\\s*)(?=<%+#(?![^%]*%>))", beginCaptures: { 0: { name: "punctuation.whitespace.comment.leading.erb" } }, end: "(?!\\G)(\\s*$\\n)?", endCaptures: { 0: { name: "punctuation.whitespace.comment.trailing.erb" } }, patterns: [{ include: "#comment" }] }, { begin: "(^\\s*)(?=<%(?![^%]*%>))", beginCaptures: { 0: { name: "punctuation.whitespace.embedded.leading.erb" } }, end: "(?!\\G)(\\s*$\\n)?", endCaptures: { 0: { name: "punctuation.whitespace.embedded.trailing.erb" } }, patterns: [{ include: "#tags" }] }, { include: "#comment" }, { include: "#tags" }] } }, name: "erb", patterns: [{ include: "text.html.basic" }], repository: { comment: { patterns: [{ begin: "<%+#", beginCaptures: { 0: { name: "punctuation.definition.comment.begin.erb" } }, end: "%>", endCaptures: { 0: { name: "punctuation.definition.comment.end.erb" } }, name: "comment.block.erb" }] }, tags: { patterns: [{ begin: "<%+(?!>)[-=]?(?![^%]*%>)", beginCaptures: { 0: { name: "punctuation.section.embedded.begin.erb" } }, contentName: "source.ruby", end: "(-?%)>", endCaptures: { 0: { name: "punctuation.section.embedded.end.erb" }, 1: { name: "source.ruby" } }, name: "meta.embedded.block.erb", patterns: [{ captures: { 1: { name: "punctuation.definition.comment.erb" } }, match: "(#).*?(?=-?%>)", name: "comment.line.number-sign.erb" }, { include: "source.ruby" }] }, { begin: "<%+(?!>)[-=]?", beginCaptures: { 0: { name: "punctuation.section.embedded.begin.erb" } }, contentName: "source.ruby", end: "(-?%)>", endCaptures: { 0: { name: "punctuation.section.embedded.end.erb" }, 1: { name: "source.ruby" } }, name: "meta.embedded.line.erb", patterns: [{ captures: { 1: { name: "punctuation.definition.comment.erb" } }, match: "(#).*?(?=-?%>)", name: "comment.line.number-sign.erb" }, { include: "source.ruby" }] }] } }, scopeName: "text.html.erb", embeddedLangs: ["html", "ruby"] });
var ye = [
  ...t,
  ..._,
  he
];
const xe = Object.freeze({ displayName: "Fish", fileTypes: ["fish"], firstLineMatch: "^#!.*\\bfish\\b", foldingStartMarker: "^\\s*(function|while|if|switch|for|begin)\\s.*$", foldingStopMarker: "^\\s*end\\s*$", name: "fish", patterns: [{ begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.fish" } }, comment: "Double quoted string", end: '"', endCaptures: { 0: { name: "punctuation.definition.string.end.fish" } }, name: "string.quoted.double.fish", patterns: [{ include: "#variable" }, { comment: "https://fishshell.com/docs/current/#quotes", match: '\\\\(\\"|\\$|$|\\\\)', name: "constant.character.escape.fish" }] }, { begin: "'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.fish" } }, comment: "Single quoted string", end: "'", endCaptures: { 0: { name: "punctuation.definition.string.end.fish" } }, name: "string.quoted.single.fish", patterns: [{ comment: "https://fishshell.com/docs/current/#quotes", match: "\\\\('|`|\\\\)", name: "constant.character.escape.fish" }] }, { captures: { 1: { name: "punctuation.definition.comment.fish" } }, comment: "line comment", match: "(?<!\\$)(#)(?!\\{).*$\\n?", name: "comment.line.number-sign.fish" }, { captures: { 2: { name: "keyword.control.fish" }, 4: { name: "support.function.command.fish" } }, comment: "name of command, either a function or a binary", match: "(^\\s*|&&\\s*|\\|\\s*|\\(\\s*|[;]\\s*|\\b(if|while)\\b\\s+)(?!(?<!\\.)\\b(function|while|if|else|switch|case|for|in|begin|end|continue|break|return|source|exit|wait|and|or|not)\\b(?![?!]))([a-zA-Z_\\-0-9\\[\\].]+)" }, { comment: "keywords that affect control flow", match: "(?<!\\.)\\b(function|while|if|else|switch|case|for|in|begin|end|continue|break|return|source|exit|wait|and|or|not)\\b(?![?!])", name: "keyword.control.fish" }, { match: "(?<!\\.)\\bfunction\\b(?![?!])", name: "storage.type.fish" }, { match: "\\|", name: "keyword.operator.pipe.fish" }, { comment: "IO Redirection", match: `(?x:
<|# Standard Input
(>|\\^|>>|\\^\\^)(&[012\\-])?|
[012](<|>|>>)(&[012\\-])?
)`, name: "keyword.operator.redirect.fish" }, { match: "&", name: "keyword.operator.background.fish" }, { match: "\\*\\*|\\*|\\?", name: "keyword.operator.glob.fish" }, { captures: { 1: { name: "source.option.fish" } }, comment: "command short/long options", match: "\\s(-{1,2}[a-zA-Z_\\-0-9]+|-\\w)\\b" }, { include: "#variable" }, { include: "#escape" }], repository: { escape: { patterns: [{ comment: "single character character escape sequences", match: `\\\\[abefnrtv $*?~#(){}\\[\\]<>^&|;"']`, name: "constant.character.escape.single.fish" }, { comment: "escapes the ascii character with the specified value (hexadecimal)", match: "\\\\x[0-9a-fA-F]{1,2}", name: "constant.character.escape.hex-ascii.fish" }, { comment: "escapes a byte of data with the specified value (hexadecimal). If you are using mutibyte encoding, this can be used to enter invalid strings. Only use this if you know what are doing.", match: "\\\\X[0-9a-fA-F]{1,2}", name: "constant.character.escape.hex-byte.fish" }, { comment: "escapes the ascii character with the specified value (octal)", match: "\\\\[0-7]{1,3}", name: "constant.character.escape.octal.fish" }, { comment: "escapes the 16-bit unicode character with the specified value (hexadecimal)", match: "\\\\u[0-9a-fA-F]{1,4}", name: "constant.character.escape.unicode-16-bit.fish" }, { comment: "escapes the 32-bit unicode character with the specified value (hexadecimal)", match: "\\\\U[0-9a-fA-F]{1,8}", name: "constant.character.escape.unicode-32-bit.fish" }, { comment: "escapes the control sequence generated by pressing the control key and the specified letter", match: "\\\\c[a-zA-Z]", name: "constant.character.escape.control.fish" }] }, variable: { patterns: [{ captures: { 1: { name: "punctuation.definition.variable.fish" } }, comment: "Built-in variables visible by pressing $ TAB TAB in a new shell", match: "(\\$)(argv|CMD_DURATION|COLUMNS|fish_bind_mode|fish_color_autosuggestion|fish_color_cancel|fish_color_command|fish_color_comment|fish_color_cwd|fish_color_cwd_root|fish_color_end|fish_color_error|fish_color_escape|fish_color_hg_added|fish_color_hg_clean|fish_color_hg_copied|fish_color_hg_deleted|fish_color_hg_dirty|fish_color_hg_modified|fish_color_hg_renamed|fish_color_hg_unmerged|fish_color_hg_untracked|fish_color_history_current|fish_color_host|fish_color_host_remote|fish_color_match|fish_color_normal|fish_color_operator|fish_color_param|fish_color_quote|fish_color_redirection|fish_color_search_match|fish_color_selection|fish_color_status|fish_color_user|fish_color_valid_path|fish_complete_path|fish_function_path|fish_greeting|fish_key_bindings|fish_pager_color_completion|fish_pager_color_description|fish_pager_color_prefix|fish_pager_color_progress|fish_pid|fish_prompt_hg_status_added|fish_prompt_hg_status_copied|fish_prompt_hg_status_deleted|fish_prompt_hg_status_modified|fish_prompt_hg_status_order|fish_prompt_hg_status_unmerged|fish_prompt_hg_status_untracked|FISH_VERSION|history|hostname|IFS|LINES|pipestatus|status|umask|version)\\b", name: "variable.language.fish" }, { captures: { 1: { name: "punctuation.definition.variable.fish" } }, match: "(\\$)[a-zA-Z_][a-zA-Z0-9_]*", name: "variable.other.normal.fish" }] } }, scopeName: "source.fish" });
var ke = [
  xe
];
const we = Object.freeze({ displayName: "Gherkin", fileTypes: ["feature"], firstLineMatch: "기능|機能|功能|フィーチャ|خاصية|תכונה|Функціонал|Функционалност|Функционал|Особина|Функция|Функциональность|Свойство|Могућност|Özellik|Właściwość|Tính năng|Savybė|Požiadavka|Požadavek|Osobina|Ominaisuus|Omadus|OH HAI|Mogućnost|Mogucnost|Jellemző|Fīča|Funzionalità|Funktionalität|Funkcionalnost|Funkcionalitāte|Funcționalitate|Functionaliteit|Functionalitate|Funcionalitat|Funcionalidade|Fonctionnalité|Fitur|Ability|Business Need|Feature|Egenskap|Egenskab|Crikey|Característica|Arwedd(.*)", foldingStartMarker: "^\\s*\\b(예|시나리오 개요|시나리오|배경|背景|場景大綱|場景|场景大纲|场景|劇本大綱|劇本|例子|例|テンプレ|シナリオテンプレート|シナリオテンプレ|シナリオアウトライン|シナリオ|サンプル|سيناريو مخطط|سيناريو|امثلة|الخلفية|תרחיש|תבנית תרחיש|רקע|דוגמאות|Тарих|Сценарій|Сценарији|Сценарио|Сценарий структураси|Сценарий|Структура сценарію|Структура сценарија|Структура сценария|Скица|Рамка на сценарий|Примери|Пример|Приклади|Предыстория|Предистория|Позадина|Передумова|Основа|Мисоллар|Концепт|Контекст|Значения|Örnekler|Założenia|Wharrimean is|Voorbeelden|Variantai|Tình huống|The thing of it is|Tausta|Taust|Tapausaihio|Tapaus|Tapaukset|Szenariogrundriss|Szenario|Szablon scenariusza|Stsenaarium|Struktura scenarija|Skica|Skenario konsep|Skenario|Situācija|Senaryo taslağı|Senaryo|Scénář|Scénario|Schema dello scenario|Scenārijs pēc parauga|Scenārijs|Scenár|Scenariusz|Scenariul de şablon|Scenariul de sablon|Scenariu|Scenarios|Scenario Outline|Scenario Amlinellol|Scenario|Example|Scenarijus|Scenariji|Scenarijaus šablonas|Scenarijai|Scenarij|Scenarie|Rerefons|Raamstsenaarium|Příklady|Példák|Príklady|Przykłady|Primjeri|Primeri|Primer|Pozadí|Pozadina|Pozadie|Plan du scénario|Plan du Scénario|Piemēri|Pavyzdžiai|Paraugs|Osnova scénáře|Osnova|Náčrt Scénáře|Náčrt Scenáru|Mate|MISHUN SRSLY|MISHUN|Kịch bản|Kontext|Konteksts|Kontekstas|Kontekst|Koncept|Khung tình huống|Khung kịch bản|Juhtumid|Háttér|Grundlage|Geçmiş|Forgatókönyv vázlat|Forgatókönyv|Exemplos|Exemples|Exemplele|Exempel|Examples|Esquema do Cenário|Esquema do Cenario|Esquema del escenario|Esquema de l'escenari|Esempi|Escenario|Escenari|Enghreifftiau|Eksempler|Ejemplos|EXAMPLZ|Dữ liệu|Dis is what went down|Dasar|Contoh|Contexto|Contexte|Contesto|Condiţii|Conditii|Cobber|Cenário|Cenario|Cefndir|Bối cảnh|Blokes|Beispiele|Bakgrunn|Bakgrund|Baggrund|Background|B4|Antecedents|Antecedentes|All y'all|Achtergrond|Abstrakt Scenario|Abstract Scenario|Rule|Regla|Règle|Regel|Regra)", foldingStopMarker: "^\\s*$", name: "gherkin", patterns: [{ include: "#feature_element_keyword" }, { include: "#feature_keyword" }, { include: "#step_keyword" }, { include: "#strings_triple_quote" }, { include: "#strings_single_quote" }, { include: "#strings_double_quote" }, { include: "#comments" }, { include: "#tags" }, { include: "#scenario_outline_variable" }, { include: "#table" }], repository: { comments: { captures: { 0: { name: "comment.line.number-sign" } }, match: "^\\s*(#.*)" }, feature_element_keyword: { captures: { 1: { name: "keyword.language.gherkin.feature.scenario" }, 2: { name: "string.language.gherkin.scenario.title.title" } }, match: "^\\s*(예|시나리오 개요|시나리오|배경|背景|場景大綱|場景|场景大纲|场景|劇本大綱|劇本|例子|例|テンプレ|シナリオテンプレート|シナリオテンプレ|シナリオアウトライン|シナリオ|サンプル|سيناريو مخطط|سيناريو|امثلة|الخلفية|תרחיש|תבנית תרחיש|רקע|דוגמאות|Тарих|Сценарій|Сценарији|Сценарио|Сценарий структураси|Сценарий|Структура сценарію|Структура сценарија|Структура сценария|Скица|Рамка на сценарий|Примери|Пример|Приклади|Предыстория|Предистория|Позадина|Передумова|Основа|Мисоллар|Концепт|Контекст|Значения|Örnekler|Założenia|Wharrimean is|Voorbeelden|Variantai|Tình huống|The thing of it is|Tausta|Taust|Tapausaihio|Tapaus|Tapaukset|Szenariogrundriss|Szenario|Szablon scenariusza|Stsenaarium|Struktura scenarija|Skica|Skenario konsep|Skenario|Situācija|Senaryo taslağı|Senaryo|Scénář|Scénario|Schema dello scenario|Scenārijs pēc parauga|Scenārijs|Scenár|Scenariusz|Scenariul de şablon|Scenariul de sablon|Scenariu|Scenarios|Scenario Outline|Scenario Amlinellol|Scenario|Example|Scenarijus|Scenariji|Scenarijaus šablonas|Scenarijai|Scenarij|Scenarie|Rerefons|Raamstsenaarium|Příklady|Példák|Príklady|Przykłady|Primjeri|Primeri|Primer|Pozadí|Pozadina|Pozadie|Plan du scénario|Plan du Scénario|Piemēri|Pavyzdžiai|Paraugs|Osnova scénáře|Osnova|Náčrt Scénáře|Náčrt Scenáru|Mate|MISHUN SRSLY|MISHUN|Kịch bản|Kontext|Konteksts|Kontekstas|Kontekst|Koncept|Khung tình huống|Khung kịch bản|Juhtumid|Háttér|Grundlage|Geçmiş|Forgatókönyv vázlat|Forgatókönyv|Exemplos|Exemples|Exemplele|Exempel|Examples|Esquema do Cenário|Esquema do Cenario|Esquema del escenario|Esquema de l'escenari|Esempi|Escenario|Escenari|Enghreifftiau|Eksempler|Ejemplos|EXAMPLZ|Dữ liệu|Dis is what went down|Dasar|Contoh|Contexto|Contexte|Contesto|Condiţii|Conditii|Cobber|Cenário|Cenario|Cefndir|Bối cảnh|Blokes|Beispiele|Bakgrunn|Bakgrund|Baggrund|Background|B4|Antecedents|Antecedentes|All y'all|Achtergrond|Abstrakt Scenario|Abstract Scenario|Rule|Regla|Règle|Regel|Regra):(.*)" }, feature_keyword: { captures: { 1: { name: "keyword.language.gherkin.feature" }, 2: { name: "string.language.gherkin.feature.title" } }, match: "^\\s*(기능|機能|功能|フィーチャ|خاصية|תכונה|Функціонал|Функционалност|Функционал|Особина|Функция|Функциональность|Свойство|Могућност|Özellik|Właściwość|Tính năng|Savybė|Požiadavka|Požadavek|Osobina|Ominaisuus|Omadus|OH HAI|Mogućnost|Mogucnost|Jellemző|Fīča|Funzionalità|Funktionalität|Funkcionalnost|Funkcionalitāte|Funcționalitate|Functionaliteit|Functionalitate|Funcionalitat|Funcionalidade|Fonctionnalité|Fitur|Ability|Business Need|Feature|Ability|Egenskap|Egenskab|Crikey|Característica|Arwedd):(.*)\\b" }, scenario_outline_variable: { match: "<[a-zA-Z0-9 _-]*>", name: "variable.other" }, step_keyword: { captures: { 1: { name: "keyword.language.gherkin.feature.step" } }, match: "^\\s*(En |و |Y |E |Եվ |Ya |Too right |Və |Həm |A |И |而且 |并且 |同时 |並且 |同時 |Ak |Epi |A také |Og |😂 |And |Kaj |Ja |Et que |Et qu' |Et |და |Und |Και |અને |וגם |और |तथा |És |Dan |Agus |かつ |Lan |ಮತ್ತು |'ej |latlh |그리고 |AN |Un |Ir |an |a |Мөн |Тэгээд |Ond |7 |ਅਤੇ |Aye |Oraz |Si |Și |Şi |К тому же |Также |An |A tiež |A taktiež |A zároveň |In |Ter |Och |மேலும் |மற்றும் |Һәм |Вә |మరియు |และ |Ve |І |А також |Та |اور |Ва |Và |Maar |لكن |Pero |Բայց |Peru |Yeah nah |Amma |Ancaq |Ali |Но |Però |但是 |Men |Ale |😔 |But |Sed |Kuid |Mutta |Mais que |Mais qu' |Mais |მაგ­რამ |Aber |Αλλά |પણ |אבל |पर |परन्तु |किन्तु |De |En |Tapi |Ach |Ma |しかし |但し |ただし |Nanging |Ananging |ಆದರೆ |'ach |'a |하지만 |단 |BUT |Bet |awer |mä |No |Tetapi |Гэхдээ |Харин |Ac |ਪਰ |اما |Avast! |Mas |Dar |А |Иначе |Buh |Али |Toda |Ampak |Vendar |ஆனால் |Ләкин |Әмма |కాని |แต่ |Fakat |Ama |Але |لیکن |Лекин |Бирок |Аммо |Nhưng |Ond |Dan |اذاً |ثم |Alavez |Allora |Antonces |Ապա |Entós |But at the end of the day I reckon |O halda |Zatim |То |Aleshores |Cal |那么 |那麼 |Lè sa a |Le sa a |Onda |Pak |Så |🙏 |Then |Do |Siis |Niin |Alors |Entón |Logo |მაშინ |Dann |Τότε |પછી |אז |אזי |तब |तदा |Akkor |Þá |Maka |Ansin |ならば |Njuk |Banjur |ನಂತರ |vaj |그러면 |DEN |Tad |Tada |dann |Тогаш |Togash |Kemudian |Тэгэхэд |Үүний дараа |Tha |Þa |Ða |Tha the |Þa þe |Ða ðe |ਤਦ |آنگاه |Let go and haul |Wtedy |Então |Entao |Atunci |Затем |Тогда |Dun |Den youse gotta |Онда |Tak |Potom |Nato |Potem |Takrat |Entonces |அப்பொழுது |Нәтиҗәдә |అప్పుడు |ดังนั้น |O zaman |Тоді |پھر |تب |Унда |Thì |Yna |Wanneer |متى |عندما |Cuan |Եթե |Երբ |Cuando |It's just unbelievable |Əgər |Nə vaxt ki |Kada |Когато |Quan |当 |當 |Lè |Le |Kad |Když |Når |Als |🎬 |When |Se |Kui |Kun |Quand |Lorsque |Lorsqu' |Cando |როდესაც |Wenn |Όταν |ક્યારે |כאשר |जब |कदा |Majd |Ha |Amikor |Þegar |Ketika |Nuair a |Nuair nach |Nuair ba |Nuair nár |Quando |もし |Manawa |Menawa |ಸ್ಥಿತಿಯನ್ನು |qaSDI' |만일 |만약 |WEN |Ja |Kai |wann |Кога |Koga |Apabila |Хэрэв |Tha |Þa |Ða |ਜਦੋਂ |هنگامی |Blimey! |Jeżeli |Jeśli |Gdy |Kiedy |Cand |Când |Когда |Если |Wun |Youse know like when |Када |Кад |Keď |Ak |Ko |Ce |Če |Kadar |När |எப்போது |Әгәр |ఈ పరిస్థితిలో |เมื่อ |Eğer ki |Якщо |Коли |جب |Агар |Khi |Pryd |Gegewe |بفرض |Dau |Dada |Daus |Dadas |Դիցուք |Dáu |Daos |Daes |Y'know |Tutaq ki |Verilir |Dato |Дадено |Donat |Donada |Atès |Atesa |假如 |假设 |假定 |假設 |Sipoze |Sipoze ke |Sipoze Ke |Zadan |Zadani |Zadano |Pokud |Za předpokladu |Givet |Gegeven |Stel |😐 |Given |Donitaĵo |Komence |Eeldades |Oletetaan |Soit |Etant donné que |Etant donné qu' |Etant donné |Etant donnée |Etant donnés |Etant données |Étant donné que |Étant donné qu' |Étant donné |Étant donnée |Étant donnés |Étant données |Dado |Dados |მოცემული |Angenommen |Gegeben sei |Gegeben seien |Δεδομένου |આપેલ છે |בהינתן |अगर |यदि |चूंकि |Amennyiben |Adott |Ef |Dengan |Cuir i gcás go |Cuir i gcás nach |Cuir i gcás gur |Cuir i gcás nár |Data |Dati |Date |前提 |Nalika |Nalikaning |ನೀಡಿದ |ghu' noblu' |DaH ghu' bejlu' |조건 |먼저 |I CAN HAZ |Kad |Duota |ugeholl |Дадена |Dadeno |Dadena |Diberi |Bagi |Өгөгдсөн нь |Анх |Gitt |Thurh |Þurh |Ðurh |ਜੇਕਰ |ਜਿਵੇਂ ਕਿ |با فرض |Gangway! |Zakładając |Mając |Zakładając, że |Date fiind |Dat fiind |Dată fiind |Dati fiind |Dați fiind |Daţi fiind |Допустим |Дано |Пусть |Givun |Youse know when youse got |За дато |За дате |За дати |Za dato |Za date |Za dati |Pokiaľ |Za predpokladu |Dano |Podano |Zaradi |Privzeto |கொடுக்கப்பட்ட |Әйтик |చెప్పబడినది |กำหนดให้ |Diyelim ki |Припустимо |Припустимо, що |Нехай |اگر |بالفرض |فرض کیا |Агар |Biết |Cho |Anrhegedig a |\\* )" }, strings_double_quote: { begin: `(?<![a-zA-Z0-9'])"`, end: `"(?![a-zA-Z0-9'])`, name: "string.quoted.double", patterns: [{ match: "\\\\.", name: "constant.character.escape.untitled" }] }, strings_single_quote: { begin: `(?<![a-zA-Z0-9"])'`, end: `'(?![a-zA-Z0-9"])`, name: "string.quoted.single", patterns: [{ match: "\\\\.", name: "constant.character.escape" }] }, strings_triple_quote: { begin: '""".*', end: '"""', name: "string.quoted.single" }, table: { begin: "^\\s*\\|", end: "\\|\\s*$", name: "keyword.control.cucumber.table", patterns: [{ match: "\\w", name: "source" }] }, tags: { captures: { 0: { name: "entity.name.type.class.tsx" } }, match: "(@[^@\\r\\n\\t ]+)" } }, scopeName: "text.gherkin.feature" });
var ve = [
  we
];
const $e = Object.freeze({ displayName: "Go", name: "go", patterns: [{ include: "#statements" }], repository: { after_control_variables: { captures: { 1: { patterns: [{ include: "#type-declarations-without-brackets" }, { match: "\\[", name: "punctuation.definition.begin.bracket.square.go" }, { match: "\\]", name: "punctuation.definition.end.bracket.square.go" }, { match: "(?:\\w+)", name: "variable.other.go" }] } }, comment: "After control variables, to not highlight as a struct/interface (before formatting with gofmt)", match: "(?:(?<=\\brange\\b|\\bswitch\\b|\\;|\\bif\\b|\\bfor\\b|\\<|\\>|\\<\\=|\\>\\=|\\=\\=|\\!\\=|\\w(?:\\+|/|\\-|\\*|\\%)|\\w(?:\\+|/|\\-|\\*|\\%)\\=|\\|\\||\\&\\&)(?:\\s*)((?![\\[\\]]+)[[:alnum:]\\-\\_\\!\\.\\[\\]\\<\\>\\=\\*/\\+\\%\\:]+)(?:\\s*)(?=\\{))" }, brackets: { patterns: [{ begin: "\\{", beginCaptures: { 0: { name: "punctuation.definition.begin.bracket.curly.go" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.end.bracket.curly.go" } }, patterns: [{ include: "$self" }] }, { begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.begin.bracket.round.go" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.end.bracket.round.go" } }, patterns: [{ include: "$self" }] }, { begin: "\\[", beginCaptures: { 0: { name: "punctuation.definition.begin.bracket.square.go" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.end.bracket.square.go" } }, patterns: [{ include: "$self" }] }] }, built_in_functions: { comment: "Built-in functions", patterns: [{ match: "\\b(append|cap|close|complex|copy|delete|imag|len|panic|print|println|real|recover|min|max|clear)\\b(?=\\()", name: "entity.name.function.support.builtin.go" }, { begin: "(?:(\\bnew\\b)(\\())", beginCaptures: { 1: { name: "entity.name.function.support.builtin.go" }, 2: { name: "punctuation.definition.begin.bracket.round.go" } }, comment: "new keyword", end: "\\)", endCaptures: { 0: { name: "punctuation.definition.end.bracket.round.go" } }, patterns: [{ include: "#functions" }, { include: "#struct_variables_types" }, { include: "#type-declarations" }, { include: "#generic_types" }, { match: "(?:\\w+)", name: "entity.name.type.go" }, { include: "$self" }] }, { begin: "(?:(\\bmake\\b)(?:(\\()((?:(?:(?:[\\*\\[\\]]+)?(?:\\<\\-\\s*)?\\bchan\\b(?:\\s*\\<\\-)?\\s*)+(?:\\([^\\)]+\\))?)?(?:[\\[\\]\\*]+)?(?:(?!\\bmap\\b)(?:[\\w\\.]+))?(\\[(?:(?:[\\S]+)(?:(?:\\,\\s*(?:[\\S]+))*))?\\])?(?:\\,)?)?))", beginCaptures: { 1: { name: "entity.name.function.support.builtin.go" }, 2: { name: "punctuation.definition.begin.bracket.round.go" }, 3: { patterns: [{ include: "#type-declarations-without-brackets" }, { include: "#parameter-variable-types" }, { match: "\\w+", name: "entity.name.type.go" }] } }, comment: "make keyword", end: "\\)", endCaptures: { 0: { name: "punctuation.definition.end.bracket.round.go" } }, patterns: [{ include: "$self" }] }] }, comments: { patterns: [{ begin: "(\\/\\*)", beginCaptures: { 1: { name: "punctuation.definition.comment.go" } }, end: "(\\*\\/)", endCaptures: { 1: { name: "punctuation.definition.comment.go" } }, name: "comment.block.go" }, { begin: "(\\/\\/)", beginCaptures: { 1: { name: "punctuation.definition.comment.go" } }, end: "(?:\\n|$)", name: "comment.line.double-slash.go" }] }, delimiters: { patterns: [{ match: "\\,", name: "punctuation.other.comma.go" }, { match: "\\.(?!\\.\\.)", name: "punctuation.other.period.go" }, { match: ":(?!=)", name: "punctuation.other.colon.go" }] }, double_parentheses_types: { captures: { 1: { patterns: [{ include: "#type-declarations-without-brackets" }, { match: "\\(", name: "punctuation.definition.begin.bracket.round.go" }, { match: "\\)", name: "punctuation.definition.end.bracket.round.go" }, { match: "\\[", name: "punctuation.definition.begin.bracket.square.go" }, { match: "\\]", name: "punctuation.definition.end.bracket.square.go" }, { match: "\\w+", name: "entity.name.type.go" }] } }, comment: "double parentheses types", match: "(?:(?<!\\w)(\\((?:[\\w\\.\\[\\]\\*\\&]+)\\))(?=\\())" }, field_hover: { captures: { 1: { patterns: [{ include: "#type-declarations" }, { match: "\\w+", name: "variable.other.property.go" }] }, 2: { patterns: [{ match: "\\binvalid\\b\\s+\\btype\\b", name: "invalid.field.go" }, { include: "#type-declarations-without-brackets" }, { include: "#parameter-variable-types" }, { match: "\\w+", name: "entity.name.type.go" }] } }, comment: "struct field property and types when hovering with the mouse", match: "(?:(?<=^\\bfield\\b)\\s+([\\w\\*\\.]+)\\s+([\\s\\S]+))" }, function_declaration: { begin: "(?:^(\\bfunc\\b)(?:\\s*(\\([^\\)]+\\)\\s*)?(?:(\\w+)(?=\\(|\\[))?))", beginCaptures: { 1: { name: "keyword.function.go" }, 2: { patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.begin.bracket.round.go" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.end.bracket.round.go" } }, patterns: [{ captures: { 1: { name: "variable.parameter.go" }, 2: { patterns: [{ include: "#type-declarations-without-brackets" }, { include: "#parameter-variable-types" }, { match: "(?:\\w+)", name: "entity.name.type.go" }] } }, match: "(?:(\\w+(?:\\s+))?((?:[\\w\\.\\*]+)(?:\\[(?:(?:(?:[\\w\\.\\*]+)(?:\\,\\s+)?)+)?\\])?))" }, { include: "$self" }] }] }, 3: { patterns: [{ match: "\\d\\w*", name: "invalid.illegal.identifier.go" }, { match: "\\w+", name: "entity.name.function.go" }] } }, comment: "Function declarations", end: "(?:(?<=\\))\\s*((?:(?:(?:[\\*\\[\\]]+)?(?:\\<\\-\\s*)?\\bchan\\b(?:\\s*\\<\\-)?\\s*)+)?(?!(?:[\\[\\]\\*]+)?(?:\\bstruct\\b|\\binterface\\b))[\\w\\.\\-\\*\\[\\]]+)?\\s*(?=\\{))", endCaptures: { 1: { patterns: [{ include: "#type-declarations-without-brackets" }, { include: "#parameter-variable-types" }, { match: "(?:\\w+)", name: "entity.name.type.go" }] } }, patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.begin.bracket.round.go" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.end.bracket.round.go" } }, patterns: [{ include: "#function_param_types" }] }, { begin: "(?:([\\w\\.\\*]+)?(\\[))", beginCaptures: { 1: { patterns: [{ include: "#type-declarations" }, { match: "(?:\\w+)", name: "entity.name.type.go" }] }, 2: { name: "punctuation.definition.begin.bracket.square.go" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.end.bracket.square.go" } }, patterns: [{ include: "#generic_param_types" }] }, { captures: { 1: { patterns: [{ include: "#type-declarations-without-brackets" }, { include: "#parameter-variable-types" }, { match: "\\w+", name: "entity.name.type.go" }] } }, comment: "single function as a type returned type(s) declaration", match: "(?:(?<=\\))(?:\\s*)((?:(?:\\s*(?:[\\*\\[\\]]+)?(?:\\<\\-\\s*)?\\bchan\\b(?:\\s*\\<\\-)?\\s*)+)?[\\w\\*\\.\\[\\]\\<\\>\\-]+(?:\\s*)(?:\\/(?:\\/|\\*).*)?)$)" }, { include: "$self" }] }, function_param_types: { comment: "function parameter variables and types", patterns: [{ include: "#struct_variables_types" }, { include: "#interface_variables_types" }, { include: "#type-declarations-without-brackets" }, { captures: { 1: { patterns: [{ include: "#type-declarations" }, { match: "\\w+", name: "variable.parameter.go" }] } }, comment: "struct/interface type declaration", match: "((?:(?:\\b\\w+\\,\\s*)+)?\\b\\w+)\\s+(?=(?:(?:\\s*(?:[\\*\\[\\]]+)?(?:\\<\\-\\s*)?\\bchan\\b(?:\\s*\\<\\-)?\\s*)+)?(?:[\\[\\]\\*]+)?\\b(?:struct|interface)\\b\\s*\\{)" }, { captures: { 1: { patterns: [{ include: "#type-declarations" }, { match: "\\w+", name: "variable.parameter.go" }] } }, comment: "multiple parameters one type -with multilines", match: "(?:(?:(?<=\\()|^\\s*)((?:(?:\\b\\w+\\,\\s*)+)(?:/(?:/|\\*).*)?)$)" }, { captures: { 1: { patterns: [{ include: "#delimiters" }, { match: "\\w+", name: "variable.parameter.go" }] }, 2: { patterns: [{ include: "#type-declarations-without-brackets" }, { include: "#parameter-variable-types" }, { match: "(?:\\w+)", name: "entity.name.type.go" }] } }, comment: "multiple params and types | multiple params one type | one param one type", match: "(?:((?:(?:\\b\\w+\\,\\s*)+)?\\b\\w+)(?:\\s+)((?:(?:\\s*(?:[\\*\\[\\]]+)?(?:\\<\\-\\s*)?\\bchan\\b(?:\\s*\\<\\-)?\\s*)+)?(?:(?:(?:[\\w\\[\\]\\.\\*]+)?(?:(?:\\bfunc\\b\\((?:[^\\)]+)?\\))(?:(?:\\s*(?:[\\*\\[\\]]+)?(?:\\<\\-\\s*)?\\bchan\\b(?:\\s*\\<\\-)?\\s*)+)?(?:\\s*))+(?:(?:(?:[\\w\\*\\.\\[\\]]+)|(?:\\((?:[^\\)]+)?\\))))?)|(?:(?:[\\[\\]\\*]+)?[\\w\\*\\.]+(?:\\[(?:[^\\]]+)\\])?(?:[\\w\\.\\*]+)?)+)))" }, { include: "#parameter-variable-types" }, { captures: { 1: { patterns: [{ include: "#type-declarations" }, { match: "(?:\\w+)", name: "entity.name.type.go" }] } }, comment: "other types", match: "([\\w\\.]+)" }, { include: "$self" }] }, functions: { begin: "(?:(\\bfunc\\b)(?=\\())", beginCaptures: { 1: { name: "keyword.function.go" } }, comment: "Functions", end: "(?:(?<=\\))(\\s*(?:(?:[\\*\\[\\]]+)?(?:\\<\\-\\s*)?\\bchan\\b(?:\\s*\\<\\-)?\\s*)+)?((?:(?:\\s*(?:(?:[\\[\\]\\*]+)?[\\w\\.\\*]+)?(?:(?:\\[(?:(?:[\\w\\.\\*]+)?(?:\\[(?:[^\\]]+)?\\])?(?:\\,\\s+)?)+\\])|(?:\\((?:[^\\)]+)?\\)))?(?:[\\w\\.\\*]+)?)(?:\\s*)(?=\\{))|(?:\\s*(?:(?:(?:[\\[\\]\\*]+)?(?!\\bfunc\\b)(?:[\\w\\.\\*]+)(?:\\[(?:(?:[\\w\\.\\*]+)?(?:\\[(?:[^\\]]+)?\\])?(?:\\,\\s+)?)+\\])?(?:[\\w\\.\\*]+)?)|(?:\\((?:[^\\)]+)?\\)))))?)", endCaptures: { 1: { patterns: [{ include: "#type-declarations" }] }, 2: { patterns: [{ include: "#type-declarations-without-brackets" }, { include: "#parameter-variable-types" }, { match: "(?:\\w+)", name: "entity.name.type.go" }] } }, patterns: [{ include: "#parameter-variable-types" }] }, functions_inline: { captures: { 1: { name: "keyword.function.go" }, 2: { patterns: [{ include: "#type-declarations-without-brackets" }, { begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.begin.bracket.round.go" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.end.bracket.round.go" } }, patterns: [{ include: "#function_param_types" }, { include: "$self" }] }, { match: "\\[", name: "punctuation.definition.begin.bracket.square.go" }, { match: "\\]", name: "punctuation.definition.end.bracket.square.go" }, { match: "\\{", name: "punctuation.definition.begin.bracket.curly.go" }, { match: "\\}", name: "punctuation.definition.end.bracket.curly.go" }, { match: "(?:\\w+)", name: "entity.name.type.go" }] } }, comment: "functions in-line with multi return types", match: "(?:(\\bfunc\\b)((?:\\((?:[^/]*?)\\))(?:\\s+)(?:\\((?:[^/]*?)\\)))(?:\\s+)(?=\\{))" }, generic_param_types: { comment: "generic parameter variables and types", patterns: [{ include: "#struct_variables_types" }, { include: "#interface_variables_types" }, { include: "#type-declarations-without-brackets" }, { captures: { 1: { patterns: [{ include: "#type-declarations" }, { match: "\\w+", name: "variable.parameter.go" }] } }, comment: "struct/interface type declaration", match: "((?:(?:\\b\\w+\\,\\s*)+)?\\b\\w+)\\s+(?=(?:(?:\\s*(?:[\\*\\[\\]]+)?(?:\\<\\-\\s*)?\\bchan\\b(?:\\s*\\<\\-)?\\s*)+)?(?:[\\[\\]\\*]+)?\\b(?:struct|interface)\\b\\s*\\{)" }, { captures: { 1: { patterns: [{ include: "#type-declarations" }, { match: "\\w+", name: "variable.parameter.go" }] } }, comment: "multiple parameters one type -with multilines", match: "(?:(?:(?<=\\()|^\\s*)((?:(?:\\b\\w+\\,\\s*)+)(?:/(?:/|\\*).*)?)$)" }, { captures: { 1: { patterns: [{ include: "#delimiters" }, { match: "\\w+", name: "variable.parameter.go" }] }, 2: { patterns: [{ include: "#type-declarations-without-brackets" }, { include: "#parameter-variable-types" }, { match: "(?:\\w+)", name: "entity.name.type.go" }] }, 3: { patterns: [{ include: "#type-declarations" }, { match: "(?:\\w+)", name: "entity.name.type.go" }] } }, comment: "multiple params and types | multiple types one param", match: "(?:((?:(?:\\b\\w+\\,\\s*)+)?\\b\\w+)(?:\\s+)((?:(?:\\s*(?:[\\*\\[\\]]+)?(?:\\<\\-\\s*)?\\bchan\\b(?:\\s*\\<\\-)?\\s*)+)?(?:(?:(?:[\\w\\[\\]\\.\\*]+)?(?:(?:\\bfunc\\b\\((?:[^\\)]+)?\\))(?:(?:\\s*(?:[\\*\\[\\]]+)?(?:\\<\\-\\s*)?\\bchan\\b(?:\\s*\\<\\-)?\\s*)+)?(?:\\s*))+(?:(?:(?:[\\w\\*\\.]+)|(?:\\((?:[^\\)]+)?\\))))?)|(?:(?:(?:[\\w\\*\\.\\~]+)|(?:\\[(?:(?:[\\w\\.\\*]+)?(?:\\[(?:[^\\]]+)?\\])?(?:\\,\\s+)?)+\\]))(?:[\\w\\.\\*]+)?)+)))" }, { include: "#parameter-variable-types" }, { captures: { 1: { patterns: [{ include: "#type-declarations" }, { match: "(?:\\w+)", name: "entity.name.type.go" }] } }, comment: "other types", match: "(?:\\b([\\w\\.]+))" }, { include: "$self" }] }, generic_types: { captures: { 1: { patterns: [{ include: "#type-declarations" }, { match: "\\w+", name: "entity.name.type.go" }] }, 2: { patterns: [{ include: "#parameter-variable-types" }] } }, comment: "Generic support for all types", match: "(?:([\\w\\.\\*]+)(\\[(?:[^\\]]+)?\\]))" }, "group-functions": { comment: "all statements related to functions", patterns: [{ include: "#function_declaration" }, { include: "#functions_inline" }, { include: "#functions" }, { include: "#built_in_functions" }, { include: "#support_functions" }] }, "group-types": { comment: "all statements related to types", patterns: [{ include: "#other_struct_interface_expressions" }, { include: "#type_assertion_inline" }, { include: "#struct_variables_types" }, { include: "#interface_variables_types" }, { include: "#single_type" }, { include: "#multi_types" }, { include: "#struct_interface_declaration" }, { include: "#double_parentheses_types" }, { include: "#switch_types" }, { include: "#type-declarations" }] }, "group-variables": { comment: "all statements related to variables", patterns: [{ include: "#var_const_assignment" }, { include: "#variable_assignment" }, { include: "#label_loop_variables" }, { include: "#slice_index_variables" }, { include: "#property_variables" }, { include: "#switch_select_case_variables" }, { include: "#other_variables" }] }, import: { comment: "import", patterns: [{ begin: "\\b(import)\\s+", beginCaptures: { 1: { name: "keyword.control.import.go" } }, comment: "import", end: "(?!\\G)", patterns: [{ include: "#imports" }] }] }, imports: { comment: "import package(s)", patterns: [{ captures: { 1: { patterns: [{ include: "#delimiters" }, { match: "(?:\\w+)", name: "variable.other.import.go" }] }, 2: { name: "string.quoted.double.go" }, 3: { name: "punctuation.definition.string.begin.go" }, 4: { name: "entity.name.import.go" }, 5: { name: "punctuation.definition.string.end.go" } }, match: '(\\s*[\\w\\.]+)?\\s*((")([^"]*)("))' }, { begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.imports.begin.bracket.round.go" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.imports.end.bracket.round.go" } }, patterns: [{ include: "#comments" }, { include: "#imports" }] }, { include: "$self" }] }, interface_variables_types: { begin: "(\\binterface\\b)\\s*(\\{)", beginCaptures: { 1: { name: "keyword.interface.go" }, 2: { name: "punctuation.definition.begin.bracket.curly.go" } }, comment: "interface variable types", end: "\\}", endCaptures: { 0: { name: "punctuation.definition.end.bracket.curly.go" } }, patterns: [{ include: "#interface_variables_types_field" }, { include: "$self" }] }, interface_variables_types_field: { comment: "interface variable type fields", patterns: [{ include: "#support_functions" }, { include: "#type-declarations-without-brackets" }, { begin: "(?:([\\w\\.\\*]+)?(\\[))", beginCaptures: { 1: { patterns: [{ include: "#type-declarations" }, { match: "(?:\\w+)", name: "entity.name.type.go" }] }, 2: { name: "punctuation.definition.begin.bracket.square.go" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.end.bracket.square.go" } }, patterns: [{ include: "#generic_param_types" }] }, { begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.begin.bracket.round.go" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.end.bracket.round.go" } }, patterns: [{ include: "#function_param_types" }] }, { captures: { 1: { patterns: [{ include: "#type-declarations" }, { match: "\\w+", name: "entity.name.type.go" }] } }, comment: "other types", match: "([\\w\\.]+)" }] }, keywords: { patterns: [{ comment: "Flow control keywords", match: "\\b(break|case|continue|default|defer|else|fallthrough|for|go|goto|if|range|return|select|switch)\\b", name: "keyword.control.go" }, { match: "\\bchan\\b", name: "keyword.channel.go" }, { match: "\\bconst\\b", name: "keyword.const.go" }, { match: "\\bvar\\b", name: "keyword.var.go" }, { match: "\\bfunc\\b", name: "keyword.function.go" }, { match: "\\binterface\\b", name: "keyword.interface.go" }, { match: "\\bmap\\b", name: "keyword.map.go" }, { match: "\\bstruct\\b", name: "keyword.struct.go" }, { match: "\\bimport\\b", name: "keyword.control.import.go" }, { match: "\\btype\\b", name: "keyword.type.go" }] }, label_loop_variables: { captures: { 1: { patterns: [{ include: "#type-declarations" }, { match: "\\w+", name: "variable.other.label.go" }] } }, comment: "labeled loop variable name", match: "((?:^\\s*\\w+:\\s*$)|(?:^\\s*(?:\\bbreak\\b|\\bgoto\\b|\\bcontinue\\b)\\s+\\w+(?:\\s*/(?:/|\\*)\\s*.*)?$))" }, language_constants: { captures: { 1: { name: "constant.language.boolean.go" }, 2: { name: "constant.language.null.go" }, 3: { name: "constant.language.iota.go" } }, comment: "Language constants", match: "\\b(?:(true|false)|(nil)|(iota))\\b" }, map_types: { begin: "(?:(\\bmap\\b)(\\[))", beginCaptures: { 1: { name: "keyword.map.go" }, 2: { name: "punctuation.definition.begin.bracket.square.go" } }, comment: "map types", end: "(?:(\\])((?:(?:(?:[\\*\\[\\]]+)?(?:\\<\\-\\s*)?\\bchan\\b(?:\\s*\\<\\-)?\\s*)+)?(?!(?:[\\[\\]\\*]+)?\\b(?:func|struct|map)\\b)(?:[\\*\\[\\]]+)?(?:[\\w\\.]+)(?:\\[(?:(?:[\\w\\.\\*\\[\\]\\{\\}]+)(?:(?:\\,\\s*(?:[\\w\\.\\*\\[\\]\\{\\}]+))*))?\\])?)?)", endCaptures: { 1: { name: "punctuation.definition.end.bracket.square.go" }, 2: { patterns: [{ include: "#type-declarations-without-brackets" }, { match: "\\[", name: "punctuation.definition.begin.bracket.square.go" }, { match: "\\]", name: "punctuation.definition.end.bracket.square.go" }, { match: "\\w+", name: "entity.name.type.go" }] } }, patterns: [{ include: "#type-declarations-without-brackets" }, { include: "#parameter-variable-types" }, { include: "#functions" }, { match: "\\[", name: "punctuation.definition.begin.bracket.square.go" }, { match: "\\]", name: "punctuation.definition.end.bracket.square.go" }, { match: "\\{", name: "punctuation.definition.begin.bracket.curly.go" }, { match: "\\}", name: "punctuation.definition.end.bracket.curly.go" }, { match: "\\(", name: "punctuation.definition.begin.bracket.round.go" }, { match: "\\)", name: "punctuation.definition.end.bracket.round.go" }, { match: "\\w+", name: "entity.name.type.go" }] }, multi_types: { begin: "(\\btype\\b)\\s*(\\()", beginCaptures: { 1: { name: "keyword.type.go" }, 2: { name: "punctuation.definition.begin.bracket.round.go" } }, comment: "multi type declaration", end: "\\)", endCaptures: { 0: { name: "punctuation.definition.end.bracket.round.go" } }, patterns: [{ include: "#struct_variables_types" }, { include: "#interface_variables_types" }, { include: "#type-declarations-without-brackets" }, { include: "#parameter-variable-types" }, { match: "(?:\\w+)", name: "entity.name.type.go" }] }, numeric_literals: { captures: { 0: { patterns: [{ begin: "(?=.)", end: "(?:\\n|$)", patterns: [{ captures: { 1: { name: "constant.numeric.decimal.go", patterns: [{ match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric.go" }] }, 2: { name: "punctuation.separator.constant.numeric.go" }, 3: { name: "constant.numeric.decimal.point.go" }, 4: { name: "constant.numeric.decimal.go", patterns: [{ match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric.go" }] }, 5: { name: "punctuation.separator.constant.numeric.go" }, 6: { name: "keyword.other.unit.exponent.decimal.go" }, 7: { name: "keyword.operator.plus.exponent.decimal.go" }, 8: { name: "keyword.operator.minus.exponent.decimal.go" }, 9: { name: "constant.numeric.exponent.decimal.go", patterns: [{ match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric.go" }] }, 10: { name: "keyword.other.unit.imaginary.go" }, 11: { name: "constant.numeric.decimal.go", patterns: [{ match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric.go" }] }, 12: { name: "punctuation.separator.constant.numeric.go" }, 13: { name: "keyword.other.unit.exponent.decimal.go" }, 14: { name: "keyword.operator.plus.exponent.decimal.go" }, 15: { name: "keyword.operator.minus.exponent.decimal.go" }, 16: { name: "constant.numeric.exponent.decimal.go", patterns: [{ match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric.go" }] }, 17: { name: "keyword.other.unit.imaginary.go" }, 18: { name: "constant.numeric.decimal.point.go" }, 19: { name: "constant.numeric.decimal.go", patterns: [{ match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric.go" }] }, 20: { name: "punctuation.separator.constant.numeric.go" }, 21: { name: "keyword.other.unit.exponent.decimal.go" }, 22: { name: "keyword.operator.plus.exponent.decimal.go" }, 23: { name: "keyword.operator.minus.exponent.decimal.go" }, 24: { name: "constant.numeric.exponent.decimal.go", patterns: [{ match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric.go" }] }, 25: { name: "keyword.other.unit.imaginary.go" }, 26: { name: "keyword.other.unit.hexadecimal.go" }, 27: { name: "constant.numeric.hexadecimal.go", patterns: [{ match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric.go" }] }, 28: { name: "punctuation.separator.constant.numeric.go" }, 29: { name: "constant.numeric.hexadecimal.go" }, 30: { name: "constant.numeric.hexadecimal.go", patterns: [{ match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric.go" }] }, 31: { name: "punctuation.separator.constant.numeric.go" }, 32: { name: "keyword.other.unit.exponent.hexadecimal.go" }, 33: { name: "keyword.operator.plus.exponent.hexadecimal.go" }, 34: { name: "keyword.operator.minus.exponent.hexadecimal.go" }, 35: { name: "constant.numeric.exponent.hexadecimal.go", patterns: [{ match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric.go" }] }, 36: { name: "keyword.other.unit.imaginary.go" }, 37: { name: "keyword.other.unit.hexadecimal.go" }, 38: { name: "constant.numeric.hexadecimal.go", patterns: [{ match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric.go" }] }, 39: { name: "punctuation.separator.constant.numeric.go" }, 40: { name: "keyword.other.unit.exponent.hexadecimal.go" }, 41: { name: "keyword.operator.plus.exponent.hexadecimal.go" }, 42: { name: "keyword.operator.minus.exponent.hexadecimal.go" }, 43: { name: "constant.numeric.exponent.hexadecimal.go", patterns: [{ match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric.go" }] }, 44: { name: "keyword.other.unit.imaginary.go" }, 45: { name: "keyword.other.unit.hexadecimal.go" }, 46: { name: "constant.numeric.hexadecimal.go" }, 47: { name: "constant.numeric.hexadecimal.go", patterns: [{ match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric.go" }] }, 48: { name: "punctuation.separator.constant.numeric.go" }, 49: { name: "keyword.other.unit.exponent.hexadecimal.go" }, 50: { name: "keyword.operator.plus.exponent.hexadecimal.go" }, 51: { name: "keyword.operator.minus.exponent.hexadecimal.go" }, 52: { name: "constant.numeric.exponent.hexadecimal.go", patterns: [{ match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric.go" }] }, 53: { name: "keyword.other.unit.imaginary.go" } }, match: "(?:(?:(?:(?:(?:\\G(?=[0-9.])(?!0[xXbBoO])([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)((?:(?<=[0-9])\\.|\\.(?=[0-9])))([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)?(?:(?<!_)([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)))?(i(?!\\w))?(?:\\n|$)|\\G(?=[0-9.])(?!0[xXbBoO])([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)(?<!_)([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*))(i(?!\\w))?(?:\\n|$))|\\G((?:(?<=[0-9])\\.|\\.(?=[0-9])))([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)(?:(?<!_)([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)))?(i(?!\\w))?(?:\\n|$))|(\\G0[xX])_?([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)((?:(?<=[0-9a-fA-F])\\.|\\.(?=[0-9a-fA-F])))([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)?(?<!_)([pP])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*))(i(?!\\w))?(?:\\n|$))|(\\G0[xX])_?([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)(?<!_)([pP])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*))(i(?!\\w))?(?:\\n|$))|(\\G0[xX])((?:(?<=[0-9a-fA-F])\\.|\\.(?=[0-9a-fA-F])))([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)(?<!_)([pP])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*))(i(?!\\w))?(?:\\n|$))" }, { captures: { 1: { name: "constant.numeric.decimal.go", patterns: [{ match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric.go" }] }, 2: { name: "punctuation.separator.constant.numeric.go" }, 3: { name: "keyword.other.unit.imaginary.go" }, 4: { name: "keyword.other.unit.binary.go" }, 5: { name: "constant.numeric.binary.go", patterns: [{ match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric.go" }] }, 6: { name: "punctuation.separator.constant.numeric.go" }, 7: { name: "keyword.other.unit.imaginary.go" }, 8: { name: "keyword.other.unit.octal.go" }, 9: { name: "constant.numeric.octal.go", patterns: [{ match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric.go" }] }, 10: { name: "punctuation.separator.constant.numeric.go" }, 11: { name: "keyword.other.unit.imaginary.go" }, 12: { name: "keyword.other.unit.hexadecimal.go" }, 13: { name: "constant.numeric.hexadecimal.go", patterns: [{ match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])", name: "punctuation.separator.constant.numeric.go" }] }, 14: { name: "punctuation.separator.constant.numeric.go" }, 15: { name: "keyword.other.unit.imaginary.go" } }, match: "(?:(?:(?:\\G(?=[0-9.])(?!0[xXbBoO])([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)(i(?!\\w))?(?:\\n|$)|(\\G0[bB])_?([01](?:[01]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)(i(?!\\w))?(?:\\n|$))|(\\G0[oO]?)_?((?:[0-7]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))+)(i(?!\\w))?(?:\\n|$))|(\\G0[xX])_?([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)(i(?!\\w))?(?:\\n|$))" }, { match: "(?:(?:[0-9a-zA-Z_\\.])|(?<=[eEpP])[+-])+", name: "invalid.illegal.constant.numeric.go" }] }] } }, match: "(?<!\\w)\\.?\\d(?:(?:[0-9a-zA-Z_\\.])|(?<=[eEpP])[+-])*" }, operators: { comment: "Note that the order here is very important!", patterns: [{ match: "((?:\\*|\\&)+)(?:(?!\\d)(?=(?:[\\w\\[\\]])|(?:\\<\\-)))", name: "keyword.operator.address.go" }, { match: "<\\-", name: "keyword.operator.channel.go" }, { match: "\\-\\-", name: "keyword.operator.decrement.go" }, { match: "\\+\\+", name: "keyword.operator.increment.go" }, { match: "(==|!=|<=|>=|<(?!<)|>(?!>))", name: "keyword.operator.comparison.go" }, { match: "(&&|\\|\\||!)", name: "keyword.operator.logical.go" }, { match: "(=|\\+=|\\-=|\\|=|\\^=|\\*=|/=|:=|%=|<<=|>>=|&\\^=|&=)", name: "keyword.operator.assignment.go" }, { match: "(\\+|\\-|\\*|/|%)", name: "keyword.operator.arithmetic.go" }, { match: "(&(?!\\^)|\\||\\^|&\\^|<<|>>|\\~)", name: "keyword.operator.arithmetic.bitwise.go" }, { match: "\\.\\.\\.", name: "keyword.operator.ellipsis.go" }] }, other_struct_interface_expressions: { comment: "struct and interface expression in-line (before curly bracket)", patterns: [{ comment: "after control variables must be added exactly here, do not move it! (changing may not affect tests, so be careful!)", include: "#after_control_variables" }, { captures: { 1: { patterns: [{ include: "#type-declarations" }, { match: "\\w+", name: "entity.name.type.go" }] }, 2: { patterns: [{ begin: "\\[", beginCaptures: { 0: { name: "punctuation.definition.begin.bracket.square.go" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.end.bracket.square.go" } }, patterns: [{ include: "#type-declarations" }, { match: "\\w+", name: "entity.name.type.go" }, { include: "$self" }] }] } }, match: "(\\b[\\w\\.]+)(\\[(?:[^\\]]+)?\\])?(?=\\{)(?<!\\bstruct\\b|\\binterface\\b)" }] }, other_variables: { comment: "all other variables", match: "\\w+", name: "variable.other.go" }, package_name: { patterns: [{ begin: "\\b(package)\\s+", beginCaptures: { 1: { name: "keyword.package.go" } }, comment: "package name", end: "(?!\\G)", patterns: [{ match: "\\d\\w*", name: "invalid.illegal.identifier.go" }, { match: "\\w+", name: "entity.name.type.package.go" }] }] }, "parameter-variable-types": { comment: "function and generic parameter types", patterns: [{ match: "\\{", name: "punctuation.definition.begin.bracket.curly.go" }, { match: "\\}", name: "punctuation.definition.end.bracket.curly.go" }, { begin: "(?:([\\w\\.\\*]+)?(\\[))", beginCaptures: { 1: { patterns: [{ include: "#type-declarations" }, { match: "(?:\\w+)", name: "entity.name.type.go" }] }, 2: { name: "punctuation.definition.begin.bracket.square.go" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.end.bracket.square.go" } }, patterns: [{ include: "#generic_param_types" }] }, { begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.begin.bracket.round.go" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.end.bracket.round.go" } }, patterns: [{ include: "#function_param_types" }] }] }, property_variables: { captures: { 1: { patterns: [{ include: "#type-declarations" }, { match: "\\w+", name: "variable.other.property.go" }] } }, comment: "Property variables in struct", match: "((?:\\b[\\w\\.]+)(?:\\:(?!\\=)))" }, raw_string_literals: { begin: "`", beginCaptures: { 0: { name: "punctuation.definition.string.begin.go" } }, comment: "Raw string literals", end: "`", endCaptures: { 0: { name: "punctuation.definition.string.end.go" } }, name: "string.quoted.raw.go", patterns: [{ include: "#string_placeholder" }] }, runes: { patterns: [{ begin: "'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.go" } }, end: "'", endCaptures: { 0: { name: "punctuation.definition.string.end.go" } }, name: "string.quoted.rune.go", patterns: [{ match: `\\G(\\\\([0-7]{3}|[abfnrtv\\\\'"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})|.)(?=')`, name: "constant.other.rune.go" }, { match: "[^']+", name: "invalid.illegal.unknown-rune.go" }] }] }, single_type: { patterns: [{ captures: { 1: { name: "keyword.type.go" }, 2: { patterns: [{ include: "#type-declarations" }, { match: "\\w+", name: "entity.name.type.go" }] }, 3: { patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.begin.bracket.round.go" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.end.bracket.round.go" } }, patterns: [{ include: "#function_param_types" }, { include: "$self" }] }, { include: "#type-declarations" }, { include: "#generic_types" }, { match: "\\w+", name: "entity.name.type.go" }] } }, comment: "single type declaration", match: "(?:(?:^\\s*)(\\btype\\b)(?:\\s*)([\\w\\.\\*]+)(?:\\s+)(?!(?:\\=\\s*)?(?:[\\[\\]\\*]+)?\\b(?:struct|interface)\\b)([\\s\\S]+))" }, { begin: "(?:(?:^|\\s+)(\\btype\\b)(?:\\s*)([\\w\\.\\*]+)(?=\\[))", beginCaptures: { 1: { name: "keyword.type.go" }, 2: { patterns: [{ include: "#type-declarations-without-brackets" }, { match: "\\w+", name: "entity.name.type.go" }] } }, comment: "single type declaration with generics", end: "(?:(?<=\\])((?:\\s+)(?:(?:(?:[\\*\\[\\]]+)?(?:\\<\\-\\s*)?\\bchan\\b(?:\\s*\\<\\-)?\\s*)+)?(?:(?!(?:[\\[\\]\\*]+)?(?:\\bstruct\\b|\\binterface\\b|\\bfunc\\b))[\\w\\.\\-\\*\\[\\]]+(?:\\,\\s+[\\w\\.\\[\\]\\*]+)*))?)", endCaptures: { 1: { patterns: [{ include: "#type-declarations-without-brackets" }, { match: "\\[", name: "punctuation.definition.begin.bracket.square.go" }, { match: "\\]", name: "punctuation.definition.end.bracket.square.go" }, { match: "\\w+", name: "entity.name.type.go" }] } }, patterns: [{ include: "#struct_variables_types" }, { include: "#type-declarations-without-brackets" }, { include: "#parameter-variable-types" }, { match: "\\[", name: "punctuation.definition.begin.bracket.square.go" }, { match: "\\]", name: "punctuation.definition.end.bracket.square.go" }, { match: "\\{", name: "punctuation.definition.begin.bracket.curly.go" }, { match: "\\}", name: "punctuation.definition.end.bracket.curly.go" }, { match: "\\(", name: "punctuation.definition.begin.bracket.round.go" }, { match: "\\)", name: "punctuation.definition.end.bracket.round.go" }, { match: "\\w+", name: "entity.name.type.go" }] }] }, slice_index_variables: { captures: { 1: { patterns: [{ include: "#type-declarations" }, { match: "\\w+", name: "variable.other.go" }] } }, comment: "slice index and capacity variables, to not scope them as property variables", match: "(?<=\\w\\[)((?:(?:\\b[\\w\\.\\*\\+/\\-\\%\\<\\>\\|\\&]+\\:)|(?:\\:\\b[\\w\\.\\*\\+/\\-\\%\\<\\>\\|\\&]+))(?:\\b[\\w\\.\\*\\+/\\-\\%\\<\\>\\|\\&]+)?(?:\\:\\b[\\w\\.\\*\\+/\\-\\%\\<\\>\\|\\&]+)?)(?=\\])" }, statements: { patterns: [{ include: "#package_name" }, { include: "#import" }, { include: "#syntax_errors" }, { include: "#group-functions" }, { include: "#group-types" }, { include: "#group-variables" }, { include: "#field_hover" }] }, storage_types: { patterns: [{ match: "\\bbool\\b", name: "storage.type.boolean.go" }, { match: "\\bbyte\\b", name: "storage.type.byte.go" }, { match: "\\berror\\b", name: "storage.type.error.go" }, { match: "\\b(complex(64|128)|float(32|64)|u?int(8|16|32|64)?)\\b", name: "storage.type.numeric.go" }, { match: "\\brune\\b", name: "storage.type.rune.go" }, { match: "\\bstring\\b", name: "storage.type.string.go" }, { match: "\\buintptr\\b", name: "storage.type.uintptr.go" }, { match: "\\bany\\b", name: "entity.name.type.any.go" }] }, string_escaped_char: { patterns: [{ match: `\\\\([0-7]{3}|[abfnrtv\\\\'"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})`, name: "constant.character.escape.go" }, { match: `\\\\[^0-7xuUabfnrtv\\'"]`, name: "invalid.illegal.unknown-escape.go" }] }, string_literals: { patterns: [{ begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.go" } }, comment: "Interpreted string literals", end: '"', endCaptures: { 0: { name: "punctuation.definition.string.end.go" } }, name: "string.quoted.double.go", patterns: [{ include: "#string_escaped_char" }, { include: "#string_placeholder" }] }] }, string_placeholder: { patterns: [{ match: "%(\\[\\d+\\])?([\\+#\\-0\\x20]{,2}((\\d+|\\*)?(\\.?(\\d+|\\*|(\\[\\d+\\])\\*?)?(\\[\\d+\\])?)?))?[vT%tbcdoqxXUbeEfFgGspw]", name: "constant.other.placeholder.go" }] }, struct_interface_declaration: { captures: { 1: { name: "keyword.type.go" }, 2: { patterns: [{ include: "#type-declarations" }, { match: "\\w+", name: "entity.name.type.go" }] } }, comment: "struct, interface type declarations (related to: struct_variables_types, interface_variables_types)", match: "(?:(?:^\\s*)(\\btype\\b)(?:\\s*)([\\w\\.]+))" }, struct_variable_types_fields_multi: { comment: "struct variable and type fields with multi lines", patterns: [{ begin: "(?:((?:\\w+(?:\\,\\s*\\w+)*)(?:(?:\\s*(?:[\\*\\[\\]]+)?(?:\\<\\-\\s*)?\\bchan\\b(?:\\s*\\<\\-)?\\s*)+)?(?:\\s+)(?:[\\[\\]\\*]+)?)(\\bstruct\\b)(?:\\s*)(\\{))", beginCaptures: { 1: { patterns: [{ include: "#type-declarations" }, { match: "\\w+", name: "variable.other.property.go" }] }, 2: { name: "keyword.struct.go" }, 3: { name: "punctuation.definition.begin.bracket.curly.go" } }, comment: "struct in struct types", end: "\\}", endCaptures: { 0: { name: "punctuation.definition.end.bracket.curly.go" } }, patterns: [{ include: "#struct_variables_types_fields" }, { include: "$self" }] }, { begin: "(?:((?:\\w+(?:\\,\\s*\\w+)*)(?:(?:\\s*(?:[\\*\\[\\]]+)?(?:\\<\\-\\s*)?\\bchan\\b(?:\\s*\\<\\-)?\\s*)+)?(?:\\s+)(?:[\\[\\]\\*]+)?)(\\binterface\\b)(?:\\s*)(\\{))", beginCaptures: { 1: { patterns: [{ include: "#type-declarations" }, { match: "\\w+", name: "variable.other.property.go" }] }, 2: { name: "keyword.interface.go" }, 3: { name: "punctuation.definition.begin.bracket.curly.go" } }, comment: "interface in struct types", end: "\\}", endCaptures: { 0: { name: "punctuation.definition.end.bracket.curly.go" } }, patterns: [{ include: "#interface_variables_types_field" }, { include: "$self" }] }, { begin: "(?:((?:\\w+(?:\\,\\s*\\w+)*)(?:(?:\\s*(?:[\\*\\[\\]]+)?(?:\\<\\-\\s*)?\\bchan\\b(?:\\s*\\<\\-)?\\s*)+)?(?:\\s+)(?:[\\[\\]\\*]+)?)(\\bfunc\\b)(?:\\s*)(\\())", beginCaptures: { 1: { patterns: [{ include: "#type-declarations" }, { match: "\\w+", name: "variable.other.property.go" }] }, 2: { name: "keyword.function.go" }, 3: { name: "punctuation.definition.begin.bracket.round.go" } }, comment: "function in struct types", end: "\\)", endCaptures: { 0: { name: "punctuation.definition.end.bracket.round.go" } }, patterns: [{ include: "#function_param_types" }, { include: "$self" }] }, { begin: "(?:((?:(?:\\s*(?:[\\*\\[\\]]+)?(?:\\<\\-\\s*)?\\bchan\\b(?:\\s*\\<\\-)?\\s*)+)?(?<!\\,\\s*)(?:[\\w\\.\\*]+)\\s*)(?=\\`))", beginCaptures: { 1: { patterns: [{ include: "#type-declarations" }, { match: "\\w+", name: "entity.name.type.go" }] } }, comment: "one type only with multi line raw string", end: "(?=\\`)", patterns: [{ include: "#raw_string_literals" }] }, { include: "#parameter-variable-types" }] }, struct_variables_types: { begin: "(\\bstruct\\b)\\s*(\\{)", beginCaptures: { 1: { name: "keyword.struct.go" }, 2: { name: "punctuation.definition.begin.bracket.curly.go" } }, comment: "Struct variable type", end: "\\}", endCaptures: { 0: { name: "punctuation.definition.end.bracket.curly.go" } }, patterns: [{ include: "#struct_variables_types_fields" }, { include: "$self" }] }, struct_variables_types_fields: { comment: "Struct variable type fields", patterns: [{ include: "#struct_variable_types_fields_multi" }, { captures: { 1: { patterns: [{ include: "#type-declarations" }, { match: "(?:\\w+)", name: "entity.name.type.go" }] } }, comment: "one line - single type", match: "(?:(?<=\\{)\\s*((?:(?:\\s*(?:[\\*\\[\\]]+)?(?:\\<\\-\\s*)?\\bchan\\b(?:\\s*\\<\\-)?\\s*)+)?(?:[\\w\\.\\*\\[\\]]+))\\s*(?=\\}))" }, { captures: { 1: { patterns: [{ include: "#type-declarations" }, { match: "(?:\\w+)", name: "variable.other.property.go" }] }, 2: { patterns: [{ include: "#type-declarations" }, { match: "(?:\\w+)", name: "entity.name.type.go" }] } }, comment: "one line - property variables and types", match: "(?:(?<=\\{)\\s*((?:(?:\\w+\\,\\s*)+)?(?:\\w+\\s+))((?:(?:\\s*(?:[\\*\\[\\]]+)?(?:\\<\\-\\s*)?\\bchan\\b(?:\\s*\\<\\-)?\\s*)+)?(?:[\\w\\.\\*\\[\\]]+))\\s*(?=\\}))" }, { captures: { 1: { patterns: [{ captures: { 1: { patterns: [{ include: "#type-declarations" }, { match: "(?:\\w+)", name: "variable.other.property.go" }] }, 2: { patterns: [{ include: "#type-declarations" }, { match: "(?:\\w+)", name: "entity.name.type.go" }] } }, match: "(?:((?:(?:\\w+\\,\\s*)+)?(?:\\w+\\s+))?((?:(?:\\s*(?:[\\*\\[\\]]+)?(?:\\<\\-\\s*)?\\bchan\\b(?:\\s*\\<\\-)?\\s*)+)?(?:[\\S]+)(?:\\;)?))" }] } }, comment: "one line with semicolon(;) without formatting gofmt - single type | property variables and types", match: "(?:(?<=\\{)((?:\\s*(?:(?:(?:\\w+\\,\\s*)+)?(?:\\w+\\s+))?(?:(?:(?:\\s*(?:[\\*\\[\\]]+)?(?:\\<\\-\\s*)?\\bchan\\b(?:\\s*\\<\\-)?\\s*)+)?(?:[\\S]+)(?:\\;)?))+)\\s*(?=\\}))" }, { captures: { 1: { patterns: [{ include: "#type-declarations" }, { match: "(?:\\w+)", name: "entity.name.type.go" }] } }, comment: "one type only", match: '(?:((?:(?:\\s*(?:[\\*\\[\\]]+)?(?:\\<\\-\\s*)?\\bchan\\b(?:\\s*\\<\\-)?\\s*)+)?(?<!\\,\\s*)(?:[\\w\\.\\*]+)\\s*(?:(?:(?:".*")|(?:\\`.*\\`))\\s*)?(?:/(?:/|\\*).*)?)$)' }, { captures: { 1: { patterns: [{ include: "#type-declarations" }, { match: "(?:\\w+)", name: "variable.other.property.go" }] }, 2: { patterns: [{ include: "#type-declarations-without-brackets" }, { include: "#parameter-variable-types" }, { match: "(?:\\w+)", name: "entity.name.type.go" }] } }, comment: "property variables and types", match: "(?:((?:(?:\\w+\\,\\s*)+)?(?:\\w+\\s+))([^\\`]+))" }] }, support_functions: { captures: { 1: { name: "entity.name.function.support.go" }, 2: { patterns: [{ include: "#type-declarations" }, { match: "\\d\\w*", name: "invalid.illegal.identifier.go" }, { match: "\\w+", name: "entity.name.function.support.go" }] }, 3: { patterns: [{ include: "#type-declarations-without-brackets" }, { match: "\\[", name: "punctuation.definition.begin.bracket.square.go" }, { match: "\\]", name: "punctuation.definition.end.bracket.square.go" }, { match: "\\{", name: "punctuation.definition.begin.bracket.curly.go" }, { match: "\\}", name: "punctuation.definition.end.bracket.curly.go" }, { match: "\\w+", name: "entity.name.type.go" }] } }, comment: "Support Functions", match: `(?:(?:((?<=\\.)\\b\\w+)|(\\b\\w+))(\\[(?:(?:[\\w\\.\\*\\[\\]\\{\\}"\\']+)(?:(?:\\,\\s*(?:[\\w\\.\\*\\[\\]\\{\\}]+))*))?\\])?(?=\\())` }, switch_select_case_variables: { captures: { 1: { name: "keyword.control.go" }, 2: { patterns: [{ include: "#type-declarations" }, { include: "#support_functions" }, { include: "#variable_assignment" }, { match: "\\w+", name: "variable.other.go" }] } }, comment: "variables after case control keyword in switch/select expression, to not scope them as property variables", match: "(?:(?:^\\s*(\\bcase\\b))(?:\\s+)([\\s\\S]+(?:\\:)\\s*(?:/(?:/|\\*).*)?)$)" }, switch_types: { begin: "(?<=\\bswitch\\b)(?:\\s*)(?:(\\w+\\s*\\:\\=)?\\s*([\\w\\.\\*\\(\\)\\[\\]\\+/\\-\\%\\<\\>\\|\\&]+))(\\.\\(\\btype\\b\\)\\s*)(\\{)", beginCaptures: { 1: { patterns: [{ include: "#operators" }, { match: "\\w+", name: "variable.other.assignment.go" }] }, 2: { patterns: [{ include: "#support_functions" }, { include: "#type-declarations" }, { match: "\\w+", name: "variable.other.go" }] }, 3: { patterns: [{ include: "#delimiters" }, { include: "#brackets" }, { match: "\\btype\\b", name: "keyword.type.go" }] }, 4: { name: "punctuation.definition.begin.bracket.curly.go" } }, comment: "switch type assertions, only highlights types after case keyword", end: "(?:\\})", endCaptures: { 0: { name: "punctuation.definition.end.bracket.curly.go" } }, patterns: [{ captures: { 1: { name: "keyword.control.go" }, 2: { patterns: [{ include: "#type-declarations" }, { match: "\\w+", name: "entity.name.type.go" }] }, 3: { name: "punctuation.other.colon.go" }, 4: { patterns: [{ include: "#comments" }] } }, comment: "types after case keyword with single line", match: "(?:^\\s*(\\bcase\\b))(?:\\s+)([\\w\\.\\,\\*\\=\\<\\>\\!\\s]+)(:)(\\s*/(?:/|\\*)\\s*.*)?$" }, { begin: "\\bcase\\b", beginCaptures: { 0: { name: "keyword.control.go" } }, comment: "types after case keyword with multi lines", end: "\\:", endCaptures: { 0: { name: "punctuation.other.colon.go" } }, patterns: [{ include: "#type-declarations" }, { match: "\\w+", name: "entity.name.type.go" }] }, { include: "$self" }] }, syntax_errors: { patterns: [{ captures: { 1: { name: "invalid.illegal.slice.go" } }, comment: "Syntax error using slices", match: "\\[\\](\\s+)" }, { comment: "Syntax error numeric literals", match: "\\b0[0-7]*[89]\\d*\\b", name: "invalid.illegal.numeric.go" }] }, terminators: { comment: "Terminators", match: ";", name: "punctuation.terminator.go" }, "type-declarations": { comment: "includes all type declarations", patterns: [{ include: "#language_constants" }, { include: "#comments" }, { include: "#map_types" }, { include: "#brackets" }, { include: "#delimiters" }, { include: "#keywords" }, { include: "#operators" }, { include: "#runes" }, { include: "#storage_types" }, { include: "#raw_string_literals" }, { include: "#string_literals" }, { include: "#numeric_literals" }, { include: "#terminators" }] }, "type-declarations-without-brackets": { comment: "includes all type declarations without brackets (in some cases, brackets need to be captured manually)", patterns: [{ include: "#language_constants" }, { include: "#comments" }, { include: "#map_types" }, { include: "#delimiters" }, { include: "#keywords" }, { include: "#operators" }, { include: "#runes" }, { include: "#storage_types" }, { include: "#raw_string_literals" }, { include: "#string_literals" }, { include: "#numeric_literals" }, { include: "#terminators" }] }, type_assertion_inline: { captures: { 1: { name: "keyword.type.go" }, 2: { patterns: [{ include: "#type-declarations" }, { match: "(?:\\w+)", name: "entity.name.type.go" }] } }, comment: "struct/interface types in-line (type assertion) | switch type keyword", match: "(?:(?<=\\.\\()(?:(\\btype\\b)|((?:(?:\\s*(?:[\\*\\[\\]]+)?(?:\\<\\-\\s*)?\\bchan\\b(?:\\s*\\<\\-)?\\s*)+)?[\\w\\.\\[\\]\\*]+))(?=\\)))" }, var_const_assignment: { comment: "variable assignment with var and const keyword", patterns: [{ captures: { 1: { patterns: [{ include: "#delimiters" }, { match: "\\w+", name: "variable.other.assignment.go" }] }, 2: { patterns: [{ include: "#type-declarations-without-brackets" }, { include: "#generic_types" }, { match: "\\(", name: "punctuation.definition.begin.bracket.round.go" }, { match: "\\)", name: "punctuation.definition.end.bracket.round.go" }, { match: "\\[", name: "punctuation.definition.begin.bracket.square.go" }, { match: "\\]", name: "punctuation.definition.end.bracket.square.go" }, { match: "\\w+", name: "entity.name.type.go" }] } }, comment: "var and const with single type assignment", match: "(?:(?<=\\bvar\\b|\\bconst\\b)(?:\\s*)(\\b[\\w\\.]+(?:\\,\\s*[\\w\\.]+)*)(?:\\s*)((?:(?:(?:[\\*\\[\\]]+)?(?:\\<\\-\\s*)?\\bchan\\b(?:\\s*\\<\\-)?\\s*)+(?:\\([^\\)]+\\))?)?(?!(?:[\\[\\]\\*]+)?\\b(?:struct|func|map)\\b)(?:[\\w\\.\\[\\]\\*]+(?:\\,\\s*[\\w\\.\\[\\]\\*]+)*)?(?:\\s*)(?:\\=)?)?)" }, { begin: "(?:(?<=\\bvar\\b|\\bconst\\b)(?:\\s*)(\\())", beginCaptures: { 1: { name: "punctuation.definition.begin.bracket.round.go" } }, comment: "var and const with multi type assignment", end: "\\)", endCaptures: { 0: { name: "punctuation.definition.end.bracket.round.go" } }, patterns: [{ captures: { 1: { patterns: [{ include: "#delimiters" }, { match: "\\w+", name: "variable.other.assignment.go" }] }, 2: { patterns: [{ include: "#type-declarations-without-brackets" }, { include: "#generic_types" }, { match: "\\(", name: "punctuation.definition.begin.bracket.round.go" }, { match: "\\)", name: "punctuation.definition.end.bracket.round.go" }, { match: "\\[", name: "punctuation.definition.begin.bracket.square.go" }, { match: "\\]", name: "punctuation.definition.end.bracket.square.go" }, { match: "\\w+", name: "entity.name.type.go" }] } }, match: "(?:(?:^\\s*)(\\b[\\w\\.]+(?:\\,\\s*[\\w\\.]+)*)(?:\\s*)((?:(?:(?:[\\*\\[\\]]+)?(?:\\<\\-\\s*)?\\bchan\\b(?:\\s*\\<\\-)?\\s*)+(?:\\([^\\)]+\\))?)?(?!(?:[\\[\\]\\*]+)?\\b(?:struct|func|map)\\b)(?:[\\w\\.\\[\\]\\*]+(?:\\,\\s*[\\w\\.\\[\\]\\*]+)*)?(?:\\s*)(?:\\=)?)?)" }, { include: "$self" }] }] }, variable_assignment: { comment: "variable assignment", patterns: [{ captures: { 0: { patterns: [{ include: "#delimiters" }, { match: "\\d\\w*", name: "invalid.illegal.identifier.go" }, { match: "\\w+", name: "variable.other.assignment.go" }] } }, comment: "variable assignment with :=", match: "\\b\\w+(?:\\,\\s*\\w+)*(?=\\s*:=)" }, { captures: { 0: { patterns: [{ include: "#delimiters" }, { include: "#operators" }, { match: "\\d\\w*", name: "invalid.illegal.identifier.go" }, { match: "\\w+", name: "variable.other.assignment.go" }] } }, comment: "variable assignment with =", match: "\\b[\\w\\.\\*]+(?:\\,\\s*[\\w\\.\\*]+)*(?=\\s*=(?!=))" }] } }, scopeName: "source.go" });
var Ce = [
  $e
];
const Ae = Object.freeze({ displayName: "JSX", name: "jsx", patterns: [{ include: "#directives" }, { include: "#statements" }, { include: "#shebang" }], repository: { "access-modifier": { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(abstract|declare|override|public|protected|private|readonly|static)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "storage.modifier.js.jsx" }, "after-operator-block-as-object-literal": { begin: "(?<!\\+\\+|--)(?<=[:=(,\\[?+!>]|^await|[^\\._$[:alnum:]]await|^return|[^\\._$[:alnum:]]return|^yield|[^\\._$[:alnum:]]yield|^throw|[^\\._$[:alnum:]]throw|^in|[^\\._$[:alnum:]]in|^of|[^\\._$[:alnum:]]of|^typeof|[^\\._$[:alnum:]]typeof|&&|\\|\\||\\*)\\s*(\\{)", beginCaptures: { 1: { name: "punctuation.definition.block.js.jsx" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.block.js.jsx" } }, name: "meta.objectliteral.js.jsx", patterns: [{ include: "#object-member" }] }, "array-binding-pattern": { begin: "(?:(\\.\\.\\.)\\s*)?(\\[)", beginCaptures: { 1: { name: "keyword.operator.rest.js.jsx" }, 2: { name: "punctuation.definition.binding-pattern.array.js.jsx" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.binding-pattern.array.js.jsx" } }, patterns: [{ include: "#binding-element" }, { include: "#punctuation-comma" }] }, "array-binding-pattern-const": { begin: "(?:(\\.\\.\\.)\\s*)?(\\[)", beginCaptures: { 1: { name: "keyword.operator.rest.js.jsx" }, 2: { name: "punctuation.definition.binding-pattern.array.js.jsx" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.binding-pattern.array.js.jsx" } }, patterns: [{ include: "#binding-element-const" }, { include: "#punctuation-comma" }] }, "array-literal": { begin: "\\s*(\\[)", beginCaptures: { 1: { name: "meta.brace.square.js.jsx" } }, end: "\\]", endCaptures: { 0: { name: "meta.brace.square.js.jsx" } }, name: "meta.array.literal.js.jsx", patterns: [{ include: "#expression" }, { include: "#punctuation-comma" }] }, "arrow-function": { patterns: [{ captures: { 1: { name: "storage.modifier.async.js.jsx" }, 2: { name: "variable.parameter.js.jsx" } }, match: "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(\\basync)\\s+)?([_$[:alpha:]][_$[:alnum:]]*)\\s*(?==>)", name: "meta.arrow.js.jsx" }, { begin: `(?x) (?:
(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(\\basync)
)? ((?<![})!\\]])\\s*
(?=

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |
(
[<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]
) |
# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
)
)`, beginCaptures: { 1: { name: "storage.modifier.async.js.jsx" } }, end: "(?==>|\\{|(^\\s*(export|function|class|interface|let|var|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|const|import|enum|namespace|module|type|abstract|declare)\\s+))", name: "meta.arrow.js.jsx", patterns: [{ include: "#comment" }, { include: "#type-parameters" }, { include: "#function-parameters" }, { include: "#arrow-return-type" }, { include: "#possibly-arrow-return-type" }] }, { begin: "=>", beginCaptures: { 0: { name: "storage.type.function.arrow.js.jsx" } }, end: "((?<=\\}|\\S)(?<!=>)|((?!\\{)(?=\\S)))(?!\\/[\\/\\*])", name: "meta.arrow.js.jsx", patterns: [{ include: "#single-line-comment-consuming-line-ending" }, { include: "#decl-block" }, { include: "#expression" }] }] }, "arrow-return-type": { begin: "(?<=\\))\\s*(:)", beginCaptures: { 1: { name: "keyword.operator.type.annotation.js.jsx" } }, end: "(?==>|\\{|(^\\s*(export|function|class|interface|let|var|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|const|import|enum|namespace|module|type|abstract|declare)\\s+))", name: "meta.return.type.arrow.js.jsx", patterns: [{ include: "#arrow-return-type-body" }] }, "arrow-return-type-body": { patterns: [{ begin: "(?<=[:])(?=\\s*\\{)", end: "(?<=\\})", patterns: [{ include: "#type-object" }] }, { include: "#type-predicate-operator" }, { include: "#type" }] }, "async-modifier": { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(async)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "storage.modifier.async.js.jsx" }, "binding-element": { patterns: [{ include: "#comment" }, { include: "#string" }, { include: "#numeric-literal" }, { include: "#regex" }, { include: "#object-binding-pattern" }, { include: "#array-binding-pattern" }, { include: "#destructuring-variable-rest" }, { include: "#variable-initializer" }] }, "binding-element-const": { patterns: [{ include: "#comment" }, { include: "#string" }, { include: "#numeric-literal" }, { include: "#regex" }, { include: "#object-binding-pattern-const" }, { include: "#array-binding-pattern-const" }, { include: "#destructuring-variable-rest-const" }, { include: "#variable-initializer" }] }, "boolean-literal": { patterns: [{ match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))true(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "constant.language.boolean.true.js.jsx" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))false(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "constant.language.boolean.false.js.jsx" }] }, brackets: { patterns: [{ begin: "{", end: "}|(?=\\*/)", patterns: [{ include: "#brackets" }] }, { begin: "\\[", end: "\\]|(?=\\*/)", patterns: [{ include: "#brackets" }] }] }, cast: { patterns: [{ include: "#jsx" }] }, "class-declaration": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(?:(abstract)\\s+)?\\b(class)\\b(?=\\s+|/[/*])", beginCaptures: { 1: { name: "keyword.control.export.js.jsx" }, 2: { name: "storage.modifier.js.jsx" }, 3: { name: "storage.modifier.js.jsx" }, 4: { name: "storage.type.class.js.jsx" } }, end: "(?<=\\})", name: "meta.class.js.jsx", patterns: [{ include: "#class-declaration-or-expression-patterns" }] }, "class-declaration-or-expression-patterns": { patterns: [{ include: "#comment" }, { include: "#class-or-interface-heritage" }, { captures: { 0: { name: "entity.name.type.class.js.jsx" } }, match: "[_$[:alpha:]][_$[:alnum:]]*" }, { include: "#type-parameters" }, { include: "#class-or-interface-body" }] }, "class-expression": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(abstract)\\s+)?(class)\\b(?=\\s+|[<{]|\\/[\\/*])", beginCaptures: { 1: { name: "storage.modifier.js.jsx" }, 2: { name: "storage.type.class.js.jsx" } }, end: "(?<=\\})", name: "meta.class.js.jsx", patterns: [{ include: "#class-declaration-or-expression-patterns" }] }, "class-or-interface-body": { begin: "\\{", beginCaptures: { 0: { name: "punctuation.definition.block.js.jsx" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.block.js.jsx" } }, patterns: [{ include: "#comment" }, { include: "#decorator" }, { begin: "(?<=:)\\s*", end: "(?=\\s|[;),}\\]:\\-\\+]|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))", patterns: [{ include: "#expression" }] }, { include: "#method-declaration" }, { include: "#indexer-declaration" }, { include: "#field-declaration" }, { include: "#string" }, { include: "#type-annotation" }, { include: "#variable-initializer" }, { include: "#access-modifier" }, { include: "#property-accessor" }, { include: "#async-modifier" }, { include: "#after-operator-block-as-object-literal" }, { include: "#decl-block" }, { include: "#expression" }, { include: "#punctuation-comma" }, { include: "#punctuation-semicolon" }] }, "class-or-interface-heritage": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(extends|implements)\\b)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", beginCaptures: { 1: { name: "storage.modifier.js.jsx" } }, end: "(?=\\{)", patterns: [{ include: "#comment" }, { include: "#class-or-interface-heritage" }, { include: "#type-parameters" }, { include: "#expressionWithoutIdentifiers" }, { captures: { 1: { name: "entity.name.type.module.js.jsx" }, 2: { name: "punctuation.accessor.js.jsx" }, 3: { name: "punctuation.accessor.optional.js.jsx" } }, match: "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))(?=\\s*[_$[:alpha:]][_$[:alnum:]]*(\\s*\\??\\.\\s*[_$[:alpha:]][_$[:alnum:]]*)*\\s*)" }, { captures: { 1: { name: "entity.other.inherited-class.js.jsx" } }, match: "([_$[:alpha:]][_$[:alnum:]]*)" }, { include: "#expressionPunctuations" }] }, comment: { patterns: [{ begin: "/\\*\\*(?!/)", beginCaptures: { 0: { name: "punctuation.definition.comment.js.jsx" } }, end: "\\*/", endCaptures: { 0: { name: "punctuation.definition.comment.js.jsx" } }, name: "comment.block.documentation.js.jsx", patterns: [{ include: "#docblock" }] }, { begin: "(/\\*)(?:\\s*((@)internal)(?=\\s|(\\*/)))?", beginCaptures: { 1: { name: "punctuation.definition.comment.js.jsx" }, 2: { name: "storage.type.internaldeclaration.js.jsx" }, 3: { name: "punctuation.decorator.internaldeclaration.js.jsx" } }, end: "\\*/", endCaptures: { 0: { name: "punctuation.definition.comment.js.jsx" } }, name: "comment.block.js.jsx" }, { begin: "(^[ \\t]+)?((//)(?:\\s*((@)internal)(?=\\s|$))?)", beginCaptures: { 1: { name: "punctuation.whitespace.comment.leading.js.jsx" }, 2: { name: "comment.line.double-slash.js.jsx" }, 3: { name: "punctuation.definition.comment.js.jsx" }, 4: { name: "storage.type.internaldeclaration.js.jsx" }, 5: { name: "punctuation.decorator.internaldeclaration.js.jsx" } }, contentName: "comment.line.double-slash.js.jsx", end: "(?=$)" }] }, "control-statement": { patterns: [{ include: "#switch-statement" }, { include: "#for-loop" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(catch|finally|throw|try)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.control.trycatch.js.jsx" }, { captures: { 1: { name: "keyword.control.loop.js.jsx" }, 2: { name: "entity.name.label.js.jsx" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(break|continue|goto)\\s+([_$[:alpha:]][_$[:alnum:]]*)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(break|continue|do|goto|while)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.control.loop.js.jsx" }, { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(return)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", beginCaptures: { 0: { name: "keyword.control.flow.js.jsx" } }, end: "(?=[;}]|$|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))", patterns: [{ include: "#expression" }] }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(case|default|switch)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.control.switch.js.jsx" }, { include: "#if-statement" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(else|if)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.control.conditional.js.jsx" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(with)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.control.with.js.jsx" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(package)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.control.js.jsx" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(debugger)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.other.debugger.js.jsx" }] }, "decl-block": { begin: "\\{", beginCaptures: { 0: { name: "punctuation.definition.block.js.jsx" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.block.js.jsx" } }, name: "meta.block.js.jsx", patterns: [{ include: "#statements" }] }, declaration: { patterns: [{ include: "#decorator" }, { include: "#var-expr" }, { include: "#function-declaration" }, { include: "#class-declaration" }, { include: "#interface-declaration" }, { include: "#enum-declaration" }, { include: "#namespace-declaration" }, { include: "#type-alias-declaration" }, { include: "#import-equals-declaration" }, { include: "#import-declaration" }, { include: "#export-declaration" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(declare|export)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "storage.modifier.js.jsx" }] }, decorator: { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))\\@", beginCaptures: { 0: { name: "punctuation.decorator.js.jsx" } }, end: "(?=\\s)", name: "meta.decorator.js.jsx", patterns: [{ include: "#expression" }] }, "destructuring-const": { patterns: [{ begin: "(?<!=|:|^of|[^\\._$[:alnum:]]of|^in|[^\\._$[:alnum:]]in)\\s*(?=\\{)", end: "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))", name: "meta.object-binding-pattern-variable.js.jsx", patterns: [{ include: "#object-binding-pattern-const" }, { include: "#type-annotation" }, { include: "#comment" }] }, { begin: "(?<!=|:|^of|[^\\._$[:alnum:]]of|^in|[^\\._$[:alnum:]]in)\\s*(?=\\[)", end: "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))", name: "meta.array-binding-pattern-variable.js.jsx", patterns: [{ include: "#array-binding-pattern-const" }, { include: "#type-annotation" }, { include: "#comment" }] }] }, "destructuring-parameter": { patterns: [{ begin: "(?<!=|:)\\s*(?:(\\.\\.\\.)\\s*)?(\\{)", beginCaptures: { 1: { name: "keyword.operator.rest.js.jsx" }, 2: { name: "punctuation.definition.binding-pattern.object.js.jsx" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.binding-pattern.object.js.jsx" } }, name: "meta.parameter.object-binding-pattern.js.jsx", patterns: [{ include: "#parameter-object-binding-element" }] }, { begin: "(?<!=|:)\\s*(?:(\\.\\.\\.)\\s*)?(\\[)", beginCaptures: { 1: { name: "keyword.operator.rest.js.jsx" }, 2: { name: "punctuation.definition.binding-pattern.array.js.jsx" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.binding-pattern.array.js.jsx" } }, name: "meta.paramter.array-binding-pattern.js.jsx", patterns: [{ include: "#parameter-binding-element" }, { include: "#punctuation-comma" }] }] }, "destructuring-parameter-rest": { captures: { 1: { name: "keyword.operator.rest.js.jsx" }, 2: { name: "variable.parameter.js.jsx" } }, match: "(?:(\\.\\.\\.)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)" }, "destructuring-variable": { patterns: [{ begin: "(?<!=|:|^of|[^\\._$[:alnum:]]of|^in|[^\\._$[:alnum:]]in)\\s*(?=\\{)", end: "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))", name: "meta.object-binding-pattern-variable.js.jsx", patterns: [{ include: "#object-binding-pattern" }, { include: "#type-annotation" }, { include: "#comment" }] }, { begin: "(?<!=|:|^of|[^\\._$[:alnum:]]of|^in|[^\\._$[:alnum:]]in)\\s*(?=\\[)", end: "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))", name: "meta.array-binding-pattern-variable.js.jsx", patterns: [{ include: "#array-binding-pattern" }, { include: "#type-annotation" }, { include: "#comment" }] }] }, "destructuring-variable-rest": { captures: { 1: { name: "keyword.operator.rest.js.jsx" }, 2: { name: "meta.definition.variable.js.jsx variable.other.readwrite.js.jsx" } }, match: "(?:(\\.\\.\\.)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)" }, "destructuring-variable-rest-const": { captures: { 1: { name: "keyword.operator.rest.js.jsx" }, 2: { name: "meta.definition.variable.js.jsx variable.other.constant.js.jsx" } }, match: "(?:(\\.\\.\\.)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)" }, directives: { begin: "^(///)\\s*(?=<(reference|amd-dependency|amd-module)(\\s+(path|types|no-default-lib|lib|name|resolution-mode)\\s*=\\s*((\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)))+\\s*/>\\s*$)", beginCaptures: { 1: { name: "punctuation.definition.comment.js.jsx" } }, end: "(?=$)", name: "comment.line.triple-slash.directive.js.jsx", patterns: [{ begin: "(<)(reference|amd-dependency|amd-module)", beginCaptures: { 1: { name: "punctuation.definition.tag.directive.js.jsx" }, 2: { name: "entity.name.tag.directive.js.jsx" } }, end: "/>", endCaptures: { 0: { name: "punctuation.definition.tag.directive.js.jsx" } }, name: "meta.tag.js.jsx", patterns: [{ match: "path|types|no-default-lib|lib|name|resolution-mode", name: "entity.other.attribute-name.directive.js.jsx" }, { match: "=", name: "keyword.operator.assignment.js.jsx" }, { include: "#string" }] }] }, docblock: { patterns: [{ captures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" }, 3: { name: "constant.language.access-type.jsdoc" } }, match: `(?x)
((@)(?:access|api))
\\s+
(private|protected|public)
\\b` }, { captures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" }, 3: { name: "entity.name.type.instance.jsdoc" }, 4: { name: "punctuation.definition.bracket.angle.begin.jsdoc" }, 5: { name: "constant.other.email.link.underline.jsdoc" }, 6: { name: "punctuation.definition.bracket.angle.end.jsdoc" } }, match: `(?x)
((@)author)
\\s+
(
[^@\\s<>*/]
(?:[^@<>*/]|\\*[^/])*
)
(?:
\\s*
(<)
([^>\\s]+)
(>)
)?` }, { captures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" }, 3: { name: "entity.name.type.instance.jsdoc" }, 4: { name: "keyword.operator.control.jsdoc" }, 5: { name: "entity.name.type.instance.jsdoc" } }, match: `(?x)
((@)borrows) \\s+
((?:[^@\\s*/]|\\*[^/])+)
\\s+ (as) \\s+
((?:[^@\\s*/]|\\*[^/])+)` }, { begin: "((@)example)\\s+", beginCaptures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" } }, end: "(?=@|\\*/)", name: "meta.example.jsdoc", patterns: [{ match: "^\\s\\*\\s+" }, { begin: "\\G(<)caption(>)", beginCaptures: { 0: { name: "entity.name.tag.inline.jsdoc" }, 1: { name: "punctuation.definition.bracket.angle.begin.jsdoc" }, 2: { name: "punctuation.definition.bracket.angle.end.jsdoc" } }, contentName: "constant.other.description.jsdoc", end: "(</)caption(>)|(?=\\*/)", endCaptures: { 0: { name: "entity.name.tag.inline.jsdoc" }, 1: { name: "punctuation.definition.bracket.angle.begin.jsdoc" }, 2: { name: "punctuation.definition.bracket.angle.end.jsdoc" } } }, { captures: { 0: { name: "source.embedded.js.jsx" } }, match: "[^\\s@*](?:[^*]|\\*[^/])*" }] }, { captures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" }, 3: { name: "constant.language.symbol-type.jsdoc" } }, match: "(?x) ((@)kind) \\s+ (class|constant|event|external|file|function|member|mixin|module|namespace|typedef) \\b" }, { captures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" }, 3: { name: "variable.other.link.underline.jsdoc" }, 4: { name: "entity.name.type.instance.jsdoc" } }, match: `(?x)
((@)see)
\\s+
(?:

(
(?=https?://)
(?:[^\\s*]|\\*[^/])+
)
|

(
(?!

https?://
|

(?:\\[[^\\[\\]]*\\])?
{@(?:link|linkcode|linkplain|tutorial)\\b
)

(?:[^@\\s*/]|\\*[^/])+
)
)` }, { captures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" }, 3: { name: "variable.other.jsdoc" } }, match: `(?x)
((@)template)
\\s+
# One or more valid identifiers
(
[A-Za-z_$]
[\\w$.\\[\\]]*
(?:
\\s* , \\s*
[A-Za-z_$]
[\\w$.\\[\\]]*
)*
)` }, { begin: "(?x)((@)template)\\s+(?={)", beginCaptures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" } }, end: "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])", patterns: [{ include: "#jsdoctype" }, { match: "([A-Za-z_$][\\w$.\\[\\]]*)", name: "variable.other.jsdoc" }] }, { captures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" }, 3: { name: "variable.other.jsdoc" } }, match: `(?x)
(
(@)
(?:arg|argument|const|constant|member|namespace|param|var)
)
\\s+
(
[A-Za-z_$]
[\\w$.\\[\\]]*
)` }, { begin: "((@)typedef)\\s+(?={)", beginCaptures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" } }, end: "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])", patterns: [{ include: "#jsdoctype" }, { match: "(?:[^@\\s*/]|\\*[^/])+", name: "entity.name.type.instance.jsdoc" }] }, { begin: "((@)(?:arg|argument|const|constant|member|namespace|param|prop|property|var))\\s+(?={)", beginCaptures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" } }, end: "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])", patterns: [{ include: "#jsdoctype" }, { match: "([A-Za-z_$][\\w$.\\[\\]]*)", name: "variable.other.jsdoc" }, { captures: { 1: { name: "punctuation.definition.optional-value.begin.bracket.square.jsdoc" }, 2: { name: "keyword.operator.assignment.jsdoc" }, 3: { name: "source.embedded.js.jsx" }, 4: { name: "punctuation.definition.optional-value.end.bracket.square.jsdoc" }, 5: { name: "invalid.illegal.syntax.jsdoc" } }, match: `(?x)
(\\[)\\s*
[\\w$]+
(?:
(?:\\[\\])?
\\.
[\\w$]+
)*
(?:
\\s*
(=)
\\s*
(

(?>
"(?:(?:\\*(?!/))|(?:\\\\(?!"))|[^*\\\\])*?" |
'(?:(?:\\*(?!/))|(?:\\\\(?!'))|[^*\\\\])*?' |
\\[ (?:(?:\\*(?!/))|[^*])*? \\] |
(?:(?:\\*(?!/))|\\s(?!\\s*\\])|\\[.*?(?:\\]|(?=\\*/))|[^*\\s\\[\\]])*
)*
)
)?
\\s*(?:(\\])((?:[^*\\s]|\\*[^\\s/])+)?|(?=\\*/))`, name: "variable.other.jsdoc" }] }, { begin: `(?x)
(
(@)
(?:define|enum|exception|export|extends|lends|implements|modifies
|namespace|private|protected|returns?|satisfies|suppress|this|throws|type
|yields?)
)
\\s+(?={)`, beginCaptures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" } }, end: "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])", patterns: [{ include: "#jsdoctype" }] }, { captures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" }, 3: { name: "entity.name.type.instance.jsdoc" } }, match: `(?x)
(
(@)
(?:alias|augments|callback|constructs|emits|event|fires|exports?
|extends|external|function|func|host|lends|listens|interface|memberof!?
|method|module|mixes|mixin|name|requires|see|this|typedef|uses)
)
\\s+
(
(?:
[^{}@\\s*] | \\*[^/]
)+
)` }, { begin: `((@)(?:default(?:value)?|license|version))\\s+(([''"]))`, beginCaptures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" }, 3: { name: "variable.other.jsdoc" }, 4: { name: "punctuation.definition.string.begin.jsdoc" } }, contentName: "variable.other.jsdoc", end: "(\\3)|(?=$|\\*/)", endCaptures: { 0: { name: "variable.other.jsdoc" }, 1: { name: "punctuation.definition.string.end.jsdoc" } } }, { captures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" }, 3: { name: "variable.other.jsdoc" } }, match: "((@)(?:default(?:value)?|license|tutorial|variation|version))\\s+([^\\s*]+)" }, { captures: { 1: { name: "punctuation.definition.block.tag.jsdoc" } }, match: "(?x) (@) (?:abstract|access|alias|api|arg|argument|async|attribute|augments|author|beta|borrows|bubbles |callback|chainable|class|classdesc|code|config|const|constant|constructor|constructs|copyright |default|defaultvalue|define|deprecated|desc|description|dict|emits|enum|event|example|exception |exports?|extends|extension(?:_?for)?|external|externs|file|fileoverview|final|fires|for|func |function|generator|global|hideconstructor|host|ignore|implements|implicitCast|inherit[Dd]oc |inner|instance|interface|internal|kind|lends|license|listens|main|member|memberof!?|method |mixes|mixins?|modifies|module|name|namespace|noalias|nocollapse|nocompile|nosideeffects |override|overview|package|param|polymer(?:Behavior)?|preserve|private|prop|property|protected |public|read[Oo]nly|record|require[ds]|returns?|see|since|static|struct|submodule|summary |suppress|template|this|throws|todo|tutorial|type|typedef|unrestricted|uses|var|variation |version|virtual|writeOnce|yields?) \\b", name: "storage.type.class.jsdoc" }, { include: "#inline-tags" }, { captures: { 1: { name: "storage.type.class.jsdoc" }, 2: { name: "punctuation.definition.block.tag.jsdoc" } }, match: "((@)(?:[_$[:alpha:]][_$[:alnum:]]*))(?=\\s+)" }] }, "enum-declaration": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?(?:\\b(const)\\s+)?\\b(enum)\\s+([_$[:alpha:]][_$[:alnum:]]*)", beginCaptures: { 1: { name: "keyword.control.export.js.jsx" }, 2: { name: "storage.modifier.js.jsx" }, 3: { name: "storage.modifier.js.jsx" }, 4: { name: "storage.type.enum.js.jsx" }, 5: { name: "entity.name.type.enum.js.jsx" } }, end: "(?<=\\})", name: "meta.enum.declaration.js.jsx", patterns: [{ include: "#comment" }, { begin: "\\{", beginCaptures: { 0: { name: "punctuation.definition.block.js.jsx" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.block.js.jsx" } }, patterns: [{ include: "#comment" }, { begin: "([_$[:alpha:]][_$[:alnum:]]*)", beginCaptures: { 0: { name: "variable.other.enummember.js.jsx" } }, end: "(?=,|\\}|$)", patterns: [{ include: "#comment" }, { include: "#variable-initializer" }] }, { begin: "(?=((\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\])))", end: "(?=,|\\}|$)", patterns: [{ include: "#string" }, { include: "#array-literal" }, { include: "#comment" }, { include: "#variable-initializer" }] }, { include: "#punctuation-comma" }] }] }, "export-declaration": { patterns: [{ captures: { 1: { name: "keyword.control.export.js.jsx" }, 2: { name: "keyword.control.as.js.jsx" }, 3: { name: "storage.type.namespace.js.jsx" }, 4: { name: "entity.name.type.module.js.jsx" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(export)\\s+(as)\\s+(namespace)\\s+([_$[:alpha:]][_$[:alnum:]]*)" }, { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(export)(?:\\s+(type))?(?:(?:\\s*(=))|(?:\\s+(default)(?=\\s+)))", beginCaptures: { 1: { name: "keyword.control.export.js.jsx" }, 2: { name: "keyword.control.type.js.jsx" }, 3: { name: "keyword.operator.assignment.js.jsx" }, 4: { name: "keyword.control.default.js.jsx" } }, end: "(?=$|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))", name: "meta.export.default.js.jsx", patterns: [{ include: "#interface-declaration" }, { include: "#expression" }] }, { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(export)(?:\\s+(type))?\\b(?!(\\$)|(\\s*:))((?=\\s*[\\{*])|((?=\\s*[_$[:alpha:]][_$[:alnum:]]*(\\s|,))(?!\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b)))", beginCaptures: { 1: { name: "keyword.control.export.js.jsx" }, 2: { name: "keyword.control.type.js.jsx" } }, end: "(?=$|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))", name: "meta.export.js.jsx", patterns: [{ include: "#import-export-declaration" }] }] }, expression: { patterns: [{ include: "#expressionWithoutIdentifiers" }, { include: "#identifiers" }, { include: "#expressionPunctuations" }] }, "expression-inside-possibly-arrow-parens": { patterns: [{ include: "#expressionWithoutIdentifiers" }, { include: "#comment" }, { include: "#string" }, { include: "#decorator" }, { include: "#destructuring-parameter" }, { captures: { 1: { name: "storage.modifier.js.jsx" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(override|public|protected|private|readonly)\\s+(?=(override|public|protected|private|readonly)\\s+)" }, { captures: { 1: { name: "storage.modifier.js.jsx" }, 2: { name: "keyword.operator.rest.js.jsx" }, 3: { name: "entity.name.function.js.jsx variable.language.this.js.jsx" }, 4: { name: "entity.name.function.js.jsx" }, 5: { name: "keyword.operator.optional.js.jsx" } }, match: `(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(override|public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*(\\??)(?=\\s*
# function assignment |
(=\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |
(
[<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]
) |
# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
)) |
# typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>
(:\\s*(
(<) |
([(]\\s*(
([)]) |
(\\.\\.\\.) |
([_$[:alnum:]]+\\s*(
([:,?=])|
([)]\\s*=>)
))
))
)) |
(:\\s*(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Function(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |
(:\\s*((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))) |
(:\\s*(=>|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(<[^<>]*>)|[^<>(),=])+=\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |
(
[<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]
) |
# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
)))` }, { captures: { 1: { name: "storage.modifier.js.jsx" }, 2: { name: "keyword.operator.rest.js.jsx" }, 3: { name: "variable.parameter.js.jsx variable.language.this.js.jsx" }, 4: { name: "variable.parameter.js.jsx" }, 5: { name: "keyword.operator.optional.js.jsx" } }, match: "(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(override|public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*(\\??)(?=\\s*[:,]|$)" }, { include: "#type-annotation" }, { include: "#variable-initializer" }, { match: ",", name: "punctuation.separator.parameter.js.jsx" }, { include: "#identifiers" }, { include: "#expressionPunctuations" }] }, "expression-operators": { patterns: [{ match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(await)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.control.flow.js.jsx" }, { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(yield)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?=\\s*\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*\\*)", beginCaptures: { 1: { name: "keyword.control.flow.js.jsx" } }, end: "\\*", endCaptures: { 0: { name: "keyword.generator.asterisk.js.jsx" } }, patterns: [{ include: "#comment" }] }, { captures: { 1: { name: "keyword.control.flow.js.jsx" }, 2: { name: "keyword.generator.asterisk.js.jsx" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(yield)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?:\\s*(\\*))?" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))delete(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.operator.expression.delete.js.jsx" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))in(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?!\\()", name: "keyword.operator.expression.in.js.jsx" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))of(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?!\\()", name: "keyword.operator.expression.of.js.jsx" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))instanceof(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.operator.expression.instanceof.js.jsx" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))new(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.operator.new.js.jsx" }, { include: "#typeof-operator" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))void(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.operator.expression.void.js.jsx" }, { captures: { 1: { name: "keyword.control.as.js.jsx" }, 2: { name: "storage.modifier.js.jsx" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(as)\\s+(const)(?=\\s*($|[;,:})\\]]))" }, { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(as)|(satisfies))\\s+", beginCaptures: { 1: { name: "keyword.control.as.js.jsx" }, 2: { name: "keyword.control.satisfies.js.jsx" } }, end: "(?=^|[;),}\\]:?\\-\\+\\>]|\\|\\||\\&\\&|\\!\\=\\=|$|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(as|satisfies)\\s+)|(\\s+\\<))", patterns: [{ include: "#type" }] }, { match: "\\.\\.\\.", name: "keyword.operator.spread.js.jsx" }, { match: "\\*=|(?<!\\()/=|%=|\\+=|\\-=", name: "keyword.operator.assignment.compound.js.jsx" }, { match: "\\&=|\\^=|<<=|>>=|>>>=|\\|=", name: "keyword.operator.assignment.compound.bitwise.js.jsx" }, { match: "<<|>>>|>>", name: "keyword.operator.bitwise.shift.js.jsx" }, { match: "===|!==|==|!=", name: "keyword.operator.comparison.js.jsx" }, { match: "<=|>=|<>|<|>", name: "keyword.operator.relational.js.jsx" }, { captures: { 1: { name: "keyword.operator.logical.js.jsx" }, 2: { name: "keyword.operator.assignment.compound.js.jsx" }, 3: { name: "keyword.operator.arithmetic.js.jsx" } }, match: "(?<=[_$[:alnum:]])(\\!)\\s*(?:(/=)|(?:(/)(?![/*])))" }, { match: "\\!|&&|\\|\\||\\?\\?", name: "keyword.operator.logical.js.jsx" }, { match: "\\&|~|\\^|\\|", name: "keyword.operator.bitwise.js.jsx" }, { match: "\\=", name: "keyword.operator.assignment.js.jsx" }, { match: "--", name: "keyword.operator.decrement.js.jsx" }, { match: "\\+\\+", name: "keyword.operator.increment.js.jsx" }, { match: "%|\\*|/|-|\\+", name: "keyword.operator.arithmetic.js.jsx" }, { begin: "(?<=[_$[:alnum:])\\]])\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)+(?:(/=)|(?:(/)(?![/*]))))", end: "(?:(/=)|(?:(/)(?!\\*([^\\*]|(\\*[^\\/]))*\\*\\/)))", endCaptures: { 1: { name: "keyword.operator.assignment.compound.js.jsx" }, 2: { name: "keyword.operator.arithmetic.js.jsx" } }, patterns: [{ include: "#comment" }] }, { captures: { 1: { name: "keyword.operator.assignment.compound.js.jsx" }, 2: { name: "keyword.operator.arithmetic.js.jsx" } }, match: "(?<=[_$[:alnum:])\\]])\\s*(?:(/=)|(?:(/)(?![/*])))" }] }, expressionPunctuations: { patterns: [{ include: "#punctuation-comma" }, { include: "#punctuation-accessor" }] }, expressionWithoutIdentifiers: { patterns: [{ include: "#jsx" }, { include: "#string" }, { include: "#regex" }, { include: "#comment" }, { include: "#function-expression" }, { include: "#class-expression" }, { include: "#arrow-function" }, { include: "#paren-expression-possibly-arrow" }, { include: "#cast" }, { include: "#ternary-expression" }, { include: "#new-expr" }, { include: "#instanceof-expr" }, { include: "#object-literal" }, { include: "#expression-operators" }, { include: "#function-call" }, { include: "#literal" }, { include: "#support-objects" }, { include: "#paren-expression" }] }, "field-declaration": { begin: `(?x)(?<!\\()(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(readonly)\\s+)?(?=\\s*((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$))|(\\#?[_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(?:(?:(\\?)|(\\!))\\s*)?(=|:|;|,|\\}|$))`, beginCaptures: { 1: { name: "storage.modifier.js.jsx" } }, end: `(?x)(?=\\}|;|,|$|(^(?!\\s*((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$))|(\\#?[_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(?:(?:(\\?)|(\\!))\\s*)?(=|:|;|,|$))))|(?<=\\})`, name: "meta.field.declaration.js.jsx", patterns: [{ include: "#variable-initializer" }, { include: "#type-annotation" }, { include: "#string" }, { include: "#array-literal" }, { include: "#numeric-literal" }, { include: "#comment" }, { captures: { 1: { name: "meta.definition.property.js.jsx entity.name.function.js.jsx" }, 2: { name: "keyword.operator.optional.js.jsx" }, 3: { name: "keyword.operator.definiteassignment.js.jsx" } }, match: `(?x)(\\#?[_$[:alpha:]][_$[:alnum:]]*)(?:(\\?)|(\\!))?(?=\\s*\\s*
# function assignment |
(=\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |
(
[<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]
) |
# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
)) |
# typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>
(:\\s*(
(<) |
([(]\\s*(
([)]) |
(\\.\\.\\.) |
([_$[:alnum:]]+\\s*(
([:,?=])|
([)]\\s*=>)
))
))
)) |
(:\\s*(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Function(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |
(:\\s*((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))) |
(:\\s*(=>|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(<[^<>]*>)|[^<>(),=])+=\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |
(
[<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]
) |
# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
)))` }, { match: "\\#?[_$[:alpha:]][_$[:alnum:]]*", name: "meta.definition.property.js.jsx variable.object.property.js.jsx" }, { match: "\\?", name: "keyword.operator.optional.js.jsx" }, { match: "\\!", name: "keyword.operator.definiteassignment.js.jsx" }] }, "for-loop": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))for(?=((\\s+|(\\s*\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*))await)?\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)?(\\())", beginCaptures: { 0: { name: "keyword.control.loop.js.jsx" } }, end: "(?<=\\))", patterns: [{ include: "#comment" }, { match: "await", name: "keyword.control.loop.js.jsx" }, { begin: "\\(", beginCaptures: { 0: { name: "meta.brace.round.js.jsx" } }, end: "\\)", endCaptures: { 0: { name: "meta.brace.round.js.jsx" } }, patterns: [{ include: "#var-expr" }, { include: "#expression" }, { include: "#punctuation-semicolon" }] }] }, "function-body": { patterns: [{ include: "#comment" }, { include: "#type-parameters" }, { include: "#function-parameters" }, { include: "#return-type" }, { include: "#type-function-return-type" }, { include: "#decl-block" }, { match: "\\*", name: "keyword.generator.asterisk.js.jsx" }] }, "function-call": { patterns: [{ begin: "(?=(((([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\\)]))\\s*(?:(\\?\\.\\s*)|(\\!))?((<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?\\())", end: "(?<=\\))(?!(((([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\\)]))\\s*(?:(\\?\\.\\s*)|(\\!))?((<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?\\())", patterns: [{ begin: "(?=(([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))", end: "(?=\\s*(?:(\\?\\.\\s*)|(\\!))?((<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?\\())", name: "meta.function-call.js.jsx", patterns: [{ include: "#function-call-target" }] }, { include: "#comment" }, { include: "#function-call-optionals" }, { include: "#type-arguments" }, { include: "#paren-expression" }] }, { begin: "(?=(((([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\\)]))(<\\s*[\\{\\[\\(]\\s*$))", end: "(?<=\\>)(?!(((([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\\)]))(<\\s*[\\{\\[\\(]\\s*$))", patterns: [{ begin: "(?=(([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))", end: "(?=(<\\s*[\\{\\[\\(]\\s*$))", name: "meta.function-call.js.jsx", patterns: [{ include: "#function-call-target" }] }, { include: "#comment" }, { include: "#function-call-optionals" }, { include: "#type-arguments" }] }] }, "function-call-optionals": { patterns: [{ match: "\\?\\.", name: "meta.function-call.js.jsx punctuation.accessor.optional.js.jsx" }, { match: "\\!", name: "meta.function-call.js.jsx keyword.operator.definiteassignment.js.jsx" }] }, "function-call-target": { patterns: [{ include: "#support-function-call-identifiers" }, { match: "(\\#?[_$[:alpha:]][_$[:alnum:]]*)", name: "entity.name.function.js.jsx" }] }, "function-declaration": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?(?:(async)\\s+)?(function\\b)(?:\\s*(\\*))?(?:(?:\\s+|(?<=\\*))([_$[:alpha:]][_$[:alnum:]]*))?\\s*", beginCaptures: { 1: { name: "keyword.control.export.js.jsx" }, 2: { name: "storage.modifier.js.jsx" }, 3: { name: "storage.modifier.async.js.jsx" }, 4: { name: "storage.type.function.js.jsx" }, 5: { name: "keyword.generator.asterisk.js.jsx" }, 6: { name: "meta.definition.function.js.jsx entity.name.function.js.jsx" } }, end: "(?=;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))|(?<=\\})", name: "meta.function.js.jsx", patterns: [{ include: "#function-name" }, { include: "#function-body" }] }, "function-expression": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(async)\\s+)?(function\\b)(?:\\s*(\\*))?(?:(?:\\s+|(?<=\\*))([_$[:alpha:]][_$[:alnum:]]*))?\\s*", beginCaptures: { 1: { name: "storage.modifier.async.js.jsx" }, 2: { name: "storage.type.function.js.jsx" }, 3: { name: "keyword.generator.asterisk.js.jsx" }, 4: { name: "meta.definition.function.js.jsx entity.name.function.js.jsx" } }, end: "(?=;)|(?<=\\})", name: "meta.function.expression.js.jsx", patterns: [{ include: "#function-name" }, { include: "#single-line-comment-consuming-line-ending" }, { include: "#function-body" }] }, "function-name": { match: "[_$[:alpha:]][_$[:alnum:]]*", name: "meta.definition.function.js.jsx entity.name.function.js.jsx" }, "function-parameters": { begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.parameters.begin.js.jsx" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.parameters.end.js.jsx" } }, name: "meta.parameters.js.jsx", patterns: [{ include: "#function-parameters-body" }] }, "function-parameters-body": { patterns: [{ include: "#comment" }, { include: "#string" }, { include: "#decorator" }, { include: "#destructuring-parameter" }, { include: "#parameter-name" }, { include: "#parameter-type-annotation" }, { include: "#variable-initializer" }, { match: ",", name: "punctuation.separator.parameter.js.jsx" }] }, identifiers: { patterns: [{ include: "#object-identifiers" }, { captures: { 1: { name: "punctuation.accessor.js.jsx" }, 2: { name: "punctuation.accessor.optional.js.jsx" }, 3: { name: "entity.name.function.js.jsx" } }, match: `(?x)(?:(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*)?([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*=\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |
(
[<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]
) |
# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
))` }, { captures: { 1: { name: "punctuation.accessor.js.jsx" }, 2: { name: "punctuation.accessor.optional.js.jsx" }, 3: { name: "variable.other.constant.property.js.jsx" } }, match: "(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(\\#?[[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])" }, { captures: { 1: { name: "punctuation.accessor.js.jsx" }, 2: { name: "punctuation.accessor.optional.js.jsx" }, 3: { name: "variable.other.property.js.jsx" } }, match: "(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*)" }, { match: "([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])", name: "variable.other.constant.js.jsx" }, { match: "[_$[:alpha:]][_$[:alnum:]]*", name: "variable.other.readwrite.js.jsx" }] }, "if-statement": { patterns: [{ begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?=\\bif\\s*(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))\\s*(?!\\{))", end: "(?=;|$|\\})", patterns: [{ include: "#comment" }, { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(if)\\s*(\\()", beginCaptures: { 1: { name: "keyword.control.conditional.js.jsx" }, 2: { name: "meta.brace.round.js.jsx" } }, end: "\\)", endCaptures: { 0: { name: "meta.brace.round.js.jsx" } }, patterns: [{ include: "#expression" }] }, { begin: "(?<=\\))\\s*\\/(?![\\/*])(?=(?:[^\\/\\\\\\[]|\\\\.|\\[([^\\]\\\\]|\\\\.)*\\])+\\/([dgimsuy]+|(?![\\/\\*])|(?=\\/\\*))(?!\\s*[a-zA-Z0-9_$]))", beginCaptures: { 0: { name: "punctuation.definition.string.begin.js.jsx" } }, end: "(/)([dgimsuy]*)", endCaptures: { 1: { name: "punctuation.definition.string.end.js.jsx" }, 2: { name: "keyword.other.js.jsx" } }, name: "string.regexp.js.jsx", patterns: [{ include: "#regexp" }] }, { include: "#statements" }] }] }, "import-declaration": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(import)(?:\\s+(type)(?!\\s+from))?(?!\\s*[:\\(])(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", beginCaptures: { 1: { name: "keyword.control.export.js.jsx" }, 2: { name: "storage.modifier.js.jsx" }, 3: { name: "keyword.control.import.js.jsx" }, 4: { name: "keyword.control.type.js.jsx" } }, end: "(?<!^import|[^\\._$[:alnum:]]import)(?=;|$|^)", name: "meta.import.js.jsx", patterns: [{ include: "#single-line-comment-consuming-line-ending" }, { include: "#comment" }, { include: "#string" }, { begin: `(?<=^import|[^\\._$[:alnum:]]import)(?!\\s*["'])`, end: "\\bfrom\\b", endCaptures: { 0: { name: "keyword.control.from.js.jsx" } }, patterns: [{ include: "#import-export-declaration" }] }, { include: "#import-export-declaration" }] }, "import-equals-declaration": { patterns: [{ begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(import)(?:\\s+(type))?\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*(=)\\s*(require)\\s*(\\()", beginCaptures: { 1: { name: "keyword.control.export.js.jsx" }, 2: { name: "storage.modifier.js.jsx" }, 3: { name: "keyword.control.import.js.jsx" }, 4: { name: "keyword.control.type.js.jsx" }, 5: { name: "variable.other.readwrite.alias.js.jsx" }, 6: { name: "keyword.operator.assignment.js.jsx" }, 7: { name: "keyword.control.require.js.jsx" }, 8: { name: "meta.brace.round.js.jsx" } }, end: "\\)", endCaptures: { 0: { name: "meta.brace.round.js.jsx" } }, name: "meta.import-equals.external.js.jsx", patterns: [{ include: "#comment" }, { include: "#string" }] }, { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(import)(?:\\s+(type))?\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*(=)\\s*(?!require\\b)", beginCaptures: { 1: { name: "keyword.control.export.js.jsx" }, 2: { name: "storage.modifier.js.jsx" }, 3: { name: "keyword.control.import.js.jsx" }, 4: { name: "keyword.control.type.js.jsx" }, 5: { name: "variable.other.readwrite.alias.js.jsx" }, 6: { name: "keyword.operator.assignment.js.jsx" } }, end: "(?=;|$|^)", name: "meta.import-equals.internal.js.jsx", patterns: [{ include: "#single-line-comment-consuming-line-ending" }, { include: "#comment" }, { captures: { 1: { name: "entity.name.type.module.js.jsx" }, 2: { name: "punctuation.accessor.js.jsx" }, 3: { name: "punctuation.accessor.optional.js.jsx" } }, match: "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))" }, { match: "([_$[:alpha:]][_$[:alnum:]]*)", name: "variable.other.readwrite.js.jsx" }] }] }, "import-export-assert-clause": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(with)|(assert))\\s*(\\{)", beginCaptures: { 1: { name: "keyword.control.with.js.jsx" }, 2: { name: "keyword.control.assert.js.jsx" }, 3: { name: "punctuation.definition.block.js.jsx" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.block.js.jsx" } }, patterns: [{ include: "#comment" }, { include: "#string" }, { match: "(?:[_$[:alpha:]][_$[:alnum:]]*)\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*:)", name: "meta.object-literal.key.js.jsx" }, { match: ":", name: "punctuation.separator.key-value.js.jsx" }] }, "import-export-block": { begin: "\\{", beginCaptures: { 0: { name: "punctuation.definition.block.js.jsx" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.block.js.jsx" } }, name: "meta.block.js.jsx", patterns: [{ include: "#import-export-clause" }] }, "import-export-clause": { patterns: [{ include: "#comment" }, { captures: { 1: { name: "keyword.control.type.js.jsx" }, 2: { name: "keyword.control.default.js.jsx" }, 3: { name: "constant.language.import-export-all.js.jsx" }, 4: { name: "variable.other.readwrite.js.jsx" }, 5: { name: "keyword.control.as.js.jsx" }, 6: { name: "keyword.control.default.js.jsx" }, 7: { name: "variable.other.readwrite.alias.js.jsx" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(?:(\\btype)\\s+)?(?:(\\bdefault)|(\\*)|(\\b[_$[:alpha:]][_$[:alnum:]]*)))\\s+(as)\\s+(?:(default(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))|([_$[:alpha:]][_$[:alnum:]]*))" }, { include: "#punctuation-comma" }, { match: "\\*", name: "constant.language.import-export-all.js.jsx" }, { match: "\\b(default)\\b", name: "keyword.control.default.js.jsx" }, { captures: { 1: { name: "keyword.control.type.js.jsx" }, 2: { name: "variable.other.readwrite.alias.js.jsx" } }, match: "(?:(\\btype)\\s+)?([_$[:alpha:]][_$[:alnum:]]*)" }] }, "import-export-declaration": { patterns: [{ include: "#comment" }, { include: "#string" }, { include: "#import-export-block" }, { match: "\\bfrom\\b", name: "keyword.control.from.js.jsx" }, { include: "#import-export-assert-clause" }, { include: "#import-export-clause" }] }, "indexer-declaration": { begin: "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(readonly)\\s*)?\\s*(\\[)\\s*([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=:)", beginCaptures: { 1: { name: "storage.modifier.js.jsx" }, 2: { name: "meta.brace.square.js.jsx" }, 3: { name: "variable.parameter.js.jsx" } }, end: "(\\])\\s*(\\?\\s*)?|$", endCaptures: { 1: { name: "meta.brace.square.js.jsx" }, 2: { name: "keyword.operator.optional.js.jsx" } }, name: "meta.indexer.declaration.js.jsx", patterns: [{ include: "#type-annotation" }] }, "indexer-mapped-type-declaration": { begin: "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))([+-])?(readonly)\\s*)?\\s*(\\[)\\s*([_$[:alpha:]][_$[:alnum:]]*)\\s+(in)\\s+", beginCaptures: { 1: { name: "keyword.operator.type.modifier.js.jsx" }, 2: { name: "storage.modifier.js.jsx" }, 3: { name: "meta.brace.square.js.jsx" }, 4: { name: "entity.name.type.js.jsx" }, 5: { name: "keyword.operator.expression.in.js.jsx" } }, end: "(\\])([+-])?\\s*(\\?\\s*)?|$", endCaptures: { 1: { name: "meta.brace.square.js.jsx" }, 2: { name: "keyword.operator.type.modifier.js.jsx" }, 3: { name: "keyword.operator.optional.js.jsx" } }, name: "meta.indexer.mappedtype.declaration.js.jsx", patterns: [{ captures: { 1: { name: "keyword.control.as.js.jsx" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(as)\\s+" }, { include: "#type" }] }, "inline-tags": { patterns: [{ captures: { 1: { name: "punctuation.definition.bracket.square.begin.jsdoc" }, 2: { name: "punctuation.definition.bracket.square.end.jsdoc" } }, match: "(\\[)[^\\]]+(\\])(?={@(?:link|linkcode|linkplain|tutorial))", name: "constant.other.description.jsdoc" }, { begin: "({)((@)(?:link(?:code|plain)?|tutorial))\\s*", beginCaptures: { 1: { name: "punctuation.definition.bracket.curly.begin.jsdoc" }, 2: { name: "storage.type.class.jsdoc" }, 3: { name: "punctuation.definition.inline.tag.jsdoc" } }, end: "}|(?=\\*/)", endCaptures: { 0: { name: "punctuation.definition.bracket.curly.end.jsdoc" } }, name: "entity.name.type.instance.jsdoc", patterns: [{ captures: { 1: { name: "variable.other.link.underline.jsdoc" }, 2: { name: "punctuation.separator.pipe.jsdoc" } }, match: "\\G((?=https?://)(?:[^|}\\s*]|\\*[/])+)(\\|)?" }, { captures: { 1: { name: "variable.other.description.jsdoc" }, 2: { name: "punctuation.separator.pipe.jsdoc" } }, match: "\\G((?:[^{}@\\s|*]|\\*[^/])+)(\\|)?" }] }] }, "instanceof-expr": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(instanceof)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", beginCaptures: { 1: { name: "keyword.operator.expression.instanceof.js.jsx" } }, end: "(?<=\\))|(?=[;),}\\]:?\\-\\+\\>]|\\|\\||\\&\\&|\\!\\=\\=|$|(===|!==|==|!=)|(([\\&\\~\\^\\|]\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s+instanceof(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))function((\\s+[_$[:alpha:]][_$[:alnum:]]*)|(\\s*[\\(]))))", patterns: [{ include: "#type" }] }, "interface-declaration": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(?:(abstract)\\s+)?\\b(interface)\\b(?=\\s+|/[/*])", beginCaptures: { 1: { name: "keyword.control.export.js.jsx" }, 2: { name: "storage.modifier.js.jsx" }, 3: { name: "storage.modifier.js.jsx" }, 4: { name: "storage.type.interface.js.jsx" } }, end: "(?<=\\})", name: "meta.interface.js.jsx", patterns: [{ include: "#comment" }, { include: "#class-or-interface-heritage" }, { captures: { 0: { name: "entity.name.type.interface.js.jsx" } }, match: "[_$[:alpha:]][_$[:alnum:]]*" }, { include: "#type-parameters" }, { include: "#class-or-interface-body" }] }, jsdoctype: { patterns: [{ begin: "\\G({)", beginCaptures: { 0: { name: "entity.name.type.instance.jsdoc" }, 1: { name: "punctuation.definition.bracket.curly.begin.jsdoc" } }, contentName: "entity.name.type.instance.jsdoc", end: "((}))\\s*|(?=\\*/)", endCaptures: { 1: { name: "entity.name.type.instance.jsdoc" }, 2: { name: "punctuation.definition.bracket.curly.end.jsdoc" } }, patterns: [{ include: "#brackets" }] }] }, jsx: { patterns: [{ include: "#jsx-tag-without-attributes-in-expression" }, { include: "#jsx-tag-in-expression" }] }, "jsx-children": { patterns: [{ include: "#jsx-tag-without-attributes" }, { include: "#jsx-tag" }, { include: "#jsx-evaluated-code" }, { include: "#jsx-entities" }] }, "jsx-entities": { patterns: [{ captures: { 1: { name: "punctuation.definition.entity.js.jsx" }, 3: { name: "punctuation.definition.entity.js.jsx" } }, match: "(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)", name: "constant.character.entity.js.jsx" }] }, "jsx-evaluated-code": { begin: "\\{", beginCaptures: { 0: { name: "punctuation.section.embedded.begin.js.jsx" } }, contentName: "meta.embedded.expression.js.jsx", end: "\\}", endCaptures: { 0: { name: "punctuation.section.embedded.end.js.jsx" } }, patterns: [{ include: "#expression" }] }, "jsx-string-double-quoted": { begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.js.jsx" } }, end: '"', endCaptures: { 0: { name: "punctuation.definition.string.end.js.jsx" } }, name: "string.quoted.double.js.jsx", patterns: [{ include: "#jsx-entities" }] }, "jsx-string-single-quoted": { begin: "'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.js.jsx" } }, end: "'", endCaptures: { 0: { name: "punctuation.definition.string.end.js.jsx" } }, name: "string.quoted.single.js.jsx", patterns: [{ include: "#jsx-entities" }] }, "jsx-tag": { begin: "(?=(<)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))(?=((<\\s*)|(\\s+))(?!\\?)|\\/?>))", end: "(/>)|(?:(</)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))?\\s*(>))", endCaptures: { 1: { name: "punctuation.definition.tag.end.js.jsx" }, 2: { name: "punctuation.definition.tag.begin.js.jsx" }, 3: { name: "entity.name.tag.namespace.js.jsx" }, 4: { name: "punctuation.separator.namespace.js.jsx" }, 5: { name: "entity.name.tag.js.jsx" }, 6: { name: "support.class.component.js.jsx" }, 7: { name: "punctuation.definition.tag.end.js.jsx" } }, name: "meta.tag.js.jsx", patterns: [{ begin: "(<)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))(?=((<\\s*)|(\\s+))(?!\\?)|\\/?>)", beginCaptures: { 1: { name: "punctuation.definition.tag.begin.js.jsx" }, 2: { name: "entity.name.tag.namespace.js.jsx" }, 3: { name: "punctuation.separator.namespace.js.jsx" }, 4: { name: "entity.name.tag.js.jsx" }, 5: { name: "support.class.component.js.jsx" } }, end: "(?=[/]?>)", patterns: [{ include: "#comment" }, { include: "#type-arguments" }, { include: "#jsx-tag-attributes" }] }, { begin: "(>)", beginCaptures: { 1: { name: "punctuation.definition.tag.end.js.jsx" } }, contentName: "meta.jsx.children.js.jsx", end: "(?=</)", patterns: [{ include: "#jsx-children" }] }] }, "jsx-tag-attribute-assignment": { match: `=(?=\\s*(?:'|"|{|/\\*|//|\\n))`, name: "keyword.operator.assignment.js.jsx" }, "jsx-tag-attribute-name": { captures: { 1: { name: "entity.other.attribute-name.namespace.js.jsx" }, 2: { name: "punctuation.separator.namespace.js.jsx" }, 3: { name: "entity.other.attribute-name.js.jsx" } }, match: `(?x)
\\s*
(?:([_$[:alpha:]][-_$[:alnum:].]*)(:))?
([_$[:alpha:]][-_$[:alnum:]]*)
(?=\\s|=|/?>|/\\*|//)` }, "jsx-tag-attributes": { begin: "\\s+", end: "(?=[/]?>)", name: "meta.tag.attributes.js.jsx", patterns: [{ include: "#comment" }, { include: "#jsx-tag-attribute-name" }, { include: "#jsx-tag-attribute-assignment" }, { include: "#jsx-string-double-quoted" }, { include: "#jsx-string-single-quoted" }, { include: "#jsx-evaluated-code" }, { include: "#jsx-tag-attributes-illegal" }] }, "jsx-tag-attributes-illegal": { match: "\\S+", name: "invalid.illegal.attribute.js.jsx" }, "jsx-tag-in-expression": { begin: `(?x)
(?<!\\+\\+|--)(?<=[({\\[,?=>:*]|&&|\\|\\||\\?|\\*\\/|^await|[^\\._$[:alnum:]]await|^return|[^\\._$[:alnum:]]return|^default|[^\\._$[:alnum:]]default|^yield|[^\\._$[:alnum:]]yield|^)\\s*
(?!<\\s*[_$[:alpha:]][_$[:alnum:]]*((\\s+extends\\s+[^=>])|,))
(?=(<)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))(?=((<\\s*)|(\\s+))(?!\\?)|\\/?>))`, end: "(?!(<)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))(?=((<\\s*)|(\\s+))(?!\\?)|\\/?>))", patterns: [{ include: "#jsx-tag" }] }, "jsx-tag-without-attributes": { begin: "(<)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))?\\s*(>)", beginCaptures: { 1: { name: "punctuation.definition.tag.begin.js.jsx" }, 2: { name: "entity.name.tag.namespace.js.jsx" }, 3: { name: "punctuation.separator.namespace.js.jsx" }, 4: { name: "entity.name.tag.js.jsx" }, 5: { name: "support.class.component.js.jsx" }, 6: { name: "punctuation.definition.tag.end.js.jsx" } }, contentName: "meta.jsx.children.js.jsx", end: "(</)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))?\\s*(>)", endCaptures: { 1: { name: "punctuation.definition.tag.begin.js.jsx" }, 2: { name: "entity.name.tag.namespace.js.jsx" }, 3: { name: "punctuation.separator.namespace.js.jsx" }, 4: { name: "entity.name.tag.js.jsx" }, 5: { name: "support.class.component.js.jsx" }, 6: { name: "punctuation.definition.tag.end.js.jsx" } }, name: "meta.tag.without-attributes.js.jsx", patterns: [{ include: "#jsx-children" }] }, "jsx-tag-without-attributes-in-expression": { begin: "(?<!\\+\\+|--)(?<=[({\\[,?=>:*]|&&|\\|\\||\\?|\\*\\/|^await|[^\\._$[:alnum:]]await|^return|[^\\._$[:alnum:]]return|^default|[^\\._$[:alnum:]]default|^yield|[^\\._$[:alnum:]]yield|^)\\s*(?=(<)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))?\\s*(>))", end: "(?!(<)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))?\\s*(>))", patterns: [{ include: "#jsx-tag-without-attributes" }] }, label: { patterns: [{ begin: "([_$[:alpha:]][_$[:alnum:]]*)\\s*(:)(?=\\s*\\{)", beginCaptures: { 1: { name: "entity.name.label.js.jsx" }, 2: { name: "punctuation.separator.label.js.jsx" } }, end: "(?<=\\})", patterns: [{ include: "#decl-block" }] }, { captures: { 1: { name: "entity.name.label.js.jsx" }, 2: { name: "punctuation.separator.label.js.jsx" } }, match: "([_$[:alpha:]][_$[:alnum:]]*)\\s*(:)" }] }, literal: { patterns: [{ include: "#numeric-literal" }, { include: "#boolean-literal" }, { include: "#null-literal" }, { include: "#undefined-literal" }, { include: "#numericConstant-literal" }, { include: "#array-literal" }, { include: "#this-literal" }, { include: "#super-literal" }] }, "method-declaration": { patterns: [{ begin: "(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(override)\\s+)?(?:\\b(public|private|protected)\\s+)?(?:\\b(abstract)\\s+)?(?:\\b(async)\\s+)?\\s*\\b(constructor)\\b(?!:)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", beginCaptures: { 1: { name: "storage.modifier.js.jsx" }, 2: { name: "storage.modifier.js.jsx" }, 3: { name: "storage.modifier.js.jsx" }, 4: { name: "storage.modifier.async.js.jsx" }, 5: { name: "storage.type.js.jsx" } }, end: "(?=\\}|;|,|$)|(?<=\\})", name: "meta.method.declaration.js.jsx", patterns: [{ include: "#method-declaration-name" }, { include: "#function-body" }] }, { begin: "(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(override)\\s+)?(?:\\b(public|private|protected)\\s+)?(?:\\b(abstract)\\s+)?(?:\\b(async)\\s+)?(?:(?:\\s*\\b(new)\\b(?!:)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))|(?:(\\*)\\s*)?)(?=\\s*((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*))?[\\(])", beginCaptures: { 1: { name: "storage.modifier.js.jsx" }, 2: { name: "storage.modifier.js.jsx" }, 3: { name: "storage.modifier.js.jsx" }, 4: { name: "storage.modifier.async.js.jsx" }, 5: { name: "keyword.operator.new.js.jsx" }, 6: { name: "keyword.generator.asterisk.js.jsx" } }, end: "(?=\\}|;|,|$)|(?<=\\})", name: "meta.method.declaration.js.jsx", patterns: [{ include: "#method-declaration-name" }, { include: "#function-body" }] }, { begin: `(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(override)\\s+)?(?:\\b(public|private|protected)\\s+)?(?:\\b(abstract)\\s+)?(?:\\b(async)\\s+)?(?:\\b(get|set)\\s+)?(?:(\\*)\\s*)?(?=\\s*(((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??))\\s*((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*))?[\\(])`, beginCaptures: { 1: { name: "storage.modifier.js.jsx" }, 2: { name: "storage.modifier.js.jsx" }, 3: { name: "storage.modifier.js.jsx" }, 4: { name: "storage.modifier.async.js.jsx" }, 5: { name: "storage.type.property.js.jsx" }, 6: { name: "keyword.generator.asterisk.js.jsx" } }, end: "(?=\\}|;|,|$)|(?<=\\})", name: "meta.method.declaration.js.jsx", patterns: [{ include: "#method-declaration-name" }, { include: "#function-body" }] }] }, "method-declaration-name": { begin: `(?x)(?=((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??)\\s*[\\(\\<])`, end: "(?=\\(|\\<)", patterns: [{ include: "#string" }, { include: "#array-literal" }, { include: "#numeric-literal" }, { match: "[_$[:alpha:]][_$[:alnum:]]*", name: "meta.definition.method.js.jsx entity.name.function.js.jsx" }, { match: "\\?", name: "keyword.operator.optional.js.jsx" }] }, "namespace-declaration": { begin: "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(namespace|module)\\s+(?=[_$[:alpha:]\"'`]))", beginCaptures: { 1: { name: "keyword.control.export.js.jsx" }, 2: { name: "storage.modifier.js.jsx" }, 3: { name: "storage.type.namespace.js.jsx" } }, end: "(?<=\\})|(?=;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))", name: "meta.namespace.declaration.js.jsx", patterns: [{ include: "#comment" }, { include: "#string" }, { match: "([_$[:alpha:]][_$[:alnum:]]*)", name: "entity.name.type.module.js.jsx" }, { include: "#punctuation-accessor" }, { include: "#decl-block" }] }, "new-expr": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(new)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", beginCaptures: { 1: { name: "keyword.operator.new.js.jsx" } }, end: "(?<=\\))|(?=[;),}\\]:?\\-\\+\\>]|\\|\\||\\&\\&|\\!\\=\\=|$|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))new(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))function((\\s+[_$[:alpha:]][_$[:alnum:]]*)|(\\s*[\\(]))))", name: "new.expr.js.jsx", patterns: [{ include: "#expression" }] }, "null-literal": { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))null(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "constant.language.null.js.jsx" }, "numeric-literal": { patterns: [{ captures: { 1: { name: "storage.type.numeric.bigint.js.jsx" } }, match: "\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$)", name: "constant.numeric.hex.js.jsx" }, { captures: { 1: { name: "storage.type.numeric.bigint.js.jsx" } }, match: "\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$)", name: "constant.numeric.binary.js.jsx" }, { captures: { 1: { name: "storage.type.numeric.bigint.js.jsx" } }, match: "\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$)", name: "constant.numeric.octal.js.jsx" }, { captures: { 0: { name: "constant.numeric.decimal.js.jsx" }, 1: { name: "meta.delimiter.decimal.period.js.jsx" }, 2: { name: "storage.type.numeric.bigint.js.jsx" }, 3: { name: "meta.delimiter.decimal.period.js.jsx" }, 4: { name: "storage.type.numeric.bigint.js.jsx" }, 5: { name: "meta.delimiter.decimal.period.js.jsx" }, 6: { name: "storage.type.numeric.bigint.js.jsx" }, 7: { name: "storage.type.numeric.bigint.js.jsx" }, 8: { name: "meta.delimiter.decimal.period.js.jsx" }, 9: { name: "storage.type.numeric.bigint.js.jsx" }, 10: { name: "meta.delimiter.decimal.period.js.jsx" }, 11: { name: "storage.type.numeric.bigint.js.jsx" }, 12: { name: "meta.delimiter.decimal.period.js.jsx" }, 13: { name: "storage.type.numeric.bigint.js.jsx" }, 14: { name: "storage.type.numeric.bigint.js.jsx" } }, match: `(?x)
(?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$)` }] }, "numericConstant-literal": { patterns: [{ match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))NaN(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "constant.language.nan.js.jsx" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Infinity(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "constant.language.infinity.js.jsx" }] }, "object-binding-element": { patterns: [{ include: "#comment" }, { begin: `(?x)(?=((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(:))`, end: "(?=,|\\})", patterns: [{ include: "#object-binding-element-propertyName" }, { include: "#binding-element" }] }, { include: "#object-binding-pattern" }, { include: "#destructuring-variable-rest" }, { include: "#variable-initializer" }, { include: "#punctuation-comma" }] }, "object-binding-element-const": { patterns: [{ include: "#comment" }, { begin: `(?x)(?=((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(:))`, end: "(?=,|\\})", patterns: [{ include: "#object-binding-element-propertyName" }, { include: "#binding-element-const" }] }, { include: "#object-binding-pattern-const" }, { include: "#destructuring-variable-rest-const" }, { include: "#variable-initializer" }, { include: "#punctuation-comma" }] }, "object-binding-element-propertyName": { begin: `(?x)(?=((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(:))`, end: "(:)", endCaptures: { 0: { name: "punctuation.destructuring.js.jsx" } }, patterns: [{ include: "#string" }, { include: "#array-literal" }, { include: "#numeric-literal" }, { match: "([_$[:alpha:]][_$[:alnum:]]*)", name: "variable.object.property.js.jsx" }] }, "object-binding-pattern": { begin: "(?:(\\.\\.\\.)\\s*)?(\\{)", beginCaptures: { 1: { name: "keyword.operator.rest.js.jsx" }, 2: { name: "punctuation.definition.binding-pattern.object.js.jsx" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.binding-pattern.object.js.jsx" } }, patterns: [{ include: "#object-binding-element" }] }, "object-binding-pattern-const": { begin: "(?:(\\.\\.\\.)\\s*)?(\\{)", beginCaptures: { 1: { name: "keyword.operator.rest.js.jsx" }, 2: { name: "punctuation.definition.binding-pattern.object.js.jsx" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.binding-pattern.object.js.jsx" } }, patterns: [{ include: "#object-binding-element-const" }] }, "object-identifiers": { patterns: [{ match: "([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*\\??\\.\\s*prototype\\b(?!\\$))", name: "support.class.js.jsx" }, { captures: { 1: { name: "punctuation.accessor.js.jsx" }, 2: { name: "punctuation.accessor.optional.js.jsx" }, 3: { name: "variable.other.constant.object.property.js.jsx" }, 4: { name: "variable.other.object.property.js.jsx" } }, match: `(?x)(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(?:
(\\#?[[:upper:]][_$[:digit:][:upper:]]*) |
(\\#?[_$[:alpha:]][_$[:alnum:]]*)
)(?=\\s*\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*)` }, { captures: { 1: { name: "variable.other.constant.object.js.jsx" }, 2: { name: "variable.other.object.js.jsx" } }, match: `(?x)(?:
([[:upper:]][_$[:digit:][:upper:]]*) |
([_$[:alpha:]][_$[:alnum:]]*)
)(?=\\s*\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*)` }] }, "object-literal": { begin: "\\{", beginCaptures: { 0: { name: "punctuation.definition.block.js.jsx" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.block.js.jsx" } }, name: "meta.objectliteral.js.jsx", patterns: [{ include: "#object-member" }] }, "object-literal-method-declaration": { begin: `(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(async)\\s+)?(?:\\b(get|set)\\s+)?(?:(\\*)\\s*)?(?=\\s*(((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??))\\s*((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*))?[\\(])`, beginCaptures: { 1: { name: "storage.modifier.async.js.jsx" }, 2: { name: "storage.type.property.js.jsx" }, 3: { name: "keyword.generator.asterisk.js.jsx" } }, end: "(?=\\}|;|,)|(?<=\\})", name: "meta.method.declaration.js.jsx", patterns: [{ include: "#method-declaration-name" }, { include: "#function-body" }, { begin: `(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(async)\\s+)?(?:\\b(get|set)\\s+)?(?:(\\*)\\s*)?(?=\\s*(((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??))\\s*((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*))?[\\(])`, beginCaptures: { 1: { name: "storage.modifier.async.js.jsx" }, 2: { name: "storage.type.property.js.jsx" }, 3: { name: "keyword.generator.asterisk.js.jsx" } }, end: "(?=\\(|\\<)", patterns: [{ include: "#method-declaration-name" }] }] }, "object-member": { patterns: [{ include: "#comment" }, { include: "#object-literal-method-declaration" }, { begin: "(?=\\[)", end: "(?=:)|((?<=[\\]])(?=\\s*[\\(\\<]))", name: "meta.object.member.js.jsx meta.object-literal.key.js.jsx", patterns: [{ include: "#comment" }, { include: "#array-literal" }] }, { begin: "(?=[\\'\\\"\\`])", end: "(?=:)|((?<=[\\'\\\"\\`])(?=((\\s*[\\(\\<,}])|(\\s+(as|satisifies)\\s+))))", name: "meta.object.member.js.jsx meta.object-literal.key.js.jsx", patterns: [{ include: "#comment" }, { include: "#string" }] }, { begin: `(?x)(?=(\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$)))`, end: "(?=:)|(?=\\s*([\\(\\<,}])|(\\s+as|satisifies\\s+))", name: "meta.object.member.js.jsx meta.object-literal.key.js.jsx", patterns: [{ include: "#comment" }, { include: "#numeric-literal" }] }, { begin: "(?<=[\\]\\'\\\"\\`])(?=\\s*[\\(\\<])", end: "(?=\\}|;|,)|(?<=\\})", name: "meta.method.declaration.js.jsx", patterns: [{ include: "#function-body" }] }, { captures: { 0: { name: "meta.object-literal.key.js.jsx" }, 1: { name: "constant.numeric.decimal.js.jsx" } }, match: "(?![_$[:alpha:]])([[:digit:]]+)\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*:)", name: "meta.object.member.js.jsx" }, { captures: { 0: { name: "meta.object-literal.key.js.jsx" }, 1: { name: "entity.name.function.js.jsx" } }, match: `(?x)(?:([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*:(\\s*\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/)*\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |
(
[<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]
) |
# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
)))`, name: "meta.object.member.js.jsx" }, { captures: { 0: { name: "meta.object-literal.key.js.jsx" } }, match: "(?:[_$[:alpha:]][_$[:alnum:]]*)\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*:)", name: "meta.object.member.js.jsx" }, { begin: "\\.\\.\\.", beginCaptures: { 0: { name: "keyword.operator.spread.js.jsx" } }, end: "(?=,|\\})", name: "meta.object.member.js.jsx", patterns: [{ include: "#expression" }] }, { captures: { 1: { name: "variable.other.readwrite.js.jsx" } }, match: "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=,|\\}|$|\\/\\/|\\/\\*)", name: "meta.object.member.js.jsx" }, { captures: { 1: { name: "keyword.control.as.js.jsx" }, 2: { name: "storage.modifier.js.jsx" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(as)\\s+(const)(?=\\s*([,}]|$))", name: "meta.object.member.js.jsx" }, { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(as)|(satisfies))\\s+", beginCaptures: { 1: { name: "keyword.control.as.js.jsx" }, 2: { name: "keyword.control.satisfies.js.jsx" } }, end: "(?=[;),}\\]:?\\-\\+\\>]|\\|\\||\\&\\&|\\!\\=\\=|$|^|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(as|satisifies)\\s+))", name: "meta.object.member.js.jsx", patterns: [{ include: "#type" }] }, { begin: "(?=[_$[:alpha:]][_$[:alnum:]]*\\s*=)", end: "(?=,|\\}|$|\\/\\/|\\/\\*)", name: "meta.object.member.js.jsx", patterns: [{ include: "#expression" }] }, { begin: ":", beginCaptures: { 0: { name: "meta.object-literal.key.js.jsx punctuation.separator.key-value.js.jsx" } }, end: "(?=,|\\})", name: "meta.object.member.js.jsx", patterns: [{ begin: "(?<=:)\\s*(async)?(?=\\s*(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)\\(\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))", beginCaptures: { 1: { name: "storage.modifier.async.js.jsx" } }, end: "(?<=\\))", patterns: [{ include: "#type-parameters" }, { begin: "\\(", beginCaptures: { 0: { name: "meta.brace.round.js.jsx" } }, end: "\\)", endCaptures: { 0: { name: "meta.brace.round.js.jsx" } }, patterns: [{ include: "#expression-inside-possibly-arrow-parens" }] }] }, { begin: "(?<=:)\\s*(async)?\\s*(\\()(?=\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))", beginCaptures: { 1: { name: "storage.modifier.async.js.jsx" }, 2: { name: "meta.brace.round.js.jsx" } }, end: "\\)", endCaptures: { 0: { name: "meta.brace.round.js.jsx" } }, patterns: [{ include: "#expression-inside-possibly-arrow-parens" }] }, { begin: "(?<=:)\\s*(async)?\\s*(?=\\<\\s*$)", beginCaptures: { 1: { name: "storage.modifier.async.js.jsx" } }, end: "(?<=\\>)", patterns: [{ include: "#type-parameters" }] }, { begin: "(?<=\\>)\\s*(\\()(?=\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))", beginCaptures: { 1: { name: "meta.brace.round.js.jsx" } }, end: "\\)", endCaptures: { 0: { name: "meta.brace.round.js.jsx" } }, patterns: [{ include: "#expression-inside-possibly-arrow-parens" }] }, { include: "#possibly-arrow-return-type" }, { include: "#expression" }] }, { include: "#punctuation-comma" }, { include: "#decl-block" }] }, "parameter-array-binding-pattern": { begin: "(?:(\\.\\.\\.)\\s*)?(\\[)", beginCaptures: { 1: { name: "keyword.operator.rest.js.jsx" }, 2: { name: "punctuation.definition.binding-pattern.array.js.jsx" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.binding-pattern.array.js.jsx" } }, patterns: [{ include: "#parameter-binding-element" }, { include: "#punctuation-comma" }] }, "parameter-binding-element": { patterns: [{ include: "#comment" }, { include: "#string" }, { include: "#numeric-literal" }, { include: "#regex" }, { include: "#parameter-object-binding-pattern" }, { include: "#parameter-array-binding-pattern" }, { include: "#destructuring-parameter-rest" }, { include: "#variable-initializer" }] }, "parameter-name": { patterns: [{ captures: { 1: { name: "storage.modifier.js.jsx" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(override|public|protected|private|readonly)\\s+(?=(override|public|protected|private|readonly)\\s+)" }, { captures: { 1: { name: "storage.modifier.js.jsx" }, 2: { name: "keyword.operator.rest.js.jsx" }, 3: { name: "entity.name.function.js.jsx variable.language.this.js.jsx" }, 4: { name: "entity.name.function.js.jsx" }, 5: { name: "keyword.operator.optional.js.jsx" } }, match: `(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(override|public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*(\\??)(?=\\s*
# function assignment |
(=\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |
(
[<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]
) |
# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
)) |
# typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>
(:\\s*(
(<) |
([(]\\s*(
([)]) |
(\\.\\.\\.) |
([_$[:alnum:]]+\\s*(
([:,?=])|
([)]\\s*=>)
))
))
)) |
(:\\s*(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Function(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |
(:\\s*((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))) |
(:\\s*(=>|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(<[^<>]*>)|[^<>(),=])+=\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |
(
[<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]
) |
# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
)))` }, { captures: { 1: { name: "storage.modifier.js.jsx" }, 2: { name: "keyword.operator.rest.js.jsx" }, 3: { name: "variable.parameter.js.jsx variable.language.this.js.jsx" }, 4: { name: "variable.parameter.js.jsx" }, 5: { name: "keyword.operator.optional.js.jsx" } }, match: "(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(override|public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*(\\??)" }] }, "parameter-object-binding-element": { patterns: [{ include: "#comment" }, { begin: `(?x)(?=((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|
(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|
(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))
)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(:))`, end: "(?=,|\\})", patterns: [{ include: "#object-binding-element-propertyName" }, { include: "#parameter-binding-element" }, { include: "#paren-expression" }] }, { include: "#parameter-object-binding-pattern" }, { include: "#destructuring-parameter-rest" }, { include: "#variable-initializer" }, { include: "#punctuation-comma" }] }, "parameter-object-binding-pattern": { begin: "(?:(\\.\\.\\.)\\s*)?(\\{)", beginCaptures: { 1: { name: "keyword.operator.rest.js.jsx" }, 2: { name: "punctuation.definition.binding-pattern.object.js.jsx" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.binding-pattern.object.js.jsx" } }, patterns: [{ include: "#parameter-object-binding-element" }] }, "parameter-type-annotation": { patterns: [{ begin: "(:)", beginCaptures: { 1: { name: "keyword.operator.type.annotation.js.jsx" } }, end: "(?=[,)])|(?==[^>])", name: "meta.type.annotation.js.jsx", patterns: [{ include: "#type" }] }] }, "paren-expression": { begin: "\\(", beginCaptures: { 0: { name: "meta.brace.round.js.jsx" } }, end: "\\)", endCaptures: { 0: { name: "meta.brace.round.js.jsx" } }, patterns: [{ include: "#expression" }] }, "paren-expression-possibly-arrow": { patterns: [{ begin: "(?<=[(=,])\\s*(async)?(?=\\s*((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*))?\\(\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))", beginCaptures: { 1: { name: "storage.modifier.async.js.jsx" } }, end: "(?<=\\))", patterns: [{ include: "#paren-expression-possibly-arrow-with-typeparameters" }] }, { begin: "(?<=[(=,]|=>|^return|[^\\._$[:alnum:]]return)\\s*(async)?(?=\\s*((((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*))?\\()|(<)|((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)))\\s*$)", beginCaptures: { 1: { name: "storage.modifier.async.js.jsx" } }, end: "(?<=\\))", patterns: [{ include: "#paren-expression-possibly-arrow-with-typeparameters" }] }, { include: "#possibly-arrow-return-type" }] }, "paren-expression-possibly-arrow-with-typeparameters": { patterns: [{ include: "#type-parameters" }, { begin: "\\(", beginCaptures: { 0: { name: "meta.brace.round.js.jsx" } }, end: "\\)", endCaptures: { 0: { name: "meta.brace.round.js.jsx" } }, patterns: [{ include: "#expression-inside-possibly-arrow-parens" }] }] }, "possibly-arrow-return-type": { begin: "(?<=\\)|^)\\s*(:)(?=\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*=>)", beginCaptures: { 1: { name: "meta.arrow.js.jsx meta.return.type.arrow.js.jsx keyword.operator.type.annotation.js.jsx" } }, contentName: "meta.arrow.js.jsx meta.return.type.arrow.js.jsx", end: "(?==>|\\{|(^\\s*(export|function|class|interface|let|var|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|const|import|enum|namespace|module|type|abstract|declare)\\s+))", patterns: [{ include: "#arrow-return-type-body" }] }, "property-accessor": { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(accessor|get|set)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "storage.type.property.js.jsx" }, "punctuation-accessor": { captures: { 1: { name: "punctuation.accessor.js.jsx" }, 2: { name: "punctuation.accessor.optional.js.jsx" } }, match: "(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))" }, "punctuation-comma": { match: ",", name: "punctuation.separator.comma.js.jsx" }, "punctuation-semicolon": { match: ";", name: "punctuation.terminator.statement.js.jsx" }, "qstring-double": { begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.js.jsx" } }, end: '(")|((?:[^\\\\\\n])$)', endCaptures: { 1: { name: "punctuation.definition.string.end.js.jsx" }, 2: { name: "invalid.illegal.newline.js.jsx" } }, name: "string.quoted.double.js.jsx", patterns: [{ include: "#string-character-escape" }] }, "qstring-single": { begin: "'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.js.jsx" } }, end: "(\\')|((?:[^\\\\\\n])$)", endCaptures: { 1: { name: "punctuation.definition.string.end.js.jsx" }, 2: { name: "invalid.illegal.newline.js.jsx" } }, name: "string.quoted.single.js.jsx", patterns: [{ include: "#string-character-escape" }] }, regex: { patterns: [{ begin: "(?<!\\+\\+|--|})(?<=[=(:,\\[?+!]|^return|[^\\._$[:alnum:]]return|^case|[^\\._$[:alnum:]]case|=>|&&|\\|\\||\\*\\/)\\s*(\\/)(?![\\/*])(?=(?:[^\\/\\\\\\[\\()]|\\\\.|\\[([^\\]\\\\]|\\\\.)+\\]|\\(([^\\)\\\\]|\\\\.)+\\))+\\/([dgimsuy]+|(?![\\/\\*])|(?=\\/\\*))(?!\\s*[a-zA-Z0-9_$]))", beginCaptures: { 1: { name: "punctuation.definition.string.begin.js.jsx" } }, end: "(/)([dgimsuy]*)", endCaptures: { 1: { name: "punctuation.definition.string.end.js.jsx" }, 2: { name: "keyword.other.js.jsx" } }, name: "string.regexp.js.jsx", patterns: [{ include: "#regexp" }] }, { begin: "((?<![_$[:alnum:])\\]]|\\+\\+|--|}|\\*\\/)|((?<=^return|[^\\._$[:alnum:]]return|^case|[^\\._$[:alnum:]]case))\\s*)\\/(?![\\/*])(?=(?:[^\\/\\\\\\[]|\\\\.|\\[([^\\]\\\\]|\\\\.)*\\])+\\/([dgimsuy]+|(?![\\/\\*])|(?=\\/\\*))(?!\\s*[a-zA-Z0-9_$]))", beginCaptures: { 0: { name: "punctuation.definition.string.begin.js.jsx" } }, end: "(/)([dgimsuy]*)", endCaptures: { 1: { name: "punctuation.definition.string.end.js.jsx" }, 2: { name: "keyword.other.js.jsx" } }, name: "string.regexp.js.jsx", patterns: [{ include: "#regexp" }] }] }, "regex-character-class": { patterns: [{ match: "\\\\[wWsSdDtrnvf]|\\.", name: "constant.other.character-class.regexp" }, { match: "\\\\([0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4})", name: "constant.character.numeric.regexp" }, { match: "\\\\c[A-Z]", name: "constant.character.control.regexp" }, { match: "\\\\.", name: "constant.character.escape.backslash.regexp" }] }, regexp: { patterns: [{ match: "\\\\[bB]|\\^|\\$", name: "keyword.control.anchor.regexp" }, { captures: { 0: { name: "keyword.other.back-reference.regexp" }, 1: { name: "variable.other.regexp" } }, match: "\\\\[1-9]\\d*|\\\\k<([a-zA-Z_$][\\w$]*)>" }, { match: "[?+*]|\\{(\\d+,\\d+|\\d+,|,\\d+|\\d+)\\}\\??", name: "keyword.operator.quantifier.regexp" }, { match: "\\|", name: "keyword.operator.or.regexp" }, { begin: "(\\()((\\?=)|(\\?!)|(\\?<=)|(\\?<!))", beginCaptures: { 1: { name: "punctuation.definition.group.regexp" }, 2: { name: "punctuation.definition.group.assertion.regexp" }, 3: { name: "meta.assertion.look-ahead.regexp" }, 4: { name: "meta.assertion.negative-look-ahead.regexp" }, 5: { name: "meta.assertion.look-behind.regexp" }, 6: { name: "meta.assertion.negative-look-behind.regexp" } }, end: "(\\))", endCaptures: { 1: { name: "punctuation.definition.group.regexp" } }, name: "meta.group.assertion.regexp", patterns: [{ include: "#regexp" }] }, { begin: "\\((?:(\\?:)|(?:\\?<([a-zA-Z_$][\\w$]*)>))?", beginCaptures: { 0: { name: "punctuation.definition.group.regexp" }, 1: { name: "punctuation.definition.group.no-capture.regexp" }, 2: { name: "variable.other.regexp" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.regexp" } }, name: "meta.group.regexp", patterns: [{ include: "#regexp" }] }, { begin: "(\\[)(\\^)?", beginCaptures: { 1: { name: "punctuation.definition.character-class.regexp" }, 2: { name: "keyword.operator.negation.regexp" } }, end: "(\\])", endCaptures: { 1: { name: "punctuation.definition.character-class.regexp" } }, name: "constant.other.character-class.set.regexp", patterns: [{ captures: { 1: { name: "constant.character.numeric.regexp" }, 2: { name: "constant.character.control.regexp" }, 3: { name: "constant.character.escape.backslash.regexp" }, 4: { name: "constant.character.numeric.regexp" }, 5: { name: "constant.character.control.regexp" }, 6: { name: "constant.character.escape.backslash.regexp" } }, match: "(?:.|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))\\-(?:[^\\]\\\\]|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))", name: "constant.other.character-class.range.regexp" }, { include: "#regex-character-class" }] }, { include: "#regex-character-class" }] }, "return-type": { patterns: [{ begin: "(?<=\\))\\s*(:)(?=\\s*\\S)", beginCaptures: { 1: { name: "keyword.operator.type.annotation.js.jsx" } }, end: "(?<![:|&])(?=$|^|[{};,]|//)", name: "meta.return.type.js.jsx", patterns: [{ include: "#return-type-core" }] }, { begin: "(?<=\\))\\s*(:)", beginCaptures: { 1: { name: "keyword.operator.type.annotation.js.jsx" } }, end: "(?<![:|&])((?=[{};,]|//|^\\s*$)|((?<=\\S)(?=\\s*$)))", name: "meta.return.type.js.jsx", patterns: [{ include: "#return-type-core" }] }] }, "return-type-core": { patterns: [{ include: "#comment" }, { begin: "(?<=[:|&])(?=\\s*\\{)", end: "(?<=\\})", patterns: [{ include: "#type-object" }] }, { include: "#type-predicate-operator" }, { include: "#type" }] }, shebang: { captures: { 1: { name: "punctuation.definition.comment.js.jsx" } }, match: "\\A(#!).*(?=$)", name: "comment.line.shebang.js.jsx" }, "single-line-comment-consuming-line-ending": { begin: "(^[ \\t]+)?((//)(?:\\s*((@)internal)(?=\\s|$))?)", beginCaptures: { 1: { name: "punctuation.whitespace.comment.leading.js.jsx" }, 2: { name: "comment.line.double-slash.js.jsx" }, 3: { name: "punctuation.definition.comment.js.jsx" }, 4: { name: "storage.type.internaldeclaration.js.jsx" }, 5: { name: "punctuation.decorator.internaldeclaration.js.jsx" } }, contentName: "comment.line.double-slash.js.jsx", end: "(?=^)" }, statements: { patterns: [{ include: "#declaration" }, { include: "#control-statement" }, { include: "#after-operator-block-as-object-literal" }, { include: "#decl-block" }, { include: "#label" }, { include: "#expression" }, { include: "#punctuation-semicolon" }, { include: "#string" }, { include: "#comment" }] }, string: { patterns: [{ include: "#qstring-single" }, { include: "#qstring-double" }, { include: "#template" }] }, "string-character-escape": { match: "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|u\\{[0-9A-Fa-f]+\\}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)", name: "constant.character.escape.js.jsx" }, "super-literal": { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))super\\b(?!\\$)", name: "variable.language.super.js.jsx" }, "support-function-call-identifiers": { patterns: [{ include: "#literal" }, { include: "#support-objects" }, { include: "#object-identifiers" }, { include: "#punctuation-accessor" }, { match: "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))import(?=\\s*[\\(]\\s*[\\\"\\'\\`]))", name: "keyword.operator.expression.import.js.jsx" }] }, "support-objects": { patterns: [{ match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(arguments)\\b(?!\\$)", name: "variable.language.arguments.js.jsx" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(Promise)\\b(?!\\$)", name: "support.class.promise.js.jsx" }, { captures: { 1: { name: "keyword.control.import.js.jsx" }, 2: { name: "punctuation.accessor.js.jsx" }, 3: { name: "punctuation.accessor.optional.js.jsx" }, 4: { name: "support.variable.property.importmeta.js.jsx" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(import)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(meta)\\b(?!\\$)" }, { captures: { 1: { name: "keyword.operator.new.js.jsx" }, 2: { name: "punctuation.accessor.js.jsx" }, 3: { name: "punctuation.accessor.optional.js.jsx" }, 4: { name: "support.variable.property.target.js.jsx" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(new)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(target)\\b(?!\\$)" }, { captures: { 1: { name: "punctuation.accessor.js.jsx" }, 2: { name: "punctuation.accessor.optional.js.jsx" }, 3: { name: "support.variable.property.js.jsx" }, 4: { name: "support.constant.js.jsx" } }, match: `(?x) (?:(\\.)|(\\?\\.(?!\\s*[[:digit:]]))) \\s* (?:
(?:(constructor|length|prototype|__proto__)\\b(?!\\$|\\s*(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\\())
|
(?:(EPSILON|MAX_SAFE_INTEGER|MAX_VALUE|MIN_SAFE_INTEGER|MIN_VALUE|NEGATIVE_INFINITY|POSITIVE_INFINITY)\\b(?!\\$)))` }, { captures: { 1: { name: "support.type.object.module.js.jsx" }, 2: { name: "support.type.object.module.js.jsx" }, 3: { name: "punctuation.accessor.js.jsx" }, 4: { name: "punctuation.accessor.optional.js.jsx" }, 5: { name: "support.type.object.module.js.jsx" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(exports)|(module)(?:(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))(exports|id|filename|loaded|parent|children))?)\\b(?!\\$)" }] }, "switch-statement": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?=\\bswitch\\s*\\()", end: "\\}", endCaptures: { 0: { name: "punctuation.definition.block.js.jsx" } }, name: "switch-statement.expr.js.jsx", patterns: [{ include: "#comment" }, { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(switch)\\s*(\\()", beginCaptures: { 1: { name: "keyword.control.switch.js.jsx" }, 2: { name: "meta.brace.round.js.jsx" } }, end: "\\)", endCaptures: { 0: { name: "meta.brace.round.js.jsx" } }, name: "switch-expression.expr.js.jsx", patterns: [{ include: "#expression" }] }, { begin: "\\{", beginCaptures: { 0: { name: "punctuation.definition.block.js.jsx" } }, end: "(?=\\})", name: "switch-block.expr.js.jsx", patterns: [{ begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(case|default(?=:))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", beginCaptures: { 1: { name: "keyword.control.switch.js.jsx" } }, end: "(?=:)", name: "case-clause.expr.js.jsx", patterns: [{ include: "#expression" }] }, { begin: "(:)\\s*(\\{)", beginCaptures: { 1: { name: "case-clause.expr.js.jsx punctuation.definition.section.case-statement.js.jsx" }, 2: { name: "meta.block.js.jsx punctuation.definition.block.js.jsx" } }, contentName: "meta.block.js.jsx", end: "\\}", endCaptures: { 0: { name: "meta.block.js.jsx punctuation.definition.block.js.jsx" } }, patterns: [{ include: "#statements" }] }, { captures: { 0: { name: "case-clause.expr.js.jsx punctuation.definition.section.case-statement.js.jsx" } }, match: "(:)" }, { include: "#statements" }] }] }, template: { patterns: [{ include: "#template-call" }, { begin: "([_$[:alpha:]][_$[:alnum:]]*)?(`)", beginCaptures: { 1: { name: "entity.name.function.tagged-template.js.jsx" }, 2: { name: "string.template.js.jsx punctuation.definition.string.template.begin.js.jsx" } }, contentName: "string.template.js.jsx", end: "`", endCaptures: { 0: { name: "string.template.js.jsx punctuation.definition.string.template.end.js.jsx" } }, patterns: [{ include: "#template-substitution-element" }, { include: "#string-character-escape" }] }] }, "template-call": { patterns: [{ begin: "(?=(([_$[:alpha:]][_$[:alnum:]]*\\s*\\??\\.\\s*)*|(\\??\\.\\s*)?)([_$[:alpha:]][_$[:alnum:]]*)(<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?`)", end: "(?=`)", patterns: [{ begin: "(?=(([_$[:alpha:]][_$[:alnum:]]*\\s*\\??\\.\\s*)*|(\\??\\.\\s*)?)([_$[:alpha:]][_$[:alnum:]]*))", end: "(?=(<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?`)", patterns: [{ include: "#support-function-call-identifiers" }, { match: "([_$[:alpha:]][_$[:alnum:]]*)", name: "entity.name.function.tagged-template.js.jsx" }] }, { include: "#type-arguments" }] }, { begin: "([_$[:alpha:]][_$[:alnum:]]*)?\\s*(?=(<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)`)", beginCaptures: { 1: { name: "entity.name.function.tagged-template.js.jsx" } }, end: "(?=`)", patterns: [{ include: "#type-arguments" }] }] }, "template-substitution-element": { begin: "\\$\\{", beginCaptures: { 0: { name: "punctuation.definition.template-expression.begin.js.jsx" } }, contentName: "meta.embedded.line.js.jsx", end: "\\}", endCaptures: { 0: { name: "punctuation.definition.template-expression.end.js.jsx" } }, name: "meta.template.expression.js.jsx", patterns: [{ include: "#expression" }] }, "template-type": { patterns: [{ include: "#template-call" }, { begin: "([_$[:alpha:]][_$[:alnum:]]*)?(`)", beginCaptures: { 1: { name: "entity.name.function.tagged-template.js.jsx" }, 2: { name: "string.template.js.jsx punctuation.definition.string.template.begin.js.jsx" } }, contentName: "string.template.js.jsx", end: "`", endCaptures: { 0: { name: "string.template.js.jsx punctuation.definition.string.template.end.js.jsx" } }, patterns: [{ include: "#template-type-substitution-element" }, { include: "#string-character-escape" }] }] }, "template-type-substitution-element": { begin: "\\$\\{", beginCaptures: { 0: { name: "punctuation.definition.template-expression.begin.js.jsx" } }, contentName: "meta.embedded.line.js.jsx", end: "\\}", endCaptures: { 0: { name: "punctuation.definition.template-expression.end.js.jsx" } }, name: "meta.template.expression.js.jsx", patterns: [{ include: "#type" }] }, "ternary-expression": { begin: "(?!\\?\\.\\s*[^[:digit:]])(\\?)(?!\\?)", beginCaptures: { 1: { name: "keyword.operator.ternary.js.jsx" } }, end: "\\s*(:)", endCaptures: { 1: { name: "keyword.operator.ternary.js.jsx" } }, patterns: [{ include: "#expression" }] }, "this-literal": { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))this\\b(?!\\$)", name: "variable.language.this.js.jsx" }, type: { patterns: [{ include: "#comment" }, { include: "#type-string" }, { include: "#numeric-literal" }, { include: "#type-primitive" }, { include: "#type-builtin-literals" }, { include: "#type-parameters" }, { include: "#type-tuple" }, { include: "#type-object" }, { include: "#type-operators" }, { include: "#type-conditional" }, { include: "#type-fn-type-parameters" }, { include: "#type-paren-or-function-parameters" }, { include: "#type-function-return-type" }, { captures: { 1: { name: "storage.modifier.js.jsx" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(readonly)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*" }, { include: "#type-name" }] }, "type-alias-declaration": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(type)\\b\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*", beginCaptures: { 1: { name: "keyword.control.export.js.jsx" }, 2: { name: "storage.modifier.js.jsx" }, 3: { name: "storage.type.type.js.jsx" }, 4: { name: "entity.name.type.alias.js.jsx" } }, end: "(?=\\}|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))", name: "meta.type.declaration.js.jsx", patterns: [{ include: "#comment" }, { include: "#type-parameters" }, { begin: "(=)\\s*(intrinsic)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", beginCaptures: { 1: { name: "keyword.operator.assignment.js.jsx" }, 2: { name: "keyword.control.intrinsic.js.jsx" } }, end: "(?=\\}|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))", patterns: [{ include: "#type" }] }, { begin: "(=)\\s*", beginCaptures: { 1: { name: "keyword.operator.assignment.js.jsx" } }, end: "(?=\\}|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))", patterns: [{ include: "#type" }] }] }, "type-annotation": { patterns: [{ begin: "(:)(?=\\s*\\S)", beginCaptures: { 1: { name: "keyword.operator.type.annotation.js.jsx" } }, end: "(?<![:|&])(?!\\s*[|&]\\s+)((?=^|[,);\\}\\]]|//)|(?==[^>])|((?<=[\\}>\\]\\)]|[_$[:alpha:]])\\s*(?=\\{)))", name: "meta.type.annotation.js.jsx", patterns: [{ include: "#type" }] }, { begin: "(:)", beginCaptures: { 1: { name: "keyword.operator.type.annotation.js.jsx" } }, end: "(?<![:|&])((?=[,);\\}\\]]|\\/\\/)|(?==[^>])|(?=^\\s*$)|((?<=[\\}>\\]\\)]|[_$[:alpha:]])\\s*(?=\\{)))", name: "meta.type.annotation.js.jsx", patterns: [{ include: "#type" }] }] }, "type-arguments": { begin: "\\<", beginCaptures: { 0: { name: "punctuation.definition.typeparameters.begin.js.jsx" } }, end: "\\>", endCaptures: { 0: { name: "punctuation.definition.typeparameters.end.js.jsx" } }, name: "meta.type.parameters.js.jsx", patterns: [{ include: "#type-arguments-body" }] }, "type-arguments-body": { patterns: [{ captures: { 0: { name: "keyword.operator.type.js.jsx" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(_)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))" }, { include: "#type" }, { include: "#punctuation-comma" }] }, "type-builtin-literals": { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(this|true|false|undefined|null|object)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "support.type.builtin.js.jsx" }, "type-conditional": { patterns: [{ begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(extends)\\s+", beginCaptures: { 1: { name: "storage.modifier.js.jsx" } }, end: "(?<=:)", patterns: [{ begin: "\\?", beginCaptures: { 0: { name: "keyword.operator.ternary.js.jsx" } }, end: ":", endCaptures: { 0: { name: "keyword.operator.ternary.js.jsx" } }, patterns: [{ include: "#type" }] }, { include: "#type" }] }] }, "type-fn-type-parameters": { patterns: [{ begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(abstract)\\s+)?(new)\\b(?=\\s*\\<)", beginCaptures: { 1: { name: "meta.type.constructor.js.jsx storage.modifier.js.jsx" }, 2: { name: "meta.type.constructor.js.jsx keyword.control.new.js.jsx" } }, end: "(?<=>)", patterns: [{ include: "#comment" }, { include: "#type-parameters" }] }, { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(abstract)\\s+)?(new)\\b\\s*(?=\\()", beginCaptures: { 1: { name: "storage.modifier.js.jsx" }, 2: { name: "keyword.control.new.js.jsx" } }, end: "(?<=\\))", name: "meta.type.constructor.js.jsx", patterns: [{ include: "#function-parameters" }] }, { begin: `(?x)(
(?=
[(]\\s*(
([)]) |
(\\.\\.\\.) |
([_$[:alnum:]]+\\s*(
([:,?=])|
([)]\\s*=>)
))
)
)
)`, end: "(?<=\\))", name: "meta.type.function.js.jsx", patterns: [{ include: "#function-parameters" }] }] }, "type-function-return-type": { patterns: [{ begin: "(=>)(?=\\s*\\S)", beginCaptures: { 1: { name: "storage.type.function.arrow.js.jsx" } }, end: "(?<!=>)(?<![|&])(?=[,\\]\\)\\{\\}=;>:\\?]|//|$)", name: "meta.type.function.return.js.jsx", patterns: [{ include: "#type-function-return-type-core" }] }, { begin: "=>", beginCaptures: { 0: { name: "storage.type.function.arrow.js.jsx" } }, end: "(?<!=>)(?<![|&])((?=[,\\]\\)\\{\\}=;:\\?>]|//|^\\s*$)|((?<=\\S)(?=\\s*$)))", name: "meta.type.function.return.js.jsx", patterns: [{ include: "#type-function-return-type-core" }] }] }, "type-function-return-type-core": { patterns: [{ include: "#comment" }, { begin: "(?<==>)(?=\\s*\\{)", end: "(?<=\\})", patterns: [{ include: "#type-object" }] }, { include: "#type-predicate-operator" }, { include: "#type" }] }, "type-infer": { patterns: [{ captures: { 1: { name: "keyword.operator.expression.infer.js.jsx" }, 2: { name: "entity.name.type.js.jsx" }, 3: { name: "keyword.operator.expression.extends.js.jsx" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(infer)\\s+([_$[:alpha:]][_$[:alnum:]]*)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?:\\s+(extends)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))?", name: "meta.type.infer.js.jsx" }] }, "type-name": { patterns: [{ begin: "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(<)", captures: { 1: { name: "entity.name.type.module.js.jsx" }, 2: { name: "punctuation.accessor.js.jsx" }, 3: { name: "punctuation.accessor.optional.js.jsx" }, 4: { name: "meta.type.parameters.js.jsx punctuation.definition.typeparameters.begin.js.jsx" } }, contentName: "meta.type.parameters.js.jsx", end: "(>)", endCaptures: { 1: { name: "meta.type.parameters.js.jsx punctuation.definition.typeparameters.end.js.jsx" } }, patterns: [{ include: "#type-arguments-body" }] }, { begin: "([_$[:alpha:]][_$[:alnum:]]*)\\s*(<)", beginCaptures: { 1: { name: "entity.name.type.js.jsx" }, 2: { name: "meta.type.parameters.js.jsx punctuation.definition.typeparameters.begin.js.jsx" } }, contentName: "meta.type.parameters.js.jsx", end: "(>)", endCaptures: { 1: { name: "meta.type.parameters.js.jsx punctuation.definition.typeparameters.end.js.jsx" } }, patterns: [{ include: "#type-arguments-body" }] }, { captures: { 1: { name: "entity.name.type.module.js.jsx" }, 2: { name: "punctuation.accessor.js.jsx" }, 3: { name: "punctuation.accessor.optional.js.jsx" } }, match: "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))" }, { match: "[_$[:alpha:]][_$[:alnum:]]*", name: "entity.name.type.js.jsx" }] }, "type-object": { begin: "\\{", beginCaptures: { 0: { name: "punctuation.definition.block.js.jsx" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.block.js.jsx" } }, name: "meta.object.type.js.jsx", patterns: [{ include: "#comment" }, { include: "#method-declaration" }, { include: "#indexer-declaration" }, { include: "#indexer-mapped-type-declaration" }, { include: "#field-declaration" }, { include: "#type-annotation" }, { begin: "\\.\\.\\.", beginCaptures: { 0: { name: "keyword.operator.spread.js.jsx" } }, end: "(?=\\}|;|,|$)|(?<=\\})", patterns: [{ include: "#type" }] }, { include: "#punctuation-comma" }, { include: "#punctuation-semicolon" }, { include: "#type" }] }, "type-operators": { patterns: [{ include: "#typeof-operator" }, { include: "#type-infer" }, { begin: "([&|])(?=\\s*\\{)", beginCaptures: { 0: { name: "keyword.operator.type.js.jsx" } }, end: "(?<=\\})", patterns: [{ include: "#type-object" }] }, { begin: "[&|]", beginCaptures: { 0: { name: "keyword.operator.type.js.jsx" } }, end: "(?=\\S)" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))keyof(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.operator.expression.keyof.js.jsx" }, { match: "(\\?|\\:)", name: "keyword.operator.ternary.js.jsx" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))import(?=\\s*\\()", name: "keyword.operator.expression.import.js.jsx" }] }, "type-parameters": { begin: "(<)", beginCaptures: { 1: { name: "punctuation.definition.typeparameters.begin.js.jsx" } }, end: "(>)", endCaptures: { 1: { name: "punctuation.definition.typeparameters.end.js.jsx" } }, name: "meta.type.parameters.js.jsx", patterns: [{ include: "#comment" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(extends|in|out|const)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "storage.modifier.js.jsx" }, { include: "#type" }, { include: "#punctuation-comma" }, { match: "(=)(?!>)", name: "keyword.operator.assignment.js.jsx" }] }, "type-paren-or-function-parameters": { begin: "\\(", beginCaptures: { 0: { name: "meta.brace.round.js.jsx" } }, end: "\\)", endCaptures: { 0: { name: "meta.brace.round.js.jsx" } }, name: "meta.type.paren.cover.js.jsx", patterns: [{ captures: { 1: { name: "storage.modifier.js.jsx" }, 2: { name: "keyword.operator.rest.js.jsx" }, 3: { name: "entity.name.function.js.jsx variable.language.this.js.jsx" }, 4: { name: "entity.name.function.js.jsx" }, 5: { name: "keyword.operator.optional.js.jsx" } }, match: `(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))\\s*(\\??)(?=\\s*(:\\s*(
(<) |
([(]\\s*(
([)]) |
(\\.\\.\\.) |
([_$[:alnum:]]+\\s*(
([:,?=])|
([)]\\s*=>)
))
))
)) |
(:\\s*(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Function(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |
(:\\s*((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))))` }, { captures: { 1: { name: "storage.modifier.js.jsx" }, 2: { name: "keyword.operator.rest.js.jsx" }, 3: { name: "variable.parameter.js.jsx variable.language.this.js.jsx" }, 4: { name: "variable.parameter.js.jsx" }, 5: { name: "keyword.operator.optional.js.jsx" } }, match: "(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))\\s*(\\??)(?=:)" }, { include: "#type-annotation" }, { match: ",", name: "punctuation.separator.parameter.js.jsx" }, { include: "#type" }] }, "type-predicate-operator": { patterns: [{ captures: { 1: { name: "keyword.operator.type.asserts.js.jsx" }, 2: { name: "variable.parameter.js.jsx variable.language.this.js.jsx" }, 3: { name: "variable.parameter.js.jsx" }, 4: { name: "keyword.operator.expression.is.js.jsx" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(asserts)\\s+)?(?!asserts)(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))\\s(is)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))" }, { captures: { 1: { name: "keyword.operator.type.asserts.js.jsx" }, 2: { name: "variable.parameter.js.jsx variable.language.this.js.jsx" }, 3: { name: "variable.parameter.js.jsx" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(asserts)\\s+(?!is)(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))asserts(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.operator.type.asserts.js.jsx" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))is(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "keyword.operator.expression.is.js.jsx" }] }, "type-primitive": { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(string|number|bigint|boolean|symbol|any|void|never|unknown)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "support.type.primitive.js.jsx" }, "type-string": { patterns: [{ include: "#qstring-single" }, { include: "#qstring-double" }, { include: "#template-type" }] }, "type-tuple": { begin: "\\[", beginCaptures: { 0: { name: "meta.brace.square.js.jsx" } }, end: "\\]", endCaptures: { 0: { name: "meta.brace.square.js.jsx" } }, name: "meta.type.tuple.js.jsx", patterns: [{ match: "\\.\\.\\.", name: "keyword.operator.rest.js.jsx" }, { captures: { 1: { name: "entity.name.label.js.jsx" }, 2: { name: "keyword.operator.optional.js.jsx" }, 3: { name: "punctuation.separator.label.js.jsx" } }, match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))([_$[:alpha:]][_$[:alnum:]]*)\\s*(\\?)?\\s*(:)" }, { include: "#type" }, { include: "#punctuation-comma" }] }, "typeof-operator": { begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))typeof(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", beginCaptures: { 0: { name: "keyword.operator.expression.typeof.js.jsx" } }, end: "(?=[,);}\\]=>:&|{\\?]|(extends\\s+)|$|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))", patterns: [{ include: "#type-arguments" }, { include: "#expression" }] }, "undefined-literal": { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))undefined(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "constant.language.undefined.js.jsx" }, "var-expr": { patterns: [{ begin: "(?=(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(var|let)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))", end: "(?!(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(var|let)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))((?=^|;|}|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))|((?<!^let|[^\\._$[:alnum:]]let|^var|[^\\._$[:alnum:]]var)(?=\\s*$)))", name: "meta.var.expr.js.jsx", patterns: [{ begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(var|let)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*", beginCaptures: { 1: { name: "keyword.control.export.js.jsx" }, 2: { name: "storage.modifier.js.jsx" }, 3: { name: "storage.type.js.jsx" } }, end: "(?=\\S)" }, { include: "#destructuring-variable" }, { include: "#var-single-variable" }, { include: "#variable-initializer" }, { include: "#comment" }, { begin: "(,)\\s*(?=$|\\/\\/)", beginCaptures: { 1: { name: "punctuation.separator.comma.js.jsx" } }, end: "(?<!,)(((?==|;|}|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|^\\s*$))|((?<=\\S)(?=\\s*$)))", patterns: [{ include: "#single-line-comment-consuming-line-ending" }, { include: "#comment" }, { include: "#destructuring-variable" }, { include: "#var-single-variable" }, { include: "#punctuation-comma" }] }, { include: "#punctuation-comma" }] }, { begin: "(?=(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(const(?!\\s+enum\\b))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))", beginCaptures: { 1: { name: "keyword.control.export.js.jsx" }, 2: { name: "storage.modifier.js.jsx" }, 3: { name: "storage.type.js.jsx" } }, end: "(?!(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(const(?!\\s+enum\\b))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))((?=^|;|}|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))|((?<!^const|[^\\._$[:alnum:]]const)(?=\\s*$)))", name: "meta.var.expr.js.jsx", patterns: [{ begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(const(?!\\s+enum\\b))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*", beginCaptures: { 1: { name: "keyword.control.export.js.jsx" }, 2: { name: "storage.modifier.js.jsx" }, 3: { name: "storage.type.js.jsx" } }, end: "(?=\\S)" }, { include: "#destructuring-const" }, { include: "#var-single-const" }, { include: "#variable-initializer" }, { include: "#comment" }, { begin: "(,)\\s*(?=$|\\/\\/)", beginCaptures: { 1: { name: "punctuation.separator.comma.js.jsx" } }, end: "(?<!,)(((?==|;|}|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|^\\s*$))|((?<=\\S)(?=\\s*$)))", patterns: [{ include: "#single-line-comment-consuming-line-ending" }, { include: "#comment" }, { include: "#destructuring-const" }, { include: "#var-single-const" }, { include: "#punctuation-comma" }] }, { include: "#punctuation-comma" }] }, { begin: "(?=(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b((?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))", beginCaptures: { 1: { name: "keyword.control.export.js.jsx" }, 2: { name: "storage.modifier.js.jsx" }, 3: { name: "storage.type.js.jsx" } }, end: "(?!(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b((?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))((?=;|}|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))|((?<!^using|[^\\._$[:alnum:]]using|^await\\s+using|[^\\._$[:alnum:]]await\\s+using)(?=\\s*$)))", name: "meta.var.expr.js.jsx", patterns: [{ begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b((?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*", beginCaptures: { 1: { name: "keyword.control.export.js.jsx" }, 2: { name: "storage.modifier.js.jsx" }, 3: { name: "storage.type.js.jsx" } }, end: "(?=\\S)" }, { include: "#var-single-const" }, { include: "#variable-initializer" }, { include: "#comment" }, { begin: "(,)\\s*((?!\\S)|(?=\\/\\/))", beginCaptures: { 1: { name: "punctuation.separator.comma.js.jsx" } }, end: "(?<!,)(((?==|;|}|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|^\\s*$))|((?<=\\S)(?=\\s*$)))", patterns: [{ include: "#single-line-comment-consuming-line-ending" }, { include: "#comment" }, { include: "#var-single-const" }, { include: "#punctuation-comma" }] }, { include: "#punctuation-comma" }] }] }, "var-single-const": { patterns: [{ begin: `(?x)([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*
# function assignment |
(=\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |
(
[<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]
) |
# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
)) |
# typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>
(:\\s*(
(<) |
([(]\\s*(
([)]) |
(\\.\\.\\.) |
([_$[:alnum:]]+\\s*(
([:,?=])|
([)]\\s*=>)
))
))
)) |
(:\\s*(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Function(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |
(:\\s*((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))) |
(:\\s*(=>|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(<[^<>]*>)|[^<>(),=])+=\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |
(
[<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]
) |
# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
)))`, beginCaptures: { 1: { name: "meta.definition.variable.js.jsx variable.other.constant.js.jsx entity.name.function.js.jsx" } }, end: "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|(;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b)))", name: "meta.var-single-variable.expr.js.jsx", patterns: [{ include: "#var-single-variable-type-annotation" }] }, { begin: "([_$[:alpha:]][_$[:alnum:]]*)", beginCaptures: { 1: { name: "meta.definition.variable.js.jsx variable.other.constant.js.jsx" } }, end: "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|(;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b)))", name: "meta.var-single-variable.expr.js.jsx", patterns: [{ include: "#var-single-variable-type-annotation" }] }] }, "var-single-variable": { patterns: [{ begin: `(?x)([_$[:alpha:]][_$[:alnum:]]*)(\\!)?(?=\\s*
# function assignment |
(=\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |
(
[<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]
) |
# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
)) |
# typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>
(:\\s*(
(<) |
([(]\\s*(
([)]) |
(\\.\\.\\.) |
([_$[:alnum:]]+\\s*(
([:,?=])|
([)]\\s*=>)
))
))
)) |
(:\\s*(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Function(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |
(:\\s*((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))) |
(:\\s*(=>|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(<[^<>]*>)|[^<>(),=])+=\\s*(
((async\\s+)?(
(function\\s*[(<*]) |
(function\\s+) |
([_$[:alpha:]][_$[:alnum:]]*\\s*=>)
)) |
((async\\s*)?(
((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |

(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
[(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*
(
([)]\\s*:) |
((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)
)
) |
(
[<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]
) |
# arrow function possible to detect only with => on same line
(
(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?
\\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\"\\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\"([^\\"\\\\]|\\\\.)*\\")|(\\\`([^\\\`\\\\]|\\\\.)*\\\`))*)?\\)
(\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?
\\s*=>
)
))
)))`, beginCaptures: { 1: { name: "meta.definition.variable.js.jsx entity.name.function.js.jsx" }, 2: { name: "keyword.operator.definiteassignment.js.jsx" } }, end: "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|(;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b)))", name: "meta.var-single-variable.expr.js.jsx", patterns: [{ include: "#var-single-variable-type-annotation" }] }, { begin: "([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])(\\!)?", beginCaptures: { 1: { name: "meta.definition.variable.js.jsx variable.other.constant.js.jsx" }, 2: { name: "keyword.operator.definiteassignment.js.jsx" } }, end: "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|(;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b)))", name: "meta.var-single-variable.expr.js.jsx", patterns: [{ include: "#var-single-variable-type-annotation" }] }, { begin: "([_$[:alpha:]][_$[:alnum:]]*)(\\!)?", beginCaptures: { 1: { name: "meta.definition.variable.js.jsx variable.other.readwrite.js.jsx" }, 2: { name: "keyword.operator.definiteassignment.js.jsx" } }, end: "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|(;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b)))", name: "meta.var-single-variable.expr.js.jsx", patterns: [{ include: "#var-single-variable-type-annotation" }] }] }, "var-single-variable-type-annotation": { patterns: [{ include: "#type-annotation" }, { include: "#string" }, { include: "#comment" }] }, "variable-initializer": { patterns: [{ begin: "(?<!=|!)(=)(?!=)(?=\\s*\\S)(?!\\s*.*=>\\s*$)", beginCaptures: { 1: { name: "keyword.operator.assignment.js.jsx" } }, end: "(?=$|^|[,);}\\]]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))", patterns: [{ include: "#expression" }] }, { begin: "(?<!=|!)(=)(?!=)", beginCaptures: { 1: { name: "keyword.operator.assignment.js.jsx" } }, end: "(?=[,);}\\]]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))|(?=^\\s*$)|(?<![\\|\\&\\+\\-\\*\\/])(?<=\\S)(?<!=)(?=\\s*$)", patterns: [{ include: "#expression" }] }] } }, scopeName: "source.js.jsx" });
var v = [
  Ae
];
const je = Object.freeze({ displayName: "GraphQL", fileTypes: ["graphql", "graphqls", "gql", "graphcool"], name: "graphql", patterns: [{ include: "#graphql" }], repository: { graphql: { patterns: [{ include: "#graphql-comment" }, { include: "#graphql-description-docstring" }, { include: "#graphql-description-singleline" }, { include: "#graphql-fragment-definition" }, { include: "#graphql-directive-definition" }, { include: "#graphql-type-interface" }, { include: "#graphql-enum" }, { include: "#graphql-scalar" }, { include: "#graphql-union" }, { include: "#graphql-schema" }, { include: "#graphql-operation-def" }, { include: "#literal-quasi-embedded" }] }, "graphql-ampersand": { captures: { 1: { name: "keyword.operator.logical.graphql" } }, match: "\\s*(&)" }, "graphql-arguments": { begin: "\\s*(\\()", beginCaptures: { 1: { name: "meta.brace.round.directive.graphql" } }, end: "\\s*(\\))", endCaptures: { 1: { name: "meta.brace.round.directive.graphql" } }, name: "meta.arguments.graphql", patterns: [{ include: "#graphql-comment" }, { include: "#graphql-description-docstring" }, { include: "#graphql-description-singleline" }, { begin: "\\s*([_A-Za-z][_0-9A-Za-z]*)(?:\\s*(:))", beginCaptures: { 1: { name: "variable.parameter.graphql" }, 2: { name: "punctuation.colon.graphql" } }, end: "(?=\\s*(?:(?:([_A-Za-z][_0-9A-Za-z]*)\\s*(:))|\\)))|\\s*(,)", endCaptures: { 3: { name: "punctuation.comma.graphql" } }, patterns: [{ include: "#graphql-comment" }, { include: "#graphql-description-docstring" }, { include: "#graphql-description-singleline" }, { include: "#graphql-directive" }, { include: "#graphql-value" }, { include: "#graphql-skip-newlines" }] }, { include: "#literal-quasi-embedded" }] }, "graphql-boolean-value": { captures: { 1: { name: "constant.language.boolean.graphql" } }, match: "\\s*\\b(true|false)\\b" }, "graphql-colon": { captures: { 1: { name: "punctuation.colon.graphql" } }, match: "\\s*(:)" }, "graphql-comma": { captures: { 1: { name: "punctuation.comma.graphql" } }, match: "\\s*(,)" }, "graphql-comment": { patterns: [{ captures: { 1: { name: "punctuation.whitespace.comment.leading.graphql" } }, comment: "need to prefix comment space with a scope else Atom's reflow cmd doesn't work", match: "(\\s*)(#).*", name: "comment.line.graphql.js" }, { begin: '(""")', beginCaptures: { 1: { name: "punctuation.whitespace.comment.leading.graphql" } }, end: '(""")', name: "comment.line.graphql.js" }, { begin: '(")', beginCaptures: { 1: { name: "punctuation.whitespace.comment.leading.graphql" } }, end: '(")', name: "comment.line.graphql.js" }] }, "graphql-description-docstring": { begin: '"""', end: '"""', name: "comment.block.graphql" }, "graphql-description-singleline": { match: '#(?=([^"]*"[^"]*")*[^"]*$).*$', name: "comment.line.number-sign.graphql" }, "graphql-directive": { applyEndPatternLast: 1, begin: "\\s*((@)\\s*([_A-Za-z][_0-9A-Za-z]*))", beginCaptures: { 1: { name: "entity.name.function.directive.graphql" } }, end: "(?=.)", patterns: [{ include: "#graphql-comment" }, { include: "#graphql-description-docstring" }, { include: "#graphql-description-singleline" }, { include: "#graphql-arguments" }, { include: "#literal-quasi-embedded" }, { include: "#graphql-skip-newlines" }] }, "graphql-directive-definition": { applyEndPatternLast: 1, begin: "\\s*(\\bdirective\\b)\\s*(@[_A-Za-z][_0-9A-Za-z]*)", beginCaptures: { 1: { name: "keyword.directive.graphql" }, 2: { name: "entity.name.function.directive.graphql" }, 3: { name: "keyword.on.graphql" }, 4: { name: "support.type.graphql" } }, end: "(?=.)", patterns: [{ include: "#graphql-variable-definitions" }, { applyEndPatternLast: 1, begin: "\\s*(\\bon\\b)\\s*([_A-Za-z]*)", beginCaptures: { 1: { name: "keyword.on.graphql" }, 2: { name: "support.type.location.graphql" } }, end: "(?=.)", patterns: [{ include: "#graphql-skip-newlines" }, { include: "#graphql-comment" }, { include: "#literal-quasi-embedded" }, { captures: { 2: { name: "support.type.location.graphql" } }, match: "\\s*(\\|)\\s*([_A-Za-z]*)" }] }, { include: "#graphql-skip-newlines" }, { include: "#graphql-comment" }, { include: "#literal-quasi-embedded" }] }, "graphql-enum": { begin: "\\s*+\\b(enum)\\b\\s*([_A-Za-z][_0-9A-Za-z]*)", beginCaptures: { 1: { name: "keyword.enum.graphql" }, 2: { name: "support.type.enum.graphql" } }, end: "(?<=})", name: "meta.enum.graphql", patterns: [{ begin: "\\s*({)", beginCaptures: { 1: { name: "punctuation.operation.graphql" } }, end: "\\s*(})", endCaptures: { 1: { name: "punctuation.operation.graphql" } }, name: "meta.type.object.graphql", patterns: [{ include: "#graphql-object-type" }, { include: "#graphql-comment" }, { include: "#graphql-description-docstring" }, { include: "#graphql-description-singleline" }, { include: "#graphql-directive" }, { include: "#graphql-enum-value" }, { include: "#literal-quasi-embedded" }] }, { include: "#graphql-comment" }, { include: "#graphql-description-docstring" }, { include: "#graphql-description-singleline" }, { include: "#graphql-directive" }] }, "graphql-enum-value": { match: "\\s*(?!=\\b(true|false|null)\\b)([_A-Za-z][_0-9A-Za-z]*)", name: "constant.character.enum.graphql" }, "graphql-field": { patterns: [{ captures: { 1: { name: "string.unquoted.alias.graphql" }, 2: { name: "punctuation.colon.graphql" } }, match: "\\s*([_A-Za-z][_0-9A-Za-z]*)\\s*(:)" }, { captures: { 1: { name: "variable.graphql" } }, match: "\\s*([_A-Za-z][_0-9A-Za-z]*)" }, { include: "#graphql-arguments" }, { include: "#graphql-directive" }, { include: "#graphql-selection-set" }, { include: "#literal-quasi-embedded" }, { include: "#graphql-skip-newlines" }] }, "graphql-float-value": { captures: { 1: { name: "constant.numeric.float.graphql" } }, match: "\\s*(-?(0|[1-9][0-9]*)(\\.[0-9]+)?((e|E)(\\+|-)?[0-9]+)?)" }, "graphql-fragment-definition": { begin: "\\s*(?:(\\bfragment\\b)\\s*([_A-Za-z][_0-9A-Za-z]*)?\\s*(?:(\\bon\\b)\\s*([_A-Za-z][_0-9A-Za-z]*)))", captures: { 1: { name: "keyword.fragment.graphql" }, 2: { name: "entity.name.fragment.graphql" }, 3: { name: "keyword.on.graphql" }, 4: { name: "support.type.graphql" } }, end: "(?<=})", name: "meta.fragment.graphql", patterns: [{ include: "#graphql-comment" }, { include: "#graphql-description-docstring" }, { include: "#graphql-description-singleline" }, { include: "#graphql-selection-set" }, { include: "#graphql-directive" }, { include: "#graphql-skip-newlines" }, { include: "#literal-quasi-embedded" }] }, "graphql-fragment-spread": { applyEndPatternLast: 1, begin: "\\s*(\\.\\.\\.)\\s*(?!\\bon\\b)([_A-Za-z][_0-9A-Za-z]*)", captures: { 1: { name: "keyword.operator.spread.graphql" }, 2: { name: "variable.fragment.graphql" } }, end: "(?=.)", patterns: [{ include: "#graphql-comment" }, { include: "#graphql-description-docstring" }, { include: "#graphql-description-singleline" }, { include: "#graphql-selection-set" }, { include: "#graphql-directive" }, { include: "#literal-quasi-embedded" }, { include: "#graphql-skip-newlines" }] }, "graphql-ignore-spaces": { match: "\\s*" }, "graphql-inline-fragment": { applyEndPatternLast: 1, begin: "\\s*(\\.\\.\\.)\\s*(?:(\\bon\\b)\\s*([_A-Za-z][_0-9A-Za-z]*))?", captures: { 1: { name: "keyword.operator.spread.graphql" }, 2: { name: "keyword.on.graphql" }, 3: { name: "support.type.graphql" } }, end: "(?=.)", patterns: [{ include: "#graphql-comment" }, { include: "#graphql-description-docstring" }, { include: "#graphql-description-singleline" }, { include: "#graphql-selection-set" }, { include: "#graphql-directive" }, { include: "#graphql-skip-newlines" }, { include: "#literal-quasi-embedded" }] }, "graphql-input-types": { patterns: [{ include: "#graphql-scalar-type" }, { captures: { 1: { name: "support.type.graphql" }, 2: { name: "keyword.operator.nulltype.graphql" } }, match: "\\s*([_A-Za-z][_0-9A-Za-z]*)(?:\\s*(!))?" }, { begin: "\\s*(\\[)", captures: { 1: { name: "meta.brace.square.graphql" }, 2: { name: "keyword.operator.nulltype.graphql" } }, end: "\\s*(\\])(?:\\s*(!))?", name: "meta.type.list.graphql", patterns: [{ include: "#graphql-comment" }, { include: "#graphql-description-docstring" }, { include: "#graphql-description-singleline" }, { include: "#graphql-input-types" }, { include: "#graphql-comma" }, { include: "#literal-quasi-embedded" }] }] }, "graphql-list-value": { patterns: [{ begin: "\\s*+(\\[)", beginCaptures: { 1: { name: "meta.brace.square.graphql" } }, end: "\\s*(\\])", endCaptures: { 1: { name: "meta.brace.square.graphql" } }, name: "meta.listvalues.graphql", patterns: [{ include: "#graphql-value" }] }] }, "graphql-name": { captures: { 1: { name: "entity.name.function.graphql" } }, match: "\\s*([_A-Za-z][_0-9A-Za-z]*)" }, "graphql-null-value": { captures: { 1: { name: "constant.language.null.graphql" } }, match: "\\s*\\b(null)\\b" }, "graphql-object-field": { captures: { 1: { name: "constant.object.key.graphql" }, 2: { name: "string.unquoted.graphql" }, 3: { name: "punctuation.graphql" } }, match: "\\s*(([_A-Za-z][_0-9A-Za-z]*))\\s*(:)" }, "graphql-object-value": { patterns: [{ begin: "\\s*+({)", beginCaptures: { 1: { name: "meta.brace.curly.graphql" } }, end: "\\s*(})", endCaptures: { 1: { name: "meta.brace.curly.graphql" } }, name: "meta.objectvalues.graphql", patterns: [{ include: "#graphql-object-field" }, { include: "#graphql-value" }] }] }, "graphql-operation-def": { patterns: [{ include: "#graphql-query-mutation" }, { include: "#graphql-name" }, { include: "#graphql-variable-definitions" }, { include: "#graphql-directive" }, { include: "#graphql-selection-set" }] }, "graphql-query-mutation": { captures: { 1: { name: "keyword.operation.graphql" } }, match: "\\s*\\b(query|mutation)\\b" }, "graphql-scalar": { captures: { 1: { name: "keyword.scalar.graphql" }, 2: { name: "entity.scalar.graphql" } }, match: "\\s*\\b(scalar)\\b\\s*([_A-Za-z][_0-9A-Za-z]*)" }, "graphql-scalar-type": { captures: { 1: { name: "support.type.builtin.graphql" }, 2: { name: "keyword.operator.nulltype.graphql" } }, match: "\\s*\\b(Int|Float|String|Boolean|ID)\\b(?:\\s*(!))?" }, "graphql-schema": { begin: "\\s*\\b(schema)\\b", beginCaptures: { 1: { name: "keyword.schema.graphql" } }, end: "(?<=})", patterns: [{ begin: "\\s*({)", beginCaptures: { 1: { name: "punctuation.operation.graphql" } }, end: "\\s*(})", endCaptures: { 1: { name: "punctuation.operation.graphql" } }, patterns: [{ begin: "\\s*([_A-Za-z][_0-9A-Za-z]*)(?=\\s*\\(|:)", beginCaptures: { 1: { name: "variable.arguments.graphql" } }, end: "(?=\\s*(([_A-Za-z][_0-9A-Za-z]*)\\s*(\\(|:)|(})))|\\s*(,)", endCaptures: { 5: { name: "punctuation.comma.graphql" } }, patterns: [{ captures: { 1: { name: "support.type.graphql" } }, match: "\\s*([_A-Za-z][_0-9A-Za-z]*)" }, { include: "#graphql-comment" }, { include: "#graphql-description-docstring" }, { include: "#graphql-description-singleline" }, { include: "#graphql-colon" }, { include: "#graphql-skip-newlines" }] }, { include: "#graphql-comment" }, { include: "#graphql-description-docstring" }, { include: "#graphql-description-singleline" }, { include: "#graphql-skip-newlines" }] }, { include: "#graphql-comment" }, { include: "#graphql-description-docstring" }, { include: "#graphql-description-singleline" }, { include: "#graphql-directive" }, { include: "#graphql-skip-newlines" }] }, "graphql-selection-set": { begin: "\\s*({)", beginCaptures: { 1: { name: "punctuation.operation.graphql" } }, end: "\\s*(})", endCaptures: { 1: { name: "punctuation.operation.graphql" } }, name: "meta.selectionset.graphql", patterns: [{ include: "#graphql-comment" }, { include: "#graphql-description-docstring" }, { include: "#graphql-description-singleline" }, { include: "#graphql-field" }, { include: "#graphql-fragment-spread" }, { include: "#graphql-inline-fragment" }, { include: "#graphql-comma" }, { include: "#native-interpolation" }, { include: "#literal-quasi-embedded" }] }, "graphql-skip-newlines": { match: `\\s*
` }, "graphql-string-content": { patterns: [{ match: `\\\\[/'"\\\\nrtbf]`, name: "constant.character.escape.graphql" }, { match: "\\\\u([0-9a-fA-F]{4})", name: "constant.character.escape.graphql" }] }, "graphql-string-value": { begin: '\\s*+(("))', beginCaptures: { 1: { name: "string.quoted.double.graphql" }, 2: { name: "punctuation.definition.string.begin.graphql" } }, contentName: "string.quoted.double.graphql", end: `\\s*+(?:(("))|(
))`, endCaptures: { 1: { name: "string.quoted.double.graphql" }, 2: { name: "punctuation.definition.string.end.graphql" }, 3: { name: "invalid.illegal.newline.graphql" } }, patterns: [{ include: "#graphql-string-content" }, { include: "#literal-quasi-embedded" }] }, "graphql-type-definition": { begin: "\\s*([_A-Za-z][_0-9A-Za-z]*)(?=\\s*\\(|:)", beginCaptures: { 1: { name: "variable.graphql" } }, comment: "key (optionalArgs): Type", end: "(?=\\s*(([_A-Za-z][_0-9A-Za-z]*)\\s*(\\(|:)|(})))|\\s*(,)", endCaptures: { 5: { name: "punctuation.comma.graphql" } }, patterns: [{ include: "#graphql-comment" }, { include: "#graphql-description-docstring" }, { include: "#graphql-description-singleline" }, { include: "#graphql-directive" }, { include: "#graphql-variable-definitions" }, { include: "#graphql-type-object" }, { include: "#graphql-colon" }, { include: "#graphql-input-types" }, { include: "#literal-quasi-embedded" }] }, "graphql-type-interface": { applyEndPatternLast: 1, begin: "\\s*\\b(?:(extends?)?\\b\\s*\\b(type)|(interface)|(input))\\b\\s*([_A-Za-z][_0-9A-Za-z]*)?", captures: { 1: { name: "keyword.type.graphql" }, 2: { name: "keyword.type.graphql" }, 3: { name: "keyword.interface.graphql" }, 4: { name: "keyword.input.graphql" }, 5: { name: "support.type.graphql" } }, end: "(?=.)", name: "meta.type.interface.graphql", patterns: [{ begin: "\\s*\\b(implements)\\b\\s*", beginCaptures: { 1: { name: "keyword.implements.graphql" } }, end: "\\s*(?={)", patterns: [{ captures: { 1: { name: "support.type.graphql" } }, match: "\\s*([_A-Za-z][_0-9A-Za-z]*)" }, { include: "#graphql-comment" }, { include: "#graphql-description-docstring" }, { include: "#graphql-description-singleline" }, { include: "#graphql-directive" }, { include: "#graphql-ampersand" }, { include: "#graphql-comma" }] }, { include: "#graphql-comment" }, { include: "#graphql-description-docstring" }, { include: "#graphql-description-singleline" }, { include: "#graphql-directive" }, { include: "#graphql-type-object" }, { include: "#literal-quasi-embedded" }, { include: "#graphql-ignore-spaces" }] }, "graphql-type-object": { begin: "\\s*({)", beginCaptures: { 1: { name: "punctuation.operation.graphql" } }, end: "\\s*(})", endCaptures: { 1: { name: "punctuation.operation.graphql" } }, name: "meta.type.object.graphql", patterns: [{ include: "#graphql-comment" }, { include: "#graphql-description-docstring" }, { include: "#graphql-description-singleline" }, { include: "#graphql-object-type" }, { include: "#graphql-type-definition" }, { include: "#literal-quasi-embedded" }] }, "graphql-union": { applyEndPatternLast: 1, begin: "\\s*\\b(union)\\b\\s*([_A-Za-z][_0-9A-Za-z]*)", captures: { 1: { name: "keyword.union.graphql" }, 2: { name: "support.type.graphql" } }, end: "(?=.)", patterns: [{ applyEndPatternLast: 1, begin: "\\s*(=)\\s*([_A-Za-z][_0-9A-Za-z]*)", captures: { 1: { name: "punctuation.assignment.graphql" }, 2: { name: "support.type.graphql" } }, end: "(?=.)", patterns: [{ include: "#graphql-comment" }, { include: "#graphql-description-docstring" }, { include: "#graphql-description-singleline" }, { include: "#graphql-skip-newlines" }, { include: "#literal-quasi-embedded" }, { captures: { 1: { name: "punctuation.or.graphql" }, 2: { name: "support.type.graphql" } }, match: "\\s*(\\|)\\s*([_A-Za-z][_0-9A-Za-z]*)" }] }, { include: "#graphql-comment" }, { include: "#graphql-description-docstring" }, { include: "#graphql-description-singleline" }, { include: "#graphql-skip-newlines" }, { include: "#literal-quasi-embedded" }] }, "graphql-union-mark": { captures: { 1: { name: "punctuation.union.graphql" } }, match: "\\s*(\\|)" }, "graphql-value": { patterns: [{ include: "#graphql-comment" }, { include: "#graphql-description-docstring" }, { include: "#graphql-variable-name" }, { include: "#graphql-float-value" }, { include: "#graphql-string-value" }, { include: "#graphql-boolean-value" }, { include: "#graphql-null-value" }, { include: "#graphql-enum-value" }, { include: "#graphql-list-value" }, { include: "#graphql-object-value" }, { include: "#literal-quasi-embedded" }] }, "graphql-variable-assignment": { applyEndPatternLast: 1, begin: "\\s(=)", beginCaptures: { 1: { name: "punctuation.assignment.graphql" } }, end: `(?=[
,)])`, patterns: [{ include: "#graphql-value" }] }, "graphql-variable-definition": { begin: "\\s*(\\$?[_A-Za-z][_0-9A-Za-z]*)(?=\\s*\\(|:)", beginCaptures: { 1: { name: "variable.parameter.graphql" } }, comment: "variable: type = value,.... which may be a list", end: "(?=\\s*((\\$?[_A-Za-z][_0-9A-Za-z]*)\\s*(\\(|:)|(}|\\))))|\\s*(,)", endCaptures: { 5: { name: "punctuation.comma.graphql" } }, name: "meta.variables.graphql", patterns: [{ include: "#graphql-comment" }, { include: "#graphql-description-docstring" }, { include: "#graphql-description-singleline" }, { include: "#graphql-directive" }, { include: "#graphql-colon" }, { include: "#graphql-input-types" }, { include: "#graphql-variable-assignment" }, { include: "#literal-quasi-embedded" }, { include: "#graphql-skip-newlines" }] }, "graphql-variable-definitions": { begin: "\\s*(\\()", captures: { 1: { name: "meta.brace.round.graphql" } }, end: "\\s*(\\))", patterns: [{ include: "#graphql-comment" }, { include: "#graphql-description-docstring" }, { include: "#graphql-description-singleline" }, { include: "#graphql-variable-definition" }, { include: "#literal-quasi-embedded" }] }, "graphql-variable-name": { captures: { 1: { name: "variable.graphql" } }, match: "\\s*(\\$[_A-Za-z][_0-9A-Za-z]*)" }, "native-interpolation": { begin: "\\s*(\\${)", beginCaptures: { 1: { name: "keyword.other.substitution.begin" } }, end: "(})", endCaptures: { 1: { name: "keyword.other.substitution.end" } }, name: "native.interpolation", patterns: [{ include: "source.js" }, { include: "source.ts" }, { include: "source.js.jsx" }, { include: "source.tsx" }] } }, scopeName: "source.graphql", embeddedLangs: ["javascript", "typescript", "jsx", "tsx"], aliases: ["gql"] });
var $ = [
  ...e,
  ...r,
  ...v,
  ...d,
  je
];
const Fe = Object.freeze({ displayName: "YAML", fileTypes: ["yaml", "yml", "rviz", "reek", "clang-format", "yaml-tmlanguage", "syntax", "sublime-syntax"], firstLineMatch: "^%YAML( ?1.\\d+)?", name: "yaml", patterns: [{ include: "#comment" }, { include: "#property" }, { include: "#directive" }, { match: "^---", name: "entity.other.document.begin.yaml" }, { match: "^\\.{3}", name: "entity.other.document.end.yaml" }, { include: "#node" }], repository: { "block-collection": { patterns: [{ include: "#block-sequence" }, { include: "#block-mapping" }] }, "block-mapping": { patterns: [{ include: "#block-pair" }] }, "block-node": { patterns: [{ include: "#prototype" }, { include: "#block-scalar" }, { include: "#block-collection" }, { include: "#flow-scalar-plain-out" }, { include: "#flow-node" }] }, "block-pair": { patterns: [{ begin: "\\?", beginCaptures: { 1: { name: "punctuation.definition.key-value.begin.yaml" } }, end: "(?=\\?)|^ *(:)|(:)", endCaptures: { 1: { name: "punctuation.separator.key-value.mapping.yaml" }, 2: { name: "invalid.illegal.expected-newline.yaml" } }, name: "meta.block-mapping.yaml", patterns: [{ include: "#block-node" }] }, { begin: `(?x)
(?=
(?x:
[^\\s[-?:,\\[\\]{}#&*!|>'"%@\`]]
| [?:-] \\S
)
(
[^\\s:]
| : \\S
| \\s+ (?![#\\s])
)*
\\s*
:
(\\s|$)
)
`, end: `(?x)
(?=
\\s* $
| \\s+ \\#
| \\s* : (\\s|$)
)
`, patterns: [{ include: "#flow-scalar-plain-out-implicit-type" }, { begin: `(?x)
[^\\s[-?:,\\[\\]{}#&*!|>'"%@\`]]
| [?:-] \\S
`, beginCaptures: { 0: { name: "entity.name.tag.yaml" } }, contentName: "entity.name.tag.yaml", end: `(?x)
(?=
\\s* $
| \\s+ \\#
| \\s* : (\\s|$)
)
`, name: "string.unquoted.plain.out.yaml" }] }, { match: ":(?=\\s|$)", name: "punctuation.separator.key-value.mapping.yaml" }] }, "block-scalar": { begin: "(?:(\\|)|(>))([1-9])?([-+])?(.*\\n?)", beginCaptures: { 1: { name: "keyword.control.flow.block-scalar.literal.yaml" }, 2: { name: "keyword.control.flow.block-scalar.folded.yaml" }, 3: { name: "constant.numeric.indentation-indicator.yaml" }, 4: { name: "storage.modifier.chomping-indicator.yaml" }, 5: { patterns: [{ include: "#comment" }, { match: ".+", name: "invalid.illegal.expected-comment-or-newline.yaml" }] } }, end: "^(?=\\S)|(?!\\G)", patterns: [{ begin: "^([ ]+)(?! )", end: "^(?!\\1|\\s*$)", name: "string.unquoted.block.yaml" }] }, "block-sequence": { match: "(-)(?!\\S)", name: "punctuation.definition.block.sequence.item.yaml" }, comment: { begin: "(?:(^[ \\t]*)|[ \\t]+)(?=#\\p{Print}*$)", beginCaptures: { 1: { name: "punctuation.whitespace.comment.leading.yaml" } }, end: "(?!\\G)", patterns: [{ begin: "#", beginCaptures: { 0: { name: "punctuation.definition.comment.yaml" } }, end: "\\n", name: "comment.line.number-sign.yaml" }] }, directive: { begin: "^%", beginCaptures: { 0: { name: "punctuation.definition.directive.begin.yaml" } }, end: "(?=$|[ \\t]+($|#))", name: "meta.directive.yaml", patterns: [{ captures: { 1: { name: "keyword.other.directive.yaml.yaml" }, 2: { name: "constant.numeric.yaml-version.yaml" } }, match: "\\G(YAML)[ \\t]+(\\d+\\.\\d+)" }, { captures: { 1: { name: "keyword.other.directive.tag.yaml" }, 2: { name: "storage.type.tag-handle.yaml" }, 3: { name: "support.type.tag-prefix.yaml" } }, match: `(?x)
\\G
(TAG)
(?:[ \\t]+
((?:!(?:[0-9A-Za-z\\-]*!)?))
(?:[ \\t]+ (
!              (?x: %[0-9A-Fa-f]{2} | [0-9A-Za-z\\-#;/?:@&=+$,_.!~*'()\\[\\]] )*
| (?![,!\\[\\]{}]) (?x: %[0-9A-Fa-f]{2} | [0-9A-Za-z\\-#;/?:@&=+$,_.!~*'()\\[\\]] )+
)
)?
)?
` }, { captures: { 1: { name: "support.other.directive.reserved.yaml" }, 2: { name: "string.unquoted.directive-name.yaml" }, 3: { name: "string.unquoted.directive-parameter.yaml" } }, match: "(?x) \\G (\\w+) (?:[ \\t]+ (\\w+) (?:[ \\t]+ (\\w+))? )?" }, { match: "\\S+", name: "invalid.illegal.unrecognized.yaml" }] }, "flow-alias": { captures: { 1: { name: "keyword.control.flow.alias.yaml" }, 2: { name: "punctuation.definition.alias.yaml" }, 3: { name: "variable.other.alias.yaml" }, 4: { name: "invalid.illegal.character.anchor.yaml" } }, match: "((\\*))([^\\s\\[\\]/{/},]+)([^\\s\\]},]\\S*)?" }, "flow-collection": { patterns: [{ include: "#flow-sequence" }, { include: "#flow-mapping" }] }, "flow-mapping": { begin: "\\{", beginCaptures: { 0: { name: "punctuation.definition.mapping.begin.yaml" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.mapping.end.yaml" } }, name: "meta.flow-mapping.yaml", patterns: [{ include: "#prototype" }, { match: ",", name: "punctuation.separator.mapping.yaml" }, { include: "#flow-pair" }] }, "flow-node": { patterns: [{ include: "#prototype" }, { include: "#flow-alias" }, { include: "#flow-collection" }, { include: "#flow-scalar" }] }, "flow-pair": { patterns: [{ begin: "\\?", beginCaptures: { 0: { name: "punctuation.definition.key-value.begin.yaml" } }, end: "(?=[},\\]])", name: "meta.flow-pair.explicit.yaml", patterns: [{ include: "#prototype" }, { include: "#flow-pair" }, { include: "#flow-node" }, { begin: ":(?=\\s|$|[\\[\\]{},])", beginCaptures: { 0: { name: "punctuation.separator.key-value.mapping.yaml" } }, end: "(?=[},\\]])", patterns: [{ include: "#flow-value" }] }] }, { begin: `(?x)
(?=
(?:
[^\\s[-?:,\\[\\]{}#&*!|>'"%@\`]]
| [?:-] [^\\s[\\[\\]{},]]
)
(
[^\\s:[\\[\\]{},]]
| : [^\\s[\\[\\]{},]]
| \\s+ (?![#\\s])
)*
\\s*
:
(\\s|$)
)
`, end: `(?x)
(?=
\\s* $
| \\s+ \\#
| \\s* : (\\s|$)
| \\s* : [\\[\\]{},]
| \\s* [\\[\\]{},]
)
`, name: "meta.flow-pair.key.yaml", patterns: [{ include: "#flow-scalar-plain-in-implicit-type" }, { begin: `(?x)
[^\\s[-?:,\\[\\]{}#&*!|>'"%@\`]]
| [?:-] [^\\s[\\[\\]{},]]
`, beginCaptures: { 0: { name: "entity.name.tag.yaml" } }, contentName: "entity.name.tag.yaml", end: `(?x)
(?=
\\s* $
| \\s+ \\#
| \\s* : (\\s|$)
| \\s* : [\\[\\]{},]
| \\s* [\\[\\]{},]
)
`, name: "string.unquoted.plain.in.yaml" }] }, { include: "#flow-node" }, { begin: ":(?=\\s|$|[\\[\\]{},])", captures: { 0: { name: "punctuation.separator.key-value.mapping.yaml" } }, end: "(?=[},\\]])", name: "meta.flow-pair.yaml", patterns: [{ include: "#flow-value" }] }] }, "flow-scalar": { patterns: [{ include: "#flow-scalar-double-quoted" }, { include: "#flow-scalar-single-quoted" }, { include: "#flow-scalar-plain-in" }] }, "flow-scalar-double-quoted": { begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.yaml" } }, end: '"', endCaptures: { 0: { name: "punctuation.definition.string.end.yaml" } }, name: "string.quoted.double.yaml", patterns: [{ match: '\\\\([0abtnvfre "/\\\\N_Lp]|x\\d\\d|u\\d{4}|U\\d{8})', name: "constant.character.escape.yaml" }, { match: "\\\\\\n", name: "constant.character.escape.double-quoted.newline.yaml" }] }, "flow-scalar-plain-in": { patterns: [{ include: "#flow-scalar-plain-in-implicit-type" }, { begin: `(?x)
[^\\s[-?:,\\[\\]{}#&*!|>'"%@\`]]
| [?:-] [^\\s[\\[\\]{},]]
`, end: `(?x)
(?=
\\s* $
| \\s+ \\#
| \\s* : (\\s|$)
| \\s* : [\\[\\]{},]
| \\s* [\\[\\]{},]
)
`, name: "string.unquoted.plain.in.yaml" }] }, "flow-scalar-plain-in-implicit-type": { patterns: [{ captures: { 1: { name: "constant.language.null.yaml" }, 2: { name: "constant.language.boolean.yaml" }, 3: { name: "constant.numeric.integer.yaml" }, 4: { name: "constant.numeric.float.yaml" }, 5: { name: "constant.other.timestamp.yaml" }, 6: { name: "constant.language.value.yaml" }, 7: { name: "constant.language.merge.yaml" } }, match: `(?x)
(?x:
(null|Null|NULL|~)
| (y|Y|yes|Yes|YES|n|N|no|No|NO|true|True|TRUE|false|False|FALSE|on|On|ON|off|Off|OFF)
| (
(?:
[-+]? 0b [0-1_]+
| [-+]? 0  [0-7_]+
| [-+]? (?: 0|[1-9][0-9_]*)
| [-+]? 0x [0-9a-fA-F_]+
| [-+]? [1-9] [0-9_]* (?: :[0-5]?[0-9])+
)
)
| (
(?x:
[-+]? (?: [0-9] [0-9_]*)? \\. [0-9.]* (?: [eE] [-+] [0-9]+)?
| [-+]? [0-9] [0-9_]* (?: :[0-5]?[0-9])+ \\. [0-9_]*
| [-+]? \\. (?: inf|Inf|INF)
|       \\. (?: nan|NaN|NAN)
)
)
| (
(?x:
\\d{4} - \\d{2} - \\d{2}
| \\d{4}
- \\d{1,2}
- \\d{1,2}
(?: [Tt] | [ \\t]+) \\d{1,2}
: \\d{2}
: \\d{2}
(?: \\.\\d*)?
(?:
(?:[ \\t]*) Z
| [-+] \\d{1,2} (?: :\\d{1,2})?
)?
)
)
| (=)
| (<<)
)
(?:
(?=
\\s* $
| \\s+ \\#
| \\s* : (\\s|$)
| \\s* : [\\[\\]{},]
| \\s* [\\[\\]{},]
)
)
` }] }, "flow-scalar-plain-out": { patterns: [{ include: "#flow-scalar-plain-out-implicit-type" }, { begin: `(?x)
[^\\s[-?:,\\[\\]{}#&*!|>'"%@\`]]
| [?:-] \\S
`, end: `(?x)
(?=
\\s* $
| \\s+ \\#
| \\s* : (\\s|$)
)
`, name: "string.unquoted.plain.out.yaml" }] }, "flow-scalar-plain-out-implicit-type": { patterns: [{ captures: { 1: { name: "constant.language.null.yaml" }, 2: { name: "constant.language.boolean.yaml" }, 3: { name: "constant.numeric.integer.yaml" }, 4: { name: "constant.numeric.float.yaml" }, 5: { name: "constant.other.timestamp.yaml" }, 6: { name: "constant.language.value.yaml" }, 7: { name: "constant.language.merge.yaml" } }, match: `(?x)
(?x:
(null|Null|NULL|~)
| (y|Y|yes|Yes|YES|n|N|no|No|NO|true|True|TRUE|false|False|FALSE|on|On|ON|off|Off|OFF)
| (
(?:
[-+]? 0b [0-1_]+
| [-+]? 0  [0-7_]+
| [-+]? (?: 0|[1-9][0-9_]*)
| [-+]? 0x [0-9a-fA-F_]+
| [-+]? [1-9] [0-9_]* (?: :[0-5]?[0-9])+
)
)
| (
(?x:
[-+]? (?: [0-9] [0-9_]*)? \\. [0-9.]* (?: [eE] [-+] [0-9]+)?
| [-+]? [0-9] [0-9_]* (?: :[0-5]?[0-9])+ \\. [0-9_]*
| [-+]? \\. (?: inf|Inf|INF)
|       \\. (?: nan|NaN|NAN)
)
)
| (
(?x:
\\d{4} - \\d{2} - \\d{2}
| \\d{4}
- \\d{1,2}
- \\d{1,2}
(?: [Tt] | [ \\t]+) \\d{1,2}
: \\d{2}
: \\d{2}
(?: \\.\\d*)?
(?:
(?:[ \\t]*) Z
| [-+] \\d{1,2} (?: :\\d{1,2})?
)?
)
)
| (=)
| (<<)
)
(?x:
(?=
\\s* $
| \\s+ \\#
| \\s* : (\\s|$)
)
)
` }] }, "flow-scalar-single-quoted": { begin: "'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.yaml" } }, end: "'(?!')", endCaptures: { 0: { name: "punctuation.definition.string.end.yaml" } }, name: "string.quoted.single.yaml", patterns: [{ match: "''", name: "constant.character.escape.single-quoted.yaml" }] }, "flow-sequence": { begin: "\\[", beginCaptures: { 0: { name: "punctuation.definition.sequence.begin.yaml" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.sequence.end.yaml" } }, name: "meta.flow-sequence.yaml", patterns: [{ include: "#prototype" }, { match: ",", name: "punctuation.separator.sequence.yaml" }, { include: "#flow-pair" }, { include: "#flow-node" }] }, "flow-value": { patterns: [{ begin: "\\G(?![},\\]])", end: "(?=[},\\]])", name: "meta.flow-pair.value.yaml", patterns: [{ include: "#flow-node" }] }] }, node: { patterns: [{ include: "#block-node" }] }, property: { begin: "(?=!|&)", end: "(?!\\G)", name: "meta.property.yaml", patterns: [{ captures: { 1: { name: "keyword.control.property.anchor.yaml" }, 2: { name: "punctuation.definition.anchor.yaml" }, 3: { name: "entity.name.type.anchor.yaml" }, 4: { name: "invalid.illegal.character.anchor.yaml" } }, match: "\\G((&))([^\\s\\[\\]/{/},]+)(\\S+)?" }, { match: `(?x)
\\G
(?:
! < (?: %[0-9A-Fa-f]{2} | [0-9A-Za-z\\-#;/?:@&=+$,_.!~*'()\\[\\]] )+ >
| (?:!(?:[0-9A-Za-z\\-]*!)?) (?: %[0-9A-Fa-f]{2} | [0-9A-Za-z\\-#;/?:@&=+$_.~*'()] )+
| !
)
(?=\\ |\\t|$)
`, name: "storage.type.tag-handle.yaml" }, { match: "\\S+", name: "invalid.illegal.tag-handle.yaml" }] }, prototype: { patterns: [{ include: "#comment" }, { include: "#property" }] } }, scopeName: "source.yaml", aliases: ["yml"] });
var u = [
  Fe
];
const Ee = Object.freeze({ displayName: "Handlebars", name: "handlebars", patterns: [{ include: "#yfm" }, { include: "#extends" }, { include: "#block_comments" }, { include: "#comments" }, { include: "#block_helper" }, { include: "#end_block" }, { include: "#else_token" }, { include: "#partial_and_var" }, { include: "#inline_script" }, { include: "#html_tags" }, { include: "text.html.basic" }], repository: { block_comments: { patterns: [{ begin: "\\{\\{!--", end: "--\\}\\}", name: "comment.block.handlebars", patterns: [{ match: "@\\w*", name: "keyword.annotation.handlebars" }, { include: "#comments" }] }, { begin: "<!--", captures: { 0: { name: "punctuation.definition.comment.html" } }, end: "-{2,3}\\s*>", name: "comment.block.html", patterns: [{ match: "--", name: "invalid.illegal.bad-comments-or-CDATA.html" }] }] }, block_helper: { begin: "(\\{\\{)(~?\\#)([-a-zA-Z0-9_\\./>]+)\\s?(@?[-a-zA-Z0-9_\\./]+)*\\s?(@?[-a-zA-Z0-9_\\./]+)*\\s?(@?[-a-zA-Z0-9_\\./]+)*", beginCaptures: { 1: { name: "support.constant.handlebars" }, 2: { name: "support.constant.handlebars keyword.control" }, 3: { name: "support.constant.handlebars keyword.control" }, 4: { name: "variable.parameter.handlebars" }, 5: { name: "support.constant.handlebars" }, 6: { name: "variable.parameter.handlebars" }, 7: { name: "support.constant.handlebars" } }, end: "(~?\\}\\})", endCaptures: { 1: { name: "support.constant.handlebars" } }, name: "meta.function.block.start.handlebars", patterns: [{ include: "#string" }, { include: "#handlebars_attribute" }] }, comments: { patterns: [{ begin: "\\{\\{!", end: "\\}\\}", name: "comment.block.handlebars", patterns: [{ match: "@\\w*", name: "keyword.annotation.handlebars" }, { include: "#comments" }] }, { begin: "<!--", captures: { 0: { name: "punctuation.definition.comment.html" } }, end: "-{2,3}\\s*>", name: "comment.block.html", patterns: [{ match: "--", name: "invalid.illegal.bad-comments-or-CDATA.html" }] }] }, else_token: { begin: "(\\{\\{)(~?else)(@?\\s(if)\\s([-a-zA-Z0-9_\\.\\(\\s\\)/]+))?", beginCaptures: { 1: { name: "support.constant.handlebars" }, 2: { name: "support.constant.handlebars keyword.control" }, 3: { name: "support.constant.handlebars" }, 4: { name: "variable.parameter.handlebars" } }, end: "(~?\\}\\}\\}*)", endCaptures: { 1: { name: "support.constant.handlebars" } }, name: "meta.function.inline.else.handlebars" }, end_block: { begin: "(\\{\\{)(~?/)([a-zA-Z0-9/_\\.-]+)\\s*", beginCaptures: { 1: { name: "support.constant.handlebars" }, 2: { name: "support.constant.handlebars keyword.control" }, 3: { name: "support.constant.handlebars keyword.control" } }, end: "(~?\\}\\})", endCaptures: { 1: { name: "support.constant.handlebars" } }, name: "meta.function.block.end.handlebars", patterns: [] }, entities: { patterns: [{ captures: { 1: { name: "punctuation.definition.entity.html" }, 3: { name: "punctuation.definition.entity.html" } }, match: "(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)", name: "constant.character.entity.html" }, { match: "&", name: "invalid.illegal.bad-ampersand.html" }] }, "escaped-double-quote": { match: '\\\\"', name: "constant.character.escape.js" }, "escaped-single-quote": { match: "\\\\'", name: "constant.character.escape.js" }, extends: { patterns: [{ begin: "(\\{\\{!<)\\s([-a-zA-Z0-9_\\./]+)", beginCaptures: { 1: { name: "support.function.handlebars" }, 2: { name: "support.class.handlebars" } }, end: "(\\}\\})", endCaptures: { 1: { name: "support.function.handlebars" } }, name: "meta.preprocessor.handlebars" }] }, handlebars_attribute: { patterns: [{ include: "#handlebars_attribute_name" }, { include: "#handlebars_attribute_value" }] }, handlebars_attribute_name: { begin: "\\b([-a-zA-Z0-9_\\.]+)\\b=", captures: { 1: { name: "variable.parameter.handlebars" } }, end: `(?='|"|)`, name: "entity.other.attribute-name.handlebars" }, handlebars_attribute_value: { begin: "([-a-zA-Z0-9_\\./]+)\\b", captures: { 1: { name: "variable.parameter.handlebars" } }, end: `('|"|)`, name: "entity.other.attribute-value.handlebars", patterns: [{ include: "#string" }] }, html_tags: { patterns: [{ begin: "(<)([a-zA-Z0-9:-]+)(?=[^>]*></\\2>)", beginCaptures: { 1: { name: "punctuation.definition.tag.html" }, 2: { name: "entity.name.tag.html" } }, end: "(>(<)/)(\\2)(>)", endCaptures: { 1: { name: "punctuation.definition.tag.html" }, 2: { name: "meta.scope.between-tag-pair.html" }, 3: { name: "entity.name.tag.html" }, 4: { name: "punctuation.definition.tag.html" } }, name: "meta.tag.any.html", patterns: [{ include: "#tag-stuff" }] }, { begin: "(<\\?)(xml)", captures: { 1: { name: "punctuation.definition.tag.html" }, 2: { name: "entity.name.tag.xml.html" } }, end: "(\\?>)", name: "meta.tag.preprocessor.xml.html", patterns: [{ include: "#tag_generic_attribute" }, { include: "#string" }] }, { begin: "<!--", captures: { 0: { name: "punctuation.definition.comment.html" } }, end: "--\\s*>", name: "comment.block.html", patterns: [{ match: "--", name: "invalid.illegal.bad-comments-or-CDATA.html" }] }, { begin: "<!", captures: { 0: { name: "punctuation.definition.tag.html" } }, end: ">", name: "meta.tag.sgml.html", patterns: [{ begin: "(DOCTYPE|doctype)", captures: { 1: { name: "entity.name.tag.doctype.html" } }, end: "(?=>)", name: "meta.tag.sgml.doctype.html", patterns: [{ match: '"[^">]*"', name: "string.quoted.double.doctype.identifiers-and-DTDs.html" }] }, { begin: "\\[CDATA\\[", end: "]](?=>)", name: "constant.other.inline-data.html" }, { match: "(\\s*)(?!--|>)\\S(\\s*)", name: "invalid.illegal.bad-comments-or-CDATA.html" }] }, { begin: "(?:^\\s+)?(<)((?i:style))\\b(?![^>]*/>)", captures: { 1: { name: "punctuation.definition.tag.html" }, 2: { name: "entity.name.tag.style.html" }, 3: { name: "punctuation.definition.tag.html" } }, end: "(</)((?i:style))(>)(?:\\s*\\n)?", name: "source.css.embedded.html", patterns: [{ include: "#tag-stuff" }, { begin: "(>)", beginCaptures: { 1: { name: "punctuation.definition.tag.html" } }, end: "(?=</(?i:style))", patterns: [{ include: "source.css" }] }] }, { begin: "(?:^\\s+)?(<)((?i:script))\\b(?![^>]*/>)", beginCaptures: { 1: { name: "punctuation.definition.tag.html" }, 2: { name: "entity.name.tag.script.html" } }, end: "(?<=</(script|SCRIPT))(>)(?:\\s*\\n)?", endCaptures: { 2: { name: "punctuation.definition.tag.html" } }, name: "source.js.embedded.html", patterns: [{ include: "#tag-stuff" }, { begin: "(?<!</(?:script|SCRIPT))(>)", captures: { 1: { name: "punctuation.definition.tag.html" }, 2: { name: "entity.name.tag.script.html" } }, end: "(</)((?i:script))", patterns: [{ captures: { 1: { name: "punctuation.definition.comment.js" } }, match: "(//).*?((?=<\/script)|$\\n?)", name: "comment.line.double-slash.js" }, { begin: "/\\*", captures: { 0: { name: "punctuation.definition.comment.js" } }, end: "\\*/|(?=<\/script)", name: "comment.block.js" }, { include: "source.js" }] }] }, { begin: "(</?)((?i:body|head|html)\\b)", captures: { 1: { name: "punctuation.definition.tag.html" }, 2: { name: "entity.name.tag.structure.any.html" } }, end: "(>)", name: "meta.tag.structure.any.html", patterns: [{ include: "#tag-stuff" }] }, { begin: "(</?)((?i:address|blockquote|dd|div|header|section|footer|aside|nav|dl|dt|fieldset|form|frame|frameset|h1|h2|h3|h4|h5|h6|iframe|noframes|object|ol|p|ul|applet|center|dir|hr|menu|pre)\\b)", captures: { 1: { name: "punctuation.definition.tag.html" }, 2: { name: "entity.name.tag.block.any.html" } }, end: "(>)", name: "meta.tag.block.any.html", patterns: [{ include: "#tag-stuff" }] }, { begin: "(</?)((?i:a|abbr|acronym|area|b|base|basefont|bdo|big|br|button|caption|cite|code|col|colgroup|del|dfn|em|font|head|html|i|img|input|ins|isindex|kbd|label|legend|li|link|map|meta|noscript|optgroup|option|param|q|s|samp|script|select|small|span|strike|strong|style|sub|sup|table|tbody|td|textarea|tfoot|th|thead|title|tr|tt|u|var)\\b)", captures: { 1: { name: "punctuation.definition.tag.html" }, 2: { name: "entity.name.tag.inline.any.html" } }, end: "((?: ?/)?>)", name: "meta.tag.inline.any.html", patterns: [{ include: "#tag-stuff" }] }, { begin: "(</?)([a-zA-Z0-9:-]+)", captures: { 1: { name: "punctuation.definition.tag.html" }, 2: { name: "entity.name.tag.other.html" } }, end: "(>)", name: "meta.tag.other.html", patterns: [{ include: "#tag-stuff" }] }, { begin: "(</?)([a-zA-Z0-9{}:-]+)", captures: { 1: { name: "punctuation.definition.tag.html" }, 2: { name: "entity.name.tag.tokenised.html" } }, end: "(>)", name: "meta.tag.tokenised.html", patterns: [{ include: "#tag-stuff" }] }, { include: "#entities" }, { match: "<>", name: "invalid.illegal.incomplete.html" }, { match: "<", name: "invalid.illegal.bad-angle-bracket.html" }] }, inline_script: { begin: `(?:^\\s+)?(<)((?i:script))\\b(?:.*(type)=(["'](?:text/x-handlebars-template|text/x-handlebars|text/template|x-tmpl-handlebars)["']))(?![^>]*/>)`, beginCaptures: { 1: { name: "punctuation.definition.tag.html" }, 2: { name: "entity.name.tag.script.html" }, 3: { name: "entity.other.attribute-name.html" }, 4: { name: "string.quoted.double.html" } }, end: "(?<=</(script|SCRIPT))(>)(?:\\s*\\n)?", endCaptures: { 2: { name: "punctuation.definition.tag.html" } }, name: "source.handlebars.embedded.html", patterns: [{ include: "#tag-stuff" }, { begin: "(?<!</(?:script|SCRIPT))(>)", captures: { 1: { name: "punctuation.definition.tag.html" }, 2: { name: "entity.name.tag.script.html" } }, end: "(</)((?i:script))", patterns: [{ include: "#block_comments" }, { include: "#comments" }, { include: "#block_helper" }, { include: "#end_block" }, { include: "#else_token" }, { include: "#partial_and_var" }, { include: "#html_tags" }, { include: "text.html.basic" }] }] }, partial_and_var: { begin: "(\\{\\{~?\\{*(>|!<)*)\\s*(@?[-a-zA-Z0-9$_\\./]+)*", beginCaptures: { 1: { name: "support.constant.handlebars" }, 3: { name: "variable.parameter.handlebars" } }, end: "(~?\\}\\}\\}*)", endCaptures: { 1: { name: "support.constant.handlebars" } }, name: "meta.function.inline.other.handlebars", patterns: [{ include: "#string" }, { include: "#handlebars_attribute" }] }, string: { patterns: [{ include: "#string-single-quoted" }, { include: "#string-double-quoted" }] }, "string-double-quoted": { begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.html" } }, end: '"', endCaptures: { 0: { name: "punctuation.definition.string.end.html" } }, name: "string.quoted.double.handlebars", patterns: [{ include: "#escaped-double-quote" }, { include: "#block_comments" }, { include: "#comments" }, { include: "#block_helper" }, { include: "#else_token" }, { include: "#end_block" }, { include: "#partial_and_var" }] }, "string-single-quoted": { begin: "'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.html" } }, end: "'", endCaptures: { 0: { name: "punctuation.definition.string.end.html" } }, name: "string.quoted.single.handlebars", patterns: [{ include: "#escaped-single-quote" }, { include: "#block_comments" }, { include: "#comments" }, { include: "#block_helper" }, { include: "#else_token" }, { include: "#end_block" }, { include: "#partial_and_var" }] }, "tag-stuff": { patterns: [{ include: "#tag_id_attribute" }, { include: "#tag_generic_attribute" }, { include: "#string" }, { include: "#block_comments" }, { include: "#comments" }, { include: "#block_helper" }, { include: "#end_block" }, { include: "#else_token" }, { include: "#partial_and_var" }] }, tag_generic_attribute: { begin: "\\b([a-zA-Z0-9_-]+)\\b\\s*(=)", captures: { 1: { name: "entity.other.attribute-name.generic.html" }, 2: { name: "punctuation.separator.key-value.html" } }, end: `(?<='|"|)`, name: "entity.other.attribute-name.html", patterns: [{ include: "#string" }] }, tag_id_attribute: { begin: "\\b(id)\\b\\s*(=)", captures: { 1: { name: "entity.other.attribute-name.id.html" }, 2: { name: "punctuation.separator.key-value.html" } }, end: `(?<='|"|)`, name: "meta.attribute-with-value.id.html", patterns: [{ include: "#string" }] }, yfm: { patterns: [{ begin: "(?<!\\s)---\\n$", end: "^---\\s", name: "markup.raw.yaml.front-matter", patterns: [{ include: "source.yaml" }] }] } }, scopeName: "text.html.handlebars", embeddedLangs: ["html", "css", "javascript", "yaml"], aliases: ["hbs"] });
var qe = [
  ...t,
  ...n,
  ...e,
  ...u,
  Ee
];
const ze = Object.freeze({ displayName: "HashiCorp HCL", fileTypes: ["hcl"], name: "hcl", patterns: [{ include: "#comments" }, { include: "#attribute_definition" }, { include: "#block" }, { include: "#expressions" }], repository: { attribute_access: { begin: "\\.(?!\\*)", beginCaptures: { 0: { name: "keyword.operator.accessor.hcl" } }, comment: "Matches traversal attribute access such as .attr", end: "[[:alpha:]][\\w-]*|\\d*", endCaptures: { 0: { patterns: [{ comment: "Attribute name", match: "(?!null|false|true)[[:alpha:]][\\w-]*", name: "variable.other.member.hcl" }, { comment: "Optional attribute index", match: "\\d+", name: "constant.numeric.integer.hcl" }] } } }, attribute_definition: { captures: { 1: { name: "punctuation.section.parens.begin.hcl" }, 2: { name: "variable.other.readwrite.hcl" }, 3: { name: "punctuation.section.parens.end.hcl" }, 4: { name: "keyword.operator.assignment.hcl" } }, comment: 'Identifier "=" with optional parens', match: "(\\()?(\\b(?!null\\b|false\\b|true\\b)[[:alpha:]][[:alnum:]_-]*)(\\))?\\s*(\\=(?!\\=|\\>))\\s*", name: "variable.declaration.hcl" }, attribute_splat: { begin: "\\.", beginCaptures: { 0: { name: "keyword.operator.accessor.hcl" } }, comment: "Legacy attribute-only splat", end: "\\*", endCaptures: { 0: { name: "keyword.operator.splat.hcl" } } }, block: { begin: "([\\w][\\-\\w]*)([^?\\r\\n]*)(\\{)", beginCaptures: { 1: { patterns: [{ comment: "Block type", match: "\\b(?!null|false|true)[[:alpha:]][[:alnum:]_-]*\\b", name: "entity.name.type.hcl" }] }, 2: { patterns: [{ comment: "Block label (String Literal)", match: '\\"[^\\"\\r\\n]*\\"', name: "variable.other.enummember.hcl" }, { comment: "Block label (Indentifier)", match: "[[:alpha:]][[:alnum:]_-]*", name: "variable.other.enummember.hcl" }] }, 3: { name: "punctuation.section.block.begin.hcl" } }, comment: 'This will match HCL blocks like `thing1 "one" "two" {` or `thing2 {`', end: "\\}", endCaptures: { 0: { name: "punctuation.section.block.end.hcl" } }, name: "meta.block.hcl", patterns: [{ include: "#comments" }, { include: "#attribute_definition" }, { include: "#expressions" }, { include: "#block" }] }, block_inline_comments: { begin: "/\\*", captures: { 0: { name: "punctuation.definition.comment.hcl" } }, comment: "Inline comments start with the /* sequence and end with the */ sequence, and may have any characters within except the ending sequence. An inline comment is considered equivalent to a whitespace sequence", end: "\\*/", name: "comment.block.hcl" }, brackets: { begin: "\\[", beginCaptures: { 0: { name: "punctuation.section.brackets.begin.hcl" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.section.brackets.end.hcl" } }, patterns: [{ comment: "Splat operator", match: "\\*", name: "keyword.operator.splat.hcl" }, { include: "#comma" }, { include: "#comments" }, { include: "#inline_for_expression" }, { include: "#inline_if_expression" }, { include: "#expressions" }, { include: "#local_identifiers" }] }, char_escapes: { comment: "Character Escapes", match: '\\\\[nrt"\\\\]|\\\\u(\\h{8}|\\h{4})', name: "constant.character.escape.hcl" }, comma: { comment: "Commas - used in certain expressions", match: "\\,", name: "punctuation.separator.hcl" }, comments: { patterns: [{ include: "#hash_line_comments" }, { include: "#double_slash_line_comments" }, { include: "#block_inline_comments" }] }, double_slash_line_comments: { begin: "//", captures: { 0: { name: "punctuation.definition.comment.hcl" } }, comment: "Line comments start with // sequence and end with the next newline sequence. A line comment is considered equivalent to a newline sequence", end: "$\\n?", name: "comment.line.double-slash.hcl" }, expressions: { patterns: [{ include: "#literal_values" }, { include: "#operators" }, { include: "#tuple_for_expression" }, { include: "#object_for_expression" }, { include: "#brackets" }, { include: "#objects" }, { include: "#attribute_access" }, { include: "#attribute_splat" }, { include: "#functions" }, { include: "#parens" }] }, for_expression_body: { patterns: [{ comment: "in keyword", match: "\\bin\\b", name: "keyword.operator.word.hcl" }, { comment: "if keyword", match: "\\bif\\b", name: "keyword.control.conditional.hcl" }, { match: "\\:", name: "keyword.operator.hcl" }, { include: "#expressions" }, { include: "#comments" }, { include: "#comma" }, { include: "#local_identifiers" }] }, functions: { begin: "([:\\-\\w]+)(\\()", beginCaptures: { 1: { patterns: [{ match: "\\b[[:alpha:]][\\w_-]*::([[:alpha:]][\\w_-]*::)?[[:alpha:]][\\w_-]*\\b", name: "support.function.namespaced.hcl" }, { match: "\\b[[:alpha:]][\\w_-]*\\b", name: "support.function.builtin.hcl" }] }, 2: { name: "punctuation.section.parens.begin.hcl" } }, comment: "Built-in function calls", end: "\\)", endCaptures: { 0: { name: "punctuation.section.parens.end.hcl" } }, name: "meta.function-call.hcl", patterns: [{ include: "#comments" }, { include: "#expressions" }, { include: "#comma" }] }, hash_line_comments: { begin: "#", captures: { 0: { name: "punctuation.definition.comment.hcl" } }, comment: "Line comments start with # sequence and end with the next newline sequence. A line comment is considered equivalent to a newline sequence", end: "$\\n?", name: "comment.line.number-sign.hcl" }, hcl_type_keywords: { comment: "Type keywords known to HCL.", match: "\\b(any|string|number|bool|list|set|map|tuple|object)\\b", name: "storage.type.hcl" }, heredoc: { begin: "(\\<\\<\\-?)\\s*(\\w+)\\s*$", beginCaptures: { 1: { name: "keyword.operator.heredoc.hcl" }, 2: { name: "keyword.control.heredoc.hcl" } }, comment: "String Heredoc", end: "^\\s*\\2\\s*$", endCaptures: { 0: { name: "keyword.control.heredoc.hcl" } }, name: "string.unquoted.heredoc.hcl", patterns: [{ include: "#string_interpolation" }] }, inline_for_expression: { captures: { 1: { name: "keyword.control.hcl" }, 2: { patterns: [{ match: "\\=\\>", name: "storage.type.function.hcl" }, { include: "#for_expression_body" }] } }, match: "(for)\\b(.*)\\n" }, inline_if_expression: { begin: "(if)\\b", beginCaptures: { 1: { name: "keyword.control.conditional.hcl" } }, end: "\\n", patterns: [{ include: "#expressions" }, { include: "#comments" }, { include: "#comma" }, { include: "#local_identifiers" }] }, language_constants: { comment: "Language Constants", match: "\\b(true|false|null)\\b", name: "constant.language.hcl" }, literal_values: { patterns: [{ include: "#numeric_literals" }, { include: "#language_constants" }, { include: "#string_literals" }, { include: "#heredoc" }, { include: "#hcl_type_keywords" }] }, local_identifiers: { comment: "Local Identifiers", match: "\\b(?!null|false|true)[[:alpha:]][[:alnum:]_-]*\\b", name: "variable.other.readwrite.hcl" }, numeric_literals: { patterns: [{ captures: { 1: { name: "punctuation.separator.exponent.hcl" } }, comment: "Integer, no fraction, optional exponent", match: "\\b\\d+([Ee][+-]?)\\d+\\b", name: "constant.numeric.float.hcl" }, { captures: { 1: { name: "punctuation.separator.decimal.hcl" }, 2: { name: "punctuation.separator.exponent.hcl" } }, comment: "Integer, fraction, optional exponent", match: "\\b\\d+(\\.)\\d+(?:([Ee][+-]?)\\d+)?\\b", name: "constant.numeric.float.hcl" }, { comment: "Integers", match: "\\b\\d+\\b", name: "constant.numeric.integer.hcl" }] }, object_for_expression: { begin: "(\\{)\\s?(for)\\b", beginCaptures: { 1: { name: "punctuation.section.braces.begin.hcl" }, 2: { name: "keyword.control.hcl" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.section.braces.end.hcl" } }, patterns: [{ match: "\\=\\>", name: "storage.type.function.hcl" }, { include: "#for_expression_body" }] }, object_key_values: { patterns: [{ include: "#comments" }, { include: "#literal_values" }, { include: "#operators" }, { include: "#tuple_for_expression" }, { include: "#object_for_expression" }, { include: "#heredoc" }, { include: "#functions" }] }, objects: { begin: "\\{", beginCaptures: { 0: { name: "punctuation.section.braces.begin.hcl" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.section.braces.end.hcl" } }, name: "meta.braces.hcl", patterns: [{ include: "#comments" }, { include: "#objects" }, { include: "#inline_for_expression" }, { include: "#inline_if_expression" }, { captures: { 1: { name: "meta.mapping.key.hcl variable.other.readwrite.hcl" }, 2: { name: "keyword.operator.assignment.hcl" } }, comment: "Literal, named object key", match: "\\b((?!null|false|true)[[:alpha:]][[:alnum:]_-]*)\\s*(\\=(?!=))\\s*" }, { captures: { 1: { name: "meta.mapping.key.hcl string.quoted.double.hcl" }, 2: { name: "punctuation.definition.string.begin.hcl" }, 3: { name: "punctuation.definition.string.end.hcl" }, 4: { name: "keyword.operator.hcl" } }, comment: "String object key", match: '^\\s*((").*("))\\s*(\\=)\\s*' }, { begin: "^\\s*\\(", beginCaptures: { 0: { name: "punctuation.section.parens.begin.hcl" } }, comment: "Computed object key (any expression between parens)", end: "(\\))\\s*(=|:)\\s*", endCaptures: { 1: { name: "punctuation.section.parens.end.hcl" }, 2: { name: "keyword.operator.hcl" } }, name: "meta.mapping.key.hcl", patterns: [{ include: "#attribute_access" }, { include: "#attribute_splat" }] }, { include: "#object_key_values" }] }, operators: { patterns: [{ match: "\\>\\=", name: "keyword.operator.hcl" }, { match: "\\<\\=", name: "keyword.operator.hcl" }, { match: "\\=\\=", name: "keyword.operator.hcl" }, { match: "\\!\\=", name: "keyword.operator.hcl" }, { match: "\\+", name: "keyword.operator.arithmetic.hcl" }, { match: "\\-", name: "keyword.operator.arithmetic.hcl" }, { match: "\\*", name: "keyword.operator.arithmetic.hcl" }, { match: "\\/", name: "keyword.operator.arithmetic.hcl" }, { match: "\\%", name: "keyword.operator.arithmetic.hcl" }, { match: "\\&\\&", name: "keyword.operator.logical.hcl" }, { match: "\\|\\|", name: "keyword.operator.logical.hcl" }, { match: "\\!", name: "keyword.operator.logical.hcl" }, { match: "\\>", name: "keyword.operator.hcl" }, { match: "\\<", name: "keyword.operator.hcl" }, { match: "\\?", name: "keyword.operator.hcl" }, { match: "\\.\\.\\.", name: "keyword.operator.hcl" }, { match: "\\:", name: "keyword.operator.hcl" }, { match: "\\=\\>", name: "keyword.operator.hcl" }] }, parens: { begin: "\\(", beginCaptures: { 0: { name: "punctuation.section.parens.begin.hcl" } }, comment: "Parens - matched *after* function syntax", end: "\\)", endCaptures: { 0: { name: "punctuation.section.parens.end.hcl" } }, patterns: [{ include: "#comments" }, { include: "#expressions" }] }, string_interpolation: { begin: "(?<![%$])([%$]{)", beginCaptures: { 1: { name: "keyword.other.interpolation.begin.hcl" } }, comment: "String interpolation", end: "\\}", endCaptures: { 0: { name: "keyword.other.interpolation.end.hcl" } }, name: "meta.interpolation.hcl", patterns: [{ comment: "Trim left whitespace", match: "\\~\\s", name: "keyword.operator.template.left.trim.hcl" }, { comment: "Trim right whitespace", match: "\\s\\~", name: "keyword.operator.template.right.trim.hcl" }, { comment: "if/else/endif and for/in/endfor directives", match: "\\b(if|else|endif|for|in|endfor)\\b", name: "keyword.control.hcl" }, { include: "#expressions" }, { include: "#local_identifiers" }] }, string_literals: { begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.hcl" } }, comment: "Strings", end: '"', endCaptures: { 0: { name: "punctuation.definition.string.end.hcl" } }, name: "string.quoted.double.hcl", patterns: [{ include: "#string_interpolation" }, { include: "#char_escapes" }] }, tuple_for_expression: { begin: "(\\[)\\s?(for)\\b", beginCaptures: { 1: { name: "punctuation.section.brackets.begin.hcl" }, 2: { name: "keyword.control.hcl" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.section.brackets.end.hcl" } }, patterns: [{ include: "#for_expression_body" }] } }, scopeName: "source.hcl" });
var Se = [
  ze
];
const Ne = Object.freeze({ displayName: "HTML (Derivative)", injections: { "R:text.html - (comment.block, text.html meta.embedded, meta.tag.*.*.html, meta.tag.*.*.*.html, meta.tag.*.*.*.*.html)": { comment: "Uses R: to ensure this matches after any other injections.", patterns: [{ match: "<", name: "invalid.illegal.bad-angle-bracket.html" }] } }, name: "html-derivative", patterns: [{ include: "text.html.basic#core-minus-invalid" }, { begin: "(</?)(\\w[^\\s>]*)(?<!/)", beginCaptures: { 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" } }, end: "((?: ?/)?>)", endCaptures: { 1: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.other.unrecognized.html.derivative", patterns: [{ include: "text.html.basic#attribute" }] }], scopeName: "text.html.derivative", embeddedLangs: ["html"] });
var C = [
  ...t,
  Ne
];
const Le = Object.freeze({ displayName: "HTTP", fileTypes: ["http", "rest"], name: "http", patterns: [{ begin: "^\\s*(?=curl)", end: "^\\s*(\\#{3,}.*?)?\\s*$", endCaptures: { 0: { name: "comment.line.sharp.http" } }, name: "http.request.curl", patterns: [{ include: "source.shell" }] }, { begin: "\\s*(?=(\\[|{[^{]))", end: "^\\s*(\\#{3,}.*?)?\\s*$", endCaptures: { 0: { name: "comment.line.sharp.http" } }, name: "http.request.body.json", patterns: [{ include: "source.json" }] }, { begin: "^\\s*(?=<\\S)", end: "^\\s*(\\#{3,}.*?)?\\s*$", endCaptures: { 0: { name: "comment.line.sharp.http" } }, name: "http.request.body.xml", patterns: [{ include: "text.xml" }] }, { begin: "\\s*(?=(query|mutation))", end: "^\\s*(\\#{3,}.*?)?\\s*$", endCaptures: { 0: { name: "comment.line.sharp.http" } }, name: "http.request.body.graphql", patterns: [{ include: "source.graphql" }] }, { begin: "\\s*(?=(query|mutation))", end: "^\\{\\s*$", name: "http.request.body.graphql", patterns: [{ include: "source.graphql" }] }, { include: "#metadata" }, { include: "#comments" }, { captures: { 1: { name: "keyword.other.http" }, 2: { name: "variable.other.http" }, 3: { name: "string.other.http" } }, match: "^\\s*(@)([^\\s=]+)\\s*=\\s*(.*?)\\s*$", name: "http.filevariable" }, { captures: { 1: { name: "keyword.operator.http" }, 2: { name: "variable.other.http" }, 3: { name: "string.other.http" } }, match: "^\\s*(\\?|&)([^=\\s]+)=(.*)$", name: "http.query" }, { captures: { 1: { name: "entity.name.tag.http" }, 2: { name: "keyword.other.http" }, 3: { name: "string.other.http" } }, match: "^([\\w\\-]+)\\s*(\\:)\\s*([^/].*?)\\s*$", name: "http.headers" }, { include: "#request-line" }, { include: "#response-line" }], repository: { comments: { patterns: [{ match: "^\\s*\\#{1,}.*$", name: "comment.line.sharp.http" }, { match: "^\\s*\\/{2,}.*$", name: "comment.line.double-slash.http" }] }, metadata: { patterns: [{ captures: { 1: { name: "entity.other.attribute-name" }, 2: { name: "punctuation.definition.block.tag.metadata" }, 3: { name: "entity.name.type.http" } }, match: "^\\s*\\#{1,}\\s+(?:((@)name)\\s+([^\\s\\.]+))$", name: "comment.line.sharp.http" }, { captures: { 1: { name: "entity.other.attribute-name" }, 2: { name: "punctuation.definition.block.tag.metadata" }, 3: { name: "entity.name.type.http" } }, match: "^\\s*\\/{2,}\\s+(?:((@)name)\\s+([^\\s\\.]+))$", name: "comment.line.double-slash.http" }, { captures: { 1: { name: "entity.other.attribute-name" }, 2: { name: "punctuation.definition.block.tag.metadata" } }, match: "^\\s*\\#{1,}\\s+((@)note)\\s*$", name: "comment.line.sharp.http" }, { captures: { 1: { name: "entity.other.attribute-name" }, 2: { name: "punctuation.definition.block.tag.metadata" } }, match: "^\\s*\\/{2,}\\s+((@)note)\\s*$", name: "comment.line.double-slash.http" }, { captures: { 1: { name: "entity.other.attribute-name" }, 2: { name: "punctuation.definition.block.tag.metadata" }, 3: { name: "variable.other.http" }, 4: { name: "string.other.http" } }, match: "^\\s*\\#{1,}\\s+(?:((@)prompt)\\s+([^\\s]+)(?:\\s+(.*))?\\s*)$", name: "comment.line.sharp.http" }, { captures: { 1: { name: "entity.other.attribute-name" }, 2: { name: "punctuation.definition.block.tag.metadata" }, 3: { name: "variable.other.http" }, 4: { name: "string.other.http" } }, match: "^\\s*\\/{2,}\\s+(?:((@)prompt)\\s+([^\\s]+)(?:\\s+(.*))?\\s*)$", name: "comment.line.double-slash.http" }] }, protocol: { patterns: [{ captures: { 1: { name: "keyword.other.http" }, 2: { name: "constant.numeric.http" } }, match: "(HTTP)/(\\d+.\\d+)", name: "http.version" }] }, "request-line": { captures: { 1: { name: "keyword.control.http" }, 2: { name: "const.language.http" }, 3: { patterns: [{ include: "#protocol" }] } }, match: "(?i)^(?:(get|post|put|delete|patch|head|options|connect|trace|lock|unlock|propfind|proppatch|copy|move|mkcol|mkcalendar|acl|search)\\s+)?\\s*(.+?)(?:\\s+(HTTP\\/\\S+))?$", name: "http.requestline" }, "response-line": { captures: { 1: { patterns: [{ include: "#protocol" }] }, 2: { name: "constant.numeric.http" }, 3: { name: "string.other.http" } }, match: "(?i)^\\s*(HTTP\\/\\S+)\\s([1-5][0-9][0-9])\\s(.*)$", name: "http.responseLine" } }, scopeName: "source.http", embeddedLangs: ["shellscript", "json", "xml", "graphql"] });
var Te = [
  ...o,
  ...i,
  ...s,
  ...$,
  Le
];
const De = Object.freeze({ displayName: "INI", name: "ini", patterns: [{ begin: "(^[ \\t]+)?(?=#)", beginCaptures: { 1: { name: "punctuation.whitespace.comment.leading.ini" } }, end: "(?!\\G)", patterns: [{ begin: "#", beginCaptures: { 0: { name: "punctuation.definition.comment.ini" } }, end: "\\n", name: "comment.line.number-sign.ini" }] }, { begin: "(^[ \\t]+)?(?=;)", beginCaptures: { 1: { name: "punctuation.whitespace.comment.leading.ini" } }, end: "(?!\\G)", patterns: [{ begin: ";", beginCaptures: { 0: { name: "punctuation.definition.comment.ini" } }, end: "\\n", name: "comment.line.semicolon.ini" }] }, { captures: { 1: { name: "keyword.other.definition.ini" }, 2: { name: "punctuation.separator.key-value.ini" } }, match: "\\b([a-zA-Z0-9_.-]+)\\b\\s*(=)" }, { captures: { 1: { name: "punctuation.definition.entity.ini" }, 3: { name: "punctuation.definition.entity.ini" } }, match: "^(\\[)(.*?)(\\])", name: "entity.name.section.group-title.ini" }, { begin: "'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.ini" } }, end: "'", endCaptures: { 0: { name: "punctuation.definition.string.end.ini" } }, name: "string.quoted.single.ini", patterns: [{ match: "\\\\.", name: "constant.character.escape.ini" }] }, { begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.ini" } }, end: '"', endCaptures: { 0: { name: "punctuation.definition.string.end.ini" } }, name: "string.quoted.double.ini" }], scopeName: "source.ini", aliases: ["properties"] });
var Ze = [
  De
];
const We = Object.freeze({ displayName: "JSON5", fileTypes: ["json5"], name: "json5", patterns: [{ include: "#comments" }, { include: "#value" }], repository: { array: { begin: "\\[", beginCaptures: { 0: { name: "punctuation.definition.array.begin.json5" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.array.end.json5" } }, name: "meta.structure.array.json5", patterns: [{ include: "#comments" }, { include: "#value" }, { match: ",", name: "punctuation.separator.array.json5" }, { match: "[^\\s\\]]", name: "invalid.illegal.expected-array-separator.json5" }] }, comments: { patterns: [{ match: "/{2}.*", name: "comment.single.json5" }, { begin: "/\\*\\*(?!/)", captures: { 0: { name: "punctuation.definition.comment.json5" } }, end: "\\*/", name: "comment.block.documentation.json5" }, { begin: "/\\*", captures: { 0: { name: "punctuation.definition.comment.json5" } }, end: "\\*/", name: "comment.block.json5" }] }, constant: { match: "\\b(?:true|false|null|Infinity|NaN)\\b", name: "constant.language.json5" }, infinity: { match: "(-)*\\b(?:Infinity|NaN)\\b", name: "constant.language.json5" }, key: { name: "string.key.json5", patterns: [{ include: "#stringSingle" }, { include: "#stringDouble" }, { match: "[a-zA-Z0-9_-]", name: "string.key.json5" }] }, number: { patterns: [{ comment: "handles hexadecimal numbers", match: "(0x)[0-9a-fA-f]*", name: "constant.hex.numeric.json5" }, { comment: "handles integer and decimal numbers", match: "[+-.]?(?=[1-9]|0(?!\\d))\\d+(\\.\\d+)?([eE][+-]?\\d+)?", name: "constant.dec.numeric.json5" }] }, object: { begin: "\\{", beginCaptures: { 0: { name: "punctuation.definition.dictionary.begin.json5" } }, comment: "a json5 object", end: "\\}", endCaptures: { 0: { name: "punctuation.definition.dictionary.end.json5" } }, name: "meta.structure.dictionary.json5", patterns: [{ include: "#comments" }, { comment: "the json5 object key", include: "#key" }, { begin: ":", beginCaptures: { 0: { name: "punctuation.separator.dictionary.key-value.json5" } }, end: "(,)|(?=\\})", endCaptures: { 1: { name: "punctuation.separator.dictionary.pair.json5" } }, name: "meta.structure.dictionary.value.json5", patterns: [{ comment: "the json5 object value", include: "#value" }, { match: "[^\\s,]", name: "invalid.illegal.expected-dictionary-separator.json5" }] }, { match: "[^\\s\\}]", name: "invalid.illegal.expected-dictionary-separator.json5" }] }, stringDouble: { begin: '["]', beginCaptures: { 0: { name: "punctuation.definition.string.begin.json5" } }, end: '["]', endCaptures: { 0: { name: "punctuation.definition.string.end.json5" } }, name: "string.quoted.json5", patterns: [{ match: `(?x:
\\\\
(?:
["\\\\/bfnrt]
|
u
[0-9a-fA-F]{4}
)
)`, name: "constant.character.escape.json5" }, { match: "\\\\.", name: "invalid.illegal.unrecognized-string-escape.json5" }] }, stringSingle: { begin: "[']", beginCaptures: { 0: { name: "punctuation.definition.string.begin.json5" } }, end: "[']", endCaptures: { 0: { name: "punctuation.definition.string.end.json5" } }, name: "string.quoted.json5", patterns: [{ match: `(?x:
\\\\
(?:
["\\\\/bfnrt]
|
u
[0-9a-fA-F]{4}
)
)`, name: "constant.character.escape.json5" }, { match: "\\\\.", name: "invalid.illegal.unrecognized-string-escape.json5" }] }, value: { comment: "the 'value' diagram at http://json.org", patterns: [{ include: "#constant" }, { include: "#infinity" }, { include: "#number" }, { include: "#stringSingle" }, { include: "#stringDouble" }, { include: "#array" }, { include: "#object" }] } }, scopeName: "source.json5" });
var E = [
  We
];
const Ie = Object.freeze({ displayName: "JSON with Comments", name: "jsonc", patterns: [{ include: "#value" }], repository: { array: { begin: "\\[", beginCaptures: { 0: { name: "punctuation.definition.array.begin.json.comments" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.array.end.json.comments" } }, name: "meta.structure.array.json.comments", patterns: [{ include: "#value" }, { match: ",", name: "punctuation.separator.array.json.comments" }, { match: "[^\\s\\]]", name: "invalid.illegal.expected-array-separator.json.comments" }] }, comments: { patterns: [{ begin: "/\\*\\*(?!/)", captures: { 0: { name: "punctuation.definition.comment.json.comments" } }, end: "\\*/", name: "comment.block.documentation.json.comments" }, { begin: "/\\*", captures: { 0: { name: "punctuation.definition.comment.json.comments" } }, end: "\\*/", name: "comment.block.json.comments" }, { captures: { 1: { name: "punctuation.definition.comment.json.comments" } }, match: "(//).*$\\n?", name: "comment.line.double-slash.js" }] }, constant: { match: "\\b(?:true|false|null)\\b", name: "constant.language.json.comments" }, number: { match: `(?x)
-?
(?:
0
|
[1-9]
\\d*
)
(?:
(?:
\\.
\\d+
)?
(?:
[eE]
[+-]?
\\d+
)?
)?`, name: "constant.numeric.json.comments" }, object: { begin: "\\{", beginCaptures: { 0: { name: "punctuation.definition.dictionary.begin.json.comments" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.dictionary.end.json.comments" } }, name: "meta.structure.dictionary.json.comments", patterns: [{ comment: "the JSON object key", include: "#objectkey" }, { include: "#comments" }, { begin: ":", beginCaptures: { 0: { name: "punctuation.separator.dictionary.key-value.json.comments" } }, end: "(,)|(?=\\})", endCaptures: { 1: { name: "punctuation.separator.dictionary.pair.json.comments" } }, name: "meta.structure.dictionary.value.json.comments", patterns: [{ comment: "the JSON object value", include: "#value" }, { match: "[^\\s,]", name: "invalid.illegal.expected-dictionary-separator.json.comments" }] }, { match: "[^\\s\\}]", name: "invalid.illegal.expected-dictionary-separator.json.comments" }] }, objectkey: { begin: '"', beginCaptures: { 0: { name: "punctuation.support.type.property-name.begin.json.comments" } }, end: '"', endCaptures: { 0: { name: "punctuation.support.type.property-name.end.json.comments" } }, name: "string.json.comments support.type.property-name.json.comments", patterns: [{ include: "#stringcontent" }] }, string: { begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.json.comments" } }, end: '"', endCaptures: { 0: { name: "punctuation.definition.string.end.json.comments" } }, name: "string.quoted.double.json.comments", patterns: [{ include: "#stringcontent" }] }, stringcontent: { patterns: [{ match: `(?x)
\\\\
(?:
["\\\\/bfnrt]
|
u
[0-9a-fA-F]{4})`, name: "constant.character.escape.json.comments" }, { match: "\\\\.", name: "invalid.illegal.unrecognized-string-escape.json.comments" }] }, value: { patterns: [{ include: "#constant" }, { include: "#number" }, { include: "#string" }, { include: "#array" }, { include: "#object" }, { include: "#comments" }] } }, scopeName: "source.json.comments" });
var q = [
  Ie
];
const Pe = Object.freeze({ displayName: "JSON Lines", name: "jsonl", patterns: [{ include: "#value" }], repository: { array: { begin: "\\[", beginCaptures: { 0: { name: "punctuation.definition.array.begin.json.lines" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.array.end.json.lines" } }, name: "meta.structure.array.json.lines", patterns: [{ include: "#value" }, { match: ",", name: "punctuation.separator.array.json.lines" }, { match: "[^\\s\\]]", name: "invalid.illegal.expected-array-separator.json.lines" }] }, comments: { patterns: [{ begin: "/\\*\\*(?!/)", captures: { 0: { name: "punctuation.definition.comment.json.lines" } }, end: "\\*/", name: "comment.block.documentation.json.lines" }, { begin: "/\\*", captures: { 0: { name: "punctuation.definition.comment.json.lines" } }, end: "\\*/", name: "comment.block.json.lines" }, { captures: { 1: { name: "punctuation.definition.comment.json.lines" } }, match: "(//).*$\\n?", name: "comment.line.double-slash.js" }] }, constant: { match: "\\b(?:true|false|null)\\b", name: "constant.language.json.lines" }, number: { match: `(?x)
-?
(?:
0
|
[1-9]
\\d*
)
(?:
(?:
\\.
\\d+
)?
(?:
[eE]
[+-]?
\\d+
)?
)?`, name: "constant.numeric.json.lines" }, object: { begin: "\\{", beginCaptures: { 0: { name: "punctuation.definition.dictionary.begin.json.lines" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.dictionary.end.json.lines" } }, name: "meta.structure.dictionary.json.lines", patterns: [{ comment: "the JSON object key", include: "#objectkey" }, { include: "#comments" }, { begin: ":", beginCaptures: { 0: { name: "punctuation.separator.dictionary.key-value.json.lines" } }, end: "(,)|(?=\\})", endCaptures: { 1: { name: "punctuation.separator.dictionary.pair.json.lines" } }, name: "meta.structure.dictionary.value.json.lines", patterns: [{ comment: "the JSON object value", include: "#value" }, { match: "[^\\s,]", name: "invalid.illegal.expected-dictionary-separator.json.lines" }] }, { match: "[^\\s\\}]", name: "invalid.illegal.expected-dictionary-separator.json.lines" }] }, objectkey: { begin: '"', beginCaptures: { 0: { name: "punctuation.support.type.property-name.begin.json.lines" } }, end: '"', endCaptures: { 0: { name: "punctuation.support.type.property-name.end.json.lines" } }, name: "string.json.lines support.type.property-name.json.lines", patterns: [{ include: "#stringcontent" }] }, string: { begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.json.lines" } }, end: '"', endCaptures: { 0: { name: "punctuation.definition.string.end.json.lines" } }, name: "string.quoted.double.json.lines", patterns: [{ include: "#stringcontent" }] }, stringcontent: { patterns: [{ match: `(?x)
\\\\
(?:
["\\\\/bfnrt]
|
u
[0-9a-fA-F]{4})`, name: "constant.character.escape.json.lines" }, { match: "\\\\.", name: "invalid.illegal.unrecognized-string-escape.json.lines" }] }, value: { patterns: [{ include: "#constant" }, { include: "#number" }, { include: "#string" }, { include: "#array" }, { include: "#object" }, { include: "#comments" }] } }, scopeName: "source.json.lines" });
var Re = [
  Pe
];
const Ue = Object.freeze({ displayName: "Kotlin", fileTypes: ["kt", "kts"], name: "kotlin", patterns: [{ include: "#import" }, { include: "#package" }, { include: "#code" }], repository: { "annotation-simple": { match: "(?<!\\w)@[\\w\\.]+\\b(?!:)", name: "entity.name.type.annotation.kotlin" }, "annotation-site": { begin: "(?<!\\w)(@\\w+):\\s*(?!\\[)", beginCaptures: { 1: { name: "entity.name.type.annotation-site.kotlin" } }, end: "$", patterns: [{ include: "#unescaped-annotation" }] }, "annotation-site-list": { begin: "(?<!\\w)(@\\w+):\\s*\\[", beginCaptures: { 1: { name: "entity.name.type.annotation-site.kotlin" } }, end: "\\]", patterns: [{ include: "#unescaped-annotation" }] }, "binary-literal": { match: "0(b|B)[01][01_]*", name: "constant.numeric.binary.kotlin" }, "boolean-literal": { match: "\\b(true|false)\\b", name: "constant.language.boolean.kotlin" }, character: { begin: "'", end: "'", name: "string.quoted.single.kotlin", patterns: [{ match: "\\\\.", name: "constant.character.escape.kotlin" }] }, "class-declaration": { captures: { 1: { name: "keyword.hard.class.kotlin" }, 2: { name: "entity.name.type.class.kotlin" }, 3: { patterns: [{ include: "#type-parameter" }] } }, match: "\\b(class|(?:fun\\s+)?interface)\\s+(\\b\\w+\\b|`[^`]+`)\\s*(?<GROUP><([^<>]|\\g<GROUP>)+>)?" }, code: { patterns: [{ include: "#comments" }, { include: "#keywords" }, { include: "#annotation-simple" }, { include: "#annotation-site-list" }, { include: "#annotation-site" }, { include: "#class-declaration" }, { include: "#object" }, { include: "#type-alias" }, { include: "#function" }, { include: "#variable-declaration" }, { include: "#type-constraint" }, { include: "#type-annotation" }, { include: "#function-call" }, { include: "#method-reference" }, { include: "#key" }, { include: "#string" }, { include: "#string-empty" }, { include: "#string-multiline" }, { include: "#character" }, { include: "#lambda-arrow" }, { include: "#operators" }, { include: "#self-reference" }, { include: "#decimal-literal" }, { include: "#hex-literal" }, { include: "#binary-literal" }, { include: "#boolean-literal" }, { include: "#null-literal" }] }, "comment-block": { begin: "/\\*(?!\\*)", end: "\\*/", name: "comment.block.kotlin" }, "comment-javadoc": { patterns: [{ begin: "/\\*\\*", end: "\\*/", name: "comment.block.javadoc.kotlin", patterns: [{ match: "@(return|constructor|receiver|sample|see|author|since|suppress)\\b", name: "keyword.other.documentation.javadoc.kotlin" }, { captures: { 1: { name: "keyword.other.documentation.javadoc.kotlin" }, 2: { name: "variable.parameter.kotlin" } }, match: "(@param|@property)\\s+(\\S+)" }, { captures: { 1: { name: "keyword.other.documentation.javadoc.kotlin" }, 2: { name: "variable.parameter.kotlin" } }, match: "(@param)\\[(\\S+)\\]" }, { captures: { 1: { name: "keyword.other.documentation.javadoc.kotlin" }, 2: { name: "entity.name.type.class.kotlin" } }, match: "(@(?:exception|throws))\\s+(\\S+)" }, { captures: { 1: { name: "keyword.other.documentation.javadoc.kotlin" }, 2: { name: "entity.name.type.class.kotlin" }, 3: { name: "variable.parameter.kotlin" } }, match: "{(@link)\\s+(\\S+)?#([\\w$]+\\s*\\([^\\(\\)]*\\)).*}" }] }] }, "comment-line": { begin: "//", end: "$", name: "comment.line.double-slash.kotlin" }, comments: { patterns: [{ include: "#comment-line" }, { include: "#comment-block" }, { include: "#comment-javadoc" }] }, "control-keywords": { match: "\\b(if|else|while|do|when|try|throw|break|continue|return|for)\\b", name: "keyword.control.kotlin" }, "decimal-literal": { match: "\\b\\d[\\d_]*(\\.[\\d_]+)?((e|E)\\d+)?(u|U)?(L|F|f)?\\b", name: "constant.numeric.decimal.kotlin" }, function: { captures: { 1: { name: "keyword.hard.fun.kotlin" }, 2: { patterns: [{ include: "#type-parameter" }] }, 4: { name: "entity.name.type.class.extension.kotlin" }, 5: { name: "entity.name.function.declaration.kotlin" } }, match: "\\b(fun)\\b\\s*(?<GROUP><([^<>]|\\g<GROUP>)+>)?\\s*(?:(?:(\\w+)\\.)?(\\b\\w+\\b|`[^`]+`))?" }, "function-call": { captures: { 1: { name: "entity.name.function.call.kotlin" }, 2: { patterns: [{ include: "#type-parameter" }] } }, match: "\\??\\.?(\\b\\w+\\b|`[^`]+`)\\s*(?<GROUP><([^<>]|\\g<GROUP>)+>)?\\s*(?=[({])" }, "hard-keywords": { match: "\\b(as|typeof|is|in)\\b", name: "keyword.hard.kotlin" }, "hex-literal": { match: "0(x|X)[A-Fa-f0-9][A-Fa-f0-9_]*(u|U)?", name: "constant.numeric.hex.kotlin" }, import: { begin: "\\b(import)\\b\\s*", beginCaptures: { 1: { name: "keyword.soft.kotlin" } }, contentName: "entity.name.package.kotlin", end: ";|$", name: "meta.import.kotlin", patterns: [{ include: "#comments" }, { include: "#hard-keywords" }, { match: "\\*", name: "variable.language.wildcard.kotlin" }] }, key: { captures: { 1: { name: "variable.parameter.kotlin" }, 2: { name: "keyword.operator.assignment.kotlin" } }, match: "\\b(\\w=)\\s*(=)" }, keywords: { patterns: [{ include: "#prefix-modifiers" }, { include: "#postfix-modifiers" }, { include: "#soft-keywords" }, { include: "#hard-keywords" }, { include: "#control-keywords" }] }, "lambda-arrow": { match: "->", name: "storage.type.function.arrow.kotlin" }, "method-reference": { captures: { 1: { name: "entity.name.function.reference.kotlin" } }, match: "\\??::(\\b\\w+\\b|`[^`]+`)" }, "null-literal": { match: "\\bnull\\b", name: "constant.language.null.kotlin" }, object: { captures: { 1: { name: "keyword.hard.object.kotlin" }, 2: { name: "entity.name.type.object.kotlin" } }, match: "\\b(object)(?:\\s+(\\b\\w+\\b|`[^`]+`))?" }, operators: { patterns: [{ match: "(===?|\\!==?|<=|>=|<|>)", name: "keyword.operator.comparison.kotlin" }, { match: "([+*/%-]=)", name: "keyword.operator.assignment.arithmetic.kotlin" }, { match: "(=)", name: "keyword.operator.assignment.kotlin" }, { match: "([+*/%-])", name: "keyword.operator.arithmetic.kotlin" }, { match: "(!|&&|\\|\\|)", name: "keyword.operator.logical.kotlin" }, { match: "(--|\\+\\+)", name: "keyword.operator.increment-decrement.kotlin" }, { match: "(\\.\\.)", name: "keyword.operator.range.kotlin" }] }, package: { begin: "\\b(package)\\b\\s*", beginCaptures: { 1: { name: "keyword.hard.package.kotlin" } }, contentName: "entity.name.package.kotlin", end: ";|$", name: "meta.package.kotlin", patterns: [{ include: "#comments" }] }, "postfix-modifiers": { match: "\\b(where|by|get|set)\\b", name: "storage.modifier.other.kotlin" }, "prefix-modifiers": { match: "\\b(abstract|final|enum|open|annotation|sealed|data|override|final|lateinit|private|protected|public|internal|inner|companion|noinline|crossinline|vararg|reified|tailrec|operator|infix|inline|external|const|suspend|value)\\b", name: "storage.modifier.other.kotlin" }, "self-reference": { match: "\\b(this|super)(@\\w+)?\\b", name: "variable.language.this.kotlin" }, "soft-keywords": { match: "\\b(init|catch|finally|field)\\b", name: "keyword.soft.kotlin" }, string: { begin: '(?<!")"(?!")', end: '"', name: "string.quoted.double.kotlin", patterns: [{ match: "\\\\.", name: "constant.character.escape.kotlin" }, { include: "#string-escape-simple" }, { include: "#string-escape-bracketed" }] }, "string-empty": { match: '(?<!")""(?!")', name: "string.quoted.double.kotlin" }, "string-escape-bracketed": { begin: "(?<!\\\\)(\\$\\{)", beginCaptures: { 1: { name: "punctuation.definition.template-expression.begin" } }, end: "(\\})", endCaptures: { 1: { name: "punctuation.definition.template-expression.end" } }, name: "meta.template.expression.kotlin", patterns: [{ include: "#code" }] }, "string-escape-simple": { match: "(?<!\\\\)\\$\\w+\\b", name: "variable.string-escape.kotlin" }, "string-multiline": { begin: '"""', end: '"""', name: "string.quoted.double.kotlin", patterns: [{ match: "\\\\.", name: "constant.character.escape.kotlin" }, { include: "#string-escape-simple" }, { include: "#string-escape-bracketed" }] }, "type-alias": { captures: { 1: { name: "keyword.hard.typealias.kotlin" }, 2: { name: "entity.name.type.kotlin" }, 3: { patterns: [{ include: "#type-parameter" }] } }, match: "\\b(typealias)\\s+(\\b\\w+\\b|`[^`]+`)\\s*(?<GROUP><([^<>]|\\g<GROUP>)+>)?" }, "type-annotation": { captures: { 0: { patterns: [{ include: "#type-parameter" }] } }, match: `(?<![:?]):\\s*(\\w|\\?|\\s|->|(?<GROUP>[<(]([^<>()"']|\\g<GROUP>)+[)>]))+` }, "type-parameter": { patterns: [{ match: "\\b\\w+\\b", name: "entity.name.type.kotlin" }, { match: "\\b(in|out)\\b", name: "storage.modifier.kotlin" }] }, "unescaped-annotation": { match: "\\b[\\w\\.]+\\b", name: "entity.name.type.annotation.kotlin" }, "variable-declaration": { captures: { 1: { name: "keyword.hard.kotlin" }, 2: { patterns: [{ include: "#type-parameter" }] } }, match: "\\b(val|var)\\b\\s*(?<GROUP><([^<>]|\\g<GROUP>)+>)?" } }, scopeName: "source.kotlin", aliases: ["kt", "kts"] });
var Oe = [
  Ue
];
const Be = Object.freeze({ displayName: "Kusto", fileTypes: ["csl", "kusto", "kql"], name: "kusto", patterns: [{ comment: "Tabular operators: common helper operators", match: "\\b(by|from|of|to|step|with)\\b", name: "keyword.other.operator.kusto" }, { comment: "Query statements: https://docs.microsoft.com/en-us/azure/kusto/query/statements", match: "\\b(let|set|alias|declare|pattern|query_parameters|restrict|access|set)\\b", name: "keyword.control.kusto" }, { comment: "https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/datatypes-string-operators", match: "\\b(and|or|has_all|has_any|matches|regex)\\b", name: "keyword.other.operator.kusto" }, { captures: { 1: { name: "support.function.kusto" }, 2: { patterns: [{ include: "#Strings" }] } }, comment: "https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/clusterfunction", match: "\\b(cluster|database)(?:\\s*\\(\\s*(.+?)\\s*\\))?(?!\\w)", name: "meta.special.database.kusto" }, { comment: "Special functions: https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/tablefunction", match: "\\b(external_table|materialized_view|materialize|table|toscalar)\\b", name: "support.function.kusto" }, { comment: "https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/betweenoperator", match: "(?<!\\w)(!?between)\\b", name: "keyword.other.operator.kusto" }, { captures: { 1: { name: "support.function.kusto" }, 2: { patterns: [{ include: "#Numeric" }] }, 3: { patterns: [{ include: "#Numeric" }] } }, comment: "https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/binoperators", match: "\\b(binary_and|binary_or|binary_shift_left|binary_shift_right|binary_xor)(?:\\s*\\(\\s*(\\w+)\\s*,\\s*(\\w+)\\s*\\))?(?!\\w)", name: "meta.scalar.bitwise.kusto" }, { captures: { 1: { name: "support.function.kusto" }, 2: { patterns: [{ include: "#Numeric" }] } }, comment: "https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/binary-notfunction", match: "\\b(binary_not|bitset_count_ones)(?:\\s*\\(\\s*(\\w+)\\s*\\))?(?!\\w)", name: "meta.scalar.bitwise.kusto" }, { comment: "https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/in-cs-operator", match: "(?<!\\w)(!?in~?)(?!\\w)", name: "keyword.other.operator.kusto" }, { comment: "https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/datatypes-string-operators", match: "(?<!\\w)(!?(?:contains|endswith|hasprefix|hassuffix|has|startswith)(?:_cs)?)(?!\\w)", name: "keyword.other.operator.kusto" }, { captures: { 1: { name: "support.function.kusto" }, 2: { patterns: [{ include: "#DateTimeTimeSpanDataTypes" }, { include: "#TimeSpanLiterals" }, { include: "#DateTimeTimeSpanFunctions" }, { include: "#Numeric" }] }, 3: { patterns: [{ include: "#DateTimeTimeSpanDataTypes" }, { include: "#TimeSpanLiterals" }, { include: "#DateTimeTimeSpanFunctions" }, { include: "#Numeric" }] }, 4: { patterns: [{ include: "#DateTimeTimeSpanDataTypes" }, { include: "#TimeSpanLiterals" }, { include: "#DateTimeTimeSpanFunctions" }, { include: "#Numeric" }] } }, comment: "https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/rangefunction", match: "\\b(range)\\s*\\((?:\\s*(\\w+(?:\\(.*?\\))?)\\s*,\\s*(\\w+(?:\\(.*?\\))?)\\s*,?(?:\\s*)?(\\w+(?:\\(.*?\\))?)?\\s*\\))?(?!\\w)", name: "meta.scalar.function.range.kusto" }, { comment: "https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/scalarfunctions", match: "\\b(abs|acos|around|array_concat|array_iff|array_index_of|array_length|array_reverse|array_rotate_left|array_rotate_right|array_shift_left|array_shift_right|array_slice|array_sort_asc|array_sort_desc|array_split|array_sum|asin|assert|atan2|atan|bag_has_key|bag_keys|bag_merge|bag_remove_keys|base64_decode_toarray|base64_decode_tostring|base64_decode_toguid|base64_encode_fromarray|base64_encode_tostring|base64_encode_fromguid|beta_cdf|beta_inv|beta_pdf|bin_at|bin_auto|case|ceiling|coalesce|column_ifexists|convert_angle|convert_energy|convert_force|convert_length|convert_mass|convert_speed|convert_temperature|convert_volume|cos|cot|countof|current_cluster_endpoint|current_database|current_principal_details|current_principal_is_member_of|current_principal|cursor_after|cursor_before_or_at|cursor_current|current_cursor|dcount_hll|degrees|dynamic_to_json|estimate_data_size|exp10|exp2|exp|extent_id|extent_tags|extract_all|extract_json|extractjson|extract|floor|format_bytes|format_ipv4_mask|format_ipv4|gamma|gettype|gzip_compress_to_base64_string|gzip_decompress_from_base64_string|has_any_index|has_any_ipv4_prefix|has_any_ipv4|has_ipv4_prefix|has_ipv4|hash_combine|hash_many|hash_md5|hash_sha1|hash_sha256|hash_xxhash64|hash|iff|iif|indexof_regex|indexof|ingestion_time|ipv4_compare|ipv4_is_in_range|ipv4_is_in_any_range|ipv4_is_match|ipv4_is_private|ipv4_netmask_suffix|ipv6_compare|ipv6_is_match|isascii|isempty|isfinite|isinf|isnan|isnotempty|notempty|isnotnull|notnull|isnull|isutf8|jaccard_index|log10|log2|loggamma|log|make_string|max_of|min_of|new_guid|not|bag_pack|pack_all|pack_array|pack_dictionary|pack|parse_command_line|parse_csv|parse_ipv4_mask|parse_ipv4|parse_ipv6_mask|parse_ipv6|parse_path|parse_urlquery|parse_url|parse_user_agent|parse_version|parse_xml|percentile_tdigest|percentile_array_tdigest|percentrank_tdigest|pi|pow|radians|rand|rank_tdigest|regex_quote|repeat|replace_regex|replace_string|reverse|round|set_difference|set_has_element|set_intersect|set_union|sign|sin|split|sqrt|strcat_array|strcat_delim|strcmp|strcat|string_size|strlen|strrep|substring|tan|to_utf8|tobool|todecimal|todouble|toreal|toguid|tohex|toint|tolong|tolower|tostring|toupper|translate|treepath|trim_end|trim_start|trim|unixtime_microseconds_todatetime|unixtime_milliseconds_todatetime|unixtime_nanoseconds_todatetime|unixtime_seconds_todatetime|url_decode|url_encode_component|url_encode|welch_test|zip|zlib_compress_to_base64_string|zlib_decompress_from_base64_string)\\b", name: "support.function.kusto" }, { captures: { 1: { name: "support.function.kusto" }, 2: { patterns: [{ include: "#DateTimeTimeSpanDataTypes" }, { include: "#TimeSpanLiterals" }, { include: "#DateTimeTimeSpanFunctions" }, { include: "#Numeric" }] }, 3: { patterns: [{ include: "#TimeSpanLiterals" }, { include: "#Numeric" }] } }, comment: "https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/binfunction", match: "\\b(bin)(?:\\s*\\(\\s*(.+?)\\s*,\\s*(.+?)\\s*\\))?(?!\\w)", name: "meta.scalar.function.bin.kusto" }, { comment: "https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/count-aggfunction", match: "\\b(count)\\s*\\(\\s*\\)(?!\\w)", name: "support.function.kusto" }, { comment: "https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/aggregation-functions", match: "\\b(arg_max|arg_min|avgif|avg|binary_all_and|binary_all_or|binary_all_xor|buildschema|countif|dcount|dcountif|hll|hll_merge|make_bag_if|make_bag|make_list_with_nulls|make_list_if|make_list|make_set_if|make_set|maxif|max|minif|min|percentilesw_array|percentiles_array|percentilesw|percentilew|percentiles|percentile|stdevif|stdevp|stdev|sumif|sum|take_anyif|take_any|tdigest_merge|merge_tdigest|tdigest|varianceif|variancep|variance)\\b", name: "support.function.kusto" }, { comment: "https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/geospatial-grid-systems", match: "\\b(geo_distance_2points|geo_distance_point_to_line|geo_distance_point_to_polygon|geo_intersects_2lines|geo_intersects_2polygons|geo_intersects_line_with_polygon|geo_intersection_2lines|geo_intersection_2polygons|geo_intersection_line_with_polygon|geo_line_centroid|geo_line_densify|geo_line_length|geo_line_simplify|geo_polygon_area|geo_polygon_centroid|geo_polygon_densify|geo_polygon_perimeter|geo_polygon_simplify|geo_polygon_to_s2cells|geo_point_in_circle|geo_point_in_polygon|geo_point_to_geohash|geo_point_to_h3cell|geo_point_to_s2cell|geo_geohash_to_central_point|geo_geohash_neighbors|geo_geohash_to_polygon|geo_s2cell_to_central_point|geo_s2cell_neighbors|geo_s2cell_to_polygon|geo_h3cell_to_central_point|geo_h3cell_neighbors|geo_h3cell_to_polygon|geo_h3cell_parent|geo_h3cell_children|geo_h3cell_level|geo_h3cell_rings|geo_simplify_polygons_array|geo_union_lines_array|geo_union_polygons_array)\\b", name: "support.function.kusto" }, { comment: "https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/windowsfunctions", match: "\\b(next|prev|row_cumsum|row_number|row_rank|row_window_session)\\b", name: "support.function.kusto" }, { comment: "User-defined functions: https://docs.microsoft.com/en-us/azure/kusto/query/functions/user-defined-functions", match: "\\.(create-or-alter|replace)", name: "keyword.control.kusto" }, { comment: "User-defined functions: https://docs.microsoft.com/en-us/azure/kusto/query/functions/user-defined-functions", match: "(?<=let ).+(?=\\W*=)", name: "entity.function.name.lambda.kusto" }, { comment: "User-defined functions: https://docs.microsoft.com/en-us/azure/kusto/query/functions/user-defined-functions", match: "\\b(folder|docstring|skipvalidation)\\b", name: "keyword.other.operator.kusto" }, { match: "\\b(function)\\b", name: "storage.type.kusto" }, { comment: "Data types: https://docs.microsoft.com/en-us/azure/kusto/query/scalar-data-types", match: "\\b(bool|decimal|dynamic|guid|int|long|real|string)\\b", name: "storage.type.kusto" }, { captures: { 1: { name: "keyword.other.query.kusto" }, 2: { name: "variable.other.kusto" } }, comment: "https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/asoperator", match: "\\b(as)\\s+(\\w+)\\b", name: "meta.query.as.kusto" }, { comment: "https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/datatableoperator", match: "\\b(datatable)(?=\\W*\\()", name: "keyword.other.query.kusto" }, { captures: { 1: { name: "keyword.other.query.kusto" }, 2: { name: "keyword.other.operator.kusto" } }, comment: "https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/facetoperator", match: "\\b(facet)(?:\\s+(by))?\\b", name: "meta.query.facet.kusto" }, { captures: { 1: { name: "keyword.other.query.kusto" }, 2: { name: "entity.name.function.kusto" } }, comment: "https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/invokeoperator", match: "\\b(invoke)(?:\\s+(\\w+))?\\b", name: "meta.query.invoke.kusto" }, { captures: { 1: { name: "keyword.other.query.kusto" }, 2: { name: "keyword.other.operator.kusto" }, 3: { name: "variable.other.column.kusto" } }, comment: "https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/orderoperator", match: "\\b(order)(?:\\s+(by)\\s+(\\w+))?\\b", name: "meta.query.order.kusto" }, { captures: { 1: { name: "keyword.other.query.kusto" }, 2: { name: "variable.other.column.kusto" }, 3: { name: "keyword.other.operator.kusto" }, 4: { patterns: [{ include: "#TimeSpanLiterals" }, { include: "#DateTimeTimeSpanFunctions" }, { include: "#Numeric" }] }, 5: { name: "keyword.other.operator.kusto" }, 6: { patterns: [{ include: "#TimeSpanLiterals" }, { include: "#DateTimeTimeSpanFunctions" }, { include: "#Numeric" }] }, 7: { name: "keyword.other.operator.kusto" }, 8: { patterns: [{ include: "#TimeSpanLiterals" }, { include: "#DateTimeTimeSpanFunctions" }, { include: "#Numeric" }] } }, comment: "https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/rangeoperator", match: "\\b(range)\\s+(\\w+)\\s+(from)\\s+(\\w+(?:\\(\\w*\\))?)\\s+(to)\\s+(\\w+(?:\\(\\w*\\))?)\\s+(step)\\s+(\\w+(?:\\(\\w*\\))?)\\b", name: "meta.query.range.kusto" }, { captures: { 1: { name: "keyword.other.query.kusto" }, 2: { patterns: [{ include: "#Numeric" }] } }, comment: "https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/sampleoperator", match: "\\b(sample)(?:\\s+(\\d+))?(?![\\w-])", name: "meta.query.sample.kusto" }, { captures: { 1: { name: "keyword.other.query.kusto" }, 2: { patterns: [{ include: "#Numeric" }] }, 3: { name: "keyword.other.operator.kusto" }, 4: { name: "variable.other.column.kusto" } }, comment: "https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/sampledistinctoperator", match: "\\b(sample-distinct)(?:\\s+(\\d+)\\s+(of)\\s+(\\w+))?\\b", name: "meta.query.sample-distinct.kusto" }, { captures: { 1: { name: "keyword.other.query.kusto" }, 2: { name: "keyword.other.operator.kusto" } }, comment: "https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/sortoperator", match: "\\b(sort)(?:\\s+(by))?\\b", name: "meta.query.sort.kusto" }, { captures: { 1: { name: "keyword.other.query.kusto" }, 2: { patterns: [{ include: "#Numeric" }] } }, comment: "https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/takeoperator", match: "\\b(take|limit)(?:\\s+(\\d+))\\b", name: "meta.query.take.kusto" }, { captures: { 1: { name: "keyword.other.query.kusto" }, 2: { patterns: [{ include: "#Numeric" }] }, 3: { name: "keyword.other.operator.kusto" }, 4: { name: "variable.other.column.kusto" } }, comment: "https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/topoperator", match: "\\b(top)(?:\\s+(\\d+)\\s+(by)\\s+(\\w+))?(?![\\w-])\\b", name: "meta.query.top.kusto" }, { captures: { 1: { name: "keyword.other.query.kusto" }, 2: { patterns: [{ include: "#Numeric" }] }, 3: { name: "keyword.other.operator.kusto" }, 4: { name: "variable.other.column.kusto" }, 5: { name: "keyword.other.operator.kusto" }, 6: { name: "variable.other.column.kusto" } }, comment: "https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/tophittersoperator", match: "\\b(top-hitters)(?:\\s+(\\d+)\\s+(of)\\s+(\\w+)(?:\\s+(by)\\s+(\\w+))?)?\\b", name: "meta.query.top-hitters.kusto" }, { comment: "Tabular operators: https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/queries", match: "\\b(consume|count|distinct|evaluate|extend|externaldata|find|fork|getschema|join|lookup|make-series|mv-apply|mv-expand|project-away|project-keep|project-rename|project-reorder|project|parse|parse-where|parse-kv|partition|print|reduce|render|scan|search|serialize|shuffle|summarize|top-nested|union|where)\\b", name: "keyword.other.query.kusto" }, { comment: "Tabular operators: evalute (plugins): https://docs.microsoft.com/en-us/azure/kusto/query/evaluateoperator", match: "\\b(active_users_count|activity_counts_metrics|activity_engagement|new_activity_metrics|activity_metrics|autocluster|azure_digital_twins_query_request|bag_unpack|basket|cosmosdb_sql_request|dcount_intersect|diffpatterns|funnel_sequence_completion|funnel_sequence|http_request_post|http_request|infer_storage_schema|ipv4_lookup|mysql_request|narrow|pivot|preview|rolling_percentile|rows_near|schema_merge|session_count|sequence_detect|sliding_window_counts|sql_request)\\b", name: "support.function.kusto" }, { comment: "Tabular operators: join: https://docs.microsoft.com/en-us/azure/kusto/query/joinoperator", match: "\\b(on|kind|hint\\.remote|hint\\.strategy)\\b", name: "keyword.other.operator.kusto" }, { comment: "Tabular operators: join ($left, $right): https://docs.microsoft.com/en-us/azure/kusto/query/joinoperator", match: "(\\$left|\\$right)\\b", name: "keyword.other.kusto" }, { comment: "Tabular operators: join (kinds, strategies): https://docs.microsoft.com/en-us/azure/kusto/query/joinoperator", match: "\\b(innerunique|inner|leftouter|rightouter|fullouter|leftanti|anti|leftantisemi|rightanti|rightantisemi|leftsemi|rightsemi|broadcast)\\b", name: "keyword.other.kusto" }, { comment: "https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/machine-learning-and-tsa", match: "\\b(series_abs|series_acos|series_add|series_asin|series_atan|series_cos|series_decompose|series_decompose_anomalies|series_decompose_forecast|series_divide|series_equals|series_exp|series_fft|series_fill_backward|series_fill_const|series_fill_forward|series_fill_linear|series_fir|series_fit_2lines_dynamic|series_fit_2lines|series_fit_line_dynamic|series_fit_line|series_fit_poly|series_greater_equals|series_greater|series_ifft|series_iir|series_less_equals|series_less|series_multiply|series_not_equals|series_outliers|series_pearson_correlation|series_periods_detect|series_periods_validate|series_pow|series_seasonal|series_sign|series_sin|series_stats|series_stats_dynamic|series_subtract|series_tan)\\b", name: "support.function.kusto" }, { comment: "Tabular operators: mv-expand (bagexpand options): https://docs.microsoft.com/en-us/azure/kusto/query/mvexpandoperator", match: "\\b(bag|array)\\b", name: "keyword.other.operator.kusto" }, { comment: "Tabular operators: order: https://docs.microsoft.com/en-us/azure/kusto/query/orderoperator", match: "\\b(asc|desc|nulls first|nulls last)\\b", name: "keyword.other.kusto" }, { comment: "Tabular operators: parse: https://docs.microsoft.com/en-us/azure/kusto/query/parseoperator", match: "\\b(regex|simple|relaxed)\\b", name: "keyword.other.kusto" }, { match: "\\b(anomalychart|areachart|barchart|card|columnchart|ladderchart|linechart|piechart|pivotchart|scatterchart|stackedareachart|timechart|timepivot)\\b", name: "support.function.kusto" }, { include: "#Strings" }, { match: "\\{.*?\\}", name: "string.other.kusto" }, { comment: "Comments", match: "//.*", name: "comment.line.kusto" }, { include: "#TimeSpanLiterals" }, { include: "#DateTimeTimeSpanFunctions" }, { include: "#DateTimeTimeSpanDataTypes" }, { include: "#Numeric" }, { match: "\\b(true|false|null)\\b", name: "constant.language.kusto" }, { comment: "Deprecated functions", match: "\\b(anyif|any|array_strcat|base64_decodestring|base64_encodestring|make_dictionary|makelist|makeset|mvexpand|todynamic|parse_json|replace|weekofyear)(?=\\W*\\(|\\b)", name: "invalid.deprecated.kusto" }], repository: { DateTimeTimeSpanDataTypes: { patterns: [{ match: "\\b(datetime|timespan|time)\\b", name: "storage.type.kusto" }] }, DateTimeTimeSpanFunctions: { patterns: [{ captures: { 1: { name: "support.function.kusto" }, 2: { patterns: [{ include: "#DateTimeTimeSpanDataTypes" }] }, 3: { patterns: [{ include: "#Strings" }] } }, comment: "https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/format-datetimefunction", match: `\\b(format_datetime)(?:\\s*\\(\\s*(.+?)\\s*,\\s*(['"].*?['"])\\s*\\))?(?!\\w)`, name: "meta.scalar.function.format_datetime.kusto" }, { comment: "Scalar function: DateTime/Timespan Functions: https://docs.microsoft.com/en-us/azure/kusto/query/scalarfunctions#datetimetimespan-functions", match: "\\b(ago|datetime_add|datetime_diff|datetime_local_to_utc|datetime_part|datetime_utc_to_local|dayofmonth|dayofweek|dayofyear|endofday|endofmonth|endofweek|endofyear|format_timespan|getmonth|getyear|hourofday|make_datetime|make_timespan|monthofyear|now|startofday|startofmonth|startofweek|startofyear|todatetime|totimespan|week_of_year)(?=\\W*\\()", name: "support.function.kusto" }] }, Escapes: { patterns: [{ match: `(\\\\['"]|\\\\\\\\)`, name: "constant.character.escape.kusto" }] }, Numeric: { patterns: [{ match: "\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*+)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?(?=\\b|\\w)", name: "constant.numeric.kusto" }] }, Strings: { patterns: [{ begin: '([@h]?")', beginCaptures: { 1: { name: "punctuation.definition.string.kusto" } }, comment: "https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/scalar-data-types/string", end: '"', endCaptures: { 0: { name: "punctuation.definition.string.kusto" } }, name: "string.quoted.double.kusto", patterns: [{ include: "#Escapes" }] }, { begin: "([@h]?')", beginCaptures: { 1: { name: "punctuation.definition.string.kusto" } }, comment: "https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/scalar-data-types/string", end: "'", endCaptures: { 0: { name: "punctuation.definition.string.kusto" } }, name: "string.quoted.single.kusto", patterns: [{ include: "#Escapes" }] }, { begin: "([@h]?```)", beginCaptures: { 1: { name: "punctuation.definition.string.kusto" } }, comment: "https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/scalar-data-types/string#multi-line-string-literals", end: "```", endCaptures: { 0: { name: "punctuation.definition.string.kusto" } }, name: "string.quoted.multi.kusto", patterns: [{ include: "#Escapes" }] }] }, TimeSpanLiterals: { patterns: [{ comment: "timespan literals: https://docs.microsoft.com/en-us/azure/kusto/query/scalar-data-types/timespan#timespan-literals", match: "[+-]?(?:\\d*\\.)?\\d+(?:microseconds?|ticks?|seconds?|ms|d|h|m|s)\\b", name: "constant.numeric.kusto" }] } }, scopeName: "source.kusto", aliases: ["kql"] });
var Ge = [
  Be
];
const Me = Object.freeze({ displayName: "R", name: "r", patterns: [{ include: "#roxygen" }, { include: "#comments" }, { include: "#constants" }, { include: "#keywords" }, { include: "#storage-type" }, { include: "#strings" }, { include: "#brackets" }, { include: "#function-declarations" }, { include: "#lambda-functions" }, { include: "#builtin-functions" }, { include: "#function-calls" }, { include: "#general-variables" }], repository: { brackets: { patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.section.parens.begin.r" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.parens.end.r" } }, patterns: [{ include: "source.r" }] }, { begin: "\\[(?!\\[)", beginCaptures: { 0: { name: "punctuation.section.brackets.single.begin.r" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.section.brackets.single.end.r" } }, patterns: [{ include: "source.r" }] }, { begin: "\\[\\[", beginCaptures: { 0: { name: "punctuation.section.brackets.double.begin.r" } }, contentName: "meta.item-access.arguments.r", end: "\\]\\]", endCaptures: { 0: { name: "punctuation.section.brackets.double.end.r" } }, patterns: [{ include: "source.r" }] }, { begin: "\\{", beginCaptures: { 0: { name: "punctuation.section.braces.begin.r" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.section.braces.end.r" } }, patterns: [{ include: "source.r" }] }] }, "builtin-functions": { patterns: [{ captures: { 1: { name: "support.function.r" } }, match: "\\b(abbreviate|abs|acos|acosh|activeBindingFunction|addNA|addTaskCallback|agrep|agrepl|alist|all|all\\.equal|all\\.equal\\.character|all\\.equal\\.default|all\\.equal\\.environment|all\\.equal\\.envRefClass|all\\.equal\\.factor|all\\.equal\\.formula|all\\.equal\\.function|all\\.equal\\.language|all\\.equal\\.list|all\\.equal\\.numeric|all\\.equal\\.POSIXt|all\\.equal\\.raw|all\\.names|allowInterrupts|all\\.vars|any|anyDuplicated|anyDuplicated\\.array|anyDuplicated\\.data\\.frame|anyDuplicated\\.default|anyDuplicated\\.matrix|anyNA|anyNA\\.data\\.frame|anyNA\\.numeric_version|anyNA\\.POSIXlt|aperm|aperm\\.default|aperm\\.table|append|apply|Arg|args|array|arrayInd|as\\.array|as\\.array\\.default|as\\.call|as\\.character|as\\.character\\.condition|as\\.character\\.Date|as\\.character\\.default|as\\.character\\.error|as\\.character\\.factor|as\\.character\\.hexmode|as\\.character\\.numeric_version|as\\.character\\.octmode|as\\.character\\.POSIXt|as\\.character\\.srcref|as\\.complex|as\\.data\\.frame|as\\.data\\.frame\\.array|as\\.data\\.frame\\.AsIs|as\\.data\\.frame\\.character|as\\.data\\.frame\\.complex|as\\.data\\.frame\\.data\\.frame|as\\.data\\.frame\\.Date|as\\.data\\.frame\\.default|as\\.data\\.frame\\.difftime|as\\.data\\.frame\\.factor|as\\.data\\.frame\\.integer|as\\.data\\.frame\\.list|as\\.data\\.frame\\.logical|as\\.data\\.frame\\.matrix|as\\.data\\.frame\\.model\\.matrix|as\\.data\\.frame\\.noquote|as\\.data\\.frame\\.numeric|as\\.data\\.frame\\.numeric_version|as\\.data\\.frame\\.ordered|as\\.data\\.frame\\.POSIXct|as\\.data\\.frame\\.POSIXlt|as\\.data\\.frame\\.raw|as\\.data\\.frame\\.table|as\\.data\\.frame\\.ts|as\\.data\\.frame\\.vector|as\\.Date|as\\.Date\\.character|as\\.Date\\.default|as\\.Date\\.factor|as\\.Date\\.numeric|as\\.Date\\.POSIXct|as\\.Date\\.POSIXlt|as\\.difftime|as\\.double|as\\.double\\.difftime|as\\.double\\.POSIXlt|as\\.environment|as\\.expression|as\\.expression\\.default|as\\.factor|as\\.function|as\\.function\\.default|as\\.hexmode|asin|asinh|as\\.integer|as\\.list|as\\.list\\.data\\.frame|as\\.list\\.Date|as\\.list\\.default|as\\.list\\.difftime|as\\.list\\.environment|as\\.list\\.factor|as\\.list\\.function|as\\.list\\.numeric_version|as\\.list\\.POSIXct|as\\.list\\.POSIXlt|as\\.logical|as\\.logical\\.factor|as\\.matrix|as\\.matrix\\.data\\.frame|as\\.matrix\\.default|as\\.matrix\\.noquote|as\\.matrix\\.POSIXlt|as\\.name|asNamespace|as\\.null|as\\.null\\.default|as\\.numeric|as\\.numeric_version|as\\.octmode|as\\.ordered|as\\.package_version|as\\.pairlist|asplit|as\\.POSIXct|as\\.POSIXct\\.Date|as\\.POSIXct\\.default|as\\.POSIXct\\.numeric|as\\.POSIXct\\.POSIXlt|as\\.POSIXlt|as\\.POSIXlt\\.character|as\\.POSIXlt\\.Date|as\\.POSIXlt\\.default|as\\.POSIXlt\\.factor|as\\.POSIXlt\\.numeric|as\\.POSIXlt\\.POSIXct|as\\.qr|as\\.raw|asS3|asS4|assign|as\\.single|as\\.single\\.default|as\\.symbol|as\\.table|as\\.table\\.default|as\\.vector|as\\.vector\\.factor|atan|atan2|atanh|attach|attachNamespace|attr|attr\\.all\\.equal|attributes|autoload|autoloader|backsolve|baseenv|basename|besselI|besselJ|besselK|besselY|beta|bindingIsActive|bindingIsLocked|bindtextdomain|bitwAnd|bitwNot|bitwOr|bitwShiftL|bitwShiftR|bitwXor|body|bquote|break|browser|browserCondition|browserSetDebug|browserText|builtins|by|by\\.data\\.frame|by\\.default|bzfile|c|call|callCC|capabilities|casefold|cat|cbind|cbind\\.data\\.frame|c\\.Date|c\\.difftime|ceiling|c\\.factor|character|char\\.expand|charmatch|charToRaw|chartr|check_tzones|chkDots|chol|chol2inv|chol\\.default|choose|class|clearPushBack|close|closeAllConnections|close\\.connection|close\\.srcfile|close\\.srcfilealias|c\\.noquote|c\\.numeric_version|col|colMeans|colnames|colSums|commandArgs|comment|complex|computeRestarts|conditionCall|conditionCall\\.condition|conditionMessage|conditionMessage\\.condition|conflictRules|conflicts|Conj|contributors|cos|cosh|cospi|c\\.POSIXct|c\\.POSIXlt|crossprod|Cstack_info|cummax|cummin|cumprod|cumsum|curlGetHeaders|cut|cut\\.Date|cut\\.default|cut\\.POSIXt|c\\.warnings|data\\.class|data\\.frame|data\\.matrix|date|debug|debuggingState|debugonce|default\\.stringsAsFactors|delayedAssign|deparse|deparse1|det|detach|determinant|determinant\\.matrix|dget|diag|diff|diff\\.Date|diff\\.default|diff\\.difftime|diff\\.POSIXt|difftime|digamma|dim|dim\\.data\\.frame|dimnames|dimnames\\.data\\.frame|dir|dir\\.create|dir\\.exists|dirname|do\\.call|dontCheck|double|dput|dQuote|drop|droplevels|droplevels\\.data\\.frame|droplevels\\.factor|dump|duplicated|duplicated\\.array|duplicated\\.data\\.frame|duplicated\\.default|duplicated\\.matrix|duplicated\\.numeric_version|duplicated\\.POSIXlt|duplicated\\.warnings|dynGet|dyn\\.load|dyn\\.unload|eapply|eigen|emptyenv|enc2native|enc2utf8|encodeString|Encoding|endsWith|enquote|environment|environmentIsLocked|environmentName|env\\.profile|errorCondition|eval|eval\\.parent|evalq|exists|exp|expand\\.grid|expm1|expression|extSoftVersion|factor|factorial|fifo|file|file\\.access|file\\.append|file\\.choose|file\\.copy|file\\.create|file\\.exists|file\\.info|file\\.link|file\\.mode|file\\.mtime|file\\.path|file\\.remove|file\\.rename|file\\.show|file\\.size|file\\.symlink|Filter|Find|findInterval|find\\.package|findPackageEnv|findRestart|floor|flush|flush\\.connection|for|force|forceAndCall|formals|format|format\\.AsIs|formatC|format\\.data\\.frame|format\\.Date|format\\.default|format\\.difftime|formatDL|format\\.factor|format\\.hexmode|format\\.info|format\\.libraryIQR|format\\.numeric_version|format\\.octmode|format\\.packageInfo|format\\.POSIXct|format\\.POSIXlt|format\\.pval|format\\.summaryDefault|forwardsolve|function|gamma|gc|gcinfo|gc\\.time|gctorture|gctorture2|get|get0|getAllConnections|getCallingDLL|getCallingDLLe|getConnection|getDLLRegisteredRoutines|getDLLRegisteredRoutines\\.character|getDLLRegisteredRoutines\\.DLLInfo|getElement|geterrmessage|getExportedValue|getHook|getLoadedDLLs|getNamespace|getNamespaceExports|getNamespaceImports|getNamespaceInfo|getNamespaceName|getNamespaceUsers|getNamespaceVersion|getNativeSymbolInfo|getOption|getRversion|getSrcLines|getTaskCallbackNames|gettext|gettextf|getwd|gl|globalCallingHandlers|globalenv|gregexec|gregexpr|grep|grepl|grepRaw|grouping|gsub|gzcon|gzfile|I|iconv|iconvlist|icuGetCollate|icuSetCollate|identical|identity|if|ifelse|Im|importIntoEnv|infoRDS|inherits|integer|interaction|interactive|intersect|intToBits|intToUtf8|inverse\\.rle|invisible|invokeRestart|invokeRestartInteractively|isa|is\\.array|is\\.atomic|isatty|isBaseNamespace|is\\.call|is\\.character|is\\.complex|is\\.data\\.frame|isdebugged|is\\.double|is\\.element|is\\.environment|is\\.expression|is\\.factor|isFALSE|is\\.finite|is\\.function|isIncomplete|is\\.infinite|is\\.integer|is\\.language|is\\.list|is\\.loaded|is\\.logical|is\\.matrix|is\\.na|is\\.na\\.data\\.frame|is\\.name|isNamespace|isNamespaceLoaded|is\\.nan|is\\.na\\.numeric_version|is\\.na\\.POSIXlt|is\\.null|is\\.numeric|is\\.numeric\\.Date|is\\.numeric\\.difftime|is\\.numeric\\.POSIXt|is\\.numeric_version|is\\.object|ISOdate|ISOdatetime|isOpen|is\\.ordered|is\\.package_version|is\\.pairlist|is\\.primitive|is\\.qr|is\\.R|is\\.raw|is\\.recursive|isRestart|isS4|isSeekable|is\\.single|is\\.symbol|isSymmetric|isSymmetric\\.matrix|is\\.table|isTRUE|is\\.unsorted|is\\.vector|jitter|julian|julian\\.Date|julian\\.POSIXt|kappa|kappa\\.default|kappa\\.lm|kappa\\.qr|kronecker|l10n_info|labels|labels\\.default|La_library|lapply|La\\.svd|La_version|lazyLoad|lazyLoadDBexec|lazyLoadDBfetch|lbeta|lchoose|length|length\\.POSIXlt|lengths|levels|levels\\.default|lfactorial|lgamma|libcurlVersion|library|library\\.dynam|library\\.dynam\\.unload|licence|license|list|list2DF|list2env|list\\.dirs|list\\.files|load|loadedNamespaces|loadingNamespaceInfo|loadNamespace|local|lockBinding|lockEnvironment|log|log10|log1p|log2|logb|logical|lower\\.tri|ls|makeActiveBinding|make\\.names|make\\.unique|Map|mapply|marginSums|margin\\.table|match|match\\.arg|match\\.call|match\\.fun|Math\\.data\\.frame|Math\\.Date|Math\\.difftime|Math\\.factor|Math\\.POSIXt|mat\\.or\\.vec|matrix|max|max\\.col|mean|mean\\.Date|mean\\.default|mean\\.difftime|mean\\.POSIXct|mean\\.POSIXlt|memCompress|memDecompress|mem\\.maxNSize|mem\\.maxVSize|memory\\.profile|merge|merge\\.data\\.frame|merge\\.default|message|mget|min|missing|Mod|mode|months|months\\.Date|months\\.POSIXt|names|namespaceExport|namespaceImport|namespaceImportClasses|namespaceImportFrom|namespaceImportMethods|names\\.POSIXlt|nargs|nchar|ncol|NCOL|Negate|new\\.env|next|NextMethod|ngettext|nlevels|noquote|norm|normalizePath|nrow|NROW|nullfile|numeric|numeric_version|numToBits|numToInts|nzchar|objects|oldClass|OlsonNames|on\\.exit|open|open\\.connection|open\\.srcfile|open\\.srcfilealias|open\\.srcfilecopy|Ops\\.data\\.frame|Ops\\.Date|Ops\\.difftime|Ops\\.factor|Ops\\.numeric_version|Ops\\.ordered|Ops\\.POSIXt|options|order|ordered|outer|packageEvent|packageHasNamespace|packageNotFoundError|packageStartupMessage|package_version|packBits|pairlist|parent\\.env|parent\\.frame|parse|parseNamespaceFile|paste|paste0|path\\.expand|path\\.package|pcre_config|pi|pipe|plot|pmatch|pmax|pmax\\.int|pmin|pmin\\.int|polyroot|Position|pos\\.to\\.env|pretty|pretty\\.default|prettyNum|print|print\\.AsIs|print\\.by|print\\.condition|print\\.connection|print\\.data\\.frame|print\\.Date|print\\.default|print\\.difftime|print\\.Dlist|print\\.DLLInfo|print\\.DLLInfoList|print\\.DLLRegisteredRoutines|print\\.eigen|print\\.factor|print\\.function|print\\.hexmode|print\\.libraryIQR|print\\.listof|print\\.NativeRoutineList|print\\.noquote|print\\.numeric_version|print\\.octmode|print\\.packageInfo|print\\.POSIXct|print\\.POSIXlt|print\\.proc_time|print\\.restart|print\\.rle|print\\.simple\\.list|print\\.srcfile|print\\.srcref|print\\.summaryDefault|print\\.summary\\.table|print\\.summary\\.warnings|print\\.table|print\\.warnings|prmatrix|proc\\.time|prod|proportions|prop\\.table|provideDimnames|psigamma|pushBack|pushBackLength|q|qr|qr\\.coef|qr\\.default|qr\\.fitted|qr\\.Q|qr\\.qty|qr\\.qy|qr\\.R|qr\\.resid|qr\\.solve|qr\\.X|quarters|quarters\\.Date|quarters\\.POSIXt|quit|quote|range|range\\.default|rank|rapply|raw|rawConnection|rawConnectionValue|rawShift|rawToBits|rawToChar|rbind|rbind\\.data\\.frame|rcond|Re|readBin|readChar|read\\.dcf|readline|readLines|readRDS|readRenviron|Recall|Reduce|regexec|regexpr|reg\\.finalizer|registerS3method|registerS3methods|regmatches|remove|removeTaskCallback|rep|rep\\.Date|rep\\.difftime|repeat|rep\\.factor|rep\\.int|replace|rep_len|replicate|rep\\.numeric_version|rep\\.POSIXct|rep\\.POSIXlt|require|requireNamespace|restartDescription|restartFormals|retracemem|return|returnValue|rev|rev\\.default|R\\.home|rle|rm|RNGkind|RNGversion|round|round\\.Date|round\\.POSIXt|row|rowMeans|rownames|row\\.names|row\\.names\\.data\\.frame|row\\.names\\.default|rowsum|rowsum\\.data\\.frame|rowsum\\.default|rowSums|R_system_version|R\\.version|R\\.Version|R\\.version\\.string|sample|sample\\.int|sapply|save|save\\.image|saveRDS|scale|scale\\.default|scan|search|searchpaths|seek|seek\\.connection|seq|seq_along|seq\\.Date|seq\\.default|seq\\.int|seq_len|seq\\.POSIXt|sequence|sequence\\.default|serialize|serverSocket|setdiff|setequal|setHook|setNamespaceInfo|set\\.seed|setSessionTimeLimit|setTimeLimit|setwd|showConnections|shQuote|sign|signalCondition|signif|simpleCondition|simpleError|simpleMessage|simpleWarning|simplify2array|sin|single|sinh|sink|sink\\.number|sinpi|slice\\.index|socketAccept|socketConnection|socketSelect|socketTimeout|solve|solve\\.default|solve\\.qr|sort|sort\\.default|sort\\.int|sort\\.list|sort\\.POSIXlt|source|split|split\\.data\\.frame|split\\.Date|split\\.default|split\\.POSIXct|sprintf|sqrt|sQuote|srcfile|srcfilealias|srcfilecopy|srcref|standardGeneric|startsWith|stderr|stdin|stdout|stop|stopifnot|storage\\.mode|str2expression|str2lang|strftime|strptime|strrep|strsplit|strtoi|strtrim|structure|strwrap|sub|subset|subset\\.data\\.frame|subset\\.default|subset\\.matrix|substitute|substr|substring|sum|summary|summary\\.connection|summary\\.data\\.frame|Summary\\.data\\.frame|summary\\.Date|Summary\\.Date|summary\\.default|Summary\\.difftime|summary\\.factor|Summary\\.factor|summary\\.matrix|Summary\\.numeric_version|Summary\\.ordered|summary\\.POSIXct|Summary\\.POSIXct|summary\\.POSIXlt|Summary\\.POSIXlt|summary\\.proc_time|summary\\.srcfile|summary\\.srcref|summary\\.table|summary\\.warnings|suppressMessages|suppressPackageStartupMessages|suppressWarnings|suspendInterrupts|svd|sweep|switch|sys\\.call|sys\\.calls|Sys\\.chmod|Sys\\.Date|sys\\.frame|sys\\.frames|sys\\.function|Sys\\.getenv|Sys\\.getlocale|Sys\\.getpid|Sys\\.glob|Sys\\.info|sys\\.load\\.image|Sys\\.localeconv|sys\\.nframe|sys\\.on\\.exit|sys\\.parent|sys\\.parents|Sys\\.readlink|sys\\.save\\.image|Sys\\.setenv|Sys\\.setFileTime|Sys\\.setlocale|Sys\\.sleep|sys\\.source|sys\\.status|system|system2|system\\.file|system\\.time|Sys\\.time|Sys\\.timezone|Sys\\.umask|Sys\\.unsetenv|Sys\\.which|t|table|tabulate|tan|tanh|tanpi|tapply|taskCallbackManager|tcrossprod|t\\.data\\.frame|t\\.default|tempdir|tempfile|textConnection|textConnectionValue|tolower|topenv|toString|toString\\.default|toupper|trace|traceback|tracemem|tracingState|transform|transform\\.data\\.frame|transform\\.default|trigamma|trimws|trunc|truncate|truncate\\.connection|trunc\\.Date|trunc\\.POSIXt|try|tryCatch|tryInvokeRestart|typeof|unclass|undebug|union|unique|unique\\.array|unique\\.data\\.frame|unique\\.default|unique\\.matrix|unique\\.numeric_version|unique\\.POSIXlt|unique\\.warnings|units|units\\.difftime|unix\\.time|unlink|unlist|unloadNamespace|unlockBinding|unname|unserialize|unsplit|untrace|untracemem|unz|upper\\.tri|url|UseMethod|utf8ToInt|validEnc|validUTF8|vapply|vector|Vectorize|version|warning|warningCondition|warnings|weekdays|weekdays\\.Date|weekdays\\.POSIXt|which|which\\.max|which\\.min|while|with|withAutoprint|withCallingHandlers|with\\.default|within|within\\.data\\.frame|within\\.list|withRestarts|withVisible|write|writeBin|writeChar|write\\.dcf|writeLines|xor|xpdrows\\.data\\.frame|xtfrm|xtfrm\\.AsIs|xtfrm\\.data\\.frame|xtfrm\\.Date|xtfrm\\.default|xtfrm\\.difftime|xtfrm\\.factor|xtfrm\\.numeric_version|xtfrm\\.POSIXct|xtfrm\\.POSIXlt|xzfile|zapsmall)\\s*(\\()" }, { captures: { 1: { name: "support.function.r" } }, match: "\\b(abline|arrows|assocplot|axis|Axis|axis\\.Date|axis\\.POSIXct|axTicks|barplot|barplot\\.default|box|boxplot|boxplot\\.default|boxplot\\.matrix|bxp|cdplot|clip|close\\.screen|co\\.intervals|contour|contour\\.default|coplot|curve|dotchart|erase\\.screen|filled\\.contour|fourfoldplot|frame|grconvertX|grconvertY|grid|hist|hist\\.default|identify|image|image\\.default|layout|layout\\.show|lcm|legend|lines|lines\\.default|locator|matlines|matplot|matpoints|mosaicplot|mtext|pairs|pairs\\.default|panel\\.smooth|par|persp|pie|plot|plot\\.default|plot\\.design|plot\\.function|plot\\.new|plot\\.window|plot\\.xy|points|points\\.default|polygon|polypath|rasterImage|rect|rug|screen|segments|smoothScatter|spineplot|split\\.screen|stars|stem|strheight|stripchart|strwidth|sunflowerplot|symbols|text|text\\.default|title|xinch|xspline|xyinch|yinch)\\s*(\\()" }, { captures: { 1: { name: "support.function.r" } }, match: "\\b(adjustcolor|as\\.graphicsAnnot|as\\.raster|axisTicks|bitmap|blues9|bmp|boxplot\\.stats|cairo_pdf|cairo_ps|cairoSymbolFont|check\\.options|chull|CIDFont|cm|cm\\.colors|col2rgb|colorConverter|colorRamp|colorRampPalette|colors|colorspaces|colours|contourLines|convertColor|densCols|dev2bitmap|devAskNewPage|dev\\.capabilities|dev\\.capture|dev\\.control|dev\\.copy|dev\\.copy2eps|dev\\.copy2pdf|dev\\.cur|dev\\.flush|dev\\.hold|deviceIsInteractive|dev\\.interactive|dev\\.list|dev\\.new|dev\\.next|dev\\.off|dev\\.prev|dev\\.print|dev\\.set|dev\\.size|embedFonts|extendrange|getGraphicsEvent|getGraphicsEventEnv|graphics\\.off|gray|gray\\.colors|grey|grey\\.colors|grSoftVersion|hcl|hcl\\.colors|hcl\\.pals|heat\\.colors|Hershey|hsv|is\\.raster|jpeg|make\\.rgb|n2mfrow|nclass\\.FD|nclass\\.scott|nclass\\.Sturges|palette|palette\\.colors|palette\\.pals|pdf|pdfFonts|pdf\\.options|pictex|png|postscript|postscriptFonts|ps\\.options|quartz|quartzFont|quartzFonts|quartz\\.options|quartz\\.save|rainbow|recordGraphics|recordPlot|replayPlot|rgb|rgb2hsv|savePlot|setEPS|setGraphicsEventEnv|setGraphicsEventHandlers|setPS|svg|terrain\\.colors|tiff|topo\\.colors|trans3d|Type1Font|x11|X11|X11Font|X11Fonts|X11\\.options|xfig|xy\\.coords|xyTable|xyz\\.coords)\\s*(\\()" }, { captures: { 1: { name: "support.function.r" } }, match: "\\b(addNextMethod|allNames|Arith|as|asMethodDefinition|assignClassDef|assignMethodsMetaData|balanceMethodsList|cacheGenericsMetaData|cacheMetaData|cacheMethod|callGeneric|callNextMethod|canCoerce|cbind2|checkAtAssignment|checkSlotAssignment|classesToAM|classLabel|classMetaName|className|coerce|Compare|completeClassDefinition|completeExtends|completeSubclasses|Complex|conformMethod|defaultDumpName|defaultPrototype|doPrimitiveMethod|dumpMethod|dumpMethods|el|elNamed|empty\\.dump|emptyMethodsList|evalOnLoad|evalqOnLoad|evalSource|existsFunction|existsMethod|extends|externalRefMethod|finalDefaultMethod|findClass|findFunction|findMethod|findMethods|findMethodSignatures|findUnique|fixPre1\\.8|formalArgs|functionBody|generic\\.skeleton|getAllSuperClasses|getClass|getClassDef|getClasses|getDataPart|getFunction|getGeneric|getGenerics|getGroup|getGroupMembers|getLoadActions|getMethod|getMethods|getMethodsForDispatch|getMethodsMetaData|getPackageName|getRefClass|getSlots|getValidity|hasArg|hasLoadAction|hasMethod|hasMethods|implicitGeneric|inheritedSlotNames|initFieldArgs|initialize|initRefFields|insertClassMethods|insertMethod|insertSource|is|isClass|isClassDef|isClassUnion|isGeneric|isGrammarSymbol|isGroup|isRematched|isSealedClass|isSealedMethod|isVirtualClass|isXS3Class|kronecker|languageEl|linearizeMlist|listFromMethods|listFromMlist|loadMethod|Logic|makeClassRepresentation|makeExtends|makeGeneric|makeMethodsList|makePrototypeFromClassDef|makeStandardGeneric|matchSignature|Math|Math2|mergeMethods|metaNameUndo|MethodAddCoerce|methodSignatureMatrix|method\\.skeleton|MethodsList|MethodsListSelect|methodsPackageMetaName|missingArg|multipleClasses|new|newBasic|newClassRepresentation|newEmptyObject|Ops|packageSlot|possibleExtends|prohibitGeneric|promptClass|promptMethods|prototype|Quote|rbind2|reconcilePropertiesAndPrototype|registerImplicitGenerics|rematchDefinition|removeClass|removeGeneric|removeMethod|removeMethods|representation|requireMethods|resetClass|resetGeneric|S3Class|S3Part|sealClass|selectMethod|selectSuperClasses|setAs|setClass|setClassUnion|setDataPart|setGeneric|setGenericImplicit|setGroupGeneric|setIs|setLoadAction|setLoadActions|setMethod|setOldClass|setPackageName|setPrimitiveMethods|setRefClass|setReplaceMethod|setValidity|show|showClass|showDefault|showExtends|showMethods|showMlist|signature|SignatureMethod|sigToEnv|slot|slotNames|slotsFromS3|substituteDirect|substituteFunctionArgs|Summary|superClassDepth|testInheritedMethods|testVirtual|tryNew|unRematchDefinition|validObject|validSlotNames)\\s*(\\()" }, { captures: { 1: { name: "support.function.r" } }, match: "\\b(acf|acf2AR|add1|addmargins|add\\.scope|aggregate|aggregate\\.data\\.frame|aggregate\\.ts|AIC|alias|anova|ansari\\.test|aov|approx|approxfun|ar|ar\\.burg|arima|arima0|arima0\\.diag|arima\\.sim|ARMAacf|ARMAtoMA|ar\\.mle|ar\\.ols|ar\\.yw|as\\.dendrogram|as\\.dist|as\\.formula|as\\.hclust|asOneSidedFormula|as\\.stepfun|as\\.ts|ave|bandwidth\\.kernel|bartlett\\.test|BIC|binomial|binom\\.test|biplot|Box\\.test|bw\\.bcv|bw\\.nrd|bw\\.nrd0|bw\\.SJ|bw\\.ucv|C|cancor|case\\.names|ccf|chisq\\.test|cmdscale|coef|coefficients|complete\\.cases|confint|confint\\.default|confint\\.lm|constrOptim|contrasts|contr\\.helmert|contr\\.poly|contr\\.SAS|contr\\.sum|contr\\.treatment|convolve|cooks\\.distance|cophenetic|cor|cor\\.test|cov|cov2cor|covratio|cov\\.wt|cpgram|cutree|cycle|D|dbeta|dbinom|dcauchy|dchisq|decompose|delete\\.response|deltat|dendrapply|density|density\\.default|deriv|deriv3|deviance|dexp|df|DF2formula|dfbeta|dfbetas|dffits|df\\.kernel|df\\.residual|dgamma|dgeom|dhyper|diffinv|dist|dlnorm|dlogis|dmultinom|dnbinom|dnorm|dpois|drop1|drop\\.scope|drop\\.terms|dsignrank|dt|dummy\\.coef|dummy\\.coef\\.lm|dunif|dweibull|dwilcox|ecdf|eff\\.aovlist|effects|embed|end|estVar|expand\\.model\\.frame|extractAIC|factanal|factor\\.scope|family|fft|filter|fisher\\.test|fitted|fitted\\.values|fivenum|fligner\\.test|formula|frequency|friedman\\.test|ftable|Gamma|gaussian|get_all_vars|getCall|getInitial|glm|glm\\.control|glm\\.fit|hasTsp|hat|hatvalues|hclust|heatmap|HoltWinters|influence|influence\\.measures|integrate|interaction\\.plot|inverse\\.gaussian|IQR|is\\.empty\\.model|is\\.leaf|is\\.mts|isoreg|is\\.stepfun|is\\.ts|is\\.tskernel|KalmanForecast|KalmanLike|KalmanRun|KalmanSmooth|kernapply|kernel|kmeans|knots|kruskal\\.test|ksmooth|ks\\.test|lag|lag\\.plot|line|lm|lm\\.fit|lm\\.influence|lm\\.wfit|loadings|loess|loess\\.control|loess\\.smooth|logLik|loglin|lowess|ls\\.diag|lsfit|ls\\.print|mad|mahalanobis|makeARIMA|make\\.link|makepredictcall|manova|mantelhaen\\.test|mauchly\\.test|mcnemar\\.test|median|median\\.default|medpolish|model\\.extract|model\\.frame|model\\.frame\\.default|model\\.matrix|model\\.matrix\\.default|model\\.matrix\\.lm|model\\.offset|model\\.response|model\\.tables|model\\.weights|monthplot|mood\\.test|mvfft|na\\.action|na\\.contiguous|na\\.exclude|na\\.fail|na\\.omit|na\\.pass|napredict|naprint|naresid|nextn|nlm|nlminb|nls|nls\\.control|NLSstAsymptotic|NLSstClosestX|NLSstLfAsymptote|NLSstRtAsymptote|nobs|numericDeriv|offset|oneway\\.test|optim|optimHess|optimise|optimize|order\\.dendrogram|pacf|p\\.adjust|p\\.adjust\\.methods|Pair|pairwise\\.prop\\.test|pairwise\\.table|pairwise\\.t\\.test|pairwise\\.wilcox\\.test|pbeta|pbinom|pbirthday|pcauchy|pchisq|pexp|pf|pgamma|pgeom|phyper|plclust|plnorm|plogis|plot\\.ecdf|plot\\.spec\\.coherency|plot\\.spec\\.phase|plot\\.stepfun|plot\\.ts|pnbinom|pnorm|poisson|poisson\\.test|poly|polym|power|power\\.anova\\.test|power\\.prop\\.test|power\\.t\\.test|ppoints|ppois|ppr|PP\\.test|prcomp|predict|predict\\.glm|predict\\.lm|preplot|princomp|printCoefmat|profile|proj|promax|prop\\.test|prop\\.trend\\.test|psignrank|pt|ptukey|punif|pweibull|pwilcox|qbeta|qbinom|qbirthday|qcauchy|qchisq|qexp|qf|qgamma|qgeom|qhyper|qlnorm|qlogis|qnbinom|qnorm|qpois|qqline|qqnorm|qqplot|qsignrank|qt|qtukey|quade\\.test|quantile|quasi|quasibinomial|quasipoisson|qunif|qweibull|qwilcox|r2dtable|rbeta|rbinom|rcauchy|rchisq|read\\.ftable|rect\\.hclust|reformulate|relevel|reorder|replications|reshape|resid|residuals|residuals\\.glm|residuals\\.lm|rexp|rf|rgamma|rgeom|rhyper|rlnorm|rlogis|rmultinom|rnbinom|rnorm|rpois|rsignrank|rstandard|rstudent|rt|runif|runmed|rweibull|rwilcox|rWishart|scatter\\.smooth|screeplot|sd|se\\.contrast|selfStart|setNames|shapiro\\.test|sigma|simulate|smooth|smoothEnds|smooth\\.spline|sortedXyData|spec\\.ar|spec\\.pgram|spec\\.taper|spectrum|spline|splinefun|splinefunH|SSasymp|SSasympOff|SSasympOrig|SSbiexp|SSD|SSfol|SSfpl|SSgompertz|SSlogis|SSmicmen|SSweibull|start|stat\\.anova|step|stepfun|stl|StructTS|summary\\.aov|summary\\.glm|summary\\.lm|summary\\.manova|summary\\.stepfun|supsmu|symnum|termplot|terms|terms\\.formula|time|toeplitz|ts|tsdiag|ts\\.intersect|tsp|ts\\.plot|tsSmooth|ts\\.union|t\\.test|TukeyHSD|uniroot|update|update\\.default|update\\.formula|var|variable\\.names|varimax|var\\.test|vcov|weighted\\.mean|weighted\\.residuals|weights|wilcox\\.test|window|write\\.ftable|xtabs)\\s*(\\()" }, { captures: { 1: { name: "support.function.r" } }, match: "\\b(adist|alarm|apropos|aregexec|argsAnywhere|asDateBuilt|askYesNo|aspell|aspell_package_C_files|aspell_package_Rd_files|aspell_package_R_files|aspell_package_vignettes|aspell_write_personal_dictionary_file|as\\.person|as\\.personList|as\\.relistable|as\\.roman|assignInMyNamespace|assignInNamespace|available\\.packages|bibentry|browseEnv|browseURL|browseVignettes|bug\\.report|capture\\.output|changedFiles|charClass|checkCRAN|chooseBioCmirror|chooseCRANmirror|citation|cite|citeNatbib|citEntry|citFooter|citHeader|close\\.socket|combn|compareVersion|contrib\\.url|count\\.fields|create\\.post|data|dataentry|data\\.entry|de|debugcall|debugger|demo|de\\.ncols|de\\.restore|de\\.setup|download\\.file|download\\.packages|dump\\.frames|edit|emacs|example|file\\.edit|fileSnapshot|file_test|find|findLineNum|fix|fixInNamespace|flush\\.console|formatOL|formatUL|getAnywhere|getCRANmirrors|getFromNamespace|getParseData|getParseText|getS3method|getSrcDirectory|getSrcFilename|getSrcLocation|getSrcref|getTxtProgressBar|glob2rx|globalVariables|hasName|head|head\\.matrix|help|help\\.request|help\\.search|help\\.start|history|hsearch_db|hsearch_db_concepts|hsearch_db_keywords|installed\\.packages|install\\.packages|is\\.relistable|isS3method|isS3stdGeneric|limitedLabels|loadhistory|localeToCharset|lsf\\.str|ls\\.str|maintainer|make\\.packages\\.html|makeRweaveLatexCodeRunner|make\\.socket|memory\\.limit|memory\\.size|menu|methods|mirror2html|modifyList|new\\.packages|news|nsl|object\\.size|old\\.packages|osVersion|packageDate|packageDescription|packageName|package\\.skeleton|packageStatus|packageVersion|page|person|personList|pico|process\\.events|prompt|promptData|promptImport|promptPackage|rc\\.getOption|rc\\.options|rc\\.settings|rc\\.status|readCitationFile|read\\.csv|read\\.csv2|read\\.delim|read\\.delim2|read\\.DIF|read\\.fortran|read\\.fwf|read\\.socket|read\\.table|recover|relist|remove\\.packages|removeSource|Rprof|Rprofmem|RShowDoc|RSiteSearch|rtags|Rtangle|RtangleFinish|RtangleRuncode|RtangleSetup|RtangleWritedoc|RweaveChunkPrefix|RweaveEvalWithOpt|RweaveLatex|RweaveLatexFinish|RweaveLatexOptions|RweaveLatexSetup|RweaveLatexWritedoc|RweaveTryStop|savehistory|select\\.list|sessionInfo|setBreakpoint|setRepositories|setTxtProgressBar|stack|Stangle|str|strcapture|strOptions|summaryRprof|suppressForeignCheck|Sweave|SweaveHooks|SweaveSyntaxLatex|SweaveSyntaxNoweb|SweaveSyntConv|tail|tail\\.matrix|tar|timestamp|toBibtex|toLatex|txtProgressBar|type\\.convert|undebugcall|unstack|untar|unzip|update\\.packages|upgrade|URLdecode|URLencode|url\\.show|vi|View|vignette|warnErrList|write\\.csv|write\\.csv2|write\\.socket|write\\.table|xedit|xemacs|zip)\\s*(\\()" }] }, comments: { patterns: [{ captures: { 1: { name: "comment.line.pragma.r" }, 2: { name: "entity.name.pragma.name.r" } }, match: "^(#pragma[ \\t]+mark)[ \\t](.*)", name: "comment.line.pragma-mark.r" }, { begin: "(^[ \\t]+)?(?=#)", beginCaptures: { 1: { name: "punctuation.whitespace.comment.leading.r" } }, end: "(?!\\G)", patterns: [{ begin: "#", beginCaptures: { 0: { name: "punctuation.definition.comment.r" } }, end: "\\n", name: "comment.line.number-sign.r" }] }] }, constants: { patterns: [{ match: "\\b(pi|letters|LETTERS|month\\.abb|month\\.name)\\b", name: "support.constant.misc.r" }, { match: "\\b(TRUE|FALSE|NULL|NA|NA_integer_|NA_real_|NA_complex_|NA_character_|Inf|NaN)\\b", name: "constant.language.r" }, { match: "\\b0(x|X)[0-9a-fA-F]+i\\b", name: "constant.numeric.imaginary.hexadecimal.r" }, { match: "\\b[0-9]+\\.?[0-9]*(?:(e|E)(\\+|-)?[0-9]+)?i\\b", name: "constant.numeric.imaginary.decimal.r" }, { match: "\\.[0-9]+(?:(e|E)(\\+|-)?[0-9]+)?i\\b", name: "constant.numeric.imaginary.decimal.r" }, { match: "\\b0(x|X)[0-9a-fA-F]+L\\b", name: "constant.numeric.integer.hexadecimal.r" }, { match: "\\b(?:[0-9]+\\.?[0-9]*)(?:(e|E)(\\+|-)?[0-9]+)?L\\b", name: "constant.numeric.integer.decimal.r" }, { match: "\\b0(x|X)[0-9a-fA-F]+\\b", name: "constant.numeric.float.hexadecimal.r" }, { match: "\\b[0-9]+\\.?[0-9]*(?:(e|E)(\\+|-)?[0-9]+)?\\b", name: "constant.numeric.float.decimal.r" }, { match: "\\.[0-9]+(?:(e|E)(\\+|-)?[0-9]+)?\\b", name: "constant.numeric.float.decimal.r" }] }, "function-calls": { begin: "(?:\\b|(?=\\.))((?:[a-zA-Z._][\\w.]*|`[^`]+`))\\s*(\\()", beginCaptures: { 1: { name: "variable.function.r" }, 2: { name: "punctuation.section.parens.begin.r" } }, contentName: "meta.function-call.arguments.r", end: "(\\))", endCaptures: { 1: { name: "punctuation.section.parens.end.r" } }, name: "meta.function-call.r", patterns: [{ include: "#function-parameters" }] }, "function-declarations": { patterns: [{ captures: { 1: { name: "entity.name.function.r" }, 2: { name: "keyword.operator.assignment.r" }, 3: { name: "keyword.control.r" } }, match: "((?:`[^`\\\\]*(?:\\\\.[^`\\\\]*)*`)|(?:[[:alpha:].][[:alnum:]._]*))\\s*(<?<-|=(?!=))\\s*(function|\\\\)(?!\\w)", name: "meta.function.r", patterns: [{ include: "#lambda-functions" }] }] }, "function-parameters": { patterns: [{ contentName: "meta.function-call.parameters.r", name: "meta.function-call.r" }, { match: "(?:[a-zA-Z._][\\w.]*|`[^`]+`)(?=\\s[^=])", name: "variable.other.r" }, { begin: "(?==)", end: "(?=[,)])", patterns: [{ include: "source.r" }] }, { match: ",", name: "punctuation.separator.parameters.r" }, { include: "source.r" }] }, "general-variables": { patterns: [{ captures: { 1: { name: "variable.parameter.r" }, 2: { name: "keyword.operator.assignment.r" } }, match: "([[:alpha:].][[:alnum:]._]*)\\s*(=)(?=[^=])" }, { captures: { 1: { name: "variable.parameter.r" }, 2: { name: "keyword.operator.assignment.r" } }, match: "(`[^`]+`)\\s*(=)(?=[^=])" }, { match: "\\b([\\d_][[:alnum:]._]+)\\b", name: "invalid.illegal.variable.other.r" }, { match: "\\b([[:alnum:]_]+)(?=::)", name: "entity.namespace.r" }, { match: "\\b([[:alnum:]._]+)\\b", name: "variable.other.r" }, { match: "(`[^`]+`)", name: "variable.other.r" }] }, keywords: { patterns: [{ match: "\\b(break|next|repeat|else|in)\\b", name: "keyword.control.r" }, { match: "\\b(ifelse|if|for|return|switch|while|invisible)\\b(?=\\s*\\()", name: "keyword.control.r" }, { match: "(\\-|\\+|\\*|\\/|%\\/%|%%|%\\*%|%o%|%x%|\\^)", name: "keyword.operator.arithmetic.r" }, { match: "(:=|<-|<<-|->|->>)", name: "keyword.operator.assignment.r" }, { match: "(==|<=|>=|!=|<>|<|>|%in%)", name: "keyword.operator.comparison.r" }, { match: "(!|&{1,2}|[|]{1,2})", name: "keyword.operator.logical.r" }, { match: "(\\|>)", name: "keyword.operator.pipe.r" }, { match: "(%between%|%chin%|%like%|%\\+%|%\\+replace%|%:%|%do%|%dopar%|%>%|%<>%|%T>%|%\\$%)", name: "keyword.operator.other.r" }, { match: "(\\.\\.\\.|\\$|:|\\~|@)", name: "keyword.other.r" }] }, "lambda-functions": { patterns: [{ begin: "\\b(function)\\s*(\\()", beginCaptures: { 1: { name: "keyword.control.r" }, 2: { name: "punctuation.section.parens.begin.r" } }, contentName: "meta.function.parameters.r", end: "\\)", endCaptures: { 0: { name: "punctuation.section.parens.end.r" } }, name: "meta.function.r", patterns: [{ include: "#comments" }, { match: "(?:[a-zA-Z._][\\w.]*|`[^`]+`)", name: "variable.other.r" }, { begin: "(?==)", end: "(?=[,)])", patterns: [{ include: "source.r" }] }, { match: ",", name: "punctuation.separator.parameters.r" }] }] }, roxygen: { patterns: [{ begin: "^\\s*(#')\\s*", beginCaptures: { 1: { name: "punctuation.definition.comment.r" } }, end: "$\\n?", name: "comment.line.roxygen.r", patterns: [{ captures: { 1: { name: "keyword.other.r" }, 2: { name: "variable.parameter.r" } }, match: "(@param)\\s*((?:[a-zA-Z._][\\w.]*|`[^`]+`))" }, { match: "@[a-zA-Z0-9]+", name: "keyword.other.r" }] }] }, "storage-type": { patterns: [{ match: "\\b(character|complex|double|expression|integer|list|logical|numeric|single|raw)\\b(?=\\s*\\()", name: "storage.type.r" }] }, strings: { patterns: [{ begin: '[rR]"(-*)\\[', beginCaptures: { 0: { name: "punctuation.definition.string.raw.begin.r" } }, end: '\\]\\1"', endCaptures: { 0: { name: "punctuation.definition.string.raw.end.r" } }, name: "string.quoted.double.raw.r" }, { begin: "[rR]'(-*)\\[", beginCaptures: { 0: { name: "punctuation.definition.string.raw.begin.r" } }, end: "\\]\\1'", endCaptures: { 0: { name: "punctuation.definition.string.raw.end.r" } }, name: "string.quoted.single.raw.r" }, { begin: '[rR]"(-*)\\{', beginCaptures: { 0: { name: "punctuation.definition.string.raw.begin.r" } }, end: '\\}\\1"', endCaptures: { 0: { name: "punctuation.definition.string.raw.end.r" } }, name: "string.quoted.double.raw.r" }, { begin: "[rR]'(-*)\\{", beginCaptures: { 0: { name: "punctuation.definition.string.raw.begin.r" } }, end: "\\}\\1'", endCaptures: { 0: { name: "punctuation.definition.string.raw.end.r" } }, name: "string.quoted.single.raw.r" }, { begin: '[rR]"(-*)\\(', beginCaptures: { 0: { name: "punctuation.definition.string.raw.begin.r" } }, end: '\\)\\1"', endCaptures: { 0: { name: "punctuation.definition.string.raw.end.r" } }, name: "string.quoted.double.raw.r" }, { begin: "[rR]'(-*)\\(", beginCaptures: { 0: { name: "punctuation.definition.string.raw.begin.r" } }, end: "\\)\\1'", endCaptures: { 0: { name: "punctuation.definition.string.raw.end.r" } }, name: "string.quoted.single.raw.r" }, { begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.r" } }, end: '"', endCaptures: { 0: { name: "punctuation.definition.string.end.r" } }, name: "string.quoted.double.r", patterns: [{ match: "\\\\.", name: "constant.character.escape.r" }] }, { begin: "'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.r" } }, end: "'", endCaptures: { 0: { name: "punctuation.definition.string.end.r" } }, name: "string.quoted.single.r", patterns: [{ match: "\\\\.", name: "constant.character.escape.r" }] }] } }, scopeName: "source.r" });
var z = [
  Me
];
const He = Object.freeze({ displayName: "TeX", name: "tex", patterns: [{ begin: "(?<=^\\s*)((\\\\)iffalse)", beginCaptures: { 1: { name: "keyword.control.tex" }, 2: { name: "punctuation.definition.keyword.tex" } }, contentName: "comment.line.percentage.tex", end: "(?<=^\\s*)((\\\\)(?:else|fi))", endCaptures: { 1: { name: "keyword.control.tex" }, 2: { name: "punctuation.definition.keyword.tex" } }, patterns: [{ include: "#comment" }, { include: "#conditionals" }] }, { captures: { 1: { name: "punctuation.definition.keyword.tex" } }, match: "(\\\\)(backmatter|csname|else|endcsname|fi|frontmatter|mainmatter|unless|if(case|cat|csname|defined|dim|eof|false|fontchar|hbox|hmode|inner|mmode|num|odd|true|vbox|vmode|void|x)?)(?![a-zA-Z@])", name: "keyword.control.tex" }, { captures: { 1: { name: "keyword.control.catcode.tex" }, 2: { name: "punctuation.definition.keyword.tex" }, 3: { name: "punctuation.separator.key-value.tex" }, 4: { name: "constant.numeric.category.tex" } }, match: "((\\\\)catcode)`(?:\\\\)?.(=)(\\d+)", name: "meta.catcode.tex" }, { include: "#comment" }, { match: "[\\[\\]]", name: "punctuation.definition.brackets.tex" }, { begin: "(\\$\\$|\\$)", beginCaptures: { 1: { name: "punctuation.definition.string.begin.tex" } }, end: "(\\1)", endCaptures: { 1: { name: "punctuation.definition.string.end.tex" } }, name: "meta.math.block.tex support.class.math.block.tex", patterns: [{ match: "\\\\\\$", name: "constant.character.escape.tex" }, { include: "#math" }, { include: "$self" }] }, { match: "\\\\\\\\", name: "keyword.control.newline.tex" }, { captures: { 1: { name: "punctuation.definition.function.tex" } }, match: "(\\\\)_*[\\p{Alphabetic}@]+(?:_[\\p{Alphabetic}@]+)*:[NncVvoxefTFpwD]*", name: "support.class.general.latex3.tex" }, { captures: { 1: { name: "punctuation.definition.function.tex" } }, match: "(\\.)[\\p{Alphabetic}@]+(?:_[\\p{Alphabetic}@]+)*:[NncVvoxefTFpwD]*", name: "support.class.general.latex3.tex" }, { captures: { 1: { name: "punctuation.definition.function.tex" } }, match: "(\\\\)(?:[,;]|(?:[\\p{Alphabetic}@]+))", name: "support.function.general.tex" }, { captures: { 1: { name: "punctuation.definition.keyword.tex" } }, match: "(\\\\)[^a-zA-Z@]", name: "constant.character.escape.tex" }], repository: { braces: { begin: "(?<!\\\\)\\{", beginCaptures: { 0: { name: "punctuation.group.begin.tex" } }, end: "(?<!\\\\)\\}", endCaptures: { 0: { name: "punctuation.group.end.tex" } }, name: "meta.group.braces.tex", patterns: [{ include: "#braces" }] }, comment: { begin: "(^[ \\t]+)?(?=%)", beginCaptures: { 1: { name: "punctuation.whitespace.comment.leading.tex" } }, end: "(?!\\G)", patterns: [{ begin: "%:?", beginCaptures: { 0: { name: "punctuation.definition.comment.tex" } }, end: "$\\n?", name: "comment.line.percentage.tex" }, { begin: "^(%!TEX) (\\S*) =", beginCaptures: { 1: { name: "punctuation.definition.comment.tex" } }, end: "$\\n?", name: "comment.line.percentage.directive.tex" }] }, conditionals: { begin: "(?<=^\\s*)\\\\if[a-z]*", end: "(?<=^\\s*)\\\\fi", patterns: [{ include: "#comment" }, { include: "#conditionals" }] }, math: { patterns: [{ begin: "((\\\\)(?:text|mbox))(\\{)", beginCaptures: { 1: { name: "constant.other.math.tex" }, 2: { name: "punctuation.definition.function.tex" }, 3: { name: "punctuation.definition.arguments.begin.tex meta.text.normal.tex" } }, contentName: "meta.text.normal.tex", end: "\\}", endCaptures: { 0: { name: "punctuation.definition.arguments.end.tex meta.text.normal.tex" } }, patterns: [{ include: "#math" }, { include: "$self" }] }, { match: "\\\\{|\\\\}", name: "punctuation.math.bracket.pair.tex" }, { match: "\\\\(left|right|((big|bigg|Big|Bigg)[lr]?))([\\(\\[\\<\\>\\]\\)\\.\\|]|\\\\[{}|]|\\\\[lr]?[Vv]ert|\\\\[lr]angle)", name: "punctuation.math.bracket.pair.big.tex" }, { captures: { 1: { name: "punctuation.definition.constant.math.tex" } }, match: "(\\\\)(s(s(earrow|warrow|lash)|h(ort(downarrow|uparrow|parallel|leftarrow|rightarrow|mid)|arp)|tar|i(gma|m(eq)?)|u(cc(sim|n(sim|approx)|curlyeq|eq|approx)?|pset(neq(q)?|plus(eq)?|eq(q)?)?|rd|m|bset(neq(q)?|plus(eq)?|eq(q)?)?)|p(hericalangle|adesuit)|e(tminus|arrow)|q(su(pset(eq)?|bset(eq)?)|c(up|ap)|uare)|warrow|m(ile|all(s(etminus|mile)|frown)))|h(slash|ook(leftarrow|rightarrow)|eartsuit|bar)|R(sh|ightarrow|e|bag)|Gam(e|ma)|n(s(hort(parallel|mid)|im|u(cc(eq)?|pseteq(q)?|bseteq))|Rightarrow|n(earrow|warrow)|cong|triangle(left(eq(slant)?)?|right(eq(slant)?)?)|i(plus)?|u|p(lus|arallel|rec(eq)?)|e(q|arrow|g|xists)|v(dash|Dash)|warrow|le(ss|q(slant|q)?|ft(arrow|rightarrow))|a(tural|bla)|VDash|rightarrow|g(tr|eq(slant|q)?)|mid|Left(arrow|rightarrow))|c(hi|irc(eq|le(d(circ|S|dash|ast)|arrow(left|right)))?|o(ng|prod|lon|mplement)|dot(s|p)?|u(p|r(vearrow(left|right)|ly(eq(succ|prec)|vee(downarrow|uparrow)?|wedge(downarrow|uparrow)?)))|enterdot|lubsuit|ap)|Xi|Maps(to(char)?|from(char)?)|B(ox|umpeq|bbk)|t(h(ick(sim|approx)|e(ta|refore))|imes|op|wohead(leftarrow|rightarrow)|a(u|lloblong)|riangle(down|q|left(eq(slant)?)?|right(eq(slant)?)?)?)|i(n(t(er(cal|leave))?|plus|fty)?|ota|math)|S(igma|u(pset|bset))|zeta|o(slash|times|int|dot|plus|vee|wedge|lessthan|greaterthan|m(inus|ega)|b(slash|long|ar))|d(i(v(ideontimes)?|a(g(down|up)|mond(suit)?)|gamma)|o(t(plus|eq(dot)?)|ublebarwedge|wn(harpoon(left|right)|downarrows|arrow))|d(ots|agger)|elta|a(sh(v|leftarrow|rightarrow)|leth|gger))|Y(down|up|left|right)|C(up|ap)|u(n(lhd|rhd)|p(silon|harpoon(left|right)|downarrow|uparrows|lus|arrow)|lcorner|rcorner)|jmath|Theta|Im|p(si|hi|i(tchfork)?|erp|ar(tial|allel)|r(ime|o(d|pto)|ec(sim|n(sim|approx)|curlyeq|eq|approx)?)|m)|e(t(h|a)|psilon|q(slant(less|gtr)|circ|uiv)|ll|xists|mptyset)|Omega|D(iamond|ownarrow|elta)|v(d(ots|ash)|ee(bar)?|Dash|ar(s(igma|u(psetneq(q)?|bsetneq(q)?))|nothing|curly(vee|wedge)|t(heta|imes|riangle(left|right)?)|o(slash|circle|times|dot|plus|vee|wedge|lessthan|ast|greaterthan|minus|b(slash|ar))|p(hi|i|ropto)|epsilon|kappa|rho|bigcirc))|kappa|Up(silon|downarrow|arrow)|Join|f(orall|lat|a(t(s(emi|lash)|bslash)|llingdotseq)|rown)|P(si|hi|i)|w(p|edge|r)|l(hd|n(sim|eq(q)?|approx)|ceil|times|ightning|o(ng(left(arrow|rightarrow)|rightarrow|maps(to|from))|zenge|oparrow(left|right))|dot(s|p)|e(ss(sim|dot|eq(qgtr|gtr)|approx|gtr)|q(slant|q)?|ft(slice|harpoon(down|up)|threetimes|leftarrows|arrow(t(ail|riangle))?|right(squigarrow|harpoons|arrow(s|triangle|eq)?))|adsto)|vertneqq|floor|l(c(orner|eil)|floor|l|bracket)?|a(ngle|mbda)|rcorner|bag)|a(s(ymp|t)|ngle|pprox(eq)?|l(pha|eph)|rrownot|malg)|V(dash|vdash)|r(h(o|d)|ceil|times|i(singdotseq|ght(s(quigarrow|lice)|harpoon(down|up)|threetimes|left(harpoons|arrows)|arrow(t(ail|riangle))?|rightarrows))|floor|angle|r(ceil|parenthesis|floor|bracket)|bag)|g(n(sim|eq(q)?|approx)|tr(sim|dot|eq(qless|less)|less|approx)|imel|eq(slant|q)?|vertneqq|amma|g(g)?)|Finv|xi|m(ho|i(nuso|d)|o(o|dels)|u(ltimap)?|p|e(asuredangle|rge)|aps(to|from(char)?))|b(i(n(dnasrepma|ampersand)|g(s(tar|qc(up|ap))|nplus|c(irc|u(p|rly(vee|wedge))|ap)|triangle(down|up)|interleave|o(times|dot|plus)|uplus|parallel|vee|wedge|box))|o(t|wtie|x(slash|circle|times|dot|plus|empty|ast|minus|b(slash|ox|ar)))|u(llet|mpeq)|e(cause|t(h|ween|a))|lack(square|triangle(down|left|right)?|lozenge)|a(ck(s(im(eq)?|lash)|prime|epsilon)|r(o|wedge))|bslash)|L(sh|ong(left(arrow|rightarrow)|rightarrow|maps(to|from))|eft(arrow|rightarrow)|leftarrow|ambda|bag)|Arrownot)(?![a-zA-Z@])", name: "constant.character.math.tex" }, { captures: { 1: { name: "punctuation.definition.constant.math.tex" } }, match: "(\\\\)(sum|prod|coprod|int|oint|bigcap|bigcup|bigsqcup|bigvee|bigwedge|bigodot|bigotimes|bogoplus|biguplus)\\b", name: "constant.character.math.tex" }, { captures: { 1: { name: "punctuation.definition.constant.math.tex" } }, match: "(\\\\)(arccos|arcsin|arctan|arg|cos|cosh|cot|coth|csc|deg|det|dim|exp|gcd|hom|inf|ker|lg|lim|liminf|limsup|ln|log|max|min|pr|sec|sin|sinh|sup|tan|tanh)\\b", name: "constant.other.math.tex" }, { begin: "((\\\\)Sexpr(\\{))", beginCaptures: { 1: { name: "support.function.sexpr.math.tex" }, 2: { name: "punctuation.definition.function.math.tex" }, 3: { name: "punctuation.section.embedded.begin.math.tex" } }, contentName: "support.function.sexpr.math.tex", end: "(((\\})))", endCaptures: { 1: { name: "support.function.sexpr.math.tex" }, 2: { name: "punctuation.section.embedded.end.math.tex" }, 3: { name: "source.r" } }, name: "meta.embedded.line.r", patterns: [{ begin: "\\G(?!\\})", end: "(?=\\})", name: "source.r", patterns: [{ include: "source.r" }] }] }, { captures: { 1: { name: "punctuation.definition.constant.math.tex" } }, match: "(\\\\)(?!begin\\{|verb)([A-Za-z]+)", name: "constant.other.general.math.tex" }, { match: "(?<!\\\\)\\{", name: "punctuation.math.begin.bracket.curly.tex" }, { match: "(?<!\\\\)\\}", name: "punctuation.math.end.bracket.curly.tex" }, { match: "(?<!\\\\)\\(", name: "punctuation.math.begin.bracket.round.tex" }, { match: "(?<!\\\\)\\)", name: "punctuation.math.end.bracket.round.tex" }, { match: "(([0-9]*[\\.][0-9]+)|[0-9]+)", name: "constant.numeric.math.tex" }, { match: "[\\+\\*/_\\^-]", name: "punctuation.math.operator.tex" }] } }, scopeName: "text.tex", embeddedLangs: ["r"] });
var Xe = [
  ...z,
  He
];
const Ve = Object.freeze({ displayName: "Gnuplot", fileTypes: ["gp", "plt", "plot", "gnuplot"], name: "gnuplot", patterns: [{ match: "(\\\\(?!\\n).*)", name: "invalid.illegal.backslash.gnuplot" }, { match: "(;)", name: "punctuation.separator.statement.gnuplot" }, { include: "#LineComment" }, { include: "#DataBlock" }, { include: "#MacroExpansion" }, { include: "#VariableDecl" }, { include: "#ArrayDecl" }, { include: "#FunctionDecl" }, { include: "#ShellCommand" }, { include: "#Command" }], repository: { ArrayDecl: { begin: `\\b(?x:
(array)\\s+
([A-Za-z_]\\w*)?


)`, beginCaptures: { 1: { name: "support.type.array.gnuplot" }, 2: { name: "entity.name.variable.gnuplot", patterns: [{ include: "#InvalidVariableDecl" }, { include: "#BuiltinVariable" }] } }, end: "(?=(;|#|\\\\(?!\\n)|(?<!\\\\)\\n$))", name: "meta.variable.gnuplot", patterns: [{ include: "#Expression" }] }, BuiltinFunction: { patterns: [{ match: `\\b(?x:
defined
)\\b`, name: "invalid.deprecated.function.gnuplot" }, { match: `\\b(?x:
abs            |
acos           |
acosh          |
airy           |
arg            |
asin           |
asinh          |
atan           |
atan2          |
atanh          |
EllipticK      |
EllipticE      |
EllipticPi     |
besj0          |
besj1          |
besy0          |
besy1          |
ceil           |
cos            |
cosh           |
erf            |
erfc           |
exp            |
expint         |
floor          |
gamma          |
ibeta          |
inverf         |
igamma         |
imag           |
invnorm        |
int            |
lambertw       |
lgamma         |
log            |
log10          |
norm           |
rand           |
real           |
sgn            |
sin            |
sinh           |
sqrt           |
tan            |
tanh           |
voigt          |
cerf           |
cdawson        |
faddeeva       |
erfi           |
VP
)\\b`, name: "support.function.math.gnuplot" }, { match: `\\b(?x:
gprintf        |
sprintf        |
strlen         |
strstrt        |
substr         |
strftime       |
strptime       |
system         |
word           |
words
)\\b`, name: "support.function.string.gnuplot" }, { match: `\\b(?x:
column         |
columnhead     |
exists         |
hsv2rgb        |
stringcolumn   |
timecolumn     |
tm_hour        |
tm_mday        |
tm_min         |
tm_mon         |
tm_sec         |
tm_wday        |
tm_yday        |
tm_year        |
time           |
valid          |
value
)\\b`, name: "support.function.other.gnuplot" }] }, BuiltinOperator: { patterns: [{ match: "(&&|\\|\\|)", name: "keyword.operator.logical.gnuplot" }, { match: "(<<|>>|&|\\||\\^)", name: "keyword.operator.bitwise.gnuplot" }, { match: "(==|!=|<=|<|>=|>)", name: "keyword.operator.comparison.gnuplot" }, { match: "(=)", name: "keyword.operator.assignment.gnuplot" }, { match: "(\\+|-|~|!)", name: "keyword.operator.arithmetic.gnuplot" }, { match: "(\\*\\*|\\+|-|\\*|/|%)", name: "keyword.operator.arithmetic.gnuplot" }, { captures: { 2: { name: "keyword.operator.word.gnuplot" } }, match: "(\\.|\\b(eq|ne)\\b)", name: "keyword.operator.strings.gnuplot" }] }, BuiltinVariable: { patterns: [{ match: `\\b(?x:
FIT_LIMIT           |
FIT_MAXITER         |
FIT_START_LAMBDA    |
FIT_LAMBDA_FACTOR   |
FIT_SKIP            |
FIT_INDEX
)\\b`, name: "invalid.deprecated.variable.gnuplot" }, { match: "\\b(GPVAL_\\w*|MOUSE_\\w*)\\b", name: "support.constant.gnuplot" }, { match: "\\b(ARG[0-9C]|GPFUN_\\w*|FIT_\\w*|STATS_\\w*|pi|NaN)\\b", name: "support.variable.gnuplot" }] }, ColumnIndexLiteral: { match: "([$][0-9]+)\\b", name: "support.constant.columnindex.gnuplot" }, Command: { patterns: [{ begin: `\\b(?x:
update
)\\b`, end: "(?=(;|#|\\\\(?!\\n)|(?<!\\\\)\\n$))", name: "invalid.deprecated.command.gnuplot" }, { begin: `\\b(?x:
break        |
clear        |
continue     |
pwd          |
refresh      |
replot       |
reread       |
shell
)\\b`, beginCaptures: { 0: { name: "keyword.other.command.gnuplot" } }, end: "(?=(;|#|\\\\(?!\\n)|(?<!\\\\)\\n$))", patterns: [{ include: "#InvalidWord" }] }, { begin: `\\b(?x:
cd           |
call         |
eval         |
exit         |
help         |
history      |
load         |
lower        |
pause        |
print        |
printerr     |
quit         |
raise        |
save         |
stats        |
system       |
test         |
toggle
)\\b`, beginCaptures: { 0: { name: "keyword.other.command.gnuplot" } }, end: "(?=(;|#|\\\\(?!\\n)|(?<!\\\\)\\n$))", patterns: [{ include: "#Expression" }] }, { begin: "\\b(import)\\s(.+)\\s(from)", beginCaptures: { 1: { name: "keyword.control.import.gnuplot" }, 2: { patterns: [{ include: "#FunctionDecl" }] }, 3: { name: "keyword.control.import.gnuplot" } }, end: "(?=(;|#|\\\\(?!\\n)|(?<!\\\\)\\n$))", patterns: [{ include: "#SingleQuotedStringLiteral" }, { include: "#DoubleQuotedStringLiteral" }, { include: "#InvalidWord" }] }, { begin: "\\b(reset)\\b", beginCaptures: { 1: { name: "keyword.other.command.gnuplot" } }, end: "(?=(;|#|\\\\(?!\\n)|(?<!\\\\)\\n$))", patterns: [{ match: "\\b(bind|error(state)?|session)\\b", name: "support.class.reset.gnuplot" }, { include: "#InvalidWord" }] }, { begin: "\\b(undefine)\\b", beginCaptures: { 1: { name: "keyword.other.command.gnuplot" } }, end: "(?=(;|#|\\\\(?!\\n)|(?<!\\\\)\\n$))", patterns: [{ include: "#BuiltinVariable" }, { include: "#BuiltinFunction" }, { match: "(?<=\\s)([$]?[A-Za-z_]\\w*\\*?)(?=\\s)", name: "source.gnuplot" }, { include: "#InvalidWord" }] }, { begin: "\\b(if|while)\\b", beginCaptures: { 1: { name: "keyword.control.conditional.gnuplot" } }, end: "(?=(\\{|#|\\\\(?!\\n)|(?<!\\\\)\\n$))", patterns: [{ include: "#Expression" }] }, { begin: "\\b(else)\\b", beginCaptures: { 1: { name: "keyword.control.conditional.gnuplot" } }, end: "(?=(\\{|#|\\\\(?!\\n)|(?<!\\\\)\\n$))" }, { begin: "\\b(do)\\b", beginCaptures: { 1: { name: "keyword.control.flow.gnuplot" } }, end: "(?=(\\{|#|\\\\(?!\\n)|(?<!\\\\)\\n$))", patterns: [{ include: "#ForIterationExpr" }] }, { begin: "\\b(set)(?=\\s+pm3d)\\b", beginCaptures: { 1: { name: "keyword.other.command.gnuplot" } }, end: "(?=(;|#|\\\\(?!\\n)|(?<!\\\\)\\n$))", patterns: [{ match: "\\b(hidden3d|map|transparent|solid)\\b", name: "invalid.deprecated.options.gnuplot" }, { include: "#SetUnsetOptions" }, { include: "#ForIterationExpr" }, { include: "#Expression" }] }, { begin: "\\b((un)?set)\\b", beginCaptures: { 1: { name: "keyword.other.command.gnuplot" } }, end: "(?=(;|#|\\\\(?!\\n)|(?<!\\\\)\\n$))", patterns: [{ include: "#SetUnsetOptions" }, { include: "#ForIterationExpr" }, { include: "#Expression" }] }, { begin: "\\b(show)\\b", beginCaptures: { 1: { name: "keyword.other.command.gnuplot" } }, end: "(?=(;|#|\\\\(?!\\n)|(?<!\\\\)\\n$))", patterns: [{ include: "#ExtraShowOptions" }, { include: "#SetUnsetOptions" }, { include: "#Expression" }] }, { begin: "\\b(fit|(s)?plot)\\b", beginCaptures: { 1: { name: "keyword.other.command.gnuplot" } }, end: "(?=(;|#|\\\\(?!\\n)|(?<!\\\\)\\n$))", patterns: [{ include: "#ColumnIndexLiteral" }, { include: "#PlotModifiers" }, { include: "#ForIterationExpr" }, { include: "#Expression" }] }] }, DataBlock: { begin: `(?x:
([$][A-Za-z_]\\w*)\\s*
(<<)\\s*
([A-Za-z_]\\w*)\\s*
(?=(\\#|$))
)`, beginCaptures: { 1: { patterns: [{ include: "#SpecialVariable" }] }, 3: { name: "constant.language.datablock.gnuplot" } }, end: "^(\\3)\\b(.*)", endCaptures: { 1: { name: "constant.language.datablock.gnuplot" }, 2: { name: "invalid.illegal.datablock.gnuplot" } }, name: "meta.datablock.gnuplot", patterns: [{ include: "#LineComment" }, { include: "#NumberLiteral" }, { include: "#DoubleQuotedStringLiteral" }] }, DeprecatedScriptArgsLiteral: { match: "([$][0-9#])", name: "invalid.illegal.scriptargs.gnuplot" }, DoubleQuotedStringLiteral: { begin: '(")', beginCaptures: { 1: { name: "punctuation.definition.string.begin.gnuplot" } }, end: '((")|(?=(?<!\\\\)\\n$))', endCaptures: { 0: { name: "punctuation.definition.string.end.gnuplot" } }, name: "string.quoted.double.gnuplot", patterns: [{ include: "#EscapedChar" }, { include: "#RGBColorSpec" }, { include: "#DeprecatedScriptArgsLiteral" }, { include: "#InterpolatedStringLiteral" }] }, EscapedChar: { match: "(\\\\.)", name: "constant.character.escape.gnuplot" }, Expression: { patterns: [{ include: "#Literal" }, { include: "#SpecialVariable" }, { include: "#BuiltinVariable" }, { include: "#BuiltinOperator" }, { include: "#TernaryExpr" }, { include: "#FunctionCallExpr" }, { include: "#SummationExpr" }] }, ExtraShowOptions: { match: `\\b(?x:
all                         |
bind                        |
colornames                  |
functions                   |
plot                        |
variables                   |
version
)\\b`, name: "support.class.options.gnuplot" }, ForIterationExpr: { begin: `\\b(?x:
(for)\\s*
(\\[)\\s*
(?:
([A-Za-z_]\\w*)\\s+
(in)\\b
)?
)`, beginCaptures: { 1: { name: "keyword.control.flow.gnuplot" }, 2: { patterns: [{ include: "#RangeSeparators" }] }, 3: { name: "variable.other.iterator.gnuplot" }, 4: { name: "keyword.control.flow.gnuplot" } }, end: "((\\])|(?=(#|\\\\(?!\\n)|(?<!\\\\)\\n$)))", endCaptures: { 2: { patterns: [{ include: "#RangeSeparators" }] } }, patterns: [{ include: "#Expression" }, { include: "#RangeSeparators" }] }, FunctionCallExpr: { begin: "\\b([A-Za-z_]\\w*)\\s*(\\()", beginCaptures: { 1: { name: "variable.function.gnuplot", patterns: [{ include: "#BuiltinFunction" }] }, 2: { name: "punctuation.definition.arguments.begin.gnuplot" } }, end: "((\\))|(?=(#|\\\\(?!\\n)|(?<!\\\\)\\n$)))", endCaptures: { 2: { name: "punctuation.definition.arguments.end.gnuplot" } }, name: "meta.function-call.gnuplot", patterns: [{ include: "#Expression" }] }, FunctionDecl: { begin: `\\b(?x:
([A-Za-z_]\\w*)\\s*
(
(\\()\\s*
([A-Za-z_]\\w*)\\s*
(?:
(,)\\s*
([A-Za-z_]\\w*)\\s*
)*
(\\))
)
)`, beginCaptures: { 1: { name: "entity.name.function.gnuplot", patterns: [{ include: "#BuiltinFunction" }] }, 2: { name: "meta.function.parameters.gnuplot" }, 3: { name: "punctuation.definition.parameters.begin.gnuplot" }, 4: { name: "variable.parameter.function.language.gnuplot" }, 5: { name: "punctuation.separator.parameters.gnuplot" }, 6: { name: "variable.parameter.function.language.gnuplot" }, 7: { name: "punctuation.definition.parameters.end.gnuplot" } }, end: "(?=(;|#|\\\\(?!\\n)|(?<!\\\\)\\n$))", name: "meta.function.gnuplot", patterns: [{ include: "#Expression" }] }, InterpolatedStringLiteral: { begin: "(`)", beginCaptures: { 1: { name: "punctuation.definition.string.begin.gnuplot" } }, end: "((`)|(?=(?<!\\\\)\\n$))", endCaptures: { 0: { name: "punctuation.definition.string.end.gnuplot" } }, name: "string.interpolated.gnuplot", patterns: [{ include: "#EscapedChar" }] }, InvalidVariableDecl: { match: "\\b(GPVAL_\\w*|MOUSE_\\w*)\\b", name: "invalid.illegal.variable.gnuplot" }, InvalidWord: { match: "([^;#\\\\[:space:]]+)", name: "invalid.illegal.gnuplot" }, LineComment: { begin: "(#)", beginCaptures: { 1: { name: "punctuation.definition.comment.begin.gnuplot" } }, end: "(?=(?<!\\\\)\\n$)", endCaptures: { 0: { name: "punctuation.definition.comment.end.gnuplot" } }, name: "comment.line.number-sign.gnuplot" }, Literal: { patterns: [{ include: "#NumberLiteral" }, { include: "#DeprecatedScriptArgsLiteral" }, { include: "#SingleQuotedStringLiteral" }, { include: "#DoubleQuotedStringLiteral" }, { include: "#InterpolatedStringLiteral" }] }, MacroExpansion: { begin: "([@][A-Za-z_]\\w*)", beginCaptures: { 1: { patterns: [{ include: "#SpecialVariable" }] } }, end: "(?=(;|#|\\\\(?!\\n)|(?<!\\\\)\\n$))", patterns: [{ include: "#Expression" }] }, NumberLiteral: { patterns: [{ match: `(?x:

( ((\\b[0-9]+)|(?<!\\d)) )
( [.][0-9]+ )
( [Ee][+-]?[0-9]+ )?
)(cm|in)?\\b`, name: "constant.numeric.float.gnuplot" }, { match: `(?x:

( \\b[0-9]+ )
(
(     ( [Ee][+-]?[0-9]+\\b )  ) |
( [.] ( [Ee][+-]?[0-9]+\\b )? )
)
)(cm\\b|in\\b)?`, name: "constant.numeric.float.gnuplot" }, { match: "\\b(0[Xx][0-9a-fA-F]+)(cm|in)?\\b", name: "constant.numeric.hex.gnuplot" }, { match: "\\b(0+)(cm|in)?\\b", name: "constant.numeric.dec.gnuplot" }, { match: "\\b(0[0-7]+)(cm|in)?\\b", name: "constant.numeric.oct.gnuplot" }, { match: "\\b(0[0-9]+)(cm|in)?\\b", name: "invalid.illegal.oct.gnuplot" }, { match: "\\b([0-9]+)(cm|in)?\\b", name: "constant.numeric.dec.gnuplot" }] }, PlotModifiers: { patterns: [{ match: "\\b(thru)\\b", name: "invalid.deprecated.plot.gnuplot" }, { match: `\\b(?x:
in(dex)?            |
every               |
us(ing)?            |
wi(th)?             |
via
)\\b`, name: "storage.type.plot.gnuplot" }, { match: "\\b(newhist(ogram)?)\\b", name: "storage.type.plot.gnuplot" }] }, RGBColorSpec: { match: "\\G(0x|#)(([0-9a-fA-F]{6})|([0-9a-fA-F]{8}))\\b", name: "constant.other.placeholder.gnuplot" }, RangeSeparators: { patterns: [{ match: "(\\[)", name: "punctuation.section.brackets.begin.gnuplot" }, { match: "(:)", name: "punctuation.separator.range.gnuplot" }, { match: "(\\])", name: "punctuation.section.brackets.end.gnuplot" }] }, SetUnsetOptions: { patterns: [{ match: `\\G\\s*\\b(?x:
clabel              |
data                |
function            |
historysize         |
macros              |
ticslevel           |
ticscale            |
(style\\s+increment\\s+\\w+)
)\\b`, name: "invalid.deprecated.options.gnuplot" }, { match: `\\G\\s*\\b(?x:
angles              |
arrow               |
autoscale           |
border              |
boxwidth            |
clip                |
cntr(label|param)   |
color(box|sequence)?|
contour             |
(dash|line)type     |
datafile            |
decimal(sign)?      |
dgrid3d             |
dummy               |
encoding            |
(error)?bars        |
fit                 |
fontpath            |
format              |
grid                |
hidden3d            |
history             |
(iso)?samples       |
jitter              |
key                 |
label               |
link                |
loadpath            |
locale              |
logscale            |
mapping             |
[lrtb]margin        |
margins             |
micro               |
minus(sign)?        |
mono(chrome)?       |
mouse               |
multiplot           |
nonlinear           |
object              |
offsets             |
origin              |
output              |
parametric          |
(p|r)axis           |
pm3d                |
palette             |
pointintervalbox    |
pointsize           |
polar               |
print               |
psdir               |
size                |
style               |
surface             |
table               |
terminal            |
termoption          |
theta               |
tics                |
timestamp           |
timefmt             |
title               |
view                |
xyplane             |
zero                |
(no)?(m)?(x|x2|y|y2|z|cb|r|t)tics  |
(x|x2|y|y2|z|cb)data               |
(x|x2|y|y2|z|cb|r)label            |
(x|x2|y|y2|z|cb)dtics              |
(x|x2|y|y2|z|cb)mtics              |
(x|x2|y|y2|z|cb|[rtuv])range       |
(x|x2|y|y2|z)?zeroaxis
)\\b`, name: "support.class.options.gnuplot" }] }, ShellCommand: { begin: "(!)", beginCaptures: { 1: { name: "keyword.other.shell.gnuplot" } }, end: "(?=(#|\\\\(?!\\n)|(?<!\\\\)\\n$))", patterns: [{ match: "([^#]|\\\\(?=\\n))", name: "string.unquoted" }] }, SingleQuotedStringLiteral: { begin: "(')", beginCaptures: { 1: { name: "punctuation.definition.string.begin.gnuplot" } }, end: "((')(?!')|(?=(?<!\\\\)\\n$))", endCaptures: { 0: { name: "punctuation.definition.string.end.gnuplot" } }, name: "string.quoted.single.gnuplot", patterns: [{ include: "#RGBColorSpec" }, { match: "('')", name: "constant.character.escape.gnuplot" }] }, SpecialVariable: { patterns: [{ captures: { 1: { name: "constant.language.wildcard.gnuplot" } }, match: "(?<=[\\[:=])\\s*(\\*)\\s*(?=[:\\]])" }, { captures: { 2: { name: "punctuation.definition.variable.gnuplot" } }, match: "(([@$])[A-Za-z_]\\w*)\\b", name: "constant.language.special.gnuplot" }] }, SummationExpr: { begin: "\\b(sum)\\s*(\\[)", beginCaptures: { 1: { name: "keyword.other.sum.gnuplot" }, 2: { patterns: [{ include: "#RangeSeparators" }] } }, end: "((\\])|(?=(#|\\\\(?!\\n)|(?<!\\\\)\\n$)))", endCaptures: { 2: { patterns: [{ include: "#RangeSeparators" }] } }, patterns: [{ include: "#Expression" }, { include: "#RangeSeparators" }] }, TernaryExpr: { begin: "(?<!\\?)(\\?)(?!\\?)", beginCaptures: { 1: { name: "keyword.operator.ternary.gnuplot" } }, end: "((?<!:)(:)(?!:)|(?=(#|\\\\(?!\\n)|(?<!\\\\)\\n$)))", endCaptures: { 2: { name: "keyword.operator.ternary.gnuplot" } }, patterns: [{ include: "#Expression" }] }, VariableDecl: { begin: `\\b(?x:
([A-Za-z_]\\w*)\\s*
(?:
(\\[)\\s*
(.*)\\s*
(\\])\\s*
)?
(?=(=)(?!\\s*=))
)`, beginCaptures: { 1: { name: "entity.name.variable.gnuplot", patterns: [{ include: "#InvalidVariableDecl" }, { include: "#BuiltinVariable" }] }, 3: { patterns: [{ include: "#Expression" }] } }, end: "(?=(;|#|\\\\(?!\\n)|(?<!\\\\)\\n$))", name: "meta.variable.gnuplot", patterns: [{ include: "#Expression" }] } }, scopeName: "source.gnuplot" });
var Ye = [
  Ve
];
const Ke = Object.freeze({ displayName: "Haskell", fileTypes: ["hs", "hs-boot", "hsig"], name: "haskell", patterns: [{ include: "#liquid_haskell" }, { include: "#comment_like" }, { include: "#numeric_literals" }, { include: "#string_literal" }, { include: "#char_literal" }, { match: "(?<!@|#)-\\}", name: "invalid" }, { captures: { 1: { name: "punctuation.paren.haskell" }, 2: { name: "punctuation.paren.haskell" } }, match: "(\\()\\s*(\\))", name: "constant.language.unit.haskell" }, { captures: { 1: { name: "punctuation.paren.haskell" }, 2: { name: "keyword.operator.hash.haskell" }, 3: { name: "keyword.operator.hash.haskell" }, 4: { name: "punctuation.paren.haskell" } }, match: "(\\()(#)\\s*(#)(\\))", name: "constant.language.unit.unboxed.haskell" }, { captures: { 1: { name: "punctuation.paren.haskell" }, 2: { name: "punctuation.paren.haskell" } }, match: "(\\()\\s*,[\\s,]*(\\))", name: "support.constant.tuple.haskell" }, { captures: { 1: { name: "punctuation.paren.haskell" }, 2: { name: "keyword.operator.hash.haskell" }, 3: { name: "keyword.operator.hash.haskell" }, 4: { name: "punctuation.paren.haskell" } }, match: "(\\()(#)\\s*,[\\s,]*(#)(\\))", name: "support.constant.tuple.unboxed.haskell" }, { captures: { 1: { name: "punctuation.bracket.haskell" }, 2: { name: "punctuation.bracket.haskell" } }, match: "(\\[)\\s*(\\])", name: "constant.language.empty-list.haskell" }, { begin: "(\\b(?<!')(module)|^(signature))(\\b(?!'))", beginCaptures: { 2: { name: "keyword.other.module.haskell" }, 3: { name: "keyword.other.signature.haskell" } }, end: "(?=\\b(?<!')where\\b(?!'))", name: "meta.declaration.module.haskell", patterns: [{ include: "#comment_like" }, { include: "#module_name" }, { include: "#module_exports" }, { match: "[a-z]+", name: "invalid" }] }, { include: "#ffi" }, { begin: "^(\\s*)(class)(\\b(?!'))", beginCaptures: { 2: { name: "keyword.other.class.haskell" } }, end: `(?x)

(?=(?<!')\\bwhere\\b(?!'))

|(?=\\}|;)
|^(?!
\\1\\s+\\S
| \\s*
(?: $
|\\{-[^@]
|--+
(?![\\p{S}\\p{P}&&[^(),;\\[\\]{}\`_"']]).*$)


)`, name: "meta.declaration.class.haskell", patterns: [{ include: "#comment_like" }, { include: "#where" }, { include: "#type_signature" }] }, { begin: `(?x)
^(\\s*)(data|newtype)(?:\\s+(instance))?\\s+

((?:(?!

(?:
(?<![\\p{S}\\p{P}&&[^(),;\\[\\]\`{}_"']])
(?:=|--+)
(?![\\p{S}\\p{P}&&[^(),;\\[\\]\`{}_"']])
)

| (?:\\b(?<!')(?:where|deriving)\\b(?!'))

| {-

).)*)
(?=\\b(?<!'')where\\b(?!''))`, beginCaptures: { 2: { name: "keyword.other.$2.haskell" }, 3: { name: "keyword.other.instance.haskell" }, 4: { patterns: [{ include: "#type_signature" }] } }, end: `(?x)

(?=(?<!')\\bderiving\\b(?!'))

|(?=\\}|;)
|^(?!
\\1\\s+\\S
| \\s*
(?: $
|\\{-[^@]
|--+
(?![\\p{S}\\p{P}&&[^(),;\\[\\]{}\`_"']]).*$)


)
`, name: "meta.declaration.$2.generalized.haskell", patterns: [{ include: "#comment_like" }, { begin: `(?x)
(?<!')\\b(where)
\\s*(\\{)(?!-)`, beginCaptures: { 1: { name: "keyword.other.where.haskell" }, 2: { name: "punctuation.brace.haskell" } }, end: "(\\})", endCaptures: { 1: { name: "punctuation.brace.haskell" } }, patterns: [{ include: "#comment_like" }, { include: "#gadt_constructor" }, { match: ";", name: "punctuation.semicolon.haskell" }] }, { match: "\\b(?<!')(where)\\b(?!')", name: "keyword.other.where.haskell" }, { include: "#deriving" }, { include: "#gadt_constructor" }] }, { include: "#role_annotation" }, { begin: "^(\\s*)(pattern)\\s+(.*?)\\s+(::|∷)(?![\\p{S}\\p{P}&&[^(),;\\[\\]`{}_\"']])", beginCaptures: { 2: { name: "keyword.other.pattern.haskell" }, 3: { patterns: [{ include: "#comma" }, { include: "#data_constructor" }] }, 4: { name: "keyword.operator.double-colon.haskell" } }, end: `(?x)
(?=\\}|;)
|^(?!
\\1\\s+\\S
| \\s*
(?: $
|\\{-[^@]
|--+
(?![\\p{S}\\p{P}&&[^(),;\\[\\]{}\`_"']]).*$)


)
`, name: "meta.declaration.pattern.type.haskell", patterns: [{ include: "#type_signature" }] }, { begin: "^\\s*(pattern)\\b(?!')", captures: { 1: { name: "keyword.other.pattern.haskell" } }, end: `(?x)
(?=\\}|;)
|^(?!
\\1\\s+\\S
| \\s*
(?: $
|\\{-[^@]
|--+
(?![\\p{S}\\p{P}&&[^(),;\\[\\]{}\`_"']]).*$)


)
`, name: "meta.declaration.pattern.haskell", patterns: [{ include: "$self" }] }, { begin: `(?x)

^(\\s*)(data|newtype)(?:\\s+(family|instance))?\\s+

(((?!

(?:
(?<![\\p{S}\\p{P}&&[^(),;\\[\\]\`{}_"']])
(?:=|--+)
(?![\\p{S}\\p{P}&&[^(),;\\[\\]\`{}_"']])
)

| (?:\\b(?<!')(?:where|deriving)\\b(?!'))

| {-

).)*)`, beginCaptures: { 2: { name: "keyword.other.$2.haskell" }, 3: { name: "keyword.other.$3.haskell" }, 4: { patterns: [{ include: "#type_signature" }] } }, end: `(?x)

(?=\\}|;)
|^(?!
\\1\\s+\\S
| \\s*
(?: $
|\\{-[^@]
|--+
(?![\\p{S}\\p{P}&&[^(),;\\[\\]{}\`_"']]).*$)


)`, name: "meta.declaration.$2.algebraic.haskell", patterns: [{ include: "#comment_like" }, { include: "#deriving" }, { include: "#forall" }, { include: "#adt_constructor" }, { include: "#context" }, { include: "#record_decl" }, { include: "#type_signature" }] }, { begin: `(?x)

^(\\s*)(type)\\s+(family)\\b(?!')

(((?!

(?:
(?<![\\p{S}\\p{P}&&[^(),;\\[\\]\`{}_"']])
(?:=|--+)
(?![\\p{S}\\p{P}&&[^(),;\\[\\]\`{}_"']])
)

| \\b(?<!')where\\b(?!')

| {-

).)*)`, beginCaptures: { 2: { name: "keyword.other.type.haskell" }, 3: { name: "keyword.other.family.haskell" }, 4: { patterns: [{ include: "#comment_like" }, { include: "#where" }, { include: "#type_signature" }] } }, end: `(?x)
(?=\\}|;)
|^(?!
\\1\\s+\\S
| \\s*
(?: $
|\\{-[^@]
|--+
(?![\\p{S}\\p{P}&&[^(),;\\[\\]{}\`_"']]).*$)


)
`, name: "meta.declaration.type.family.haskell", patterns: [{ include: "#comment_like" }, { include: "#where" }, { include: "#type_signature" }] }, { begin: `(?x)

^(\\s*)(type)(?:\\s+(instance))?\\s+

(((?!

(?:
(?<![\\p{S}\\p{P}&&[^(),;\\[\\]\`{}_"']])
(?:=|--+|::|∷)
(?![\\p{S}\\p{P}&&[^(),;\\[\\]\`{}_"']])
)

| {-

).)*)`, beginCaptures: { 2: { name: "keyword.other.type.haskell" }, 3: { name: "keyword.other.instance.haskell" }, 4: { patterns: [{ include: "#type_signature" }] } }, end: `(?x)
(?=\\}|;)
|^(?!
\\1\\s+\\S
| \\s*
(?: $
|\\{-[^@]
|--+
(?![\\p{S}\\p{P}&&[^(),;\\[\\]{}\`_"']]).*$)


)
`, name: "meta.declaration.type.haskell", patterns: [{ include: "#type_signature" }] }, { begin: "^(\\s*)(instance)(\\b(?!'))", beginCaptures: { 2: { name: "keyword.other.instance.haskell" } }, end: `(?x)

(?=\\b(?<!')(where)\\b(?!'))

|(?=\\}|;)
|^(?!
\\1\\s+\\S
| \\s*
(?: $
|\\{-[^@]
|--+
(?![\\p{S}\\p{P}&&[^(),;\\[\\]{}\`_"']]).*$)


)
`, name: "meta.declaration.instance.haskell", patterns: [{ include: "#comment_like" }, { include: "#where" }, { include: "#type_signature" }] }, { begin: "^(\\s*)(import)(\\b(?!'))", beginCaptures: { 2: { name: "keyword.other.import.haskell" } }, end: `(?x)

(?=\\b(?<!')(where)\\b(?!'))

|(?=\\}|;)
|^(?!
\\1\\s+\\S
| \\s*
(?: $
|\\{-[^@]
|--+
(?![\\p{S}\\p{P}&&[^(),;\\[\\]{}\`_"']]).*$)


)
`, name: "meta.import.haskell", patterns: [{ include: "#comment_like" }, { include: "#where" }, { captures: { 1: { name: "keyword.other.$1.haskell" } }, match: "(qualified|as|hiding)" }, { include: "#module_name" }, { include: "#module_exports" }] }, { include: "#deriving" }, { include: "#layout_herald" }, { include: "#keyword" }, { captures: { 1: { name: "keyword.other.$1.haskell" }, 2: { patterns: [{ include: "#comment_like" }, { include: "#integer_literals" }, { include: "#infix_op" }] } }, match: "^\\s*(infix[lr]?)\\s+(.*)", name: "meta.fixity-declaration.haskell" }, { include: "#overloaded_label" }, { include: "#type_application" }, { include: "#reserved_symbol" }, { include: "#fun_decl" }, { include: "#qualifier" }, { include: "#data_constructor" }, { include: "#start_type_signature" }, { include: "#prefix_op" }, { include: "#infix_op" }, { begin: "(\\()(#)\\s", beginCaptures: { 1: { name: "punctuation.paren.haskell" }, 2: { name: "keyword.operator.hash.haskell" } }, end: "(#)(\\))", endCaptures: { 1: { name: "keyword.operator.hash.haskell" }, 2: { name: "punctuation.paren.haskell" } }, patterns: [{ include: "#comma" }, { include: "$self" }] }, { begin: "(\\()", beginCaptures: { 1: { name: "punctuation.paren.haskell" } }, end: "(\\))", endCaptures: { 1: { name: "punctuation.paren.haskell" } }, patterns: [{ include: "#comma" }, { include: "$self" }] }, { include: "#quasi_quote" }, { begin: "(\\[)", beginCaptures: { 1: { name: "punctuation.bracket.haskell" } }, end: "(\\])", endCaptures: { 1: { name: "punctuation.bracket.haskell" } }, patterns: [{ include: "#comma" }, { include: "$self" }] }, { include: "#record" }], repository: { adt_constructor: { patterns: [{ include: "#comment_like" }, { begin: `(?x)
(?<![\\p{S}\\p{P}&&[^(),;\\[\\]\`{}_"']])
(?:(=)|(\\|))
(?![\\p{S}\\p{P}&&[^(),;\\[\\]\`{}_"']])`, beginCaptures: { 1: { name: "keyword.operator.eq.haskell" }, 2: { name: "keyword.operator.pipe.haskell" } }, end: `(?x)
(?:\\G|^)\\s*
(?:

(?:

(?<!')\\b((?:[\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}'\\.])+)

| ('?
(?<paren>
\\(
(?:
[^\\(\\)]*
| \\g<paren>
)*
\\)
)
)

| ('?
(?<brac>
\\(
(?:
[^\\[\\]]*
| \\g<brac>
)*
\\]
)
)
)

\\s*

(?:(?<![\\p{S}\\p{P}&&[^(),;\\[\\]\`{}_"']])(:[\\p{S}\\p{P}&&[^(),;\\[\\]\`{}_"']]*)

| (\`)([\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*)(\`)
)

)
|
(?:(?<!')\\b([\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*))
|
(\\()\\s*(:[\\p{S}\\p{P}&&[^(),;\\[\\]\`{}_"']]*)\\s*(\\))`, endCaptures: { 1: { patterns: [{ include: "#type_signature" }] }, 2: { patterns: [{ include: "#type_signature" }] }, 4: { patterns: [{ include: "#type_signature" }] }, 6: { name: "constant.other.operator.haskell" }, 7: { name: "punctuation.backtick.haskell" }, 8: { name: "constant.other.haskell" }, 9: { name: "punctuation.backtick.haskell" }, 10: { name: "constant.other.haskell" }, 11: { name: "punctuation.paren.haskell" }, 12: { name: "constant.other.operator.haskell" }, 13: { name: "punctuation.paren.haskell" } }, patterns: [{ include: "#comment_like" }, { include: "#deriving" }, { include: "#record_decl" }, { include: "#forall" }, { include: "#context" }] }] }, block_comment: { applyEndPatternLast: 1, begin: "\\{-", captures: { 0: { name: "punctuation.definition.comment.haskell" } }, end: "-\\}", name: "comment.block.haskell", patterns: [{ include: "#block_comment" }] }, char_literal: { captures: { 1: { name: "punctuation.definition.string.begin.haskell" }, 2: { name: "constant.character.escape.haskell" }, 3: { name: "constant.character.escape.octal.haskell" }, 4: { name: "constant.character.escape.hexadecimal.haskell" }, 5: { name: "constant.character.escape.control.haskell" }, 6: { name: "punctuation.definition.string.end.haskell" } }, match: `(?x)
(?<![\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}'])
(')
(?:
[\\ -\\[\\]-~]
| (\\\\(?:NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE
|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS
|US|SP|DEL|[abfnrtv\\\\\\"'\\\\&]))
| (\\\\o[0-7]+)
| (\\\\x[0-9A-Fa-f]+)
| (\\\\\\^[A-Z@\\[\\]\\\\\\^_])
)
(')
`, name: "string.quoted.single.haskell" }, comma: { match: ",", name: "punctuation.separator.comma.haskell" }, comment_like: { patterns: [{ include: "#cpp" }, { include: "#pragma" }, { include: "#comments" }] }, comments: { patterns: [{ begin: "^(\\s*)(--\\s[\\|\\$])", beginCaptures: { 2: { name: "punctuation.whitespace.comment.leading.haskell" } }, end: "(?=^(?!\\1--+(?![\\p{S}\\p{P}&&[^(),;\\[\\]`{}_\"']])))", name: "comment.block.documentation.haskell" }, { begin: "(^[ \\t]+)?(--\\s[\\^\\*])", beginCaptures: { 1: { name: "punctuation.whitespace.comment.leading.haskell" } }, end: "\\n", name: "comment.line.documentation.haskell" }, { applyEndPatternLast: 1, begin: "\\{-\\s?[\\|\\$\\*\\^]", captures: { 0: { name: "punctuation.definition.comment.haskell" } }, end: "-\\}", name: "comment.block.documentation.haskell", patterns: [{ include: "#block_comment" }] }, { begin: "(^[ \\t]+)?(?=--+(?![\\p{S}\\p{P}&&[^(),;\\[\\]`{}_\"']]))", beginCaptures: { 1: { name: "punctuation.whitespace.comment.leading.haskell" } }, comment: "Operators may begin with '--' as long as they are not entirely composed of '-' characters. This means comments can't be immediately followed by an allowable operator character.", end: "(?!\\G)", patterns: [{ begin: "--", beginCaptures: { 0: { name: "punctuation.definition.comment.haskell" } }, end: "\\n", name: "comment.line.double-dash.haskell" }] }, { include: "#block_comment" }] }, context: { captures: { 1: { patterns: [{ include: "#comment_like" }, { include: "#type_signature" }] }, 2: { name: "keyword.operator.big-arrow.haskell" } }, match: `(?x)
(.*)
(?<![\\p{S}\\p{P}&&[^(),;\\[\\]\`{}_"']])
(=>|⇒)
(?![\\p{S}\\p{P}&&[^(),;\\[\\]\`{}_"']])
` }, cpp: { captures: { 1: { name: "punctuation.definition.preprocessor.c" } }, comment: `In addition to Haskell's "native" syntax, GHC permits the C preprocessor to be run on a source file.`, match: "^(#).*$", name: "meta.preprocessor.c" }, data_constructor: { match: "\\b(?<!')[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*(?![\\.'\\w])", name: "constant.other.haskell" }, deriving: { patterns: [{ begin: "^(\\s*)(deriving)\\s+(?:(via|stock|newtype|anyclass)\\s+)?", beginCaptures: { 2: { name: "keyword.other.deriving.haskell" }, 3: { name: "keyword.other.deriving.strategy.$3.haskell" } }, end: `(?x)

(?=\\}|;)
|^(?!
\\1\\s+\\S
| \\s*
(?: $
|\\{-[^@]
|--+
(?![\\p{S}\\p{P}&&[^(),;\\[\\]{}\`_"']]).*$)


)`, name: "meta.deriving.haskell", patterns: [{ include: "#comment_like" }, { match: "(?<!')\\b(instance)\\b(?!')", name: "keyword.other.instance.haskell" }, { captures: { 1: { name: "keyword.other.deriving.strategy.$1.haskell" } }, match: "(?<!')\\b(via|stock|newtype|anyclass)\\b(?!')" }, { include: "#type_signature" }] }, { begin: "(deriving)(?:\\s+(stock|newtype|anyclass))?\\s*(\\()", beginCaptures: { 1: { name: "keyword.other.deriving.haskell" }, 2: { name: "keyword.other.deriving.strategy.$2.haskell" }, 3: { name: "punctuation.paren.haskell" } }, end: "(\\))", endCaptures: { 1: { name: "punctuation.paren.haskell" } }, name: "meta.deriving.haskell", patterns: [{ include: "#type_signature" }] }, { captures: { 1: { name: "keyword.other.deriving.haskell" }, 2: { name: "keyword.other.deriving.strategy.$2.haskell" }, 3: { patterns: [{ include: "#type_signature" }] }, 5: { name: "keyword.other.deriving.strategy.via.haskell" }, 6: { patterns: [{ include: "#type_signature" }] } }, match: `(?x)
(deriving)(?:\\s+(stock|newtype|anyclass))?\\s+
([\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*)
(\\s+(via)\\s+(.*)$)?
`, name: "meta.deriving.haskell" }, { match: "(?<!')\\b(via)\\b(?!')", name: "keyword.other.deriving.strategy.via.haskell" }] }, double_colon: { captures: { 1: { name: "keyword.operator.double-colon.haskell" } }, match: "\\s*(::|∷)(?![\\p{S}\\p{P}&&[^(),;\\[\\]`{}_\"']])\\s*" }, export_constructs: { patterns: [{ include: "#comment_like" }, { begin: "\\b(?<!')(pattern)\\b(?!')", beginCaptures: { 1: { name: "keyword.other.pattern.haskell" } }, end: `(?x)

([\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*)

| (\\()\\s*(:[\\p{S}\\p{P}&&[^(),;\\[\\]\`{}_"']]+)\\s*(\\))`, endCaptures: { 1: { name: "constant.other.haskell" }, 2: { name: "punctuation.paren.haskell" }, 3: { name: "constant.other.operator.haskell" }, 4: { name: "punctuation.paren.haskell" } }, patterns: [{ include: "#comment_like" }] }, { begin: "\\b(?<!')(type)\\b(?!')", beginCaptures: { 1: { name: "keyword.other.type.haskell" } }, end: `(?x)

([\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*)

| (\\()\\s*([\\p{S}\\p{P}&&[^(),;\\[\\]\`{}_"']]+)\\s*(\\))`, endCaptures: { 1: { name: "storage.type.haskell" }, 2: { name: "punctuation.paren.haskell" }, 3: { name: "storage.type.operator.haskell" }, 4: { name: "punctuation.paren.haskell" } }, patterns: [{ include: "#comment_like" }] }, { match: "(?<!')\\b[\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*", name: "entity.name.function.haskell" }, { match: "(?<!')\\b[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*", name: "storage.type.haskell" }, { include: "#record_wildcard" }, { include: "#reserved_symbol" }, { include: "#prefix_op" }] }, ffi: { begin: "^(\\s*)(foreign)\\s+(import|export)\\s+", beginCaptures: { 2: { name: "keyword.other.foreign.haskell" }, 3: { name: "keyword.other.$3.haskell" } }, end: `(?x)
(?=\\}|;)
|^(?!
\\1\\s+\\S
| \\s*
(?: $
|\\{-[^@]
|--+
(?![\\p{S}\\p{P}&&[^(),;\\[\\]{}\`_"']]).*$)


)
`, name: "meta.$3.foreign.haskell", patterns: [{ include: "#comment_like" }, { captures: { 1: { name: "keyword.other.calling-convention.$1.haskell" } }, match: "\\b(?<!')(ccall|cplusplus|dotnet|jvm|stdcall|prim|capi)\\s+" }, { begin: `(?=")|(?=\\b(?<!')([\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*)\\b(?!'))`, end: "(?=(::|∷)(?![\\p{S}\\p{P}&&[^(),;\\[\\]`{}_\"']]))", patterns: [{ include: "#comment_like" }, { captures: { 1: { name: "keyword.other.safety.$1.haskell" }, 2: { name: "entity.name.foreign.haskell", patterns: [{ include: "#string_literal" }] }, 3: { name: "entity.name.function.haskell" }, 4: { name: "entity.name.function.infix.haskell" } }, match: `(?x)
\\b(?<!')(safe|unsafe|interruptible)\\b(?!')
\\s*
("(?:\\\\"|[^"])*")?
\\s*
(?:
(?:\\b(?<!'')([\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*)\\b(?!'))
|(?:\\(\\s*(?!--+\\))([\\p{S}\\p{P}&&[^(),;\\[\\]\`{}_"']]+)\\s*\\))
)
` }, { captures: { 1: { name: "keyword.other.safety.$1.haskell" }, 2: { name: "entity.name.foreign.haskell", patterns: [{ include: "#string_literal" }] } }, match: `(?x)
\\b(?<!')(safe|unsafe|interruptible)\\b(?!')
\\s*
("(?:\\\\"|[^"])*")?
\\s*$
` }, { captures: { 0: { name: "entity.name.foreign.haskell", patterns: [{ include: "#string_literal" }] } }, match: `(?x)
"(?:\\\\"|[^"])*"` }, { captures: { 1: { name: "entity.name.function.haskell" }, 2: { name: "punctuation.paren.haskell" }, 3: { name: "entity.name.function.infix.haskell" }, 4: { name: "punctuation.paren.haskell" } }, match: `(?x)
(?:\\b(?<!'')([\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*)\\b(?!'))
|(?:(\\()\\s*(?!--+\\))([\\p{S}\\p{P}&&[^(),;\\[\\]\`{}_"']]+)\\s*(\\)))
` }] }, { include: "#double_colon" }, { include: "#type_signature" }] }, float_literals: { captures: { 1: { name: "constant.numeric.floating.decimal.haskell" }, 2: { name: "constant.numeric.floating.hexadecimal.haskell" } }, comment: "Floats are decimal or hexadecimal", match: `(?x)
\\b(?<!')
(?:
([0-9][_0-9]*\\.[0-9][_0-9]*(?:[eE][-+]?[0-9][_0-9]*)?
|[0-9][_0-9]*[eE][-+]?[0-9][_0-9]*
)
|
(0[xX]_*[0-9a-fA-F][_0-9a-fA-F]*\\.[0-9a-fA-F][_0-9a-fA-F]*(?:[pP][-+]?[0-9][_0-9]*)?
|0[xX]_*[0-9a-fA-F][_0-9a-fA-F]*[pP][-+]?[0-9][_0-9]*
)
)\\b(?!')` }, forall: { begin: "\\b(?<!')(forall|∀)\\b(?!')", beginCaptures: { 1: { name: "keyword.other.forall.haskell" } }, end: "(\\.)|(->|→)", endCaptures: { 1: { name: "keyword.operator.period.haskell" }, 2: { name: "keyword.operator.arrow.haskell" } }, patterns: [{ include: "#comment_like" }, { include: "#type_variable" }, { include: "#type_signature" }] }, fun_decl: { begin: `(?x)^(\\s*)
(?<fn>
(?:
[\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*\\#*
| \\(\\s*
(?!--+\\))
[\\p{S}\\p{P}&&[^(),:;\\[\\]\`{}_"']]
[\\p{S}\\p{P}&&[^(),;\\[\\]\`{}_"']]*
\\s*\\)
)
(?:\\s*,\\s*\\g<fn>)?
)
\\s*(?<![\\p{S}\\p{P}&&[^\\),;\\]\`}_"']])(::|∷)(?![\\p{S}\\p{P}&&[^\\(,;\\[\`{_"']])
`, beginCaptures: { 2: { name: "entity.name.function.haskell", patterns: [{ include: "#reserved_symbol" }, { include: "#prefix_op" }] }, 3: { name: "keyword.operator.double-colon.haskell" } }, end: `(?x)


(?=

(?<![\\p{S}\\p{P}&&[^(),;\\[\\]\`{}_"']])

((<-|←)|(=)|(-<|↢)|(-<<|⤛))

([(),;\\[\\]\`{}_"']|[^\\p{S}\\p{P}])
)

|(?=\\}|;)
|^(?!
\\1\\s+\\S
| \\s*
(?: $
|\\{-[^@]
|--+
(?![\\p{S}\\p{P}&&[^(),;\\[\\]{}\`_"']]).*$)


)
`, name: "meta.function.type-declaration.haskell", patterns: [{ include: "#type_signature" }] }, gadt_constructor: { patterns: [{ begin: `(?x)
^(\\s*)
(?:
(\\b(?<!')[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*)
|(\\()\\s*(:[\\p{S}\\p{P}&&[^(),;\\[\\]\`{}_"']]*)\\s*(\\))
)`, beginCaptures: { 2: { name: "constant.other.haskell" }, 3: { name: "punctuation.paren.haskell" }, 4: { name: "constant.other.operator.haskell" }, 5: { name: "punctuation.paren.haskell" } }, end: `(?x)

(?=\\b(?<!'')deriving\\b(?!'))

|(?=\\}|;)
|^(?!
\\1\\s+\\S
| \\s*
(?: $
|\\{-[^@]
|--+
(?![\\p{S}\\p{P}&&[^(),;\\[\\]{}\`_"']]).*$)


)
`, patterns: [{ include: "#comment_like" }, { include: "#deriving" }, { include: "#double_colon" }, { include: "#record_decl" }, { include: "#type_signature" }] }, { begin: `(?x)
(\\b(?<!')[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*)
|(\\()\\s*(:[\\p{S}\\p{P}&&[^(),;\\[\\]\`{}_"']]*)\\s*(\\))`, beginCaptures: { 1: { name: "constant.other.haskell" }, 2: { name: "punctuation.paren.haskell" }, 3: { name: "constant.other.operator.haskell" }, 4: { name: "punctuation.paren.haskell" } }, end: "$", patterns: [{ include: "#comment_like" }, { include: "#deriving" }, { include: "#double_colon" }, { include: "#record_decl" }, { include: "#type_signature" }] }] }, infix_op: { patterns: [{ captures: { 1: { name: "keyword.operator.promotion.haskell" }, 2: { name: "entity.name.namespace.haskell" }, 3: { name: "keyword.operator.infix.haskell" } }, comment: `In case this regex seems overly general, note that Haskell permits  the definition of new operators which can be nearly any string of  punctuation characters, such as $%^&*.
`, match: `(?x)
((?:(?<!'')('')?[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}'']*\\.)*)
(\\#+|[\\p{S}\\p{P}&&[^(),;\\[\\]\`{}_"']]+(?<!\\#))` }, { captures: { 1: { name: "punctuation.backtick.haskell" }, 2: { name: "entity.name.namespace.haskell" }, 3: { patterns: [{ include: "#data_constructor" }] }, 4: { name: "punctuation.backtick.haskell" } }, comment: `In case this regex seems unusual for an infix operator, note that Haskell
allows any ordinary function application (elem 4 [1..10]) to be rewritten
as an infix expression (4 \`elem\` [1..10]).
`, match: "(`)((?:[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}'']*\\.)*)([\\p{Ll}\\p{Lu}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}'']*)(`)", name: "keyword.operator.function.infix.haskell" }] }, inline_phase: { begin: "\\[", beginCaptures: { 0: { name: "punctuation.bracket.haskell" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.bracket.haskell" } }, name: "meta.inlining-phase.haskell", patterns: [{ match: "~", name: "punctuation.tilde.haskell" }, { include: "#integer_literals" }, { match: "\\w*", name: "invalid" }] }, integer_literals: { captures: { 1: { name: "constant.numeric.integral.decimal.haskell" }, 2: { name: "constant.numeric.integral.hexadecimal.haskell" }, 3: { name: "constant.numeric.integral.octal.haskell" }, 4: { name: "constant.numeric.integral.binary.haskell" } }, match: `(?x)
\\b(?<!')
(?:
([0-9][_0-9]*)
| (0[xX]_*[0-9a-fA-F][_0-9a-fA-F]*)
| (0[oO]_*[0-7][_0-7]*)
| (0[bB]_*[01][_01]*)
)
\\b(?!')` }, keyword: { captures: { 1: { name: "keyword.other.$1.haskell" }, 2: { name: "keyword.control.$2.haskell" } }, match: "\\b(?<!')(?:(where|let|in|default)|(m?do|if|then|else|case|of|proc|rec))\\b(?!')" }, layout_herald: { begin: `(?x)
(?<!')\\b(?:(where|let|m?do)|(of))
\\s*(\\{)(?!-)`, beginCaptures: { 1: { name: "keyword.other.$1.haskell" }, 2: { name: "keyword.control.of.haskell" }, 3: { name: "punctuation.brace.haskell" } }, end: "(\\})", endCaptures: { 1: { name: "punctuation.brace.haskell" } }, patterns: [{ include: "$self" }, { match: ";", name: "punctuation.semicolon.haskell" }] }, liquid_haskell: { begin: "\\{-@", end: "@-\\}", name: "block.liquidhaskell.haskell", patterns: [{ include: "$self" }] }, module_exports: { applyEndPatternLast: 1, begin: "\\(", beginCaptures: { 0: { name: "punctuation.paren.haskell" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.paren.haskell" } }, name: "meta.declaration.exports.haskell", patterns: [{ include: "#comment_like" }, { captures: { 1: { name: "keyword.other.module.haskell" } }, match: "\\b(?<!')(module)\\b(?!')" }, { include: "#comma" }, { include: "#export_constructs" }, { begin: "\\(", beginCaptures: { 0: { name: "punctuation.paren.haskell" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.paren.haskell" } }, patterns: [{ include: "#comment_like" }, { include: "#record_wildcard" }, { include: "#export_constructs" }, { include: "#comma" }] }] }, module_name: { match: "(?<conid>[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*(\\.\\g<conid>)?)", name: "entity.name.namespace.haskell" }, numeric_literals: { patterns: [{ include: "#float_literals" }, { include: "#integer_literals" }] }, overloaded_label: { patterns: [{ captures: { 1: { name: "keyword.operator.prefix.hash.haskell" }, 2: { patterns: [{ include: "#string_literal" }] } }, match: `(?x)
(?<![\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\\p{S}\\p{P}&&[^(,;\\[\`{]])
(\\#)
(?:

("(?:\\\\"|[^"])*")

|[\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}'\\.]+
)`, name: "entity.name.label.haskell" }] }, pragma: { begin: "\\{-#", end: "#-\\}", name: "meta.preprocessor.haskell", patterns: [{ begin: "(?xi) \\b(?<!')(LANGUAGE)\\b(?!')", beginCaptures: { 1: { name: "keyword.other.preprocessor.pragma.haskell" } }, end: "(?=#-\\})", patterns: [{ match: `(?x)
(?:No)?
(?:AutoDeriveTypeable|DatatypeContexts|DoRec|IncoherentInstances|MonadFailDesugaring|MonoPatBinds|NullaryTypeClasses|OverlappingInstances|PatternSignatures|RecordPuns|RelaxedPolyRec)`, name: "invalid.deprecated" }, { captures: { 1: { name: "keyword.other.preprocessor.extension.haskell" } }, match: `(?x)
(
(?:No)?
(?:AllowAmbiguousTypes|AlternativeLayoutRule|AlternativeLayoutRuleTransitional|Arrows|BangPatterns|BinaryLiterals|CApiFFI|CPP|CUSKs|ConstrainedClassMethods|ConstraintKinds|DataKinds|DefaultSignatures|DeriveAnyClass|DeriveDataTypeable|DeriveFoldable|DeriveFunctor|DeriveGeneric|DeriveLift|DeriveTraversable|DerivingStrategies|DerivingVia|DisambiguateRecordFields|DoAndIfThenElse|BlockArguments|DuplicateRecordFields|EmptyCase|EmptyDataDecls|EmptyDataDeriving|ExistentialQuantification|ExplicitForAll|ExplicitNamespaces|ExtendedDefaultRules|FlexibleContexts|FlexibleInstances|ForeignFunctionInterface|FunctionalDependencies|GADTSyntax|GADTs|GHCForeignImportPrim|Generali(?:s|z)edNewtypeDeriving|ImplicitParams|ImplicitPrelude|ImportQualifiedPost|ImpredicativeTypes|TypeFamilyDependencies|InstanceSigs|ApplicativeDo|InterruptibleFFI|JavaScriptFFI|KindSignatures|LambdaCase|LiberalTypeSynonyms|MagicHash|MonadComprehensions|MonoLocalBinds|MonomorphismRestriction|MultiParamTypeClasses|MultiWayIf|NumericUnderscores|NPlusKPatterns|NamedFieldPuns|NamedWildCards|NegativeLiterals|HexFloatLiterals|NondecreasingIndentation|NumDecimals|OverloadedLabels|OverloadedLists|OverloadedStrings|PackageImports|ParallelArrays|ParallelListComp|PartialTypeSignatures|PatternGuards|PatternSynonyms|PolyKinds|PolymorphicComponents|QuantifiedConstraints|PostfixOperators|QuasiQuotes|Rank2Types|RankNTypes|RebindableSyntax|RecordWildCards|RecursiveDo|RelaxedLayout|RoleAnnotations|ScopedTypeVariables|StandaloneDeriving|StarIsType|StaticPointers|Strict|StrictData|TemplateHaskell|TemplateHaskellQuotes|StandaloneKindSignatures|TraditionalRecordSyntax|TransformListComp|TupleSections|TypeApplications|TypeInType|TypeFamilies|TypeOperators|TypeSynonymInstances|UnboxedTuples|UnboxedSums|UndecidableInstances|UndecidableSuperClasses|UnicodeSyntax|UnliftedFFITypes|UnliftedNewtypes|ViewPatterns)
)` }, { include: "#comma" }] }, { begin: `(?xi)
\\b(?<!')(SPECIALI(?:S|Z)E)
(?:
\\s*( \\[ [^\\[\\]]* \\])?\\s*
|\\s+
)
(instance)\\b(?!')`, beginCaptures: { 1: { name: "keyword.other.preprocessor.pragma.haskell" }, 2: { patterns: [{ include: "#inline_phase" }] }, 3: { name: "keyword.other.instance.haskell" } }, end: "(?=#-\\})", patterns: [{ include: "#type_signature" }] }, { begin: `(?xi)
\\b(?<!')(SPECIALI(?:S|Z)E)\\b(?!')
(?:\\s+(INLINE)\\b(?!'))?
(?:\\s*(\\[ [^\\[\\]]* \\])?)
\\s*`, beginCaptures: { 1: { name: "keyword.other.preprocessor.pragma.haskell" }, 2: { name: "keyword.other.preprocessor.pragma.haskell" }, 3: { patterns: [{ include: "#inline_phase" }] } }, end: "(?=#-\\})", patterns: [{ include: "$self" }] }, { match: `(?xi) \\b(?<!')
(LANGUAGE|OPTIONS_GHC|INCLUDE
|MINIMAL|UNPACK|OVERLAPS|INCOHERENT
|NOUNPACK|SOURCE|OVERLAPPING|OVERLAPPABLE|INLINE
|NOINLINE|INLINE?ABLE|CONLIKE|LINE|COLUMN|RULES
|COMPLETE)\\b(?!')`, name: "keyword.other.preprocessor.haskell" }, { begin: "(?i)\\b(DEPRECATED|WARNING)\\b", beginCaptures: { 1: { name: "keyword.other.preprocessor.pragma.haskell" } }, end: "(?=#-\\})", patterns: [{ include: "#string_literal" }] }] }, prefix_op: { patterns: [{ captures: { 1: { name: "punctuation.paren.haskell" }, 2: { name: "entity.name.function.infix.haskell" }, 3: { name: "punctuation.paren.haskell" } }, comment: `An operator cannot be composed entirely of '-' characters;  instead, it should be matched as a comment.
`, match: `(?x)
(\\()\\s*(?!(?:--+|\\.\\.)\\))(\\#+|[\\p{S}\\p{P}&&[^(),;\\[\\]\`{}_"']]+(?<!\\#))\\s*(\\))` }] }, qualifier: { match: "\\b(?<!')[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*\\.", name: "entity.name.namespace.haskell" }, quasi_quote: { patterns: [{ begin: `(?x)
(\\[)
(e|d|p)?
(\\|\\|?)`, beginCaptures: { 1: { name: "keyword.operator.quasi-quotation.begin.haskell" }, 2: { name: "entity.name.quasi-quoter.haskell" }, 3: { name: "keyword.operator.quasi-quotation.begin.haskell" } }, end: "\\3\\]", endCaptures: { 0: { name: "keyword.operator.quasi-quotation.end.haskell" } }, name: "meta.quasi-quotation.haskell", patterns: [{ include: "$self" }] }, { begin: `(?x)
(\\[)
(t)
(\\|\\|?)`, beginCaptures: { 1: { name: "keyword.operator.quasi-quotation.begin.haskell" }, 2: { name: "entity.name.quasi-quoter.haskell" }, 3: { name: "keyword.operator.quasi-quotation.begin.haskell" } }, end: "\\3\\]", endCaptures: { 0: { name: "keyword.operator.quasi-quotation.end.haskell" } }, name: "meta.quasi-quotation.haskell", patterns: [{ include: "#type_signature" }] }, { begin: `(?x)
(\\[)
(?:(\\$\\$)|(\\$))?
((?:[^\\s\\p{S}\\p{P}]|[\\.'_])*)
(\\|\\|?)`, beginCaptures: { 1: { name: "keyword.operator.quasi-quotation.begin.haskell" }, 2: { name: "keyword.operator.prefix.double-dollar.haskell" }, 3: { name: "keyword.operator.prefix.dollar.haskell" }, 4: { name: "entity.name.quasi-quoter.haskell", patterns: [{ include: "#qualifier" }] }, 5: { name: "keyword.operator.quasi-quotation.begin.haskell" } }, end: "\\5\\]", endCaptures: { 0: { name: "keyword.operator.quasi-quotation.end.haskell" } }, name: "meta.quasi-quotation.haskell" }] }, record: { begin: "({)(?!-)", beginCaptures: { 1: { name: "punctuation.brace.haskell" } }, end: "(?<!-)(})", endCaptures: { 1: { name: "punctuation.brace.haskell" } }, name: "meta.record.haskell", patterns: [{ include: "#comment_like" }, { include: "#record_field" }] }, record_decl: { begin: "({)(?!-)", beginCaptures: { 1: { name: "punctuation.brace.haskell" } }, end: "(?<!-)(})", endCaptures: { 1: { name: "punctuation.brace.haskell" } }, name: "meta.record.definition.haskell", patterns: [{ include: "#comment_like" }, { include: "#record_decl_field" }] }, record_decl_field: { begin: `(?x)
(?:([\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*)
|(\\()\\s*([\\p{S}\\p{P}&&[^(),;\\[\\]\`{}_"']]+)\\s*(\\))
)
`, beginCaptures: { 1: { name: "variable.other.member.definition.haskell" }, 2: { name: "punctuation.paren.haskell" }, 3: { name: "variable.other.member.definition.haskell" }, 4: { name: "punctuation.paren.haskell" } }, end: "(,)|(?=})", endCaptures: { 1: { name: "punctuation.comma.haskell" } }, patterns: [{ include: "#comment_like" }, { include: "#comma" }, { include: "#double_colon" }, { include: "#type_signature" }, { include: "#record_decl_field" }] }, record_field: { patterns: [{ begin: `(?x)
(?:([\\p{Ll}\\p{Lu}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\\.']*)
|(\\()\\s*([\\p{S}\\p{P}&&[^(),;\\[\\]\`{}_"']]+)\\s*(\\))
)
`, beginCaptures: { 1: { name: "variable.other.member.haskell", patterns: [{ include: "#qualifier" }] }, 2: { name: "punctuation.paren.haskell" }, 3: { name: "variable.other.member.haskell" }, 4: { name: "punctuation.paren.haskell" } }, end: "(,)|(?=})", endCaptures: { 1: { name: "punctuation.comma.haskell" } }, patterns: [{ include: "#comment_like" }, { include: "#comma" }, { include: "$self" }] }, { include: "#record_wildcard" }] }, record_wildcard: { captures: { 1: { name: "variable.other.member.wildcard.haskell" } }, match: `(?x)
(?<![\\p{S}\\p{P}&&[^(),;\\[\\]\`{}_"']])
(\\.\\.)
(?![\\p{S}\\p{P}&&[^(),;\\[\\]\`{}_"']])` }, reserved_symbol: { patterns: [{ captures: { 1: { name: "keyword.operator.double-dot.haskell" }, 2: { name: "keyword.operator.colon.haskell" }, 3: { name: "keyword.operator.eq.haskell" }, 4: { name: "keyword.operator.lambda.haskell" }, 5: { name: "keyword.operator.pipe.haskell" }, 6: { name: "keyword.operator.arrow.left.haskell" }, 7: { name: "keyword.operator.arrow.haskell" }, 8: { name: "keyword.operator.arrow.left.tail.haskell" }, 9: { name: "keyword.operator.arrow.left.tail.double.haskell" }, 10: { name: "keyword.operator.arrow.tail.haskell" }, 11: { name: "keyword.operator.arrow.tail.double.haskell" }, 12: { name: "keyword.other.forall.haskell" } }, match: `(?x)
(?<![\\p{S}\\p{P}&&[^(),;\\[\\]\`{}_"'']])
(?:
(\\.\\.)
|(:)
|(=)
|(\\\\)
|(\\|)
|(<-|←)
|(->|→)
|(-<|↢)
|(-<<|⤛)
|(>-|⤚)
|(>>-|⤜)
|(∀)
)
(?![\\p{S}\\p{P}&&[^(),;\\[\\]\`{}_"'']])` }, { captures: { 1: { name: "keyword.operator.postfix.hash.haskell" } }, match: `(?x)
(?<=[\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\\p{S}\\p{P}&&[^\\#,;\\[\`{]])
(\\#+)
(?![\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\\p{S}\\p{P}&&[^),;\\]\`}]])` }, { captures: { 1: { name: "keyword.operator.infix.tight.at.haskell" } }, match: `(?x)
(?<=[\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\\)\\}\\]])
(@)
(?=[\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\\(\\[\\{])` }, { captures: { 1: { name: "keyword.operator.prefix.tilde.haskell" }, 2: { name: "keyword.operator.prefix.bang.haskell" }, 3: { name: "keyword.operator.prefix.minus.haskell" }, 4: { name: "keyword.operator.prefix.dollar.haskell" }, 5: { name: "keyword.operator.prefix.double-dollar.haskell" } }, match: `(?x)
(?<![\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\\p{S}\\p{P}&&[^(,;\\[\`{]])
(?:(~)|(!)|(-)|(\\$)|(\\$\\$))
(?=[\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\\(\\{\\[])` }] }, role_annotation: { patterns: [{ begin: "^(\\s*)(type)\\s+(role)\\b(?!')", beginCaptures: { 2: { name: "keyword.other.type.haskell" }, 3: { name: "keyword.other.role.haskell" } }, end: `(?x)
(?=\\}|;)
|^(?!
\\1\\s+\\S
| \\s*
(?: $
|\\{-[^@]
|--+
(?![\\p{S}\\p{P}&&[^(),;\\[\\]{}\`_"']]).*$)


)`, name: "meta.role-annotation.haskell", patterns: [{ include: "#comment_like" }, { include: "#type_constructor" }, { captures: { 1: { name: "keyword.other.role.$1.haskell" } }, match: "\\b(?<!')(nominal|representational|phantom)\\b(?!')" }] }] }, start_type_signature: { patterns: [{ begin: "^(\\s*)(::|∷)(?![\\p{S}\\p{P}&&[^\\(,;\\[`{_\"']])\\s*", beginCaptures: { 2: { name: "keyword.operator.double-colon.haskell" } }, end: `(?x)

(?=
\\#?\\)
|\\]
|,
|(?<!')\\b(in|then|else|of)\\b(?!')
|
(?<![\\p{S}\\p{P}&&[^(),;\\[\\]\`{}_"']])
(?:
(\\\\|λ)
|(<-|←)
|(=)
|(-<|↢)
|(-<<|⤛)
)
([(),;\\[\\]\`{}_"']|[^\\p{S}\\p{P}])
|(\\#|@)-\\}

| (?=\\}|;)
|^(?!
\\1\\s*\\S
| \\s*
(?: $
|\\{-[^@]
|--+
(?![\\p{S}\\p{P}&&[^(),;\\[\\]{}\`_"']]).*$)


)
)`, name: "meta.type-declaration.haskell", patterns: [{ include: "#type_signature" }] }, { begin: "(?<![\\p{S}\\p{P}&&[^\\(,;\\[`{_\"']])(::|∷)(?![\\p{S}\\p{P}&&[^\\(,;\\[`{_\"']])", beginCaptures: { 1: { name: "keyword.operator.double-colon.haskell" } }, end: `(?x)

(?=
\\#?\\)
|\\]
|,
|\\b(?<!')(in|then|else|of)\\b(?!')
|(\\#|@)-\\}
|
(?<![\\p{S}\\p{P}&&[^(),;\\[\\]\`{}_"']])
(?:
(\\\\|λ)
|(<-|←)
|(=)
|(-<|↢)
|(-<<|⤛)
)
([(),;\\[\\]\`{}_"']|[^\\p{S}\\p{P}])

|(?=\\}|;)
|$
)`, patterns: [{ include: "#type_signature" }] }] }, string_literal: { begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.haskell" } }, end: '"', endCaptures: { 0: { name: "punctuation.definition.string.end.haskell" } }, name: "string.quoted.double.haskell", patterns: [{ match: `\\\\(NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\\\\"'\\&])`, name: "constant.character.escape.haskell" }, { match: "\\\\o[0-7]+|\\\\x[0-9A-Fa-f]+|\\\\[0-9]+", name: "constant.character.escape.octal.haskell" }, { match: "\\\\\\^[A-Z@\\[\\]\\\\\\^_]", name: "constant.character.escape.control.haskell" }, { begin: "\\\\\\s", beginCaptures: { 0: { name: "constant.character.escape.begin.haskell" } }, end: "\\\\", endCaptures: { 0: { name: "constant.character.escape.end.haskell" } }, patterns: [{ match: "\\S+", name: "invalid.illegal.character-not-allowed-here.haskell" }] }] }, type_application: { patterns: [{ begin: `(?<=[\\s,;\\[\\]{}"])(@)(')?(\\()`, beginCaptures: { 1: { name: "keyword.operator.prefix.at.haskell" }, 2: { name: "keyword.operator.promotion.haskell" }, 3: { name: "punctuation.paren.haskell" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.paren.haskell" } }, name: "meta.type-application.haskell", patterns: [{ include: "#type_signature" }] }, { begin: `(?<=[\\s,;\\[\\]{}"])(@)(')?(\\[)`, beginCaptures: { 1: { name: "keyword.operator.prefix.at.haskell" }, 2: { name: "keyword.operator.promotion.haskell" }, 3: { name: "punctuation.bracket.haskell" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.bracket.haskell" } }, name: "meta.type-application.haskell", patterns: [{ include: "#type_signature" }] }, { begin: '(?<=[\\s,;\\[\\]{}"])(@)(?=\\")', beginCaptures: { 1: { name: "keyword.operator.prefix.at.haskell" } }, end: '(?<=\\")', name: "meta.type-application.haskell", patterns: [{ include: "#string_literal" }] }, { begin: `(?<=[\\s,;\\[\\]{}"])(@)(?=[\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}'])`, beginCaptures: { 1: { name: "keyword.operator.prefix.at.haskell" } }, end: "(?![\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}'])", name: "meta.type-application.haskell", patterns: [{ include: "#type_signature" }] }] }, type_constructor: { patterns: [{ captures: { 1: { name: "keyword.operator.promotion.haskell" }, 2: { name: "entity.name.namespace.haskell" }, 3: { name: "storage.type.haskell" } }, match: `(?x)

(')?

((?:\\b[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*\\.)*)

(\\b[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*)` }, { captures: { 1: { name: "keyword.operator.promotion.haskell" }, 2: { name: "punctuation.paren.haskell" }, 3: { name: "entity.name.namespace.haskell" }, 4: { name: "storage.type.operator.haskell" }, 5: { name: "punctuation.paren.haskell" } }, match: `(?x)

(')?

(\\()\\s*

((?:[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*\\.)*)

([\\p{S}\\p{P}&&[^(),;\\[\\]\`{}_"']]+)

\\s*(\\))` }] }, type_operator: { patterns: [{ captures: { 1: { name: "keyword.operator.promotion.haskell" }, 2: { name: "entity.name.namespace.haskell" }, 3: { name: "storage.type.operator.infix.haskell" } }, match: `(?x)

(?:(?<!')('))?

((?:\\b[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*\\.)*)

(?![#@]?-})(\\#+|[\\p{S}\\p{P}&&[^(),;\\[\\]\`{}_"']]+(?<!\\#))
` }, { captures: { 1: { name: "keyword.operator.promotion.haskell" }, 2: { name: "punctuation.backtick.haskell" }, 3: { name: "entity.name.namespace.haskell" }, 4: { name: "storage.type.infix.haskell" }, 5: { name: "punctuation.backtick.haskell" } }, match: `(?x)

(')?

(\\\`)

((?:[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*\\.)*)

([\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*)

(\`)` }] }, type_signature: { patterns: [{ include: "#comment_like" }, { captures: { 1: { name: "keyword.operator.promotion.haskell" }, 2: { name: "punctuation.paren.haskell" }, 3: { name: "punctuation.paren.haskell" } }, match: "(')?(\\()\\s*(\\))", name: "support.constant.unit.haskell" }, { captures: { 1: { name: "punctuation.paren.haskell" }, 2: { name: "keyword.operator.hash.haskell" }, 3: { name: "keyword.operator.hash.haskell" }, 4: { name: "punctuation.paren.haskell" } }, match: "(\\()(#)\\s*(#)(\\))", name: "support.constant.unit.unboxed.haskell" }, { captures: { 1: { name: "keyword.operator.promotion.haskell" }, 2: { name: "punctuation.paren.haskell" }, 3: { name: "punctuation.paren.haskell" } }, match: "(')?(\\()\\s*,[\\s,]*(\\))", name: "support.constant.tuple.haskell" }, { captures: { 1: { name: "punctuation.paren.haskell" }, 2: { name: "keyword.operator.hash.haskell" }, 3: { name: "keyword.operator.hash.haskell" }, 4: { name: "punctuation.paren.haskell" } }, match: "(\\()(#)\\s*(#)(\\))", name: "support.constant.unit.unboxed.haskell" }, { captures: { 1: { name: "punctuation.paren.haskell" }, 2: { name: "keyword.operator.hash.haskell" }, 3: { name: "keyword.operator.hash.haskell" }, 4: { name: "punctuation.paren.haskell" } }, match: "(\\()(#)\\s*,[\\s,]*(#)(\\))", name: "support.constant.tuple.unboxed.haskell" }, { captures: { 1: { name: "keyword.operator.promotion.haskell" }, 2: { name: "punctuation.bracket.haskell" }, 3: { name: "punctuation.bracket.haskell" } }, match: "(')?(\\[)\\s*(\\])", name: "support.constant.empty-list.haskell" }, { include: "#integer_literals" }, { match: "(::|∷)(?![\\p{S}\\p{P}&&[^(),;\\[\\]`{}_\"']])", name: "keyword.operator.double-colon.haskell" }, { include: "#forall" }, { match: "=>|⇒", name: "keyword.operator.big-arrow.haskell" }, { include: "#string_literal" }, { match: "'[^']'", name: "invalid" }, { include: "#type_application" }, { include: "#reserved_symbol" }, { include: "#type_operator" }, { include: "#type_constructor" }, { begin: "(\\()(#)", beginCaptures: { 1: { name: "punctuation.paren.haskell" }, 2: { name: "keyword.operator.hash.haskell" } }, end: "(#)(\\))", endCaptures: { 1: { name: "keyword.operator.hash.haskell" }, 2: { name: "punctuation.paren.haskell" } }, patterns: [{ include: "#comma" }, { include: "#type_signature" }] }, { begin: "(')?(\\()", beginCaptures: { 1: { name: "keyword.operator.promotion.haskell" }, 2: { name: "punctuation.paren.haskell" } }, end: "(\\))", endCaptures: { 1: { name: "punctuation.paren.haskell" } }, patterns: [{ include: "#comma" }, { include: "#type_signature" }] }, { begin: "(')?(\\[)", beginCaptures: { 1: { name: "keyword.operator.promotion.haskell" }, 2: { name: "punctuation.bracket.haskell" } }, end: "(\\])", endCaptures: { 1: { name: "punctuation.bracket.haskell" } }, patterns: [{ include: "#comma" }, { include: "#type_signature" }] }, { include: "#type_variable" }] }, type_variable: { match: "\\b(?<!')(?!(?:forall|deriving)\\b(?!'))[\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*", name: "variable.other.generic-type.haskell" }, where: { patterns: [{ begin: `(?x)
(?<!')\\b(where)
\\s*(\\{)(?!-)`, beginCaptures: { 1: { name: "keyword.other.where.haskell" }, 2: { name: "punctuation.brace.haskell" } }, end: "(\\})", endCaptures: { 1: { name: "punctuation.brace.haskell" } }, patterns: [{ include: "$self" }, { match: ";", name: "punctuation.semicolon.haskell" }] }, { match: "\\b(?<!')(where)\\b(?!')", name: "keyword.other.where.haskell" }] } }, scopeName: "source.haskell", aliases: ["hs"] });
var Qe = [
  Ke
];
const Je = Object.freeze({ displayName: "Python", name: "python", patterns: [{ include: "#statement" }, { include: "#expression" }], repository: { "annotated-parameter": { begin: `(?x)
\\b
([[:alpha:]_]\\w*) \\s* (:)
`, beginCaptures: { 1: { name: "variable.parameter.function.language.python" }, 2: { name: "punctuation.separator.annotation.python" } }, end: "(,)|(?=\\))", endCaptures: { 1: { name: "punctuation.separator.parameters.python" } }, patterns: [{ include: "#expression" }, { match: "=(?!=)", name: "keyword.operator.assignment.python" }] }, "assignment-operator": { match: `(?x)
<<= | >>= | //= | \\*\\*=
| \\+= | -= | /= | @=
| \\*= | %= | ~= | \\^= | &= | \\|=
| =(?!=)
`, name: "keyword.operator.assignment.python" }, backticks: { begin: "\\`", end: "(?:\\`|(?<!\\\\)(\\n))", name: "invalid.deprecated.backtick.python", patterns: [{ include: "#expression" }] }, "builtin-callables": { patterns: [{ include: "#illegal-names" }, { include: "#illegal-object-name" }, { include: "#builtin-exceptions" }, { include: "#builtin-functions" }, { include: "#builtin-types" }] }, "builtin-exceptions": { match: `(?x) (?<!\\.) \\b(
(
Arithmetic | Assertion | Attribute | Buffer | BlockingIO
| BrokenPipe | ChildProcess
| (Connection (Aborted | Refused | Reset)?)
| EOF | Environment | FileExists | FileNotFound
| FloatingPoint | IO | Import | Indentation | Index | Interrupted
| IsADirectory | NotADirectory | Permission | ProcessLookup
| Timeout
| Key | Lookup | Memory | Name | NotImplemented | OS | Overflow
| Reference | Runtime | Recursion | Syntax | System
| Tab | Type | UnboundLocal | Unicode(Encode|Decode|Translate)?
| Value | Windows | ZeroDivision | ModuleNotFound
) Error
|
((Pending)?Deprecation | Runtime | Syntax | User | Future | Import
| Unicode | Bytes | Resource
)? Warning
|
SystemExit | Stop(Async)?Iteration
| KeyboardInterrupt
| GeneratorExit | (Base)?Exception
)\\b
`, name: "support.type.exception.python" }, "builtin-functions": { patterns: [{ match: `(?x)
(?<!\\.) \\b(
__import__ | abs | aiter | all | any | anext | ascii | bin
| breakpoint | callable | chr | compile | copyright | credits
| delattr | dir | divmod | enumerate | eval | exec | exit
| filter | format | getattr | globals | hasattr | hash | help
| hex | id | input | isinstance | issubclass | iter | len
| license | locals | map | max | memoryview | min | next
| oct | open | ord | pow | print | quit | range | reload | repr
| reversed | round | setattr | sorted | sum | vars | zip
)\\b
`, name: "support.function.builtin.python" }, { match: `(?x)
(?<!\\.) \\b(
file | reduce | intern | raw_input | unicode | cmp | basestring
| execfile | long | xrange
)\\b
`, name: "variable.legacy.builtin.python" }] }, "builtin-possible-callables": { patterns: [{ include: "#builtin-callables" }, { include: "#magic-names" }] }, "builtin-types": { match: `(?x)
(?<!\\.) \\b(
bool | bytearray | bytes | classmethod | complex | dict
| float | frozenset | int | list | object | property
| set | slice | staticmethod | str | tuple | type

(?# Although 'super' is not a type, it's related to types,
and is special enough to be highlighted differently from
other built-ins)
| super
)\\b
`, name: "support.type.python" }, "call-wrapper-inheritance": { begin: `(?x)
\\b(?=
([[:alpha:]_]\\w*) \\s* (\\()
)
`, comment: "same as a function call, but in inheritance context", end: "(\\))", endCaptures: { 1: { name: "punctuation.definition.arguments.end.python" } }, name: "meta.function-call.python", patterns: [{ include: "#inheritance-name" }, { include: "#function-arguments" }] }, "class-declaration": { patterns: [{ begin: `(?x)
\\s*(class)\\s+
(?=
[[:alpha:]_]\\w* \\s* (:|\\()
)
`, beginCaptures: { 1: { name: "storage.type.class.python" } }, end: "(:)", endCaptures: { 1: { name: "punctuation.section.class.begin.python" } }, name: "meta.class.python", patterns: [{ include: "#class-name" }, { include: "#class-inheritance" }] }] }, "class-inheritance": { begin: "(\\()", beginCaptures: { 1: { name: "punctuation.definition.inheritance.begin.python" } }, end: "(\\))", endCaptures: { 1: { name: "punctuation.definition.inheritance.end.python" } }, name: "meta.class.inheritance.python", patterns: [{ match: "(\\*\\*|\\*)", name: "keyword.operator.unpacking.arguments.python" }, { match: ",", name: "punctuation.separator.inheritance.python" }, { match: "=(?!=)", name: "keyword.operator.assignment.python" }, { match: "\\bmetaclass\\b", name: "support.type.metaclass.python" }, { include: "#illegal-names" }, { include: "#class-kwarg" }, { include: "#call-wrapper-inheritance" }, { include: "#expression-base" }, { include: "#member-access-class" }, { include: "#inheritance-identifier" }] }, "class-kwarg": { captures: { 1: { name: "entity.other.inherited-class.python variable.parameter.class.python" }, 2: { name: "keyword.operator.assignment.python" } }, match: `(?x)
\\b ([[:alpha:]_]\\w*) \\s*(=)(?!=)
` }, "class-name": { patterns: [{ include: "#illegal-object-name" }, { include: "#builtin-possible-callables" }, { match: `(?x)
\\b ([[:alpha:]_]\\w*) \\b
`, name: "entity.name.type.class.python" }] }, codetags: { captures: { 1: { name: "keyword.codetag.notation.python" } }, match: "(?:\\b(NOTE|XXX|HACK|FIXME|BUG|TODO)\\b)" }, comments: { patterns: [{ begin: `(?x)
(?:
\\# \\s* (type:)
\\s*+ (?# we want \`\\s*+\` which is possessive quantifier since
we do not actually want to backtrack when matching
whitespace here)
(?! $ | \\#)
)
`, beginCaptures: { 0: { name: "meta.typehint.comment.python" }, 1: { name: "comment.typehint.directive.notation.python" } }, contentName: "meta.typehint.comment.python", end: "(?:$|(?=\\#))", name: "comment.line.number-sign.python", patterns: [{ match: `(?x)
\\G ignore
(?= \\s* (?: $ | \\#))
`, name: "comment.typehint.ignore.notation.python" }, { match: `(?x)
(?<!\\.)\\b(
bool | bytes | float | int | object | str
| List | Dict | Iterable | Sequence | Set
| FrozenSet | Callable | Union | Tuple
| Any | None
)\\b
`, name: "comment.typehint.type.notation.python" }, { match: "([\\[\\]\\(\\),\\.\\=\\*]|(->))", name: "comment.typehint.punctuation.notation.python" }, { match: "([[:alpha:]_]\\w*)", name: "comment.typehint.variable.notation.python" }] }, { include: "#comments-base" }] }, "comments-base": { begin: "(\\#)", beginCaptures: { 1: { name: "punctuation.definition.comment.python" } }, end: "($)", name: "comment.line.number-sign.python", patterns: [{ include: "#codetags" }] }, "comments-string-double-three": { begin: "(\\#)", beginCaptures: { 1: { name: "punctuation.definition.comment.python" } }, end: '($|(?="""))', name: "comment.line.number-sign.python", patterns: [{ include: "#codetags" }] }, "comments-string-single-three": { begin: "(\\#)", beginCaptures: { 1: { name: "punctuation.definition.comment.python" } }, end: "($|(?='''))", name: "comment.line.number-sign.python", patterns: [{ include: "#codetags" }] }, "curly-braces": { begin: "\\{", beginCaptures: { 0: { name: "punctuation.definition.dict.begin.python" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.dict.end.python" } }, patterns: [{ match: ":", name: "punctuation.separator.dict.python" }, { include: "#expression" }] }, decorator: { begin: `(?x)
^\\s*
((@)) \\s* (?=[[:alpha:]_]\\w*)
`, beginCaptures: { 1: { name: "entity.name.function.decorator.python" }, 2: { name: "punctuation.definition.decorator.python" } }, end: `(?x)
( \\) )

(?: (.*?) (?=\\s*(?:\\#|$)) )
| (?=\\n|\\#)
`, endCaptures: { 1: { name: "punctuation.definition.arguments.end.python" }, 2: { name: "invalid.illegal.decorator.python" } }, name: "meta.function.decorator.python", patterns: [{ include: "#decorator-name" }, { include: "#function-arguments" }] }, "decorator-name": { patterns: [{ include: "#builtin-callables" }, { include: "#illegal-object-name" }, { captures: { 2: { name: "punctuation.separator.period.python" } }, match: `(?x)
([[:alpha:]_]\\w*) | (\\.)
`, name: "entity.name.function.decorator.python" }, { include: "#line-continuation" }, { captures: { 1: { name: "invalid.illegal.decorator.python" } }, match: `(?x)
\\s* ([^([:alpha:]\\s_\\.#\\\\] .*?) (?=\\#|$)
`, name: "invalid.illegal.decorator.python" }] }, docstring: { patterns: [{ begin: `(\\'\\'\\'|\\"\\"\\")`, beginCaptures: { 1: { name: "punctuation.definition.string.begin.python" } }, end: "(\\1)", endCaptures: { 1: { name: "punctuation.definition.string.end.python" } }, name: "string.quoted.docstring.multi.python", patterns: [{ include: "#docstring-prompt" }, { include: "#codetags" }, { include: "#docstring-guts-unicode" }] }, { begin: `([rR])(\\'\\'\\'|\\"\\"\\")`, beginCaptures: { 1: { name: "storage.type.string.python" }, 2: { name: "punctuation.definition.string.begin.python" } }, end: "(\\2)", endCaptures: { 1: { name: "punctuation.definition.string.end.python" } }, name: "string.quoted.docstring.raw.multi.python", patterns: [{ include: "#string-consume-escape" }, { include: "#docstring-prompt" }, { include: "#codetags" }] }, { begin: `(\\'|\\")`, beginCaptures: { 1: { name: "punctuation.definition.string.begin.python" } }, end: "(\\1)|(\\n)", endCaptures: { 1: { name: "punctuation.definition.string.end.python" }, 2: { name: "invalid.illegal.newline.python" } }, name: "string.quoted.docstring.single.python", patterns: [{ include: "#codetags" }, { include: "#docstring-guts-unicode" }] }, { begin: `([rR])(\\'|\\")`, beginCaptures: { 1: { name: "storage.type.string.python" }, 2: { name: "punctuation.definition.string.begin.python" } }, end: "(\\2)|(\\n)", endCaptures: { 1: { name: "punctuation.definition.string.end.python" }, 2: { name: "invalid.illegal.newline.python" } }, name: "string.quoted.docstring.raw.single.python", patterns: [{ include: "#string-consume-escape" }, { include: "#codetags" }] }] }, "docstring-guts-unicode": { patterns: [{ include: "#escape-sequence-unicode" }, { include: "#escape-sequence" }, { include: "#string-line-continuation" }] }, "docstring-prompt": { captures: { 1: { name: "keyword.control.flow.python" } }, match: `(?x)
(?:
(?:^|\\G) \\s* (?# '\\G' is necessary for ST)
((?:>>>|\\.\\.\\.) \\s) (?=\\s*\\S)
)
` }, "docstring-statement": { begin: `^(?=\\s*[rR]?(\\'\\'\\'|\\"\\"\\"|\\'|\\"))`, comment: "the string either terminates correctly or by the beginning of a new line (this is for single line docstrings that aren't terminated) AND it's not followed by another docstring", end: `((?<=\\1)|^)(?!\\s*[rR]?(\\'\\'\\'|\\"\\"\\"|\\'|\\"))`, patterns: [{ include: "#docstring" }] }, "double-one-regexp-character-set": { patterns: [{ match: `(?x)
\\[ \\^? \\] (?! .*?\\])
` }, { begin: "(\\[)(\\^)?(\\])?", beginCaptures: { 1: { name: "punctuation.character.set.begin.regexp constant.other.set.regexp" }, 2: { name: "keyword.operator.negation.regexp" }, 3: { name: "constant.character.set.regexp" } }, end: '(\\]|(?="))|((?=(?<!\\\\)\\n))', endCaptures: { 1: { name: "punctuation.character.set.end.regexp constant.other.set.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, name: "meta.character.set.regexp", patterns: [{ include: "#regexp-charecter-set-escapes" }, { match: "[^\\n]", name: "constant.character.set.regexp" }] }] }, "double-one-regexp-comments": { begin: "\\(\\?#", beginCaptures: { 0: { name: "punctuation.comment.begin.regexp" } }, end: '(\\)|(?="))|((?=(?<!\\\\)\\n))', endCaptures: { 1: { name: "punctuation.comment.end.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, name: "comment.regexp", patterns: [{ include: "#codetags" }] }, "double-one-regexp-conditional": { begin: "(\\()\\?\\((\\w+(?:\\s+[[:alnum:]]+)?|\\d+)\\)", beginCaptures: { 0: { name: "keyword.operator.conditional.regexp" }, 1: { name: "punctuation.parenthesis.conditional.begin.regexp" } }, end: '(\\)|(?="))|((?=(?<!\\\\)\\n))', endCaptures: { 1: { name: "keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, patterns: [{ include: "#double-one-regexp-expression" }] }, "double-one-regexp-expression": { patterns: [{ include: "#regexp-base-expression" }, { include: "#double-one-regexp-character-set" }, { include: "#double-one-regexp-comments" }, { include: "#regexp-flags" }, { include: "#double-one-regexp-named-group" }, { include: "#regexp-backreference" }, { include: "#double-one-regexp-lookahead" }, { include: "#double-one-regexp-lookahead-negative" }, { include: "#double-one-regexp-lookbehind" }, { include: "#double-one-regexp-lookbehind-negative" }, { include: "#double-one-regexp-conditional" }, { include: "#double-one-regexp-parentheses-non-capturing" }, { include: "#double-one-regexp-parentheses" }] }, "double-one-regexp-lookahead": { begin: "(\\()\\?=", beginCaptures: { 0: { name: "keyword.operator.lookahead.regexp" }, 1: { name: "punctuation.parenthesis.lookahead.begin.regexp" } }, end: '(\\)|(?="))|((?=(?<!\\\\)\\n))', endCaptures: { 1: { name: "keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, patterns: [{ include: "#double-one-regexp-expression" }] }, "double-one-regexp-lookahead-negative": { begin: "(\\()\\?!", beginCaptures: { 0: { name: "keyword.operator.lookahead.negative.regexp" }, 1: { name: "punctuation.parenthesis.lookahead.begin.regexp" } }, end: '(\\)|(?="))|((?=(?<!\\\\)\\n))', endCaptures: { 1: { name: "keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, patterns: [{ include: "#double-one-regexp-expression" }] }, "double-one-regexp-lookbehind": { begin: "(\\()\\?<=", beginCaptures: { 0: { name: "keyword.operator.lookbehind.regexp" }, 1: { name: "punctuation.parenthesis.lookbehind.begin.regexp" } }, end: '(\\)|(?="))|((?=(?<!\\\\)\\n))', endCaptures: { 1: { name: "keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, patterns: [{ include: "#double-one-regexp-expression" }] }, "double-one-regexp-lookbehind-negative": { begin: "(\\()\\?<!", beginCaptures: { 0: { name: "keyword.operator.lookbehind.negative.regexp" }, 1: { name: "punctuation.parenthesis.lookbehind.begin.regexp" } }, end: '(\\)|(?="))|((?=(?<!\\\\)\\n))', endCaptures: { 1: { name: "keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, patterns: [{ include: "#double-one-regexp-expression" }] }, "double-one-regexp-named-group": { begin: `(?x)
(\\()  (\\?P <\\w+(?:\\s+[[:alnum:]]+)?>)
`, beginCaptures: { 1: { name: "support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp" }, 2: { name: "entity.name.tag.named.group.regexp" } }, end: '(\\)|(?="))|((?=(?<!\\\\)\\n))', endCaptures: { 1: { name: "support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, name: "meta.named.regexp", patterns: [{ include: "#double-one-regexp-expression" }] }, "double-one-regexp-parentheses": { begin: "\\(", beginCaptures: { 0: { name: "support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp" } }, end: '(\\)|(?="))|((?=(?<!\\\\)\\n))', endCaptures: { 1: { name: "support.other.parenthesis.regexp punctuation.parenthesis.end.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, patterns: [{ include: "#double-one-regexp-expression" }] }, "double-one-regexp-parentheses-non-capturing": { begin: "\\(\\?:", beginCaptures: { 0: { name: "support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp" } }, end: '(\\)|(?="))|((?=(?<!\\\\)\\n))', endCaptures: { 1: { name: "support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, patterns: [{ include: "#double-one-regexp-expression" }] }, "double-three-regexp-character-set": { patterns: [{ match: `(?x)
\\[ \\^? \\] (?! .*?\\])
` }, { begin: "(\\[)(\\^)?(\\])?", beginCaptures: { 1: { name: "punctuation.character.set.begin.regexp constant.other.set.regexp" }, 2: { name: "keyword.operator.negation.regexp" }, 3: { name: "constant.character.set.regexp" } }, end: '(\\]|(?="""))', endCaptures: { 1: { name: "punctuation.character.set.end.regexp constant.other.set.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, name: "meta.character.set.regexp", patterns: [{ include: "#regexp-charecter-set-escapes" }, { match: "[^\\n]", name: "constant.character.set.regexp" }] }] }, "double-three-regexp-comments": { begin: "\\(\\?#", beginCaptures: { 0: { name: "punctuation.comment.begin.regexp" } }, end: '(\\)|(?="""))', endCaptures: { 1: { name: "punctuation.comment.end.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, name: "comment.regexp", patterns: [{ include: "#codetags" }] }, "double-three-regexp-conditional": { begin: "(\\()\\?\\((\\w+(?:\\s+[[:alnum:]]+)?|\\d+)\\)", beginCaptures: { 0: { name: "keyword.operator.conditional.regexp" }, 1: { name: "punctuation.parenthesis.conditional.begin.regexp" } }, end: '(\\)|(?="""))', endCaptures: { 1: { name: "keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, patterns: [{ include: "#double-three-regexp-expression" }, { include: "#comments-string-double-three" }] }, "double-three-regexp-expression": { patterns: [{ include: "#regexp-base-expression" }, { include: "#double-three-regexp-character-set" }, { include: "#double-three-regexp-comments" }, { include: "#regexp-flags" }, { include: "#double-three-regexp-named-group" }, { include: "#regexp-backreference" }, { include: "#double-three-regexp-lookahead" }, { include: "#double-three-regexp-lookahead-negative" }, { include: "#double-three-regexp-lookbehind" }, { include: "#double-three-regexp-lookbehind-negative" }, { include: "#double-three-regexp-conditional" }, { include: "#double-three-regexp-parentheses-non-capturing" }, { include: "#double-three-regexp-parentheses" }, { include: "#comments-string-double-three" }] }, "double-three-regexp-lookahead": { begin: "(\\()\\?=", beginCaptures: { 0: { name: "keyword.operator.lookahead.regexp" }, 1: { name: "punctuation.parenthesis.lookahead.begin.regexp" } }, end: '(\\)|(?="""))', endCaptures: { 1: { name: "keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, patterns: [{ include: "#double-three-regexp-expression" }, { include: "#comments-string-double-three" }] }, "double-three-regexp-lookahead-negative": { begin: "(\\()\\?!", beginCaptures: { 0: { name: "keyword.operator.lookahead.negative.regexp" }, 1: { name: "punctuation.parenthesis.lookahead.begin.regexp" } }, end: '(\\)|(?="""))', endCaptures: { 1: { name: "keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, patterns: [{ include: "#double-three-regexp-expression" }, { include: "#comments-string-double-three" }] }, "double-three-regexp-lookbehind": { begin: "(\\()\\?<=", beginCaptures: { 0: { name: "keyword.operator.lookbehind.regexp" }, 1: { name: "punctuation.parenthesis.lookbehind.begin.regexp" } }, end: '(\\)|(?="""))', endCaptures: { 1: { name: "keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, patterns: [{ include: "#double-three-regexp-expression" }, { include: "#comments-string-double-three" }] }, "double-three-regexp-lookbehind-negative": { begin: "(\\()\\?<!", beginCaptures: { 0: { name: "keyword.operator.lookbehind.negative.regexp" }, 1: { name: "punctuation.parenthesis.lookbehind.begin.regexp" } }, end: '(\\)|(?="""))', endCaptures: { 1: { name: "keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, patterns: [{ include: "#double-three-regexp-expression" }, { include: "#comments-string-double-three" }] }, "double-three-regexp-named-group": { begin: `(?x)
(\\()  (\\?P <\\w+(?:\\s+[[:alnum:]]+)?>)
`, beginCaptures: { 1: { name: "support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp" }, 2: { name: "entity.name.tag.named.group.regexp" } }, end: '(\\)|(?="""))', endCaptures: { 1: { name: "support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, name: "meta.named.regexp", patterns: [{ include: "#double-three-regexp-expression" }, { include: "#comments-string-double-three" }] }, "double-three-regexp-parentheses": { begin: "\\(", beginCaptures: { 0: { name: "support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp" } }, end: '(\\)|(?="""))', endCaptures: { 1: { name: "support.other.parenthesis.regexp punctuation.parenthesis.end.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, patterns: [{ include: "#double-three-regexp-expression" }, { include: "#comments-string-double-three" }] }, "double-three-regexp-parentheses-non-capturing": { begin: "\\(\\?:", beginCaptures: { 0: { name: "support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp" } }, end: '(\\)|(?="""))', endCaptures: { 1: { name: "support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, patterns: [{ include: "#double-three-regexp-expression" }, { include: "#comments-string-double-three" }] }, ellipsis: { match: "\\.\\.\\.", name: "constant.other.ellipsis.python" }, "escape-sequence": { match: `(?x)
\\\\ (
x[0-9A-Fa-f]{2}
| [0-7]{1,3}
| [\\\\"'abfnrtv]
)
`, name: "constant.character.escape.python" }, "escape-sequence-unicode": { patterns: [{ match: `(?x)
\\\\ (
u[0-9A-Fa-f]{4}
| U[0-9A-Fa-f]{8}
| N\\{[\\w\\s]+?\\}
)
`, name: "constant.character.escape.python" }] }, expression: { comment: "All valid Python expressions", patterns: [{ include: "#expression-base" }, { include: "#member-access" }, { comment: "Tokenize identifiers to help linters", match: "(?x) \\b ([[:alpha:]_]\\w*) \\b" }] }, "expression-bare": { comment: "valid Python expressions w/o comments and line continuation", patterns: [{ include: "#backticks" }, { include: "#illegal-anno" }, { include: "#literal" }, { include: "#regexp" }, { include: "#string" }, { include: "#lambda" }, { include: "#generator" }, { include: "#illegal-operator" }, { include: "#operator" }, { include: "#curly-braces" }, { include: "#item-access" }, { include: "#list" }, { include: "#odd-function-call" }, { include: "#round-braces" }, { include: "#function-call" }, { include: "#builtin-functions" }, { include: "#builtin-types" }, { include: "#builtin-exceptions" }, { include: "#magic-names" }, { include: "#special-names" }, { include: "#illegal-names" }, { include: "#special-variables" }, { include: "#ellipsis" }, { include: "#punctuation" }, { include: "#line-continuation" }] }, "expression-base": { comment: "valid Python expressions with comments and line continuation", patterns: [{ include: "#comments" }, { include: "#expression-bare" }, { include: "#line-continuation" }] }, "f-expression": { comment: "All valid Python expressions, except comments and line continuation", patterns: [{ include: "#expression-bare" }, { include: "#member-access" }, { comment: "Tokenize identifiers to help linters", match: "(?x) \\b ([[:alpha:]_]\\w*) \\b" }] }, "fregexp-base-expression": { patterns: [{ include: "#fregexp-quantifier" }, { include: "#fstring-formatting-braces" }, { match: "\\{.*?\\}" }, { include: "#regexp-base-common" }] }, "fregexp-quantifier": { match: `(?x)
\\{\\{(
\\d+ | \\d+,(\\d+)? | ,\\d+
)\\}\\}
`, name: "keyword.operator.quantifier.regexp" }, "fstring-fnorm-quoted-multi-line": { begin: `(\\b[fF])([bBuU])?('''|""")`, beginCaptures: { 1: { name: "string.interpolated.python string.quoted.multi.python storage.type.string.python" }, 2: { name: "invalid.illegal.prefix.python" }, 3: { name: "punctuation.definition.string.begin.python string.interpolated.python string.quoted.multi.python" } }, end: "(\\3)", endCaptures: { 1: { name: "punctuation.definition.string.end.python string.interpolated.python string.quoted.multi.python" }, 2: { name: "invalid.illegal.newline.python" } }, name: "meta.fstring.python", patterns: [{ include: "#fstring-guts" }, { include: "#fstring-illegal-multi-brace" }, { include: "#fstring-multi-brace" }, { include: "#fstring-multi-core" }] }, "fstring-fnorm-quoted-single-line": { begin: `(\\b[fF])([bBuU])?((['"]))`, beginCaptures: { 1: { name: "string.interpolated.python string.quoted.single.python storage.type.string.python" }, 2: { name: "invalid.illegal.prefix.python" }, 3: { name: "punctuation.definition.string.begin.python string.interpolated.python string.quoted.single.python" } }, end: "(\\3)|((?<!\\\\)\\n)", endCaptures: { 1: { name: "punctuation.definition.string.end.python string.interpolated.python string.quoted.single.python" }, 2: { name: "invalid.illegal.newline.python" } }, name: "meta.fstring.python", patterns: [{ include: "#fstring-guts" }, { include: "#fstring-illegal-single-brace" }, { include: "#fstring-single-brace" }, { include: "#fstring-single-core" }] }, "fstring-formatting": { patterns: [{ include: "#fstring-formatting-braces" }, { include: "#fstring-formatting-singe-brace" }] }, "fstring-formatting-braces": { patterns: [{ captures: { 1: { name: "constant.character.format.placeholder.other.python" }, 2: { name: "invalid.illegal.brace.python" }, 3: { name: "constant.character.format.placeholder.other.python" } }, comment: "empty braces are illegal", match: "({)(\\s*?)(})" }, { match: "({{|}})", name: "constant.character.escape.python" }] }, "fstring-formatting-singe-brace": { match: "(}(?!}))", name: "invalid.illegal.brace.python" }, "fstring-guts": { patterns: [{ include: "#escape-sequence-unicode" }, { include: "#escape-sequence" }, { include: "#string-line-continuation" }, { include: "#fstring-formatting" }] }, "fstring-illegal-multi-brace": { patterns: [{ include: "#impossible" }] }, "fstring-illegal-single-brace": { begin: "(\\{)(?=[^\\n}]*$\\n?)", beginCaptures: { 1: { name: "constant.character.format.placeholder.other.python" } }, comment: "it is illegal to have a multiline brace inside a single-line string", end: "(\\})|(?=\\n)", endCaptures: { 1: { name: "constant.character.format.placeholder.other.python" } }, patterns: [{ include: "#fstring-terminator-single" }, { include: "#f-expression" }] }, "fstring-multi-brace": { begin: "(\\{)", beginCaptures: { 1: { name: "constant.character.format.placeholder.other.python" } }, comment: "value interpolation using { ... }", end: `(?x)
(\\})
`, endCaptures: { 1: { name: "constant.character.format.placeholder.other.python" } }, patterns: [{ include: "#fstring-terminator-multi" }, { include: "#f-expression" }] }, "fstring-multi-core": { match: `(?x)
(.+?)
(
(?# .* and .*? in multi-line match need special handling of
newlines otherwise SublimeText and Atom will match slightly
differently.

The guard for newlines has to be separate from the
lookahead because of special $ matching rule.)
($\\n?)
|
(?=[\\\\\\}\\{]|'''|""")
)
(?# due to how multiline regexps are matched we need a special case
for matching a newline character)
| \\n
`, name: "string.interpolated.python string.quoted.multi.python" }, "fstring-normf-quoted-multi-line": { begin: `(\\b[bBuU])([fF])('''|""")`, beginCaptures: { 1: { name: "invalid.illegal.prefix.python" }, 2: { name: "string.interpolated.python string.quoted.multi.python storage.type.string.python" }, 3: { name: "punctuation.definition.string.begin.python string.quoted.multi.python" } }, end: "(\\3)", endCaptures: { 1: { name: "punctuation.definition.string.end.python string.interpolated.python string.quoted.multi.python" }, 2: { name: "invalid.illegal.newline.python" } }, name: "meta.fstring.python", patterns: [{ include: "#fstring-guts" }, { include: "#fstring-illegal-multi-brace" }, { include: "#fstring-multi-brace" }, { include: "#fstring-multi-core" }] }, "fstring-normf-quoted-single-line": { begin: `(\\b[bBuU])([fF])((['"]))`, beginCaptures: { 1: { name: "invalid.illegal.prefix.python" }, 2: { name: "string.interpolated.python string.quoted.single.python storage.type.string.python" }, 3: { name: "punctuation.definition.string.begin.python string.quoted.single.python" } }, end: "(\\3)|((?<!\\\\)\\n)", endCaptures: { 1: { name: "punctuation.definition.string.end.python string.interpolated.python string.quoted.single.python" }, 2: { name: "invalid.illegal.newline.python" } }, name: "meta.fstring.python", patterns: [{ include: "#fstring-guts" }, { include: "#fstring-illegal-single-brace" }, { include: "#fstring-single-brace" }, { include: "#fstring-single-core" }] }, "fstring-raw-guts": { patterns: [{ include: "#string-consume-escape" }, { include: "#fstring-formatting" }] }, "fstring-raw-multi-core": { match: `(?x)
(.+?)
(
(?# .* and .*? in multi-line match need special handling of
newlines otherwise SublimeText and Atom will match slightly
differently.

The guard for newlines has to be separate from the
lookahead because of special $ matching rule.)
($\\n?)
|
(?=[\\\\\\}\\{]|'''|""")
)
(?# due to how multiline regexps are matched we need a special case
for matching a newline character)
| \\n
`, name: "string.interpolated.python string.quoted.raw.multi.python" }, "fstring-raw-quoted-multi-line": { begin: `(\\b(?:[rR][fF]|[fF][rR]))('''|""")`, beginCaptures: { 1: { name: "string.interpolated.python string.quoted.raw.multi.python storage.type.string.python" }, 2: { name: "punctuation.definition.string.begin.python string.quoted.raw.multi.python" } }, end: "(\\2)", endCaptures: { 1: { name: "punctuation.definition.string.end.python string.interpolated.python string.quoted.raw.multi.python" }, 2: { name: "invalid.illegal.newline.python" } }, name: "meta.fstring.python", patterns: [{ include: "#fstring-raw-guts" }, { include: "#fstring-illegal-multi-brace" }, { include: "#fstring-multi-brace" }, { include: "#fstring-raw-multi-core" }] }, "fstring-raw-quoted-single-line": { begin: `(\\b(?:[rR][fF]|[fF][rR]))((['"]))`, beginCaptures: { 1: { name: "string.interpolated.python string.quoted.raw.single.python storage.type.string.python" }, 2: { name: "punctuation.definition.string.begin.python string.quoted.raw.single.python" } }, end: "(\\2)|((?<!\\\\)\\n)", endCaptures: { 1: { name: "punctuation.definition.string.end.python string.interpolated.python string.quoted.raw.single.python" }, 2: { name: "invalid.illegal.newline.python" } }, name: "meta.fstring.python", patterns: [{ include: "#fstring-raw-guts" }, { include: "#fstring-illegal-single-brace" }, { include: "#fstring-single-brace" }, { include: "#fstring-raw-single-core" }] }, "fstring-raw-single-core": { match: `(?x)
(.+?)
(
(?# .* and .*? in multi-line match need special handling of
newlines otherwise SublimeText and Atom will match slightly
differently.

The guard for newlines has to be separate from the
lookahead because of special $ matching rule.)
($\\n?)
|
(?=[\\\\\\}\\{]|(['"])|((?<!\\\\)\\n))
)
(?# due to how multiline regexps are matched we need a special case
for matching a newline character)
| \\n
`, name: "string.interpolated.python string.quoted.raw.single.python" }, "fstring-single-brace": { begin: "(\\{)", beginCaptures: { 1: { name: "constant.character.format.placeholder.other.python" } }, comment: "value interpolation using { ... }", end: `(?x)
(\\})|(?=\\n)
`, endCaptures: { 1: { name: "constant.character.format.placeholder.other.python" } }, patterns: [{ include: "#fstring-terminator-single" }, { include: "#f-expression" }] }, "fstring-single-core": { match: `(?x)
(.+?)
(
(?# .* and .*? in multi-line match need special handling of
newlines otherwise SublimeText and Atom will match slightly
differently.

The guard for newlines has to be separate from the
lookahead because of special $ matching rule.)
($\\n?)
|
(?=[\\\\\\}\\{]|(['"])|((?<!\\\\)\\n))
)
(?# due to how multiline regexps are matched we need a special case
for matching a newline character)
| \\n
`, name: "string.interpolated.python string.quoted.single.python" }, "fstring-terminator-multi": { patterns: [{ match: "(=(![rsa])?)(?=})", name: "storage.type.format.python" }, { match: "(=?![rsa])(?=})", name: "storage.type.format.python" }, { captures: { 1: { name: "storage.type.format.python" }, 2: { name: "storage.type.format.python" } }, match: `(?x)
( (?: =?) (?: ![rsa])? )
( : \\w? [<>=^]? [-+ ]? \\#?
\\d* ,? (\\.\\d+)? [bcdeEfFgGnosxX%]? )(?=})
` }, { include: "#fstring-terminator-multi-tail" }] }, "fstring-terminator-multi-tail": { begin: "((?:=?)(?:![rsa])?)(:)(?=.*?{)", beginCaptures: { 1: { name: "storage.type.format.python" }, 2: { name: "storage.type.format.python" } }, end: "(?=})", patterns: [{ include: "#fstring-illegal-multi-brace" }, { include: "#fstring-multi-brace" }, { match: "([bcdeEfFgGnosxX%])(?=})", name: "storage.type.format.python" }, { match: "(\\.\\d+)", name: "storage.type.format.python" }, { match: "(,)", name: "storage.type.format.python" }, { match: "(\\d+)", name: "storage.type.format.python" }, { match: "(\\#)", name: "storage.type.format.python" }, { match: "([-+ ])", name: "storage.type.format.python" }, { match: "([<>=^])", name: "storage.type.format.python" }, { match: "(\\w)", name: "storage.type.format.python" }] }, "fstring-terminator-single": { patterns: [{ match: "(=(![rsa])?)(?=})", name: "storage.type.format.python" }, { match: "(=?![rsa])(?=})", name: "storage.type.format.python" }, { captures: { 1: { name: "storage.type.format.python" }, 2: { name: "storage.type.format.python" } }, match: `(?x)
( (?: =?) (?: ![rsa])? )
( : \\w? [<>=^]? [-+ ]? \\#?
\\d* ,? (\\.\\d+)? [bcdeEfFgGnosxX%]? )(?=})
` }, { include: "#fstring-terminator-single-tail" }] }, "fstring-terminator-single-tail": { begin: "((?:=?)(?:![rsa])?)(:)(?=.*?{)", beginCaptures: { 1: { name: "storage.type.format.python" }, 2: { name: "storage.type.format.python" } }, end: "(?=})|(?=\\n)", patterns: [{ include: "#fstring-illegal-single-brace" }, { include: "#fstring-single-brace" }, { match: "([bcdeEfFgGnosxX%])(?=})", name: "storage.type.format.python" }, { match: "(\\.\\d+)", name: "storage.type.format.python" }, { match: "(,)", name: "storage.type.format.python" }, { match: "(\\d+)", name: "storage.type.format.python" }, { match: "(\\#)", name: "storage.type.format.python" }, { match: "([-+ ])", name: "storage.type.format.python" }, { match: "([<>=^])", name: "storage.type.format.python" }, { match: "(\\w)", name: "storage.type.format.python" }] }, "function-arguments": { begin: "(\\()", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.python" } }, contentName: "meta.function-call.arguments.python", end: "(?=\\))(?!\\)\\s*\\()", patterns: [{ match: "(,)", name: "punctuation.separator.arguments.python" }, { captures: { 1: { name: "keyword.operator.unpacking.arguments.python" } }, match: `(?x)
(?:(?<=[,(])|^) \\s* (\\*{1,2})
` }, { include: "#lambda-incomplete" }, { include: "#illegal-names" }, { captures: { 1: { name: "variable.parameter.function-call.python" }, 2: { name: "keyword.operator.assignment.python" } }, match: "\\b([[:alpha:]_]\\w*)\\s*(=)(?!=)" }, { match: "=(?!=)", name: "keyword.operator.assignment.python" }, { include: "#expression" }, { captures: { 1: { name: "punctuation.definition.arguments.end.python" }, 2: { name: "punctuation.definition.arguments.begin.python" } }, match: "\\s*(\\))\\s*(\\()" }] }, "function-call": { begin: `(?x)
\\b(?=
([[:alpha:]_]\\w*) \\s* (\\()
)
`, comment: 'Regular function call of the type "name(args)"', end: "(\\))", endCaptures: { 1: { name: "punctuation.definition.arguments.end.python" } }, name: "meta.function-call.python", patterns: [{ include: "#special-variables" }, { include: "#function-name" }, { include: "#function-arguments" }] }, "function-declaration": { begin: `(?x)
\\s*
(?:\\b(async) \\s+)? \\b(def)\\s+
(?=
[[:alpha:]_][[:word:]]* \\s* \\(
)
`, beginCaptures: { 1: { name: "storage.type.function.async.python" }, 2: { name: "storage.type.function.python" } }, end: `(:|(?=[#'"\\n]))`, endCaptures: { 1: { name: "punctuation.section.function.begin.python" } }, name: "meta.function.python", patterns: [{ include: "#function-def-name" }, { include: "#parameters" }, { include: "#line-continuation" }, { include: "#return-annotation" }] }, "function-def-name": { patterns: [{ include: "#illegal-object-name" }, { include: "#builtin-possible-callables" }, { match: `(?x)
\\b ([[:alpha:]_]\\w*) \\b
`, name: "entity.name.function.python" }] }, "function-name": { patterns: [{ include: "#builtin-possible-callables" }, { comment: "Some color schemas support meta.function-call.generic scope", match: `(?x)
\\b ([[:alpha:]_]\\w*) \\b
`, name: "meta.function-call.generic.python" }] }, generator: { begin: "\\bfor\\b", beginCaptures: { 0: { name: "keyword.control.flow.python" } }, comment: `Match "for ... in" construct used in generators and for loops to
correctly identify the "in" as a control flow keyword.
`, end: "\\bin\\b", endCaptures: { 0: { name: "keyword.control.flow.python" } }, patterns: [{ include: "#expression" }] }, "illegal-anno": { match: "->", name: "invalid.illegal.annotation.python" }, "illegal-names": { captures: { 1: { name: "keyword.control.flow.python" }, 2: { name: "keyword.control.import.python" } }, match: `(?x)
\\b(?:
(
and | assert | async | await | break | class | continue | def
| del | elif | else | except | finally | for | from | global
| if | in | is | (?<=\\.)lambda | lambda(?=\\s*[\\.=])
| nonlocal | not | or | pass | raise | return | try | while | with
| yield
) | (
as | import
)
)\\b
` }, "illegal-object-name": { comment: `It's illegal to name class or function "True"`, match: "\\b(True|False|None)\\b", name: "keyword.illegal.name.python" }, "illegal-operator": { patterns: [{ match: "&&|\\|\\||--|\\+\\+", name: "invalid.illegal.operator.python" }, { match: "[?$]", name: "invalid.illegal.operator.python" }, { comment: "We don't want `!` to flash when we're typing `!=`", match: "!\\b", name: "invalid.illegal.operator.python" }] }, import: { comment: "Import statements used to correctly mark `from`, `import`, and `as`\n", patterns: [{ begin: "\\b(?<!\\.)(from)\\b(?=.+import)", beginCaptures: { 1: { name: "keyword.control.import.python" } }, end: "$|(?=import)", patterns: [{ match: "\\.+", name: "punctuation.separator.period.python" }, { include: "#expression" }] }, { begin: "\\b(?<!\\.)(import)\\b", beginCaptures: { 1: { name: "keyword.control.import.python" } }, end: "$", patterns: [{ match: "\\b(?<!\\.)as\\b", name: "keyword.control.import.python" }, { include: "#expression" }] }] }, impossible: { comment: "This is a special rule that should be used where no match is desired. It is not a good idea to match something like '1{0}' because in some cases that can result in infinite loops in token generation. So the rule instead matches and impossible expression to allow a match to fail and move to the next token.", match: "$.^" }, "inheritance-identifier": { captures: { 1: { name: "entity.other.inherited-class.python" } }, match: `(?x)
\\b ([[:alpha:]_]\\w*) \\b
` }, "inheritance-name": { patterns: [{ include: "#lambda-incomplete" }, { include: "#builtin-possible-callables" }, { include: "#inheritance-identifier" }] }, "item-access": { patterns: [{ begin: `(?x)
\\b(?=
[[:alpha:]_]\\w* \\s* \\[
)
`, end: "(\\])", endCaptures: { 1: { name: "punctuation.definition.arguments.end.python" } }, name: "meta.item-access.python", patterns: [{ include: "#item-name" }, { include: "#item-index" }, { include: "#expression" }] }] }, "item-index": { begin: "(\\[)", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.python" } }, contentName: "meta.item-access.arguments.python", end: "(?=\\])", patterns: [{ match: ":", name: "punctuation.separator.slice.python" }, { include: "#expression" }] }, "item-name": { patterns: [{ include: "#special-variables" }, { include: "#builtin-functions" }, { include: "#special-names" }, { match: `(?x)
\\b ([[:alpha:]_]\\w*) \\b
`, name: "meta.indexed-name.python" }] }, lambda: { patterns: [{ captures: { 1: { name: "keyword.control.flow.python" } }, match: "((?<=\\.)lambda|lambda(?=\\s*[\\.=]))" }, { captures: { 1: { name: "storage.type.function.lambda.python" } }, match: "\\b(lambda)\\s*?(?=[,\\n]|$)" }, { begin: `(?x)
\\b (lambda) \\b
`, beginCaptures: { 1: { name: "storage.type.function.lambda.python" } }, contentName: "meta.function.lambda.parameters.python", end: "(:)|(\\n)", endCaptures: { 1: { name: "punctuation.section.function.lambda.begin.python" } }, name: "meta.lambda-function.python", patterns: [{ match: "/", name: "keyword.operator.positional.parameter.python" }, { match: "(\\*\\*|\\*)", name: "keyword.operator.unpacking.parameter.python" }, { include: "#lambda-nested-incomplete" }, { include: "#illegal-names" }, { captures: { 1: { name: "variable.parameter.function.language.python" }, 2: { name: "punctuation.separator.parameters.python" } }, match: "([[:alpha:]_]\\w*)\\s*(?:(,)|(?=:|$))" }, { include: "#comments" }, { include: "#backticks" }, { include: "#illegal-anno" }, { include: "#lambda-parameter-with-default" }, { include: "#line-continuation" }, { include: "#illegal-operator" }] }] }, "lambda-incomplete": { match: "\\blambda(?=\\s*[,)])", name: "storage.type.function.lambda.python" }, "lambda-nested-incomplete": { match: "\\blambda(?=\\s*[:,)])", name: "storage.type.function.lambda.python" }, "lambda-parameter-with-default": { begin: `(?x)
\\b
([[:alpha:]_]\\w*) \\s* (=)
`, beginCaptures: { 1: { name: "variable.parameter.function.language.python" }, 2: { name: "keyword.operator.python" } }, end: "(,)|(?=:|$)", endCaptures: { 1: { name: "punctuation.separator.parameters.python" } }, patterns: [{ include: "#expression" }] }, "line-continuation": { patterns: [{ captures: { 1: { name: "punctuation.separator.continuation.line.python" }, 2: { name: "invalid.illegal.line.continuation.python" } }, match: "(\\\\)\\s*(\\S.*$\\n?)" }, { begin: "(\\\\)\\s*$\\n?", beginCaptures: { 1: { name: "punctuation.separator.continuation.line.python" } }, end: `(?x)
(?=^\\s*$)
|
(?! (\\s* [rR]? (\\'\\'\\'|\\"\\"\\"|\\'|\\"))
|
(\\G $)  (?# '\\G' is necessary for ST)
)
`, patterns: [{ include: "#regexp" }, { include: "#string" }] }] }, list: { begin: "\\[", beginCaptures: { 0: { name: "punctuation.definition.list.begin.python" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.list.end.python" } }, patterns: [{ include: "#expression" }] }, literal: { patterns: [{ match: "\\b(True|False|None|NotImplemented|Ellipsis)\\b", name: "constant.language.python" }, { include: "#number" }] }, "loose-default": { begin: "(=)", beginCaptures: { 1: { name: "keyword.operator.python" } }, end: "(,)|(?=\\))", endCaptures: { 1: { name: "punctuation.separator.parameters.python" } }, patterns: [{ include: "#expression" }] }, "magic-function-names": { captures: { 1: { name: "support.function.magic.python" } }, comment: `these methods have magic interpretation by python and are generally called
indirectly through syntactic constructs
`, match: `(?x)
\\b(
__(?:
abs | add | aenter | aexit | aiter | and | anext
| await | bool | call | ceil | class_getitem
| cmp | coerce | complex | contains | copy
| deepcopy | del | delattr | delete | delitem
| delslice | dir | div | divmod | enter | eq
| exit | float | floor | floordiv | format | ge
| get | getattr | getattribute | getinitargs
| getitem | getnewargs | getslice | getstate | gt
| hash | hex | iadd | iand | idiv | ifloordiv |
| ilshift | imod | imul | index | init
| instancecheck | int | invert | ior | ipow
| irshift | isub | iter | itruediv | ixor | le
| len | long | lshift | lt | missing | mod | mul
| ne | neg | new | next | nonzero | oct | or | pos
| pow | radd | rand | rdiv | rdivmod | reduce
| reduce_ex | repr | reversed | rfloordiv |
| rlshift | rmod | rmul | ror | round | rpow
| rrshift | rshift | rsub | rtruediv | rxor | set
| setattr | setitem | set_name | setslice
| setstate | sizeof | str | sub | subclasscheck
| truediv | trunc | unicode | xor | matmul
| rmatmul | imatmul | init_subclass | set_name
| fspath | bytes | prepare | length_hint
)__
)\\b
` }, "magic-names": { patterns: [{ include: "#magic-function-names" }, { include: "#magic-variable-names" }] }, "magic-variable-names": { captures: { 1: { name: "support.variable.magic.python" } }, comment: "magic variables which a class/module may have.", match: `(?x)
\\b(
__(?:
all | annotations | bases | builtins | class
| closure | code | debug | defaults | dict | doc | file | func
| globals | kwdefaults | match_args | members | metaclass | methods
| module | mro | mro_entries | name | qualname | post_init | self
| signature | slots | subclasses | version | weakref | wrapped
| classcell | spec | path | package | future | traceback
)__
)\\b
` }, "member-access": { begin: "(\\.)\\s*(?!\\.)", beginCaptures: { 1: { name: "punctuation.separator.period.python" } }, end: `(?x)


(?<=\\S)(?=\\W) |


(^|(?<=\\s))(?=[^\\\\\\w\\s]) |
$
`, name: "meta.member.access.python", patterns: [{ include: "#function-call" }, { include: "#member-access-base" }, { include: "#member-access-attribute" }] }, "member-access-attribute": { comment: "Highlight attribute access in otherwise non-specialized cases.", match: `(?x)
\\b ([[:alpha:]_]\\w*) \\b
`, name: "meta.attribute.python" }, "member-access-base": { patterns: [{ include: "#magic-names" }, { include: "#illegal-names" }, { include: "#illegal-object-name" }, { include: "#special-names" }, { include: "#line-continuation" }, { include: "#item-access" }] }, "member-access-class": { begin: "(\\.)\\s*(?!\\.)", beginCaptures: { 1: { name: "punctuation.separator.period.python" } }, end: "(?<=\\S)(?=\\W)|$", name: "meta.member.access.python", patterns: [{ include: "#call-wrapper-inheritance" }, { include: "#member-access-base" }, { include: "#inheritance-identifier" }] }, number: { name: "constant.numeric.python", patterns: [{ include: "#number-float" }, { include: "#number-dec" }, { include: "#number-hex" }, { include: "#number-oct" }, { include: "#number-bin" }, { include: "#number-long" }, { match: "\\b[0-9]+\\w+", name: "invalid.illegal.name.python" }] }, "number-bin": { captures: { 1: { name: "storage.type.number.python" } }, match: `(?x)
(?<![\\w\\.])
(0[bB]) (_?[01])+
\\b
`, name: "constant.numeric.bin.python" }, "number-dec": { captures: { 1: { name: "storage.type.imaginary.number.python" }, 2: { name: "invalid.illegal.dec.python" } }, match: `(?x)
(?<![\\w\\.])(?:
[1-9](?: _?[0-9] )*
|
0+
|
[0-9](?: _?[0-9] )* ([jJ])
|
0 ([0-9]+)(?![eE\\.])
)\\b
`, name: "constant.numeric.dec.python" }, "number-float": { captures: { 1: { name: "storage.type.imaginary.number.python" } }, match: `(?x)
(?<! \\w)(?:
(?:
\\.[0-9](?: _?[0-9] )*
|
[0-9](?: _?[0-9] )* \\. [0-9](?: _?[0-9] )*
|
[0-9](?: _?[0-9] )* \\.
) (?: [eE][+-]?[0-9](?: _?[0-9] )* )?
|
[0-9](?: _?[0-9] )* (?: [eE][+-]?[0-9](?: _?[0-9] )* )
)([jJ])?\\b
`, name: "constant.numeric.float.python" }, "number-hex": { captures: { 1: { name: "storage.type.number.python" } }, match: `(?x)
(?<![\\w\\.])
(0[xX]) (_?[0-9a-fA-F])+
\\b
`, name: "constant.numeric.hex.python" }, "number-long": { captures: { 2: { name: "storage.type.number.python" } }, comment: "this is to support python2 syntax for long ints", match: `(?x)
(?<![\\w\\.])
([1-9][0-9]* | 0) ([lL])
\\b
`, name: "constant.numeric.bin.python" }, "number-oct": { captures: { 1: { name: "storage.type.number.python" } }, match: `(?x)
(?<![\\w\\.])
(0[oO]) (_?[0-7])+
\\b
`, name: "constant.numeric.oct.python" }, "odd-function-call": { begin: `(?x)
(?<= \\] | \\) ) \\s*
(?=\\()
`, comment: `A bit obscured function call where there may have been an
arbitrary number of other operations to get the function.
E.g. "arr[idx](args)"
`, end: "(\\))", endCaptures: { 1: { name: "punctuation.definition.arguments.end.python" } }, patterns: [{ include: "#function-arguments" }] }, operator: { captures: { 1: { name: "keyword.operator.logical.python" }, 2: { name: "keyword.control.flow.python" }, 3: { name: "keyword.operator.bitwise.python" }, 4: { name: "keyword.operator.arithmetic.python" }, 5: { name: "keyword.operator.comparison.python" }, 6: { name: "keyword.operator.assignment.python" } }, match: `(?x)
\\b(?<!\\.)
(?:
(and | or | not | in | is)                         (?# 1)
|
(for | if | else | await | (?:yield(?:\\s+from)?))  (?# 2)
)
(?!\\s*:)\\b

| (<< | >> | & | \\| | \\^ | ~)                          (?# 3)

| (\\*\\* | \\* | \\+ | - | % | // | / | @)                (?# 4)

| (!= | == | >= | <= | < | >)                          (?# 5)

| (:=)                                                 (?# 6)
` }, "parameter-special": { captures: { 1: { name: "variable.parameter.function.language.python" }, 2: { name: "variable.parameter.function.language.special.self.python" }, 3: { name: "variable.parameter.function.language.special.cls.python" }, 4: { name: "punctuation.separator.parameters.python" } }, match: `(?x)
\\b ((self)|(cls)) \\b \\s*(?:(,)|(?=\\)))
` }, parameters: { begin: "(\\()", beginCaptures: { 1: { name: "punctuation.definition.parameters.begin.python" } }, end: "(\\))", endCaptures: { 1: { name: "punctuation.definition.parameters.end.python" } }, name: "meta.function.parameters.python", patterns: [{ match: "/", name: "keyword.operator.positional.parameter.python" }, { match: "(\\*\\*|\\*)", name: "keyword.operator.unpacking.parameter.python" }, { include: "#lambda-incomplete" }, { include: "#illegal-names" }, { include: "#illegal-object-name" }, { include: "#parameter-special" }, { captures: { 1: { name: "variable.parameter.function.language.python" }, 2: { name: "punctuation.separator.parameters.python" } }, match: `(?x)
([[:alpha:]_]\\w*)
\\s* (?: (,) | (?=[)#\\n=]))
` }, { include: "#comments" }, { include: "#loose-default" }, { include: "#annotated-parameter" }] }, punctuation: { patterns: [{ match: ":", name: "punctuation.separator.colon.python" }, { match: ",", name: "punctuation.separator.element.python" }] }, regexp: { patterns: [{ include: "#regexp-single-three-line" }, { include: "#regexp-double-three-line" }, { include: "#regexp-single-one-line" }, { include: "#regexp-double-one-line" }] }, "regexp-backreference": { captures: { 1: { name: "support.other.parenthesis.regexp punctuation.parenthesis.backreference.named.begin.regexp" }, 2: { name: "entity.name.tag.named.backreference.regexp" }, 3: { name: "support.other.parenthesis.regexp punctuation.parenthesis.backreference.named.end.regexp" } }, match: `(?x)
(\\()  (\\?P= \\w+(?:\\s+[[:alnum:]]+)?)  (\\))
`, name: "meta.backreference.named.regexp" }, "regexp-backreference-number": { captures: { 1: { name: "entity.name.tag.backreference.regexp" } }, match: "(\\\\[1-9]\\d?)", name: "meta.backreference.regexp" }, "regexp-base-common": { patterns: [{ match: "\\.", name: "support.other.match.any.regexp" }, { match: "\\^", name: "support.other.match.begin.regexp" }, { match: "\\$", name: "support.other.match.end.regexp" }, { match: "[+*?]\\??", name: "keyword.operator.quantifier.regexp" }, { match: "\\|", name: "keyword.operator.disjunction.regexp" }, { include: "#regexp-escape-sequence" }] }, "regexp-base-expression": { patterns: [{ include: "#regexp-quantifier" }, { include: "#regexp-base-common" }] }, "regexp-charecter-set-escapes": { patterns: [{ match: "\\\\[abfnrtv\\\\]", name: "constant.character.escape.regexp" }, { include: "#regexp-escape-special" }, { match: "\\\\([0-7]{1,3})", name: "constant.character.escape.regexp" }, { include: "#regexp-escape-character" }, { include: "#regexp-escape-unicode" }, { include: "#regexp-escape-catchall" }] }, "regexp-double-one-line": { begin: '\\b(([uU]r)|([bB]r)|(r[bB]?))(")', beginCaptures: { 2: { name: "invalid.deprecated.prefix.python" }, 3: { name: "storage.type.string.python" }, 4: { name: "storage.type.string.python" }, 5: { name: "punctuation.definition.string.begin.python" } }, end: '(")|(?<!\\\\)(\\n)', endCaptures: { 1: { name: "punctuation.definition.string.end.python" }, 2: { name: "invalid.illegal.newline.python" } }, name: "string.regexp.quoted.single.python", patterns: [{ include: "#double-one-regexp-expression" }] }, "regexp-double-three-line": { begin: '\\b(([uU]r)|([bB]r)|(r[bB]?))(""")', beginCaptures: { 2: { name: "invalid.deprecated.prefix.python" }, 3: { name: "storage.type.string.python" }, 4: { name: "storage.type.string.python" }, 5: { name: "punctuation.definition.string.begin.python" } }, end: '(""")', endCaptures: { 1: { name: "punctuation.definition.string.end.python" }, 2: { name: "invalid.illegal.newline.python" } }, name: "string.regexp.quoted.multi.python", patterns: [{ include: "#double-three-regexp-expression" }] }, "regexp-escape-catchall": { match: "\\\\(.|\\n)", name: "constant.character.escape.regexp" }, "regexp-escape-character": { match: `(?x)
\\\\ (
x[0-9A-Fa-f]{2}
| 0[0-7]{1,2}
| [0-7]{3}
)
`, name: "constant.character.escape.regexp" }, "regexp-escape-sequence": { patterns: [{ include: "#regexp-escape-special" }, { include: "#regexp-escape-character" }, { include: "#regexp-escape-unicode" }, { include: "#regexp-backreference-number" }, { include: "#regexp-escape-catchall" }] }, "regexp-escape-special": { match: "\\\\([AbBdDsSwWZ])", name: "support.other.escape.special.regexp" }, "regexp-escape-unicode": { match: `(?x)
\\\\ (
u[0-9A-Fa-f]{4}
| U[0-9A-Fa-f]{8}
)
`, name: "constant.character.unicode.regexp" }, "regexp-flags": { match: "\\(\\?[aiLmsux]+\\)", name: "storage.modifier.flag.regexp" }, "regexp-quantifier": { match: `(?x)
\\{(
\\d+ | \\d+,(\\d+)? | ,\\d+
)\\}
`, name: "keyword.operator.quantifier.regexp" }, "regexp-single-one-line": { begin: "\\b(([uU]r)|([bB]r)|(r[bB]?))(\\')", beginCaptures: { 2: { name: "invalid.deprecated.prefix.python" }, 3: { name: "storage.type.string.python" }, 4: { name: "storage.type.string.python" }, 5: { name: "punctuation.definition.string.begin.python" } }, end: "(\\')|(?<!\\\\)(\\n)", endCaptures: { 1: { name: "punctuation.definition.string.end.python" }, 2: { name: "invalid.illegal.newline.python" } }, name: "string.regexp.quoted.single.python", patterns: [{ include: "#single-one-regexp-expression" }] }, "regexp-single-three-line": { begin: "\\b(([uU]r)|([bB]r)|(r[bB]?))(\\'\\'\\')", beginCaptures: { 2: { name: "invalid.deprecated.prefix.python" }, 3: { name: "storage.type.string.python" }, 4: { name: "storage.type.string.python" }, 5: { name: "punctuation.definition.string.begin.python" } }, end: "(\\'\\'\\')", endCaptures: { 1: { name: "punctuation.definition.string.end.python" }, 2: { name: "invalid.illegal.newline.python" } }, name: "string.regexp.quoted.multi.python", patterns: [{ include: "#single-three-regexp-expression" }] }, "return-annotation": { begin: "(->)", beginCaptures: { 1: { name: "punctuation.separator.annotation.result.python" } }, end: "(?=:)", patterns: [{ include: "#expression" }] }, "round-braces": { begin: "\\(", beginCaptures: { 0: { name: "punctuation.parenthesis.begin.python" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.parenthesis.end.python" } }, patterns: [{ include: "#expression" }] }, semicolon: { patterns: [{ match: "\\;$", name: "invalid.deprecated.semicolon.python" }] }, "single-one-regexp-character-set": { patterns: [{ match: `(?x)
\\[ \\^? \\] (?! .*?\\])
` }, { begin: "(\\[)(\\^)?(\\])?", beginCaptures: { 1: { name: "punctuation.character.set.begin.regexp constant.other.set.regexp" }, 2: { name: "keyword.operator.negation.regexp" }, 3: { name: "constant.character.set.regexp" } }, end: "(\\]|(?=\\'))|((?=(?<!\\\\)\\n))", endCaptures: { 1: { name: "punctuation.character.set.end.regexp constant.other.set.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, name: "meta.character.set.regexp", patterns: [{ include: "#regexp-charecter-set-escapes" }, { match: "[^\\n]", name: "constant.character.set.regexp" }] }] }, "single-one-regexp-comments": { begin: "\\(\\?#", beginCaptures: { 0: { name: "punctuation.comment.begin.regexp" } }, end: "(\\)|(?=\\'))|((?=(?<!\\\\)\\n))", endCaptures: { 1: { name: "punctuation.comment.end.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, name: "comment.regexp", patterns: [{ include: "#codetags" }] }, "single-one-regexp-conditional": { begin: "(\\()\\?\\((\\w+(?:\\s+[[:alnum:]]+)?|\\d+)\\)", beginCaptures: { 0: { name: "keyword.operator.conditional.regexp" }, 1: { name: "punctuation.parenthesis.conditional.begin.regexp" } }, end: "(\\)|(?=\\'))|((?=(?<!\\\\)\\n))", endCaptures: { 1: { name: "keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, patterns: [{ include: "#single-one-regexp-expression" }] }, "single-one-regexp-expression": { patterns: [{ include: "#regexp-base-expression" }, { include: "#single-one-regexp-character-set" }, { include: "#single-one-regexp-comments" }, { include: "#regexp-flags" }, { include: "#single-one-regexp-named-group" }, { include: "#regexp-backreference" }, { include: "#single-one-regexp-lookahead" }, { include: "#single-one-regexp-lookahead-negative" }, { include: "#single-one-regexp-lookbehind" }, { include: "#single-one-regexp-lookbehind-negative" }, { include: "#single-one-regexp-conditional" }, { include: "#single-one-regexp-parentheses-non-capturing" }, { include: "#single-one-regexp-parentheses" }] }, "single-one-regexp-lookahead": { begin: "(\\()\\?=", beginCaptures: { 0: { name: "keyword.operator.lookahead.regexp" }, 1: { name: "punctuation.parenthesis.lookahead.begin.regexp" } }, end: "(\\)|(?=\\'))|((?=(?<!\\\\)\\n))", endCaptures: { 1: { name: "keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, patterns: [{ include: "#single-one-regexp-expression" }] }, "single-one-regexp-lookahead-negative": { begin: "(\\()\\?!", beginCaptures: { 0: { name: "keyword.operator.lookahead.negative.regexp" }, 1: { name: "punctuation.parenthesis.lookahead.begin.regexp" } }, end: "(\\)|(?=\\'))|((?=(?<!\\\\)\\n))", endCaptures: { 1: { name: "keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, patterns: [{ include: "#single-one-regexp-expression" }] }, "single-one-regexp-lookbehind": { begin: "(\\()\\?<=", beginCaptures: { 0: { name: "keyword.operator.lookbehind.regexp" }, 1: { name: "punctuation.parenthesis.lookbehind.begin.regexp" } }, end: "(\\)|(?=\\'))|((?=(?<!\\\\)\\n))", endCaptures: { 1: { name: "keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, patterns: [{ include: "#single-one-regexp-expression" }] }, "single-one-regexp-lookbehind-negative": { begin: "(\\()\\?<!", beginCaptures: { 0: { name: "keyword.operator.lookbehind.negative.regexp" }, 1: { name: "punctuation.parenthesis.lookbehind.begin.regexp" } }, end: "(\\)|(?=\\'))|((?=(?<!\\\\)\\n))", endCaptures: { 1: { name: "keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, patterns: [{ include: "#single-one-regexp-expression" }] }, "single-one-regexp-named-group": { begin: `(?x)
(\\()  (\\?P <\\w+(?:\\s+[[:alnum:]]+)?>)
`, beginCaptures: { 1: { name: "support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp" }, 2: { name: "entity.name.tag.named.group.regexp" } }, end: "(\\)|(?=\\'))|((?=(?<!\\\\)\\n))", endCaptures: { 1: { name: "support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, name: "meta.named.regexp", patterns: [{ include: "#single-one-regexp-expression" }] }, "single-one-regexp-parentheses": { begin: "\\(", beginCaptures: { 0: { name: "support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp" } }, end: "(\\)|(?=\\'))|((?=(?<!\\\\)\\n))", endCaptures: { 1: { name: "support.other.parenthesis.regexp punctuation.parenthesis.end.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, patterns: [{ include: "#single-one-regexp-expression" }] }, "single-one-regexp-parentheses-non-capturing": { begin: "\\(\\?:", beginCaptures: { 0: { name: "support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp" } }, end: "(\\)|(?=\\'))|((?=(?<!\\\\)\\n))", endCaptures: { 1: { name: "support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, patterns: [{ include: "#single-one-regexp-expression" }] }, "single-three-regexp-character-set": { patterns: [{ match: `(?x)
\\[ \\^? \\] (?! .*?\\])
` }, { begin: "(\\[)(\\^)?(\\])?", beginCaptures: { 1: { name: "punctuation.character.set.begin.regexp constant.other.set.regexp" }, 2: { name: "keyword.operator.negation.regexp" }, 3: { name: "constant.character.set.regexp" } }, end: "(\\]|(?=\\'\\'\\'))", endCaptures: { 1: { name: "punctuation.character.set.end.regexp constant.other.set.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, name: "meta.character.set.regexp", patterns: [{ include: "#regexp-charecter-set-escapes" }, { match: "[^\\n]", name: "constant.character.set.regexp" }] }] }, "single-three-regexp-comments": { begin: "\\(\\?#", beginCaptures: { 0: { name: "punctuation.comment.begin.regexp" } }, end: "(\\)|(?=\\'\\'\\'))", endCaptures: { 1: { name: "punctuation.comment.end.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, name: "comment.regexp", patterns: [{ include: "#codetags" }] }, "single-three-regexp-conditional": { begin: "(\\()\\?\\((\\w+(?:\\s+[[:alnum:]]+)?|\\d+)\\)", beginCaptures: { 0: { name: "keyword.operator.conditional.regexp" }, 1: { name: "punctuation.parenthesis.conditional.begin.regexp" } }, end: "(\\)|(?=\\'\\'\\'))", endCaptures: { 1: { name: "keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, patterns: [{ include: "#single-three-regexp-expression" }, { include: "#comments-string-single-three" }] }, "single-three-regexp-expression": { patterns: [{ include: "#regexp-base-expression" }, { include: "#single-three-regexp-character-set" }, { include: "#single-three-regexp-comments" }, { include: "#regexp-flags" }, { include: "#single-three-regexp-named-group" }, { include: "#regexp-backreference" }, { include: "#single-three-regexp-lookahead" }, { include: "#single-three-regexp-lookahead-negative" }, { include: "#single-three-regexp-lookbehind" }, { include: "#single-three-regexp-lookbehind-negative" }, { include: "#single-three-regexp-conditional" }, { include: "#single-three-regexp-parentheses-non-capturing" }, { include: "#single-three-regexp-parentheses" }, { include: "#comments-string-single-three" }] }, "single-three-regexp-lookahead": { begin: "(\\()\\?=", beginCaptures: { 0: { name: "keyword.operator.lookahead.regexp" }, 1: { name: "punctuation.parenthesis.lookahead.begin.regexp" } }, end: "(\\)|(?=\\'\\'\\'))", endCaptures: { 1: { name: "keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, patterns: [{ include: "#single-three-regexp-expression" }, { include: "#comments-string-single-three" }] }, "single-three-regexp-lookahead-negative": { begin: "(\\()\\?!", beginCaptures: { 0: { name: "keyword.operator.lookahead.negative.regexp" }, 1: { name: "punctuation.parenthesis.lookahead.begin.regexp" } }, end: "(\\)|(?=\\'\\'\\'))", endCaptures: { 1: { name: "keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, patterns: [{ include: "#single-three-regexp-expression" }, { include: "#comments-string-single-three" }] }, "single-three-regexp-lookbehind": { begin: "(\\()\\?<=", beginCaptures: { 0: { name: "keyword.operator.lookbehind.regexp" }, 1: { name: "punctuation.parenthesis.lookbehind.begin.regexp" } }, end: "(\\)|(?=\\'\\'\\'))", endCaptures: { 1: { name: "keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, patterns: [{ include: "#single-three-regexp-expression" }, { include: "#comments-string-single-three" }] }, "single-three-regexp-lookbehind-negative": { begin: "(\\()\\?<!", beginCaptures: { 0: { name: "keyword.operator.lookbehind.negative.regexp" }, 1: { name: "punctuation.parenthesis.lookbehind.begin.regexp" } }, end: "(\\)|(?=\\'\\'\\'))", endCaptures: { 1: { name: "keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, patterns: [{ include: "#single-three-regexp-expression" }, { include: "#comments-string-single-three" }] }, "single-three-regexp-named-group": { begin: `(?x)
(\\()  (\\?P <\\w+(?:\\s+[[:alnum:]]+)?>)
`, beginCaptures: { 1: { name: "support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp" }, 2: { name: "entity.name.tag.named.group.regexp" } }, end: "(\\)|(?=\\'\\'\\'))", endCaptures: { 1: { name: "support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, name: "meta.named.regexp", patterns: [{ include: "#single-three-regexp-expression" }, { include: "#comments-string-single-three" }] }, "single-three-regexp-parentheses": { begin: "\\(", beginCaptures: { 0: { name: "support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp" } }, end: "(\\)|(?=\\'\\'\\'))", endCaptures: { 1: { name: "support.other.parenthesis.regexp punctuation.parenthesis.end.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, patterns: [{ include: "#single-three-regexp-expression" }, { include: "#comments-string-single-three" }] }, "single-three-regexp-parentheses-non-capturing": { begin: "\\(\\?:", beginCaptures: { 0: { name: "support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp" } }, end: "(\\)|(?=\\'\\'\\'))", endCaptures: { 1: { name: "support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp" }, 2: { name: "invalid.illegal.newline.python" } }, patterns: [{ include: "#single-three-regexp-expression" }, { include: "#comments-string-single-three" }] }, "special-names": { match: `(?x)
\\b





(
_* [[:upper:]] [_\\d]* [[:upper:]]
)
[[:upper:]\\d]* (_\\w*)?
\\b
`, name: "constant.other.caps.python" }, "special-variables": { captures: { 1: { name: "variable.language.special.self.python" }, 2: { name: "variable.language.special.cls.python" } }, match: `(?x)
\\b (?<!\\.) (?:
(self) | (cls)
)\\b
` }, statement: { patterns: [{ include: "#import" }, { include: "#class-declaration" }, { include: "#function-declaration" }, { include: "#generator" }, { include: "#statement-keyword" }, { include: "#assignment-operator" }, { include: "#decorator" }, { include: "#docstring-statement" }, { include: "#semicolon" }] }, "statement-keyword": { patterns: [{ match: "\\b((async\\s+)?\\s*def)\\b", name: "storage.type.function.python" }, { comment: `if \`as\` is eventually followed by \`:\` or line continuation
it's probably control flow like:
    with foo as bar, \\
         Foo as Bar:
      try:
        do_stuff()
      except Exception as e:
        pass
`, match: "\\b(?<!\\.)as\\b(?=.*[:\\\\])", name: "keyword.control.flow.python" }, { comment: "other legal use of `as` is in an import", match: "\\b(?<!\\.)as\\b", name: "keyword.control.import.python" }, { match: `(?x)
\\b(?<!\\.)(
async | continue | del | assert | break | finally | for
| from | elif | else | if | except | pass | raise
| return | try | while | with
)\\b
`, name: "keyword.control.flow.python" }, { match: `(?x)
\\b(?<!\\.)(
global | nonlocal
)\\b
`, name: "storage.modifier.declaration.python" }, { match: "\\b(?<!\\.)(class)\\b", name: "storage.type.class.python" }, { captures: { 1: { name: "keyword.control.flow.python" } }, match: `(?x)
^\\s*(
case | match
)(?=\\s*([-+\\w\\d(\\[{'":#]|$))\\b
` }] }, string: { patterns: [{ include: "#string-quoted-multi-line" }, { include: "#string-quoted-single-line" }, { include: "#string-bin-quoted-multi-line" }, { include: "#string-bin-quoted-single-line" }, { include: "#string-raw-quoted-multi-line" }, { include: "#string-raw-quoted-single-line" }, { include: "#string-raw-bin-quoted-multi-line" }, { include: "#string-raw-bin-quoted-single-line" }, { include: "#fstring-fnorm-quoted-multi-line" }, { include: "#fstring-fnorm-quoted-single-line" }, { include: "#fstring-normf-quoted-multi-line" }, { include: "#fstring-normf-quoted-single-line" }, { include: "#fstring-raw-quoted-multi-line" }, { include: "#fstring-raw-quoted-single-line" }] }, "string-bin-quoted-multi-line": { begin: `(\\b[bB])('''|""")`, beginCaptures: { 1: { name: "storage.type.string.python" }, 2: { name: "punctuation.definition.string.begin.python" } }, end: "(\\2)", endCaptures: { 1: { name: "punctuation.definition.string.end.python" }, 2: { name: "invalid.illegal.newline.python" } }, name: "string.quoted.binary.multi.python", patterns: [{ include: "#string-entity" }] }, "string-bin-quoted-single-line": { begin: `(\\b[bB])((['"]))`, beginCaptures: { 1: { name: "storage.type.string.python" }, 2: { name: "punctuation.definition.string.begin.python" } }, end: "(\\2)|((?<!\\\\)\\n)", endCaptures: { 1: { name: "punctuation.definition.string.end.python" }, 2: { name: "invalid.illegal.newline.python" } }, name: "string.quoted.binary.single.python", patterns: [{ include: "#string-entity" }] }, "string-brace-formatting": { patterns: [{ captures: { 1: { name: "constant.character.format.placeholder.other.python" }, 3: { name: "storage.type.format.python" }, 4: { name: "storage.type.format.python" } }, match: `(?x)
(
{{ | }}
| (?:
{
\\w* (\\.[[:alpha:]_]\\w* | \\[[^\\]'"]+\\])*
(![rsa])?
( : \\w? [<>=^]? [-+ ]? \\#?
\\d* ,? (\\.\\d+)? [bcdeEfFgGnosxX%]? )?
})
)
`, name: "meta.format.brace.python" }, { captures: { 1: { name: "constant.character.format.placeholder.other.python" }, 3: { name: "storage.type.format.python" }, 4: { name: "storage.type.format.python" } }, match: `(?x)
(
{
\\w* (\\.[[:alpha:]_]\\w* | \\[[^\\]'"]+\\])*
(![rsa])?
(:)
[^'"{}\\n]* (?:
\\{ [^'"}\\n]*? \\} [^'"{}\\n]*
)*
}
)
`, name: "meta.format.brace.python" }] }, "string-consume-escape": { match: `\\\\['"\\n\\\\]` }, "string-entity": { patterns: [{ include: "#escape-sequence" }, { include: "#string-line-continuation" }, { include: "#string-formatting" }] }, "string-formatting": { captures: { 1: { name: "constant.character.format.placeholder.other.python" } }, match: `(?x)
(
% (\\([\\w\\s]*\\))?
[-+#0 ]*
(\\d+|\\*)? (\\.(\\d+|\\*))?
([hlL])?
[diouxXeEfFgGcrsab%]
)
`, name: "meta.format.percent.python" }, "string-line-continuation": { match: "\\\\$", name: "constant.language.python" }, "string-multi-bad-brace1-formatting-raw": { begin: `(?x)
(?= \\{%
( .*? (?!'''|""") )
%\\}
)
`, comment: "template using {% ... %}", end: `(?='''|""")`, patterns: [{ include: "#string-consume-escape" }] }, "string-multi-bad-brace1-formatting-unicode": { begin: `(?x)
(?= \\{%
( .*? (?!'''|""") )
%\\}
)
`, comment: "template using {% ... %}", end: `(?='''|""")`, patterns: [{ include: "#escape-sequence-unicode" }, { include: "#escape-sequence" }, { include: "#string-line-continuation" }] }, "string-multi-bad-brace2-formatting-raw": { begin: `(?x)
(?!\\{\\{)
(?= \\{ (
\\w*? (?!'''|""") [^!:\\.\\[}\\w]
)
.*?(?!'''|""")
\\}
)
`, comment: "odd format or format-like syntax", end: `(?='''|""")`, patterns: [{ include: "#string-consume-escape" }, { include: "#string-formatting" }] }, "string-multi-bad-brace2-formatting-unicode": { begin: `(?x)
(?!\\{\\{)
(?= \\{ (
\\w*? (?!'''|""") [^!:\\.\\[}\\w]
)
.*?(?!'''|""")
\\}
)
`, comment: "odd format or format-like syntax", end: `(?='''|""")`, patterns: [{ include: "#escape-sequence-unicode" }, { include: "#string-entity" }] }, "string-quoted-multi-line": { begin: `(?:\\b([rR])(?=[uU]))?([uU])?('''|""")`, beginCaptures: { 1: { name: "invalid.illegal.prefix.python" }, 2: { name: "storage.type.string.python" }, 3: { name: "punctuation.definition.string.begin.python" } }, end: "(\\3)", endCaptures: { 1: { name: "punctuation.definition.string.end.python" }, 2: { name: "invalid.illegal.newline.python" } }, name: "string.quoted.multi.python", patterns: [{ include: "#string-multi-bad-brace1-formatting-unicode" }, { include: "#string-multi-bad-brace2-formatting-unicode" }, { include: "#string-unicode-guts" }] }, "string-quoted-single-line": { begin: `(?:\\b([rR])(?=[uU]))?([uU])?((['"]))`, beginCaptures: { 1: { name: "invalid.illegal.prefix.python" }, 2: { name: "storage.type.string.python" }, 3: { name: "punctuation.definition.string.begin.python" } }, end: "(\\3)|((?<!\\\\)\\n)", endCaptures: { 1: { name: "punctuation.definition.string.end.python" }, 2: { name: "invalid.illegal.newline.python" } }, name: "string.quoted.single.python", patterns: [{ include: "#string-single-bad-brace1-formatting-unicode" }, { include: "#string-single-bad-brace2-formatting-unicode" }, { include: "#string-unicode-guts" }] }, "string-raw-bin-guts": { patterns: [{ include: "#string-consume-escape" }, { include: "#string-formatting" }] }, "string-raw-bin-quoted-multi-line": { begin: `(\\b(?:R[bB]|[bB]R))('''|""")`, beginCaptures: { 1: { name: "storage.type.string.python" }, 2: { name: "punctuation.definition.string.begin.python" } }, end: "(\\2)", endCaptures: { 1: { name: "punctuation.definition.string.end.python" }, 2: { name: "invalid.illegal.newline.python" } }, name: "string.quoted.raw.binary.multi.python", patterns: [{ include: "#string-raw-bin-guts" }] }, "string-raw-bin-quoted-single-line": { begin: `(\\b(?:R[bB]|[bB]R))((['"]))`, beginCaptures: { 1: { name: "storage.type.string.python" }, 2: { name: "punctuation.definition.string.begin.python" } }, end: "(\\2)|((?<!\\\\)\\n)", endCaptures: { 1: { name: "punctuation.definition.string.end.python" }, 2: { name: "invalid.illegal.newline.python" } }, name: "string.quoted.raw.binary.single.python", patterns: [{ include: "#string-raw-bin-guts" }] }, "string-raw-guts": { patterns: [{ include: "#string-consume-escape" }, { include: "#string-formatting" }, { include: "#string-brace-formatting" }] }, "string-raw-quoted-multi-line": { begin: `\\b(([uU]R)|(R))('''|""")`, beginCaptures: { 2: { name: "invalid.deprecated.prefix.python" }, 3: { name: "storage.type.string.python" }, 4: { name: "punctuation.definition.string.begin.python" } }, end: "(\\4)", endCaptures: { 1: { name: "punctuation.definition.string.end.python" }, 2: { name: "invalid.illegal.newline.python" } }, name: "string.quoted.raw.multi.python", patterns: [{ include: "#string-multi-bad-brace1-formatting-raw" }, { include: "#string-multi-bad-brace2-formatting-raw" }, { include: "#string-raw-guts" }] }, "string-raw-quoted-single-line": { begin: `\\b(([uU]R)|(R))((['"]))`, beginCaptures: { 2: { name: "invalid.deprecated.prefix.python" }, 3: { name: "storage.type.string.python" }, 4: { name: "punctuation.definition.string.begin.python" } }, end: "(\\4)|((?<!\\\\)\\n)", endCaptures: { 1: { name: "punctuation.definition.string.end.python" }, 2: { name: "invalid.illegal.newline.python" } }, name: "string.quoted.raw.single.python", patterns: [{ include: "#string-single-bad-brace1-formatting-raw" }, { include: "#string-single-bad-brace2-formatting-raw" }, { include: "#string-raw-guts" }] }, "string-single-bad-brace1-formatting-raw": { begin: `(?x)
(?= \\{%
( .*? (?!(['"])|((?<!\\\\)\\n)) )
%\\}
)
`, comment: "template using {% ... %}", end: `(?=(['"])|((?<!\\\\)\\n))`, patterns: [{ include: "#string-consume-escape" }] }, "string-single-bad-brace1-formatting-unicode": { begin: `(?x)
(?= \\{%
( .*? (?!(['"])|((?<!\\\\)\\n)) )
%\\}
)
`, comment: "template using {% ... %}", end: `(?=(['"])|((?<!\\\\)\\n))`, patterns: [{ include: "#escape-sequence-unicode" }, { include: "#escape-sequence" }, { include: "#string-line-continuation" }] }, "string-single-bad-brace2-formatting-raw": { begin: `(?x)
(?!\\{\\{)
(?= \\{ (
\\w*? (?!(['"])|((?<!\\\\)\\n)) [^!:\\.\\[}\\w]
)
.*?(?!(['"])|((?<!\\\\)\\n))
\\}
)
`, comment: "odd format or format-like syntax", end: `(?=(['"])|((?<!\\\\)\\n))`, patterns: [{ include: "#string-consume-escape" }, { include: "#string-formatting" }] }, "string-single-bad-brace2-formatting-unicode": { begin: `(?x)
(?!\\{\\{)
(?= \\{ (
\\w*? (?!(['"])|((?<!\\\\)\\n)) [^!:\\.\\[}\\w]
)
.*?(?!(['"])|((?<!\\\\)\\n))
\\}
)
`, comment: "odd format or format-like syntax", end: `(?=(['"])|((?<!\\\\)\\n))`, patterns: [{ include: "#escape-sequence-unicode" }, { include: "#string-entity" }] }, "string-unicode-guts": { patterns: [{ include: "#escape-sequence-unicode" }, { include: "#string-entity" }, { include: "#string-brace-formatting" }] } }, scopeName: "source.python", aliases: ["py"] });
var f = [
  Je
];
const en = Object.freeze({ displayName: "Julia", name: "julia", patterns: [{ include: "#operator" }, { include: "#array" }, { include: "#string" }, { include: "#parentheses" }, { include: "#bracket" }, { include: "#function_decl" }, { include: "#function_call" }, { include: "#for_block" }, { include: "#keyword" }, { include: "#number" }, { include: "#comment" }, { include: "#type_decl" }, { include: "#symbol" }, { include: "#punctuation" }], repository: { array: { patterns: [{ begin: "\\[", beginCaptures: { 0: { name: "meta.bracket.julia" } }, end: "(\\])((?:\\.)?'*)", endCaptures: { 1: { name: "meta.bracket.julia" }, 2: { name: "keyword.operator.transpose.julia" } }, name: "meta.array.julia", patterns: [{ match: "\\bbegin\\b", name: "constant.numeric.julia" }, { match: "\\bend\\b", name: "constant.numeric.julia" }, { include: "#self_no_for_block" }] }] }, bracket: { patterns: [{ begin: "\\{", beginCaptures: { 0: { name: "meta.bracket.julia" } }, end: "(\\})((?:\\.)?'*)", endCaptures: { 1: { name: "meta.bracket.julia" }, 2: { name: "keyword.operator.transpose.julia" } }, patterns: [{ include: "#self_no_for_block" }] }] }, comment: { patterns: [{ include: "#comment_block" }, { begin: "#", beginCaptures: { 0: { name: "punctuation.definition.comment.julia" } }, end: "\\n", name: "comment.line.number-sign.julia", patterns: [{ include: "#comment_tags" }] }] }, comment_block: { patterns: [{ begin: "#=", beginCaptures: { 0: { name: "punctuation.definition.comment.begin.julia" } }, end: "=#", endCaptures: { 0: { name: "punctuation.definition.comment.end.julia" } }, name: "comment.block.number-sign-equals.julia", patterns: [{ include: "#comment_tags" }, { include: "#comment_block" }] }] }, comment_tags: { patterns: [{ match: "\\bTODO\\b", name: "keyword.other.comment-annotation.julia" }, { match: "\\bFIXME\\b", name: "keyword.other.comment-annotation.julia" }, { match: "\\bCHANGED\\b", name: "keyword.other.comment-annotation.julia" }, { match: "\\bXXX\\b", name: "keyword.other.comment-annotation.julia" }] }, for_block: { comment: "for blocks need to be special-cased to support tokenizing 'outer' properly", patterns: [{ begin: "\\b(for)\\b", beginCaptures: { 0: { name: "keyword.control.julia" } }, end: "(?<!,|\\s)(\\s*\\n)", patterns: [{ match: "\\bouter\\b", name: "keyword.other.julia" }, { include: "$self" }] }] }, function_call: { patterns: [{ begin: "((?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}-¡]|[^\\P{Mc}-¡]|[^\\P{Nd}-¡]|[^\\P{Pc}-¡]|[^\\P{Sk}-¡]|[^\\P{Me}-¡]|[^\\P{No}-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*)({(?:[^{}]|{(?:[^{}]|{[^{}]*})*})*})?\\.?(\\()", beginCaptures: { 1: { name: "support.function.julia" }, 2: { name: "support.type.julia" }, 3: { name: "meta.bracket.julia" } }, end: "\\)(('|(\\.'))*\\.?')?", endCaptures: { 0: { name: "meta.bracket.julia" }, 1: { name: "keyword.operator.transposed-func.julia" } }, patterns: [{ include: "#self_no_for_block" }] }] }, function_decl: { patterns: [{ captures: { 1: { name: "entity.name.function.julia" }, 2: { name: "support.type.julia" } }, comment: `first group is function name
Second group is type parameters (e.g. {T<:Number, S})
Then open parens
Then a lookahead ensures that we are followed by:
  - anything (function arguments)
  - 0 or more spaces
  - Finally an equal sign
Negative lookahead ensures we don't have another equal sign (not \`==\`)`, match: "((?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}-¡]|[^\\P{Mc}-¡]|[^\\P{Nd}-¡]|[^\\P{Pc}-¡]|[^\\P{Sk}-¡]|[^\\P{Me}-¡]|[^\\P{No}-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*)({(?:[^{}]|{(?:[^{}]|{[^{}]*})*})*})?(?=\\([^#]*\\)(::[^\\s]+)?(\\s*\\bwhere\\b\\s+.+?)?\\s*?=(?![=>]))" }, { captures: { 1: { name: "keyword.other.julia" }, 2: { name: "keyword.operator.dots.julia" }, 3: { name: "entity.name.function.julia" }, 4: { name: "support.type.julia" } }, comment: "similar regex to previous, but with keyword not 1-line syntax", match: "\\b(function|macro)(?:\\s+(?:(?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}-¡]|[^\\P{Mc}-¡]|[^\\P{Nd}-¡]|[^\\P{Pc}-¡]|[^\\P{Sk}-¡]|[^\\P{Me}-¡]|[^\\P{No}-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*(\\.))?((?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}-¡]|[^\\P{Mc}-¡]|[^\\P{Nd}-¡]|[^\\P{Pc}-¡]|[^\\P{Sk}-¡]|[^\\P{Me}-¡]|[^\\P{No}-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*)({(?:[^{}]|{(?:[^{}]|{[^{}]*})*})*})?|\\s*)(?=\\()" }] }, keyword: { patterns: [{ match: "\\b(?<![:_\\.])(?:function|mutable\\s+struct|struct|macro|quote|abstract\\s+type|primitive\\s+type|module|baremodule|where)\\b", name: "keyword.other.julia" }, { match: "\\b(?<![:_])(?:if|else|elseif|for|while|begin|let|do|try|catch|finally|return|break|continue)\\b", name: "keyword.control.julia" }, { match: "\\b(?<![:_])end\\b", name: "keyword.control.end.julia" }, { match: "\\b(?<![:_])(?:global|local|const)\\b", name: "keyword.storage.modifier.julia" }, { match: "\\b(?<![:_])(?:export)\\b", name: "keyword.control.export.julia" }, { match: "^(?:public)\\b", name: "keyword.control.public.julia" }, { match: "\\b(?<![:_])(?:import)\\b", name: "keyword.control.import.julia" }, { match: "\\b(?<![:_])(?:using)\\b", name: "keyword.control.using.julia" }, { match: "(?<=\\S\\s+)\\b(as)\\b(?=\\s+\\S)", name: "keyword.control.as.julia" }, { match: "(@(\\.|(?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}-¡]|[^\\P{Mc}-¡]|[^\\P{Nd}-¡]|[^\\P{Pc}-¡]|[^\\P{Sk}-¡]|[^\\P{Me}-¡]|[^\\P{No}-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*))", name: "support.function.macro.julia" }] }, number: { patterns: [{ captures: { 1: { name: "constant.numeric.julia" }, 2: { name: "keyword.operator.conjugate-number.julia" } }, match: "((?<!(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}-¡]|[^\\P{Mc}-¡]|[^\\P{Nd}-¡]|[^\\P{Pc}-¡]|[^\\P{Sk}-¡]|[^\\P{Me}-¡]|[^\\P{No}-¡]|[′-‷⁗]|[^\\P{So}←-⇿]))(?:(?:\\b0(?:x|X)[0-9a-fA-F](?:_?[0-9a-fA-F])*)|(?:\\b0o[0-7](?:_?[0-7])*)|(?:\\b0b[0-1](?:_?[0-1])*)|(?:(?:\\b[0-9](?:_?[0-9])*\\.?(?!\\.)(?:[_0-9]*))|(?:\\b\\.[0-9](?:_?[0-9])*))(?:[efE][+-]?[0-9](?:_?[0-9])*)?(?:im\\b|Inf(?:16|32|64)?\\b|NaN(?:16|32|64)?\\b|π\\b|pi\\b|ℯ\\b)?|\\b[0-9]+|\\bInf(?:16|32|64)?\\b|\\bNaN(?:16|32|64)?\\b|\\bπ\\b|\\bpi\\b|\\bℯ\\b))('*)" }, { match: "\\bARGS\\b|\\bC_NULL\\b|\\bDEPOT_PATH\\b|\\bENDIAN_BOM\\b|\\bENV\\b|\\bLOAD_PATH\\b|\\bPROGRAM_FILE\\b|\\bstdin\\b|\\bstdout\\b|\\bstderr\\b|\\bVERSION\\b|\\bdevnull\\b", name: "constant.global.julia" }, { match: "\\btrue\\b|\\bfalse\\b|\\bnothing\\b|\\bmissing\\b", name: "constant.language.julia" }] }, operator: { patterns: [{ match: "\\.?(?:<-->|->|-->|<--|←|→|↔|↚|↛|↞|↠|↢|↣|↦|↤|↮|⇎|⇍|⇏|⇐|⇒|⇔|⇴|⇶|⇷|⇸|⇹|⇺|⇻|⇼|⇽|⇾|⇿|⟵|⟶|⟷|⟹|⟺|⟻|⟼|⟽|⟾|⟿|⤀|⤁|⤂|⤃|⤄|⤅|⤆|⤇|⤌|⤍|⤎|⤏|⤐|⤑|⤔|⤕|⤖|⤗|⤘|⤝|⤞|⤟|⤠|⥄|⥅|⥆|⥇|⥈|⥊|⥋|⥎|⥐|⥒|⥓|⥖|⥗|⥚|⥛|⥞|⥟|⥢|⥤|⥦|⥧|⥨|⥩|⥪|⥫|⥬|⥭|⥰|⧴|⬱|⬰|⬲|⬳|⬴|⬵|⬶|⬷|⬸|⬹|⬺|⬻|⬼|⬽|⬾|⬿|⭀|⭁|⭂|⭃|⥷|⭄|⥺|⭇|⭈|⭉|⭊|⭋|⭌|￩|￫|⇜|⇝|↜|↝|↩|↪|↫|↬|↼|↽|⇀|⇁|⇄|⇆|⇇|⇉|⇋|⇌|⇚|⇛|⇠|⇢|↷|↶|↺|↻|=>)", name: "keyword.operator.arrow.julia" }, { match: "(?::=|\\+=|-=|\\*=|//=|/=|\\.//=|\\./=|\\.\\*=|\\\\=|\\.\\\\=|\\^=|\\.\\^=|%=|\\.%=|÷=|\\.÷=|\\|=|&=|\\.&=|⊻=|\\.⊻=|\\$=|<<=|>>=|>>>=|=(?!=))", name: "keyword.operator.update.julia" }, { match: "(?:<<|>>>|>>|\\.>>>|\\.>>|\\.<<)", name: "keyword.operator.shift.julia" }, { captures: { 1: { name: "keyword.operator.relation.types.julia" }, 2: { name: "support.type.julia" }, 3: { name: "keyword.operator.transpose.julia" } }, match: `(?:\\s*(::|>:|<:)\\s*((?:(?:Union)?\\([^)]*\\)|[[:alpha:]_$∇][[:word:]⁺-ₜ!′\\.]*(?:(?:{(?:[^{}]|{(?:[^{}]|{[^{}]*})*})*})|(?:".+?(?<!\\\\)"))?)))(?:\\.\\.\\.)?((?:\\.)?'*)` }, { match: "(\\.?((?<!<)<=|(?<!>)>=|>|<|≥|≤|===|==|≡|!=|≠|!==|≢|∈|∉|∋|∌|⊆|⊈|⊂|⊄|⊊|∝|∊|∍|∥|∦|∷|∺|∻|∽|∾|≁|≃|≂|≄|≅|≆|≇|≈|≉|≊|≋|≌|≍|≎|≐|≑|≒|≓|≖|≗|≘|≙|≚|≛|≜|≝|≞|≟|≣|≦|≧|≨|≩|≪|≫|≬|≭|≮|≯|≰|≱|≲|≳|≴|≵|≶|≷|≸|≹|≺|≻|≼|≽|≾|≿|⊀|⊁|⊃|⊅|⊇|⊉|⊋|⊏|⊐|⊑|⊒|⊜|⊩|⊬|⊮|⊰|⊱|⊲|⊳|⊴|⊵|⊶|⊷|⋍|⋐|⋑|⋕|⋖|⋗|⋘|⋙|⋚|⋛|⋜|⋝|⋞|⋟|⋠|⋡|⋢|⋣|⋤|⋥|⋦|⋧|⋨|⋩|⋪|⋫|⋬|⋭|⋲|⋳|⋴|⋵|⋶|⋷|⋸|⋹|⋺|⋻|⋼|⋽|⋾|⋿|⟈|⟉|⟒|⦷|⧀|⧁|⧡|⧣|⧤|⧥|⩦|⩧|⩪|⩫|⩬|⩭|⩮|⩯|⩰|⩱|⩲|⩳|⩵|⩶|⩷|⩸|⩹|⩺|⩻|⩼|⩽|⩾|⩿|⪀|⪁|⪂|⪃|⪄|⪅|⪆|⪇|⪈|⪉|⪊|⪋|⪌|⪍|⪎|⪏|⪐|⪑|⪒|⪓|⪔|⪕|⪖|⪗|⪘|⪙|⪚|⪛|⪜|⪝|⪞|⪟|⪠|⪡|⪢|⪣|⪤|⪥|⪦|⪧|⪨|⪩|⪪|⪫|⪬|⪭|⪮|⪯|⪰|⪱|⪲|⪳|⪴|⪵|⪶|⪷|⪸|⪹|⪺|⪻|⪼|⪽|⪾|⪿|⫀|⫁|⫂|⫃|⫄|⫅|⫆|⫇|⫈|⫉|⫊|⫋|⫌|⫍|⫎|⫏|⫐|⫑|⫒|⫓|⫔|⫕|⫖|⫗|⫘|⫙|⫷|⫸|⫹|⫺|⊢|⊣|⟂|⫪|⫫|<:|>:))", name: "keyword.operator.relation.julia" }, { match: "(?<=\\s)(?:\\?)(?=\\s)", name: "keyword.operator.ternary.julia" }, { match: "(?<=\\s)(?:\\:)(?=\\s)", name: "keyword.operator.ternary.julia" }, { match: "(?:\\|\\||&&|(?<!(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}-¡]|[^\\P{Mc}-¡]|[^\\P{Nd}-¡]|[^\\P{Pc}-¡]|[^\\P{Sk}-¡]|[^\\P{Me}-¡]|[^\\P{No}-¡]|[′-‷⁗]|[^\\P{So}←-⇿]))!)", name: "keyword.operator.boolean.julia" }, { match: "(?<=[[:word:]⁺-ₜ!′∇\\)\\]\\}])(?::)", name: "keyword.operator.range.julia" }, { match: "(?:\\|>)", name: "keyword.operator.applies.julia" }, { match: "(?:\\||\\.\\||\\&|\\.\\&|~|¬|\\.~|⊻|\\.⊻)", name: "keyword.operator.bitwise.julia" }, { match: "\\.?(?:\\+\\+|\\-\\-|\\+|\\-|−|¦|\\||⊕|⊖|⊞|⊟|∪|∨|⊔|±|∓|∔|∸|≏|⊎|⊻|⊽|⋎|⋓|⟇|⧺|⧻|⨈|⨢|⨣|⨤|⨥|⨦|⨧|⨨|⨩|⨪|⨫|⨬|⨭|⨮|⨹|⨺|⩁|⩂|⩅|⩊|⩌|⩏|⩐|⩒|⩔|⩖|⩗|⩛|⩝|⩡|⩢|⩣|\\*|//?|⌿|÷|%|&|·|·|⋅|∘|×|\\\\|∩|∧|⊗|⊘|⊙|⊚|⊛|⊠|⊡|⊓|∗|∙|∤|⅋|≀|⊼|⋄|⋆|⋇|⋉|⋊|⋋|⋌|⋏|⋒|⟑|⦸|⦼|⦾|⦿|⧶|⧷|⨇|⨰|⨱|⨲|⨳|⨴|⨵|⨶|⨷|⨸|⨻|⨼|⨽|⩀|⩃|⩄|⩋|⩍|⩎|⩑|⩓|⩕|⩘|⩚|⩜|⩞|⩟|⩠|⫛|⊍|▷|⨝|⟕|⟖|⟗|⨟|\\^|↑|↓|⇵|⟰|⟱|⤈|⤉|⤊|⤋|⤒|⤓|⥉|⥌|⥍|⥏|⥑|⥔|⥕|⥘|⥙|⥜|⥝|⥠|⥡|⥣|⥥|⥮|⥯|￪|￬|√|∛|∜|⋆|±|∓)", name: "keyword.operator.arithmetic.julia" }, { match: "(?:∘)", name: "keyword.operator.compose.julia" }, { match: "(?:::|(?<=\\s)isa(?=\\s))", name: "keyword.operator.isa.julia" }, { match: "(?:(?<=\\s)in(?=\\s))", name: "keyword.operator.relation.in.julia" }, { match: "(?:\\.(?=(?:@|_|\\p{L}))|\\.\\.+|…|⁝|⋮|⋱|⋰|⋯)", name: "keyword.operator.dots.julia" }, { match: "(?:\\$)(?=.+)", name: "keyword.operator.interpolation.julia" }, { captures: { 2: { name: "keyword.operator.transposed-variable.julia" } }, match: "((?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}-¡]|[^\\P{Mc}-¡]|[^\\P{Nd}-¡]|[^\\P{Pc}-¡]|[^\\P{Sk}-¡]|[^\\P{Me}-¡]|[^\\P{No}-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*)(('|(\\.'))*\\.?')" }, { captures: { 1: { name: "bracket.end.julia" }, 2: { name: "keyword.operator.transposed-matrix.julia" } }, match: "(\\])((?:'|(?:\\.'))*\\.?')" }, { captures: { 1: { name: "bracket.end.julia" }, 2: { name: "keyword.operator.transposed-parens.julia" } }, match: "(\\))((?:'|(?:\\.'))*\\.?')" }] }, parentheses: { patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "meta.bracket.julia" } }, end: "(\\))((?:\\.)?'*)", endCaptures: { 1: { name: "meta.bracket.julia" }, 2: { name: "keyword.operator.transpose.julia" } }, patterns: [{ include: "#self_no_for_block" }] }] }, punctuation: { patterns: [{ match: ",", name: "punctuation.separator.comma.julia" }, { match: ";", name: "punctuation.separator.semicolon.julia" }] }, self_no_for_block: { comment: "Same as $self, but does not contain #for_block. 'outer' is not valid in some contexts (e.g. generators, comprehensions, indexing), so use this when matching those in begin/end patterns. Keep this up-to-date with $self!", patterns: [{ include: "#operator" }, { include: "#array" }, { include: "#string" }, { include: "#parentheses" }, { include: "#bracket" }, { include: "#function_decl" }, { include: "#function_call" }, { include: "#keyword" }, { include: "#number" }, { include: "#comment" }, { include: "#type_decl" }, { include: "#symbol" }, { include: "#punctuation" }] }, string: { patterns: [{ begin: '(?:(@doc)\\s((?:doc)?""")|(doc"""))', beginCaptures: { 1: { name: "support.function.macro.julia" }, 2: { name: "punctuation.definition.string.begin.julia" } }, end: '(""") ?(->)?', endCaptures: { 1: { name: "punctuation.definition.string.end.julia" }, 2: { name: "keyword.operator.arrow.julia" } }, name: "string.docstring.julia", patterns: [{ include: "#string_escaped_char" }, { include: "#string_dollar_sign_interpolate" }] }, { begin: '(i?cxx)(""")', beginCaptures: { 1: { name: "support.function.macro.julia" }, 2: { name: "punctuation.definition.string.begin.julia" } }, contentName: "meta.embedded.inline.cpp", end: '"""', endCaptures: { 0: { name: "punctuation.definition.string.end.julia" } }, name: "embed.cxx.julia", patterns: [{ include: "source.cpp#root_context" }, { include: "#string_dollar_sign_interpolate" }] }, { begin: '(py)(""")', beginCaptures: { 1: { name: "support.function.macro.julia" }, 2: { name: "punctuation.definition.string.begin.julia" } }, contentName: "meta.embedded.inline.python", end: '([\\s\\w]*)(""")', endCaptures: { 2: { name: "punctuation.definition.string.end.julia" } }, name: "embed.python.julia", patterns: [{ include: "source.python" }, { include: "#string_dollar_sign_interpolate" }] }, { begin: '(js)(""")', beginCaptures: { 1: { name: "support.function.macro.julia" }, 2: { name: "punctuation.definition.string.begin.julia" } }, contentName: "meta.embedded.inline.javascript", end: '"""', endCaptures: { 0: { name: "punctuation.definition.string.end.julia" } }, name: "embed.js.julia", patterns: [{ include: "source.js" }, { include: "#string_dollar_sign_interpolate" }] }, { begin: '(R)(""")', beginCaptures: { 1: { name: "support.function.macro.julia" }, 2: { name: "punctuation.definition.string.begin.julia" } }, contentName: "meta.embedded.inline.r", end: '"""', endCaptures: { 0: { name: "punctuation.definition.string.end.julia" } }, name: "embed.R.julia", patterns: [{ include: "source.r" }, { include: "#string_dollar_sign_interpolate" }] }, { begin: '(raw)(""")', beginCaptures: { 1: { name: "support.function.macro.julia" }, 2: { name: "punctuation.definition.string.begin.julia" } }, end: '"""', endCaptures: { 0: { name: "punctuation.definition.string.end.julia" } }, name: "string.quoted.other.julia", patterns: [{ include: "#string_escaped_char" }] }, { begin: '(raw)(")', beginCaptures: { 1: { name: "support.function.macro.julia" }, 2: { name: "punctuation.definition.string.begin.julia" } }, end: '"', endCaptures: { 0: { name: "punctuation.definition.string.end.julia" } }, name: "string.quoted.other.julia", patterns: [{ include: "#string_escaped_char" }] }, { begin: '(sql)(""")', beginCaptures: { 1: { name: "support.function.macro.julia" }, 2: { name: "punctuation.definition.string.begin.julia" } }, contentName: "meta.embedded.inline.sql", end: '"""', endCaptures: { 0: { name: "punctuation.definition.string.end.julia" } }, name: "embed.sql.julia", patterns: [{ include: "source.sql" }, { include: "#string_dollar_sign_interpolate" }] }, { begin: 'var"""', end: '"""', name: "constant.other.symbol.julia", patterns: [{ include: "#string_escaped_char" }] }, { begin: 'var"', end: '"', name: "constant.other.symbol.julia", patterns: [{ include: "#string_escaped_char" }] }, { begin: '^\\s?(doc)?(""")\\s?$', beginCaptures: { 1: { name: "support.function.macro.julia" }, 2: { name: "punctuation.definition.string.begin.julia" } }, comment: `This only matches docstrings that start and end with triple quotes on
their own line in the void`, end: '(""")', endCaptures: { 1: { name: "punctuation.definition.string.end.julia" } }, name: "string.docstring.julia", patterns: [{ include: "#string_escaped_char" }, { include: "#string_dollar_sign_interpolate" }] }, { begin: "'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.julia" } }, end: "'(?!')", endCaptures: { 0: { name: "punctuation.definition.string.end.julia" } }, name: "string.quoted.single.julia", patterns: [{ include: "#string_escaped_char" }] }, { begin: '"""', beginCaptures: { 0: { name: "punctuation.definition.string.multiline.begin.julia" } }, comment: "multi-line string with triple double quotes", end: '"""', endCaptures: { 0: { name: "punctuation.definition.string.multiline.end.julia" } }, name: "string.quoted.triple.double.julia", patterns: [{ include: "#string_escaped_char" }, { include: "#string_dollar_sign_interpolate" }] }, { begin: '"(?!"")', beginCaptures: { 0: { name: "punctuation.definition.string.begin.julia" } }, comment: "String with single pair of double quotes. Regex matches isolated double quote", end: '"', endCaptures: { 0: { name: "punctuation.definition.string.end.julia" } }, name: "string.quoted.double.julia", patterns: [{ include: "#string_escaped_char" }, { include: "#string_dollar_sign_interpolate" }] }, { begin: 'r"""', beginCaptures: { 0: { name: "punctuation.definition.string.regexp.begin.julia" } }, end: '(""")([imsx]{0,4})?', endCaptures: { 1: { name: "punctuation.definition.string.regexp.end.julia" }, 2: { comment: "I took this scope name from python regex grammar", name: "keyword.other.option-toggle.regexp.julia" } }, name: "string.regexp.julia", patterns: [{ include: "#string_escaped_char" }] }, { begin: 'r"', beginCaptures: { 0: { name: "punctuation.definition.string.regexp.begin.julia" } }, end: '(")([imsx]{0,4})?', endCaptures: { 1: { name: "punctuation.definition.string.regexp.end.julia" }, 2: { comment: "I took this scope name from python regex grammar", name: "keyword.other.option-toggle.regexp.julia" } }, name: "string.regexp.julia", patterns: [{ include: "#string_escaped_char" }] }, { begin: '(?<!")((?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}-¡]|[^\\P{Mc}-¡]|[^\\P{Nd}-¡]|[^\\P{Pc}-¡]|[^\\P{Sk}-¡]|[^\\P{Me}-¡]|[^\\P{No}-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*)"""', beginCaptures: { 0: { name: "punctuation.definition.string.begin.julia" }, 1: { name: "support.function.macro.julia" } }, end: '(""")((?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}-¡]|[^\\P{Mc}-¡]|[^\\P{Nd}-¡]|[^\\P{Pc}-¡]|[^\\P{Sk}-¡]|[^\\P{Me}-¡]|[^\\P{No}-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*)?', endCaptures: { 1: { name: "punctuation.definition.string.end.julia" }, 2: { name: "support.function.macro.julia" } }, name: "string.quoted.other.julia", patterns: [{ include: "#string_escaped_char" }] }, { begin: '(?<!")((?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}-¡]|[^\\P{Mc}-¡]|[^\\P{Nd}-¡]|[^\\P{Pc}-¡]|[^\\P{Sk}-¡]|[^\\P{Me}-¡]|[^\\P{No}-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*)"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.julia" }, 1: { name: "support.function.macro.julia" } }, end: '(?<![^\\\\]\\\\)(")((?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}-¡]|[^\\P{Mc}-¡]|[^\\P{Nd}-¡]|[^\\P{Pc}-¡]|[^\\P{Sk}-¡]|[^\\P{Me}-¡]|[^\\P{No}-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*)?', endCaptures: { 1: { name: "punctuation.definition.string.end.julia" }, 2: { name: "support.function.macro.julia" } }, name: "string.quoted.other.julia", patterns: [{ include: "#string_escaped_char" }] }, { begin: "(?<!`)((?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}-¡]|[^\\P{Mc}-¡]|[^\\P{Nd}-¡]|[^\\P{Pc}-¡]|[^\\P{Sk}-¡]|[^\\P{Me}-¡]|[^\\P{No}-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*)?```", beginCaptures: { 0: { name: "punctuation.definition.string.begin.julia" }, 1: { name: "support.function.macro.julia" } }, end: "(```)((?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}-¡]|[^\\P{Mc}-¡]|[^\\P{Nd}-¡]|[^\\P{Pc}-¡]|[^\\P{Sk}-¡]|[^\\P{Me}-¡]|[^\\P{No}-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*)?", endCaptures: { 1: { name: "punctuation.definition.string.end.julia" }, 2: { name: "support.function.macro.julia" } }, name: "string.interpolated.backtick.julia", patterns: [{ include: "#string_escaped_char" }, { include: "#string_dollar_sign_interpolate" }] }, { begin: "(?<!`)((?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}-¡]|[^\\P{Mc}-¡]|[^\\P{Nd}-¡]|[^\\P{Pc}-¡]|[^\\P{Sk}-¡]|[^\\P{Me}-¡]|[^\\P{No}-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*)?`", beginCaptures: { 0: { name: "punctuation.definition.string.begin.julia" }, 1: { name: "support.function.macro.julia" } }, end: "(?<![^\\\\]\\\\)(`)((?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}-¡]|[^\\P{Mc}-¡]|[^\\P{Nd}-¡]|[^\\P{Pc}-¡]|[^\\P{Sk}-¡]|[^\\P{Me}-¡]|[^\\P{No}-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*)?", endCaptures: { 1: { name: "punctuation.definition.string.end.julia" }, 2: { name: "support.function.macro.julia" } }, name: "string.interpolated.backtick.julia", patterns: [{ include: "#string_escaped_char" }, { include: "#string_dollar_sign_interpolate" }] }] }, string_dollar_sign_interpolate: { patterns: [{ match: "\\$(?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿]|[^\\p{^Sc}$])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}-¡]|[^\\P{Mc}-¡]|[^\\P{Nd}-¡]|[^\\P{Pc}-¡]|[^\\P{Sk}-¡]|[^\\P{Me}-¡]|[^\\P{No}-¡]|[′-‷⁗]|[^\\P{So}←-⇿]|[^\\p{^Sc}$])*", name: "variable.interpolation.julia" }, { begin: "\\$(\\()", beginCaptures: { 1: { name: "meta.bracket.julia" } }, comment: "`punctuation.section.embedded`, `constant.escape`,\n& `meta.embedded.line` were considered but appear to have even spottier\nsupport among popular syntaxes.", end: "\\)", endCaptures: { 0: { name: "meta.bracket.julia" } }, name: "variable.interpolation.julia", patterns: [{ include: "#self_no_for_block" }] }] }, string_escaped_char: { patterns: [{ match: "\\\\(\\\\|[0-3]\\d{,2}|[4-7]\\d?|x[a-fA-F0-9]{,2}|u[a-fA-F0-9]{,4}|U[a-fA-F0-9]{,8}|.)", name: "constant.character.escape.julia" }] }, symbol: { patterns: [{ comment: "This is string.quoted.symbol.julia in tpoisot's package", match: '(?<![[:word:]⁺-ₜ!′∇\\)\\]\\}]):(?:(?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}-¡]|[^\\P{Mc}-¡]|[^\\P{Nd}-¡]|[^\\P{Pc}-¡]|[^\\P{Sk}-¡]|[^\\P{Me}-¡]|[^\\P{No}-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*)(?!(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}-¡]|[^\\P{Mc}-¡]|[^\\P{Nd}-¡]|[^\\P{Pc}-¡]|[^\\P{Sk}-¡]|[^\\P{Me}-¡]|[^\\P{No}-¡]|[′-‷⁗]|[^\\P{So}←-⇿]))(?!["`])', name: "constant.other.symbol.julia" }] }, type_decl: { patterns: [{ captures: { 1: { name: "entity.name.type.julia" }, 2: { name: "entity.other.inherited-class.julia" }, 3: { name: "punctuation.separator.inheritance.julia" } }, match: "(?>!:_)(?:struct|mutable\\s+struct|abstract\\s+type|primitive\\s+type)\\s+((?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}-¡]|[^\\P{Mc}-¡]|[^\\P{Nd}-¡]|[^\\P{Pc}-¡]|[^\\P{Sk}-¡]|[^\\P{Me}-¡]|[^\\P{No}-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*)(\\s*(<:)\\s*(?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}-¡]|[^\\P{Mc}-¡]|[^\\P{Nd}-¡]|[^\\P{Pc}-¡]|[^\\P{Sk}-¡]|[^\\P{Me}-¡]|[^\\P{No}-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*(?:{.*})?)?", name: "meta.type.julia" }] } }, scopeName: "source.julia", embeddedLangs: ["cpp", "python", "javascript", "r", "sql"], aliases: ["jl"] });
var nn = [
  ...k,
  ...f,
  ...e,
  ...z,
  ...a,
  en
];
const tn = Object.freeze({ displayName: "Rust", name: "rust", patterns: [{ begin: "(<)(\\[)", beginCaptures: { 1: { name: "punctuation.brackets.angle.rust" }, 2: { name: "punctuation.brackets.square.rust" } }, comment: "boxed slice literal", end: ">", endCaptures: { 0: { name: "punctuation.brackets.angle.rust" } }, patterns: [{ include: "#block-comments" }, { include: "#comments" }, { include: "#gtypes" }, { include: "#lvariables" }, { include: "#lifetimes" }, { include: "#punctuation" }, { include: "#types" }] }, { captures: { 1: { name: "keyword.operator.macro.dollar.rust" }, 3: { name: "keyword.other.crate.rust" }, 4: { name: "entity.name.type.metavariable.rust" }, 6: { name: "keyword.operator.key-value.rust" }, 7: { name: "variable.other.metavariable.specifier.rust" } }, comment: "macro type metavariables", match: "(\\$)((crate)|([A-Z][A-Za-z0-9_]*))((:)(block|expr|ident|item|lifetime|literal|meta|path?|stmt|tt|ty|vis))?", name: "meta.macro.metavariable.type.rust", patterns: [{ include: "#keywords" }] }, { captures: { 1: { name: "keyword.operator.macro.dollar.rust" }, 2: { name: "variable.other.metavariable.name.rust" }, 4: { name: "keyword.operator.key-value.rust" }, 5: { name: "variable.other.metavariable.specifier.rust" } }, comment: "macro metavariables", match: "(\\$)([a-z][A-Za-z0-9_]*)((:)(block|expr|ident|item|lifetime|literal|meta|path?|stmt|tt|ty|vis))?", name: "meta.macro.metavariable.rust", patterns: [{ include: "#keywords" }] }, { captures: { 1: { name: "entity.name.function.macro.rules.rust" }, 3: { name: "entity.name.function.macro.rust" }, 4: { name: "entity.name.type.macro.rust" }, 5: { name: "punctuation.brackets.curly.rust" } }, comment: "macro rules", match: "\\b(macro_rules!)\\s+(([a-z0-9_]+)|([A-Z][a-z0-9_]*))\\s+(\\{)", name: "meta.macro.rules.rust" }, { captures: { 1: { name: "storage.type.rust" }, 2: { name: "entity.name.module.rust" } }, comment: "modules", match: "(mod)\\s+((?:r#(?!crate|[Ss]elf|super))?[a-z][A-Za-z0-9_]*)" }, { begin: "\\b(extern)\\s+(crate)", beginCaptures: { 1: { name: "storage.type.rust" }, 2: { name: "keyword.other.crate.rust" } }, comment: "external crate imports", end: ";", endCaptures: { 0: { name: "punctuation.semi.rust" } }, name: "meta.import.rust", patterns: [{ include: "#block-comments" }, { include: "#comments" }, { include: "#keywords" }, { include: "#punctuation" }] }, { begin: "\\b(use)\\s", beginCaptures: { 1: { name: "keyword.other.rust" } }, comment: "use statements", end: ";", endCaptures: { 0: { name: "punctuation.semi.rust" } }, name: "meta.use.rust", patterns: [{ include: "#block-comments" }, { include: "#comments" }, { include: "#keywords" }, { include: "#namespaces" }, { include: "#punctuation" }, { include: "#types" }, { include: "#lvariables" }] }, { include: "#block-comments" }, { include: "#comments" }, { include: "#attributes" }, { include: "#lvariables" }, { include: "#constants" }, { include: "#gtypes" }, { include: "#functions" }, { include: "#types" }, { include: "#keywords" }, { include: "#lifetimes" }, { include: "#macros" }, { include: "#namespaces" }, { include: "#punctuation" }, { include: "#strings" }, { include: "#variables" }], repository: { attributes: { begin: "(#)(\\!?)(\\[)", beginCaptures: { 1: { name: "punctuation.definition.attribute.rust" }, 3: { name: "punctuation.brackets.attribute.rust" } }, comment: "attributes", end: "\\]", endCaptures: { 0: { name: "punctuation.brackets.attribute.rust" } }, name: "meta.attribute.rust", patterns: [{ include: "#block-comments" }, { include: "#comments" }, { include: "#keywords" }, { include: "#lifetimes" }, { include: "#punctuation" }, { include: "#strings" }, { include: "#gtypes" }, { include: "#types" }] }, "block-comments": { patterns: [{ comment: "empty block comments", match: "/\\*\\*/", name: "comment.block.rust" }, { begin: "/\\*\\*", comment: "block documentation comments", end: "\\*/", name: "comment.block.documentation.rust", patterns: [{ include: "#block-comments" }] }, { begin: "/\\*(?!\\*)", comment: "block comments", end: "\\*/", name: "comment.block.rust", patterns: [{ include: "#block-comments" }] }] }, comments: { patterns: [{ captures: { 1: { name: "punctuation.definition.comment.rust" } }, comment: "documentation comments", match: "(///).*$", name: "comment.line.documentation.rust" }, { captures: { 1: { name: "punctuation.definition.comment.rust" } }, comment: "line comments", match: "(//).*$", name: "comment.line.double-slash.rust" }] }, constants: { patterns: [{ comment: "ALL CAPS constants", match: "\\b[A-Z]{2}[A-Z0-9_]*\\b", name: "constant.other.caps.rust" }, { captures: { 1: { name: "storage.type.rust" }, 2: { name: "constant.other.caps.rust" } }, comment: "constant declarations", match: "\\b(const)\\s+([A-Z][A-Za-z0-9_]*)\\b" }, { captures: { 1: { name: "punctuation.separator.dot.decimal.rust" }, 2: { name: "keyword.operator.exponent.rust" }, 3: { name: "keyword.operator.exponent.sign.rust" }, 4: { name: "constant.numeric.decimal.exponent.mantissa.rust" }, 5: { name: "entity.name.type.numeric.rust" } }, comment: "decimal integers and floats", match: "\\b\\d[\\d_]*(\\.?)[\\d_]*(?:(E|e)([+-]?)([\\d_]+))?(f32|f64|i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\b", name: "constant.numeric.decimal.rust" }, { captures: { 1: { name: "entity.name.type.numeric.rust" } }, comment: "hexadecimal integers", match: "\\b0x[\\da-fA-F_]+(i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\b", name: "constant.numeric.hex.rust" }, { captures: { 1: { name: "entity.name.type.numeric.rust" } }, comment: "octal integers", match: "\\b0o[0-7_]+(i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\b", name: "constant.numeric.oct.rust" }, { captures: { 1: { name: "entity.name.type.numeric.rust" } }, comment: "binary integers", match: "\\b0b[01_]+(i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\b", name: "constant.numeric.bin.rust" }, { comment: "booleans", match: "\\b(true|false)\\b", name: "constant.language.bool.rust" }] }, escapes: { captures: { 1: { name: "constant.character.escape.backslash.rust" }, 2: { name: "constant.character.escape.bit.rust" }, 3: { name: "constant.character.escape.unicode.rust" }, 4: { name: "constant.character.escape.unicode.punctuation.rust" }, 5: { name: "constant.character.escape.unicode.punctuation.rust" } }, comment: "escapes: ASCII, byte, Unicode, quote, regex", match: "(\\\\)(?:(?:(x[0-7][\\da-fA-F])|(u(\\{)[\\da-fA-F]{4,6}(\\}))|.))", name: "constant.character.escape.rust" }, functions: { patterns: [{ captures: { 1: { name: "keyword.other.rust" }, 2: { name: "punctuation.brackets.round.rust" } }, comment: "pub as a function", match: "\\b(pub)(\\()" }, { begin: "\\b(fn)\\s+((?:r#(?!crate|[Ss]elf|super))?[A-Za-z0-9_]+)((\\()|(<))", beginCaptures: { 1: { name: "keyword.other.fn.rust" }, 2: { name: "entity.name.function.rust" }, 4: { name: "punctuation.brackets.round.rust" }, 5: { name: "punctuation.brackets.angle.rust" } }, comment: "function definition", end: "\\{|;", endCaptures: { 0: { name: "punctuation.brackets.curly.rust" } }, name: "meta.function.definition.rust", patterns: [{ include: "#block-comments" }, { include: "#comments" }, { include: "#keywords" }, { include: "#lvariables" }, { include: "#constants" }, { include: "#gtypes" }, { include: "#functions" }, { include: "#lifetimes" }, { include: "#macros" }, { include: "#namespaces" }, { include: "#punctuation" }, { include: "#strings" }, { include: "#types" }, { include: "#variables" }] }, { begin: "((?:r#(?!crate|[Ss]elf|super))?[A-Za-z0-9_]+)(\\()", beginCaptures: { 1: { name: "entity.name.function.rust" }, 2: { name: "punctuation.brackets.round.rust" } }, comment: "function/method calls, chaining", end: "\\)", endCaptures: { 0: { name: "punctuation.brackets.round.rust" } }, name: "meta.function.call.rust", patterns: [{ include: "#block-comments" }, { include: "#comments" }, { include: "#attributes" }, { include: "#keywords" }, { include: "#lvariables" }, { include: "#constants" }, { include: "#gtypes" }, { include: "#functions" }, { include: "#lifetimes" }, { include: "#macros" }, { include: "#namespaces" }, { include: "#punctuation" }, { include: "#strings" }, { include: "#types" }, { include: "#variables" }] }, { begin: "((?:r#(?!crate|[Ss]elf|super))?[A-Za-z0-9_]+)(?=::<.*>\\()", beginCaptures: { 1: { name: "entity.name.function.rust" } }, comment: "function/method calls with turbofish", end: "\\)", endCaptures: { 0: { name: "punctuation.brackets.round.rust" } }, name: "meta.function.call.rust", patterns: [{ include: "#block-comments" }, { include: "#comments" }, { include: "#attributes" }, { include: "#keywords" }, { include: "#lvariables" }, { include: "#constants" }, { include: "#gtypes" }, { include: "#functions" }, { include: "#lifetimes" }, { include: "#macros" }, { include: "#namespaces" }, { include: "#punctuation" }, { include: "#strings" }, { include: "#types" }, { include: "#variables" }] }] }, gtypes: { patterns: [{ comment: "option types", match: "\\b(Some|None)\\b", name: "entity.name.type.option.rust" }, { comment: "result types", match: "\\b(Ok|Err)\\b", name: "entity.name.type.result.rust" }] }, interpolations: { captures: { 1: { name: "punctuation.definition.interpolation.rust" }, 2: { name: "punctuation.definition.interpolation.rust" } }, comment: "curly brace interpolations", match: '({)[^"{}]*(})', name: "meta.interpolation.rust" }, keywords: { patterns: [{ comment: "control flow keywords", match: "\\b(await|break|continue|do|else|for|if|loop|match|return|try|while|yield)\\b", name: "keyword.control.rust" }, { comment: "storage keywords", match: "\\b(extern|let|macro|mod)\\b", name: "keyword.other.rust storage.type.rust" }, { comment: "const keyword", match: "\\b(const)\\b", name: "storage.modifier.rust" }, { comment: "type keyword", match: "\\b(type)\\b", name: "keyword.declaration.type.rust storage.type.rust" }, { comment: "enum keyword", match: "\\b(enum)\\b", name: "keyword.declaration.enum.rust storage.type.rust" }, { comment: "trait keyword", match: "\\b(trait)\\b", name: "keyword.declaration.trait.rust storage.type.rust" }, { comment: "struct keyword", match: "\\b(struct)\\b", name: "keyword.declaration.struct.rust storage.type.rust" }, { comment: "storage modifiers", match: "\\b(abstract|static)\\b", name: "storage.modifier.rust" }, { comment: "other keywords", match: "\\b(as|async|become|box|dyn|move|final|gen|impl|in|override|priv|pub|ref|typeof|union|unsafe|unsized|use|virtual|where)\\b", name: "keyword.other.rust" }, { comment: "fn", match: "\\bfn\\b", name: "keyword.other.fn.rust" }, { comment: "crate", match: "\\bcrate\\b", name: "keyword.other.crate.rust" }, { comment: "mut", match: "\\bmut\\b", name: "storage.modifier.mut.rust" }, { comment: "logical operators", match: "(\\^|\\||\\|\\||&&|<<|>>|!)(?!=)", name: "keyword.operator.logical.rust" }, { comment: "logical AND, borrow references", match: "&(?![&=])", name: "keyword.operator.borrow.and.rust" }, { comment: "assignment operators", match: "(\\+=|-=|\\*=|/=|%=|\\^=|&=|\\|=|<<=|>>=)", name: "keyword.operator.assignment.rust" }, { comment: "single equal", match: "(?<![<>])=(?!=|>)", name: "keyword.operator.assignment.equal.rust" }, { comment: "comparison operators", match: "(=(=)?(?!>)|!=|<=|(?<!=)>=)", name: "keyword.operator.comparison.rust" }, { comment: "math operators", match: "(([+%]|(\\*(?!\\w)))(?!=))|(-(?!>))|(/(?!/))", name: "keyword.operator.math.rust" }, { captures: { 1: { name: "punctuation.brackets.round.rust" }, 2: { name: "punctuation.brackets.square.rust" }, 3: { name: "punctuation.brackets.curly.rust" }, 4: { name: "keyword.operator.comparison.rust" }, 5: { name: "punctuation.brackets.round.rust" }, 6: { name: "punctuation.brackets.square.rust" }, 7: { name: "punctuation.brackets.curly.rust" } }, comment: "less than, greater than (special case)", match: "(?:\\b|(?:(\\))|(\\])|(\\})))[ \\t]+([<>])[ \\t]+(?:\\b|(?:(\\()|(\\[)|(\\{)))" }, { comment: "namespace operator", match: "::", name: "keyword.operator.namespace.rust" }, { captures: { 1: { name: "keyword.operator.dereference.rust" } }, comment: "dereference asterisk", match: "(\\*)(?=\\w+)" }, { comment: "subpattern binding", match: "@", name: "keyword.operator.subpattern.rust" }, { comment: "dot access", match: "\\.(?!\\.)", name: "keyword.operator.access.dot.rust" }, { comment: "ranges, range patterns", match: "\\.{2}(=|\\.)?", name: "keyword.operator.range.rust" }, { comment: "colon", match: ":(?!:)", name: "keyword.operator.key-value.rust" }, { comment: "dashrocket, skinny arrow", match: "->", name: "keyword.operator.arrow.skinny.rust" }, { comment: "hashrocket, fat arrow", match: "=>", name: "keyword.operator.arrow.fat.rust" }, { comment: "dollar macros", match: "\\$", name: "keyword.operator.macro.dollar.rust" }, { comment: "question mark operator, questionably sized, macro kleene matcher", match: "\\?", name: "keyword.operator.question.rust" }] }, lifetimes: { patterns: [{ captures: { 1: { name: "punctuation.definition.lifetime.rust" }, 2: { name: "entity.name.type.lifetime.rust" } }, comment: "named lifetime parameters", match: "(['])([a-zA-Z_][0-9a-zA-Z_]*)(?!['])\\b" }, { captures: { 1: { name: "keyword.operator.borrow.rust" }, 2: { name: "punctuation.definition.lifetime.rust" }, 3: { name: "entity.name.type.lifetime.rust" } }, comment: "borrowing references to named lifetimes", match: "(\\&)(['])([a-zA-Z_][0-9a-zA-Z_]*)(?!['])\\b" }] }, lvariables: { patterns: [{ comment: "self", match: "\\b[Ss]elf\\b", name: "variable.language.self.rust" }, { comment: "super", match: "\\bsuper\\b", name: "variable.language.super.rust" }] }, macros: { patterns: [{ captures: { 2: { name: "entity.name.function.macro.rust" }, 3: { name: "entity.name.type.macro.rust" } }, comment: "macros", match: "(([a-z_][A-Za-z0-9_]*!)|([A-Z_][A-Za-z0-9_]*!))", name: "meta.macro.rust" }] }, namespaces: { patterns: [{ captures: { 1: { name: "entity.name.namespace.rust" }, 2: { name: "keyword.operator.namespace.rust" } }, comment: "namespace (non-type, non-function path segment)", match: "(?<![A-Za-z0-9_])([A-Za-z0-9_]+)((?<!super|self)::)" }] }, punctuation: { patterns: [{ comment: "comma", match: ",", name: "punctuation.comma.rust" }, { comment: "curly braces", match: "[{}]", name: "punctuation.brackets.curly.rust" }, { comment: "parentheses, round brackets", match: "[()]", name: "punctuation.brackets.round.rust" }, { comment: "semicolon", match: ";", name: "punctuation.semi.rust" }, { comment: "square brackets", match: "[\\[\\]]", name: "punctuation.brackets.square.rust" }, { comment: "angle brackets", match: "(?<!=)[<>]", name: "punctuation.brackets.angle.rust" }] }, strings: { patterns: [{ begin: '(b?)(")', beginCaptures: { 1: { name: "string.quoted.byte.raw.rust" }, 2: { name: "punctuation.definition.string.rust" } }, comment: "double-quoted strings and byte strings", end: '"', endCaptures: { 0: { name: "punctuation.definition.string.rust" } }, name: "string.quoted.double.rust", patterns: [{ include: "#escapes" }, { include: "#interpolations" }] }, { begin: '(b?r)(#*)(")', beginCaptures: { 1: { name: "string.quoted.byte.raw.rust" }, 2: { name: "punctuation.definition.string.raw.rust" }, 3: { name: "punctuation.definition.string.rust" } }, comment: "double-quoted raw strings and raw byte strings", end: '(")(\\2)', endCaptures: { 1: { name: "punctuation.definition.string.rust" }, 2: { name: "punctuation.definition.string.raw.rust" } }, name: "string.quoted.double.rust" }, { begin: "(b)?(')", beginCaptures: { 1: { name: "string.quoted.byte.raw.rust" }, 2: { name: "punctuation.definition.char.rust" } }, comment: "characters and bytes", end: "'", endCaptures: { 0: { name: "punctuation.definition.char.rust" } }, name: "string.quoted.single.char.rust", patterns: [{ include: "#escapes" }] }] }, types: { patterns: [{ captures: { 1: { name: "entity.name.type.numeric.rust" } }, comment: "numeric types", match: "(?<![A-Za-z])(f32|f64|i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)\\b" }, { begin: "\\b(_?[A-Z][A-Za-z0-9_]*)(<)", beginCaptures: { 1: { name: "entity.name.type.rust" }, 2: { name: "punctuation.brackets.angle.rust" } }, comment: "parameterized types", end: ">", endCaptures: { 0: { name: "punctuation.brackets.angle.rust" } }, patterns: [{ include: "#block-comments" }, { include: "#comments" }, { include: "#keywords" }, { include: "#lvariables" }, { include: "#lifetimes" }, { include: "#punctuation" }, { include: "#types" }, { include: "#variables" }] }, { comment: "primitive types", match: "\\b(bool|char|str)\\b", name: "entity.name.type.primitive.rust" }, { captures: { 1: { name: "keyword.declaration.trait.rust storage.type.rust" }, 2: { name: "entity.name.type.trait.rust" } }, comment: "trait declarations", match: "\\b(trait)\\s+(_?[A-Z][A-Za-z0-9_]*)\\b" }, { captures: { 1: { name: "keyword.declaration.struct.rust storage.type.rust" }, 2: { name: "entity.name.type.struct.rust" } }, comment: "struct declarations", match: "\\b(struct)\\s+(_?[A-Z][A-Za-z0-9_]*)\\b" }, { captures: { 1: { name: "keyword.declaration.enum.rust storage.type.rust" }, 2: { name: "entity.name.type.enum.rust" } }, comment: "enum declarations", match: "\\b(enum)\\s+(_?[A-Z][A-Za-z0-9_]*)\\b" }, { captures: { 1: { name: "keyword.declaration.type.rust storage.type.rust" }, 2: { name: "entity.name.type.declaration.rust" } }, comment: "type declarations", match: "\\b(type)\\s+(_?[A-Z][A-Za-z0-9_]*)\\b" }, { comment: "types", match: "\\b_?[A-Z][A-Za-z0-9_]*\\b(?!!)", name: "entity.name.type.rust" }] }, variables: { patterns: [{ comment: "variables", match: "\\b(?<!(?<!\\.)\\.)(?:r#(?!(crate|[Ss]elf|super)))?[a-z0-9_]+\\b", name: "variable.other.rust" }] } }, scopeName: "source.rust", aliases: ["rs"] });
var S = [
  tn
];
const an = Object.freeze({ displayName: "Scala", fileTypes: ["scala"], firstLineMatch: "^#!/.*\\b\\w*scala\\b", foldingStartMarker: "/\\*\\*|\\{\\s*$", foldingStopMarker: "\\*\\*/|^\\s*\\}", name: "scala", patterns: [{ include: "#code" }], repository: { backQuotedVariable: { match: "`[^`]+`" }, "block-comments": { patterns: [{ captures: { 0: { name: "punctuation.definition.comment.scala" } }, match: "/\\*\\*/", name: "comment.block.empty.scala" }, { begin: "^\\s*(/\\*\\*)(?!/)", beginCaptures: { 1: { name: "punctuation.definition.comment.scala" } }, end: "\\*/", endCaptures: { 0: { name: "punctuation.definition.comment.scala" } }, name: "comment.block.documentation.scala", patterns: [{ captures: { 1: { name: "keyword.other.documentation.scaladoc.scala" }, 2: { name: "variable.parameter.scala" } }, match: "(@param)\\s+(\\S+)" }, { captures: { 1: { name: "keyword.other.documentation.scaladoc.scala" }, 2: { name: "entity.name.class" } }, match: "(@(?:tparam|throws))\\s+(\\S+)" }, { match: "@(return|see|note|example|constructor|usecase|author|version|since|todo|deprecated|migration|define|inheritdoc)\\b", name: "keyword.other.documentation.scaladoc.scala" }, { captures: { 1: { name: "punctuation.definition.documentation.link.scala" }, 2: { name: "string.other.link.title.markdown" }, 3: { name: "punctuation.definition.documentation.link.scala" } }, match: "(\\[\\[)([^\\]]+)(\\]\\])" }, { include: "#block-comments" }] }, { begin: "/\\*", captures: { 0: { name: "punctuation.definition.comment.scala" } }, end: "\\*/", name: "comment.block.scala", patterns: [{ include: "#block-comments" }] }] }, "char-literal": { patterns: [{ captures: { 1: { name: "punctuation.definition.character.begin.scala" }, 2: { name: "punctuation.definition.character.end.scala" } }, match: "(')'(')", name: "string.quoted.other constant.character.literal.scala" }, { begin: "'", beginCaptures: { 0: { name: "punctuation.definition.character.begin.scala" } }, end: "'|$", endCaptures: { 0: { name: "punctuation.definition.character.end.scala" } }, name: "string.quoted.other constant.character.literal.scala", patterns: [{ match: `\\\\(?:[btnfr\\\\"']|[0-7]{1,3}|u[0-9A-Fa-f]{4})`, name: "constant.character.escape.scala" }, { match: "\\\\.", name: "invalid.illegal.unrecognized-character-escape.scala" }, { match: "[^']{2,}", name: "invalid.illegal.character-literal-too-long" }, { match: "(?<!')[^']", name: "invalid.illegal.character-literal-too-long" }] }] }, code: { patterns: [{ include: "#using-directive" }, { include: "#script-header" }, { include: "#storage-modifiers" }, { include: "#declarations" }, { include: "#inheritance" }, { include: "#extension" }, { include: "#imports" }, { include: "#exports" }, { include: "#comments" }, { include: "#strings" }, { include: "#initialization" }, { include: "#xml-literal" }, { include: "#keywords" }, { include: "#using" }, { include: "#constants" }, { include: "#singleton-type" }, { include: "#inline" }, { include: "#scala-quoted-or-symbol" }, { include: "#char-literal" }, { include: "#empty-parentheses" }, { include: "#parameter-list" }, { include: "#qualifiedClassName" }, { include: "#backQuotedVariable" }, { include: "#curly-braces" }, { include: "#meta-brackets" }, { include: "#meta-bounds" }, { include: "#meta-colons" }] }, comments: { patterns: [{ include: "#block-comments" }, { begin: "(^[ \\t]+)?(?=//)", beginCaptures: { 1: { name: "punctuation.whitespace.comment.leading.scala" } }, end: "(?!\\G)", patterns: [{ begin: "//", beginCaptures: { 0: { name: "punctuation.definition.comment.scala" } }, end: "\\n", name: "comment.line.double-slash.scala" }] }] }, constants: { patterns: [{ match: "\\b(false|null|true)\\b", name: "constant.language.scala" }, { match: "\\b(0[xX][0-9a-fA-F_]*)\\b", name: "constant.numeric.scala" }, { match: "\\b(([0-9][0-9_]*(\\.[0-9][0-9_]*)?)([eE](\\+|-)?[0-9][0-9_]*)?|[0-9][0-9_]*)[LlFfDd]?\\b", name: "constant.numeric.scala" }, { match: "(\\.[0-9][0-9_]*)([eE](\\+|-)?[0-9][0-9_]*)?[LlFfDd]?\\b", name: "constant.numeric.scala" }, { match: "\\b0[bB][01]([01_]*[01])?[Ll]?\\b", name: "constant.numeric.scala" }, { match: "\\b(this|super)\\b", name: "variable.language.scala" }] }, "curly-braces": { begin: "\\{", beginCaptures: { 0: { name: "punctuation.section.block.begin.scala" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.section.block.end.scala" } }, patterns: [{ include: "#code" }] }, declarations: { patterns: [{ captures: { 1: { name: "keyword.declaration.scala" }, 2: { name: "entity.name.function.declaration" } }, match: "\\b(def)\\b\\s*(?!//|/\\*)((?:(?:[A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?|[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)|`[^`]+`))?" }, { captures: { 1: { name: "keyword.declaration.scala" }, 2: { name: "entity.name.class.declaration" } }, match: "\\b(trait)\\b\\s*(?!//|/\\*)((?:(?:[A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?|[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)|`[^`]+`))?" }, { captures: { 1: { name: "keyword.declaration.scala" }, 2: { name: "keyword.declaration.scala" }, 3: { name: "entity.name.class.declaration" } }, match: "\\b(?:(case)\\s+)?(class|object|enum)\\b\\s*(?!//|/\\*)((?:(?:[A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?|[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)|`[^`]+`))?" }, { captures: { 1: { name: "keyword.declaration.scala" }, 2: { name: "entity.name.type.declaration" } }, match: "(?<!\\.)\\b(type)\\b\\s*(?!//|/\\*)((?:(?:[A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?|[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)|`[^`]+`))?" }, { captures: { 1: { name: "keyword.declaration.stable.scala" }, 2: { name: "keyword.declaration.volatile.scala" } }, match: "\\b(?:(val)|(var))\\b\\s*(?!//|/\\*)(?=(?:(?:[A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?|[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)|`[^`]+`)?\\()" }, { captures: { 1: { name: "keyword.declaration.stable.scala" }, 2: { name: "variable.stable.declaration.scala" } }, match: '\\b(val)\\b\\s*(?!//|/\\*)((?:(?:[A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?|[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)|`[^`]+`)(?:\\s*,\\s*(?:(?:[A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?|[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)|`[^`]+`))*)?(?!")' }, { captures: { 1: { name: "keyword.declaration.volatile.scala" }, 2: { name: "variable.volatile.declaration.scala" } }, match: '\\b(var)\\b\\s*(?!//|/\\*)((?:(?:[A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?|[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)|`[^`]+`)(?:\\s*,\\s*(?:(?:[A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?|[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)|`[^`]+`))*)?(?!")' }, { captures: { 1: { name: "keyword.other.package.scala" }, 2: { name: "keyword.declaration.scala" }, 3: { name: "entity.name.class.declaration" } }, match: "\\b(package)\\s+(object)\\b\\s*(?!//|/\\*)((?:(?:[A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?|[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)|`[^`]+`))?" }, { begin: "\\b(package)\\s+", beginCaptures: { 1: { name: "keyword.other.package.scala" } }, end: "(?<=[\\n;])", name: "meta.package.scala", patterns: [{ include: "#comments" }, { match: "(`[^`]+`|(?:[A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?|[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+))", name: "entity.name.package.scala" }, { match: "\\.", name: "punctuation.definition.package" }] }, { captures: { 1: { name: "keyword.declaration.scala" }, 2: { name: "entity.name.given.declaration" } }, match: "\\b(given)\\b\\s*([_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?|`[^`]+`)?" }] }, "empty-parentheses": { captures: { 1: { name: "meta.bracket.scala" } }, match: "(\\(\\))", name: "meta.parentheses.scala" }, exports: { begin: "\\b(export)\\s+", beginCaptures: { 1: { name: "keyword.other.export.scala" } }, end: "(?<=[\\n;])", name: "meta.export.scala", patterns: [{ include: "#comments" }, { match: "\\b(given)\\b", name: "keyword.other.export.given.scala" }, { match: "[A-Z\\p{Lt}\\p{Lu}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?", name: "entity.name.class.export.scala" }, { match: "(`[^`]+`|(?:[A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?|[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+))", name: "entity.name.export.scala" }, { match: "\\.", name: "punctuation.definition.export" }, { begin: "{", beginCaptures: { 0: { name: "meta.bracket.scala" } }, end: "}", endCaptures: { 0: { name: "meta.bracket.scala" } }, name: "meta.export.selector.scala", patterns: [{ captures: { 1: { name: "keyword.other.export.given.scala" }, 2: { name: "entity.name.class.export.renamed-from.scala" }, 3: { name: "entity.name.export.renamed-from.scala" }, 4: { name: "keyword.other.arrow.scala" }, 5: { name: "entity.name.class.export.renamed-to.scala" }, 6: { name: "entity.name.export.renamed-to.scala" } }, match: "(?x)(given\\s)?\\s*(?:([A-Z\\p{Lt}\\p{Lu}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?)|(`[^`]+`|(?:[A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?|[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)))\\s*(=>)\\s*(?:([A-Z\\p{Lt}\\p{Lu}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?)|(`[^`]+`|(?:[A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?|[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)))\\s*" }, { match: "\\b(given)\\b", name: "keyword.other.export.given.scala" }, { captures: { 1: { name: "keyword.other.export.given.scala" }, 2: { name: "entity.name.class.export.scala" }, 3: { name: "entity.name.export.scala" } }, match: "(given\\s+)?(?:([A-Z\\p{Lt}\\p{Lu}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?)|(`[^`]+`|(?:[A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?|[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)))" }] }] }, extension: { patterns: [{ captures: { 1: { name: "keyword.declaration.scala" } }, match: "^\\s*(extension)\\s+(?=[\\[\\(])" }] }, imports: { begin: "\\b(import)\\s+", beginCaptures: { 1: { name: "keyword.other.import.scala" } }, end: "(?<=[\\n;])", name: "meta.import.scala", patterns: [{ include: "#comments" }, { match: "\\b(given)\\b", name: "keyword.other.import.given.scala" }, { match: "\\s(as)\\s", name: "keyword.other.import.as.scala" }, { match: "[A-Z\\p{Lt}\\p{Lu}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?", name: "entity.name.class.import.scala" }, { match: "(`[^`]+`|(?:[A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?|[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+))", name: "entity.name.import.scala" }, { match: "\\.", name: "punctuation.definition.import" }, { begin: "{", beginCaptures: { 0: { name: "meta.bracket.scala" } }, end: "}", endCaptures: { 0: { name: "meta.bracket.scala" } }, name: "meta.import.selector.scala", patterns: [{ captures: { 1: { name: "keyword.other.import.given.scala" }, 2: { name: "entity.name.class.import.renamed-from.scala" }, 3: { name: "entity.name.import.renamed-from.scala" }, 4: { name: "keyword.other.arrow.scala" }, 5: { name: "entity.name.class.import.renamed-to.scala" }, 6: { name: "entity.name.import.renamed-to.scala" } }, match: "(?x)(given\\s)?\\s*(?:([A-Z\\p{Lt}\\p{Lu}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?)|(`[^`]+`|(?:[A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?|[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)))\\s*(=>)\\s*(?:([A-Z\\p{Lt}\\p{Lu}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?)|(`[^`]+`|(?:[A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?|[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)))\\s*" }, { match: "\\b(given)\\b", name: "keyword.other.import.given.scala" }, { captures: { 1: { name: "keyword.other.import.given.scala" }, 2: { name: "entity.name.class.import.scala" }, 3: { name: "entity.name.import.scala" } }, match: "(given\\s+)?(?:([A-Z\\p{Lt}\\p{Lu}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?)|(`[^`]+`|(?:[A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?|[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)))" }] }] }, inheritance: { patterns: [{ captures: { 1: { name: "keyword.declaration.scala" }, 2: { name: "entity.name.class" } }, match: '\\b(extends|with|derives)\\b\\s*([A-Z\\p{Lt}\\p{Lu}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?|`[^`]+`|(?=\\([^\\)]+=>)|(?=(?:[A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?|[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+))|(?="))?' }] }, initialization: { captures: { 1: { name: "keyword.declaration.scala" } }, match: "\\b(new)\\b" }, inline: { patterns: [{ match: "\\b(inline)(?=\\s+((?:[A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?|[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)|`[^`]+`)\\s*:)", name: "storage.modifier.other" }, { match: "\\b(inline)\\b(?=(?:.(?!\\b(?:val|def|given)\\b))*\\b(if|match)\\b)", name: "keyword.control.flow.scala" }] }, keywords: { patterns: [{ match: "\\b(return|throw)\\b", name: "keyword.control.flow.jump.scala" }, { match: "\\b(classOf|isInstanceOf|asInstanceOf)\\b", name: "support.function.type-of.scala" }, { match: "\\b(else|if|then|do|while|for|yield|match|case)\\b", name: "keyword.control.flow.scala" }, { match: "^\\s*(end)\\s+(if|while|for|match)(?=\\s*(//.*|/\\*(?!.*\\*/\\s*\\S.*).*)?$)", name: "keyword.control.flow.end.scala" }, { match: "^\\s*(end)\\s+(val)(?=\\s*(//.*|/\\*(?!.*\\*/\\s*\\S.*).*)?$)", name: "keyword.declaration.stable.end.scala" }, { match: "^\\s*(end)\\s+(var)(?=\\s*(//.*|/\\*(?!.*\\*/\\s*\\S.*).*)?$)", name: "keyword.declaration.volatile.end.scala" }, { captures: { 1: { name: "keyword.declaration.end.scala" }, 2: { name: "keyword.declaration.end.scala" }, 3: { name: "entity.name.type.declaration" } }, match: "^\\s*(end)\\s+(?:(new|extension)|([A-Z\\p{Lt}\\p{Lu}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?))(?=\\s*(//.*|/\\*(?!.*\\*/\\s*\\S.*).*)?$)" }, { match: "\\b(catch|finally|try)\\b", name: "keyword.control.exception.scala" }, { match: "^\\s*(end)\\s+(try)(?=\\s*(//.*|/\\*(?!.*\\*/\\s*\\S.*).*)?$)", name: "keyword.control.exception.end.scala" }, { captures: { 1: { name: "keyword.declaration.end.scala" }, 2: { name: "entity.name.declaration" } }, match: "^\\s*(end)\\s+(`[^`]+`|(?:[A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?|[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+))?(?=\\s*(//.*|/\\*(?!.*\\*/\\s*\\S.*).*)?$)" }, { match: "(==?|!=|<=|>=|<>|<|>)", name: "keyword.operator.comparison.scala" }, { match: "(\\-|\\+|\\*|/(?![/*])|%|~)", name: "keyword.operator.arithmetic.scala" }, { match: "(?<![!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]|_)(!|&&|\\|\\|)(?![!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}])", name: "keyword.operator.logical.scala" }, { match: "(<-|←|->|→|=>|⇒|\\?|\\:+|@|\\|)+", name: "keyword.operator.scala" }] }, "meta-bounds": { comment: "For themes: Matching view bounds", match: "<%|=:=|<:<|<%<|>:|<:", name: "meta.bounds.scala" }, "meta-brackets": { comment: "For themes: Brackets look nice when colored.", patterns: [{ comment: "The punctuation.section.*.begin is needed for return snippet in source bundle", match: "\\{", name: "punctuation.section.block.begin.scala" }, { comment: "The punctuation.section.*.end is needed for return snippet in source bundle", match: "\\}", name: "punctuation.section.block.end.scala" }, { match: "{|}|\\(|\\)|\\[|\\]", name: "meta.bracket.scala" }] }, "meta-colons": { comment: "For themes: Matching type colons", patterns: [{ match: "(?<!:):(?!:)", name: "meta.colon.scala" }] }, "parameter-list": { patterns: [{ captures: { 1: { name: "variable.parameter.scala" }, 2: { name: "meta.colon.scala" } }, match: "(?<=[^\\._$a-zA-Z0-9])(`[^`]+`|[_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?)\\s*(:)\\s+" }] }, qualifiedClassName: { captures: { 1: { name: "entity.name.class" } }, match: "(\\b([A-Z][\\w]*)(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?)" }, "scala-quoted-or-symbol": { patterns: [{ captures: { 1: { name: "keyword.control.flow.staging.scala constant.other.symbol.scala" }, 2: { name: "constant.other.symbol.scala" } }, match: "(')((?>(?:[A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?|[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)))(?!')" }, { match: "'(?=\\s*\\{(?!'))", name: "keyword.control.flow.staging.scala" }, { match: "'(?=\\s*\\[(?!'))", name: "keyword.control.flow.staging.scala" }, { match: "\\$(?=\\s*\\{)", name: "keyword.control.flow.staging.scala" }] }, "script-header": { captures: { 1: { name: "string.unquoted.shebang.scala" } }, match: "^#!(.*)$", name: "comment.block.shebang.scala" }, "singleton-type": { captures: { 1: { name: "keyword.type.scala" } }, match: "\\.(type)(?![A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?|[0-9])" }, "storage-modifiers": { patterns: [{ match: "\\b(private\\[\\S+\\]|protected\\[\\S+\\]|private|protected)\\b", name: "storage.modifier.access" }, { match: "\\b(synchronized|@volatile|abstract|final|lazy|sealed|implicit|override|@transient|@native)\\b", name: "storage.modifier.other" }, { match: "(?<=^|\\s)\\b(transparent|opaque|infix|open|inline)\\b(?=[a-z\\s]*\\b(def|val|var|given|type|class|trait|object|enum)\\b)", name: "storage.modifier.other" }] }, "string-interpolation": { patterns: [{ match: "\\$\\$", name: "constant.character.escape.interpolation.scala" }, { captures: { 1: { name: "punctuation.definition.template-expression.begin.scala" } }, match: "(\\$)([A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}][A-Z\\p{Lt}\\p{Lu}_a-z\\p{Lo}\\p{Nl}\\p{Ll}0-9]*)", name: "meta.template.expression.scala" }, { begin: "\\$\\{", beginCaptures: { 0: { name: "punctuation.definition.template-expression.begin.scala" } }, contentName: "meta.embedded.line.scala", end: "\\}", endCaptures: { 0: { name: "punctuation.definition.template-expression.end.scala" } }, name: "meta.template.expression.scala", patterns: [{ include: "#code" }] }] }, strings: { patterns: [{ begin: '"""', beginCaptures: { 0: { name: "punctuation.definition.string.begin.scala" } }, end: '"""(?!")', endCaptures: { 0: { name: "punctuation.definition.string.end.scala" } }, name: "string.quoted.triple.scala", patterns: [{ match: "\\\\\\\\|\\\\u[0-9A-Fa-f]{4}", name: "constant.character.escape.scala" }] }, { begin: '\\b(raw)(""")', beginCaptures: { 1: { name: "keyword.interpolation.scala" }, 2: { name: "string.quoted.triple.interpolated.scala punctuation.definition.string.begin.scala" } }, end: `(""")(?!")|\\$
|(\\$[^\\$"_{A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}])`, endCaptures: { 1: { name: "string.quoted.triple.interpolated.scala punctuation.definition.string.end.scala" }, 2: { name: "invalid.illegal.unrecognized-string-escape.scala" } }, patterns: [{ match: '\\$[\\$"]', name: "constant.character.escape.scala" }, { include: "#string-interpolation" }, { match: ".", name: "string.quoted.triple.interpolated.scala" }] }, { begin: '\\b((?:[A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?))(""")', beginCaptures: { 1: { name: "keyword.interpolation.scala" }, 2: { name: "string.quoted.triple.interpolated.scala punctuation.definition.string.begin.scala" } }, end: `(""")(?!")|\\$
|(\\$[^\\$"_{A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}])`, endCaptures: { 1: { name: "string.quoted.triple.interpolated.scala punctuation.definition.string.end.scala" }, 2: { name: "invalid.illegal.unrecognized-string-escape.scala" } }, patterns: [{ include: "#string-interpolation" }, { match: "\\\\\\\\|\\\\u[0-9A-Fa-f]{4}", name: "constant.character.escape.scala" }, { match: ".", name: "string.quoted.triple.interpolated.scala" }] }, { begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.scala" } }, end: '"', endCaptures: { 0: { name: "punctuation.definition.string.end.scala" } }, name: "string.quoted.double.scala", patterns: [{ match: `\\\\(?:[btnfr\\\\"']|[0-7]{1,3}|u[0-9A-Fa-f]{4})`, name: "constant.character.escape.scala" }, { match: "\\\\.", name: "invalid.illegal.unrecognized-string-escape.scala" }] }, { begin: '\\b(raw)(")', beginCaptures: { 1: { name: "keyword.interpolation.scala" }, 2: { name: "string.quoted.double.interpolated.scala punctuation.definition.string.begin.scala" } }, end: `(")|\\$
|(\\$[^\\$"_{A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}])`, endCaptures: { 1: { name: "string.quoted.double.interpolated.scala punctuation.definition.string.end.scala" }, 2: { name: "invalid.illegal.unrecognized-string-escape.scala" } }, patterns: [{ match: '\\$[\\$"]', name: "constant.character.escape.scala" }, { include: "#string-interpolation" }, { match: ".", name: "string.quoted.double.interpolated.scala" }] }, { begin: '\\b((?:[A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?))(")', beginCaptures: { 1: { name: "keyword.interpolation.scala" }, 2: { name: "string.quoted.double.interpolated.scala punctuation.definition.string.begin.scala" } }, end: `(")|\\$
|(\\$[^\\$"_{A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}])`, endCaptures: { 1: { name: "string.quoted.double.interpolated.scala punctuation.definition.string.end.scala" }, 2: { name: "invalid.illegal.unrecognized-string-escape.scala" } }, patterns: [{ match: '\\$[\\$"]', name: "constant.character.escape.scala" }, { include: "#string-interpolation" }, { match: `\\\\(?:[btnfr\\\\"']|[0-7]{1,3}|u[0-9A-Fa-f]{4})`, name: "constant.character.escape.scala" }, { match: "\\\\.", name: "invalid.illegal.unrecognized-string-escape.scala" }, { match: ".", name: "string.quoted.double.interpolated.scala" }] }] }, using: { patterns: [{ captures: { 1: { name: "keyword.declaration.scala" } }, match: "(?<=\\()\\s*(using)\\s" }] }, "using-directive": { begin: "^\\s*(//>)\\s*(using)[^\\S\\n]+(?:(\\S+))?", beginCaptures: { 1: { name: "punctuation.definition.comment.scala" }, 2: { name: "keyword.other.import.scala" }, 3: { patterns: [{ match: "[A-Z\\p{Lt}\\p{Lu}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?|`[^`]+`|(?:[A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?|[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)", name: "entity.name.import.scala" }, { match: "\\.", name: "punctuation.definition.import" }] } }, end: "\\n", name: "comment.line.shebang.scala", patterns: [{ include: "#constants" }, { include: "#strings" }, { match: "[^\\s,]+", name: "string.quoted.double.scala" }] }, "xml-doublequotedString": { begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.xml" } }, end: '"', endCaptures: { 0: { name: "punctuation.definition.string.end.xml" } }, name: "string.quoted.double.xml", patterns: [{ include: "#xml-entity" }] }, "xml-embedded-content": { patterns: [{ begin: "{", captures: { 0: { name: "meta.bracket.scala" } }, end: "}", name: "meta.source.embedded.scala", patterns: [{ include: "#code" }] }, { captures: { 1: { name: "entity.other.attribute-name.namespace.xml" }, 2: { name: "entity.other.attribute-name.xml" }, 3: { name: "punctuation.separator.namespace.xml" }, 4: { name: "entity.other.attribute-name.localname.xml" } }, match: " (?:([-_a-zA-Z0-9]+)((:)))?([_a-zA-Z-]+)=" }, { include: "#xml-doublequotedString" }, { include: "#xml-singlequotedString" }] }, "xml-entity": { captures: { 1: { name: "punctuation.definition.constant.xml" }, 3: { name: "punctuation.definition.constant.xml" } }, match: "(&)([:a-zA-Z_][:a-zA-Z0-9_.-]*|#[0-9]+|#x[0-9a-fA-F]+)(;)", name: "constant.character.entity.xml" }, "xml-literal": { patterns: [{ begin: "(<)((?:([_a-zA-Z0-9][_a-zA-Z0-9]*)((:)))?([_a-zA-Z0-9][-_a-zA-Z0-9:]*))(?=(\\s[^>]*)?></\\2>)", beginCaptures: { 1: { name: "punctuation.definition.tag.xml" }, 3: { name: "entity.name.tag.namespace.xml" }, 4: { name: "entity.name.tag.xml" }, 5: { name: "punctuation.separator.namespace.xml" }, 6: { name: "entity.name.tag.localname.xml" } }, comment: "We do not allow a tag name to start with a - since this would likely conflict with the <- operator. This is not very common for tag names anyway.  Also code such as -- if (val <val2 || val> val3) will falsly be recognized as an xml tag.  The solution is to put a space on either side of the comparison operator", end: "(>(<))/(?:([-_a-zA-Z0-9]+)((:)))?([-_a-zA-Z0-9:]*[_a-zA-Z0-9])(>)", endCaptures: { 1: { name: "punctuation.definition.tag.xml" }, 2: { name: "meta.scope.between-tag-pair.xml" }, 3: { name: "entity.name.tag.namespace.xml" }, 4: { name: "entity.name.tag.xml" }, 5: { name: "punctuation.separator.namespace.xml" }, 6: { name: "entity.name.tag.localname.xml" }, 7: { name: "punctuation.definition.tag.xml" } }, name: "meta.tag.no-content.xml", patterns: [{ include: "#xml-embedded-content" }] }, { begin: "(</?)(?:([_a-zA-Z0-9][-_a-zA-Z0-9]*)((:)))?([_a-zA-Z0-9][-_a-zA-Z0-9:]*)(?=[^>]*?>)", captures: { 1: { name: "punctuation.definition.tag.xml" }, 2: { name: "entity.name.tag.namespace.xml" }, 3: { name: "entity.name.tag.xml" }, 4: { name: "punctuation.separator.namespace.xml" }, 5: { name: "entity.name.tag.localname.xml" } }, end: "(/?>)", name: "meta.tag.xml", patterns: [{ include: "#xml-embedded-content" }] }, { include: "#xml-entity" }] }, "xml-singlequotedString": { begin: "'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.xml" } }, end: "'", endCaptures: { 0: { name: "punctuation.definition.string.end.xml" } }, name: "string.quoted.single.xml", patterns: [{ include: "#xml-entity" }] } }, scopeName: "source.scala" });
var rn = [
  an
];
const sn = Object.freeze({ displayName: "LaTeX", name: "latex", patterns: [{ comment: "This scope identifies partially typed commands such as `\\tab`. We use this to trigger “Command Completion” only when it makes sense.", match: "(?<=\\\\[\\w@]|\\\\[\\w@]{2}|\\\\[\\w@]{3}|\\\\[\\w@]{4}|\\\\[\\w@]{5}|\\\\[\\w@]{6})\\s", name: "meta.space-after-command.latex" }, { begin: "((\\\\)(?:usepackage|documentclass))\\b(?=\\[|\\{)", beginCaptures: { 1: { name: "keyword.control.preamble.latex" }, 2: { name: "punctuation.definition.function.latex" } }, end: "(?<=\\})", endCaptures: { 0: { name: "punctuation.definition.arguments.end.latex" } }, name: "meta.preamble.latex", patterns: [{ include: "#multiline-optional-arg" }, { begin: "((?:\\G|(?<=\\]))\\{)", beginCaptures: { 0: { name: "punctuation.definition.arguments.begin.latex" } }, contentName: "support.class.latex", end: "(\\})", endCaptures: { 0: { name: "punctuation.definition.arguments.end.latex" } }, patterns: [{ include: "$self" }] }] }, { begin: "((\\\\)(?:include|input))(\\{)", beginCaptures: { 1: { name: "keyword.control.include.latex" }, 2: { name: "punctuation.definition.function.latex" }, 3: { name: "punctuation.definition.arguments.begin.latex" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.arguments.end.latex" } }, name: "meta.include.latex", patterns: [{ include: "$self" }] }, { begin: "((\\\\)((?:sub){0,2}section|(?:sub)?paragraph|chapter|part|addpart|addchap|addsec|minisec|frametitle)(?:\\*)?)((?:\\[[^\\[]*?\\]){0,2})(\\{)", beginCaptures: { 1: { name: "support.function.section.latex" }, 2: { name: "punctuation.definition.function.latex" }, 4: { patterns: [{ include: "#optional-arg-bracket" }] }, 5: { name: "punctuation.definition.arguments.begin.latex" } }, comment: "this works OK with all kinds of crazy stuff as long as section is one line", contentName: "entity.name.section.latex", end: "\\}", endCaptures: { 0: { name: "punctuation.definition.arguments.end.latex" } }, name: "meta.function.section.$3.latex", patterns: [{ include: "text.tex#braces" }, { include: "$self" }] }, { begin: "((?:\\s*)\\\\begin\\{songs\\}\\{.*\\})", captures: { 1: { patterns: [{ include: "#begin-env-tokenizer" }] } }, contentName: "meta.data.environment.songs.latex", end: "(\\\\end\\{songs\\}(?:\\s*\\n)?)", name: "meta.function.environment.songs.latex", patterns: [{ begin: "\\\\\\[", end: "\\]", name: "meta.chord.block.latex support.class.chord.block.environment.latex", patterns: [{ include: "$self" }] }, { match: "\\^", name: "meta.chord.block.latex support.class.chord.block.environment.latex" }, { include: "$self" }] }, { begin: "(?:^\\s*)?\\\\begin\\{(lstlisting|minted|pyglist)\\}(?=\\[|\\{)", captures: { 0: { patterns: [{ include: "#begin-env-tokenizer" }] } }, end: "\\\\end\\{\\1\\}", patterns: [{ include: "#multiline-optional-arg-no-highlight" }, { begin: "(?:\\G|(?<=\\]))(\\{)((?:asy|asymptote))(\\})", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" }, 2: { name: "variable.parameter.function.latex" }, 3: { name: "punctuation.definition.arguments.end.latex" } }, contentName: "source.asy", end: "^\\s*(?=\\\\end\\{(?:minted|lstlisting|pyglist)\\})", patterns: [{ include: "source.asy" }] }, { begin: "(?:\\G|(?<=\\]))(\\{)((?:bash))(\\})", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" }, 2: { name: "variable.parameter.function.latex" }, 3: { name: "punctuation.definition.arguments.end.latex" } }, contentName: "source.shell", end: "^\\s*(?=\\\\end\\{(?:minted|lstlisting|pyglist)\\})", patterns: [{ include: "source.shell" }] }, { begin: "(?:\\G|(?<=\\]))(\\{)((?:c|cpp))(\\})", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" }, 2: { name: "variable.parameter.function.latex" }, 3: { name: "punctuation.definition.arguments.end.latex" } }, contentName: "source.cpp.embedded.latex", end: "^\\s*(?=\\\\end\\{(?:minted|lstlisting|pyglist)\\})", patterns: [{ include: "source.cpp.embedded.latex" }] }, { begin: "(?:\\G|(?<=\\]))(\\{)((?:css))(\\})", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" }, 2: { name: "variable.parameter.function.latex" }, 3: { name: "punctuation.definition.arguments.end.latex" } }, contentName: "source.css", end: "^\\s*(?=\\\\end\\{(?:minted|lstlisting|pyglist)\\})", patterns: [{ include: "source.css" }] }, { begin: "(?:\\G|(?<=\\]))(\\{)((?:gnuplot))(\\})", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" }, 2: { name: "variable.parameter.function.latex" }, 3: { name: "punctuation.definition.arguments.end.latex" } }, contentName: "source.gnuplot", end: "^\\s*(?=\\\\end\\{(?:minted|lstlisting|pyglist)\\})", patterns: [{ include: "source.gnuplot" }] }, { begin: "(?:\\G|(?<=\\]))(\\{)((?:hs|haskell))(\\})", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" }, 2: { name: "variable.parameter.function.latex" }, 3: { name: "punctuation.definition.arguments.end.latex" } }, contentName: "source.haskell", end: "^\\s*(?=\\\\end\\{(?:minted|lstlisting|pyglist)\\})", patterns: [{ include: "source.haskell" }] }, { begin: "(?:\\G|(?<=\\]))(\\{)((?:html))(\\})", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" }, 2: { name: "variable.parameter.function.latex" }, 3: { name: "punctuation.definition.arguments.end.latex" } }, contentName: "text.html", end: "^\\s*(?=\\\\end\\{(?:minted|lstlisting|pyglist)\\})", patterns: [{ include: "text.html.basic" }] }, { begin: "(?:\\G|(?<=\\]))(\\{)((?:java))(\\})", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" }, 2: { name: "variable.parameter.function.latex" }, 3: { name: "punctuation.definition.arguments.end.latex" } }, contentName: "source.java", end: "^\\s*(?=\\\\end\\{(?:minted|lstlisting|pyglist)\\})", patterns: [{ include: "source.java" }] }, { begin: "(?:\\G|(?<=\\]))(\\{)((?:jl|julia))(\\})", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" }, 2: { name: "variable.parameter.function.latex" }, 3: { name: "punctuation.definition.arguments.end.latex" } }, contentName: "source.julia", end: "^\\s*(?=\\\\end\\{(?:minted|lstlisting|pyglist)\\})", patterns: [{ include: "source.julia" }] }, { begin: "(?:\\G|(?<=\\]))(\\{)((?:js|javascript))(\\})", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" }, 2: { name: "variable.parameter.function.latex" }, 3: { name: "punctuation.definition.arguments.end.latex" } }, contentName: "source.js", end: "^\\s*(?=\\\\end\\{(?:minted|lstlisting|pyglist)\\})", patterns: [{ include: "source.js" }] }, { begin: "(?:\\G|(?<=\\]))(\\{)((?:lua))(\\})", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" }, 2: { name: "variable.parameter.function.latex" }, 3: { name: "punctuation.definition.arguments.end.latex" } }, contentName: "source.lua", end: "^\\s*(?=\\\\end\\{(?:minted|lstlisting|pyglist)\\})", patterns: [{ include: "source.lua" }] }, { begin: "(?:\\G|(?<=\\]))(\\{)((?:py|python|sage))(\\})", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" }, 2: { name: "variable.parameter.function.latex" }, 3: { name: "punctuation.definition.arguments.end.latex" } }, contentName: "source.python", end: "^\\s*(?=\\\\end\\{(?:minted|lstlisting|pyglist)\\})", patterns: [{ include: "source.python" }] }, { begin: "(?:\\G|(?<=\\]))(\\{)((?:rb|ruby))(\\})", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" }, 2: { name: "variable.parameter.function.latex" }, 3: { name: "punctuation.definition.arguments.end.latex" } }, contentName: "source.ruby", end: "^\\s*(?=\\\\end\\{(?:minted|lstlisting|pyglist)\\})", patterns: [{ include: "source.ruby" }] }, { begin: "(?:\\G|(?<=\\]))(\\{)((?:rust))(\\})", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" }, 2: { name: "variable.parameter.function.latex" }, 3: { name: "punctuation.definition.arguments.end.latex" } }, contentName: "source.rust", end: "^\\s*(?=\\\\end\\{(?:minted|lstlisting|pyglist)\\})", patterns: [{ include: "source.rust" }] }, { begin: "(?:\\G|(?<=\\]))(\\{)((?:ts|typescript))(\\})", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" }, 2: { name: "variable.parameter.function.latex" }, 3: { name: "punctuation.definition.arguments.end.latex" } }, contentName: "source.ts", end: "^\\s*(?=\\\\end\\{(?:minted|lstlisting|pyglist)\\})", patterns: [{ include: "source.ts" }] }, { begin: "(?:\\G|(?<=\\]))(\\{)((?:xml))(\\})", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" }, 2: { name: "variable.parameter.function.latex" }, 3: { name: "punctuation.definition.arguments.end.latex" } }, contentName: "text.xml", end: "^\\s*(?=\\\\end\\{(?:minted|lstlisting|pyglist)\\})", patterns: [{ include: "text.xml" }] }, { begin: "(?:\\G|(?<=\\]))(\\{)((?:yaml))(\\})", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" }, 2: { name: "variable.parameter.function.latex" }, 3: { name: "punctuation.definition.arguments.end.latex" } }, contentName: "source.yaml", end: "^\\s*(?=\\\\end\\{(?:minted|lstlisting|pyglist)\\})", patterns: [{ include: "source.yaml" }] }, { begin: "(?:\\G|(?<=\\]))(\\{)([a-zA-Z]*)(\\})", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" }, 2: { name: "variable.parameter.function.latex" }, 3: { name: "punctuation.definition.arguments.end.latex" } }, contentName: "meta.function.embedded.latex", end: "^\\s*(?=\\\\end\\{(?:lstlisting|minted|pyglist)\\})", name: "meta.embedded.block.generic.latex" }] }, { begin: "\\s*\\\\begin\\{(?:asy|asycode)\\*?\\}(?:\\[[a-zA-Z0-9_-]*\\])?(?=\\[|\\{|\\s*$)", captures: { 0: { patterns: [{ include: "#begin-env-tokenizer" }] } }, end: "\\s*\\\\end\\{(?:asy|asycode)\\*?\\}", patterns: [{ include: "#multiline-optional-arg-no-highlight" }, { begin: "(?:\\G|(?<=\\]))(\\{)", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" } }, contentName: "variable.parameter.function.latex", end: "(\\})", endCaptures: { 1: { name: "punctuation.definition.arguments.end.latex" } } }, { begin: "^(?=\\s*)", contentName: "source.asymptote", end: "^\\s*(?=\\\\end\\{(?:asy|asycode)\\*?\\})", patterns: [{ include: "source.asymptote" }] }] }, { begin: "\\s*\\\\begin\\{(?:cppcode)\\*?\\}(?:\\[[a-zA-Z0-9_-]*\\])?(?=\\[|\\{|\\s*$)", captures: { 0: { patterns: [{ include: "#begin-env-tokenizer" }] } }, end: "\\s*\\\\end\\{(?:cppcode)\\*?\\}", patterns: [{ include: "#multiline-optional-arg-no-highlight" }, { begin: "(?:\\G|(?<=\\]))(\\{)", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" } }, contentName: "variable.parameter.function.latex", end: "(\\})", endCaptures: { 1: { name: "punctuation.definition.arguments.end.latex" } } }, { begin: "^(?=\\s*)", contentName: "source.cpp.embedded.latex", end: "^\\s*(?=\\\\end\\{(?:cppcode)\\*?\\})", patterns: [{ include: "source.cpp.embedded.latex" }] }] }, { begin: "\\s*\\\\begin\\{(?:dot2tex|dotcode)\\*?\\}(?:\\[[a-zA-Z0-9_-]*\\])?(?=\\[|\\{|\\s*$)", captures: { 0: { patterns: [{ include: "#begin-env-tokenizer" }] } }, end: "\\s*\\\\end\\{(?:dot2tex|dotcode)\\*?\\}", patterns: [{ include: "#multiline-optional-arg-no-highlight" }, { begin: "(?:\\G|(?<=\\]))(\\{)", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" } }, contentName: "variable.parameter.function.latex", end: "(\\})", endCaptures: { 1: { name: "punctuation.definition.arguments.end.latex" } } }, { begin: "^(?=\\s*)", contentName: "source.dot", end: "^\\s*(?=\\\\end\\{(?:dot2tex|dotcode)\\*?\\})", patterns: [{ include: "source.dot" }] }] }, { begin: "\\s*\\\\begin\\{(?:gnuplot)\\*?\\}(?:\\[[a-zA-Z0-9_-]*\\])?(?=\\[|\\{|\\s*$)", captures: { 0: { patterns: [{ include: "#begin-env-tokenizer" }] } }, end: "\\s*\\\\end\\{(?:gnuplot)\\*?\\}", patterns: [{ include: "#multiline-optional-arg-no-highlight" }, { begin: "(?:\\G|(?<=\\]))(\\{)", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" } }, contentName: "variable.parameter.function.latex", end: "(\\})", endCaptures: { 1: { name: "punctuation.definition.arguments.end.latex" } } }, { begin: "^(?=\\s*)", contentName: "source.gnuplot", end: "^\\s*(?=\\\\end\\{(?:gnuplot)\\*?\\})", patterns: [{ include: "source.gnuplot" }] }] }, { begin: "\\s*\\\\begin\\{(?:hscode)\\*?\\}(?:\\[[a-zA-Z0-9_-]*\\])?(?=\\[|\\{|\\s*$)", captures: { 0: { patterns: [{ include: "#begin-env-tokenizer" }] } }, end: "\\s*\\\\end\\{(?:hscode)\\*?\\}", patterns: [{ include: "#multiline-optional-arg-no-highlight" }, { begin: "(?:\\G|(?<=\\]))(\\{)", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" } }, contentName: "variable.parameter.function.latex", end: "(\\})", endCaptures: { 1: { name: "punctuation.definition.arguments.end.latex" } } }, { begin: "^(?=\\s*)", contentName: "source.haskell", end: "^\\s*(?=\\\\end\\{(?:hscode)\\*?\\})", patterns: [{ include: "source.haskell" }] }] }, { begin: "\\s*\\\\begin\\{(?:jlcode|jlverbatim|jlblock|jlconcode|jlconsole|jlconverbatim)\\*?\\}(?:\\[[a-zA-Z0-9_-]*\\])?(?=\\[|\\{|\\s*$)", captures: { 0: { patterns: [{ include: "#begin-env-tokenizer" }] } }, end: "\\s*\\\\end\\{(?:jlcode|jlverbatim|jlblock|jlconcode|jlconsole|jlconverbatim)\\*?\\}", patterns: [{ include: "#multiline-optional-arg-no-highlight" }, { begin: "(?:\\G|(?<=\\]))(\\{)", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" } }, contentName: "variable.parameter.function.latex", end: "(\\})", endCaptures: { 1: { name: "punctuation.definition.arguments.end.latex" } } }, { begin: "^(?=\\s*)", contentName: "source.julia", end: "^\\s*(?=\\\\end\\{(?:jlcode|jlverbatim|jlblock|jlconcode|jlconsole|jlconverbatim)\\*?\\})", patterns: [{ include: "source.julia" }] }] }, { begin: "\\s*\\\\begin\\{(?:juliacode|juliaverbatim|juliablock|juliaconcode|juliaconsole|juliaconverbatim)\\*?\\}(?:\\[[a-zA-Z0-9_-]*\\])?(?=\\[|\\{|\\s*$)", captures: { 0: { patterns: [{ include: "#begin-env-tokenizer" }] } }, end: "\\s*\\\\end\\{(?:juliacode|juliaverbatim|juliablock|juliaconcode|juliaconsole|juliaconverbatim)\\*?\\}", patterns: [{ include: "#multiline-optional-arg-no-highlight" }, { begin: "(?:\\G|(?<=\\]))(\\{)", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" } }, contentName: "variable.parameter.function.latex", end: "(\\})", endCaptures: { 1: { name: "punctuation.definition.arguments.end.latex" } } }, { begin: "^(?=\\s*)", contentName: "source.julia", end: "^\\s*(?=\\\\end\\{(?:juliacode|juliaverbatim|juliablock|juliaconcode|juliaconsole|juliaconverbatim)\\*?\\})", patterns: [{ include: "source.julia" }] }] }, { begin: "\\s*\\\\begin\\{(?:luacode)\\*?\\}(?:\\[[a-zA-Z0-9_-]*\\])?(?=\\[|\\{|\\s*$)", captures: { 0: { patterns: [{ include: "#begin-env-tokenizer" }] } }, end: "\\s*\\\\end\\{(?:luacode)\\*?\\}", patterns: [{ include: "#multiline-optional-arg-no-highlight" }, { begin: "(?:\\G|(?<=\\]))(\\{)", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" } }, contentName: "variable.parameter.function.latex", end: "(\\})", endCaptures: { 1: { name: "punctuation.definition.arguments.end.latex" } } }, { begin: "^(?=\\s*)", contentName: "source.lua", end: "^\\s*(?=\\\\end\\{(?:luacode)\\*?\\})", patterns: [{ include: "source.lua" }] }] }, { begin: "\\s*\\\\begin\\{(?:pycode|pyverbatim|pyblock|pyconcode|pyconsole|pyconverbatim)\\*?\\}(?:\\[[a-zA-Z0-9_-]*\\])?(?=\\[|\\{|\\s*$)", captures: { 0: { patterns: [{ include: "#begin-env-tokenizer" }] } }, end: "\\s*\\\\end\\{(?:pycode|pyverbatim|pyblock|pyconcode|pyconsole|pyconverbatim)\\*?\\}", patterns: [{ include: "#multiline-optional-arg-no-highlight" }, { begin: "(?:\\G|(?<=\\]))(\\{)", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" } }, contentName: "variable.parameter.function.latex", end: "(\\})", endCaptures: { 1: { name: "punctuation.definition.arguments.end.latex" } } }, { begin: "^(?=\\s*)", contentName: "source.python", end: "^\\s*(?=\\\\end\\{(?:pycode|pyverbatim|pyblock|pyconcode|pyconsole|pyconverbatim)\\*?\\})", patterns: [{ include: "source.python" }] }] }, { begin: "\\s*\\\\begin\\{(?:pylabcode|pylabverbatim|pylabblock|pylabconcode|pylabconsole|pylabconverbatim)\\*?\\}(?:\\[[a-zA-Z0-9_-]*\\])?(?=\\[|\\{|\\s*$)", captures: { 0: { patterns: [{ include: "#begin-env-tokenizer" }] } }, end: "\\s*\\\\end\\{(?:pylabcode|pylabverbatim|pylabblock|pylabconcode|pylabconsole|pylabconverbatim)\\*?\\}", patterns: [{ include: "#multiline-optional-arg-no-highlight" }, { begin: "(?:\\G|(?<=\\]))(\\{)", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" } }, contentName: "variable.parameter.function.latex", end: "(\\})", endCaptures: { 1: { name: "punctuation.definition.arguments.end.latex" } } }, { begin: "^(?=\\s*)", contentName: "source.python", end: "^\\s*(?=\\\\end\\{(?:pylabcode|pylabverbatim|pylabblock|pylabconcode|pylabconsole|pylabconverbatim)\\*?\\})", patterns: [{ include: "source.python" }] }] }, { begin: "\\s*\\\\begin\\{(?:sageblock|sagesilent|sageverbatim|sageexample|sagecommandline|python|pythonq|pythonrepl)\\*?\\}(?:\\[[a-zA-Z0-9_-]*\\])?(?=\\[|\\{|\\s*$)", captures: { 0: { patterns: [{ include: "#begin-env-tokenizer" }] } }, end: "\\s*\\\\end\\{(?:sageblock|sagesilent|sageverbatim|sageexample|sagecommandline|python|pythonq|pythonrepl)\\*?\\}", patterns: [{ include: "#multiline-optional-arg-no-highlight" }, { begin: "(?:\\G|(?<=\\]))(\\{)", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" } }, contentName: "variable.parameter.function.latex", end: "(\\})", endCaptures: { 1: { name: "punctuation.definition.arguments.end.latex" } } }, { begin: "^(?=\\s*)", contentName: "source.python", end: "^\\s*(?=\\\\end\\{(?:sageblock|sagesilent|sageverbatim|sageexample|sagecommandline|python|pythonq|pythonrepl)\\*?\\})", patterns: [{ include: "source.python" }] }] }, { begin: "\\s*\\\\begin\\{(?:scalacode)\\*?\\}(?:\\[[a-zA-Z0-9_-]*\\])?(?=\\[|\\{|\\s*$)", captures: { 0: { patterns: [{ include: "#begin-env-tokenizer" }] } }, end: "\\s*\\\\end\\{(?:scalacode)\\*?\\}", patterns: [{ include: "#multiline-optional-arg-no-highlight" }, { begin: "(?:\\G|(?<=\\]))(\\{)", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" } }, contentName: "variable.parameter.function.latex", end: "(\\})", endCaptures: { 1: { name: "punctuation.definition.arguments.end.latex" } } }, { begin: "^(?=\\s*)", contentName: "source.scala", end: "^\\s*(?=\\\\end\\{(?:scalacode)\\*?\\})", patterns: [{ include: "source.scala" }] }] }, { begin: "\\s*\\\\begin\\{(?:sympycode|sympyverbatim|sympyblock|sympyconcode|sympyconsole|sympyconverbatim)\\*?\\}(?:\\[[a-zA-Z0-9_-]*\\])?(?=\\[|\\{|\\s*$)", captures: { 0: { patterns: [{ include: "#begin-env-tokenizer" }] } }, end: "\\s*\\\\end\\{(?:sympycode|sympyverbatim|sympyblock|sympyconcode|sympyconsole|sympyconverbatim)\\*?\\}", patterns: [{ include: "#multiline-optional-arg-no-highlight" }, { begin: "(?:\\G|(?<=\\]))(\\{)", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" } }, contentName: "variable.parameter.function.latex", end: "(\\})", endCaptures: { 1: { name: "punctuation.definition.arguments.end.latex" } } }, { begin: "^(?=\\s*)", contentName: "source.python", end: "^\\s*(?=\\\\end\\{(?:sympycode|sympyverbatim|sympyblock|sympyconcode|sympyconsole|sympyconverbatim)\\*?\\})", patterns: [{ include: "source.python" }] }] }, { begin: "\\s*\\\\begin\\{([a-zA-Z]*code|lstlisting|minted|pyglist)\\*?\\}(?:\\[.*\\])?(?:\\{.*\\})?", captures: { 0: { patterns: [{ include: "#begin-env-tokenizer" }] } }, contentName: "meta.function.embedded.latex", end: "\\\\end\\{\\1\\}(?:\\s*\\n)?", name: "meta.embedded.block.generic.latex" }, { begin: "((?:^\\s*)?\\\\begin\\{((?:RobExt)?(?:CacheMeCode|PlaceholderPathFromCode\\*?|PlaceholderFromCode\\*?|SetPlaceholderCode\\*?))\\})(?:\\[[^\\]]*\\]){,2}(?=\\{)", captures: { 1: { patterns: [{ include: "#begin-env-tokenizer" }] } }, end: "(\\\\end\\{\\2\\})", patterns: [{ begin: "\\G(\\{)(?:__|[a-z\\s]*)(?i:asy|asymptote)", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" } }, end: "(?=\\\\end\\{(?:RobExt)?(?:CacheMeCode|PlaceholderPathFromCode\\*?|PlaceholderFromCode\\*?|SetPlaceholderCode\\*?)\\})", patterns: [{ begin: "\\G", end: "(\\})\\s*$", endCaptures: { 1: { name: "punctuation.definition.arguments.end.latex" } }, patterns: [{ include: "text.tex#braces" }, { include: "$self" }] }, { begin: "^(\\s*)", contentName: "source.asy", end: "^\\s*(?=\\\\end\\{(?:RobExt)?(?:CacheMeCode|PlaceholderPathFromCode\\*?|PlaceholderFromCode\\*?|SetPlaceholderCode\\*?)\\})", patterns: [{ include: "source.asy" }] }] }, { begin: "\\G(\\{)(?:__|[a-z\\s]*)(?i:bash)", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" } }, end: "(?=\\\\end\\{(?:RobExt)?(?:CacheMeCode|PlaceholderPathFromCode\\*?|PlaceholderFromCode\\*?|SetPlaceholderCode\\*?)\\})", patterns: [{ begin: "\\G", end: "(\\})\\s*$", endCaptures: { 1: { name: "punctuation.definition.arguments.end.latex" } }, patterns: [{ include: "text.tex#braces" }, { include: "$self" }] }, { begin: "^(\\s*)", contentName: "source.shell", end: "^\\s*(?=\\\\end\\{(?:RobExt)?(?:CacheMeCode|PlaceholderPathFromCode\\*?|PlaceholderFromCode\\*?|SetPlaceholderCode\\*?)\\})", patterns: [{ include: "source.shell" }] }] }, { begin: "\\G(\\{)(?:__|[a-z\\s]*)(?i:c|cpp)", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" } }, end: "(?=\\\\end\\{(?:RobExt)?(?:CacheMeCode|PlaceholderPathFromCode\\*?|PlaceholderFromCode\\*?|SetPlaceholderCode\\*?)\\})", patterns: [{ begin: "\\G", end: "(\\})\\s*$", endCaptures: { 1: { name: "punctuation.definition.arguments.end.latex" } }, patterns: [{ include: "text.tex#braces" }, { include: "$self" }] }, { begin: "^(\\s*)", contentName: "source.cpp.embedded.latex", end: "^\\s*(?=\\\\end\\{(?:RobExt)?(?:CacheMeCode|PlaceholderPathFromCode\\*?|PlaceholderFromCode\\*?|SetPlaceholderCode\\*?)\\})", patterns: [{ include: "source.cpp.embedded.latex" }] }] }, { begin: "\\G(\\{)(?:__|[a-z\\s]*)(?i:css)", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" } }, end: "(?=\\\\end\\{(?:RobExt)?(?:CacheMeCode|PlaceholderPathFromCode\\*?|PlaceholderFromCode\\*?|SetPlaceholderCode\\*?)\\})", patterns: [{ begin: "\\G", end: "(\\})\\s*$", endCaptures: { 1: { name: "punctuation.definition.arguments.end.latex" } }, patterns: [{ include: "text.tex#braces" }, { include: "$self" }] }, { begin: "^(\\s*)", contentName: "source.css", end: "^\\s*(?=\\\\end\\{(?:RobExt)?(?:CacheMeCode|PlaceholderPathFromCode\\*?|PlaceholderFromCode\\*?|SetPlaceholderCode\\*?)\\})", patterns: [{ include: "source.css" }] }] }, { begin: "\\G(\\{)(?:__|[a-z\\s]*)(?i:gnuplot)", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" } }, end: "(?=\\\\end\\{(?:RobExt)?(?:CacheMeCode|PlaceholderPathFromCode\\*?|PlaceholderFromCode\\*?|SetPlaceholderCode\\*?)\\})", patterns: [{ begin: "\\G", end: "(\\})\\s*$", endCaptures: { 1: { name: "punctuation.definition.arguments.end.latex" } }, patterns: [{ include: "text.tex#braces" }, { include: "$self" }] }, { begin: "^(\\s*)", contentName: "source.gnuplot", end: "^\\s*(?=\\\\end\\{(?:RobExt)?(?:CacheMeCode|PlaceholderPathFromCode\\*?|PlaceholderFromCode\\*?|SetPlaceholderCode\\*?)\\})", patterns: [{ include: "source.gnuplot" }] }] }, { begin: "\\G(\\{)(?:__|[a-z\\s]*)(?i:hs|haskell)", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" } }, end: "(?=\\\\end\\{(?:RobExt)?(?:CacheMeCode|PlaceholderPathFromCode\\*?|PlaceholderFromCode\\*?|SetPlaceholderCode\\*?)\\})", patterns: [{ begin: "\\G", end: "(\\})\\s*$", endCaptures: { 1: { name: "punctuation.definition.arguments.end.latex" } }, patterns: [{ include: "text.tex#braces" }, { include: "$self" }] }, { begin: "^(\\s*)", contentName: "source.haskell", end: "^\\s*(?=\\\\end\\{(?:RobExt)?(?:CacheMeCode|PlaceholderPathFromCode\\*?|PlaceholderFromCode\\*?|SetPlaceholderCode\\*?)\\})", patterns: [{ include: "source.haskell" }] }] }, { begin: "\\G(\\{)(?:__|[a-z\\s]*)(?i:html)", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" } }, end: "(?=\\\\end\\{(?:RobExt)?(?:CacheMeCode|PlaceholderPathFromCode\\*?|PlaceholderFromCode\\*?|SetPlaceholderCode\\*?)\\})", patterns: [{ begin: "\\G", end: "(\\})\\s*$", endCaptures: { 1: { name: "punctuation.definition.arguments.end.latex" } }, patterns: [{ include: "text.tex#braces" }, { include: "$self" }] }, { begin: "^(\\s*)", contentName: "text.html", end: "^\\s*(?=\\\\end\\{(?:RobExt)?(?:CacheMeCode|PlaceholderPathFromCode\\*?|PlaceholderFromCode\\*?|SetPlaceholderCode\\*?)\\})", patterns: [{ include: "text.html.basic" }] }] }, { begin: "\\G(\\{)(?:__|[a-z\\s]*)(?i:java)", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" } }, end: "(?=\\\\end\\{(?:RobExt)?(?:CacheMeCode|PlaceholderPathFromCode\\*?|PlaceholderFromCode\\*?|SetPlaceholderCode\\*?)\\})", patterns: [{ begin: "\\G", end: "(\\})\\s*$", endCaptures: { 1: { name: "punctuation.definition.arguments.end.latex" } }, patterns: [{ include: "text.tex#braces" }, { include: "$self" }] }, { begin: "^(\\s*)", contentName: "source.java", end: "^\\s*(?=\\\\end\\{(?:RobExt)?(?:CacheMeCode|PlaceholderPathFromCode\\*?|PlaceholderFromCode\\*?|SetPlaceholderCode\\*?)\\})", patterns: [{ include: "source.java" }] }] }, { begin: "\\G(\\{)(?:__|[a-z\\s]*)(?i:jl|julia)", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" } }, end: "(?=\\\\end\\{(?:RobExt)?(?:CacheMeCode|PlaceholderPathFromCode\\*?|PlaceholderFromCode\\*?|SetPlaceholderCode\\*?)\\})", patterns: [{ begin: "\\G", end: "(\\})\\s*$", endCaptures: { 1: { name: "punctuation.definition.arguments.end.latex" } }, patterns: [{ include: "text.tex#braces" }, { include: "$self" }] }, { begin: "^(\\s*)", contentName: "source.julia", end: "^\\s*(?=\\\\end\\{(?:RobExt)?(?:CacheMeCode|PlaceholderPathFromCode\\*?|PlaceholderFromCode\\*?|SetPlaceholderCode\\*?)\\})", patterns: [{ include: "source.julia" }] }] }, { begin: "\\G(\\{)(?:__|[a-z\\s]*)(?i:js|javascript)", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" } }, end: "(?=\\\\end\\{(?:RobExt)?(?:CacheMeCode|PlaceholderPathFromCode\\*?|PlaceholderFromCode\\*?|SetPlaceholderCode\\*?)\\})", patterns: [{ begin: "\\G", end: "(\\})\\s*$", endCaptures: { 1: { name: "punctuation.definition.arguments.end.latex" } }, patterns: [{ include: "text.tex#braces" }, { include: "$self" }] }, { begin: "^(\\s*)", contentName: "source.js", end: "^\\s*(?=\\\\end\\{(?:RobExt)?(?:CacheMeCode|PlaceholderPathFromCode\\*?|PlaceholderFromCode\\*?|SetPlaceholderCode\\*?)\\})", patterns: [{ include: "source.js" }] }] }, { begin: "\\G(\\{)(?:__|[a-z\\s]*)(?i:lua)", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" } }, end: "(?=\\\\end\\{(?:RobExt)?(?:CacheMeCode|PlaceholderPathFromCode\\*?|PlaceholderFromCode\\*?|SetPlaceholderCode\\*?)\\})", patterns: [{ begin: "\\G", end: "(\\})\\s*$", endCaptures: { 1: { name: "punctuation.definition.arguments.end.latex" } }, patterns: [{ include: "text.tex#braces" }, { include: "$self" }] }, { begin: "^(\\s*)", contentName: "source.lua", end: "^\\s*(?=\\\\end\\{(?:RobExt)?(?:CacheMeCode|PlaceholderPathFromCode\\*?|PlaceholderFromCode\\*?|SetPlaceholderCode\\*?)\\})", patterns: [{ include: "source.lua" }] }] }, { begin: "\\G(\\{)(?:__|[a-z\\s]*)(?i:py|python|sage)", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" } }, end: "(?=\\\\end\\{(?:RobExt)?(?:CacheMeCode|PlaceholderPathFromCode\\*?|PlaceholderFromCode\\*?|SetPlaceholderCode\\*?)\\})", patterns: [{ begin: "\\G", end: "(\\})\\s*$", endCaptures: { 1: { name: "punctuation.definition.arguments.end.latex" } }, patterns: [{ include: "text.tex#braces" }, { include: "$self" }] }, { begin: "^(\\s*)", contentName: "source.python", end: "^\\s*(?=\\\\end\\{(?:RobExt)?(?:CacheMeCode|PlaceholderPathFromCode\\*?|PlaceholderFromCode\\*?|SetPlaceholderCode\\*?)\\})", patterns: [{ include: "source.python" }] }] }, { begin: "\\G(\\{)(?:__|[a-z\\s]*)(?i:rb|ruby)", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" } }, end: "(?=\\\\end\\{(?:RobExt)?(?:CacheMeCode|PlaceholderPathFromCode\\*?|PlaceholderFromCode\\*?|SetPlaceholderCode\\*?)\\})", patterns: [{ begin: "\\G", end: "(\\})\\s*$", endCaptures: { 1: { name: "punctuation.definition.arguments.end.latex" } }, patterns: [{ include: "text.tex#braces" }, { include: "$self" }] }, { begin: "^(\\s*)", contentName: "source.ruby", end: "^\\s*(?=\\\\end\\{(?:RobExt)?(?:CacheMeCode|PlaceholderPathFromCode\\*?|PlaceholderFromCode\\*?|SetPlaceholderCode\\*?)\\})", patterns: [{ include: "source.ruby" }] }] }, { begin: "\\G(\\{)(?:__|[a-z\\s]*)(?i:rust)", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" } }, end: "(?=\\\\end\\{(?:RobExt)?(?:CacheMeCode|PlaceholderPathFromCode\\*?|PlaceholderFromCode\\*?|SetPlaceholderCode\\*?)\\})", patterns: [{ begin: "\\G", end: "(\\})\\s*$", endCaptures: { 1: { name: "punctuation.definition.arguments.end.latex" } }, patterns: [{ include: "text.tex#braces" }, { include: "$self" }] }, { begin: "^(\\s*)", contentName: "source.rust", end: "^\\s*(?=\\\\end\\{(?:RobExt)?(?:CacheMeCode|PlaceholderPathFromCode\\*?|PlaceholderFromCode\\*?|SetPlaceholderCode\\*?)\\})", patterns: [{ include: "source.rust" }] }] }, { begin: "\\G(\\{)(?:__|[a-z\\s]*)(?i:ts|typescript)", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" } }, end: "(?=\\\\end\\{(?:RobExt)?(?:CacheMeCode|PlaceholderPathFromCode\\*?|PlaceholderFromCode\\*?|SetPlaceholderCode\\*?)\\})", patterns: [{ begin: "\\G", end: "(\\})\\s*$", endCaptures: { 1: { name: "punctuation.definition.arguments.end.latex" } }, patterns: [{ include: "text.tex#braces" }, { include: "$self" }] }, { begin: "^(\\s*)", contentName: "source.ts", end: "^\\s*(?=\\\\end\\{(?:RobExt)?(?:CacheMeCode|PlaceholderPathFromCode\\*?|PlaceholderFromCode\\*?|SetPlaceholderCode\\*?)\\})", patterns: [{ include: "source.ts" }] }] }, { begin: "\\G(\\{)(?:__|[a-z\\s]*)(?i:xml)", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" } }, end: "(?=\\\\end\\{(?:RobExt)?(?:CacheMeCode|PlaceholderPathFromCode\\*?|PlaceholderFromCode\\*?|SetPlaceholderCode\\*?)\\})", patterns: [{ begin: "\\G", end: "(\\})\\s*$", endCaptures: { 1: { name: "punctuation.definition.arguments.end.latex" } }, patterns: [{ include: "text.tex#braces" }, { include: "$self" }] }, { begin: "^(\\s*)", contentName: "text.xml", end: "^\\s*(?=\\\\end\\{(?:RobExt)?(?:CacheMeCode|PlaceholderPathFromCode\\*?|PlaceholderFromCode\\*?|SetPlaceholderCode\\*?)\\})", patterns: [{ include: "text.xml" }] }] }, { begin: "\\G(\\{)(?:__|[a-z\\s]*)(?i:yaml)", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" } }, end: "(?=\\\\end\\{(?:RobExt)?(?:CacheMeCode|PlaceholderPathFromCode\\*?|PlaceholderFromCode\\*?|SetPlaceholderCode\\*?)\\})", patterns: [{ begin: "\\G", end: "(\\})\\s*$", endCaptures: { 1: { name: "punctuation.definition.arguments.end.latex" } }, patterns: [{ include: "text.tex#braces" }, { include: "$self" }] }, { begin: "^(\\s*)", contentName: "source.yaml", end: "^\\s*(?=\\\\end\\{(?:RobExt)?(?:CacheMeCode|PlaceholderPathFromCode\\*?|PlaceholderFromCode\\*?|SetPlaceholderCode\\*?)\\})", patterns: [{ include: "source.yaml" }] }] }, { begin: "\\G(\\{)(?:__|[a-z\\s]*)(?i:tikz|tikzpicture)", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" } }, end: "(?=\\\\end\\{(?:RobExt)?(?:CacheMeCode|PlaceholderPathFromCode\\*?|PlaceholderFromCode\\*?|SetPlaceholderCode\\*?)\\})", patterns: [{ begin: "\\G", end: "(\\})\\s*$", endCaptures: { 1: { name: "punctuation.definition.arguments.end.latex" } }, patterns: [{ include: "text.tex#braces" }, { include: "$self" }] }, { begin: "^(\\s*)", contentName: "text.tex.latex", end: "^\\s*(?=\\\\end\\{(?:RobExt)?(?:CacheMeCode|PlaceholderPathFromCode\\*?|PlaceholderFromCode\\*?|SetPlaceholderCode\\*?)\\})", patterns: [{ include: "text.tex.latex" }] }] }, { begin: "\\G(\\{)", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" } }, end: "(?=\\\\end\\{(?:RobExt)?(?:CacheMeCode|PlaceholderPathFromCode\\*?|PlaceholderFromCode\\*?|SetPlaceholderCode\\*?)\\})", patterns: [{ begin: "\\G", end: "(\\})\\s*$", endCaptures: { 1: { name: "punctuation.definition.arguments.end.latex" } }, patterns: [{ include: "text.tex#braces" }, { include: "$self" }] }, { begin: "^(\\s*)", contentName: "meta.function.embedded.latex", end: "^\\s*(?=\\\\end\\{(?:RobExt)?(?:CacheMeCode|PlaceholderPathFromCode\\*?|PlaceholderFromCode\\*?|SetPlaceholderCode\\*?)\\})", name: "meta.embedded.block.generic.latex" }] }] }, { begin: "(?:^\\s*)?\\\\begin\\{(terminal\\*?)\\}(?=\\[|\\{)", captures: { 0: { patterns: [{ include: "#begin-env-tokenizer" }] } }, end: "\\\\end\\{\\1\\}", patterns: [{ include: "#multiline-optional-arg-no-highlight" }, { begin: "(?:\\G|(?<=\\]))(\\{)([a-zA-Z]*)(\\})", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" }, 2: { name: "variable.parameter.function.latex" }, 3: { name: "punctuation.definition.arguments.end.latex" } }, contentName: "meta.function.embedded.latex", end: "^\\s*(?=\\\\end\\{terminal\\*?\\})", name: "meta.embedded.block.generic.latex" }] }, { begin: "((\\\\)addplot)(?:\\+?)((?:\\[[^\\[]*\\]))*\\s*(gnuplot)\\s*((?:\\[[^\\[]*\\]))*\\s*(\\{)", captures: { 1: { name: "support.function.be.latex" }, 2: { name: "punctuation.definition.function.latex" }, 3: { patterns: [{ include: "#optional-arg-bracket" }] }, 4: { name: "variable.parameter.function.latex" }, 5: { patterns: [{ include: "#optional-arg-bracket" }] }, 6: { name: "punctuation.definition.arguments.begin.latex" } }, end: "\\s*(\\};)", patterns: [{ begin: "%", beginCaptures: { 0: { name: "punctuation.definition.comment.latex" } }, end: "$\\n?", name: "comment.line.percentage.latex" }, { include: "source.gnuplot" }] }, { begin: "(\\s*\\\\begin\\{((?:fboxv|boxedv|V|v|spv)erbatim\\*?)\\})", captures: { 1: { patterns: [{ include: "#begin-env-tokenizer" }] } }, contentName: "markup.raw.verbatim.latex", end: "(\\\\end\\{\\2\\})", name: "meta.function.verbatim.latex" }, { begin: "(\\s*\\\\begin\\{VerbatimOut\\}\\{[^\\}]*\\})", captures: { 1: { patterns: [{ include: "#begin-env-tokenizer" }] } }, contentName: "markup.raw.verbatim.latex", end: "(\\\\end\\{\\VerbatimOut\\})", name: "meta.function.verbatim.latex" }, { begin: "(\\s*\\\\begin\\{alltt\\})", captures: { 1: { patterns: [{ include: "#begin-env-tokenizer" }] } }, contentName: "markup.raw.verbatim.latex", end: "(\\\\end\\{alltt\\})", name: "meta.function.alltt.latex", patterns: [{ captures: { 1: { name: "punctuation.definition.function.latex" } }, match: "(\\\\)[A-Za-z]+", name: "support.function.general.latex" }] }, { begin: "(\\s*\\\\begin\\{([Cc]omment)\\})", captures: { 1: { patterns: [{ include: "#begin-env-tokenizer" }] } }, contentName: "punctuation.definition.comment.latex", end: "(\\\\end\\{\\2\\})", name: "meta.function.verbatim.latex" }, { begin: "(?:\\s*)((\\\\)(?:href|hyperref|hyperimage))(?=\\[|\\{)", beginCaptures: { 1: { name: "support.function.url.latex" } }, comment: "Captures \\command[option]{url}{optional category}{optional name}{text}", end: "(\\})", endCaptures: { 1: { name: "punctuation.definition.arguments.end.latex" } }, name: "meta.function.hyperlink.latex", patterns: [{ include: "#multiline-optional-arg-no-highlight" }, { begin: "(?:\\G|(?<=\\]))(\\{)([^}]*)(\\})(?:\\{[^}]*\\}){2}?(\\{)", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" }, 2: { name: "markup.underline.link.latex" }, 3: { name: "punctuation.definition.arguments.end.latex" }, 4: { name: "punctuation.definition.arguments.begin.latex" } }, contentName: "meta.variable.parameter.function.latex", end: "(?=\\})", patterns: [{ include: "$self" }] }, { begin: "(?:\\G|(?<=\\]))(?:(\\{)[^}]*(\\}))?(\\{)", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.latex" }, 2: { name: "punctuation.definition.arguments.end.latex" }, 3: { name: "punctuation.definition.arguments.begin.latex" } }, contentName: "meta.variable.parameter.function.latex", end: "(?=\\})", patterns: [{ include: "$self" }] }] }, { captures: { 1: { name: "support.function.url.latex" }, 2: { name: "punctuation.definition.function.latex" }, 3: { name: "punctuation.definition.arguments.begin.latex" }, 5: { name: "punctuation.definition.arguments.end.latex" }, "'": { name: "markup.underline.link.latex" } }, match: "(?:\\s*)((\\\\)url)(\\{)([^}]*)(\\})", name: "meta.function.link.url.latex" }, { captures: { 1: { patterns: [{ include: "#begin-env-tokenizer" }] } }, comment: "These two patterns match the \\begin{document} and \\end{document} commands, so that the environment matching pattern following them will ignore those commands.", match: "(\\s*\\\\begin\\{document\\})", name: "meta.function.begin-document.latex" }, { captures: { 1: { patterns: [{ include: "#begin-env-tokenizer" }] } }, match: "(\\s*\\\\end\\{document\\})", name: "meta.function.end-document.latex" }, { begin: "(?:\\s*)((\\\\)begin)(\\{)((?:\\+?array|equation|(?:IEEE)?eqnarray|multline|align|aligned|alignat|alignedat|flalign|flaligned|flalignat|split|gather|gathered|\\+?cases|(?:display)?math|\\+?[a-zA-Z]*matrix|[pbBvV]?NiceMatrix|[pbBvV]?NiceArray|(?:(?:arg)?(?:mini|maxi)))(?:\\*|!)?)(\\})(\\s*\\n)?", captures: { 1: { name: "support.function.be.latex" }, 2: { name: "punctuation.definition.function.latex" }, 3: { name: "punctuation.definition.arguments.begin.latex" }, 4: { name: "variable.parameter.function.latex" }, 5: { name: "punctuation.definition.arguments.end.latex" } }, contentName: "meta.math.block.latex support.class.math.block.environment.latex", end: "(?:\\s*)((\\\\)end)(\\{)(\\4)(\\})(?:\\s*\\n)?", name: "meta.function.environment.math.latex", patterns: [{ match: "(?<!\\\\)&", name: "keyword.control.equation.align.latex" }, { match: "\\\\\\\\", name: "keyword.control.equation.newline.latex" }, { include: "#definition-label" }, { include: "text.tex#math" }, { include: "$self" }] }, { begin: "(?:\\s*)(\\\\begin\\{empheq\\}(?:\\[.*\\])?)", captures: { 1: { patterns: [{ include: "#begin-env-tokenizer" }] } }, contentName: "meta.math.block.latex support.class.math.block.environment.latex", end: "(?:\\s*)(\\\\end\\{empheq\\})", name: "meta.function.environment.math.latex", patterns: [{ match: "(?<!\\\\)&", name: "keyword.control.equation.align.latex" }, { match: "\\\\\\\\", name: "keyword.control.equation.newline.latex" }, { include: "#definition-label" }, { include: "text.tex#math" }, { include: "$self" }] }, { begin: "(\\s*\\\\begin\\{(tabular[xy*]?|xltabular|longtable|(?:long)?tabu|(?:long|tall)?tblr|NiceTabular[X*]?|booktabs)\\}(\\s*\\n)?)", captures: { 1: { patterns: [{ include: "#begin-env-tokenizer" }] } }, contentName: "meta.data.environment.tabular.latex", end: "(\\s*\\\\end\\{(\\2)\\}(?:\\s*\\n)?)", name: "meta.function.environment.tabular.latex", patterns: [{ match: "(?<!\\\\)&", name: "keyword.control.table.cell.latex" }, { match: "\\\\\\\\", name: "keyword.control.table.newline.latex" }, { include: "$self" }] }, { begin: "(\\s*\\\\begin\\{(itemize|enumerate|description|list)\\})", captures: { 1: { patterns: [{ include: "#begin-env-tokenizer" }] } }, end: "(\\\\end\\{\\2\\}(?:\\s*\\n)?)", name: "meta.function.environment.list.latex", patterns: [{ include: "$self" }] }, { begin: "(\\s*\\\\begin\\{tikzpicture\\})", captures: { 1: { patterns: [{ include: "#begin-env-tokenizer" }] } }, end: "(\\\\end\\{tikzpicture\\}(?:\\s*\\n)?)", name: "meta.function.environment.latex.tikz", patterns: [{ include: "$self" }] }, { begin: "(\\s*\\\\begin\\{frame\\})", captures: { 1: { patterns: [{ include: "#begin-env-tokenizer" }] } }, end: "(\\\\end\\{frame\\})", name: "meta.function.environment.frame.latex", patterns: [{ include: "$self" }] }, { begin: "(\\s*\\\\begin\\{(mpost\\*?)\\})", captures: { 1: { patterns: [{ include: "#begin-env-tokenizer" }] } }, end: "(\\\\end\\{\\2\\}(?:\\s*\\n)?)", name: "meta.function.environment.latex.mpost" }, { begin: "(\\s*\\\\begin\\{markdown\\})", captures: { 1: { patterns: [{ include: "#begin-env-tokenizer" }] } }, contentName: "meta.embedded.markdown_latex_combined", end: "(\\\\end\\{markdown\\})", patterns: [{ include: "text.tex.markdown_latex_combined" }] }, { begin: "(\\s*\\\\begin\\{(\\w+\\*?)\\})", captures: { 1: { patterns: [{ include: "#begin-env-tokenizer" }] } }, end: "(\\\\end\\{\\2\\}(?:\\s*\\n)?)", name: "meta.function.environment.general.latex", patterns: [{ include: "$self" }] }, { captures: { 1: { name: "storage.type.function.latex" }, 2: { name: "punctuation.definition.function.latex" }, 3: { name: "punctuation.definition.begin.latex" }, 4: { name: "support.function.general.latex" }, 5: { name: "punctuation.definition.function.latex" }, 6: { name: "punctuation.definition.end.latex" } }, match: "((\\\\)(?:newcommand|renewcommand|(?:re)?newrobustcmd|DeclareRobustCommand))\\*?({)((\\\\)[^}]*)(})" }, { begin: "((\\\\)marginpar)((?:\\[[^\\[]*?\\])*)(\\{)", beginCaptures: { 1: { name: "support.function.marginpar.latex" }, 2: { name: "punctuation.definition.function.latex" }, 3: { patterns: [{ include: "#optional-arg-bracket" }] }, 4: { name: "punctuation.definition.marginpar.begin.latex" } }, contentName: "meta.paragraph.margin.latex", end: "\\}", endCaptures: { 0: { name: "punctuation.definition.marginpar.end.latex" } }, patterns: [{ include: "text.tex#braces" }, { include: "$self" }] }, { begin: "((\\\\)footnote)((?:\\[[^\\[]*?\\])*)(\\{)", beginCaptures: { 1: { name: "support.function.footnote.latex" }, 2: { name: "punctuation.definition.function.latex" }, 3: { patterns: [{ include: "#optional-arg-bracket" }] }, 4: { name: "punctuation.definition.footnote.begin.latex" } }, contentName: "entity.name.footnote.latex", end: "\\}", endCaptures: { 0: { name: "punctuation.definition.footnote.end.latex" } }, patterns: [{ include: "text.tex#braces" }, { include: "$self" }] }, { begin: "((\\\\)emph)(\\{)", beginCaptures: { 1: { name: "support.function.emph.latex" }, 2: { name: "punctuation.definition.function.latex" }, 3: { name: "punctuation.definition.emph.begin.latex" } }, contentName: "markup.italic.emph.latex", end: "\\}", endCaptures: { 0: { name: "punctuation.definition.emph.end.latex" } }, name: "meta.function.emph.latex", patterns: [{ include: "text.tex#braces" }, { include: "$self" }] }, { begin: "((\\\\)textit)(\\{)", captures: { 1: { name: "support.function.textit.latex" }, 2: { name: "punctuation.definition.function.latex" }, 3: { name: "punctuation.definition.textit.begin.latex" } }, comment: `We put the keyword in a capture and name this capture, so that disabling spell checking for “keyword” won't be inherited by the argument to \\textit{...}.

Put specific matches for particular LaTeX keyword.functions before the last two more general functions`, contentName: "markup.italic.textit.latex", end: "\\}", endCaptures: { 0: { name: "punctuation.definition.textit.end.latex" } }, name: "meta.function.textit.latex", patterns: [{ include: "text.tex#braces" }, { include: "$self" }] }, { begin: "((\\\\)textbf)(\\{)", captures: { 1: { name: "support.function.textbf.latex" }, 2: { name: "punctuation.definition.function.latex" }, 3: { name: "punctuation.definition.textbf.begin.latex" } }, contentName: "markup.bold.textbf.latex", end: "\\}", endCaptures: { 0: { name: "punctuation.definition.textbf.end.latex" } }, name: "meta.function.textbf.latex", patterns: [{ include: "text.tex#braces" }, { include: "$self" }] }, { begin: "((\\\\)texttt)(\\{)", captures: { 1: { name: "support.function.texttt.latex" }, 2: { name: "punctuation.definition.function.latex" }, 3: { name: "punctuation.definition.texttt.begin.latex" } }, contentName: "markup.raw.texttt.latex", end: "\\}", endCaptures: { 0: { name: "punctuation.definition.texttt.end.latex" } }, name: "meta.function.texttt.latex", patterns: [{ include: "text.tex#braces" }, { include: "$self" }] }, { captures: { 0: { name: "keyword.other.item.latex" }, 1: { name: "punctuation.definition.keyword.latex" } }, match: "(\\\\)item\\b", name: "meta.scope.item.latex" }, { begin: "((\\\\)(?:[aA]uto|foot|full|no|ref|short|[tT]ext|[pP]aren|[sS]mart)?[cC]ite(?:al)?(?:p|s|t|author|year(?:par)?|title)?[ANP]*\\*?)((?:(?:\\([^\\)]*\\)){0,2}(?:\\[[^\\]]*\\]){0,2}\\{[\\p{Alphabetic}\\p{Number}_:.-]*\\})*)(<[^\\]<>]*>)?((?:\\[[^\\]]*\\])*)(\\{)", captures: { 1: { name: "keyword.control.cite.latex" }, 2: { name: "punctuation.definition.keyword.latex" }, 3: { patterns: [{ include: "#autocites-arg" }] }, 4: { patterns: [{ include: "#optional-arg-angle-no-highlight" }] }, 5: { patterns: [{ include: "#optional-arg-bracket-no-highlight" }] }, 6: { name: "punctuation.definition.arguments.begin.latex" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.arguments.end.latex" } }, name: "meta.citation.latex", patterns: [{ captures: { 1: { name: "comment.line.percentage.tex" }, 2: { name: "punctuation.definition.comment.tex" } }, match: "((%).*)$" }, { match: "[\\p{Alphabetic}\\p{Number}:.-]+", name: "constant.other.reference.citation.latex" }] }, { begin: "((\\\\)bibentry)(\\{)", captures: { 1: { name: "keyword.control.cite.latex" }, 2: { name: "punctuation.definition.keyword.latex" }, 3: { name: "punctuation.definition.arguments.begin.latex" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.arguments.end.latex" } }, name: "meta.citation.latex", patterns: [{ match: "[\\p{Alphabetic}\\p{Number}:.]+", name: "constant.other.reference.citation.latex" }] }, { begin: "((\\\\)(?:\\w*[rR]ef\\*?))(?:\\[[^\\]]*\\])?(\\{)", beginCaptures: { 1: { name: "keyword.control.ref.latex" }, 2: { name: "punctuation.definition.keyword.latex" }, 3: { name: "punctuation.definition.arguments.begin.latex" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.arguments.end.latex" } }, name: "meta.reference.label.latex", patterns: [{ match: "[\\p{Alphabetic}\\p{Number}\\.,:/*!^_-]", name: "constant.other.reference.label.latex" }] }, { include: "#definition-label" }, { begin: "((\\\\)(?:verb|Verb|spverb)\\*?)\\s*((\\\\)scantokens)(\\{)", beginCaptures: { 1: { name: "support.function.verb.latex" }, 2: { name: "punctuation.definition.function.latex" }, 3: { name: "support.function.verb.latex" }, 4: { name: "punctuation.definition.verb.latex" }, 5: { name: "punctuation.definition.begin.latex" } }, contentName: "markup.raw.verb.latex", end: "(\\})", endCaptures: { 1: { name: "punctuation.definition.end.latex" } }, name: "meta.function.verb.latex", patterns: [{ include: "$self" }] }, { captures: { 1: { name: "support.function.verb.latex" }, 2: { name: "punctuation.definition.function.latex" }, 3: { name: "punctuation.definition.verb.latex" }, 4: { name: "markup.raw.verb.latex" }, 5: { name: "punctuation.definition.verb.latex" } }, match: "((\\\\)(?:verb|Verb|spverb)\\*?)\\s*((?<=\\s)\\S|[^a-zA-Z])(.*?)(\\3|$)", name: "meta.function.verb.latex" }, { captures: { 1: { name: "support.function.verb.latex" }, 2: { name: "punctuation.definition.function.latex" }, 3: { patterns: [{ include: "#optional-arg-bracket" }] }, 4: { name: "punctuation.definition.arguments.begin.latex" }, 5: { name: "punctuation.definition.arguments.end.latex" }, 6: { name: "punctuation.definition.verb.latex" }, 7: { name: "markup.raw.verb.latex" }, 8: { name: "punctuation.definition.verb.latex" }, 9: { name: "punctuation.definition.verb.latex" }, 10: { name: "markup.raw.verb.latex" }, 11: { name: "punctuation.definition.verb.latex" } }, match: "((\\\\)(?:mint|mintinline))((?:\\[[^\\[]*?\\])?)(\\{)[a-zA-Z]*(\\})(?:(?:([^a-zA-Z\\{])(.*?)(\\6))|(?:(\\{)(.*?)(\\})))", name: "meta.function.verb.latex" }, { captures: { 1: { name: "support.function.verb.latex" }, 2: { name: "punctuation.definition.function.latex" }, 3: { patterns: [{ include: "#optional-arg-bracket" }] }, 4: { name: "punctuation.definition.verb.latex" }, 5: { name: "markup.raw.verb.latex" }, 6: { name: "punctuation.definition.verb.latex" }, 7: { name: "punctuation.definition.verb.latex" }, 8: { name: "markup.raw.verb.latex" }, 9: { name: "punctuation.definition.verb.latex" } }, match: "((\\\\)[a-z]+inline)((?:\\[[^\\[]*?\\])?)(?:(?:([^a-zA-Z\\{])(.*?)(\\4))|(?:(\\{)(.*?)(\\})))", name: "meta.function.verb.latex" }, { captures: { 1: { name: "support.function.verb.latex" }, 2: { name: "punctuation.definition.function.latex" }, 3: { patterns: [{ include: "#optional-arg-bracket" }] }, 4: { name: "punctuation.definition.verb.latex" }, 5: { name: "source.python", patterns: [{ include: "source.python" }] }, 6: { name: "punctuation.definition.verb.latex" }, 7: { name: "punctuation.definition.verb.latex" }, 8: { name: "source.python", patterns: [{ include: "source.python" }] }, 9: { name: "punctuation.definition.verb.latex" } }, match: "((\\\\)(?:(?:py|pycon|pylab|pylabcon|sympy|sympycon)[cv]?|pyq|pycq|pyif))((?:\\[[^\\[]*?\\])?)(?:(?:([^a-zA-Z\\{])(.*?)(\\4))|(?:(\\{)(.*?)(\\})))", name: "meta.function.verb.latex" }, { captures: { 1: { name: "support.function.verb.latex" }, 2: { name: "punctuation.definition.function.latex" }, 3: { patterns: [{ include: "#optional-arg-bracket" }] }, 4: { name: "punctuation.definition.verb.latex" }, 5: { name: "source.julia", patterns: [{ include: "source.julia" }] }, 6: { name: "punctuation.definition.verb.latex" }, 7: { name: "punctuation.definition.verb.latex" }, 8: { name: "source.julia", patterns: [{ include: "source.julia" }] }, 9: { name: "punctuation.definition.verb.latex" } }, match: "((\\\\)(?:jl|julia)[cv]?)((?:\\[[^\\[]*?\\])?)(?:(?:([^a-zA-Z\\{])(.*?)(\\4))|(?:(\\{)(.*?)(\\})))", name: "meta.function.verb.latex" }, { begin: "((\\\\)(?:directlua|luadirect))(\\{)", beginCaptures: { 1: { name: "support.function.verb.latex" }, 2: { name: "punctuation.definition.function.latex" }, 3: { name: "punctuation.definition.arguments.begin.latex" } }, contentName: "source.lua", end: "\\}", endCaptures: { 0: { name: "punctuation.definition.arguments.end.latex" } }, patterns: [{ include: "source.lua" }] }, { match: "\\\\(?:newline|pagebreak|clearpage|linebreak|pause)(?:\\b)", name: "keyword.control.layout.latex" }, { begin: "\\\\\\(", beginCaptures: { 0: { name: "punctuation.definition.string.begin.latex" } }, end: "\\\\\\)", endCaptures: { 0: { name: "punctuation.definition.string.end.latex" } }, name: "meta.math.block.latex support.class.math.block.environment.latex", patterns: [{ include: "text.tex#math" }, { include: "$self" }] }, { begin: "\\$\\$", beginCaptures: { 0: { name: "punctuation.definition.string.begin.latex" } }, end: "\\$\\$", endCaptures: { 0: { name: "punctuation.definition.string.end.latex" } }, name: "meta.math.block.latex support.class.math.block.environment.latex", patterns: [{ match: "\\\\\\$", name: "constant.character.escape.latex" }, { include: "text.tex#math" }, { include: "$self" }] }, { begin: "\\$", beginCaptures: { 0: { name: "punctuation.definition.string.begin.tex" } }, end: "\\$", endCaptures: { 0: { name: "punctuation.definition.string.end.tex" } }, name: "meta.math.block.tex support.class.math.block.tex", patterns: [{ match: "\\\\\\$", name: "constant.character.escape.latex" }, { include: "text.tex#math" }, { include: "$self" }] }, { begin: "\\\\\\[", beginCaptures: { 0: { name: "punctuation.definition.string.begin.latex" } }, end: "\\\\\\]", endCaptures: { 0: { name: "punctuation.definition.string.end.latex" } }, name: "meta.math.block.latex support.class.math.block.environment.latex", patterns: [{ include: "text.tex#math" }, { include: "$self" }] }, { captures: { 1: { name: "punctuation.definition.constant.latex" } }, match: "(\\\\)(text(s(terling|ixoldstyle|urd|e(ction|venoldstyle|rvicemark))|yen|n(ineoldstyle|umero|aira)|c(ircledP|o(py(left|right)|lonmonetary)|urrency|e(nt(oldstyle)?|lsius))|t(hree(superior|oldstyle|quarters(emdash)?)|i(ldelow|mes)|w(o(superior|oldstyle)|elveudash)|rademark)|interrobang(down)?|zerooldstyle|o(hm|ne(superior|half|oldstyle|quarter)|penbullet|rd(feminine|masculine))|d(i(scount|ed|v(orced)?)|o(ng|wnarrow|llar(oldstyle)?)|egree|agger(dbl)?|blhyphen(char)?)|uparrow|p(ilcrow|e(so|r(t(housand|enthousand)|iodcentered))|aragraph|m)|e(stimated|ightoldstyle|uro)|quotes(traight(dblbase|base)|ingle)|f(iveoldstyle|ouroldstyle|lorin|ractionsolidus)|won|l(not|ira|e(ftarrow|af)|quill|angle|brackdbl)|a(s(cii(caron|dieresis|acute|grave|macron|breve)|teriskcentered)|cutedbl)|r(ightarrow|e(cipe|ferencemark|gistered)|quill|angle|brackdbl)|g(uarani|ravedbl)|m(ho|inus|u(sicalnote)?|arried)|b(igcircle|orn|ullet|lank|a(ht|rdbl)|rokenbar)))\\b", name: "constant.character.latex" }, { captures: { 1: { name: "punctuation.definition.variable.latex" } }, match: "(\\\\)(?:[cgl]_+[_\\p{Alphabetic}@]+_[a-z]+|[qs]_[_\\p{Alphabetic}@]+[\\p{Alphabetic}@])", name: "variable.other.latex3.latex" }, { captures: { 1: { name: "punctuation.definition.column-specials.begin.latex" }, 2: { name: "punctuation.definition.column-specials.end.latex" } }, match: "(?:<|>)(\\{)\\$(\\})", name: "meta.column-specials.latex" }, { include: "text.tex" }], repository: { "autocites-arg": { patterns: [{ captures: { 1: { patterns: [{ include: "#optional-arg-parenthesis-no-highlight" }] }, 2: { patterns: [{ include: "#optional-arg-bracket-no-highlight" }] }, 3: { name: "punctuation.definition.arguments.begin.latex" }, 4: { name: "constant.other.reference.citation.latex" }, 5: { name: "punctuation.definition.arguments.end.latex" }, 6: { patterns: [{ include: "#autocites-arg" }] } }, match: "((?:\\([^\\)]*\\)){0,2})((?:\\[[^\\]]*\\]){0,2})(\\{)([\\p{Alphabetic}\\p{Number}_:.-]+)(\\})(.*)" }] }, "begin-env-tokenizer": { captures: { 1: { name: "support.function.be.latex" }, 2: { name: "punctuation.definition.function.latex" }, 3: { name: "punctuation.definition.arguments.begin.latex" }, 4: { name: "variable.parameter.function.latex" }, 5: { name: "punctuation.definition.arguments.end.latex" }, 6: { name: "punctuation.definition.arguments.optional.begin.latex" }, 7: { patterns: [{ include: "$self" }] }, 8: { name: "punctuation.definition.arguments.optional.end.latex" }, 9: { name: "punctuation.definition.arguments.begin.latex" }, 10: { name: "variable.parameter.function.latex" }, 11: { name: "punctuation.definition.arguments.end.latex" } }, match: "\\s*((\\\\)(?:begin|end))(\\{)([a-zA-Z]*\\*?)(\\})(?:(\\[)([^\\]]*)(\\])){,2}(?:(\\{)([^{}]*)(\\}))?" }, "definition-label": { begin: "((\\\\)z?label)((?:\\[[^\\[]*?\\])*)(\\{)", beginCaptures: { 1: { name: "keyword.control.label.latex" }, 2: { name: "punctuation.definition.keyword.latex" }, 3: { patterns: [{ include: "#optional-arg-bracket" }] }, 4: { name: "punctuation.definition.arguments.begin.latex" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.arguments.end.latex" } }, name: "meta.definition.label.latex", patterns: [{ match: "[\\p{Alphabetic}\\p{Number}\\.,:/*!^_-]", name: "variable.parameter.definition.label.latex" }] }, "multiline-optional-arg": { begin: "\\G\\[", beginCaptures: { 0: { name: "punctuation.definition.arguments.optional.begin.latex" } }, contentName: "variable.parameter.function.latex", end: "\\]", endCaptures: { 0: { name: "punctuation.definition.arguments.optional.end.latex" } }, name: "meta.parameter.optional.latex", patterns: [{ include: "$self" }] }, "multiline-optional-arg-no-highlight": { begin: "\\G\\[", beginCaptures: { 0: { name: "punctuation.definition.arguments.optional.begin.latex" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.arguments.optional.end.latex" } }, name: "meta.parameter.optional.latex", patterns: [{ include: "$self" }] }, "optional-arg-angle-no-highlight": { patterns: [{ captures: { 1: { name: "punctuation.definition.arguments.optional.begin.latex" }, 2: { name: "punctuation.definition.arguments.optional.end.latex" } }, match: "(<)[^<]*?(>)", name: "meta.parameter.optional.latex" }] }, "optional-arg-bracket": { patterns: [{ captures: { 1: { name: "punctuation.definition.arguments.optional.begin.latex" }, 2: { name: "variable.parameter.function.latex" }, 3: { name: "punctuation.definition.arguments.optional.end.latex" } }, match: "(\\[)([^\\[]*?)(\\])", name: "meta.parameter.optional.latex" }] }, "optional-arg-bracket-no-highlight": { patterns: [{ captures: { 1: { name: "punctuation.definition.arguments.optional.begin.latex" }, 2: { name: "punctuation.definition.arguments.optional.end.latex" } }, match: "(\\[)[^\\[]*?(\\])", name: "meta.parameter.optional.latex" }] }, "optional-arg-parenthesis": { patterns: [{ captures: { 1: { name: "punctuation.definition.arguments.optional.begin.latex" }, 2: { name: "variable.parameter.function.latex" }, 3: { name: "punctuation.definition.arguments.optional.end.latex" } }, match: "(\\()([^\\(]*?)(\\))", name: "meta.parameter.optional.latex" }] }, "optional-arg-parenthesis-no-highlight": { patterns: [{ captures: { 1: { name: "punctuation.definition.arguments.optional.begin.latex" }, 2: { name: "punctuation.definition.arguments.optional.end.latex" } }, match: "(\\()[^\\(]*?(\\))", name: "meta.parameter.optional.latex" }] } }, scopeName: "text.tex.latex", embeddedLangs: ["tex", "shellscript", "css", "gnuplot", "haskell", "html", "java", "julia", "javascript", "lua", "python", "ruby", "rust", "typescript", "xml", "yaml", "scala"] });
var on = [
  ...Xe,
  ...o,
  ...n,
  ...Ye,
  ...Qe,
  ...t,
  ...w,
  ...nn,
  ...e,
  ...g,
  ...f,
  ..._,
  ...S,
  ...r,
  ...s,
  ...u,
  ...rn,
  sn
];
const cn = Object.freeze({ displayName: "Liquid", fileTypes: ["liquid"], foldingStartMarker: `(?x)
{%
  -?
  \\s*
  (capture|case|comment|for|form|if|javascript|paginate|schema|style)
  [^(%})]+
%}
`, foldingStopMarker: `(?x)
{%
  \\s*
  (endcapture|endcase|endcomment|endfor|endform|endif|endjavascript|endpaginate|endschema|endstyle)
  [^(%})]+
%}
`, injections: { "L:meta.embedded.block.js, L:meta.embedded.block.css, L:meta.embedded.block.html, L:string.quoted": { patterns: [{ include: "#injection" }] } }, name: "liquid", patterns: [{ include: "#core" }], repository: { attribute: { begin: "\\w+:", beginCaptures: { 0: { name: "entity.other.attribute-name.liquid" } }, end: "(?=,|%}|}}|\\|)", patterns: [{ include: "#value_expression" }] }, attribute_liquid: { begin: "\\w+:", beginCaptures: { 0: { name: "entity.other.attribute-name.liquid" } }, end: "(?=,|\\|)|$", patterns: [{ include: "#value_expression" }] }, comment_block: { begin: "{%-?\\s*comment\\s*-?%}", end: "{%-?\\s*endcomment\\s*-?%}", name: "comment.block.liquid", patterns: [{ include: "#comment_block" }, { match: "(.(?!{%-?\\s*(comment|endcomment)\\s*-?%}))*." }] }, core: { patterns: [{ include: "#raw_tag" }, { include: "#comment_block" }, { include: "#style_codefence" }, { include: "#stylesheet_codefence" }, { include: "#json_codefence" }, { include: "#javascript_codefence" }, { include: "#object" }, { include: "#tag" }, { include: "text.html.basic" }] }, filter: { captures: { 1: { name: "support.function.liquid" } }, match: "\\|\\s*((?![\\.0-9])[a-zA-Z0-9_-]+\\:?)\\s*" }, injection: { patterns: [{ include: "#raw_tag" }, { include: "#comment_block" }, { include: "#object" }, { include: "#tag_injection" }] }, invalid_range: { match: "\\((.(?!\\.\\.))+\\)", name: "invalid.illegal.range.liquid" }, javascript_codefence: { begin: "({%-?)\\s*(javascript)\\s*(-?%})", beginCaptures: { 0: { name: "meta.tag.metadata.javascript.start.liquid" }, 1: { name: "punctuation.definition.tag.begin.liquid" }, 2: { name: "entity.name.tag.javascript.liquid" }, 3: { name: "punctuation.definition.tag.begin.liquid" } }, contentName: "meta.embedded.block.js", end: "({%-?)\\s*(endjavascript)\\s*(-?%})", endCaptures: { 0: { name: "meta.tag.metadata.javascript.end.liquid" }, 1: { name: "punctuation.definition.tag.end.liquid" }, 2: { name: "entity.name.tag.javascript.liquid" }, 3: { name: "punctuation.definition.tag.end.liquid" } }, name: "meta.block.javascript.liquid", patterns: [{ include: "source.js" }] }, json_codefence: { begin: "({%-?)\\s*(schema)\\s*(-?%})", beginCaptures: { 0: { name: "meta.tag.metadata.schema.start.liquid" }, 1: { name: "punctuation.definition.tag.begin.liquid" }, 2: { name: "entity.name.tag.schema.liquid" }, 3: { name: "punctuation.definition.tag.begin.liquid" } }, contentName: "meta.embedded.block.json", end: "({%-?)\\s*(endschema)\\s*(-?%})", endCaptures: { 0: { name: "meta.tag.metadata.schema.end.liquid" }, 1: { name: "punctuation.definition.tag.end.liquid" }, 2: { name: "entity.name.tag.schema.liquid" }, 3: { name: "punctuation.definition.tag.end.liquid" } }, name: "meta.block.schema.liquid", patterns: [{ include: "source.json" }] }, language_constant: { match: "\\b(false|true|nil|blank)\\b|empty(?!\\?)", name: "constant.language.liquid" }, number: { match: "((-|\\+)\\s*)?[0-9]+(\\.[0-9]+)?", name: "constant.numeric.liquid" }, object: { begin: "(?<!comment %})(?<!comment -%})(?<!comment%})(?<!comment-%})(?<!raw %})(?<!raw -%})(?<!raw%})(?<!raw-%}){{-?", beginCaptures: { 0: { name: "punctuation.definition.tag.begin.liquid" } }, end: "-?}}", endCaptures: { 0: { name: "punctuation.definition.tag.end.liquid" } }, name: "meta.object.liquid", patterns: [{ include: "#filter" }, { include: "#attribute" }, { include: "#value_expression" }] }, operator: { captures: { 1: { name: "keyword.operator.expression.liquid" } }, match: "(?:(?<=\\s)|\\b)(\\=\\=|!\\=|\\>|\\<|\\>\\=|\\<\\=|or|and|contains)(?:(?=\\s)|\\b)" }, range: { begin: "\\(", beginCaptures: { 0: { name: "punctuation.section.parens.begin.liquid" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.parens.end.liquid" } }, name: "meta.range.liquid", patterns: [{ match: "\\.\\.", name: "punctuation.range.liquid" }, { include: "#variable_lookup" }, { include: "#number" }] }, raw_tag: { begin: "{%-?\\s*(raw)\\s*-?%}", beginCaptures: { 1: { name: "entity.name.tag.liquid" } }, contentName: "string.unquoted.liquid", end: "{%-?\\s*(endraw)\\s*-?%}", endCaptures: { 1: { name: "entity.name.tag.liquid" } }, name: "meta.entity.tag.raw.liquid", patterns: [{ match: "(.(?!{%-?\\s*endraw\\s*-?%}))*." }] }, string: { patterns: [{ include: "#string_single" }, { include: "#string_double" }] }, string_double: { begin: '"', end: '"', name: "string.quoted.double.liquid" }, string_single: { begin: "'", end: "'", name: "string.quoted.single.liquid" }, style_codefence: { begin: "({%-?)\\s*(style)\\s*(-?%})", beginCaptures: { 0: { name: "meta.tag.metadata.style.start.liquid" }, 1: { name: "punctuation.definition.tag.begin.liquid" }, 2: { name: "entity.name.tag.style.liquid" }, 3: { name: "punctuation.definition.tag.begin.liquid" } }, contentName: "meta.embedded.block.css", end: "({%-?)\\s*(endstyle)\\s*(-?%})", endCaptures: { 0: { name: "meta.tag.metadata.style.end.liquid" }, 1: { name: "punctuation.definition.tag.end.liquid" }, 2: { name: "entity.name.tag.style.liquid" }, 3: { name: "punctuation.definition.tag.end.liquid" } }, name: "meta.block.style.liquid", patterns: [{ include: "source.css" }] }, stylesheet_codefence: { begin: "({%-?)\\s*(stylesheet)\\s*(-?%})", beginCaptures: { 0: { name: "meta.tag.metadata.style.start.liquid" }, 1: { name: "punctuation.definition.tag.begin.liquid" }, 2: { name: "entity.name.tag.style.liquid" }, 3: { name: "punctuation.definition.tag.begin.liquid" } }, contentName: "meta.embedded.block.css", end: "({%-?)\\s*(endstylesheet)\\s*(-?%})", endCaptures: { 0: { name: "meta.tag.metadata.style.end.liquid" }, 1: { name: "punctuation.definition.tag.end.liquid" }, 2: { name: "entity.name.tag.style.liquid" }, 3: { name: "punctuation.definition.tag.end.liquid" } }, name: "meta.block.style.liquid", patterns: [{ include: "source.css" }] }, tag: { begin: "(?<!comment %})(?<!comment -%})(?<!comment%})(?<!comment-%})(?<!raw %})(?<!raw -%})(?<!raw%})(?<!raw-%}){%-?", beginCaptures: { 0: { name: "punctuation.definition.tag.begin.liquid" } }, end: "-?%}", endCaptures: { 0: { name: "punctuation.definition.tag.end.liquid" } }, name: "meta.tag.liquid", patterns: [{ include: "#tag_body" }] }, tag_assign: { begin: "(?:(?:(?<={%)|(?<={%-)|^)\\s*)(assign|echo)\\b", beginCaptures: { 1: { name: "entity.name.tag.liquid" } }, end: "(?=%})", name: "meta.entity.tag.liquid", patterns: [{ include: "#filter" }, { include: "#attribute" }, { include: "#value_expression" }] }, tag_assign_liquid: { begin: "(?:(?:(?<={%)|(?<={%-)|^)\\s*)(assign|echo)\\b", beginCaptures: { 1: { name: "entity.name.tag.liquid" } }, end: "$", name: "meta.entity.tag.liquid", patterns: [{ include: "#filter" }, { include: "#attribute_liquid" }, { include: "#value_expression" }] }, tag_body: { patterns: [{ include: "#tag_liquid" }, { include: "#tag_assign" }, { include: "#tag_comment_inline" }, { include: "#tag_case" }, { include: "#tag_conditional" }, { include: "#tag_for" }, { include: "#tag_paginate" }, { include: "#tag_render" }, { include: "#tag_tablerow" }, { include: "#tag_expression" }] }, tag_case: { begin: "(?:(?:(?<={%)|(?<={%-)|^)\\s*)(case|when)\\b", beginCaptures: { 1: { name: "keyword.control.case.liquid" } }, end: "(?=%})", name: "meta.entity.tag.case.liquid", patterns: [{ include: "#value_expression" }] }, tag_case_liquid: { begin: "(?:(?:(?<={%)|(?<={%-)|^)\\s*)(case|when)\\b", beginCaptures: { 1: { name: "keyword.control.case.liquid" } }, end: "$", name: "meta.entity.tag.case.liquid", patterns: [{ include: "#value_expression" }] }, tag_comment_block_liquid: { begin: "(?:^\\s*)(comment)\\b", end: "(?:^\\s*)(endcomment)\\b", name: "comment.block.liquid", patterns: [{ include: "#tag_comment_block_liquid" }, { match: "(?:^\\s*)(?!(comment|endcomment)).*" }] }, tag_comment_inline: { begin: "#", end: "(?=%})", name: "comment.line.number-sign.liquid" }, tag_comment_inline_liquid: { begin: "(?:^\\s*)#.*", end: "$", name: "comment.line.number-sign.liquid" }, tag_conditional: { begin: "(?:(?:(?<={%)|(?<={%-)|^)\\s*)(if|elsif|unless)\\b", beginCaptures: { 1: { name: "keyword.control.conditional.liquid" } }, end: "(?=%})", name: "meta.entity.tag.conditional.liquid", patterns: [{ include: "#value_expression" }] }, tag_conditional_liquid: { begin: "(?:(?:(?<={%)|(?<={%-)|^)\\s*)(if|elsif|unless)\\b", beginCaptures: { 1: { name: "keyword.control.conditional.liquid" } }, end: "$", name: "meta.entity.tag.conditional.liquid", patterns: [{ include: "#value_expression" }] }, tag_expression: { patterns: [{ include: "#tag_expression_without_arguments" }, { begin: "(?:(?:(?<={%)|(?<={%-)|^)\\s*)(\\w+)", beginCaptures: { 1: { name: "entity.name.tag.liquid" } }, end: "(?=%})", name: "meta.entity.tag.liquid", patterns: [{ include: "#value_expression" }] }] }, tag_expression_liquid: { patterns: [{ include: "#tag_expression_without_arguments" }, { begin: "(?:(?:(?<={%)|(?<={%-)|^)\\s*)(\\w+)", beginCaptures: { 1: { name: "entity.name.tag.liquid" } }, end: "$", name: "meta.entity.tag.liquid", patterns: [{ include: "#value_expression" }] }] }, tag_expression_without_arguments: { patterns: [{ captures: { 1: { name: "keyword.control.conditional.liquid" } }, match: "(?:(?:(?<={%)|(?<={%-)|^)\\s*)(endunless|endif)\\b" }, { captures: { 1: { name: "keyword.control.loop.liquid" } }, match: "(?:(?:(?<={%)|(?<={%-)|^)\\s*)(endfor|endtablerow|endpaginate)\\b" }, { captures: { 1: { name: "keyword.control.case.liquid" } }, match: "(?:(?:(?<={%)|(?<={%-)|^)\\s*)(endcase)\\b" }, { captures: { 1: { name: "keyword.control.other.liquid" } }, match: "(?:(?:(?<={%)|(?<={%-)|^)\\s*)(capture|case|comment|for|form|if|javascript|paginate|schema|style)\\b" }, { captures: { 1: { name: "keyword.control.other.liquid" } }, match: "(?:(?:(?<={%)|(?<={%-)|^)\\s*)(endcapture|endcase|endcomment|endfor|endform|endif|endjavascript|endpaginate|endschema|endstyle)\\b" }, { captures: { 1: { name: "keyword.control.other.liquid" } }, match: "(?:(?:(?<={%)|(?<={%-)|^)\\s*)(else|break|continue)\\b" }] }, tag_for: { begin: "(?:(?:(?<={%)|(?<={%-)|^)\\s*)(for)\\b", beginCaptures: { 1: { name: "keyword.control.for.liquid" } }, end: "(?=%})", name: "meta.entity.tag.for.liquid", patterns: [{ include: "#tag_for_body" }] }, tag_for_body: { patterns: [{ match: "\\b(in|reversed)\\b", name: "keyword.control.liquid" }, { match: "\\b(offset|limit):", name: "keyword.control.liquid" }, { include: "#value_expression" }] }, tag_for_liquid: { begin: "(?:(?:(?<={%)|(?<={%-)|^)\\s*)(for)\\b", beginCaptures: { 1: { name: "keyword.control.for.liquid" } }, end: "$", name: "meta.entity.tag.for.liquid", patterns: [{ include: "#tag_for_body" }] }, tag_injection: { begin: "(?<!comment %})(?<!comment -%})(?<!comment%})(?<!comment-%})(?<!raw %})(?<!raw -%})(?<!raw%})(?<!raw-%}){%-?(?!-?\\s*(endstyle|endjavascript|endcomment|endraw))", beginCaptures: { 0: { name: "punctuation.definition.tag.end.liquid" } }, end: "-?%}", endCaptures: { 0: { name: "punctuation.definition.tag.end.liquid" } }, name: "meta.tag.liquid", patterns: [{ include: "#tag_body" }] }, tag_liquid: { begin: "(?:(?:(?<={%)|(?<={%-)|^)\\s*)(liquid)\\b", beginCaptures: { 1: { name: "keyword.control.liquid.liquid" } }, end: "(?=%})", name: "meta.entity.tag.liquid.liquid", patterns: [{ include: "#tag_comment_block_liquid" }, { include: "#tag_comment_inline_liquid" }, { include: "#tag_assign_liquid" }, { include: "#tag_case_liquid" }, { include: "#tag_conditional_liquid" }, { include: "#tag_for_liquid" }, { include: "#tag_paginate_liquid" }, { include: "#tag_render_liquid" }, { include: "#tag_tablerow_liquid" }, { include: "#tag_expression_liquid" }] }, tag_paginate: { begin: "(?:(?:(?<={%)|(?<={%-)|^)\\s*)(paginate)\\b", beginCaptures: { 1: { name: "keyword.control.paginate.liquid" } }, end: "(?=%})", name: "meta.entity.tag.paginate.liquid", patterns: [{ include: "#tag_paginate_body" }] }, tag_paginate_body: { patterns: [{ match: "\\b(by)\\b", name: "keyword.control.liquid" }, { include: "#value_expression" }] }, tag_paginate_liquid: { begin: "(?:(?:(?<={%)|(?<={%-)|^)\\s*)(paginate)\\b", beginCaptures: { 1: { name: "keyword.control.paginate.liquid" } }, end: "$", name: "meta.entity.tag.paginate.liquid", patterns: [{ include: "#tag_paginate_body" }] }, tag_render: { begin: "(?:(?:(?<={%)|(?<={%-)|^)\\s*)(render)\\b", beginCaptures: { 1: { name: "entity.name.tag.render.liquid" } }, end: "(?=%})", name: "meta.entity.tag.render.liquid", patterns: [{ include: "#tag_render_special_keywords" }, { include: "#attribute" }, { include: "#value_expression" }] }, tag_render_liquid: { begin: "(?:(?:(?<={%)|(?<={%-)|^)\\s*)(render)\\b", beginCaptures: { 1: { name: "entity.name.tag.render.liquid" } }, end: "$", name: "meta.entity.tag.render.liquid", patterns: [{ include: "#tag_render_special_keywords" }, { include: "#attribute_liquid" }, { include: "#value_expression" }] }, tag_render_special_keywords: { match: "\\b(with|as|for)\\b", name: "keyword.control.other.liquid" }, tag_tablerow: { begin: "(?:(?:(?<={%)|(?<={%-)|^)\\s*)(tablerow)\\b", beginCaptures: { 1: { name: "keyword.control.tablerow.liquid" } }, end: "(?=%})", name: "meta.entity.tag.tablerow.liquid", patterns: [{ include: "#tag_tablerow_body" }] }, tag_tablerow_body: { patterns: [{ match: "\\b(in)\\b", name: "keyword.control.liquid" }, { match: "\\b(cols|offset|limit):", name: "keyword.control.liquid" }, { include: "#value_expression" }] }, tag_tablerow_liquid: { begin: "(?:(?:(?<={%)|(?<={%-)|^)\\s*)(tablerow)\\b", beginCaptures: { 1: { name: "keyword.control.tablerow.liquid" } }, end: "$", name: "meta.entity.tag.tablerow.liquid", patterns: [{ include: "#tag_tablerow_body" }] }, value_expression: { patterns: [{ captures: { 2: { name: "invalid.illegal.filter.liquid" }, 3: { name: "invalid.illegal.filter.liquid" } }, match: "(\\[)(\\|)(?=[^\\]]*)(?=\\])" }, { match: "(?<=\\s)(\\+|\\-|\\/|\\*)(?=\\s)", name: "invalid.illegal.filter.liquid" }, { include: "#language_constant" }, { include: "#operator" }, { include: "#invalid_range" }, { include: "#range" }, { include: "#number" }, { include: "#string" }, { include: "#variable_lookup" }] }, variable_lookup: { patterns: [{ match: "\\b(additional_checkout_buttons|address|all_country_option_tags|all_products|article|articles|block|blog|blogs|canonical_url|cart|checkout|collection|collections|comment|content_for_additional_checkout_buttons|content_for_header|content_for_index|content_for_layout|country_option_tags|currency|current_page|current_tags|customer|customer_address|discount_allocation|discount_application|external_video|font|forloop|form|fulfillment|gift_card|handle|image|images|line_item|link|linklist|linklists|location|localization|metafield|model|model_source|order|page|page_description|page_image|page_title|pages|paginate|part|policy|powered_by_link|predictive_search|product|product_option|product_variant|recommendations|request|routes|script|scripts|search|section|selling_plan|selling_plan_allocation|selling_plan_group|settings|shipping_method|shop|shop_locale|store_availability|tablerow|tax_line|template|theme|transaction|unit_price_measurement|variant|video|video_source)\\b", name: "variable.language.liquid" }, { match: "((?<=\\w\\:\\s)\\w+)", name: "variable.parameter.liquid" }, { begin: "(?<=\\w)\\[", beginCaptures: { 0: { name: "punctuation.section.brackets.begin.liquid" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.section.brackets.end.liquid" } }, name: "meta.brackets.liquid", patterns: [{ include: "#string" }] }, { match: "(?<=(\\w|\\])\\.)([-\\w]+\\??)", name: "variable.other.member.liquid" }, { match: "(?<=\\w)\\.(?=\\w)", name: "punctuation.accessor.liquid" }, { match: "(?i)[a-z_](\\w|(?:-(?!\\}\\})))*", name: "variable.other.liquid" }] } }, scopeName: "text.html.liquid", embeddedLangs: ["html", "css", "json", "javascript"] });
var pn = [
  ...t,
  ...n,
  ...i,
  ...e,
  cn
];
const mn = Object.freeze({ displayName: "Makefile", name: "make", patterns: [{ include: "#comment" }, { include: "#variables" }, { include: "#variable-assignment" }, { include: "#directives" }, { include: "#recipe" }, { include: "#target" }], repository: { "another-variable-braces": { patterns: [{ begin: "(?<={)(?!})", end: "(?=}|((?<!\\\\)\\n))", name: "variable.other.makefile", patterns: [{ include: "#variables" }, { match: "\\\\\\n", name: "constant.character.escape.continuation.makefile" }] }] }, "another-variable-parentheses": { patterns: [{ begin: "(?<=\\()(?!\\))", end: "(?=\\)|((?<!\\\\)\\n))", name: "variable.other.makefile", patterns: [{ include: "#variables" }, { match: "\\\\\\n", name: "constant.character.escape.continuation.makefile" }] }] }, "braces-interpolation": { begin: "{", end: "}", patterns: [{ include: "#variables" }, { include: "#interpolation" }] }, "builtin-variable-braces": { patterns: [{ match: "(?<={)(MAKEFILES|VPATH|SHELL|MAKESHELL|MAKE|MAKELEVEL|MAKEFLAGS|MAKECMDGOALS|CURDIR|SUFFIXES|\\.LIBPATTERNS)(?=\\s*})", name: "variable.language.makefile" }] }, "builtin-variable-parentheses": { patterns: [{ match: "(?<=\\()(MAKEFILES|VPATH|SHELL|MAKESHELL|MAKE|MAKELEVEL|MAKEFLAGS|MAKECMDGOALS|CURDIR|SUFFIXES|\\.LIBPATTERNS)(?=\\s*\\))", name: "variable.language.makefile" }] }, comma: { match: ",", name: "punctuation.separator.delimeter.comma.makefile" }, comment: { begin: "(^[ ]+)?((?<!\\\\)(\\\\\\\\)*)(?=#)", beginCaptures: { 1: { name: "punctuation.whitespace.comment.leading.makefile" } }, end: "(?!\\G)", patterns: [{ begin: "#", beginCaptures: { 0: { name: "punctuation.definition.comment.makefile" } }, end: "(?=[^\\\\])$", name: "comment.line.number-sign.makefile", patterns: [{ match: "\\\\\\n", name: "constant.character.escape.continuation.makefile" }] }] }, directives: { patterns: [{ begin: "^[ ]*([s\\-]?include)\\b", beginCaptures: { 1: { name: "keyword.control.include.makefile" } }, end: "^", patterns: [{ include: "#comment" }, { include: "#variables" }, { match: "%", name: "constant.other.placeholder.makefile" }] }, { begin: "^[ ]*(vpath)\\b", beginCaptures: { 1: { name: "keyword.control.vpath.makefile" } }, end: "^", patterns: [{ include: "#comment" }, { include: "#variables" }, { match: "%", name: "constant.other.placeholder.makefile" }] }, { begin: "^\\s*(?:(override)\\s*)?(define)\\s*([^\\s]+)\\s*(=|\\?=|:=|\\+=)?(?=\\s)", captures: { 1: { name: "keyword.control.override.makefile" }, 2: { name: "keyword.control.define.makefile" }, 3: { name: "variable.other.makefile" }, 4: { name: "punctuation.separator.key-value.makefile" } }, end: "^\\s*(endef)\\b", name: "meta.scope.conditional.makefile", patterns: [{ begin: "\\G(?!\\n)", end: "^", patterns: [{ include: "#comment" }] }, { include: "#variables" }, { include: "#directives" }] }, { begin: "^[ ]*(export)\\b", beginCaptures: { 1: { name: "keyword.control.$1.makefile" } }, end: "^", patterns: [{ include: "#comment" }, { include: "#variable-assignment" }, { match: "[^\\s]+", name: "variable.other.makefile" }] }, { begin: "^[ ]*(override|private)\\b", beginCaptures: { 1: { name: "keyword.control.$1.makefile" } }, end: "^", patterns: [{ include: "#comment" }, { include: "#variable-assignment" }] }, { begin: "^[ ]*(unexport|undefine)\\b", beginCaptures: { 1: { name: "keyword.control.$1.makefile" } }, end: "^", patterns: [{ include: "#comment" }, { match: "[^\\s]+", name: "variable.other.makefile" }] }, { begin: "^\\s*(ifeq|ifneq|ifdef|ifndef)(?=\\s)", captures: { 1: { name: "keyword.control.$1.makefile" } }, end: "^\\s*(endif)\\b", name: "meta.scope.conditional.makefile", patterns: [{ begin: "\\G", end: "^", name: "meta.scope.condition.makefile", patterns: [{ include: "#comma" }, { include: "#variables" }, { include: "#comment" }] }, { begin: "^\\s*else(?=\\s)\\s*(ifeq|ifneq|ifdef|ifndef)*(?=\\s)", beginCaptures: { 0: { name: "keyword.control.else.makefile" } }, end: "^", patterns: [{ include: "#comma" }, { include: "#variables" }, { include: "#comment" }] }, { include: "$self" }] }] }, "flavor-variable-braces": { patterns: [{ begin: "(?<={)(origin|flavor)\\s(?=[^\\s}]+\\s*})", beginCaptures: { 1: { name: "support.function.$1.makefile" } }, contentName: "variable.other.makefile", end: "(?=})", name: "meta.scope.function-call.makefile", patterns: [{ include: "#variables" }] }] }, "flavor-variable-parentheses": { patterns: [{ begin: "(?<=\\()(origin|flavor)\\s(?=[^\\s)]+\\s*\\))", beginCaptures: { 1: { name: "support.function.$1.makefile" } }, contentName: "variable.other.makefile", end: "(?=\\))", name: "meta.scope.function-call.makefile", patterns: [{ include: "#variables" }] }] }, "function-variable-braces": { patterns: [{ begin: "(?<={)(subst|patsubst|strip|findstring|filter(-out)?|sort|word(list)?|firstword|lastword|dir|notdir|suffix|basename|addsuffix|addprefix|join|wildcard|realpath|abspath|info|error|warning|shell|foreach|if|or|and|call|eval|value|file|guile)\\s", beginCaptures: { 1: { name: "support.function.$1.makefile" } }, end: "(?=}|((?<!\\\\)\\n))", name: "meta.scope.function-call.makefile", patterns: [{ include: "#comma" }, { include: "#variables" }, { include: "#interpolation" }, { match: "%|\\*", name: "constant.other.placeholder.makefile" }, { match: "\\\\\\n", name: "constant.character.escape.continuation.makefile" }] }] }, "function-variable-parentheses": { patterns: [{ begin: "(?<=\\()(subst|patsubst|strip|findstring|filter(-out)?|sort|word(list)?|firstword|lastword|dir|notdir|suffix|basename|addsuffix|addprefix|join|wildcard|realpath|abspath|info|error|warning|shell|foreach|if|or|and|call|eval|value|file|guile)\\s", beginCaptures: { 1: { name: "support.function.$1.makefile" } }, end: "(?=\\)|((?<!\\\\)\\n))", name: "meta.scope.function-call.makefile", patterns: [{ include: "#comma" }, { include: "#variables" }, { include: "#interpolation" }, { match: "%|\\*", name: "constant.other.placeholder.makefile" }, { match: "\\\\\\n", name: "constant.character.escape.continuation.makefile" }] }] }, interpolation: { patterns: [{ include: "#parentheses-interpolation" }, { include: "#braces-interpolation" }] }, "parentheses-interpolation": { begin: "\\(", end: "\\)", patterns: [{ include: "#variables" }, { include: "#interpolation" }] }, recipe: { begin: "^\\t([+\\-@]*)", beginCaptures: { 1: { name: "keyword.control.$1.makefile" } }, end: "[^\\\\]$", name: "meta.scope.recipe.makefile", patterns: [{ match: "\\\\\\n", name: "constant.character.escape.continuation.makefile" }, { include: "#variables" }] }, "simple-variable": { patterns: [{ match: "\\$[^(){}]", name: "variable.language.makefile" }] }, target: { begin: "^(?!\\t)([^:]*)(:)(?!\\=)", beginCaptures: { 1: { patterns: [{ captures: { 1: { name: "support.function.target.$1.makefile" } }, match: "^\\s*(\\.(PHONY|SUFFIXES|DEFAULT|PRECIOUS|INTERMEDIATE|SECONDARY|SECONDEXPANSION|DELETE_ON_ERROR|IGNORE|LOW_RESOLUTION_TIME|SILENT|EXPORT_ALL_VARIABLES|NOTPARALLEL|ONESHELL|POSIX))\\s*$" }, { begin: "(?=\\S)", end: "(?=\\s|$)", name: "entity.name.function.target.makefile", patterns: [{ include: "#variables" }, { match: "%", name: "constant.other.placeholder.makefile" }] }] }, 2: { name: "punctuation.separator.key-value.makefile" } }, end: "[^\\\\]$", name: "meta.scope.target.makefile", patterns: [{ begin: "\\G", end: "(?=[^\\\\])$", name: "meta.scope.prerequisites.makefile", patterns: [{ match: "\\\\\\n", name: "constant.character.escape.continuation.makefile" }, { match: "%|\\*", name: "constant.other.placeholder.makefile" }, { include: "#comment" }, { include: "#variables" }] }] }, "variable-assignment": { begin: "(^[ ]*|\\G\\s*)([^\\s:#=]+)\\s*((?<![?:+!])=|\\?=|:=|\\+=|!=)", beginCaptures: { 2: { name: "variable.other.makefile", patterns: [{ include: "#variables" }] }, 3: { name: "punctuation.separator.key-value.makefile" } }, end: "\\n", patterns: [{ match: "\\\\\\n", name: "constant.character.escape.continuation.makefile" }, { include: "#comment" }, { include: "#variables" }] }, "variable-braces": { patterns: [{ begin: "\\${", captures: { 0: { name: "punctuation.definition.variable.makefile" } }, end: "}|((?<!\\\\)\\n)", name: "string.interpolated.makefile", patterns: [{ include: "#variables" }, { include: "#builtin-variable-braces" }, { include: "#function-variable-braces" }, { include: "#flavor-variable-braces" }, { include: "#another-variable-braces" }] }] }, "variable-parentheses": { patterns: [{ begin: "\\$\\(", captures: { 0: { name: "punctuation.definition.variable.makefile" } }, end: "\\)|((?<!\\\\)\\n)", name: "string.interpolated.makefile", patterns: [{ include: "#variables" }, { include: "#builtin-variable-parentheses" }, { include: "#function-variable-parentheses" }, { include: "#flavor-variable-parentheses" }, { include: "#another-variable-parentheses" }] }] }, variables: { patterns: [{ include: "#simple-variable" }, { include: "#variable-parentheses" }, { include: "#variable-braces" }] } }, scopeName: "source.makefile", aliases: ["makefile"] });
var un = [
  mn
];
const ln = Object.freeze({ displayName: "Markdown", name: "markdown", patterns: [{ include: "#frontMatter" }, { include: "#block" }], repository: { ampersand: { comment: "Markdown will convert this for us. We match it so that the HTML grammar will not mark it up as invalid.", match: "&(?!([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+);)", name: "meta.other.valid-ampersand.markdown" }, block: { patterns: [{ include: "#separator" }, { include: "#heading" }, { include: "#blockquote" }, { include: "#lists" }, { include: "#fenced_code_block" }, { include: "#raw_block" }, { include: "#link-def" }, { include: "#html" }, { include: "#table" }, { include: "#paragraph" }] }, blockquote: { begin: "(^|\\G)[ ]{0,3}(>) ?", captures: { 2: { name: "punctuation.definition.quote.begin.markdown" } }, name: "markup.quote.markdown", patterns: [{ include: "#block" }], while: "(^|\\G)\\s*(>) ?" }, bold: { begin: `(?x) (?<open>(\\*\\*(?=\\w)|(?<!\\w)\\*\\*|(?<!\\w)\\b__))(?=\\S) (?=
(
<[^>]*+>
| (?<raw>\`+)([^\`]|(?!(?<!\`)\\k<raw>(?!\`))\`)*+\\k<raw>

| \\\\[\\\\\`*_{}\\[\\]()#.!+\\->]?+
| \\[
(
(?<square>
[^\\[\\]\\\\]
| \\\\.
| \\[ \\g<square>*+ \\]
)*+
\\]
(
(
[ ]?
\\[[^\\]]*+\\]
)
| (
\\(
[ \\t]*+
<?(.*?)>?
[ \\t]*+
(
(?<title>['"])
(.*?)
\\k<title>
)?
\\)
)
)
)
| (?!(?<=\\S)\\k<open>).

)++
(?<=\\S)(?=__\\b|\\*\\*)\\k<open>
)
`, captures: { 1: { name: "punctuation.definition.bold.markdown" } }, end: "(?<=\\S)(\\1)", name: "markup.bold.markdown", patterns: [{ applyEndPatternLast: 1, begin: "(?=<[^>]*?>)", end: "(?<=>)", patterns: [{ include: "text.html.derivative" }] }, { include: "#escape" }, { include: "#ampersand" }, { include: "#bracket" }, { include: "#raw" }, { include: "#bold" }, { include: "#italic" }, { include: "#image-inline" }, { include: "#link-inline" }, { include: "#link-inet" }, { include: "#link-email" }, { include: "#image-ref" }, { include: "#link-ref-literal" }, { include: "#link-ref" }, { include: "#link-ref-shortcut" }, { include: "#strikethrough" }] }, bracket: { comment: "Markdown will convert this for us. We match it so that the HTML grammar will not mark it up as invalid.", match: "<(?![a-zA-Z/?\\$!])", name: "meta.other.valid-bracket.markdown" }, escape: { match: "\\\\[-`*_#+.!(){}\\[\\]\\\\>]", name: "constant.character.escape.markdown" }, fenced_code_block: { patterns: [{ include: "#fenced_code_block_css" }, { include: "#fenced_code_block_basic" }, { include: "#fenced_code_block_ini" }, { include: "#fenced_code_block_java" }, { include: "#fenced_code_block_lua" }, { include: "#fenced_code_block_makefile" }, { include: "#fenced_code_block_perl" }, { include: "#fenced_code_block_r" }, { include: "#fenced_code_block_ruby" }, { include: "#fenced_code_block_php" }, { include: "#fenced_code_block_sql" }, { include: "#fenced_code_block_vs_net" }, { include: "#fenced_code_block_xml" }, { include: "#fenced_code_block_xsl" }, { include: "#fenced_code_block_yaml" }, { include: "#fenced_code_block_dosbatch" }, { include: "#fenced_code_block_clojure" }, { include: "#fenced_code_block_coffee" }, { include: "#fenced_code_block_c" }, { include: "#fenced_code_block_cpp" }, { include: "#fenced_code_block_diff" }, { include: "#fenced_code_block_dockerfile" }, { include: "#fenced_code_block_git_commit" }, { include: "#fenced_code_block_git_rebase" }, { include: "#fenced_code_block_go" }, { include: "#fenced_code_block_groovy" }, { include: "#fenced_code_block_pug" }, { include: "#fenced_code_block_js" }, { include: "#fenced_code_block_js_regexp" }, { include: "#fenced_code_block_json" }, { include: "#fenced_code_block_jsonc" }, { include: "#fenced_code_block_less" }, { include: "#fenced_code_block_objc" }, { include: "#fenced_code_block_swift" }, { include: "#fenced_code_block_scss" }, { include: "#fenced_code_block_perl6" }, { include: "#fenced_code_block_powershell" }, { include: "#fenced_code_block_python" }, { include: "#fenced_code_block_julia" }, { include: "#fenced_code_block_regexp_python" }, { include: "#fenced_code_block_rust" }, { include: "#fenced_code_block_scala" }, { include: "#fenced_code_block_shell" }, { include: "#fenced_code_block_ts" }, { include: "#fenced_code_block_tsx" }, { include: "#fenced_code_block_csharp" }, { include: "#fenced_code_block_fsharp" }, { include: "#fenced_code_block_dart" }, { include: "#fenced_code_block_handlebars" }, { include: "#fenced_code_block_markdown" }, { include: "#fenced_code_block_log" }, { include: "#fenced_code_block_erlang" }, { include: "#fenced_code_block_elixir" }, { include: "#fenced_code_block_latex" }, { include: "#fenced_code_block_bibtex" }, { include: "#fenced_code_block_twig" }, { include: "#fenced_code_block_unknown" }] }, fenced_code_block_basic: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(html|htm|shtml|xhtml|inc|tmpl|tpl)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.html", patterns: [{ include: "text.html.basic" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_bibtex: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(bibtex)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.bibtex", patterns: [{ include: "text.bibtex" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_c: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(c|h)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.c", patterns: [{ include: "source.c" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_clojure: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(clj|cljs|clojure)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.clojure", patterns: [{ include: "source.clojure" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_coffee: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(coffee|Cakefile|coffee.erb)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.coffee", patterns: [{ include: "source.coffee" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_cpp: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(cpp|c\\+\\+|cxx)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.cpp source.cpp", patterns: [{ include: "source.cpp" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_csharp: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(cs|csharp|c#)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.csharp", patterns: [{ include: "source.cs" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_css: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(css|css.erb)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.css", patterns: [{ include: "source.css" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_dart: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(dart)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.dart", patterns: [{ include: "source.dart" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_diff: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(patch|diff|rej)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.diff", patterns: [{ include: "source.diff" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_dockerfile: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(dockerfile|Dockerfile)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.dockerfile", patterns: [{ include: "source.dockerfile" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_dosbatch: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(bat|batch)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.dosbatch", patterns: [{ include: "source.batchfile" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_elixir: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(elixir)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.elixir", patterns: [{ include: "source.elixir" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_erlang: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(erlang)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.erlang", patterns: [{ include: "source.erlang" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_fsharp: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(fs|fsharp|f#)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.fsharp", patterns: [{ include: "source.fsharp" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_git_commit: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(COMMIT_EDITMSG|MERGE_MSG)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.git_commit", patterns: [{ include: "text.git-commit" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_git_rebase: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(git-rebase-todo)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.git_rebase", patterns: [{ include: "text.git-rebase" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_go: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(go|golang)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.go", patterns: [{ include: "source.go" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_groovy: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(groovy|gvy)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.groovy", patterns: [{ include: "source.groovy" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_handlebars: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(handlebars|hbs)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.handlebars", patterns: [{ include: "text.html.handlebars" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_ini: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(ini|conf)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.ini", patterns: [{ include: "source.ini" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_java: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(java|bsh)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.java", patterns: [{ include: "source.java" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_js: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(js|jsx|javascript|es6|mjs|cjs|dataviewjs|\\{\\.js.+?\\})((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.javascript", patterns: [{ include: "source.js" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_js_regexp: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(regexp)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.js_regexp", patterns: [{ include: "source.js.regexp" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_json: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(json|json5|sublime-settings|sublime-menu|sublime-keymap|sublime-mousemap|sublime-theme|sublime-build|sublime-project|sublime-completions)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.json", patterns: [{ include: "source.json" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_jsonc: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(jsonc)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.jsonc", patterns: [{ include: "source.json.comments" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_julia: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(julia|\\{\\.julia.+?\\})((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.julia", patterns: [{ include: "source.julia" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_latex: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(latex|tex)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.latex", patterns: [{ include: "text.tex.latex" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_less: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(less)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.less", patterns: [{ include: "source.css.less" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_log: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(log)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.log", patterns: [{ include: "text.log" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_lua: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(lua)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.lua", patterns: [{ include: "source.lua" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_makefile: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(Makefile|makefile|GNUmakefile|OCamlMakefile)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.makefile", patterns: [{ include: "source.makefile" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_markdown: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(markdown|md)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.markdown", patterns: [{ include: "text.html.markdown" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_objc: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(objectivec|objective-c|mm|objc|obj-c|m|h)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.objc", patterns: [{ include: "source.objc" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_perl: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(perl|pl|pm|pod|t|PL|psgi|vcl)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.perl", patterns: [{ include: "source.perl" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_perl6: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(perl6|p6|pl6|pm6|nqp)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.perl6", patterns: [{ include: "source.perl.6" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_php: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(php|php3|php4|php5|phpt|phtml|aw|ctp)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.php", patterns: [{ include: "text.html.basic" }, { include: "source.php" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_powershell: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(powershell|ps1|psm1|psd1|pwsh)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.powershell", patterns: [{ include: "source.powershell" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_pug: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(jade|pug)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.pug", patterns: [{ include: "text.pug" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_python: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(python|py|py3|rpy|pyw|cpy|SConstruct|Sconstruct|sconstruct|SConscript|gyp|gypi|\\{\\.python.+?\\})((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.python", patterns: [{ include: "source.python" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_r: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(R|r|s|S|Rprofile|\\{\\.r.+?\\})((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.r", patterns: [{ include: "source.r" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_regexp_python: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(re)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.regexp_python", patterns: [{ include: "source.regexp.python" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_ruby: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(ruby|rb|rbx|rjs|Rakefile|rake|cgi|fcgi|gemspec|irbrc|Capfile|ru|prawn|Cheffile|Gemfile|Guardfile|Hobofile|Vagrantfile|Appraisals|Rantfile|Berksfile|Berksfile.lock|Thorfile|Puppetfile)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.ruby", patterns: [{ include: "source.ruby" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_rust: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(rust|rs|\\{\\.rust.+?\\})((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.rust", patterns: [{ include: "source.rust" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_scala: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(scala|sbt)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.scala", patterns: [{ include: "source.scala" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_scss: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(scss)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.scss", patterns: [{ include: "source.css.scss" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_shell: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(shell|sh|bash|zsh|bashrc|bash_profile|bash_login|profile|bash_logout|.textmate_init|\\{\\.bash.+?\\})((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.shellscript", patterns: [{ include: "source.shell" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_sql: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(sql|ddl|dml)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.sql", patterns: [{ include: "source.sql" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_swift: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(swift)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.swift", patterns: [{ include: "source.swift" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_ts: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(typescript|ts)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.typescript", patterns: [{ include: "source.ts" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_tsx: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(tsx)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.typescriptreact", patterns: [{ include: "source.tsx" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_twig: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(twig)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.twig", patterns: [{ include: "source.twig" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_unknown: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?=([^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown" }, fenced_code_block_vs_net: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(vb)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.vs_net", patterns: [{ include: "source.asp.vb.net" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_xml: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(xml|xsd|tld|jsp|pt|cpt|dtml|rss|opml)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.xml", patterns: [{ include: "text.xml" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_xsl: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(xsl|xslt)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.xsl", patterns: [{ include: "text.xml.xsl" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, fenced_code_block_yaml: { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(yaml|yml)((\\s+|:|,|\\{|\\?)[^`]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown" } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.block.yaml", patterns: [{ include: "source.yaml" }], while: "(^|\\G)(?!\\s*([`~]{3,})\\s*$)" }] }, frontMatter: { applyEndPatternLast: 1, begin: "\\A(?=(-{3,}))", end: "^ {,3}\\1-*[ \\t]*$|^[ \\t]*\\.{3}$", endCaptures: { 0: { name: "punctuation.definition.end.frontmatter" } }, patterns: [{ begin: "\\A(-{3,})(.*)$", beginCaptures: { 1: { name: "punctuation.definition.begin.frontmatter" }, 2: { name: "comment.frontmatter" } }, contentName: "meta.embedded.block.frontmatter", patterns: [{ include: "source.yaml" }], while: "^(?! {,3}\\1-*[ \\t]*$|[ \\t]*\\.{3}$)" }] }, heading: { captures: { 1: { patterns: [{ captures: { 1: { name: "punctuation.definition.heading.markdown" }, 2: { name: "entity.name.section.markdown", patterns: [{ include: "#inline" }, { include: "text.html.derivative" }] }, 3: { name: "punctuation.definition.heading.markdown" } }, match: "(#{6})\\s+(.*?)(?:\\s+(#+))?\\s*$", name: "heading.6.markdown" }, { captures: { 1: { name: "punctuation.definition.heading.markdown" }, 2: { name: "entity.name.section.markdown", patterns: [{ include: "#inline" }, { include: "text.html.derivative" }] }, 3: { name: "punctuation.definition.heading.markdown" } }, match: "(#{5})\\s+(.*?)(?:\\s+(#+))?\\s*$", name: "heading.5.markdown" }, { captures: { 1: { name: "punctuation.definition.heading.markdown" }, 2: { name: "entity.name.section.markdown", patterns: [{ include: "#inline" }, { include: "text.html.derivative" }] }, 3: { name: "punctuation.definition.heading.markdown" } }, match: "(#{4})\\s+(.*?)(?:\\s+(#+))?\\s*$", name: "heading.4.markdown" }, { captures: { 1: { name: "punctuation.definition.heading.markdown" }, 2: { name: "entity.name.section.markdown", patterns: [{ include: "#inline" }, { include: "text.html.derivative" }] }, 3: { name: "punctuation.definition.heading.markdown" } }, match: "(#{3})\\s+(.*?)(?:\\s+(#+))?\\s*$", name: "heading.3.markdown" }, { captures: { 1: { name: "punctuation.definition.heading.markdown" }, 2: { name: "entity.name.section.markdown", patterns: [{ include: "#inline" }, { include: "text.html.derivative" }] }, 3: { name: "punctuation.definition.heading.markdown" } }, match: "(#{2})\\s+(.*?)(?:\\s+(#+))?\\s*$", name: "heading.2.markdown" }, { captures: { 1: { name: "punctuation.definition.heading.markdown" }, 2: { name: "entity.name.section.markdown", patterns: [{ include: "#inline" }, { include: "text.html.derivative" }] }, 3: { name: "punctuation.definition.heading.markdown" } }, match: "(#{1})\\s+(.*?)(?:\\s+(#+))?\\s*$", name: "heading.1.markdown" }] } }, match: "(?:^|\\G)[ ]{0,3}(#{1,6}\\s+(.*?)(\\s+#{1,6})?\\s*)$", name: "markup.heading.markdown" }, "heading-setext": { patterns: [{ match: "^(={3,})(?=[ \\t]*$\\n?)", name: "markup.heading.setext.1.markdown" }, { match: "^(-{3,})(?=[ \\t]*$\\n?)", name: "markup.heading.setext.2.markdown" }] }, html: { patterns: [{ begin: "(^|\\G)\\s*(<!--)", captures: { 1: { name: "punctuation.definition.comment.html" }, 2: { name: "punctuation.definition.comment.html" } }, end: "(-->)", name: "comment.block.html" }, { begin: "(?i)(^|\\G)\\s*(?=<(script|style|pre)(\\s|$|>)(?!.*?</(script|style|pre)>))", end: "(?i)(.*)((</)(script|style|pre)(>))", endCaptures: { 1: { patterns: [{ include: "text.html.derivative" }] }, 2: { name: "meta.tag.structure.$4.end.html" }, 3: { name: "punctuation.definition.tag.begin.html" }, 4: { name: "entity.name.tag.html" }, 5: { name: "punctuation.definition.tag.end.html" } }, patterns: [{ begin: "(\\s*|$)", patterns: [{ include: "text.html.derivative" }], while: "(?i)^(?!.*</(script|style|pre)>)" }] }, { begin: "(?i)(^|\\G)\\s*(?=</?[a-zA-Z]+[^\\s/&gt;]*(\\s|$|/?>))", patterns: [{ include: "text.html.derivative" }], while: "^(?!\\s*$)" }, { begin: "(^|\\G)\\s*(?=(<[a-zA-Z0-9\\-](/?>|\\s.*?>)|</[a-zA-Z0-9\\-]>)\\s*$)", patterns: [{ include: "text.html.derivative" }], while: "^(?!\\s*$)" }] }, "image-inline": { captures: { 1: { name: "punctuation.definition.link.description.begin.markdown" }, 2: { name: "string.other.link.description.markdown" }, 4: { name: "punctuation.definition.link.description.end.markdown" }, 5: { name: "punctuation.definition.metadata.markdown" }, 7: { name: "punctuation.definition.link.markdown" }, 8: { name: "markup.underline.link.image.markdown" }, 9: { name: "punctuation.definition.link.markdown" }, 10: { name: "markup.underline.link.image.markdown" }, 12: { name: "string.other.link.description.title.markdown" }, 13: { name: "punctuation.definition.string.begin.markdown" }, 14: { name: "punctuation.definition.string.end.markdown" }, 15: { name: "string.other.link.description.title.markdown" }, 16: { name: "punctuation.definition.string.begin.markdown" }, 17: { name: "punctuation.definition.string.end.markdown" }, 18: { name: "string.other.link.description.title.markdown" }, 19: { name: "punctuation.definition.string.begin.markdown" }, 20: { name: "punctuation.definition.string.end.markdown" }, 21: { name: "punctuation.definition.metadata.markdown" } }, match: `(?x)
(\\!\\[)((?<square>[^\\[\\]\\\\]|\\\\.|\\[\\g<square>*+\\])*+)(\\])

(\\()

[ \\t]*
(
(<)((?:\\\\[<>]|[^<>\\n])*)(>)
| ((?<url>(?>[^\\s()]+)|\\(\\g<url>*\\))*)
)
[ \\t]*
(?:
((\\().+?(\\)))
| ((").+?("))
| ((').+?('))
)?
\\s*
(\\))
`, name: "meta.image.inline.markdown" }, "image-ref": { captures: { 1: { name: "punctuation.definition.link.description.begin.markdown" }, 2: { name: "string.other.link.description.markdown" }, 4: { name: "punctuation.definition.link.description.end.markdown" }, 5: { name: "punctuation.definition.constant.markdown" }, 6: { name: "constant.other.reference.link.markdown" }, 7: { name: "punctuation.definition.constant.markdown" } }, match: "(\\!\\[)((?<square>[^\\[\\]\\\\]|\\\\.|\\[\\g<square>*+\\])*+)(\\])[ ]?(\\[)(.*?)(\\])", name: "meta.image.reference.markdown" }, inline: { patterns: [{ include: "#ampersand" }, { include: "#bracket" }, { include: "#bold" }, { include: "#italic" }, { include: "#raw" }, { include: "#strikethrough" }, { include: "#escape" }, { include: "#image-inline" }, { include: "#image-ref" }, { include: "#link-email" }, { include: "#link-inet" }, { include: "#link-inline" }, { include: "#link-ref" }, { include: "#link-ref-literal" }, { include: "#link-ref-shortcut" }] }, italic: { begin: `(?x) (?<open>(\\*(?=\\w)|(?<!\\w)\\*|(?<!\\w)\\b_))(?=\\S)
(?=
(
<[^>]*+>
| (?<raw>\`+)([^\`]|(?!(?<!\`)\\k<raw>(?!\`))\`)*+\\k<raw>

| \\\\[\\\\\`*_{}\\[\\]()#.!+\\->]?+
| \\[
(
(?<square>
[^\\[\\]\\\\]
| \\\\.
| \\[ \\g<square>*+ \\]
)*+
\\]
(
(
[ ]?
\\[[^\\]]*+\\]
)
| (
\\(
[ \\t]*+
<?(.*?)>?
[ \\t]*+
(
(?<title>['"])
(.*?)
\\k<title>
)?
\\)
)
)
)
| \\k<open>\\k<open>
| (?!(?<=\\S)\\k<open>).

)++
(?<=\\S)(?=_\\b|\\*)\\k<open>
)
`, captures: { 1: { name: "punctuation.definition.italic.markdown" } }, end: "(?<=\\S)(\\1)((?!\\1)|(?=\\1\\1))", name: "markup.italic.markdown", patterns: [{ applyEndPatternLast: 1, begin: "(?=<[^>]*?>)", end: "(?<=>)", patterns: [{ include: "text.html.derivative" }] }, { include: "#escape" }, { include: "#ampersand" }, { include: "#bracket" }, { include: "#raw" }, { include: "#bold" }, { include: "#image-inline" }, { include: "#link-inline" }, { include: "#link-inet" }, { include: "#link-email" }, { include: "#image-ref" }, { include: "#link-ref-literal" }, { include: "#link-ref" }, { include: "#link-ref-shortcut" }, { include: "#strikethrough" }] }, "link-def": { captures: { 1: { name: "punctuation.definition.constant.markdown" }, 2: { name: "constant.other.reference.link.markdown" }, 3: { name: "punctuation.definition.constant.markdown" }, 4: { name: "punctuation.separator.key-value.markdown" }, 5: { name: "punctuation.definition.link.markdown" }, 6: { name: "markup.underline.link.markdown" }, 7: { name: "punctuation.definition.link.markdown" }, 8: { name: "markup.underline.link.markdown" }, 9: { name: "string.other.link.description.title.markdown" }, 10: { name: "punctuation.definition.string.begin.markdown" }, 11: { name: "punctuation.definition.string.end.markdown" }, 12: { name: "string.other.link.description.title.markdown" }, 13: { name: "punctuation.definition.string.begin.markdown" }, 14: { name: "punctuation.definition.string.end.markdown" }, 15: { name: "string.other.link.description.title.markdown" }, 16: { name: "punctuation.definition.string.begin.markdown" }, 17: { name: "punctuation.definition.string.end.markdown" } }, match: `(?x)
\\s*
(\\[)([^]]+?)(\\])(:)
[ \\t]*
(?:(<)((?:\\\\[<>]|[^<>\\n])*)(>)|(\\S+?))
[ \\t]*
(?:
((\\().+?(\\)))
| ((").+?("))
| ((').+?('))
)?
\\s*
$
`, name: "meta.link.reference.def.markdown" }, "link-email": { captures: { 1: { name: "punctuation.definition.link.markdown" }, 2: { name: "markup.underline.link.markdown" }, 4: { name: "punctuation.definition.link.markdown" } }, match: "(<)((?:mailto:)?[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*)(>)", name: "meta.link.email.lt-gt.markdown" }, "link-inet": { captures: { 1: { name: "punctuation.definition.link.markdown" }, 2: { name: "markup.underline.link.markdown" }, 3: { name: "punctuation.definition.link.markdown" } }, match: "(<)((?:https?|ftp)://.*?)(>)", name: "meta.link.inet.markdown" }, "link-inline": { captures: { 1: { name: "punctuation.definition.link.title.begin.markdown" }, 2: { name: "string.other.link.title.markdown", patterns: [{ include: "#raw" }, { include: "#bold" }, { include: "#italic" }, { include: "#strikethrough" }, { include: "#image-inline" }] }, 4: { name: "punctuation.definition.link.title.end.markdown" }, 5: { name: "punctuation.definition.metadata.markdown" }, 7: { name: "punctuation.definition.link.markdown" }, 8: { name: "markup.underline.link.markdown" }, 9: { name: "punctuation.definition.link.markdown" }, 10: { name: "markup.underline.link.markdown" }, 12: { name: "string.other.link.description.title.markdown" }, 13: { name: "punctuation.definition.string.begin.markdown" }, 14: { name: "punctuation.definition.string.end.markdown" }, 15: { name: "string.other.link.description.title.markdown" }, 16: { name: "punctuation.definition.string.begin.markdown" }, 17: { name: "punctuation.definition.string.end.markdown" }, 18: { name: "string.other.link.description.title.markdown" }, 19: { name: "punctuation.definition.string.begin.markdown" }, 20: { name: "punctuation.definition.string.end.markdown" }, 21: { name: "punctuation.definition.metadata.markdown" } }, match: `(?x)
(\\[)((?<square>[^\\[\\]\\\\]|\\\\.|\\[\\g<square>*+\\])*+)(\\])

(\\()

[ \\t]*
(
(<)((?:\\\\[<>]|[^<>\\n])*)(>)
| ((?<url>(?>[^\\s()]+)|\\(\\g<url>*\\))*)
)
[ \\t]*

(?:
((\\()[^()]*(\\)))
| ((")[^"]*("))
| ((')[^']*('))
)?
\\s*
(\\))
`, name: "meta.link.inline.markdown" }, "link-ref": { captures: { 1: { name: "punctuation.definition.link.title.begin.markdown" }, 2: { name: "string.other.link.title.markdown", patterns: [{ include: "#raw" }, { include: "#bold" }, { include: "#italic" }, { include: "#strikethrough" }, { include: "#image-inline" }] }, 4: { name: "punctuation.definition.link.title.end.markdown" }, 5: { name: "punctuation.definition.constant.begin.markdown" }, 6: { name: "constant.other.reference.link.markdown" }, 7: { name: "punctuation.definition.constant.end.markdown" } }, match: "(?<![\\]\\\\])(\\[)((?<square>[^\\[\\]\\\\]|\\\\.|\\[\\g<square>*+\\])*+)(\\])(\\[)([^\\]]*+)(\\])", name: "meta.link.reference.markdown" }, "link-ref-literal": { captures: { 1: { name: "punctuation.definition.link.title.begin.markdown" }, 2: { name: "string.other.link.title.markdown" }, 4: { name: "punctuation.definition.link.title.end.markdown" }, 5: { name: "punctuation.definition.constant.begin.markdown" }, 6: { name: "punctuation.definition.constant.end.markdown" } }, match: "(?<![\\]\\\\])(\\[)((?<square>[^\\[\\]\\\\]|\\\\.|\\[\\g<square>*+\\])*+)(\\])[ ]?(\\[)(\\])", name: "meta.link.reference.literal.markdown" }, "link-ref-shortcut": { captures: { 1: { name: "punctuation.definition.link.title.begin.markdown" }, 2: { name: "string.other.link.title.markdown" }, 3: { name: "punctuation.definition.link.title.end.markdown" } }, match: "(?<![\\]\\\\])(\\[)((?:[^\\s\\[\\]\\\\]|\\\\[\\[\\]])+?)((?<!\\\\)\\])", name: "meta.link.reference.markdown" }, list_paragraph: { begin: "(^|\\G)(?=\\S)(?![*+->]\\s|[0-9]+\\.\\s)", name: "meta.paragraph.markdown", patterns: [{ include: "#inline" }, { include: "text.html.derivative" }, { include: "#heading-setext" }], while: "(^|\\G)(?!\\s*$|#|[ ]{0,3}([-*_>][ ]{2,}){3,}[ \\t]*$\\n?|[ ]{0,3}[*+->]|[ ]{0,3}[0-9]+\\.)" }, lists: { patterns: [{ begin: "(^|\\G)([ ]{0,3})([*+-])([ \\t])", beginCaptures: { 3: { name: "punctuation.definition.list.begin.markdown" } }, comment: "Currently does not support un-indented second lines.", name: "markup.list.unnumbered.markdown", patterns: [{ include: "#block" }, { include: "#list_paragraph" }], while: "((^|\\G)([ ]{2,4}|\\t))|(^[ \\t]*$)" }, { begin: "(^|\\G)([ ]{0,3})([0-9]+[\\.\\)])([ \\t])", beginCaptures: { 3: { name: "punctuation.definition.list.begin.markdown" } }, name: "markup.list.numbered.markdown", patterns: [{ include: "#block" }, { include: "#list_paragraph" }], while: "((^|\\G)([ ]{2,4}|\\t))|(^[ \\t]*$)" }] }, paragraph: { begin: "(^|\\G)[ ]{0,3}(?=[^ \\t\\n])", name: "meta.paragraph.markdown", patterns: [{ include: "#inline" }, { include: "text.html.derivative" }, { include: "#heading-setext" }], while: "(^|\\G)((?=\\s*[-=]{3,}\\s*$)|[ ]{4,}(?=[^ \\t\\n]))" }, raw: { captures: { 1: { name: "punctuation.definition.raw.markdown" }, 3: { name: "punctuation.definition.raw.markdown" } }, match: "(`+)((?:[^`]|(?!(?<!`)\\1(?!`))`)*+)(\\1)", name: "markup.inline.raw.string.markdown" }, raw_block: { begin: "(^|\\G)([ ]{4}|\\t)", name: "markup.raw.block.markdown", while: "(^|\\G)([ ]{4}|\\t)" }, separator: { match: "(^|\\G)[ ]{0,3}([\\*\\-\\_])([ ]{0,2}\\2){2,}[ \\t]*$\\n?", name: "meta.separator.markdown" }, strikethrough: { captures: { 1: { name: "punctuation.definition.strikethrough.markdown" }, 2: { patterns: [{ applyEndPatternLast: 1, begin: "(?=<[^>]*?>)", end: "(?<=>)", patterns: [{ include: "text.html.derivative" }] }, { include: "#escape" }, { include: "#ampersand" }, { include: "#bracket" }, { include: "#raw" }, { include: "#bold" }, { include: "#italic" }, { include: "#image-inline" }, { include: "#link-inline" }, { include: "#link-inet" }, { include: "#link-email" }, { include: "#image-ref" }, { include: "#link-ref-literal" }, { include: "#link-ref" }, { include: "#link-ref-shortcut" }] }, 3: { name: "punctuation.definition.strikethrough.markdown" } }, match: "(?<!\\\\)(~{2,})((?:[^~]|(?!(?<![~\\\\])\\1(?!~))~)*+)(\\1)", name: "markup.strikethrough.markdown" }, table: { begin: "(^|\\G)(\\|)(?=[^|].+\\|\\s*$)", beginCaptures: { 2: { name: "punctuation.definition.table.markdown" } }, name: "markup.table.markdown", patterns: [{ match: "\\|", name: "punctuation.definition.table.markdown" }, { captures: { 1: { name: "punctuation.separator.table.markdown" } }, match: "(?<=\\|)\\s*(:?-+:?)\\s*(?=\\|)" }, { captures: { 1: { patterns: [{ include: "#inline" }] } }, match: "(?<=\\|)\\s*(?=\\S)((\\\\\\||[^|])+)(?<=\\S)\\s*(?=\\|)" }], while: "(^|\\G)(?=\\|)" } }, scopeName: "text.html.markdown", embeddedLangs: [], aliases: ["md"], embeddedLangsLazy: ["css", "html", "ini", "java", "lua", "make", "perl", "r", "ruby", "php", "sql", "vb", "xml", "xsl", "yaml", "bat", "clojure", "coffee", "c", "cpp", "diff", "docker", "git-commit", "git-rebase", "go", "groovy", "pug", "javascript", "json", "jsonc", "less", "objective-c", "swift", "scss", "raku", "powershell", "python", "julia", "regexp", "rust", "scala", "shellscript", "typescript", "tsx", "csharp", "fsharp", "dart", "handlebars", "log", "erlang", "elixir", "latex", "bibtex", "html-derivative"] });
var A = [
  ln
];
const dn = Object.freeze({ displayName: "MDX", fileTypes: ["mdx"], name: "mdx", patterns: [{ include: "#markdown-frontmatter" }, { include: "#markdown-sections" }], repository: { "commonmark-attention": { patterns: [{ match: "(?<=\\S)\\*{3,}|\\*{3,}(?=\\S)", name: "string.other.strong.emphasis.asterisk.mdx" }, { match: "(?<=[\\p{L}\\p{N}])_{3,}(?![\\p{L}\\p{N}])|(?<=\\p{P})_{3,}|(?<![\\p{L}\\p{N}]|\\p{P})_{3,}(?!\\s)", name: "string.other.strong.emphasis.underscore.mdx" }, { match: "(?<=\\S)\\*{2}|\\*{2}(?=\\S)", name: "string.other.strong.asterisk.mdx" }, { match: "(?<=[\\p{L}\\p{N}])_{2}(?![\\p{L}\\p{N}])|(?<=\\p{P})_{2}|(?<![\\p{L}\\p{N}]|\\p{P})_{2}(?!\\s)", name: "string.other.strong.underscore.mdx" }, { match: "(?<=\\S)\\*|\\*(?=\\S)", name: "string.other.emphasis.asterisk.mdx" }, { match: "(?<=[\\p{L}\\p{N}])_(?![\\p{L}\\p{N}])|(?<=\\p{P})_|(?<![\\p{L}\\p{N}]|\\p{P})_(?!\\s)", name: "string.other.emphasis.underscore.mdx" }] }, "commonmark-block-quote": { begin: "(?:^|\\G)[\\t ]*(>)[ ]?", beginCaptures: { 0: { name: "markup.quote.mdx" }, 1: { name: "punctuation.definition.quote.begin.mdx" } }, name: "markup.quote.mdx", patterns: [{ include: "#markdown-sections" }], while: "(>)[ ]?", whileCaptures: { 0: { name: "markup.quote.mdx" }, 1: { name: "punctuation.definition.quote.begin.mdx" } } }, "commonmark-character-escape": { match: "\\\\(?:[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])", name: "constant.language.character-escape.mdx" }, "commonmark-character-reference": { patterns: [{ include: "#whatwg-html-data-character-reference-named-terminated" }, { captures: { 1: { name: "punctuation.definition.character-reference.begin.html" }, 2: { name: "punctuation.definition.character-reference.numeric.html" }, 3: { name: "punctuation.definition.character-reference.numeric.hexadecimal.html" }, 4: { name: "constant.numeric.integer.hexadecimal.html" }, 5: { name: "punctuation.definition.character-reference.end.html" } }, match: "(&)(#)([Xx])([0-9A-Fa-f]{1,6})(;)", name: "constant.language.character-reference.numeric.hexadecimal.html" }, { captures: { 1: { name: "punctuation.definition.character-reference.begin.html" }, 2: { name: "punctuation.definition.character-reference.numeric.html" }, 3: { name: "constant.numeric.integer.decimal.html" }, 4: { name: "punctuation.definition.character-reference.end.html" } }, match: "(&)(#)([0-9]{1,7})(;)", name: "constant.language.character-reference.numeric.decimal.html" }] }, "commonmark-code-fenced": { patterns: [{ include: "#commonmark-code-fenced-apib" }, { include: "#commonmark-code-fenced-asciidoc" }, { include: "#commonmark-code-fenced-c" }, { include: "#commonmark-code-fenced-clojure" }, { include: "#commonmark-code-fenced-coffee" }, { include: "#commonmark-code-fenced-console" }, { include: "#commonmark-code-fenced-cpp" }, { include: "#commonmark-code-fenced-cs" }, { include: "#commonmark-code-fenced-css" }, { include: "#commonmark-code-fenced-diff" }, { include: "#commonmark-code-fenced-dockerfile" }, { include: "#commonmark-code-fenced-elixir" }, { include: "#commonmark-code-fenced-elm" }, { include: "#commonmark-code-fenced-erlang" }, { include: "#commonmark-code-fenced-gitconfig" }, { include: "#commonmark-code-fenced-go" }, { include: "#commonmark-code-fenced-graphql" }, { include: "#commonmark-code-fenced-haskell" }, { include: "#commonmark-code-fenced-html" }, { include: "#commonmark-code-fenced-ini" }, { include: "#commonmark-code-fenced-java" }, { include: "#commonmark-code-fenced-js" }, { include: "#commonmark-code-fenced-json" }, { include: "#commonmark-code-fenced-julia" }, { include: "#commonmark-code-fenced-kotlin" }, { include: "#commonmark-code-fenced-less" }, { include: "#commonmark-code-fenced-less" }, { include: "#commonmark-code-fenced-lua" }, { include: "#commonmark-code-fenced-makefile" }, { include: "#commonmark-code-fenced-md" }, { include: "#commonmark-code-fenced-mdx" }, { include: "#commonmark-code-fenced-objc" }, { include: "#commonmark-code-fenced-perl" }, { include: "#commonmark-code-fenced-php" }, { include: "#commonmark-code-fenced-php" }, { include: "#commonmark-code-fenced-python" }, { include: "#commonmark-code-fenced-r" }, { include: "#commonmark-code-fenced-raku" }, { include: "#commonmark-code-fenced-ruby" }, { include: "#commonmark-code-fenced-rust" }, { include: "#commonmark-code-fenced-scala" }, { include: "#commonmark-code-fenced-scss" }, { include: "#commonmark-code-fenced-shell" }, { include: "#commonmark-code-fenced-shell-session" }, { include: "#commonmark-code-fenced-sql" }, { include: "#commonmark-code-fenced-svg" }, { include: "#commonmark-code-fenced-swift" }, { include: "#commonmark-code-fenced-toml" }, { include: "#commonmark-code-fenced-ts" }, { include: "#commonmark-code-fenced-tsx" }, { include: "#commonmark-code-fenced-vbnet" }, { include: "#commonmark-code-fenced-xml" }, { include: "#commonmark-code-fenced-yaml" }, { include: "#commonmark-code-fenced-unknown" }] }, "commonmark-code-fenced-apib": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:api\\x2dblueprint|(?:.*\\.)?apib))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.apib.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.apib", patterns: [{ include: "text.html.markdown.source.gfm.apib" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:api\\x2dblueprint|(?:.*\\.)?apib))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.apib.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.apib", patterns: [{ include: "text.html.markdown.source.gfm.apib" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-asciidoc": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:(?:.*\\.)?(?:adoc|asciidoc)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.asciidoc.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.asciidoc", patterns: [{ include: "text.html.asciidoc" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:(?:.*\\.)?(?:adoc|asciidoc)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.asciidoc.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.asciidoc", patterns: [{ include: "text.html.asciidoc" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-c": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:dtrace|dtrace\\x2dscript|oncrpc|rpc|rpcgen|unified\\x2dparallel\\x2dc|x\\x2dbitmap|x\\x2dpixmap|xdr|(?:.*\\.)?(?:c|cats|h|idc|opencl|upc|xbm|xpm|xs)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.c.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.c", patterns: [{ include: "source.c" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:dtrace|dtrace\\x2dscript|oncrpc|rpc|rpcgen|unified\\x2dparallel\\x2dc|x\\x2dbitmap|x\\x2dpixmap|xdr|(?:.*\\.)?(?:c|cats|h|idc|opencl|upc|xbm|xpm|xs)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.c.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.c", patterns: [{ include: "source.c" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-clojure": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:clojure|rouge|(?:.*\\.)?(?:boot|cl2|clj|cljc|cljs|cljs\\.hl|cljscm|cljx|edn|hic|rg|wisp)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.clojure.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.clojure", patterns: [{ include: "source.clojure" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:clojure|rouge|(?:.*\\.)?(?:boot|cl2|clj|cljc|cljs|cljs\\.hl|cljscm|cljx|edn|hic|rg|wisp)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.clojure.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.clojure", patterns: [{ include: "source.clojure" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-coffee": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:coffee\\x2dscript|coffeescript|(?:.*\\.)?(?:_coffee|cjsx|coffee|cson|em|emberscript|iced)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.coffee.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.coffee", patterns: [{ include: "source.coffee" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:coffee\\x2dscript|coffeescript|(?:.*\\.)?(?:_coffee|cjsx|coffee|cson|em|emberscript|iced)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.coffee.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.coffee", patterns: [{ include: "source.coffee" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-console": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:pycon|python\\x2dconsole))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.console.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.console", patterns: [{ include: "text.python.console" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:pycon|python\\x2dconsole))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.console.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.console", patterns: [{ include: "text.python.console" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-cpp": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:ags|ags\\x2dscript|asymptote|c\\+\\+|edje\\x2ddata\\x2dcollection|game\\x2dmaker\\x2dlanguage|swig|(?:.*\\.)?(?:asc|ash|asy|c\\+\\+|cc|cp|cpp|cppm|cxx|edc|gml|h\\+\\+|hh|hpp|hxx|inl|ino|ipp|ixx|metal|re|tcc|tpp|txx)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.cpp.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.cpp", patterns: [{ include: "source.c++" }, { include: "source.cpp" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:ags|ags\\x2dscript|asymptote|c\\+\\+|edje\\x2ddata\\x2dcollection|game\\x2dmaker\\x2dlanguage|swig|(?:.*\\.)?(?:asc|ash|asy|c\\+\\+|cc|cp|cpp|cppm|cxx|edc|gml|h\\+\\+|hh|hpp|hxx|inl|ino|ipp|ixx|metal|re|tcc|tpp|txx)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.cpp.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.cpp", patterns: [{ include: "source.c++" }, { include: "source.cpp" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-cs": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:beef|c#|cakescript|csharp|(?:.*\\.)?(?:bf|cake|cs|cs\\.pp|csx|eq|linq|uno)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.cs.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.cs", patterns: [{ include: "source.cs" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:beef|c#|cakescript|csharp|(?:.*\\.)?(?:bf|cake|cs|cs\\.pp|csx|eq|linq|uno)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.cs.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.cs", patterns: [{ include: "source.cs" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-css": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:(?:.*\\.)?css))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.css.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.css", patterns: [{ include: "source.css" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:(?:.*\\.)?css))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.css.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.css", patterns: [{ include: "source.css" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-diff": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:udiff|(?:.*\\.)?(?:diff|patch)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.diff.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.diff", patterns: [{ include: "source.diff" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:udiff|(?:.*\\.)?(?:diff|patch)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.diff.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.diff", patterns: [{ include: "source.diff" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-dockerfile": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:containerfile|(?:.*\\.)?dockerfile))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.dockerfile.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.dockerfile", patterns: [{ include: "source.dockerfile" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:containerfile|(?:.*\\.)?dockerfile))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.dockerfile.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.dockerfile", patterns: [{ include: "source.dockerfile" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-elixir": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:elixir|(?:.*\\.)?(?:ex|exs)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.elixir.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.elixir", patterns: [{ include: "source.elixir" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:elixir|(?:.*\\.)?(?:ex|exs)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.elixir.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.elixir", patterns: [{ include: "source.elixir" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-elm": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:(?:.*\\.)?elm))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.elm.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.elm", patterns: [{ include: "source.elm" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:(?:.*\\.)?elm))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.elm.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.elm", patterns: [{ include: "source.elm" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-erlang": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:erlang|(?:.*\\.)?(?:app|app\\.src|erl|es|escript|hrl|xrl|yrl)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.erlang.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.erlang", patterns: [{ include: "source.erlang" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:erlang|(?:.*\\.)?(?:app|app\\.src|erl|es|escript|hrl|xrl|yrl)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.erlang.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.erlang", patterns: [{ include: "source.erlang" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-gitconfig": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:git\\x2dconfig|gitmodules|(?:.*\\.)?gitconfig))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.gitconfig.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.gitconfig", patterns: [{ include: "source.gitconfig" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:git\\x2dconfig|gitmodules|(?:.*\\.)?gitconfig))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.gitconfig.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.gitconfig", patterns: [{ include: "source.gitconfig" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-go": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:golang|(?:.*\\.)?go))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.go.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.go", patterns: [{ include: "source.go" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:golang|(?:.*\\.)?go))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.go.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.go", patterns: [{ include: "source.go" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-graphql": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:(?:.*\\.)?(?:gql|graphql|graphqls)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.graphql.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.graphql", patterns: [{ include: "source.graphql" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:(?:.*\\.)?(?:gql|graphql|graphqls)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.graphql.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.graphql", patterns: [{ include: "source.graphql" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-haskell": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:c2hs|c2hs\\x2dhaskell|frege|haskell|(?:.*\\.)?(?:chs|dhall|hs|hs\\x2dboot|hsc)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.haskell.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.haskell", patterns: [{ include: "source.haskell" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:c2hs|c2hs\\x2dhaskell|frege|haskell|(?:.*\\.)?(?:chs|dhall|hs|hs\\x2dboot|hsc)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.haskell.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.haskell", patterns: [{ include: "source.haskell" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-html": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:html|(?:.*\\.)?(?:hta|htm|html\\.hl|kit|mtml|xht|xhtml)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.html.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.html", patterns: [{ include: "text.html.basic" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:html|(?:.*\\.)?(?:hta|htm|html\\.hl|kit|mtml|xht|xhtml)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.html.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.html", patterns: [{ include: "text.html.basic" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-ini": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:altium|altium\\x2ddesigner|dosini|(?:.*\\.)?(?:cnf|dof|ini|lektorproject|outjob|pcbdoc|prefs|prjpcb|properties|schdoc|url)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.ini.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.ini", patterns: [{ include: "source.ini" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:altium|altium\\x2ddesigner|dosini|(?:.*\\.)?(?:cnf|dof|ini|lektorproject|outjob|pcbdoc|prefs|prjpcb|properties|schdoc|url)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.ini.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.ini", patterns: [{ include: "source.ini" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-java": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:chuck|unrealscript|(?:.*\\.)?(?:ck|jav|java|jsh|uc)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.java.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.java", patterns: [{ include: "source.java" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:chuck|unrealscript|(?:.*\\.)?(?:ck|jav|java|jsh|uc)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.java.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.java", patterns: [{ include: "source.java" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-js": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:cycript|javascript\\+erb|json\\x2dwith\\x2dcomments|node|qt\\x2dscript|(?:.*\\.)?(?:_js|bones|cjs|code\\x2dsnippets|code\\x2dworkspace|cy|es6|jake|javascript|js|js\\.erb|jsb|jscad|jsfl|jslib|jsm|json5|jsonc|jsonld|jspre|jss|jsx|mjs|njs|pac|sjs|ssjs|sublime\\x2dbuild|sublime\\x2dcolor\\x2dscheme|sublime\\x2dcommands|sublime\\x2dcompletions|sublime\\x2dkeymap|sublime\\x2dmacro|sublime\\x2dmenu|sublime\\x2dmousemap|sublime\\x2dproject|sublime\\x2dsettings|sublime\\x2dtheme|sublime\\x2dworkspace|sublime_metrics|sublime_session|xsjs|xsjslib)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.js.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.js", patterns: [{ include: "source.js" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:cycript|javascript\\+erb|json\\x2dwith\\x2dcomments|node|qt\\x2dscript|(?:.*\\.)?(?:_js|bones|cjs|code\\x2dsnippets|code\\x2dworkspace|cy|es6|jake|javascript|js|js\\.erb|jsb|jscad|jsfl|jslib|jsm|json5|jsonc|jsonld|jspre|jss|jsx|mjs|njs|pac|sjs|ssjs|sublime\\x2dbuild|sublime\\x2dcolor\\x2dscheme|sublime\\x2dcommands|sublime\\x2dcompletions|sublime\\x2dkeymap|sublime\\x2dmacro|sublime\\x2dmenu|sublime\\x2dmousemap|sublime\\x2dproject|sublime\\x2dsettings|sublime\\x2dtheme|sublime\\x2dworkspace|sublime_metrics|sublime_session|xsjs|xsjslib)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.js.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.js", patterns: [{ include: "source.js" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-json": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:ecere\\x2dprojects|ipython\\x2dnotebook|jupyter\\x2dnotebook|max|max/msp|maxmsp|oasv2\\x2djson|oasv3\\x2djson|(?:.*\\.)?(?:4dform|4dproject|avsc|epj|geojson|gltf|har|ice|ipynb|json|json|json|json\\x2dtmlanguage|jsonl|maxhelp|maxpat|maxproj|mcmeta|mxt|pat|sarif|tfstate|tfstate\\.backup|topojson|webapp|webmanifest|yy|yyp)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.json.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.json", patterns: [{ include: "source.json" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:ecere\\x2dprojects|ipython\\x2dnotebook|jupyter\\x2dnotebook|max|max/msp|maxmsp|oasv2\\x2djson|oasv3\\x2djson|(?:.*\\.)?(?:4dform|4dproject|avsc|epj|geojson|gltf|har|ice|ipynb|json|json|json|json\\x2dtmlanguage|jsonl|maxhelp|maxpat|maxproj|mcmeta|mxt|pat|sarif|tfstate|tfstate\\.backup|topojson|webapp|webmanifest|yy|yyp)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.json.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.json", patterns: [{ include: "source.json" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-julia": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:julia|(?:.*\\.)?jl))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.julia.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.julia", patterns: [{ include: "source.julia" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:julia|(?:.*\\.)?jl))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.julia.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.julia", patterns: [{ include: "source.julia" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-kotlin": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:gradle\\x2dkotlin\\x2ddsl|kotlin|(?:.*\\.)?(?:gradle\\.kts|kt|ktm|kts)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.kotlin.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.kotlin", patterns: [{ include: "source.kotlin" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:gradle\\x2dkotlin\\x2ddsl|kotlin|(?:.*\\.)?(?:gradle\\.kts|kt|ktm|kts)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.kotlin.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.kotlin", patterns: [{ include: "source.kotlin" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-less": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:less\\x2dcss|(?:.*\\.)?less))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.less.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.less", patterns: [{ include: "source.css.less" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:less\\x2dcss|(?:.*\\.)?less))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.less.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.less", patterns: [{ include: "source.css.less" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-lua": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:(?:.*\\.)?(?:fcgi|lua|nse|p8|pd_lua|rbxs|rockspec|wlua)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.lua.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.lua", patterns: [{ include: "source.lua" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:(?:.*\\.)?(?:fcgi|lua|nse|p8|pd_lua|rbxs|rockspec|wlua)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.lua.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.lua", patterns: [{ include: "source.lua" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-makefile": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:bsdmake|mf|(?:.*\\.)?(?:mak|make|makefile|mk|mkfile)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.makefile.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.makefile", patterns: [{ include: "source.makefile" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:bsdmake|mf|(?:.*\\.)?(?:mak|make|makefile|mk|mkfile)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.makefile.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.makefile", patterns: [{ include: "source.makefile" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-md": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:md|pandoc|rmarkdown|(?:.*\\.)?(?:livemd|markdown|mdown|mdwn|mkd|mkdn|mkdown|qmd|rmd|ronn|scd|workbook)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.md.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.md", patterns: [{ include: "text.md" }, { include: "source.gfm" }, { include: "text.html.markdown" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:md|pandoc|rmarkdown|(?:.*\\.)?(?:livemd|markdown|mdown|mdwn|mkd|mkdn|mkdown|qmd|rmd|ronn|scd|workbook)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.md.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.md", patterns: [{ include: "text.md" }, { include: "source.gfm" }, { include: "text.html.markdown" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-mdx": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:(?:.*\\.)?mdx))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.mdx.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.mdx", patterns: [{ include: "source.mdx" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:(?:.*\\.)?mdx))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.mdx.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.mdx", patterns: [{ include: "source.mdx" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-objc": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:obj\\x2dc|objc|objective\\x2dc|objectivec))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.objc.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.objc", patterns: [{ include: "source.objc" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:obj\\x2dc|objc|objective\\x2dc|objectivec))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.objc.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.objc", patterns: [{ include: "source.objc" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-perl": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:cperl|(?:.*\\.)?(?:cgi|perl|ph|pl|plx|pm|psgi|t)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.perl.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.perl", patterns: [{ include: "source.perl" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:cperl|(?:.*\\.)?(?:cgi|perl|ph|pl|plx|pm|psgi|t)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.perl.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.perl", patterns: [{ include: "source.perl" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-php": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:html\\+php|inc|php|(?:.*\\.)?(?:aw|ctp|php3|php4|php5|phps|phpt|phtml)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.php.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.php", patterns: [{ include: "text.html.php" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:html\\+php|inc|php|(?:.*\\.)?(?:aw|ctp|php3|php4|php5|phps|phpt|phtml)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.php.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.php", patterns: [{ include: "text.html.php" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-python": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:bazel|easybuild|python|python3|rusthon|snakemake|starlark|xonsh|(?:.*\\.)?(?:bzl|eb|gyp|gypi|lmi|py|py3|pyde|pyi|pyp|pyt|pyw|rpy|sage|sagews|smk|snakefile|spec|tac|wsgi|xpy|xsh)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.python.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.python", patterns: [{ include: "source.python" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:bazel|easybuild|python|python3|rusthon|snakemake|starlark|xonsh|(?:.*\\.)?(?:bzl|eb|gyp|gypi|lmi|py|py3|pyde|pyi|pyp|pyt|pyw|rpy|sage|sagews|smk|snakefile|spec|tac|wsgi|xpy|xsh)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.python.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.python", patterns: [{ include: "source.python" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-r": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:rscript|splus|(?:.*\\.)?(?:r|rd|rsx)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.r.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.r", patterns: [{ include: "source.r" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:rscript|splus|(?:.*\\.)?(?:r|rd|rsx)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.r.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.r", patterns: [{ include: "source.r" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-raku": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:perl\\x2d6|perl6|pod\\x2d6|(?:.*\\.)?(?:6pl|6pm|nqp|p6|p6l|p6m|pl6|pm6|pod|pod6|raku|rakumod)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.raku.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.raku", patterns: [{ include: "source.raku" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:perl\\x2d6|perl6|pod\\x2d6|(?:.*\\.)?(?:6pl|6pm|nqp|p6|p6l|p6m|pl6|pm6|pod|pod6|raku|rakumod)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.raku.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.raku", patterns: [{ include: "source.raku" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-ruby": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:jruby|macruby|(?:.*\\.)?(?:builder|druby|duby|eye|gemspec|god|jbuilder|mirah|mspec|pluginspec|podspec|prawn|rabl|rake|rb|rbi|rbuild|rbw|rbx|ru|ruby|thor|watchr)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.ruby.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.ruby", patterns: [{ include: "source.ruby" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:jruby|macruby|(?:.*\\.)?(?:builder|druby|duby|eye|gemspec|god|jbuilder|mirah|mspec|pluginspec|podspec|prawn|rabl|rake|rb|rbi|rbuild|rbw|rbx|ru|ruby|thor|watchr)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.ruby.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.ruby", patterns: [{ include: "source.ruby" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-rust": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:rust|(?:.*\\.)?(?:rs|rs\\.in)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.rust.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.rust", patterns: [{ include: "source.rust" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:rust|(?:.*\\.)?(?:rs|rs\\.in)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.rust.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.rust", patterns: [{ include: "source.rust" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-scala": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:(?:.*\\.)?(?:kojo|sbt|sc|scala)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.scala.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.scala", patterns: [{ include: "source.scala" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:(?:.*\\.)?(?:kojo|sbt|sc|scala)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.scala.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.scala", patterns: [{ include: "source.scala" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-scss": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:(?:.*\\.)?scss))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.scss.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.scss", patterns: [{ include: "source.css.scss" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:(?:.*\\.)?scss))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.scss.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.scss", patterns: [{ include: "source.css.scss" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-shell": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:abuild|alpine\\x2dabuild|apkbuild|envrc|gentoo\\x2debuild|gentoo\\x2declass|openrc|openrc\\x2drunscript|shell|shell\\x2dscript|(?:.*\\.)?(?:bash|bats|command|csh|ebuild|eclass|ksh|sh|sh\\.in|tcsh|tmux|tool|zsh|zsh\\x2dtheme)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.shell.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.shell", patterns: [{ include: "source.shell" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:abuild|alpine\\x2dabuild|apkbuild|envrc|gentoo\\x2debuild|gentoo\\x2declass|openrc|openrc\\x2drunscript|shell|shell\\x2dscript|(?:.*\\.)?(?:bash|bats|command|csh|ebuild|eclass|ksh|sh|sh\\.in|tcsh|tmux|tool|zsh|zsh\\x2dtheme)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.shell.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.shell", patterns: [{ include: "source.shell" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-shell-session": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:bash\\x2dsession|console|shellsession|(?:.*\\.)?sh\\x2dsession))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.shell-session.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.shell-session", patterns: [{ include: "text.shell-session" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:bash\\x2dsession|console|shellsession|(?:.*\\.)?sh\\x2dsession))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.shell-session.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.shell-session", patterns: [{ include: "text.shell-session" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-sql": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:plpgsql|sqlpl|(?:.*\\.)?(?:cql|db2|ddl|mysql|pgsql|prc|sql|sql|sql|tab|udf|viw)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.sql.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.sql", patterns: [{ include: "source.sql" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:plpgsql|sqlpl|(?:.*\\.)?(?:cql|db2|ddl|mysql|pgsql|prc|sql|sql|sql|tab|udf|viw)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.sql.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.sql", patterns: [{ include: "source.sql" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-svg": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:(?:.*\\.)?svg))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.svg.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.svg", patterns: [{ include: "text.xml.svg" }, { include: "text.xml" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:(?:.*\\.)?svg))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.svg.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.svg", patterns: [{ include: "text.xml.svg" }, { include: "text.xml" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-swift": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:(?:.*\\.)?swift))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.swift.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.swift", patterns: [{ include: "source.swift" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:(?:.*\\.)?swift))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.swift.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.swift", patterns: [{ include: "source.swift" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-toml": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:(?:.*\\.)?toml))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.toml.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.toml", patterns: [{ include: "source.toml" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:(?:.*\\.)?toml))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.toml.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.toml", patterns: [{ include: "source.toml" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-ts": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:typescript|(?:.*\\.)?(?:cts|mts|ts)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.ts.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.ts", patterns: [{ include: "source.ts" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:typescript|(?:.*\\.)?(?:cts|mts|ts)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.ts.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.ts", patterns: [{ include: "source.ts" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-tsx": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:(?:.*\\.)?tsx))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.tsx.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.tsx", patterns: [{ include: "source.tsx" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:(?:.*\\.)?tsx))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.tsx.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.tsx", patterns: [{ include: "source.tsx" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-unknown": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?:[^\\t\\n\\r` ])+)(?:[\\t ]+((?:[^\\n\\r`])+))?)?(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, contentName: "markup.raw.code.fenced.mdx", end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.other.mdx" }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?:[^\\t\\n\\r ])+)(?:[\\t ]+((?:[^\\n\\r])+))?)?(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, contentName: "markup.raw.code.fenced.mdx", end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.other.mdx" }] }, "commonmark-code-fenced-vbnet": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:classic\\x2dvisual\\x2dbasic|fb|freebasic|realbasic|vb\\x2d\\.net|vb\\x2d6|vb\\.net|vb6|vbnet|vbscript|visual\\x2dbasic|visual\\x2dbasic\\x2d\\.net|visual\\x2dbasic\\x2d6|visual\\x2dbasic\\x2d6\\.0|visual\\x2dbasic\\x2dclassic|(?:.*\\.)?(?:bi|ctl|dsr|rbbas|rbfrm|rbmnu|rbres|rbtbar|rbuistate|vb|vbhtml|vbs)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.vbnet.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.vbnet", patterns: [{ include: "source.vbnet" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:classic\\x2dvisual\\x2dbasic|fb|freebasic|realbasic|vb\\x2d\\.net|vb\\x2d6|vb\\.net|vb6|vbnet|vbscript|visual\\x2dbasic|visual\\x2dbasic\\x2d\\.net|visual\\x2dbasic\\x2d6|visual\\x2dbasic\\x2d6\\.0|visual\\x2dbasic\\x2dclassic|(?:.*\\.)?(?:bi|ctl|dsr|rbbas|rbfrm|rbmnu|rbres|rbtbar|rbuistate|vb|vbhtml|vbs)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.vbnet.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.vbnet", patterns: [{ include: "source.vbnet" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-xml": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:collada|eagle|labview|web\\x2dontology\\x2dlanguage|xpages|(?:.*\\.)?(?:adml|admx|ant|axaml|axml|brd|builds|ccproj|ccxml|clixml|cproject|cscfg|csdef|csproj|ct|dae|depproj|dita|ditamap|ditaval|dll\\.config|dotsettings|filters|fsproj|fxml|glade|gmx|grxml|hzp|iml|ivy|jelly|jsproj|kml|launch|lvclass|lvlib|lvproj|mdpolicy|mjml|mxml|natvis|ndproj|nproj|nuspec|odd|osm|owl|pkgproj|proj|props|ps1xml|psc1|pt|qhelp|rdf|resx|rss|sch|sch|scxml|sfproj|shproj|srdf|storyboard|sublime\\x2dsnippet|targets|tml|ui|urdf|ux|vbproj|vcxproj|vsixmanifest|vssettings|vstemplate|vxml|wixproj|wsdl|wsf|wxi|wxl|wxs|x3d|xacro|xaml|xib|xlf|xliff|xmi|xml|xml\\.dist|xmp|xpl|xproc|xproj|xsd|xsp\\x2dconfig|xsp\\.metadata|xspec|xul|zcml)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.xml.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.xml", patterns: [{ include: "text.xml" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:collada|eagle|labview|web\\x2dontology\\x2dlanguage|xpages|(?:.*\\.)?(?:adml|admx|ant|axaml|axml|brd|builds|ccproj|ccxml|clixml|cproject|cscfg|csdef|csproj|ct|dae|depproj|dita|ditamap|ditaval|dll\\.config|dotsettings|filters|fsproj|fxml|glade|gmx|grxml|hzp|iml|ivy|jelly|jsproj|kml|launch|lvclass|lvlib|lvproj|mdpolicy|mjml|mxml|natvis|ndproj|nproj|nuspec|odd|osm|owl|pkgproj|proj|props|ps1xml|psc1|pt|qhelp|rdf|resx|rss|sch|sch|scxml|sfproj|shproj|srdf|storyboard|sublime\\x2dsnippet|targets|tml|ui|urdf|ux|vbproj|vcxproj|vsixmanifest|vssettings|vstemplate|vxml|wixproj|wsdl|wsf|wxi|wxl|wxs|x3d|xacro|xaml|xib|xlf|xliff|xmi|xml|xml\\.dist|xmp|xpl|xproc|xproj|xsd|xsp\\x2dconfig|xsp\\.metadata|xspec|xul|zcml)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.xml.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.xml", patterns: [{ include: "text.xml" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-fenced-yaml": { patterns: [{ begin: "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:jar\\x2dmanifest|kaitai\\x2dstruct|oasv2\\x2dyaml|oasv3\\x2dyaml|unity3d\\x2dasset|yaml|yml|(?:.*\\.)?(?:anim|asset|ksy|lkml|lookml|mat|meta|mir|prefab|raml|reek|rviz|sublime\\x2dsyntax|syntax|unity|yaml\\x2dtmlanguage|yaml\\.sed|yml\\.mysql)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.yaml.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.yaml", patterns: [{ include: "source.yaml" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }, { begin: "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:jar\\x2dmanifest|kaitai\\x2dstruct|oasv2\\x2dyaml|oasv3\\x2dyaml|unity3d\\x2dasset|yaml|yml|(?:.*\\.)?(?:anim|asset|ksy|lkml|lookml|mat|meta|mir|prefab|raml|reek|rviz|sublime\\x2dsyntax|syntax|unity|yaml\\x2dtmlanguage|yaml\\.sed|yml\\.mysql)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)", beginCaptures: { 1: { name: "string.other.begin.code.fenced.mdx" }, 2: { name: "entity.name.function.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { patterns: [{ include: "#markdown-string" }] } }, end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.code.fenced.mdx" } }, name: "markup.code.yaml.mdx", patterns: [{ begin: "(^|\\G)(\\s*)(.*)", contentName: "meta.embedded.yaml", patterns: [{ include: "source.yaml" }], while: "(^|\\G)(?![\\t ]*([`~]{3,})[\\t ]*$)" }] }] }, "commonmark-code-text": { captures: { 1: { name: "string.other.begin.code.mdx" }, 2: { name: "markup.raw.code.mdx markup.inline.raw.code.mdx" }, 3: { name: "string.other.end.code.mdx" } }, match: "(?<!`)(`+)(?!`)(.+?)(?<!`)(\\1)(?!`)", name: "markup.code.other.mdx" }, "commonmark-definition": { captures: { 1: { name: "string.other.begin.mdx" }, 2: { name: "entity.name.identifier.mdx", patterns: [{ include: "#markdown-string" }] }, 3: { name: "string.other.end.mdx" }, 4: { name: "punctuation.separator.key-value.mdx" }, 5: { name: "string.other.begin.destination.mdx" }, 6: { name: "string.other.link.destination.mdx", patterns: [{ include: "#markdown-string" }] }, 7: { name: "string.other.end.destination.mdx" }, 8: { name: "string.other.link.destination.mdx", patterns: [{ include: "#markdown-string" }] }, 9: { name: "string.other.begin.mdx" }, 10: { name: "string.quoted.double.mdx", patterns: [{ include: "#markdown-string" }] }, 11: { name: "string.other.end.mdx" }, 12: { name: "string.other.begin.mdx" }, 13: { name: "string.quoted.single.mdx", patterns: [{ include: "#markdown-string" }] }, 14: { name: "string.other.end.mdx" }, 15: { name: "string.other.begin.mdx" }, 16: { name: "string.quoted.paren.mdx", patterns: [{ include: "#markdown-string" }] }, 17: { name: "string.other.end.mdx" } }, match: `(?:^|\\G)[\\t ]*(\\[)((?:[^\\[\\\\\\]]|\\\\[\\[\\\\\\]]?)+?)(\\])(:)[ \\t]*(?:(<)((?:[^\\n<\\\\>]|\\\\[<\\\\>]?)*)(>)|(\\g<destination_raw>))(?:[\\t ]+(?:(")((?:[^"\\\\]|\\\\["\\\\]?)*)(")|(')((?:[^'\\\\]|\\\\['\\\\]?)*)(')|(\\()((?:[^\\)\\\\]|\\\\[\\)\\\\]?)*)(\\))))?$(?<destination_raw>(?!\\<)(?:(?:[^\\p{Cc}\\ \\\\\\(\\)]|\\\\[\\(\\)\\\\]?)|\\(\\g<destination_raw>*\\))+){0}`, name: "meta.link.reference.def.mdx" }, "commonmark-hard-break-escape": { match: "\\\\$", name: "constant.language.character-escape.line-ending.mdx" }, "commonmark-hard-break-trailing": { match: "( ){2,}$", name: "carriage-return constant.language.character-escape.line-ending.mdx" }, "commonmark-heading-atx": { patterns: [{ captures: { 1: { name: "punctuation.definition.heading.mdx" }, 2: { name: "entity.name.section.mdx", patterns: [{ include: "#markdown-text" }] }, 3: { name: "punctuation.definition.heading.mdx" } }, match: "(?:^|\\G)[\\t ]*(#{1}(?!#))(?:[ \\t]+([^\\r\\n]+?)(?:[ \\t]+(#+?))?)?[ \\t]*$", name: "markup.heading.atx.1.mdx" }, { captures: { 1: { name: "punctuation.definition.heading.mdx" }, 2: { name: "entity.name.section.mdx", patterns: [{ include: "#markdown-text" }] }, 3: { name: "punctuation.definition.heading.mdx" } }, match: "(?:^|\\G)[\\t ]*(#{2}(?!#))(?:[ \\t]+([^\\r\\n]+?)(?:[ \\t]+(#+?))?)?[ \\t]*$", name: "markup.heading.atx.2.mdx" }, { captures: { 1: { name: "punctuation.definition.heading.mdx" }, 2: { name: "entity.name.section.mdx", patterns: [{ include: "#markdown-text" }] }, 3: { name: "punctuation.definition.heading.mdx" } }, match: "(?:^|\\G)[\\t ]*(#{3}(?!#))(?:[ \\t]+([^\\r\\n]+?)(?:[ \\t]+(#+?))?)?[ \\t]*$", name: "markup.heading.atx.2.mdx" }, { captures: { 1: { name: "punctuation.definition.heading.mdx" }, 2: { name: "entity.name.section.mdx", patterns: [{ include: "#markdown-text" }] }, 3: { name: "punctuation.definition.heading.mdx" } }, match: "(?:^|\\G)[\\t ]*(#{4}(?!#))(?:[ \\t]+([^\\r\\n]+?)(?:[ \\t]+(#+?))?)?[ \\t]*$", name: "markup.heading.atx.2.mdx" }, { captures: { 1: { name: "punctuation.definition.heading.mdx" }, 2: { name: "entity.name.section.mdx", patterns: [{ include: "#markdown-text" }] }, 3: { name: "punctuation.definition.heading.mdx" } }, match: "(?:^|\\G)[\\t ]*(#{5}(?!#))(?:[ \\t]+([^\\r\\n]+?)(?:[ \\t]+(#+?))?)?[ \\t]*$", name: "markup.heading.atx.2.mdx" }, { captures: { 1: { name: "punctuation.definition.heading.mdx" }, 2: { name: "entity.name.section.mdx", patterns: [{ include: "#markdown-text" }] }, 3: { name: "punctuation.definition.heading.mdx" } }, match: "(?:^|\\G)[\\t ]*(#{6}(?!#))(?:[ \\t]+([^\\r\\n]+?)(?:[ \\t]+(#+?))?)?[ \\t]*$", name: "markup.heading.atx.2.mdx" }] }, "commonmark-heading-setext": { patterns: [{ match: "(?:^|\\G)[\\t ]*(={1,})[ \\t]*$", name: "markup.heading.setext.1.mdx" }, { match: "(?:^|\\G)[\\t ]*(-{1,})[ \\t]*$", name: "markup.heading.setext.2.mdx" }] }, "commonmark-label-end": { patterns: [{ captures: { 1: { name: "string.other.end.mdx" }, 2: { name: "string.other.begin.mdx" }, 3: { name: "string.other.begin.destination.mdx" }, 4: { name: "string.other.link.destination.mdx", patterns: [{ include: "#markdown-string" }] }, 5: { name: "string.other.end.destination.mdx" }, 6: { name: "string.other.link.destination.mdx", patterns: [{ include: "#markdown-string" }] }, 7: { name: "string.other.begin.mdx" }, 8: { name: "string.quoted.double.mdx", patterns: [{ include: "#markdown-string" }] }, 9: { name: "string.other.end.mdx" }, 10: { name: "string.other.begin.mdx" }, 11: { name: "string.quoted.single.mdx", patterns: [{ include: "#markdown-string" }] }, 12: { name: "string.other.end.mdx" }, 13: { name: "string.other.begin.mdx" }, 14: { name: "string.quoted.paren.mdx", patterns: [{ include: "#markdown-string" }] }, 15: { name: "string.other.end.mdx" }, 16: { name: "string.other.end.mdx" } }, match: `(\\])(\\()[\\t ]*(?:(?:(<)((?:[^\\n<\\\\>]|\\\\[<\\\\>]?)*)(>)|(\\g<destination_raw>))(?:[\\t ]+(?:(")((?:[^"\\\\]|\\\\["\\\\]?)*)(")|(')((?:[^'\\\\]|\\\\['\\\\]?)*)(')|(\\()((?:[^\\)\\\\]|\\\\[\\)\\\\]?)*)(\\))))?)?[\\t ]*(\\))(?<destination_raw>(?!\\<)(?:(?:[^\\p{Cc}\\ \\\\\\(\\)]|\\\\[\\(\\)\\\\]?)|\\(\\g<destination_raw>*\\))+){0}` }, { captures: { 1: { name: "string.other.end.mdx" }, 2: { name: "string.other.begin.mdx" }, 3: { name: "entity.name.identifier.mdx", patterns: [{ include: "#markdown-string" }] }, 4: { name: "string.other.end.mdx" } }, match: "(\\])(\\[)((?:[^\\[\\\\\\]]|\\\\[\\[\\\\\\]]?)+?)(\\])" }, { captures: { 1: { name: "string.other.end.mdx" } }, match: "(\\])" }] }, "commonmark-label-start": { patterns: [{ match: "\\!\\[(?!\\^)", name: "string.other.begin.image.mdx" }, { match: "\\[", name: "string.other.begin.link.mdx" }] }, "commonmark-list-item": { patterns: [{ begin: "(?:^|\\G)[\\t ]*((?:[*+-]))(?:[ ]{4}(?![ ])|\\t)(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?", beginCaptures: { 1: { name: "variable.unordered.list.mdx" }, 2: { name: "keyword.other.tasklist.mdx" } }, patterns: [{ include: "#markdown-sections" }], while: "^(?=[\\t ]*$)|(?:^|\\G)(?:[ ]{4}|\\t)[ ]{1}" }, { begin: "(?:^|\\G)[\\t ]*((?:[*+-]))(?:[ ]{3}(?![ ]))(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?", beginCaptures: { 1: { name: "variable.unordered.list.mdx" }, 2: { name: "keyword.other.tasklist.mdx" } }, patterns: [{ include: "#markdown-sections" }], while: "^(?=[\\t ]*$)|(?:^|\\G)(?:[ ]{4}|\\t)" }, { begin: "(?:^|\\G)[\\t ]*((?:[*+-]))(?:[ ]{2}(?![ ]))(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?", beginCaptures: { 1: { name: "variable.unordered.list.mdx" }, 2: { name: "keyword.other.tasklist.mdx" } }, patterns: [{ include: "#markdown-sections" }], while: "^(?=[\\t ]*$)|(?:^|\\G)[ ]{3}" }, { begin: "(?:^|\\G)[\\t ]*((?:[*+-]))(?:[ ]{1}|(?=\\n))(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?", beginCaptures: { 1: { name: "variable.unordered.list.mdx" }, 2: { name: "keyword.other.tasklist.mdx" } }, patterns: [{ include: "#markdown-sections" }], while: "^(?=[\\t ]*$)|(?:^|\\G)[ ]{2}" }, { begin: "(?:^|\\G)[\\t ]*([0-9]{9})((?:\\.|\\)))(?:[ ]{4}(?![ ])|\\t(?![\\t ]))(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?", beginCaptures: { 1: { name: "string.other.number.mdx" }, 2: { name: "variable.ordered.list.mdx" }, 3: { name: "keyword.other.tasklist.mdx" } }, patterns: [{ include: "#markdown-sections" }], while: "^(?=[\\t ]*$)|(?:^|\\G)(?:[ ]{4}|\\t){3}[ ]{2}" }, { begin: "(?:^|\\G)[\\t ]*(?:([0-9]{9})((?:\\.|\\)))(?:[ ]{3}(?![ ]))|([0-9]{8})((?:\\.|\\)))(?:[ ]{4}(?![ ])))(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?", beginCaptures: { 1: { name: "string.other.number.mdx" }, 2: { name: "variable.ordered.list.mdx" }, 3: { name: "string.other.number.mdx" }, 4: { name: "variable.ordered.list.mdx" }, 5: { name: "keyword.other.tasklist.mdx" } }, patterns: [{ include: "#markdown-sections" }], while: "^(?=[\\t ]*$)|(?:^|\\G)(?:[ ]{4}|\\t){3}[ ]{1}" }, { begin: "(?:^|\\G)[\\t ]*(?:([0-9]{9})((?:\\.|\\)))(?:[ ]{2}(?![ ]))|([0-9]{8})((?:\\.|\\)))(?:[ ]{3}(?![ ]))|([0-9]{7})((?:\\.|\\)))(?:[ ]{4}(?![ ])))(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?", beginCaptures: { 1: { name: "string.other.number.mdx" }, 2: { name: "variable.ordered.list.mdx" }, 3: { name: "string.other.number.mdx" }, 4: { name: "variable.ordered.list.mdx" }, 5: { name: "string.other.number.mdx" }, 6: { name: "variable.ordered.list.mdx" }, 7: { name: "keyword.other.tasklist.mdx" } }, patterns: [{ include: "#markdown-sections" }], while: "^(?=[\\t ]*$)|(?:^|\\G)(?:[ ]{4}|\\t){3}" }, { begin: "(?:^|\\G)[\\t ]*(?:([0-9]{9})((?:\\.|\\)))(?:[ ]{1}|(?=[ \\t]*\\n))|([0-9]{8})((?:\\.|\\)))(?:[ ]{2}(?![ ]))|([0-9]{7})((?:\\.|\\)))(?:[ ]{3}(?![ ]))|([0-9]{6})((?:\\.|\\)))(?:[ ]{4}(?![ ])))(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?", beginCaptures: { 1: { name: "string.other.number.mdx" }, 2: { name: "variable.ordered.list.mdx" }, 3: { name: "string.other.number.mdx" }, 4: { name: "variable.ordered.list.mdx" }, 5: { name: "string.other.number.mdx" }, 6: { name: "variable.ordered.list.mdx" }, 7: { name: "string.other.number.mdx" }, 8: { name: "variable.ordered.list.mdx" }, 9: { name: "keyword.other.tasklist.mdx" } }, patterns: [{ include: "#markdown-sections" }], while: "^(?=[\\t ]*$)|(?:^|\\G)(?:[ ]{4}|\\t){2}[ ]{3}" }, { begin: "(?:^|\\G)[\\t ]*(?:([0-9]{8})((?:\\.|\\)))(?:[ ]{1}|(?=[ \\t]*\\n))|([0-9]{7})((?:\\.|\\)))(?:[ ]{2}(?![ ]))|([0-9]{6})((?:\\.|\\)))(?:[ ]{3}(?![ ]))|([0-9]{5})((?:\\.|\\)))(?:[ ]{4}(?![ ])))(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?", beginCaptures: { 1: { name: "string.other.number.mdx" }, 2: { name: "variable.ordered.list.mdx" }, 3: { name: "string.other.number.mdx" }, 4: { name: "variable.ordered.list.mdx" }, 5: { name: "string.other.number.mdx" }, 6: { name: "variable.ordered.list.mdx" }, 7: { name: "string.other.number.mdx" }, 8: { name: "variable.ordered.list.mdx" }, 9: { name: "keyword.other.tasklist.mdx" } }, patterns: [{ include: "#markdown-sections" }], while: "^(?=[\\t ]*$)|(?:^|\\G)(?:[ ]{4}|\\t){2}[ ]{2}" }, { begin: "(?:^|\\G)[\\t ]*(?:([0-9]{7})((?:\\.|\\)))(?:[ ]{1}|(?=[ \\t]*\\n))|([0-9]{6})((?:\\.|\\)))(?:[ ]{2}(?![ ]))|([0-9]{5})((?:\\.|\\)))(?:[ ]{3}(?![ ]))|([0-9]{4})((?:\\.|\\)))(?:[ ]{4}(?![ ])))(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?", beginCaptures: { 1: { name: "string.other.number.mdx" }, 2: { name: "variable.ordered.list.mdx" }, 3: { name: "string.other.number.mdx" }, 4: { name: "variable.ordered.list.mdx" }, 5: { name: "string.other.number.mdx" }, 6: { name: "variable.ordered.list.mdx" }, 7: { name: "string.other.number.mdx" }, 8: { name: "variable.ordered.list.mdx" }, 9: { name: "keyword.other.tasklist.mdx" } }, patterns: [{ include: "#markdown-sections" }], while: "^(?=[\\t ]*$)|(?:^|\\G)(?:[ ]{4}|\\t){2}[ ]{1}" }, { begin: "(?:^|\\G)[\\t ]*(?:([0-9]{6})((?:\\.|\\)))(?:[ ]{1}|(?=[ \\t]*\\n))|([0-9]{5})((?:\\.|\\)))(?:[ ]{2}(?![ ]))|([0-9]{4})((?:\\.|\\)))(?:[ ]{3}(?![ ]))|([0-9]{3})((?:\\.|\\)))(?:[ ]{4}(?![ ])))(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?", beginCaptures: { 1: { name: "string.other.number.mdx" }, 2: { name: "variable.ordered.list.mdx" }, 3: { name: "string.other.number.mdx" }, 4: { name: "variable.ordered.list.mdx" }, 5: { name: "string.other.number.mdx" }, 6: { name: "variable.ordered.list.mdx" }, 7: { name: "string.other.number.mdx" }, 8: { name: "variable.ordered.list.mdx" }, 9: { name: "keyword.other.tasklist.mdx" } }, patterns: [{ include: "#markdown-sections" }], while: "^(?=[\\t ]*$)|(?:^|\\G)(?:[ ]{4}|\\t){2}" }, { begin: "(?:^|\\G)[\\t ]*(?:([0-9]{5})((?:\\.|\\)))(?:[ ]{1}|(?=[ \\t]*\\n))|([0-9]{4})((?:\\.|\\)))(?:[ ]{2}(?![ ]))|([0-9]{3})((?:\\.|\\)))(?:[ ]{3}(?![ ]))|([0-9]{2})((?:\\.|\\)))(?:[ ]{4}(?![ ])))(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?", beginCaptures: { 1: { name: "string.other.number.mdx" }, 2: { name: "variable.ordered.list.mdx" }, 3: { name: "string.other.number.mdx" }, 4: { name: "variable.ordered.list.mdx" }, 5: { name: "string.other.number.mdx" }, 6: { name: "variable.ordered.list.mdx" }, 7: { name: "string.other.number.mdx" }, 8: { name: "variable.ordered.list.mdx" }, 9: { name: "keyword.other.tasklist.mdx" } }, patterns: [{ include: "#markdown-sections" }], while: "^(?=[\\t ]*$)|(?:^|\\G)(?:[ ]{4}|\\t)[ ]{3}" }, { begin: "(?:^|\\G)[\\t ]*(?:([0-9]{4})((?:\\.|\\)))(?:[ ]{1}|(?=[ \\t]*\\n))|([0-9]{3})((?:\\.|\\)))(?:[ ]{2}(?![ ]))|([0-9]{2})((?:\\.|\\)))(?:[ ]{3}(?![ ]))|([0-9]{1})((?:\\.|\\)))(?:[ ]{4}(?![ ])))(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?", beginCaptures: { 1: { name: "string.other.number.mdx" }, 2: { name: "variable.ordered.list.mdx" }, 3: { name: "string.other.number.mdx" }, 4: { name: "variable.ordered.list.mdx" }, 5: { name: "string.other.number.mdx" }, 6: { name: "variable.ordered.list.mdx" }, 7: { name: "string.other.number.mdx" }, 8: { name: "variable.ordered.list.mdx" }, 9: { name: "keyword.other.tasklist.mdx" } }, patterns: [{ include: "#markdown-sections" }], while: "^(?=[\\t ]*$)|(?:^|\\G)(?:[ ]{4}|\\t)[ ]{2}" }, { begin: "(?:^|\\G)[\\t ]*(?:([0-9]{3})((?:\\.|\\)))(?:[ ]{1}|(?=[ \\t]*\\n))|([0-9]{2})((?:\\.|\\)))(?:[ ]{2}(?![ ]))|([0-9]{1})((?:\\.|\\)))(?:[ ]{3}(?![ ])))(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?", beginCaptures: { 1: { name: "string.other.number.mdx" }, 2: { name: "variable.ordered.list.mdx" }, 3: { name: "string.other.number.mdx" }, 4: { name: "variable.ordered.list.mdx" }, 5: { name: "string.other.number.mdx" }, 6: { name: "variable.ordered.list.mdx" }, 7: { name: "keyword.other.tasklist.mdx" } }, patterns: [{ include: "#markdown-sections" }], while: "^(?=[\\t ]*$)|(?:^|\\G)(?:[ ]{4}|\\t)[ ]{1}" }, { begin: "(?:^|\\G)[\\t ]*(?:([0-9]{2})((?:\\.|\\)))(?:[ ]{1}|(?=[ \\t]*\\n))|([0-9])((?:\\.|\\)))(?:[ ]{2}(?![ ])))(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?", beginCaptures: { 1: { name: "string.other.number.mdx" }, 2: { name: "variable.ordered.list.mdx" }, 3: { name: "string.other.number.mdx" }, 4: { name: "variable.ordered.list.mdx" }, 5: { name: "keyword.other.tasklist.mdx" } }, patterns: [{ include: "#markdown-sections" }], while: "^(?=[\\t ]*$)|(?:^|\\G)(?:[ ]{4}|\\t)" }, { begin: "(?:^|\\G)[\\t ]*([0-9])((?:\\.|\\)))(?:[ ]{1}|(?=[ \\t]*\\n))(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?", beginCaptures: { 1: { name: "string.other.number.mdx" }, 2: { name: "variable.ordered.list.mdx" }, 3: { name: "keyword.other.tasklist.mdx" } }, patterns: [{ include: "#markdown-sections" }], while: "^(?=[\\t ]*$)|(?:^|\\G)[ ]{3}" }] }, "commonmark-paragraph": { begin: "(?![\\t ]*$)", name: "meta.paragraph.mdx", patterns: [{ include: "#markdown-text" }], while: "(?:^|\\G)(?:[ ]{4}|\\t)" }, "commonmark-thematic-break": { match: "(?:^|\\G)[\\t ]*([-*_])[ \\t]*(?:\\1[ \\t]*){2,}$", name: "meta.separator.mdx" }, "extension-gfm-autolink-literal": { patterns: [{ match: `(?<=^|[\\t\\n\\r \\(\\*\\_\\[\\]~])(?=(?i:www)\\.[^\\n\\r])(?:(?:[\\p{L}\\p{N}]|-|[\\._](?!(?:[!"'\\)\\*,\\.:;<\\?_~]*(?:[\\s<]|\\][\\t\\n \\(\\[]))))+\\g<path>?)?(?<path>(?:(?:[^\\t\\n\\r !"&'\\(\\)\\*,\\.:;<\\?\\]_~]|&(?![A-Za-z]*;(?:[!"'\\)\\*,\\.:;<\\?_~]*(?:[\\s<]|\\][\\t\\n \\(\\[])))|[!"'\\)\\*,\\.:;\\?_~](?!(?:[!"'\\)\\*,\\.:;<\\?_~]*(?:[\\s<]|\\][\\t\\n \\(\\[]))))|\\(\\g<path>*\\))+){0}`, name: "string.other.link.autolink.literal.www.mdx" }, { match: `(?<=^|[^A-Za-z])(?i:https?://)(?=[\\p{L}\\p{N}])(?:(?:[\\p{L}\\p{N}]|-|[\\._](?!(?:[!"'\\)\\*,\\.:;<\\?_~]*(?:[\\s<]|\\][\\t\\n \\(\\[]))))+\\g<path>?)?(?<path>(?:(?:[^\\t\\n\\r !"&'\\(\\)\\*,\\.:;<\\?\\]_~]|&(?![A-Za-z]*;(?:[!"'\\)\\*,\\.:;<\\?_~]*(?:[\\s<]|\\][\\t\\n \\(\\[])))|[!"'\\)\\*,\\.:;\\?_~](?!(?:[!"'\\)\\*,\\.:;<\\?_~]*(?:[\\s<]|\\][\\t\\n \\(\\[]))))|\\(\\g<path>*\\))+){0}`, name: "string.other.link.autolink.literal.http.mdx" }, { match: `(?<=^|[^A-Za-z/])(?i:mailto:|xmpp:)?(?:[0-9A-Za-z+\\-\\._])+@(?:(?:[0-9A-Za-z]|[-_](?!(?:[!"'\\)\\*,\\.:;<\\?_~]*(?:[\\s<]|\\][\\t\\n \\(\\[]))))+(?:\\.(?!(?:[!"'\\)\\*,\\.:;<\\?_~]*(?:[\\s<]|\\][\\t\\n \\(\\[])))))+(?:[A-Za-z]|[-_](?!(?:[!"'\\)\\*,\\.:;<\\?_~]*(?:[\\s<]|\\][\\t\\n \\(\\[]))))+`, name: "string.other.link.autolink.literal.email.mdx" }] }, "extension-gfm-footnote-call": { captures: { 1: { name: "string.other.begin.link.mdx" }, 2: { name: "string.other.begin.footnote.mdx" }, 3: { name: "entity.name.identifier.mdx", patterns: [{ include: "#markdown-string" }] }, 4: { name: "string.other.end.footnote.mdx" } }, match: "(\\[)(\\^)((?:[^\\t\\n\\r \\[\\\\\\]]|\\\\[\\[\\\\\\]]?)+)(\\])" }, "extension-gfm-footnote-definition": { begin: "(?:^|\\G)[\\t ]*(\\[)(\\^)((?:[^\\t\\n\\r \\[\\\\\\]]|\\\\[\\[\\\\\\]]?)+)(\\])(:)[\\t ]*", beginCaptures: { 1: { name: "string.other.begin.link.mdx" }, 2: { name: "string.other.begin.footnote.mdx" }, 3: { name: "entity.name.identifier.mdx", patterns: [{ include: "#markdown-string" }] }, 4: { name: "string.other.end.footnote.mdx" } }, patterns: [{ include: "#markdown-sections" }], while: "^(?=[\\t ]*$)|(?:^|\\G)(?:[ ]{4}|\\t)" }, "extension-gfm-strikethrough": { match: "(?<=\\S)(?<!~)~{1,2}(?!~)|(?<!~)~{1,2}(?=\\S)(?!~)", name: "string.other.strikethrough.mdx" }, "extension-gfm-table": { begin: "(?:^|\\G)[\\t ]*(?=\\|[^\\n\\r]+\\|[ \\t]*$)", end: "^(?=[\\t ]*$)|$", patterns: [{ captures: { 1: { patterns: [{ include: "#markdown-text" }] } }, match: "(?<=\\||(?:^|\\G))[\\t ]*((?:[^\\n\\r\\\\\\|]|\\\\[\\\\\\|]?)+?)[\\t ]*(?=\\||$)" }, { match: "(?:\\|)", name: "markup.list.table-delimiter.mdx" }] }, "extension-github-gemoji": { captures: { 1: { name: "punctuation.definition.gemoji.begin.mdx" }, 2: { name: "keyword.control.gemoji.mdx" }, 3: { name: "punctuation.definition.gemoji.end.mdx" } }, match: "(:)((?:(?:(?:hand_with_index_finger_and_thumb_cros|mailbox_clo|fist_rai|confu)s|r(?:aised_hand_with_fingers_splay|e(?:gister|l(?:iev|ax)))|disappointed_reliev|confound|(?:a(?:ston|ngu)i|flu)sh|unamus|hush)e|(?:chart_with_(?:down|up)wards_tre|large_orange_diamo|small_(?:orang|blu)e_diamo|large_blue_diamo|parasol_on_grou|loud_sou|rewi)n|(?:rightwards_pushing_h|hourglass_flowing_s|leftwards_(?:pushing_)?h|(?:raised_back_of|palm_(?:down|up)|call_me)_h|(?:(?:(?:clippert|ascensi)on|norfolk)_is|christmas_is|desert_is|bouvet_is|new_zea|thai|eng|fin|ire)l|rightwards_h|pinching_h|writing_h|s(?:w(?:itzer|azi)|cot)l|magic_w|ok_h|icel)an|s(?:un_behind_(?:large|small|rain)_clou|hallow_pan_of_foo|tar_of_davi|leeping_be|kateboar|a(?:tisfie|uropo)|hiel|oun|qui)|(?:ear_with_hearing_a|pouring_liqu)i|(?:identification_c|(?:arrow_(?:back|for)|fast_for)w|credit_c|woman_be|biohaz|man_be|l(?:eop|iz))ar|m(?:usical_key|ortar_)boar|(?:drop_of_bl|canned_f)oo|c(?:apital_abc|upi)|person_bal|(?:black_bi|(?:cust|plac)a)r|(?:clip|key)boar|mermai|pea_po|worrie|po(?:la|u)n|threa|dv)d|(?:(?:(?:face_with_open_eyes_and_hand_over|face_with_diagonal|open|no)_mou|h(?:and_over_mou|yacin)|mammo)t|running_shirt_with_sas|(?:(?:fishing_pole_and_|blow)fi|(?:tropical_f|petri_d)i|(?:paint|tooth)bru|banglade|jellyfi)s|(?:camera_fl|wavy_d)as|triump|menora|pouc|blus|watc|das|has)h|(?:s(?:o(?:(?:uth_georgia_south_sandwich|lomon)_island|ck)|miling_face_with_three_heart|t_kitts_nevi|weat_drop|agittariu|c(?:orpiu|issor)|ymbol|hort)|twisted_rightwards_arrow|(?:northern_mariana|heard_mcdonald|(?:british_virgi|us_virgi|pitcair|cayma)n|turks_caicos|us_outlying|(?:falk|a)land|marshall|c(?:anary|ocos)|faroe)_island|(?:face_holding_back_tea|(?:c(?:ard_index_divid|rossed_fing)|pinched_fing)e|night_with_sta)r|(?:two_(?:wo)?men_holding|people_holding|heart|open)_hand|(?:sunrise_over_mountai|(?:congratul|united_n)atio|jea)n|(?:caribbean_)?netherland|(?:f(?:lower_playing_car|ace_in_clou)|crossed_swor|prayer_bea)d|(?:money_with_win|nest_with_eg|crossed_fla|hotsprin)g|revolving_heart|(?:high_brightne|(?:expression|wire)le|(?:tumbler|wine)_gla|milk_gla|compa|dre)s|performing_art|earth_america|orthodox_cros|l(?:ow_brightnes|a(?:tin_cros|o)|ung)|no_pedestrian|c(?:ontrol_kno|lu)b|b(?:ookmark_tab|rick|ean)|nesting_doll|cook_island|(?:fleur_de_l|tenn)i|(?:o(?:ncoming_b|phiuch|ctop)|hi(?:ppopotam|bisc)|trolleyb|m(?:(?:rs|x)_cla|auriti|inib)|belar|cact|abac|(?:cyp|tau)r)u|medal_sport|(?:chopstic|firewor)k|rhinocero|(?:p(?:aw_prin|eanu)|footprin)t|two_heart|princes|(?:hondur|baham)a|barbado|aquariu|c(?:ustom|hain)|maraca|comoro|flag|wale|hug|vh)s|(?:(?:diamond_shape_with_a_dot_ins|playground_sl)id|(?:(?:first_quarter|last_quarter|full|new)_moon_with|(?:zipper|money)_mouth|dotted_line|upside_down|c(?:rying_c|owboy_h)at|(?:disguis|nauseat)ed|neutral|monocle|panda|tired|woozy|clown|nerd|zany|fox)_fac|s(?:t(?:uck_out_tongue_winking_ey|eam_locomotiv)|(?:lightly_(?:frown|smil)|neez|h(?:ush|ak))ing_fac|(?:tudio_micropho|(?:hinto_shr|lot_mach)i|ierra_leo|axopho)n|mall_airplan|un_with_fac|a(?:luting_fac|tellit|k)|haved_ic|y(?:nagogu|ring)|n(?:owfl)?ak|urinam|pong)|(?:black_(?:medium_)?small|white_(?:(?:medium_)?small|large)|(?:black|white)_medium|black_large|orange|purple|yellow|b(?:rown|lue)|red)_squar|(?:(?:perso|woma)n_with_|man_with_)?probing_can|(?:p(?:ut_litter_in_its_pl|outing_f)|frowning_f|cold_f|wind_f|hot_f)ac|(?:arrows_c(?:ounterc)?lockwi|computer_mou|derelict_hou|carousel_hor|c(?:ity_sunri|hee)|heartpul|briefca|racehor|pig_no|lacros)s|(?:(?:face_with_head_band|ideograph_advant|adhesive_band|under|pack)a|currency_exchan|l(?:eft_l)?ugga|woman_jud|name_bad|man_jud|jud)g|face_with_peeking_ey|(?:(?:e(?:uropean_post_off|ar_of_r)|post_off)i|information_sour|ambulan)c|artificial_satellit|(?:busts?_in_silhouet|(?:vulcan_sal|parach)u|m(?:usical_no|ayot)|ro(?:ller_ska|set)|timor_les|ice_ska)t|(?:(?:incoming|red)_envelo|s(?:ao_tome_princi|tethosco)|(?:micro|tele)sco|citysca)p|(?:(?:(?:convenience|department)_st|musical_sc)o|f(?:light_depar|ramed_pic)tu|love_you_gestu|heart_on_fi|japanese_og|cote_divoi|perseve|singapo)r|b(?:ullettrain_sid|eliz|on)|(?:(?:female_|male_)?dete|radioa)ctiv|(?:christmas|deciduous|evergreen|tanabata|palm)_tre|(?:vibration_mo|cape_ver)d|(?:fortune_cook|neckt|self)i|(?:fork_and_)?knif|athletic_sho|(?:p(?:lead|arty)|drool|curs|melt|yawn|ly)ing_fac|vomiting_fac|(?:(?:c(?:urling_st|ycl)|meat_on_b|repeat_|headst)o|(?:fire_eng|tanger|ukra)i|rice_sce|(?:micro|i)pho|champag|pho)n|(?:cricket|video)_gam|(?:boxing_glo|oli)v|(?:d(?:ragon|izzy)|monkey)_fac|(?:m(?:artin|ozamb)iq|fond)u|wind_chim|test_tub|flat_sho|m(?:a(?:ns_sho|t)|icrob|oos|ut)|(?:handsh|fish_c|moon_c|cupc)ak|nail_car|zimbabw|ho(?:neybe|l)|ice_cub|airplan|pensiv|c(?:a(?:n(?:dl|o)|k)|o(?:ffe|oki))|tongu|purs|f(?:lut|iv)|d(?:at|ov)|n(?:iu|os)|kit|rag|ax)e|(?:(?:british_indian_ocean_territo|(?:plate_with_cutl|batt)e|medal_milita|low_batte|hunga|wea)r|family_(?:woman_(?:woman_(?:girl|boy)|girl|boy)|man_(?:woman_(?:girl|boy)|man_(?:girl|boy)|girl|boy))_bo|person_feeding_bab|woman_feeding_bab|s(?:u(?:spension_railwa|nn)|t(?:atue_of_libert|_barthelem|rawberr))|(?:m(?:ountain_cable|ilky_)|aerial_tram)wa|articulated_lorr|man_feeding_bab|mountain_railwa|partly_sunn|(?:vatican_c|infin)it|(?:outbox_tr|inbox_tr|birthd|motorw|paragu|urugu|norw|x_r)a|butterfl|ring_buo|t(?:urke|roph)|angr|fogg)y|(?:(?:perso|woma)n_in_motorized_wheelchai|(?:(?:notebook_with_decorative_c|four_leaf_cl)ov|(?:index_pointing_at_the_vie|white_flo)w|(?:face_with_thermome|non\\-potable_wa|woman_firefigh|desktop_compu|m(?:an_firefigh|otor_scoo)|(?:ro(?:ller_coa|o)|oy)s|potable_wa|kick_scoo|thermome|firefigh|helicop|ot)t|(?:woman_factory_wor|(?:woman_office|woman_health|health)_wor|man_(?:factory|office|health)_wor|(?:factory|office)_wor|rice_crac|black_jo|firecrac)k|telephone_receiv|(?:palms_up_toget|f(?:ire_extinguis|eat)|teac)h|(?:(?:open_)?file_fol|level_sli)d|police_offic|f(?:lying_sauc|arm)|woman_teach|roll_of_pap|(?:m(?:iddle_f|an_s)in|woman_sin|hambur|plun|dag)g|do_not_litt|wilted_flow|woman_farm|man_(?:teach|farm)|(?:bell_pe|hot_pe|fli)pp|l(?:o(?:udspeak|ve_lett|bst)|edg|add)|tokyo_tow|c(?:ucumb|lapp|anc)|b(?:e(?:ginn|av)|adg)|print|hamst)e|(?:perso|woma)n_in_manual_wheelchai|m(?:an(?:_in_motorized|(?:_in_man)?ual)|otorized)_wheelchai|(?:person_(?:white|curly|red)_|wheelc)hai|triangular_rule|(?:film_project|e(?:l_salv|cu)ad|elevat|tract|anch)o|s(?:traight_rul|pace_invad|crewdriv|nowboard|unflow|peak|wimm|ing|occ|how|urf|ki)e|r(?:ed_ca|unne|azo)|d(?:o(?:lla|o)|ee)|barbe)r|(?:(?:cloud_with_(?:lightning_and_)?ra|japanese_gobl|round_pushp|liechtenste|mandar|pengu|dolph|bahra|pushp|viol)i|(?:couple(?:_with_heart_wo|kiss_)man|construction_worker|(?:mountain_bik|bow|row)ing|lotus_position|(?:w(?:eight_lift|alk)|climb)ing|white_haired|curly_haired|raising_hand|super(?:villain|hero)|red_haired|basketball|s(?:(?:wimm|urf)ing|assy)|haircut|no_good|(?:vampir|massag)e|b(?:iking|ald)|zombie|fairy|mage|elf|ng)_(?:wo)?ma|(?:(?:couple_with_heart_man|isle_of)_m|(?:couplekiss_woman_|(?:b(?:ouncing_ball|lond_haired)|tipping_hand|pregnant|kneeling|deaf)_|frowning_|s(?:tanding|auna)_|po(?:uting_|lice)|running_|blonde_|o(?:lder|k)_)wom|(?:perso|woma)n_with_turb|(?:b(?:ouncing_ball|lond_haired)|tipping_hand|pregnant|kneeling|deaf)_m|f(?:olding_hand_f|rowning_m)|man_with_turb|(?:turkmen|afghan|pak)ist|s(?:tanding_m|(?:outh_s)?ud|auna_m)|po(?:uting_|lice)m|running_m|azerbaij|k(?:yrgyz|azakh)st|tajikist|uzbekist|o(?:lder_m|k_m|ce)|(?:orang|bh)ut|taiw|jord)a|s(?:mall_red_triangle_dow|(?:valbard_jan_may|int_maart|ev)e|afety_pi|top_sig|t_marti|(?:corpi|po|o)o|wede)|(?:heavy_(?:d(?:ivision|ollar)|equals|minus|plus)|no_entry|female|male)_sig|(?:arrow_(?:heading|double)_d|p(?:erson_with_cr|oint_d)|arrow_up_d|thumbsd)ow|(?:house_with_gard|l(?:ock_with_ink_p|eafy_gre)|dancing_(?:wo)?m|fountain_p|keycap_t|chick|ali|yem|od)e|(?:izakaya|jack_o)_lanter|(?:funeral_u|(?:po(?:stal_h|pc)|capric)o|unico)r|chess_paw|b(?:a(?:llo|c)o|eni|rai)|l(?:anter|io)|c(?:o(?:ff)?i|row)|melo|rame|oma|yar)n|(?:s(?:t(?:uck_out_tongue_closed_ey|_vincent_grenadin)|kull_and_crossbon|unglass|pad)|(?:french_souther|palestinia)n_territori|(?:face_with_spiral|kissing_smiling)_ey|united_arab_emirat|kissing_closed_ey|(?:clinking_|dark_sun|eye)glass|(?:no_mobile_|head)phon|womans_cloth|b(?:allet_sho|lueberri)|philippin|(?:no_bicyc|seychel)l|roll_ey|(?:cher|a)ri|p(?:ancak|isc)|maldiv|leav)es|(?:f(?:amily_(?:woman_(?:woman_)?|man_(?:woman_|man_)?)girl_gir|earfu)|(?:woman_playing_hand|m(?:an_playing_hand|irror_)|c(?:onfetti|rystal)_|volley|track|base|8)bal|(?:(?:m(?:ailbox_with_(?:no_)?m|onor)|cockt|e\\-m)a|(?:person|bride|woman)_with_ve|man_with_ve|light_ra|braz|ema)i|(?:transgender|baby)_symbo|passport_contro|(?:arrow_(?:down|up)_sm|rice_b|footb)al|(?:dromedary_cam|ferris_whe|love_hot|high_he|pretz|falaf|isra)e|page_with_cur|me(?:dical_symbo|ta)|(?:n(?:ewspaper_ro|o_be)|bellhop_be)l|rugby_footbal|s(?:chool_satche|(?:peak|ee)_no_evi|oftbal|crol|anda|nai|hel)|(?:peace|atom)_symbo|hear_no_evi|cora|hote|bage|labe|rof|ow)l|(?:(?:negative_squared_cross|heavy_exclamation|part_alternation)_mar|(?:eight_spoked_)?asteris|(?:ballot_box_with_che|(?:(?:mantelpiece|alarm|timer)_c|un)lo|(?:ha(?:(?:mmer_and|ir)_p|tch(?:ing|ed)_ch)|baby_ch|joyst)i|railway_tra|lipsti|peaco)c|heavy_check_mar|white_check_mar|tr(?:opical_drin|uc)|national_par|pickup_truc|diving_mas|floppy_dis|s(?:tar_struc|hamroc|kun|har)|chipmun|denmar|duc|hoo|lin)k|(?:leftwards_arrow_with_h|arrow_right_h|(?:o(?:range|pen)|closed|blue)_b)ook|(?:woman_playing_water_pol|m(?:an(?:_(?:playing_water_pol|with_gua_pi_ma|in_tuxed)|g)|ontenegr|o(?:roc|na)c|e(?:xic|tr|m))|(?:perso|woma)n_in_tuxed|(?:trinidad_toba|vir)g|water_buffal|b(?:urkina_fas|a(?:mbo|nj)|ent)|puerto_ric|water_pol|flaming|kangaro|(?:mosqu|burr)it|(?:avoc|torn)ad|curaca|lesoth|potat|ko(?:sov|k)|tomat|d(?:ang|od)|yo_y|hoch|t(?:ac|og)|zer)o|(?:c(?:entral_african|zech)|dominican)_republic|(?:eight_pointed_black_s|six_pointed_s|qa)tar|(?:business_suit_levitat|(?:classical_buil|breast_fee)d|(?:woman_cartwhee|m(?:an_(?:cartwhee|jugg)|en_wrest)|women_wrest|woman_jugg|face_exha|cartwhee|wrest|dump)l|c(?:hildren_cross|amp)|woman_facepalm|woman_shrugg|man_(?:facepalm|shrugg)|people_hugg|(?:person_fe|woman_da|man_da)nc|fist_oncom|horse_rac|(?:no_smo|thin)k|laugh|s(?:eedl|mok)|park|w(?:arn|edd))ing|f(?:a(?:mily(?:_(?:woman_(?:woman_(?:girl|boy)|girl|boy)|man_(?:woman_(?:girl|boy)|man_(?:girl|boy)|girl|boy)))?|ctory)|o(?:u(?:ntain|r)|ot|g)|r(?:owning)?|i(?:re|s[ht])|ly|u)|(?:(?:(?:information_desk|handball|bearded)_|(?:frowning|ok)_|juggling_|mer)pers|(?:previous_track|p(?:lay_or_p)?ause|black_square|white_square|next_track|r(?:ecord|adio)|eject)_butt|(?:wa[nx]ing_(?:crescent|gibbous)_m|bowl_with_sp|crescent_m|racc)o|(?:b(?:ouncing_ball|lond_haired)|tipping_hand|pregnant|kneeling|deaf)_pers|s(?:t(?:_pierre_miquel|op_butt|ati)|tanding_pers|peech_ballo|auna_pers)|r(?:eminder_r)?ibb|thought_ballo|watermel|badmint|c(?:amero|ray)|le(?:ban|m)|oni|bis)on|(?:heavy_heart_exclama|building_construc|heart_decora|exclama)tion|(?:(?:triangular_flag_on_po|(?:(?:woman_)?technolog|m(?:ountain_bicycl|an_technolog)|bicycl)i|(?:wo)?man_scienti|(?:wo)?man_arti|s(?:afety_ve|cienti)|empty_ne)s|(?:vertical_)?traffic_ligh|(?:rescue_worker_helm|military_helm|nazar_amul|city_suns|wastebask|dropl|t(?:rump|oil)|bouqu|buck|magn|secr)e|one_piece_swimsui|(?:(?:arrow_(?:low|upp)er|point)_r|bridge_at_n|copyr|mag_r)igh|(?:bullettrain_fro|(?:potted_pl|croiss|e(?:ggpl|leph))a)n|s(?:t(?:ar_and_cresc|ud)en|cream_ca|mi(?:ley?|rk)_ca|(?:peed|ail)boa|hir)|(?:arrow_(?:low|upp)er|point)_lef|woman_astronau|r(?:o(?:tating_ligh|cke)|eceip)|heart_eyes_ca|man_astronau|(?:woman_stud|circus_t|man_stud|trid)en|(?:ringed_pla|file_cabi)ne|nut_and_bol|(?:older_)?adul|k(?:i(?:ssing_ca|wi_frui)|uwai|no)|(?:pouting_c|c(?:ut_of_m|old_sw)e|womans_h|montserr|(?:(?:motor_|row)b|lab_c)o|heartbe|toph)a|(?:woman_pil|honey_p|man_pil|[cp]arr|teap|rob)o|hiking_boo|arrow_lef|fist_righ|flashligh|f(?:ist_lef|ee)|black_ca|astronau|(?:c(?:hest|oco)|dough)nu|innocen|joy_ca|artis|(?:acce|egy)p|co(?:me|a)|pilo)t|(?:heavy_multiplication_|t\\-re)x|(?:s(?:miling_face_with_te|piral_calend)|oncoming_police_c|chocolate_b|ra(?:ilway|cing)_c|police_c|polar_be|teddy_be|madagasc|blue_c|calend|myanm)ar|c(?:l(?:o(?:ud(?:_with_lightning)?|ck(?:1[0-2]?|[2-9]))|ap)?|o(?:uple(?:_with_heart|kiss)?|nstruction|mputer|ok|p|w)|a(?:r(?:d_index)?|mera)|r(?:icket|y)|h(?:art|ild))|(?:m(?:artial_arts_unifo|echanical_a)r|(?:cherry_)?blosso|b(?:aggage_clai|roo)|ice_?crea|facepal|mushroo|restroo|vietna|dru|yu)m|(?:woman_with_headscar|m(?:obile_phone_of|aple_lea)|fallen_lea|wol)f|(?:(?:closed_lock_with|old)_|field_hoc|ice_hoc|han|don)key|g(?:lobe_with_meridians|r(?:e(?:y_(?:exclama|ques)tion|e(?:n(?:_(?:square|circle|salad|apple|heart|book)|land)|ce)|y_heart|nada)|i(?:mac|nn)ing|apes)|u(?:inea_bissau|ernsey|am|n)|(?:(?:olfing|enie)_(?:wo)?|uards(?:wo)?)man|(?:inger_roo|oal_ne|hos)t|(?:uadeloup|ame_di|iraff|oos)e|ift_heart|i(?:braltar|rl)|(?:uatemal|(?:eorg|amb)i|orill|uyan|han)a|uide_dog|(?:oggl|lov)es|arlic|emini|uitar|abon|oat|ear|b)|construction_worker|(?:(?:envelope_with|bow_and)_ar|left_right_ar|raised_eyeb)row|(?:(?:oncoming_automob|crocod)i|right_anger_bubb|l(?:eft_speech_bubb|otion_bott|ady_beet)|congo_brazzavil|eye_speech_bubb|(?:large_blue|orange|purple|yellow|brown)_circ|(?:(?:european|japanese)_cas|baby_bot)t|b(?:alance_sca|eet)|s(?:ewing_need|weat_smi)|(?:black|white|red)_circ|(?:motor|re)cyc|pood|turt|tama|waff|musc|eag)le|first_quarter_moon|s(?:m(?:all_red_triangle|i(?:ley?|rk))|t(?:uck_out_tongue|ar)|hopping|leeping|p(?:arkle|ider)|unrise|nowman|chool|cream|k(?:ull|i)|weat|ix|a)|(?:(?:b(?:osnia_herzegovi|ana)|wallis_futu|(?:french_gui|botsw)a|argenti|st_hele)n|(?:(?:equatorial|papua_new)_guin|north_kor|eritr)e|t(?:ristan_da_cunh|ad)|(?:(?:(?:french_poly|indo)ne|tuni)s|(?:new_caledo|ma(?:urita|cedo)|lithua|(?:tanz|alb|rom)a|arme|esto)n|diego_garc|s(?:audi_arab|t_luc|lov(?:ak|en)|omal|erb)|e(?:arth_as|thiop)|m(?:icrone|alay)s|(?:austra|mongo)l|c(?:ambod|roat)|(?:bulga|alge)r|(?:colom|nami|zam)b|boliv|l(?:iber|atv))i|(?:wheel_of_dhar|cine|pana)m|(?:(?:(?:closed|beach|open)_)?umbrel|ceuta_melil|venezue|ang(?:uil|o)|koa)l|c(?:ongo_kinshas|anad|ub)|(?:western_saha|a(?:mpho|ndor)|zeb)r|american_samo|video_camer|m(?:o(?:vie_camer|ldov)|alt|eg)|(?:earth_af|costa_)ric|s(?:outh_afric|ri_lank|a(?:mo|nt))|bubble_te|(?:antarct|jama)ic|ni(?:caragu|geri|nj)|austri|pi(?:nat|zz)|arub|k(?:eny|aab)|indi|u7a7|l(?:lam|ib[ry])|dn)a|l(?:ast_quarter_moon|o(?:tus|ck)|ips|eo)|(?:hammer_and_wren|c(?:ockroa|hur)|facepun|wren|crut|pun)ch|s(?:nowman_with_snow|ignal_strength|weet_potato|miling_imp|p(?:ider_web|arkle[rs])|w(?:im_brief|an)|a(?:n(?:_marino|dwich)|lt)|topwatch|t(?:a(?:dium|r[2s])|ew)|l(?:e(?:epy|d)|oth)|hrimp|yria|carf|(?:hee|oa)p|ea[lt]|h(?:oe|i[pt])|o[bs])|(?:s(?:tuffed_flatbre|p(?:iral_notep|eaking_he))|(?:exploding_h|baguette_br|flatbr)e)ad|(?:arrow_(?:heading|double)_u|(?:p(?:lace_of_wor|assenger_)sh|film_str|tul)i|page_facing_u|biting_li|(?:billed_c|world_m)a|mouse_tra|(?:curly_lo|busst)o|thumbsu|lo(?:llip)?o|clam|im)p|(?:anatomical|light_blue|sparkling|kissing|mending|orange|purple|yellow|broken|b(?:rown|l(?:ack|ue))|pink)_heart|(?:(?:transgender|black)_fla|mechanical_le|(?:checkered|pirate)_fla|electric_plu|rainbow_fla|poultry_le|service_do|white_fla|luxembour|fried_eg|moneyba|h(?:edgeh|otd)o|shru)g|(?:cloud_with|mountain)_snow|(?:(?:antigua_barb|berm)u|(?:kh|ug)an|rwan)da|(?:3r|2n)d_place_medal|1(?:st_place_medal|234|00)|lotus_position|(?:w(?:eight_lift|alk)|climb)ing|(?:(?:cup_with_str|auto_ricksh)a|carpentry_sa|windo|jigsa)w|(?:(?:couch_and|diya)_la|f(?:ried_shri|uelpu))mp|(?:woman_mechan|man_mechan|alemb)ic|(?:european_un|accord|collis|reun)ion|(?:flight_arriv|hospit|portug|seneg|nep)al|card_file_box|(?:(?:oncoming_)?tax|m(?:o(?:unt_fuj|ya)|alaw)|s(?:paghett|ush|ar)|b(?:r(?:occol|une)|urund)|(?:djibou|kiriba)t|hait|fij)i|(?:shopping_c|white_he|bar_ch)art|d(?:isappointed|ominica|e(?:sert)?)|raising_hand|super(?:villain|hero)|b(?:e(?:verage_box|ers|d)|u(?:bbles|lb|g)|i(?:k(?:ini|e)|rd)|o(?:o(?:ks|t)|a[rt]|y)|read|a[cn]k)|ra(?:ised_hands|bbit2|t)|(?:hindu_tem|ap)ple|thong_sandal|a(?:r(?:row_(?:right|down|up)|t)|bc?|nt)?|r(?:a(?:i(?:sed_hand|nbow)|bbit|dio|m)|u(?:nning)?|epeat|i(?:ng|ce)|o(?:ck|se))|takeout_box|(?:flying_|mini)disc|(?:(?:interrob|yin_y)a|b(?:o(?:omera|wli)|angba)|(?:ping_p|hong_k)o|calli|mahjo)ng|b(?:a(?:llot_box|sket|th?|by)|o(?:o(?:k(?:mark)?|m)|w)|u(?:tter|s)|e(?:ll|er?|ar))?|heart_eyes|basketball|(?:paperclip|dancer|ticket)s|point_up_2|(?:wo)?man_cook|n(?:ew(?:spaper)?|o(?:tebook|_entry)|iger)|t(?:e(?:lephone|a)|o(?:oth|p)|r(?:oll)?|wo)|h(?:o(?:u(?:rglass|se)|rse)|a(?:mmer|nd)|eart)|paperclip|full_moon|(?:b(?:lack_ni|athtu|om)|her)b|(?:long|oil)_drum|pineapple|(?:clock(?:1[0-2]?|[2-9])3|u6e8)0|p(?:o(?:int_up|ut)|r(?:ince|ay)|i(?:ck|g)|en)|e(?:nvelope|ight|u(?:ro)?|gg|ar|ye|s)|m(?:o(?:u(?:ntain|se)|nkey|on)|echanic|a(?:ilbox|g|n)|irror)?|new_moon|d(?:iamonds|olls|art)|question|k(?:iss(?:ing)?|ey)|haircut|no_good|(?:vampir|massag)e|g(?:olf(?:ing)?|u(?:inea|ard)|e(?:nie|m)|ift|rin)|h(?:a(?:ndbag|msa)|ouses|earts|ut)|postbox|toolbox|(?:pencil|t(?:rain|iger)|whale|cat|dog)2|belgium|(?:volca|kimo)no|(?:vanuat|tuval|pala|naur|maca)u|tokelau|o(?:range|ne?|m|k)?|office|dancer|ticket|dragon|pencil|zombie|w(?:o(?:mens|rm|od)|ave|in[gk]|c)|m(?:o(?:sque|use2)|e(?:rman|ns)|a(?:li|sk))|jersey|tshirt|w(?:heel|oman)|dizzy|j(?:apan|oy)|t(?:rain|iger)|whale|fairy|a(?:nge[lr]|bcd|tm)|c(?:h(?:a(?:ir|d)|ile)|a(?:ndy|mel)|urry|rab|o(?:rn|ol|w2)|[dn])|p(?:ager|e(?:a(?:ch|r)|ru)|i(?:g2|ll|e)|oop)|n(?:otes|ine)|t(?:onga|hree|ent|ram|[mv])|f(?:erry|r(?:ies|ee|og)|ax)|u(?:7(?:533|981|121)|5(?:5b6|408|272)|6(?:307|70[89]))|mage|e(?:yes|nd)|i(?:ra[nq]|t)|cat|dog|elf|z(?:zz|ap)|yen|j(?:ar|p)|leg|id|u[kps]|ng|o[2x]|vs|kr|[\\+\\x2D]1|x|v)(:)", name: "string.emoji.mdx" }, "extension-github-mention": { captures: { 1: { name: "punctuation.definition.mention.begin.mdx" }, 2: { name: "string.other.link.mention.mdx" } }, match: "(?<![0-9A-Za-z_`])(@)((?:[0-9A-Za-z][0-9A-Za-z-]{0,38})(?:\\/(?:[0-9A-Za-z][0-9A-Za-z-]{0,38}))?)(?![0-9A-Za-z_`])", name: "string.mention.mdx" }, "extension-github-reference": { patterns: [{ captures: { 1: { name: "punctuation.definition.reference.begin.mdx" }, 2: { name: "string.other.link.reference.security-advisory.mdx" }, 3: { name: "punctuation.definition.reference.begin.mdx" }, 4: { name: "string.other.link.reference.issue-or-pr.mdx" } }, match: "(?<![0-9A-Za-z_])(?:((?i:ghsa-|cve-))([A-Za-z0-9]+)|((?i:gh-|#))([0-9]+))(?![0-9A-Za-z_])", name: "string.reference.mdx" }, { captures: { 1: { name: "string.other.link.reference.user.mdx" }, 2: { name: "punctuation.definition.reference.begin.mdx" }, 3: { name: "string.other.link.reference.issue-or-pr.mdx" } }, match: "(?<![^\\t\\n\\r \\(@\\[\\{])((?:[0-9A-Za-z][0-9A-Za-z-]{0,38})(?:\\/(?:(?:\\.git[0-9A-Za-z_-]|\\.(?!git)|[0-9A-Za-z_-])+))?)(#)([0-9]+)(?![0-9A-Za-z_])", name: "string.reference.mdx" }] }, "extension-math-flow": { begin: "(?:^|\\G)[\\t ]*(\\${2,})([^\\n\\r\\$]*)$", beginCaptures: { 1: { name: "string.other.begin.math.flow.mdx" }, 2: { patterns: [{ include: "#markdown-string" }] } }, contentName: "markup.raw.math.flow.mdx", end: "(\\1)(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.end.math.flow.mdx" } }, name: "markup.code.other.mdx" }, "extension-math-text": { captures: { 1: { name: "string.other.begin.math.mdx" }, 2: { name: "markup.raw.math.mdx markup.inline.raw.math.mdx" }, 3: { name: "string.other.end.math.mdx" } }, match: "(?<!\\$)(\\${2,})(?!\\$)(.+?)(?<!\\$)(\\1)(?!\\$)" }, "extension-mdx-esm": { begin: "(?:^|\\G)(?=(?i:export|import)[ ])", end: "^(?=[\\t ]*$)|$", name: "meta.embedded.tsx", patterns: [{ include: "source.tsx#statements" }] }, "extension-mdx-expression-flow": { begin: "(?:^|\\G)[\\t ]*(\\{)", beginCaptures: { 1: { name: "string.other.begin.expression.mdx.js" } }, contentName: "meta.embedded.tsx", end: "(\\})(?:[\\t ]*$)", endCaptures: { 1: { name: "string.other.begin.expression.mdx.js" } }, patterns: [{ include: "source.tsx#expression" }] }, "extension-mdx-expression-text": { begin: "\\{", beginCaptures: { 0: { name: "string.other.begin.expression.mdx.js" } }, contentName: "meta.embedded.tsx", end: "\\}", endCaptures: { 0: { name: "string.other.begin.expression.mdx.js" } }, patterns: [{ include: "source.tsx#expression" }] }, "extension-mdx-jsx-flow": { begin: "(?<=^|\\G|\\>)[\\t ]*(<)(?=(?![\\t\\n\\r ]))(?:\\s*(/))?(?:\\s*(?:(?:((?:[_$[:alpha:]][-_$[:alnum:]]*))\\s*(:)\\s*((?:[_$[:alpha:]][-_$[:alnum:]]*)))|((?:(?:[_$[:alpha:]][_$[:alnum:]]*)(?:\\s*\\.\\s*(?:[_$[:alpha:]][-_$[:alnum:]]*))+))|((?:[_$[:upper:]][_$[:alnum:]]*))|((?:[_$[:alpha:]][-_$[:alnum:]]*)))(?=[\\s\\/\\>\\{]))?", beginCaptures: { 1: { name: "punctuation.definition.tag.end.jsx" }, 2: { name: "punctuation.definition.tag.closing.jsx" }, 3: { name: "entity.name.tag.namespace.jsx" }, 4: { name: "punctuation.separator.namespace.jsx" }, 5: { name: "entity.name.tag.local.jsx" }, 6: { name: "support.class.component.jsx" }, 7: { name: "support.class.component.jsx" }, 8: { name: "entity.name.tag.jsx" } }, end: "(?:(\\/)\\s*)?(>)", endCaptures: { 1: { name: "punctuation.definition.tag.self-closing.jsx" }, 2: { name: "punctuation.definition.tag.end.jsx" } }, patterns: [{ include: "source.tsx#jsx-tag-attribute-name" }, { include: "source.tsx#jsx-tag-attribute-assignment" }, { include: "source.tsx#jsx-string-double-quoted" }, { include: "source.tsx#jsx-string-single-quoted" }, { include: "source.tsx#jsx-evaluated-code" }, { include: "source.tsx#jsx-tag-attributes-illegal" }] }, "extension-mdx-jsx-text": { begin: "(<)(?=(?![\\t\\n\\r ]))(?:\\s*(/))?(?:\\s*(?:(?:((?:[_$[:alpha:]][-_$[:alnum:]]*))\\s*(:)\\s*((?:[_$[:alpha:]][-_$[:alnum:]]*)))|((?:(?:[_$[:alpha:]][_$[:alnum:]]*)(?:\\s*\\.\\s*(?:[_$[:alpha:]][-_$[:alnum:]]*))+))|((?:[_$[:upper:]][_$[:alnum:]]*))|((?:[_$[:alpha:]][-_$[:alnum:]]*)))(?=[\\s\\/\\>\\{]))?", beginCaptures: { 1: { name: "punctuation.definition.tag.end.jsx" }, 2: { name: "punctuation.definition.tag.closing.jsx" }, 3: { name: "entity.name.tag.namespace.jsx" }, 4: { name: "punctuation.separator.namespace.jsx" }, 5: { name: "entity.name.tag.local.jsx" }, 6: { name: "support.class.component.jsx" }, 7: { name: "support.class.component.jsx" }, 8: { name: "entity.name.tag.jsx" } }, end: "(?:(\\/)\\s*)?(>)", endCaptures: { 1: { name: "punctuation.definition.tag.self-closing.jsx" }, 2: { name: "punctuation.definition.tag.end.jsx" } }, patterns: [{ include: "source.tsx#jsx-tag-attribute-name" }, { include: "source.tsx#jsx-tag-attribute-assignment" }, { include: "source.tsx#jsx-string-double-quoted" }, { include: "source.tsx#jsx-string-single-quoted" }, { include: "source.tsx#jsx-evaluated-code" }, { include: "source.tsx#jsx-tag-attributes-illegal" }] }, "extension-toml": { begin: "\\A\\+{3}$", beginCaptures: { 0: { name: "string.other.begin.toml" } }, contentName: "meta.embedded.toml", end: "^\\+{3}$", endCaptures: { 0: { name: "string.other.end.toml" } }, patterns: [{ include: "source.toml" }] }, "extension-yaml": { begin: "\\A-{3}$", beginCaptures: { 0: { name: "string.other.begin.yaml" } }, contentName: "meta.embedded.yaml", end: "^-{3}$", endCaptures: { 0: { name: "string.other.end.yaml" } }, patterns: [{ include: "source.yaml" }] }, "markdown-frontmatter": { patterns: [{ include: "#extension-toml" }, { include: "#extension-yaml" }] }, "markdown-sections": { patterns: [{ include: "#commonmark-block-quote" }, { include: "#commonmark-code-fenced" }, { include: "#extension-gfm-footnote-definition" }, { include: "#commonmark-definition" }, { include: "#commonmark-heading-atx" }, { include: "#commonmark-thematic-break" }, { include: "#commonmark-heading-setext" }, { include: "#commonmark-list-item" }, { include: "#extension-gfm-table" }, { include: "#extension-math-flow" }, { include: "#extension-mdx-esm" }, { include: "#extension-mdx-expression-flow" }, { include: "#extension-mdx-jsx-flow" }, { include: "#commonmark-paragraph" }] }, "markdown-string": { patterns: [{ include: "#commonmark-character-escape" }, { include: "#commonmark-character-reference" }] }, "markdown-text": { patterns: [{ include: "#commonmark-attention" }, { include: "#commonmark-character-escape" }, { include: "#commonmark-character-reference" }, { include: "#commonmark-code-text" }, { include: "#commonmark-hard-break-trailing" }, { include: "#commonmark-hard-break-escape" }, { include: "#commonmark-label-end" }, { include: "#extension-gfm-footnote-call" }, { include: "#commonmark-label-start" }, { include: "#extension-gfm-autolink-literal" }, { include: "#extension-gfm-strikethrough" }, { include: "#extension-github-gemoji" }, { include: "#extension-github-mention" }, { include: "#extension-github-reference" }, { include: "#extension-math-text" }, { include: "#extension-mdx-expression-text" }, { include: "#extension-mdx-jsx-text" }] }, "whatwg-html-data-character-reference-named-terminated": { captures: { 1: { name: "punctuation.definition.character-reference.begin.html" }, 2: { name: "keyword.control.character-reference.html" }, 3: { name: "punctuation.definition.character-reference.end.html" } }, match: "(&)((?:C(?:(?:o(?:unterClockwiseCo)?|lockwiseCo)ntourIntegra|cedi)|(?:(?:Not(?:S(?:quareSu(?:per|b)set|u(?:cceeds|(?:per|b)set))|Precedes|Greater|Tilde|Less)|Not(?:Righ|Lef)tTriangle|(?:Not(?:(?:Succeed|Precede|Les)s|Greater)|(?:Precede|Succeed)s|Less)Slant|SquareSu(?:per|b)set|(?:Not(?:Greater|Tilde)|Tilde|Less)Full|RightTriangle|LeftTriangle|Greater(?:Slant|Full)|Precedes|Succeeds|Superset|NotHump|Subset|Tilde|Hump)Equ|int(?:er)?c|DotEqu)a|DoubleContourIntegra|(?:n(?:short)?parall|shortparall|p(?:arall|rur))e|(?:rightarrowta|l(?:eftarrowta|ced|ata|Ata)|sced|rata|perm|rced|rAta|ced)i|Proportiona|smepars|e(?:qvpars|pars|xc|um)|Integra|suphso|rarr[pt]|n(?:pars|tg)|l(?:arr[pt]|cei)|Rarrt|(?:hybu|fora)l|ForAl|[GKLNR-Tcknt]cedi|rcei|iexc|gime|fras|[uy]um|oso|dso|ium|Ium)l|D(?:o(?:uble(?:(?:L(?:ong(?:Left)?R|eftR)ight|L(?:ongL)?eft|UpDown|Right|Up)Arrow|Do(?:wnArrow|t))|wn(?:ArrowUpA|TeeA|a)rrow)|iacriticalDot|strok|ashv|cy)|(?:(?:(?:N(?:(?:otN)?estedGreater|ot(?:Greater|Less))|Less(?:Equal)?)Great|GreaterGreat|l[lr]corn|mark|east)e|Not(?:Double)?VerticalBa|(?:Not(?:Righ|Lef)tTriangleB|(?:(?:Righ|Lef)tDown|Right(?:Up)?|Left(?:Up)?)VectorB|RightTriangleB|Left(?:Triangle|Arrow)B|RightArrowB|V(?:er(?:ticalB|b)|b)|UpArrowB|l(?:ur(?:ds|u)h|dr(?:us|d)h|trP|owb|H)|profal|r(?:ulu|dld)h|b(?:igst|rvb)|(?:wed|ve[er])b|s(?:wn|es)w|n(?:wne|ese|sp|hp)|gtlP|d(?:oll|uh|H)|(?:hor|ov)b|u(?:dh|H)|r(?:lh|H)|ohb|hb|St)a|D(?:o(?:wn(?:(?:Left(?:Right|Tee)|RightTee)Vecto|(?:(?:Righ|Lef)tVector|Arrow)Ba)|ubleVerticalBa)|a(?:gge|r)|sc|f)|(?:(?:(?:Righ|Lef)tDown|(?:Righ|Lef)tUp)Tee|(?:Righ|Lef)tUpDown)Vecto|VerticalSeparato|(?:Left(?:Right|Tee)|RightTee)Vecto|less(?:eqq?)?gt|e(?:qslantgt|sc)|(?:RightF|LeftF|[lr]f)loo|u(?:[lr]corne|ar)|timesba|(?:plusa|cirs|apa)ci|U(?:arroci|f)|(?:dzigr|s(?:u(?:pl|br)|imr|[lr])|zigr|angz|nvH|l(?:tl|B)|r[Br])ar|UnderBa|(?:plus|harr|top|mid|of)ci|O(?:verBa|sc|f)|dd?agge|s(?:olba|sc)|g(?:t(?:rar|ci)|sc|f)|c(?:opys|u(?:po|ep)|sc|f)|(?:n(?:(?:v[lr]|w|r)A|l[Aa]|h[Aa]|eA)|x[hlr][Aa]|u(?:ua|da|A)|s[ew]A|rla|o[lr]a|rba|rAa|l[Ablr]a|h(?:oa|A)|era|d(?:ua|A)|cra|vA)r|o(?:lci|sc|ro|pa)|ropa|roar|l(?:o(?:pa|ar)|sc|Ar)|i(?:ma|s)c|ltci|dd?ar|a(?:ma|s)c|R(?:Bar|sc|f)|I(?:mac|f)|(?:u(?:ma|s)|oma|ema|Oma|Ema|[wyz]s|qs|ks|fs|Zs|Ys|Xs|Ws|Vs|Us|Ss|Qs|Ns|Ms|Ks|Is|Gs|Fs|Cs|Bs)c|Umac|x(?:sc|f)|v(?:sc|f)|rsc|n(?:ld|f)|m(?:sc|ld|ac|f)|rAr|h(?:sc|f)|b(?:sc|f)|psc|P(?:sc|f)|L(?:sc|ar|f)|jsc|J(?:sc|f)|E(?:sc|f)|[HT]sc|[yz]f|wf|tf|qf|pf|kf|jf|Zf|Yf|Xf|Wf|Vf|Tf|Sf|Qf|Nf|Mf|Kf|Hf|Gf|Ff|Cf|Bf)r|(?:Diacritical(?:Double)?A|[EINOSYZaisz]a)cute|(?:(?:N(?:egative(?:VeryThin|Thi(?:ck|n))|onBreaking)|NegativeMedium|ZeroWidth|VeryThin|Medium|Thi(?:ck|n))Spac|Filled(?:Very)?SmallSquar|Empty(?:Very)?SmallSquar|(?:N(?:ot(?:Succeeds|Greater|Tilde|Less)T|t)|DiacriticalT|VerticalT|PrecedesT|SucceedsT|NotEqualT|GreaterT|TildeT|EqualT|LessT|at|Ut|It)ild|(?:(?:DiacriticalG|[EIOUaiu]g)ra|(?:u|U)?bre|(?:o|e)?gra)v|(?:doublebar|curly|big|x)wedg|H(?:orizontalLin|ilbertSpac)|Double(?:Righ|Lef)tTe|(?:(?:measured|uw)ang|exponentia|dwang|ssmi|fema)l|(?:Poincarepla|reali|pho|oli)n|(?:black)?lozeng|(?:VerticalL|(?:prof|imag)l)in|SmallCircl|(?:black|dot)squar|rmoustach|l(?:moustach|angl)|(?:b(?:ack)?pr|(?:tri|xo)t|[qt]pr)im|[Tt]herefor|(?:DownB|[Gag]b)rev|(?:infint|nv[lr]tr)i|b(?:arwedg|owti)|an(?:dslop|gl)|(?:cu(?:rly)?v|rthr|lthr|b(?:ig|ar)v|xv)e|n(?:s(?:qsu[bp]|ccu)|prcu)|orslop|NewLin|maltes|Becaus|rangl|incar|(?:otil|Otil|t(?:ra|il))d|[inu]tild|s(?:mil|imn)|(?:sc|pr)cu|Wedg|Prim|Brev)e|(?:CloseCurly(?:Double)?Quo|OpenCurly(?:Double)?Quo|[ry]?acu)te|(?:Reverse(?:Up)?|Up)Equilibrium|C(?:apitalDifferentialD|(?:oproduc|(?:ircleD|enterD|d)o)t|on(?:grue|i)nt|conint|upCap|o(?:lone|pf)|OPY|hi)|(?:(?:(?:left)?rightsquig|(?:longleftr|twoheadr|nleftr|nLeftr|longr|hookr|nR|Rr)ight|(?:twohead|hook)left|longleft|updown|Updown|nright|Right|nleft|nLeft|down|up|Up)a|L(?:(?:ong(?:left)?righ|(?:ong)?lef)ta|eft(?:(?:right)?a|RightA|TeeA))|RightTeeA|LongLeftA|UpTeeA)rrow|(?:(?:RightArrow|Short|Upper|Lower)Left|(?:L(?:eftArrow|o(?:wer|ng))|LongLeft|Short|Upper)Right|ShortUp)Arrow|(?:b(?:lacktriangle(?:righ|lef)|ulle|no)|RightDoubleBracke|RightAngleBracke|Left(?:Doub|Ang)leBracke|(?:vartriangle|downharpoon|c(?:ircl|urv)earrow|upharpoon|looparrow)righ|(?:vartriangle|downharpoon|c(?:ircl|urv)earrow|upharpoon|looparrow|mapsto)lef|(?:UnderBrack|OverBrack|emptys|targ|Sups)e|diamondsui|c(?:ircledas|lubsui|are)|(?:spade|heart)sui|(?:(?:c(?:enter|t)|lmi|ino)d|(?:Triple|mD)D|n(?:otin|e)d|(?:ncong|doteq|su[bp]e|e[gl]s)d|l(?:ess|t)d|isind|c(?:ong|up|ap)?d|b(?:igod|N)|t(?:(?:ri)?d|opb)|s(?:ub|im)d|midd|g(?:tr?)?d|Lmid|DotD|(?:xo|ut|z)d|e(?:s?d|rD|fD|DD)|dtd|Zd|Id|Gd|Ed)o|realpar|i(?:magpar|iin)|S(?:uchTha|qr)|su[bp]mul|(?:(?:lt|i)que|gtque|(?:mid|low)a|e(?:que|xi))s|Produc|s(?:updo|e[cx])|r(?:parg|ec)|lparl|vangr|hamil|(?:homt|[lr]fis|ufis|dfis)h|phmma|t(?:wix|in)|quo|o(?:do|as)|fla|eDo)t|(?:(?:Square)?Intersecti|(?:straight|back|var)epsil|SquareUni|expectati|upsil|epsil|Upsil|eq?col|Epsil|(?:omic|Omic|rca|lca|eca|Sca|[NRTt]ca|Lca|Eca|[Zdz]ca|Dca)r|scar|ncar|herc|ccar|Ccar|iog|Iog)on|Not(?:S(?:quareSu(?:per|b)set|u(?:cceeds|(?:per|b)set))|Precedes|Greater|Tilde|Less)?|(?:(?:(?:Not(?:Reverse)?|Reverse)E|comp|E)leme|NotCongrue|(?:n[gl]|l)eqsla|geqsla|q(?:uat)?i|perc|iiii|coni|cwi|awi|oi)nt|(?:(?:rightleftharpo|leftrightharpo|quaterni)on|(?:(?:N(?:ot(?:NestedLess|Greater|Less)|estedLess)L|(?:eqslant|gtr(?:eqq?)?)l|LessL)e|Greater(?:Equal)?Le|cro)s|(?:rightright|leftleft|upup)arrow|rightleftarrow|(?:(?:(?:righ|lef)tthree|divideon|b(?:igo|ox)|[lr]o)t|InvisibleT)ime|downdownarrow|(?:(?:smallset|tri|dot|box)m|PlusM)inu|(?:RoundImpli|complex|Impli|Otim)e|C(?:ircle(?:Time|Minu|Plu)|ayley|ros)|(?:rationa|mode)l|NotExist|(?:(?:UnionP|MinusP|(?:b(?:ig[ou]|ox)|tri|s(?:u[bp]|im)|dot|xu|mn)p)l|(?:xo|u)pl|o(?:min|pl)|ropl|lopl|epl)u|otimesa|integer|e(?:linter|qual)|setminu|rarrbf|larrb?f|olcros|rarrf|mstpo|lesge|gesle|Exist|[lr]time|strn|napo|fltn|ccap|apo)s|(?:b(?:(?:lack|ig)triangledow|etwee)|(?:righ|lef)tharpoondow|(?:triangle|mapsto)dow|(?:nv|i)infi|ssetm|plusm|lagra|d(?:[lr]cor|isi)|c(?:ompf|aro)|s?frow|(?:hyph|curr)e|kgree|thor|ogo|ye)n|Not(?:Righ|Lef)tTriangle|(?:Up(?:Arrow)?|Short)DownArrow|(?:(?:n(?:triangle(?:righ|lef)t|succ|prec)|(?:trianglerigh|trianglelef|sqsu[bp]se|ques)t|backsim)e|lvertneq|gvertneq|(?:suc|pre)cneq|a(?:pprox|symp)e|(?:succ|prec|vee)e|circe)q|(?:UnderParenthes|OverParenthes|xn)is|(?:(?:Righ|Lef)tDown|Right(?:Up)?|Left(?:Up)?)Vector|D(?:o(?:wn(?:RightVector|LeftVector|Arrow|Tee)|t)|el|D)|l(?:eftrightarrows|br(?:k(?:sl[du]|e)|ac[ek])|tri[ef]|s(?:im[eg]|qb|h)|hard|a(?:tes|ngd|p)|o[pz]f|rm|gE|fr|eg|cy)|(?:NotHumpDownHum|(?:righ|lef)tharpoonu|big(?:(?:triangle|sqc)u|c[au])|HumpDownHum|m(?:apstou|lc)|(?:capbr|xsq)cu|smash|rarr[al]|(?:weie|sha)r|larrl|velli|(?:thin|punc)s|h(?:elli|airs)|(?:u[lr]c|vp)ro|d[lr]cro|c(?:upc[au]|apc[au])|thka|scna|prn?a|oper|n(?:ums|va|cu|bs)|ens|xc[au]|Ma)p|l(?:eftrightarrow|e(?:ftarrow|s(?:dot)?)?|moust|a(?:rrb?|te?|ng)|t(?:ri)?|sim|par|oz|l|g)|n(?:triangle(?:righ|lef)t|succ|prec)|SquareSu(?:per|b)set|(?:I(?:nvisibleComm|ot)|(?:varthe|iio)t|varkapp|(?:vars|S)igm|(?:diga|mco)mm|Cedill|lambd|Lambd|delt|Thet|omeg|Omeg|Kapp|Delt|nabl|zet|to[es]|rdc|ldc|iot|Zet|Bet|Et)a|b(?:lacktriangle|arwed|u(?:mpe?|ll)|sol|o(?:x[HVhv]|t)|brk|ne)|(?:trianglerigh|trianglelef|sqsu[bp]se|ques)t|RightT(?:riangl|e)e|(?:(?:varsu[bp]setn|su(?:psetn?|bsetn?))eq|nsu[bp]seteq|colone|(?:wedg|sim)e|nsime|lneq|gneq)q|DifferentialD|(?:(?:fall|ris)ingdots|(?:suc|pre)ccurly|ddots)eq|A(?:pplyFunction|ssign|(?:tild|grav|brev)e|acute|o(?:gon|pf)|lpha|(?:mac|sc|f)r|c(?:irc|y)|ring|Elig|uml|nd|MP)|(?:varsu[bp]setn|su(?:psetn?|bsetn?))eq|L(?:eft(?:T(?:riangl|e)e|Arrow)|l)|G(?:reaterEqual|amma)|E(?:xponentialE|quilibrium|sim|cy|TH|NG)|(?:(?:RightCeil|LeftCeil|varnoth|ar|Ur)in|(?:b(?:ack)?co|uri)n|vzigza|roan|loan|ffli|amal|sun|rin|n(?:tl|an)|Ran|Lan)g|(?:thick|succn?|precn?|less|g(?:tr|n)|ln|n)approx|(?:s(?:traightph|em)|(?:rtril|xu|u[lr]|xd|v[lr])tr|varph|l[lr]tr|b(?:sem|eps)|Ph)i|(?:circledd|osl|n(?:v[Dd]|V[Dd]|d)|hsl|V(?:vd|D)|Osl|v[Dd]|md)ash|(?:(?:RuleDelay|imp|cuw)e|(?:n(?:s(?:hort)?)?|short|rn)mi|D(?:Dotrah|iamon)|(?:i(?:nt)?pr|peri)o|odsol|llhar|c(?:opro|irmi)|(?:capa|anda|pou)n|Barwe|napi|api)d|(?:cu(?:rlyeq(?:suc|pre)|es)|telre|[ou]dbla|Udbla|Odbla|radi|lesc|gesc|dbla)c|(?:circled|big|eq|[is]|c|x|a|S|[hw]|W|H|G|E|C)circ|rightarrow|R(?:ightArrow|arr|e)|Pr(?:oportion)?|(?:longmapst|varpropt|p(?:lustw|ropt)|varrh|numer|(?:rsa|lsa|sb)qu|m(?:icr|h)|[lr]aqu|bdqu|eur)o|UnderBrace|ImaginaryI|B(?:ernoullis|a(?:ckslash|rv)|umpeq|cy)|(?:(?:Laplace|Mellin|zee)tr|Fo(?:uriertr|p)|(?:profsu|ssta)r|ordero|origo|[ps]op|nop|mop|i(?:op|mo)|h(?:op|al)|f(?:op|no)|dop|bop|Rop|Pop|Nop|Lop|Iop|Hop|Dop|[GJKMOQSTV-Zgjkoqvwyz]op|Bop)f|nsu[bp]seteq|t(?:ri(?:angleq|e)|imesd|he(?:tav|re4)|au)|O(?:verBrace|r)|(?:(?:pitchfo|checkma|t(?:opfo|b)|rob|rbb|l[bo]b)r|intlarh|b(?:brktbr|l(?:oc|an))|perten|NoBrea|rarrh|s[ew]arh|n[ew]arh|l(?:arrh|hbl)|uhbl|Hace)k|(?:NotCupC|(?:mu(?:lti)?|x)m|cupbrc)ap|t(?:riangle|imes|heta|opf?)|Precedes|Succeeds|Superset|NotEqual|(?:n(?:atural|exist|les)|s(?:qc[au]p|mte)|prime)s|c(?:ir(?:cled[RS]|[Ee])|u(?:rarrm|larrp|darr[lr]|ps)|o(?:mmat|pf)|aps|hi)|b(?:sol(?:hsu)?b|ump(?:eq|E)|ox(?:box|[Vv][HLRhlr]|[Hh][DUdu]|[DUdu][LRlr])|e(?:rnou|t[ah])|lk(?:34|1[24])|cy)|(?:l(?:esdot|squ|dqu)o|rsquo|rdquo|ngt)r|a(?:n(?:g(?:msda[a-h]|st|e)|d[dv])|st|p[Ee]|mp|fr|c[Edy])|(?:g(?:esdoto|E)|[lr]haru)l|(?:angrtvb|lrhar|nis)d|(?:(?:th(?:ic)?k|succn?|p(?:r(?:ecn?|n)?|lus)|rarr|l(?:ess|arr)|su[bp]|par|scn|g(?:tr|n)|ne|sc|n[glv]|ln|eq?)si|thetasy|ccupss|alefsy|botto)m|trpezium|(?:hks[ew]|dr?bk|bk)arow|(?:(?:[lr]a|d|c)empty|b(?:nequi|empty)|plank|nequi|odi)v|(?:(?:sc|rp|n)pol|point|fpart)int|(?:c(?:irf|wco)|awco)nint|PartialD|n(?:s(?:u[bp](?:set)?|c)|rarr|ot(?:ni|in)?|warr|e(?:arr)?|a(?:tur|p)|vlt|p(?:re?|ar)|um?|l[et]|ge|i)|n(?:atural|exist|les)|d(?:i(?:am(?:ond)?|v(?:ide)?)|tri|ash|ot|d)|backsim|l(?:esdot|squ|dqu)o|g(?:esdoto|E)|U(?:p(?:Arrow|si)|nion|arr)|angrtvb|p(?:l(?:anckh|us(?:d[ou]|[be]))|ar(?:sl|t)|r(?:od|nE|E)|erp|iv|m)|n(?:ot(?:niv[a-c]|in(?:v[a-c]|E))|rarr[cw]|s(?:u[bp][Ee]|c[er])|part|v(?:le|g[et])|g(?:es|E)|c(?:ap|y)|apE|lE|iv|Ll|Gg)|m(?:inus(?:du|b)|ale|cy|p)|rbr(?:k(?:sl[du]|e)|ac[ek])|(?:suphsu|tris|rcu|lcu)b|supdsub|(?:s[ew]a|n[ew]a)rrow|(?:b(?:ecaus|sim)|n(?:[lr]tri|bump)|csu[bp])e|equivDD|u(?:rcorn|lcorn|psi)|timesb|s(?:u(?:p(?:set)?|b(?:set)?)|q(?:su[bp]|u)|i(?:gma|m)|olb?|dot|mt|fr|ce?)|p(?:l(?:anck|us)|r(?:op|ec?)?|ara?|i)|o(?:times|r(?:d(?:er)?)?)|m(?:i(?:nusd?|d)|a(?:p(?:sto)?|lt)|u)|rmoust|g(?:e(?:s(?:dot|l)?|q)?|sim|n(?:ap|e)|t|l|g)|(?:spade|heart)s|c(?:u(?:rarr|larr|p)|o(?:m(?:ma|p)|lon|py|ng)|lubs|heck|cups|irc?|ent|ap)|colone|a(?:p(?:prox)?|n(?:g(?:msd|rt)?|d)|symp|f|c)|S(?:quare|u[bp]|c)|Subset|b(?:ecaus|sim)|vsu[bp]n[Ee]|s(?:u(?:psu[bp]|b(?:su[bp]|n[Ee]|E)|pn[Ee]|p[1-3E]|m)|q(?:u(?:ar[ef]|f)|su[bp]e)|igma[fv]|etmn|dot[be]|par|mid|hc?y|c[Ey])|f(?:rac(?:78|5[68]|45|3[458]|2[35]|1[2-68])|fr)|e(?:m(?:sp1[34]|ptyv)|psiv|c(?:irc|y)|t[ah]|ng|ll|fr|e)|(?:kappa|isins|vBar|fork|rho|phi|n[GL]t)v|divonx|V(?:dashl|ee)|gammad|G(?:ammad|cy|[Tgt])|[Ldhlt]strok|[HT]strok|(?:c(?:ylct|hc)|(?:s(?:oft|hch)|hard|S(?:OFT|HCH)|jser|J(?:ser|uk)|HARD|tsh|TSH|juk|iuk|I(?:uk|[EO])|zh|yi|nj|lj|k[hj]|gj|dj|ZH|Y[AIU]|NJ|LJ|K[HJ]|GJ|D[JSZ])c|ubrc|Ubrc|(?:yu|i[eo]|dz|v|p|f)c|TSc|SHc|CHc|Vc|Pc|Mc|Fc)y|(?:(?:wre|jm)at|dalet|a(?:ngs|le)p|imat|[lr]ds)h|[CLRUceglnou]acute|ff?llig|(?:f(?:fi|[ij])|sz|oe|ij|ae|OE|IJ)lig|r(?:a(?:tio|rr|ng)|tri|par|eal)|s[ew]arr|s(?:qc[au]p|mte)|prime|rarrb|i(?:n(?:fin|t)?|sin|t|i|c)|e(?:quiv|m(?:pty|sp)|p(?:si|ar)|cir|l|g)|kappa|isins|ncong|doteq|(?:wedg|sim)e|nsime|rsquo|rdquo|[lr]haru|V(?:dash|ert)|Tilde|lrhar|gamma|Equal|UpTee|n(?:[lr]tri|bump)|C(?:olon|up|ap)|v(?:arpi|ert)|u(?:psih|ml)|vnsu[bp]|r(?:tri[ef]|e(?:als|g)|a(?:rr[cw]|ng[de]|ce)|sh|lm|x)|rhard|sim[gl]E|i(?:sin[Ev]|mage|f[fr]|cy)|harrw|(?:n[gl]|l)eqq|g(?:sim[el]|tcc|e(?:qq|l)|nE|l[Eaj]|gg|ap)|ocirc|starf|utrif|d(?:trif|i(?:ams|e)|ashv|sc[ry]|fr|eg)|[du]har[lr]|T(?:HORN|a[bu])|(?:TRAD|[gl]vn)E|odash|[EUaeu]o(?:gon|pf)|alpha|[IJOUYgjuy]c(?:irc|y)|v(?:arr|ee)|succ|sim[gl]|harr|ln(?:ap|e)|lesg|(?:n[gl]|l)eq|ocir|star|utri|vBar|fork|su[bp]e|nsim|lneq|gneq|csu[bp]|zwn?j|yacy|x(?:opf|i)|scnE|o(?:r(?:d[fm]|v)|mid|lt|hm|gt|fr|cy|S)|scap|rsqb|ropf|ltcc|tsc[ry]|QUOT|[EOUYao]uml|rho|phi|n[GL]t|e[gl]s|ngt|I(?:nt|m)|nis|rfr|rcy|lnE|lEg|ufr|S(?:um|cy)|R(?:sh|ho)|psi|Ps?i|[NRTt]cy|L(?:sh|cy|[Tt])|kcy|Kcy|Hat|REG|[Zdz]cy|wr|lE|wp|Xi|Nu|Mu)(;)", name: "constant.language.character-reference.named.html" } }, scopeName: "source.mdx", embeddedLangs: [], embeddedLangsLazy: ["tsx", "toml", "yaml", "c", "clojure", "coffee", "cpp", "csharp", "css", "diff", "docker", "elixir", "elm", "erlang", "go", "graphql", "haskell", "html", "ini", "java", "javascript", "json", "julia", "kotlin", "less", "lua", "make", "markdown", "objective-c", "perl", "python", "r", "ruby", "rust", "scala", "scss", "shellscript", "shellsession", "sql", "xml", "swift", "typescript"] });
var bn = [
  dn
];
const gn = Object.freeze({ displayName: "Mermaid", fileTypes: [], injectionSelector: "L:text.html.markdown", name: "mermaid", patterns: [{ include: "#mermaid-code-block" }, { include: "#mermaid-code-block-with-attributes" }, { include: "#mermaid-ado-code-block" }], repository: { mermaid: { patterns: [{ begin: "^\\s*(classDiagram)", beginCaptures: { 1: { name: "keyword.control.mermaid" } }, comment: "Class Diagram", end: "(^|\\G)(?=\\s*[`:~]{3,}\\s*$)", patterns: [{ match: "\\%%.*", name: "comment" }, { captures: { 1: { name: "entity.name.type.class.mermaid" }, 2: { name: "keyword.control.mermaid" }, 3: { name: "keyword.control.mermaid" }, 4: { name: "keyword.control.mermaid" }, 5: { name: "entity.name.type.class.mermaid" }, 6: { name: "keyword.control.mermaid" }, 7: { name: "string" } }, comment: '(class name) ("multiplicity relationship")? (relationship) ("multiplicity relationship")? (class name) :? (labelText)?', match: '(?i)([\\w-]+)\\s("(?:\\d+|\\*|0..\\d+|1..\\d+|1..\\*)")?\\s?(--o|--\\*|\\<--|--\\>|<\\.\\.|\\.\\.\\>|\\<\\|\\.\\.|\\.\\.\\|\\>|\\<\\|--|--\\|>|--\\*|--|\\.\\.|\\*--|o--)\\s("(?:\\d+|\\*|0..\\d+|1..\\d+|1..\\*)")?\\s?([\\w-]+)\\s?(:)?\\s(.*)$' }, { captures: { 1: { name: "entity.name.type.class.mermaid" }, 2: { name: "keyword.control.mermaid" }, 3: { name: "keyword.control.mermaid" }, 4: { name: "entity.name.function.mermaid" }, 5: { name: "punctuation.parenthesis.open.mermaid" }, 6: { name: "storage.type.mermaid" }, 7: { name: "punctuation.definition.typeparameters.begin.mermaid" }, 8: { name: "storage.type.mermaid" }, 9: { name: "punctuation.definition.typeparameters.end.mermaid" }, 10: { name: "entity.name.variable.parameter.mermaid" }, 11: { name: "punctuation.parenthesis.closed.mermaid" }, 12: { name: "keyword.control.mermaid" }, 13: { name: "storage.type.mermaid" }, 14: { name: "punctuation.definition.typeparameters.begin.mermaid" }, 15: { name: "storage.type.mermaid" }, 16: { name: "punctuation.definition.typeparameters.end.mermaid" } }, comment: "(class name) : (visibility)?(function)( (function param/generic param)? )(classifier)? (return/generic return)?$", match: "(?i)([\\w-]+)\\s?(:)\\s([\\+~#-])?([\\w-]+)(\\()([\\w-]+)?(~)?([\\w-]+)?(~)?\\s?([\\w-]+)?(\\))([*\\$]{0,2})\\s?([\\w-]+)?(~)?([\\w-]+)?(~)?$" }, { captures: { 1: { name: "entity.name.type.class.mermaid" }, 2: { name: "keyword.control.mermaid" }, 3: { name: "keyword.control.mermaid" }, 4: { name: "storage.type.mermaid" }, 5: { name: "punctuation.definition.typeparameters.begin.mermaid" }, 6: { name: "storage.type.mermaid" }, 7: { name: "punctuation.definition.typeparameters.end.mermaid" }, 8: { name: "entity.name.variable.field.mermaid" } }, comment: "(class name) : (visibility)?(datatype/generic data type) (attribute name)$", match: "(?i)([\\w-]+)\\s?(:)\\s([\\+~#-])?([\\w-]+)(~)?([\\w-]+)?(~)?\\s([\\w-]+)?$" }, { captures: { 1: { name: "punctuation.definition.typeparameters.begin.mermaid" }, 2: { name: "storage.type.mermaid" }, 3: { name: "punctuation.definition.typeparameters.end.mermaid" }, 4: { name: "entity.name.type.class.mermaid" } }, comment: "<<(Annotation)>> (class name)", match: "(?i)(<<)([\\w-]+)(>>)\\s?([\\w-]+)?" }, { begin: "(?i)(class)\\s+([\\w-]+)(~)?([\\w-]+)?(~)?\\s?({)", beginCaptures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "entity.name.type.class.mermaid" }, 3: { name: "punctuation.definition.typeparameters.begin.mermaid" }, 4: { name: "storage.type.mermaid" }, 5: { name: "punctuation.definition.typeparameters.end.mermaid" }, 6: { name: "keyword.control.mermaid" } }, comment: "class (class name) ~?(generic type)?~? ({)", end: "(})", endCaptures: { 1: { name: "keyword.control.mermaid" } }, patterns: [{ match: "\\%%.*", name: "comment" }, { begin: "(?i)\\s([\\+~#-])?([\\w-]+)(\\()", beginCaptures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "entity.name.function.mermaid" }, 3: { name: "punctuation.parenthesis.open.mermaid" } }, comment: "(visibility)?(function)( (function param/generic param)? )(classifier)? (return/generic return)?$", end: "(?i)(\\))([*\\$]{0,2})\\s?([\\w-]+)?(~)?([\\w-]+)?(~)?$", endCaptures: { 1: { name: "punctuation.parenthesis.closed.mermaid" }, 2: { name: "keyword.control.mermaid" }, 3: { name: "storage.type.mermaid" }, 4: { name: "punctuation.definition.typeparameters.begin.mermaid" }, 5: { name: "storage.type.mermaid" }, 6: { name: "punctuation.definition.typeparameters.end.mermaid" } }, patterns: [{ captures: { 1: { name: "storage.type.mermaid" }, 2: { name: "punctuation.definition.typeparameters.begin.mermaid" }, 3: { name: "storage.type.mermaid" }, 4: { name: "punctuation.definition.typeparameters.end.mermaid" }, 5: { name: "entity.name.variable.parameter.mermaid" } }, comment: "(TBD)", match: "(?i)\\s*,?\\s*([\\w-]+)?(~)?([\\w-]+)?(~)?\\s?([\\w-]+)?" }] }, { captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "storage.type.mermaid" }, 3: { name: "punctuation.definition.typeparameters.begin.mermaid" }, 4: { name: "storage.type.mermaid" }, 5: { name: "punctuation.definition.typeparameters.end.mermaid" }, 6: { name: "entity.name.variable.field.mermaid" } }, comment: "(visibility)?(datatype/generic data type) (attribute name)$", match: "(?i)\\s([\\+~#-])?([\\w-]+)(~)?([\\w-]+)?(~)?\\s([\\w-]+)?$" }, { captures: { 1: { name: "punctuation.definition.typeparameters.begin.mermaid" }, 2: { name: "storage.type.mermaid" }, 3: { name: "punctuation.definition.typeparameters.end.mermaid" }, 4: { name: "entity.name.type.class.mermaid" } }, comment: "<<(Annotation)>> (class name)", match: "(?i)(<<)([\\w-]+)(>>)\\s?([\\w-]+)?" }] }, { captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "entity.name.type.class.mermaid" }, 3: { name: "punctuation.definition.typeparameters.begin.mermaid" }, 4: { name: "storage.type.mermaid" }, 5: { name: "punctuation.definition.typeparameters.end.mermaid" } }, comment: "class (class name) ~?(generic type)?~?", match: "(?i)(class)\\s+([\\w-]+)(~)?([\\w-]+)?(~)?" }] }, { begin: "^\\s*(erDiagram)", beginCaptures: { 1: { name: "keyword.control.mermaid" } }, comment: "Entity Relationship Diagram", end: "(^|\\G)(?=\\s*[`:~]{3,}\\s*$)", patterns: [{ match: "\\%%.*", name: "comment" }, { comment: "(entity)", match: "^\\s*([\\w-]+)$", name: "variable" }, { begin: "(?i)\\s+([\\w-]+)\\s*({)", beginCaptures: { 1: { name: "variable" }, 2: { name: "keyword.control.mermaid" } }, comment: "(entity) {", end: "(})", endCaptures: { 1: { name: "keyword.control.mermaid" } }, patterns: [{ captures: { 1: { name: "storage.type.mermaid" }, 2: { name: "variable" }, 3: { name: "keyword.control.mermaid" }, 4: { name: "string" } }, comment: '(type) (name) (PK|FK)? ("comment")?', match: `(?i)\\s*([\\w-]+)\\s+([\\w-]+)\\s+(PK|FK)?\\s*("["\\($&%\\^/#.,?!;:*+=<>\\'\\\\\\-\\w\\s]*")?\\s*` }, { match: "\\%%.*", name: "comment" }] }, { captures: { 1: { name: "variable" }, 2: { name: "keyword.control.mermaid" }, 3: { name: "variable" }, 4: { name: "keyword.control.mermaid" }, 5: { name: "string" } }, comment: "(entity) (relationship) (entity) : (label)", match: '(?i)\\s*([\\w-]+)\\s*((?:\\|o|\\|\\||}o|}\\||one or (?:zero|more|many)|zero or (?:one|more|many)|many\\((?:0|1)\\)|only one|0\\+|1\\+?)(?:..|--)(?:o\\||\\|\\||o{|\\|{|one or (?:zero|more|many)|zero or (?:one|more|many)|many\\((?:0|1)\\)|only one|0\\+|1\\+?))\\s*([\\w-]+)\\s*(:)\\s*((?:"[\\w\\s]*")|(?:[\\w-]+))' }] }, { begin: "^\\s*(gantt)", beginCaptures: { 1: { name: "keyword.control.mermaid" } }, comment: "Gantt Diagram", end: "(^|\\G)(?=\\s*[`:~]{3,}\\s*$)", patterns: [{ match: "\\%%.*", name: "comment" }, { captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "entity.name.function.mermaid" } }, match: "(?i)^\\s*(dateFormat)\\s+([\\w\\-\\.]+)" }, { captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "entity.name.function.mermaid" } }, match: "(?i)^\\s*(axisFormat)\\s+([\\w\\%\\/\\\\\\-\\.]+)" }, { captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "string" } }, match: "(?i)(tickInterval)\\s+(([1-9][0-9]*)(millisecond|second|minute|hour|day|week|month))" }, { captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "string" } }, match: `(?i)^\\s*(title)\\s+(\\s*["\\(\\)$&%\\^/#.,?!;:*+=<>\\'\\\\\\-\\w\\s]*)` }, { captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "string" } }, match: "(?i)^\\s*(excludes)\\s+((?:[\\d\\-,\\s]+|monday|tuesday|wednesday|thursday|friday|saturday|sunday|weekends)+)" }, { captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "string" } }, match: "(?i)^\\s+(todayMarker)\\s+(.*)$" }, { captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "string" } }, match: `(?i)^\\s*(section)\\s+(\\s*["\\(\\)$&%\\^/#.,?!;:*+=<>\\'\\\\\\-\\w\\s]*)` }, { begin: "(?i)^\\s(.*)(:)", beginCaptures: { 1: { name: "string" }, 2: { name: "keyword.control.mermaid" } }, end: "$", patterns: [{ match: "(crit|done|active|after)", name: "entity.name.function.mermaid" }, { match: "\\%%.*", name: "comment" }] }] }, { begin: "^\\s*(gitGraph)", beginCaptures: { 1: { name: "keyword.control.mermaid" } }, comment: "Git Graph", end: "(^|\\G)(?=\\s*[`:~]{3,}\\s*$)", patterns: [{ match: "\\%%.*", name: "comment" }, { begin: "(?i)^\\s*(commit)", beginCaptures: { 1: { name: "keyword.control.mermaid" } }, comment: "commit", end: "$", patterns: [{ captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "keyword.control.mermaid" }, 3: { name: "string" } }, comment: '(id)(:) ("id")', match: '(?i)\\s*(id)(:)\\s?("[^"\\n]*")' }, { captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "keyword.control.mermaid" }, 3: { name: "entity.name.function.mermaid" } }, comment: "(type)(:) (COMMIT_TYPE)", match: "(?i)\\s*(type)(:)\\s?(NORMAL|REVERSE|HIGHLIGHT)" }, { captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "keyword.control.mermaid" }, 3: { name: "string" } }, comment: '(tag)(:) ("tag")', match: `(?i)\\s*(tag)(:)\\s?("[\\($&%\\^/#.,?!;:*+=<>\\'\\\\\\-\\w\\s]*")` }] }, { captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "variable" } }, comment: "(checkout) (branch-name)", match: '(?i)^\\s*(checkout)\\s*([^\\s"]*)' }, { captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "variable" }, 3: { name: "keyword.control.mermaid" }, 4: { name: "keyword.control.mermaid" }, 5: { name: "constant.numeric.decimal.mermaid" } }, comment: "(branch) (branch-name) (order)?(:) (number)", match: '(?i)^\\s*(branch)\\s*([^\\s"]*)\\s*(?:(order)(:)\\s?(\\d+))?' }, { captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "variable" }, 3: { name: "keyword.control.mermaid" }, 4: { name: "keyword.control.mermaid" }, 5: { name: "string" } }, comment: '(merge) (branch-name) (tag: "tag-name")?', match: '(?i)^\\s*(merge)\\s*([^\\s"]*)\\s*(?:(tag)(:)\\s?("[^"\\n]*"))?' }, { captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "keyword.control.mermaid" }, 3: { name: "keyword.control.mermaid" }, 4: { name: "string" } }, comment: '(cherry-pick) (id)(:)("commit-id")', match: '(?i)^\\s*(cherry-pick)\\s+(id)(:)\\s*("[^"\\n]*")' }] }, { begin: "^\\s*(graph|flowchart)\\s+([\\p{Letter}\\ 0-9]+)", beginCaptures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "entity.name.function.mermaid" } }, comment: "Graph", end: "(^|\\G)(?=\\s*[`:~]{3,}\\s*$)", patterns: [{ match: "\\%%.*", name: "comment" }, { captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "variable" }, 3: { name: "keyword.control.mermaid" }, 4: { name: "string" }, 5: { name: "keyword.control.mermaid" } }, comment: "", match: '(?i)^\\s*(subgraph)\\s+(\\w+)(\\[)("?[\\w\\s*+%=\\\\/:\\.\\-\'`,&^#$!?<>]*"?)(\\])' }, { captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "entity.name.function.mermaid" } }, match: "^\\s*(subgraph)\\s+([\\p{Letter}\\ 0-9<>]+)" }, { captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "entity.name.function.mermaid" } }, match: "^(?i)\\s*(direction)\\s+(RB|BT|RL|TD|LR)" }, { match: "\\b(end)\\b", name: "keyword.control.mermaid" }, { begin: "(?i)(\\b(?:(?!--|==)[-\\w])+\\b\\s*)(\\(\\[|\\[\\[|\\[\\(|\\[|\\(+|\\>|\\{|\\(\\()", beginCaptures: { 1: { name: "variable" }, 2: { name: "keyword.control.mermaid" }, 3: { name: "string" } }, comment: "(Entity)(Edge/Shape)(Text)(Edge/Shape)", end: "(?i)(\\]\\)|\\]\\]|\\)\\]|\\]|\\)+|\\}|\\)\\))", endCaptures: { 1: { name: "keyword.control.mermaid" } }, patterns: [{ begin: '\\s*(")', beginCaptures: { 1: { name: "string" } }, comment: '("multi-line text")', end: '(")', endCaptures: { 1: { name: "string" } }, patterns: [{ begin: '(?i)([^"]*)', beginCaptures: { 1: { name: "string" } }, comment: "capture inner text between quotes", end: '(?=")', patterns: [{ captures: { 1: { name: "comment" } }, match: '([^"]*)' }] }] }, { captures: { 1: { name: "string" } }, comment: "(single line text)", match: "(?i)\\s*([$&%\\^/#.,?!;:*+<>_\\'\\\\\\w\\s]+)" }] }, { begin: "(?i)\\s*((?:-{2,5}|={2,5})[xo>]?\\|)", beginCaptures: { 1: { name: "keyword.control.mermaid" } }, comment: '(Graph Link)("Multiline text")(Graph Link)', end: "(?i)(\\|)", endCaptures: { 1: { name: "keyword.control.mermaid" } }, patterns: [{ begin: '\\s*(")', beginCaptures: { 1: { name: "string" } }, comment: '("multi-line text")', end: '(")', endCaptures: { 1: { name: "string" } }, patterns: [{ begin: '(?i)([^"]*)', beginCaptures: { 1: { name: "string" } }, comment: "capture inner text between quotes", end: '(?=")', patterns: [{ captures: { 1: { name: "comment" } }, match: '([^"]*)' }] }] }, { captures: { 1: { name: "string" } }, comment: "(single line text)", match: "(?i)\\s*([$&%\\^/#.,?!;:*+<>_\\'\\\\\\w\\s]+)" }] }, { captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "string" }, 3: { name: "keyword.control.mermaid" } }, comment: "(Graph Link Start Arrow)(Text)(Graph Link End Arrow)", match: "(?i)\\s*([xo<]?(?:-{2,5}|={2,5}|-\\.{1,3}|-\\.))((?:(?!--|==)[\\w\\s*+%=\\\\/:\\.\\-'`,\"&^#$!?<>\\[\\]])*)((?:-{2,5}|={2,5}|\\.{1,3}-|\\.-)[xo>]?)" }, { captures: { 1: { name: "keyword.control.mermaid" } }, comment: "(Graph Link)", match: "(?i)\\s*([ox<]?(?:-.{1,3}-|-{1,3}|={1,3})[ox>]?)" }, { comment: "Entity", match: "(\\b(?:(?!--|==)[-\\w])+\\b\\s*)", name: "variable" }, { captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "variable" }, 3: { name: "string" } }, comment: "(Class)(Node(s))(ClassName)", match: "(?i)\\s*(class)\\s+(\\b[-,\\w]+)\\s+(\\b\\w+\\b)" }, { captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "variable" }, 3: { name: "string" } }, comment: "(ClassDef)(ClassName)(Styles)", match: "(?i)\\s*(classDef)\\s+(\\b\\w+\\b)\\s+(\\b[-,:;#\\w]+)" }, { captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "variable" }, 3: { name: "variable" }, 4: { name: "string" } }, comment: "(Click)(Entity)(Link)?(Tooltip)", match: '(?i)\\s*(click)\\s+(\\b[-\\w]+\\b\\s*)(\\b\\w+\\b)?\\s("*.*")' }] }, { begin: "^\\s*(pie)", beginCaptures: { 1: { name: "keyword.control.mermaid" } }, comment: "Pie Chart", end: "(^|\\G)(?=\\s*[`:~]{3,}\\s*$)", patterns: [{ match: "\\%%.*", name: "comment" }, { captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "string" } }, match: `(?i)^\\s*(title)\\s+(\\s*["\\(\\)$&%\\^/#.,?!;:*+=<>\\'\\\\\\-\\w\\s]*)` }, { begin: "(?i)\\s(.*)(:)", beginCaptures: { 1: { name: "string" }, 2: { name: "keyword.control.mermaid" } }, end: "$", patterns: [{ match: "\\%%.*", name: "comment" }] }] }, { begin: "^\\s*(quadrantChart)", beginCaptures: { 1: { name: "keyword.control.mermaid" } }, comment: "Quadrant Chart", end: "(^|\\G)(?=\\s*[`:~]{3,}\\s*$)", patterns: [{ match: "\\%%.*", name: "comment" }, { captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "string" } }, match: `(?i)^\\s*(title)\\s*(["\\(\\)$&%\\^/#.,?!;:*+=<>\\'\\\\\\-\\w\\s]*)` }, { begin: "(?i)^\\s*([xy]-axis)\\s+((?:(?!-->)[$&%/#.,?!*+=\\'\\\\\\-\\w\\s])*)", beginCaptures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "string" } }, comment: "(x|y-axis) (text) (-->)? (text)?", end: "$", patterns: [{ captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "string" } }, comment: "(-->) (text)", match: "(?i)\\s*(-->)\\s*([$&%/#.,?!*+=\\'\\\\\\-\\w\\s]*)" }] }, { captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "string" } }, match: `(?i)^\\s*(quadrant-[1234])\\s*(["\\(\\)$&%\\^/#.,?!;:*+=<>\\'\\\\\\-\\w\\s]*)` }, { captures: { 1: { name: "string" }, 2: { name: "keyword.control.mermaid" }, 3: { name: "keyword.control.mermaid" }, 4: { name: "constant.numeric.decimal.mermaid" }, 5: { name: "keyword.control.mermaid" }, 6: { name: "constant.numeric.decimal.mermaid" }, 7: { name: "keyword.control.mermaid" } }, comment: "(text)(:) ([)(decimal)(,) (decimal)(])", match: "(?i)\\s*([$&%/#.,?!*+=\\'\\\\\\-\\w\\s]*)\\s*(:)\\s*(\\[)\\s*(\\d\\.\\d+)\\s*(,)\\s*(\\d\\.\\d+)\\s*(\\])" }] }, { begin: "^\\s*(requirementDiagram)", beginCaptures: { 1: { name: "keyword.control.mermaid" } }, comment: "Requirement Diagram", end: "(^|\\G)(?=\\s*[`:~]{3,}\\s*$)", patterns: [{ match: "\\%%.*", name: "comment" }, { begin: `(?i)^\\s*((?:functional|interface|performance|physical)?requirement|designConstraint)\\s*(["\\(\\)$&%\\^/#.,?!;:*+=<>\\'\\\\\\-\\w\\s]*)\\s*({)`, beginCaptures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "variable" }, 3: { name: "keyword.control.mermaid" } }, comment: "(requirement) (name) ({)", end: "(?i)\\s*(})", endCaptures: { 1: { name: "keyword.control.mermaid" } }, patterns: [{ captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "variable" } }, comment: "(id:) (variable id)", match: "(?i)\\s*(id:)\\s*([$&%\\^/#.,?!;:*+<>_\\'\\\\\\w\\s]+)" }, { captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "string" } }, comment: "(text:) (text string)", match: "(?i)\\s*(text:)\\s*([$&%\\^/#.,?!;:*+<>_\\'\\\\\\w\\s]+)" }, { captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "entity.name.function.mermaid" } }, comment: "(risk:) (risk option)", match: "(?i)\\s*(risk:)\\s*(low|medium|high)\\s*$" }, { captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "entity.name.function.mermaid" } }, comment: "(verifyMethod)(:) (method)", match: "(?i)\\s*(verifymethod:)\\s*(analysis|inspection|test|demonstration)\\s*$" }] }, { begin: `(?i)^\\s*(element)\\s*(["\\(\\)$&%\\^/#.,?!;:*+=<>\\'\\\\\\-\\w\\s]*)\\s*({)`, beginCaptures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "variable" }, 3: { name: "keyword.control.mermaid" } }, comment: "(element) (name) ({)", end: "(?i)\\s*(})", endCaptures: { 1: { name: "keyword.control.mermaid" } }, patterns: [{ captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "variable" } }, comment: "(type:) (user type)", match: `(?i)\\s*(type:)\\s*(["$&%\\^/#.,?!;:*+<>_\\'\\\\\\w\\s]+)` }, { captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "variable" } }, comment: "(docref:) (user ref)", match: "(?i)\\s*(docref:)\\s*([$&%\\^/#.,?!;:*+<>_\\'\\\\\\w\\s]+)" }] }, { captures: { 1: { name: "variable" }, 2: { name: "keyword.control.mermaid" }, 3: { name: "keyword.control.mermaid" }, 4: { name: "keyword.control.mermaid" }, 5: { name: "variable" } }, comment: "(source) (-) (type) (->) (destination)", match: "(?i)^\\s*([\\w]+)\\s*(-)\\s*(contains|copies|derives|satisfies|verifies|refines|traces)\\s*(->)\\s*([\\w]+)\\s*$" }, { captures: { 1: { name: "variable" }, 2: { name: "keyword.control.mermaid" }, 3: { name: "keyword.control.mermaid" }, 4: { name: "keyword.control.mermaid" }, 5: { name: "variable" } }, comment: "(destination) (<-) (type) (-) (source)", match: "(?i)^\\s*([\\w]+)\\s*(<-)\\s*(contains|copies|derives|satisfies|verifies|refines|traces)\\s*(-)\\s*([\\w]+)\\s*$" }] }, { begin: "^\\s*(sequenceDiagram)", beginCaptures: { 1: { name: "keyword.control.mermaid" } }, comment: "Sequence Diagram", end: "(^|\\G)(?=\\s*[`:~]{3,}\\s*$)", patterns: [{ match: "(\\%%|#).*", name: "comment" }, { captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "keyword.control.mermaid" }, 3: { name: "string" } }, comment: "(title)(title text)", match: `(?i)(title)\\s*(:)?\\s+(\\s*["\\(\\)$&%\\^/#.,?!:*+=<>\\'\\\\\\-\\w\\s]*)` }, { captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "variable" }, 3: { name: "keyword.control.mermaid" }, 4: { name: "string" } }, comment: "(participant)(Actor)(as)?(Label)?", match: `(?i)\\s*(participant|actor)\\s+((?:(?! as )["\\(\\)$&%\\^/#.?!*=<>\\'\\\\\\w\\s])+)\\s*(as)?\\s(["\\(\\)$&%\\^/#.,?!*=<>\\'\\\\\\w\\s]+)?` }, { captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "variable" } }, comment: "(activate/deactivate)(Actor)", match: `(?i)\\s*((?:de)?activate)\\s+(\\b["()$&%^/#.?!*=<>'\\\\\\w\\s]+\\b\\)?\\s*)` }, { captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "entity.name.function.mermaid" }, 3: { name: "variable" }, 4: { name: "keyword.control.mermaid" }, 5: { name: "variable" }, 6: { name: "keyword.control.mermaid" }, 7: { name: "string" } }, comment: "(Note)(direction)(Actor)(,)?(Actor)?(:)(Message)", match: `(?i)\\s*(Note)\\s+((?:left|right)\\sof|over)\\s+(\\b["()$&%^/#.?!*=<>'\\\\\\w\\s]+\\b\\)?\\s*)(,)?(\\b["()$&%^/#.?!*=<>'\\\\\\w\\s]+\\b\\)?\\s*)?(:)(?:\\s+([^;#]*))?` }, { captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "string" } }, comment: "(loop)(loop text)", match: "(?i)\\s*(loop)(?:\\s+([^;#]*))?" }, { captures: { 1: { name: "keyword.control.mermaid" } }, comment: "(end)", match: "\\s*(end)" }, { captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "string" } }, comment: "(alt/else/option/par/and/autonumber/critical/opt)(text)", match: "(?i)\\s*(alt|else|option|par|and|rect|autonumber|critical|opt)(?:\\s+([^#;]*))?$" }, { captures: { 1: { name: "variable" }, 2: { name: "keyword.control.mermaid" }, 3: { name: "variable" }, 4: { name: "keyword.control.mermaid" }, 5: { name: "string" } }, comment: "(Actor)(Arrow)(Actor)(:)(Message)", match: `(?i)\\s*(\\b["()$&%^/#.?!*=<>'\\\\\\w\\s]+\\b\\)?)\\s*(-?-(?:\\>|x|\\))\\>?[+-]?)\\s*(["()$&%^/#.?!*=<>'\\\\\\w\\s]+\\b\\)?)\\s*(:)\\s*([^;#]*)` }, { captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "entity.name.function.mermaid" }, 3: { name: "string" } }, comment: "(box transparent text)", match: "(?i)\\s*(box)\\s+(transparent)(?:\\s+([^;#]*))?" }, { captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "string" } }, comment: "(box text)", match: "(?i)\\s*(box)(?:\\s+([^;#]*))?" }] }, { begin: "^\\s*(stateDiagram(?:-v2)?)", beginCaptures: { 1: { name: "keyword.control.mermaid" } }, comment: "State Diagram", end: "(^|\\G)(?=\\s*[`:~]{3,}\\s*$)", patterns: [{ match: "\\%%.*", name: "comment" }, { captures: { 1: { name: "keyword.control.mermaid" } }, comment: "}", match: "\\s+(})\\s+" }, { captures: { 1: { name: "keyword.control.mermaid" } }, comment: "--", match: "\\s+(--)\\s+" }, { comment: "(state)", match: "^\\s*([\\w-]+)$", name: "variable" }, { captures: { 1: { name: "variable" }, 2: { name: "keyword.control.mermaid" }, 3: { name: "string" } }, comment: "(state) : (description)", match: "(?i)([\\w-]+)\\s+(:)\\s+(\\s*[-\\w\\s]+\\b)" }, { begin: "(?i)^\\s*(state)\\s+", beginCaptures: { 1: { name: "keyword.control.mermaid" } }, comment: "state", end: "$", patterns: [{ captures: { 1: { name: "string" }, 2: { name: "keyword.control.mermaid" }, 3: { name: "variable" } }, comment: '"(description)" as (state)', match: '(?i)\\s*("[-\\w\\s]+\\b")\\s+(as)\\s+([\\w-]+)' }, { captures: { 1: { name: "variable" }, 2: { name: "keyword.control.mermaid" } }, comment: "(state name) {", match: "(?i)\\s*([\\w-]+)\\s+({)" }, { captures: { 1: { name: "variable" }, 2: { name: "keyword.control.mermaid" } }, comment: "(state name) <<fork|join>>", match: "(?i)\\s*([\\w-]+)\\s+(<<(?:fork|join)>>)" }] }, { begin: "(?i)([\\w-]+)\\s+(-->)", beginCaptures: { 1: { name: "variable" }, 2: { name: "keyword.control.mermaid" } }, comment: "(state) -->", end: "$", patterns: [{ captures: { 1: { name: "variable" }, 2: { name: "keyword.control.mermaid" }, 3: { name: "string" } }, comment: "(state) (:)? (transition text)?", match: "(?i)\\s+([\\w-]+)\\s*(:)?\\s*([^\\n:]+)?" }, { captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "keyword.control.mermaid" }, 3: { name: "string" } }, comment: "[*] (:)? (transition text)?", match: "(?i)(\\[\\*\\])\\s*(:)?\\s*([^\\n:]+)?" }] }, { captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "keyword.control.mermaid" }, 3: { name: "variable" }, 4: { name: "keyword.control.mermaid" }, 5: { name: "string" } }, comment: "[*] --> (state) (:)? (transition text)?", match: "(?i)(\\[\\*\\])\\s+(-->)\\s+([\\w-]+)\\s*(:)?\\s*([^\\n:]+)?" }, { captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "variable" }, 3: { name: "keyword.control.mermaid" }, 4: { name: "string" } }, comment: "note left|right of (state name)", match: "(?i)^\\s*(note (?:left|right) of)\\s+([\\w-]+)\\s+(:)\\s*([^\\n:]+)" }, { begin: "(?i)^\\s*(note (?:left|right) of)\\s+([\\w-]+)(.|\\n)", beginCaptures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "variable" } }, comment: "note left|right of (state name) (note text) end note", contentName: "string", end: "(?i)(end note)", endCaptures: { 1: { name: "keyword.control.mermaid" } } }] }, { begin: "^\\s*(journey)", beginCaptures: { 1: { name: "keyword.control.mermaid" } }, comment: "User Journey", end: "(^|\\G)(?=\\s*[`:~]{3,}\\s*$)", patterns: [{ match: "\\%%.*", name: "comment" }, { captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "string" } }, match: `(?i)^\\s*(title|section)\\s+(\\s*["\\(\\)$&%\\^/#.,?!;:*+=<>\\'\\\\\\-\\w\\s]*)` }, { begin: `(?i)\\s*(["\\(\\)$&%\\^/.,?!*+=<>\\'\\\\\\-\\w\\s]*)\\s*(:)\\s*(\\d+)\\s*(:)`, beginCaptures: { 1: { name: "string" }, 2: { name: "keyword.control.mermaid" }, 3: { name: "constant.numeric.decimal.mermaid" }, 4: { name: "keyword.control.mermaid" } }, end: "$", patterns: [{ captures: { 1: { name: "variable" } }, comment: "(taskName)", match: "(?i)\\s*,?\\s*([^,#\\n]+)" }] }] }, { begin: "^\\s*(xychart(?:-beta)?(?:\\s+horizontal)?)", beginCaptures: { 1: { name: "keyword.control.mermaid" } }, comment: "XY Chart", end: "(^|\\G)(?=\\s*[`:~]{3,}\\s*$)", patterns: [{ match: "\\%%.*", name: "comment" }, { captures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "string" } }, match: `(?i)^\\s*(title)\\s+(\\s*["\\(\\)$&%\\^/#.,?!;:*+=<>\\'\\\\\\-\\w\\s]*)` }, { begin: "(?i)^\\s*(x-axis)", beginCaptures: { 1: { name: "keyword.control.mermaid" } }, comment: "(x-axis)", end: "$", patterns: [{ captures: { 1: { name: "constant.numeric.decimal.mermaid" }, 2: { name: "keyword.control.mermaid" }, 3: { name: "constant.numeric.decimal.mermaid" } }, comment: "(decimal) (-->) (decimal)", match: "(?i)\\s*([-+]?\\d+\\.?\\d*)\\s*(-->)\\s*([-+]?\\d+\\.?\\d*)" }, { captures: { 1: { name: "string" } }, comment: '("text")', match: `(?i)\\s+("[\\($&%\\^/#.,?!;:*+=<>\\'\\\\\\-\\w\\s]*")` }, { captures: { 1: { name: "string" } }, comment: "(text)", match: "(?i)\\s+([\\($&%\\^/#.,?!;:*+=<>\\'\\\\\\-\\w]*)" }, { begin: "\\s*(\\[)", beginCaptures: { 1: { name: "keyword.control.mermaid" } }, comment: "([)(text)(,)(text)*(])", end: "\\s*(\\])", endCaptures: { 1: { name: "keyword.control.mermaid" } }, patterns: [{ captures: { 1: { name: "constant.numeric.decimal.mermaid" } }, comment: "(decimal)", match: "(?i)\\s*([-+]?\\d+\\.?\\d*)" }, { captures: { 1: { name: "string" } }, comment: '("text")', match: `(?i)\\s*("[\\($&%\\^/#.,?!;:*+=<>\\'\\\\\\-\\w\\s]*")` }, { captures: { 1: { name: "string" } }, comment: "(text)", match: "(?i)\\s*([\\($&%\\^/#.?!;:*+=<>\\'\\\\\\-\\w\\s]+)" }, { captures: { 1: { name: "keyword.control.mermaid" } }, comment: "(,)", match: "(?i)\\s*(,)" }] }] }, { begin: "(?i)^\\s*(y-axis)", beginCaptures: { 1: { name: "keyword.control.mermaid" } }, comment: "(y-axis)", end: "$", patterns: [{ captures: { 1: { name: "constant.numeric.decimal.mermaid" }, 2: { name: "keyword.control.mermaid" }, 3: { name: "constant.numeric.decimal.mermaid" } }, comment: "(decimal) (-->) (decimal)", match: "(?i)\\s*([-+]?\\d+\\.?\\d*)\\s*(-->)\\s*([-+]?\\d+\\.?\\d*)" }, { captures: { 1: { name: "string" } }, comment: '("text")', match: `(?i)\\s+("[\\($&%\\^/#.,?!;:*+=<>\\'\\\\\\-\\w\\s]*")` }, { captures: { 1: { name: "string" } }, comment: "(text)", match: "(?i)\\s+([\\($&%\\^/#.,?!;:*+=<>\\'\\\\\\-\\w]*)" }] }, { begin: "(?i)^\\s*(line|bar)\\s*(\\[)", beginCaptures: { 1: { name: "keyword.control.mermaid" }, 2: { name: "keyword.control.mermaid" } }, comment: "(line|bar) ([)(decimal)+(])", end: "\\s*(\\])", endCaptures: { 1: { name: "keyword.control.mermaid" } }, patterns: [{ captures: { 1: { name: "constant.numeric.decimal.mermaid" } }, comment: "(decimal)", match: "(?i)\\s*([-+]?\\d+\\.?\\d*)" }, { captures: { 1: { name: "keyword.control.mermaid" } }, comment: "(,)", match: "(?i)\\s*(,)" }] }] }] }, "mermaid-ado-code-block": { begin: "(?i)\\s*:::\\s*mermaid\\s*$", contentName: "meta.embedded.block.mermaid", end: "\\s*:::\\s*", patterns: [{ include: "#mermaid" }] }, "mermaid-code-block": { begin: "(?i)(?<=[`~])mermaid(\\s+[^`~]*)?$", contentName: "meta.embedded.block.mermaid", end: "(^|\\G)(?=\\s*[`~]{3,}\\s*$)", patterns: [{ include: "#mermaid" }] }, "mermaid-code-block-with-attributes": { begin: "(?i)(?<=[`~])\\{\\s*\\.?mermaid(\\s+[^`~]*)?$", contentName: "meta.embedded.block.mermaid", end: "(^|\\G)(?=\\s*[`~]{3,}\\s*$)", patterns: [{ include: "#mermaid" }] } }, scopeName: "markdown.mermaid.codeblock" });
var _n = [
  gn
];
const fn = Object.freeze({ displayName: "Nginx", fileTypes: ["conf.erb", "conf", "ngx", "nginx.conf", "mime.types", "fastcgi_params", "scgi_params", "uwsgi_params"], foldingStartMarker: "\\{\\s*$", foldingStopMarker: "^\\s*\\}", name: "nginx", patterns: [{ match: "\\#.*", name: "comment.line.number-sign" }, { begin: "\\b((?:content|rewrite|access|init_worker|init|set|log|balancer|ssl_(?:client_hello|session_fetch|certificate))_by_lua(?:_block)?)\\s*\\{", beginCaptures: { 1: { name: "storage.type.directive.context.nginx" } }, contentName: "meta.embedded.block.lua", end: "\\}", name: "meta.context.lua.nginx", patterns: [{ include: "source.lua" }] }, { begin: "\\b((?:content|rewrite|access|init_worker|init|set|log|balancer|ssl_(?:client_hello|session_fetch|certificate))_by_lua)\\s*'", beginCaptures: { 1: { name: "storage.type.directive.context.nginx" } }, contentName: "meta.embedded.block.lua", end: "'", name: "meta.context.lua.nginx", patterns: [{ include: "source.lua" }] }, { begin: "\\b(events) +\\{", beginCaptures: { 1: { name: "storage.type.directive.context.nginx" } }, end: "\\}", name: "meta.context.events.nginx", patterns: [{ include: "$self" }] }, { begin: "\\b(http) +\\{", beginCaptures: { 1: { name: "storage.type.directive.context.nginx" } }, end: "\\}", name: "meta.context.http.nginx", patterns: [{ include: "$self" }] }, { begin: "\\b(mail) +\\{", beginCaptures: { 1: { name: "storage.type.directive.context.nginx" } }, end: "\\}", name: "meta.context.mail.nginx", patterns: [{ include: "$self" }] }, { begin: "\\b(stream) +\\{", beginCaptures: { 1: { name: "storage.type.directive.context.nginx" } }, end: "\\}", name: "meta.context.stream.nginx", patterns: [{ include: "$self" }] }, { begin: "\\b(server) +\\{", beginCaptures: { 1: { name: "storage.type.directive.context.nginx" } }, end: "\\}", name: "meta.context.server.nginx", patterns: [{ include: "$self" }] }, { begin: "\\b(location) +([\\^]?~[\\*]?|=) +(.*?)\\{", beginCaptures: { 1: { name: "storage.type.directive.context.nginx" }, 2: { name: "keyword.operator.nginx" }, 3: { name: "string.regexp.nginx" } }, end: "\\}", name: "meta.context.location.nginx", patterns: [{ include: "$self" }] }, { begin: "\\b(location) +(.*?)\\{", beginCaptures: { 1: { name: "storage.type.directive.context.nginx" }, 2: { name: "entity.name.context.location.nginx" } }, end: "\\}", name: "meta.context.location.nginx", patterns: [{ include: "$self" }] }, { begin: "\\b(limit_except) +\\{", beginCaptures: { 1: { name: "storage.type.directive.context.nginx" } }, end: "\\}", name: "meta.context.limit_except.nginx", patterns: [{ include: "$self" }] }, { begin: "\\b(if) +\\(", beginCaptures: { 1: { name: "keyword.control.nginx" } }, end: "\\)", name: "meta.context.if.nginx", patterns: [{ include: "#if_condition" }] }, { begin: "\\b(upstream) +(.*?)\\{", beginCaptures: { 1: { name: "storage.type.directive.context.nginx" }, 2: { name: "entity.name.context.location.nginx" } }, end: "\\}", name: "meta.context.upstream.nginx", patterns: [{ include: "$self" }] }, { begin: "\\b(types) +\\{", beginCaptures: { 1: { name: "storage.type.directive.context.nginx" } }, end: "\\}", name: "meta.context.types.nginx", patterns: [{ include: "$self" }] }, { begin: "\\b(map) +(\\$)([A-Za-z0-9\\_]+) +(\\$)([A-Za-z0-9\\_]+) *\\{", beginCaptures: { 1: { name: "storage.type.directive.context.nginx" }, 2: { name: "punctuation.definition.variable.nginx" }, 3: { name: "variable.parameter.nginx" }, 4: { name: "punctuation.definition.variable.nginx" }, 5: { name: "variable.other.nginx" } }, end: "\\}", name: "meta.context.map.nginx", patterns: [{ include: "#values" }, { match: ";", name: "punctuation.terminator.nginx" }, { match: "\\#.*", name: "comment.line.number-sign" }] }, { begin: "\\{", end: "\\}", name: "meta.block.nginx", patterns: [{ include: "$self" }] }, { begin: "\\b(return)\\b", beginCaptures: { 1: { name: "keyword.control.nginx" } }, end: ";", patterns: [{ include: "#values" }] }, { begin: "\\b(rewrite)\\s+", beginCaptures: { 1: { name: "keyword.directive.nginx" } }, end: "(last|break|redirect|permanent)?(;)", endCaptures: { 1: { name: "keyword.other.nginx" }, 2: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: "\\b(server)\\s+", beginCaptures: { 1: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 1: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#server_parameters" }] }, { begin: "\\b(internal|empty_gif|f4f|flv|hls|mp4|break|status|stub_status|ip_hash|ntlm|least_conn|upstream_conf|least_conn|zone_sync)\\b", beginCaptures: { 1: { name: "keyword.directive.nginx" } }, end: "(;|$)", endCaptures: { 1: { name: "punctuation.terminator.nginx" } } }, { begin: `(["'\\s]|^)(accept_)(mutex|mutex_delay)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(debug_)(connection|points)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(error_)(log|page)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(ssl_)(engine|buffer_size|certificate|certificate_key|ciphers|client_certificate|conf_command|crl|dhparam|early_data|ecdh_curve|ocsp|ocsp_cache|ocsp_responder|password_file|prefer_server_ciphers|protocols|reject_handshake|session_cache|session_ticket_key|session_tickets|session_timeout|stapling|stapling_file|stapling_responder|stapling_verify|trusted_certificate|verify_client|verify_depth|alpn|handshake_timeout|preread)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(worker_)(aio_requests|connections|cpu_affinity|priority|processes|rlimit_core|rlimit_nofile|shutdown_timeout)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(auth_)(delay|basic|basic_user_file|jwt|jwt_claim_set|jwt_header_set|jwt_key_cache|jwt_key_file|jwt_key_request|jwt_leeway|jwt_type|jwt_require|request|request_set|http|http_header|http_pass_client_cert|http_timeout)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(client_)(body_buffer_size|body_in_file_only|body_in_single_buffer|body_temp_path|body_timeout|header_buffer_size|header_timeout|max_body_size)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(keepalive_)(disable|requests|time|timeout)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(limit_)(rate|rate_after|conn|conn_dry_run|conn_log_level|conn_status|conn_zone|zone|req|req_dry_run|req_log_level|req_status|req_zone)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(lingering_)(close|time|timeout)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(log_)(not_found|subrequest|format)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(max_)(ranges|errors)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(msie_)(padding|refresh)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(open_)(file_cache|file_cache_errors|file_cache_min_uses|file_cache_valid|log_file_cache)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(send_)(lowat|timeout)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(server_)(name|name_in_redirect|names_hash_bucket_size|names_hash_max_size|tokens)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(tcp_)(nodelay|nopush)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(types_)(hash_bucket_size|hash_max_size)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(variables_)(hash_bucket_size|hash_max_size)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(add_)(before_body|after_body|header|trailer)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(status_)(zone|format)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(autoindex_)(exact_size|format|localtime)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(ancient_)(browser|browser_value)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(modern_)(browser|browser_value)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(charset_)(map|types)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(dav_)(access|methods)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(fastcgi_)(bind|buffer_size|buffering|buffers|busy_buffers_size|cache|cache_background_update|cache_bypass|cache_key|cache_lock|cache_lock_age|cache_lock_timeout|cache_max_range_offset|cache_methods|cache_min_uses|cache_path|cache_purge|cache_revalidate|cache_use_stale|cache_valid|catch_stderr|connect_timeout|force_ranges|hide_header|ignore_client_abort|ignore_headers|index|intercept_errors|keep_conn|limit_rate|max_temp_file_size|next_upstream|next_upstream_timeout|next_upstream_tries|no_cache|param|pass|pass_header|pass_request_body|pass_request_headers|read_timeout|request_buffering|send_lowat|send_timeout|socket_keepalive|split_path_info|store|store_access|temp_file_write_size|temp_path)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(geoip_)(country|city|org|proxy|proxy_recursive)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(grpc_)(bind|buffer_size|connect_timeout|hide_header|ignore_headers|intercept_errors|next_upstream|next_upstream_timeout|next_upstream_tries|pass|pass_header|read_timeout|send_timeout|set_header|socket_keepalive|ssl_certificate|ssl_certificate_key|ssl_ciphers|ssl_conf_command|ssl_crl|ssl_name|ssl_password_file|ssl_protocols|ssl_server_name|ssl_session_reuse|ssl_trusted_certificate|ssl_verify|ssl_verify_depth)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(gzip_)(buffers|comp_level|disable|http_version|min_length|proxied|types|vary|static)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(hls_)(buffers|forward_args|fragment|mp4_buffer_size|mp4_max_buffer_size)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(image_)(filter|filter_buffer|filter_interlace|filter_jpeg_quality|filter_sharpen|filter_transparency|filter_webp_quality)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(map_)(hash_bucket_size|hash_max_size)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(memcached_)(bind|buffer_size|connect_timeout|gzip_flag|next_upstream|next_upstream_timeout|next_upstream_tries|pass|read_timeout|send_timeout|socket_keepalive)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(mp4_)(buffer_size|max_buffer_size|limit_rate|limit_rate_after|start_key_frame)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(perl_)(modules|require|set)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(proxy_)(bind|buffer_size|buffering|buffers|busy_buffers_size|cache|cache_background_update|cache_bypass|cache_convert_head|cache_key|cache_lock|cache_lock_age|cache_lock_timeout|cache_max_range_offset|cache_methods|cache_min_uses|cache_path|cache_purge|cache_revalidate|cache_use_stale|cache_valid|connect_timeout|cookie_domain|cookie_flags|cookie_path|force_ranges|headers_hash_bucket_size|headers_hash_max_size|hide_header|http_version|ignore_client_abort|ignore_headers|intercept_errors|limit_rate|max_temp_file_size|method|next_upstream|next_upstream_timeout|next_upstream_tries|no_cache|pass|pass_header|pass_request_body|pass_request_headers|read_timeout|redirect|request_buffering|send_lowat|send_timeout|set_body|set_header|socket_keepalive|ssl_certificate|ssl_certificate_key|ssl_ciphers|ssl_conf_command|ssl_crl|ssl_name|ssl_password_file|ssl_protocols|ssl_server_name|ssl_session_reuse|ssl_trusted_certificate|ssl_verify|ssl_verify_depth|store|store_access|temp_file_write_size|temp_path|buffer|pass_error_message|protocol|smtp_auth|timeout|protocol_timeout|download_rate|half_close|requests|responses|session_drop|ssl|upload_rate)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(real_)(ip_header|ip_recursive)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(referer_)(hash_bucket_size|hash_max_size)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(scgi_)(bind|buffer_size|buffering|buffers|busy_buffers_size|cache|cache_background_update|cache_bypass|cache_key|cache_lock|cache_lock_age|cache_lock_timeout|cache_max_range_offset|cache_methods|cache_min_uses|cache_path|cache_purge|cache_revalidate|cache_use_stale|cache_valid|connect_timeout|force_ranges|hide_header|ignore_client_abort|ignore_headers|intercept_errors|limit_rate|max_temp_file_size|next_upstream|next_upstream_timeout|next_upstream_tries|no_cache|param|pass|pass_header|pass_request_body|pass_request_headers|read_timeout|request_buffering|send_timeout|socket_keepalive|store|store_access|temp_file_write_size|temp_path)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(secure_)(link|link_md5|link_secret)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(session_)(log|log_format|log_zone)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(ssi_)(last_modified|min_file_chunk|silent_errors|types|value_length)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(sub_)(filter|filter_last_modified|filter_once|filter_types)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(health_)(check|check_timeout)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(userid_)(domain|expires|flags|mark|name|p3p|path|service)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(uwsgi_)(bind|buffer_size|buffering|buffers|busy_buffers_size|cache|cache_background_update|cache_bypass|cache_key|cache_lock|cache_lock_age|cache_lock_timeout|cache_max_range_offset|cache_methods|cache_min_uses|cache_path|cache_purge|cache_revalidate|cache_use_stale|cache_valid|connect_timeout|force_ranges|hide_header|ignore_client_abort|ignore_headers|intercept_errors|limit_rate|max_temp_file_size|modifier1|modifier2|next_upstream|next_upstream_timeout|next_upstream_tries|no_cache|param|pass|pass_header|pass_request_body|pass_request_headers|read_timeout|request_buffering|send_timeout|socket_keepalive|ssl_certificate|ssl_certificate_key|ssl_ciphers|ssl_conf_command|ssl_crl|ssl_name|ssl_password_file|ssl_protocols|ssl_server_name|ssl_session_reuse|ssl_trusted_certificate|ssl_verify|ssl_verify_depth|store|store_access|temp_file_write_size|temp_path)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(http2_)(body_preread_size|chunk_size|idle_timeout|max_concurrent_pushes|max_concurrent_streams|max_field_size|max_header_size|max_requests|push|push_preload|recv_buffer_size|recv_timeout)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(http3_)(hq|max_concurrent_streams|stream_buffer_size)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(quic_)(active_connection_id_limit|bpf|gso|host_key|retry)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(xslt_)(last_modified|param|string_param|stylesheet|types)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(imap_)(auth|capabilities|client_buffer)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(pop3_)(auth|capabilities)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(smtp_)(auth|capabilities|client_buffer|greeting_delay)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(preread_)(buffer_size|timeout)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(mqtt_)(preread|buffers|rewrite_buffer_size|set_connect)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(zone_)(sync_buffers|sync_connect_retry_interval|sync_connect_timeout|sync_interval|sync_recv_buffer_size|sync_server|sync_ssl|sync_ssl_certificate|sync_ssl_certificate_key|sync_ssl_ciphers|sync_ssl_conf_command|sync_ssl_crl|sync_ssl_name|sync_ssl_password_file|sync_ssl_protocols|sync_ssl_server_name|sync_ssl_trusted_certificate|sync_ssl_verify|sync_ssl_verify_depth|sync_timeout)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(otel_)(exporter|service_name|trace|trace_context|span_name|span_attr)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(js_)(body_filter|content|fetch_buffer_size|fetch_ciphers|fetch_max_response_buffer_size|fetch_protocols|fetch_timeout|fetch_trusted_certificate|fetch_verify|fetch_verify_depth|header_filter|import|include|path|periodic|preload_object|set|shared_dict_zone|var|access|filter|preread)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" }, 4: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: `(["'\\s]|^)(daemon|env|include|pid|use|user|aio|alias|directio|etag|listen|resolver|root|satisfy|sendfile|allow|deny|api|autoindex|charset|geo|gunzip|gzip|expires|index|keyval|mirror|perl|set|slice|ssi|ssl|zone|state|hash|keepalive|queue|random|sticky|match|userid|http2|http3|protocol|timeout|xclient|starttls|mqtt|load_module|lock_file|master_process|multi_accept|pcre_jit|thread_pool|timer_resolution|working_directory|absolute_redirect|aio_write|chunked_transfer_encoding|connection_pool_size|default_type|directio_alignment|disable_symlinks|if_modified_since|ignore_invalid_headers|large_client_header_buffers|merge_slashes|output_buffers|port_in_redirect|postpone_output|read_ahead|recursive_error_pages|request_pool_size|reset_timedout_connection|resolver_timeout|sendfile_max_chunk|subrequest_output_buffer_size|try_files|underscores_in_headers|addition_types|override_charset|source_charset|create_full_put_path|min_delete_depth|f4f_buffer_size|gunzip_buffers|internal_redirect|keyval_zone|access_log|mirror_request_body|random_index|set_real_ip_from|valid_referers|rewrite_log|uninitialized_variable_warn|split_clients|least_time|sticky_cookie_insert|xml_entities|google_perftools_profiles)(["'\\s]|$)`, beginCaptures: { 1: { name: "keyword.directive.nginx" }, 2: { name: "keyword.directive.nginx" }, 3: { name: "keyword.directive.nginx" } }, end: ";", endCaptures: { 0: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: "\\b([a-zA-Z0-9\\_]+)\\s+", beginCaptures: { 1: { name: "keyword.directive.unknown.nginx" } }, end: "(;|$)", endCaptures: { 1: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }, { begin: "\\b([a-z]+\\/[A-Za-z0-9\\-\\.\\+]+)\\b", beginCaptures: { 1: { name: "constant.other.mediatype.nginx" } }, end: "(;)", endCaptures: { 1: { name: "punctuation.terminator.nginx" } }, patterns: [{ include: "#values" }] }], repository: { if_condition: { patterns: [{ include: "#variables" }, { match: "\\!?\\~\\*?\\s", name: "keyword.operator.nginx" }, { match: "\\!?\\-[fdex]\\s", name: "keyword.operator.nginx" }, { match: "\\!?=[^=]", name: "keyword.operator.nginx" }, { include: "#regexp_and_string" }] }, regexp_and_string: { patterns: [{ match: "\\^.*?\\$", name: "string.regexp.nginx" }, { begin: '"', end: '"', name: "string.quoted.double.nginx", patterns: [{ match: `\\\\["'nt\\\\]`, name: "constant.character.escape.nginx" }, { include: "#variables" }] }, { begin: "'", end: "'", name: "string.quoted.single.nginx", patterns: [{ match: `\\\\["'nt\\\\]`, name: "constant.character.escape.nginx" }, { include: "#variables" }] }] }, server_parameters: { patterns: [{ captures: { 1: { name: "variable.parameter.nginx" }, 2: { name: "keyword.operator.nginx" }, 3: { name: "constant.numeric.nginx" } }, match: "(?:^|\\s)(weight|max_conn|max_fails|fail_timeout|slow_start)(=)(\\d[\\d\\.]*[bBkKmMgGtTsShHdD]?)(?:\\s|;|$)" }, { include: "#values" }] }, values: { patterns: [{ include: "#variables" }, { match: "\\#.*", name: "comment.line.number-sign" }, { captures: { 1: { name: "constant.numeric.nginx" } }, match: "(?<=\\G|\\s)(=?[0-9][0-9\\.]*[bBkKmMgGtTsShHdD]?)(?=[\\t ;])" }, { match: "(?<=\\G|\\s)(on|off|true|false)(?=[\\t ;])", name: "constant.language.nginx" }, { match: "(?<=\\G|\\s)(kqueue|rtsig|epoll|\\/dev\\/poll|select|poll|eventport|max|all|default_server|default|main|crit|error|debug|warn|notice|last)(?=[\\t ;])", name: "constant.language.nginx" }, { match: "\\\\.*\\ |\\~\\*|\\~|\\!\\~\\*|\\!\\~", name: "keyword.operator.nginx" }, { include: "#regexp_and_string" }] }, variables: { patterns: [{ captures: { 1: { name: "punctuation.definition.variable.nginx" }, 2: { name: "variable.other.nginx" } }, match: "(\\$)([A-Za-z0-9\\_]+)\\b" }, { captures: { 1: { name: "punctuation.definition.variable.nginx" }, 2: { name: "variable.other.nginx" }, 3: { name: "punctuation.definition.variable.nginx" } }, match: "(\\$\\{)([A-Za-z0-9\\_]+)(\\})" }] } }, scopeName: "source.nginx", embeddedLangs: ["lua"] });
var hn = [
  ...g,
  fn
];
const yn = Object.freeze({ displayName: "Nix", fileTypes: ["nix"], name: "nix", patterns: [{ include: "#expression" }], repository: { "attribute-bind": { patterns: [{ include: "#attribute-name" }, { include: "#attribute-bind-from-equals" }] }, "attribute-bind-from-equals": { begin: "\\=", beginCaptures: { 0: { name: "keyword.operator.bind.nix" } }, end: "\\;", endCaptures: { 0: { name: "punctuation.terminator.bind.nix" } }, patterns: [{ include: "#expression" }] }, "attribute-inherit": { begin: "\\binherit\\b", beginCaptures: { 0: { name: "keyword.other.inherit.nix" } }, end: "\\;", endCaptures: { 0: { name: "punctuation.terminator.inherit.nix" } }, patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.section.function.arguments.nix" } }, end: "(?=\\;)", patterns: [{ begin: "\\)", beginCaptures: { 0: { name: "punctuation.section.function.arguments.nix" } }, end: "(?=\\;)", patterns: [{ include: "#bad-reserved" }, { include: "#attribute-name-single" }, { include: "#others" }] }, { include: "#expression" }] }, { begin: "(?=[a-zA-Z\\_])", end: "(?=\\;)", patterns: [{ include: "#bad-reserved" }, { include: "#attribute-name-single" }, { include: "#others" }] }, { include: "#others" }] }, "attribute-name": { patterns: [{ match: "\\b[a-zA-Z\\_][a-zA-Z0-9\\_\\'\\-]*", name: "entity.other.attribute-name.multipart.nix" }, { match: "\\." }, { include: "#string-quoted" }, { include: "#interpolation" }] }, "attribute-name-single": { match: "\\b[a-zA-Z\\_][a-zA-Z0-9\\_\\'\\-]*", name: "entity.other.attribute-name.single.nix" }, "attrset-contents": { patterns: [{ include: "#attribute-inherit" }, { include: "#bad-reserved" }, { include: "#attribute-bind" }, { include: "#others" }] }, "attrset-definition": { begin: "(?=\\{)", end: "(?=([\\])};,]|\\b(else|then)\\b))", patterns: [{ begin: "(\\{)", beginCaptures: { 0: { name: "punctuation.definition.attrset.nix" } }, end: "(\\})", endCaptures: { 0: { name: "punctuation.definition.attrset.nix" } }, patterns: [{ include: "#attrset-contents" }] }, { begin: "(?<=\\})", end: "(?=([\\])};,]|\\b(else|then)\\b))", patterns: [{ include: "#expression-cont" }] }] }, "attrset-definition-brace-opened": { patterns: [{ begin: "(?<=\\})", end: "(?=([\\])};,]|\\b(else|then)\\b))", patterns: [{ include: "#expression-cont" }] }, { begin: "(?=.?)", end: "\\}", endCaptures: { 0: { name: "punctuation.definition.attrset.nix" } }, patterns: [{ include: "#attrset-contents" }] }] }, "attrset-for-sure": { patterns: [{ begin: "(?=\\brec\\b)", end: "(?=([\\])};,]|\\b(else|then)\\b))", patterns: [{ begin: "\\brec\\b", beginCaptures: { 0: { name: "keyword.other.nix" } }, end: "(?=\\{)", patterns: [{ include: "#others" }] }, { include: "#attrset-definition" }, { include: "#others" }] }, { begin: "(?=\\{\\s*(\\}|[^,?]*(=|;)))", end: "(?=([\\])};,]|\\b(else|then)\\b))", patterns: [{ include: "#attrset-definition" }, { include: "#others" }] }] }, "attrset-or-function": { begin: "\\{", beginCaptures: { 0: { name: "punctuation.definition.attrset-or-function.nix" } }, end: "(?=([\\])};]|\\b(else|then)\\b))", patterns: [{ begin: `(?=(\\s*\\}|\\"|\\binherit\\b|\\$\\{|\\b[a-zA-Z\\_][a-zA-Z0-9\\_\\'\\-]*(\\s*\\.|\\s*=[^=])))`, end: "(?=([\\])};,]|\\b(else|then)\\b))", patterns: [{ include: "#attrset-definition-brace-opened" }] }, { begin: "(?=(\\.\\.\\.|\\b[a-zA-Z\\_][a-zA-Z0-9\\_\\'\\-]*\\s*[,?]))", end: "(?=([\\])};,]|\\b(else|then)\\b))", patterns: [{ include: "#function-definition-brace-opened" }] }, { include: "#bad-reserved" }, { begin: "\\b[a-zA-Z\\_][a-zA-Z0-9\\_\\'\\-]*", beginCaptures: { 0: { name: "variable.parameter.function.maybe.nix" } }, end: "(?=([\\])};]|\\b(else|then)\\b))", patterns: [{ begin: "(?=\\.)", end: "(?=([\\])};,]|\\b(else|then)\\b))", patterns: [{ include: "#attrset-definition-brace-opened" }] }, { begin: "\\s*(\\,)", beginCaptures: { 1: { name: "keyword.operator.nix" } }, end: "(?=([\\])};,]|\\b(else|then)\\b))", patterns: [{ include: "#function-definition-brace-opened" }] }, { begin: "(?=\\=)", end: "(?=([\\])};,]|\\b(else|then)\\b))", patterns: [{ include: "#attribute-bind-from-equals" }, { include: "#attrset-definition-brace-opened" }] }, { begin: "(?=\\?)", end: "(?=([\\])};,]|\\b(else|then)\\b))", patterns: [{ include: "#function-parameter-default" }, { begin: "\\,", beginCaptures: { 0: { name: "keyword.operator.nix" } }, end: "(?=([\\])};,]|\\b(else|then)\\b))", patterns: [{ include: "#function-definition-brace-opened" }] }] }, { include: "#others" }] }, { include: "#others" }] }, "bad-reserved": { match: "(?<![\\w'-])(if|then|else|assert|with|let|in|rec|inherit)(?![\\w'-])", name: "invalid.illegal.reserved.nix" }, comment: { patterns: [{ begin: "/\\*([^*]|\\*[^\\/])*", end: "\\*\\/", name: "comment.block.nix", patterns: [{ include: "#comment-remark" }] }, { begin: "\\#", end: "$", name: "comment.line.number-sign.nix", patterns: [{ include: "#comment-remark" }] }] }, "comment-remark": { captures: { 1: { name: "markup.bold.comment.nix" } }, match: "(TODO|FIXME|BUG|\\!\\!\\!):?" }, constants: { patterns: [{ begin: "\\b(builtins|true|false|null)\\b", beginCaptures: { 0: { name: "constant.language.nix" } }, end: "(?=([\\])};,]|\\b(else|then)\\b))", patterns: [{ include: "#expression-cont" }] }, { begin: "\\b(scopedImport|import|isNull|abort|throw|baseNameOf|dirOf|removeAttrs|map|toString|derivationStrict|derivation)\\b", beginCaptures: { 0: { name: "support.function.nix" } }, end: "(?=([\\])};,]|\\b(else|then)\\b))", patterns: [{ include: "#expression-cont" }] }, { begin: "\\b[0-9]+\\b", beginCaptures: { 0: { name: "constant.numeric.nix" } }, end: "(?=([\\])};,]|\\b(else|then)\\b))", patterns: [{ include: "#expression-cont" }] }] }, expression: { patterns: [{ include: "#parens-and-cont" }, { include: "#list-and-cont" }, { include: "#string" }, { include: "#interpolation" }, { include: "#with-assert" }, { include: "#function-for-sure" }, { include: "#attrset-for-sure" }, { include: "#attrset-or-function" }, { include: "#let" }, { include: "#if" }, { include: "#operator-unary" }, { include: "#constants" }, { include: "#bad-reserved" }, { include: "#parameter-name-and-cont" }, { include: "#others" }] }, "expression-cont": { begin: "(?=.?)", end: "(?=([\\])};,]|\\b(else|then)\\b))", patterns: [{ include: "#parens" }, { include: "#list" }, { include: "#string" }, { include: "#interpolation" }, { include: "#function-for-sure" }, { include: "#attrset-for-sure" }, { include: "#attrset-or-function" }, { match: "(\\bor\\b|\\.|==|!=|!|\\<\\=|\\<|\\>\\=|\\>|&&|\\|\\||-\\>|//|\\?|\\+\\+|-|\\*|/(?=([^*]|$))|\\+)", name: "keyword.operator.nix" }, { include: "#constants" }, { include: "#bad-reserved" }, { include: "#parameter-name" }, { include: "#others" }] }, "function-body": { begin: "(@\\s*([a-zA-Z\\_][a-zA-Z0-9\\_\\'\\-]*)\\s*)?(\\:)", end: "(?=([\\])};,]|\\b(else|then)\\b))", patterns: [{ include: "#expression" }] }, "function-body-from-colon": { begin: "(\\:)", beginCaptures: { 0: { name: "punctuation.definition.function.nix" } }, end: "(?=([\\])};,]|\\b(else|then)\\b))", patterns: [{ include: "#expression" }] }, "function-contents": { patterns: [{ include: "#bad-reserved" }, { include: "#function-parameter" }, { include: "#others" }] }, "function-definition": { begin: "(?=.?)", end: "(?=([\\])};,]|\\b(else|then)\\b))", patterns: [{ include: "#function-body-from-colon" }, { begin: "(?=.?)", end: "(?=\\:)", patterns: [{ begin: "(\\b[a-zA-Z\\_][a-zA-Z0-9\\_\\'\\-]*)", beginCaptures: { 0: { name: "variable.parameter.function.4.nix" } }, end: "(?=\\:)", patterns: [{ begin: "\\@", end: "(?=\\:)", patterns: [{ include: "#function-header-until-colon-no-arg" }, { include: "#others" }] }, { include: "#others" }] }, { begin: "(?=\\{)", end: "(?=\\:)", patterns: [{ include: "#function-header-until-colon-with-arg" }] }] }, { include: "#others" }] }, "function-definition-brace-opened": { begin: "(?=.?)", end: "(?=([\\])};,]|\\b(else|then)\\b))", patterns: [{ include: "#function-body-from-colon" }, { begin: "(?=.?)", end: "(?=\\:)", patterns: [{ include: "#function-header-close-brace-with-arg" }, { begin: "(?=.?)", end: "(?=\\})", patterns: [{ include: "#function-contents" }] }] }, { include: "#others" }] }, "function-for-sure": { patterns: [{ begin: `(?=(\\b[a-zA-Z\\_][a-zA-Z0-9\\_\\'\\-]*\\s*[:@]|\\{[^}]*\\}\\s*:|\\{[^#}"'/=]*[,\\?]))`, end: "(?=([\\])};,]|\\b(else|then)\\b))", patterns: [{ include: "#function-definition" }] }] }, "function-header-close-brace-no-arg": { begin: "\\}", beginCaptures: { 0: { name: "punctuation.definition.entity.function.nix" } }, end: "(?=\\:)", patterns: [{ include: "#others" }] }, "function-header-close-brace-with-arg": { begin: "\\}", beginCaptures: { 0: { name: "punctuation.definition.entity.function.nix" } }, end: "(?=\\:)", patterns: [{ include: "#function-header-terminal-arg" }, { include: "#others" }] }, "function-header-open-brace": { begin: "\\{", beginCaptures: { 0: { name: "punctuation.definition.entity.function.2.nix" } }, end: "(?=\\})", patterns: [{ include: "#function-contents" }] }, "function-header-terminal-arg": { begin: "(?=@)", end: "(?=\\:)", patterns: [{ begin: "\\@", end: "(?=\\:)", patterns: [{ begin: "(\\b[a-zA-Z\\_][a-zA-Z0-9\\_\\'\\-]*)", end: "(?=\\:)", name: "variable.parameter.function.3.nix" }, { include: "#others" }] }, { include: "#others" }] }, "function-header-until-colon-no-arg": { begin: "(?=\\{)", end: "(?=\\:)", patterns: [{ include: "#function-header-open-brace" }, { include: "#function-header-close-brace-no-arg" }] }, "function-header-until-colon-with-arg": { begin: "(?=\\{)", end: "(?=\\:)", patterns: [{ include: "#function-header-open-brace" }, { include: "#function-header-close-brace-with-arg" }] }, "function-parameter": { patterns: [{ begin: "(\\.\\.\\.)", end: "(,|(?=\\}))", name: "keyword.operator.nix", patterns: [{ include: "#others" }] }, { begin: "\\b[a-zA-Z\\_][a-zA-Z0-9\\_\\'\\-]*", beginCaptures: { 0: { name: "variable.parameter.function.1.nix" } }, end: "(,|(?=\\}))", endCaptures: { 0: { name: "keyword.operator.nix" } }, patterns: [{ include: "#whitespace" }, { include: "#comment" }, { include: "#function-parameter-default" }, { include: "#expression" }] }, { include: "#others" }] }, "function-parameter-default": { begin: "\\?", beginCaptures: { 0: { name: "keyword.operator.nix" } }, end: "(?=[,}])", patterns: [{ include: "#expression" }] }, if: { begin: "(?=\\bif\\b)", end: "(?=([\\])};,]|\\b(else|then)\\b))", patterns: [{ begin: "\\bif\\b", beginCaptures: { 0: { name: "keyword.other.nix" } }, end: "\\bth(?=en\\b)", endCaptures: { 0: { name: "keyword.other.nix" } }, patterns: [{ include: "#expression" }] }, { begin: "(?<=th)en\\b", beginCaptures: { 0: { name: "keyword.other.nix" } }, end: "\\bel(?=se\\b)", endCaptures: { 0: { name: "keyword.other.nix" } }, patterns: [{ include: "#expression" }] }, { begin: "(?<=el)se\\b", beginCaptures: { 0: { name: "keyword.other.nix" } }, end: "(?=([\\])};,]|\\b(else|then)\\b))", endCaptures: { 0: { name: "keyword.other.nix" } }, patterns: [{ include: "#expression" }] }] }, illegal: { match: ".", name: "invalid.illegal" }, interpolation: { begin: "\\$\\{", beginCaptures: { 0: { name: "punctuation.section.embedded.begin.nix" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.section.embedded.end.nix" } }, name: "meta.embedded", patterns: [{ include: "#expression" }] }, let: { begin: "(?=\\blet\\b)", end: "(?=([\\])};,]|\\b(else|then)\\b))", patterns: [{ begin: "\\blet\\b", beginCaptures: { 0: { name: "keyword.other.nix" } }, end: "(?=([\\])};,]|\\b(in|else|then)\\b))", patterns: [{ begin: "(?=\\{)", end: "(?=([\\])};,]|\\b(else|then)\\b))", patterns: [{ begin: "\\{", end: "\\}", patterns: [{ include: "#attrset-contents" }] }, { begin: "(^|(?<=\\}))", end: "(?=([\\])};,]|\\b(else|then)\\b))", patterns: [{ include: "#expression-cont" }] }, { include: "#others" }] }, { include: "#attrset-contents" }, { include: "#others" }] }, { begin: "\\bin\\b", beginCaptures: { 0: { name: "keyword.other.nix" } }, end: "(?=([\\])};,]|\\b(else|then)\\b))", patterns: [{ include: "#expression" }] }] }, list: { begin: "\\[", beginCaptures: { 0: { name: "punctuation.definition.list.nix" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.list.nix" } }, patterns: [{ include: "#expression" }] }, "list-and-cont": { begin: "(?=\\[)", end: "(?=([\\])};,]|\\b(else|then)\\b))", patterns: [{ include: "#list" }, { include: "#expression-cont" }] }, "operator-unary": { match: "(!|-)", name: "keyword.operator.unary.nix" }, others: { patterns: [{ include: "#whitespace" }, { include: "#comment" }, { include: "#illegal" }] }, "parameter-name": { captures: { 0: { name: "variable.parameter.name.nix" } }, match: "\\b[a-zA-Z\\_][a-zA-Z0-9\\_\\'\\-]*" }, "parameter-name-and-cont": { begin: "\\b[a-zA-Z\\_][a-zA-Z0-9\\_\\'\\-]*", beginCaptures: { 0: { name: "variable.parameter.name.nix" } }, end: "(?=([\\])};,]|\\b(else|then)\\b))", patterns: [{ include: "#expression-cont" }] }, parens: { begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.expression.nix" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.expression.nix" } }, patterns: [{ include: "#expression" }] }, "parens-and-cont": { begin: "(?=\\()", end: "(?=([\\])};,]|\\b(else|then)\\b))", patterns: [{ include: "#parens" }, { include: "#expression-cont" }] }, string: { patterns: [{ begin: "(?=\\'\\')", end: "(?=([\\])};,]|\\b(else|then)\\b))", patterns: [{ begin: "\\'\\'", beginCaptures: { 0: { name: "punctuation.definition.string.other.start.nix" } }, end: "\\'\\'(?!\\$|\\'|\\\\.)", endCaptures: { 0: { name: "punctuation.definition.string.other.end.nix" } }, name: "string.quoted.other.nix", patterns: [{ match: "\\'\\'(\\$|\\'|\\\\.)", name: "constant.character.escape.nix" }, { include: "#interpolation" }] }, { include: "#expression-cont" }] }, { begin: '(?=\\")', end: "(?=([\\])};,]|\\b(else|then)\\b))", patterns: [{ include: "#string-quoted" }, { include: "#expression-cont" }] }, { begin: "(~?[a-zA-Z0-9\\.\\_\\-\\+]*(\\/[a-zA-Z0-9\\.\\_\\-\\+]+)+)", beginCaptures: { 0: { name: "string.unquoted.path.nix" } }, end: "(?=([\\])};,]|\\b(else|then)\\b))", patterns: [{ include: "#expression-cont" }] }, { begin: "(\\<[a-zA-Z0-9\\.\\_\\-\\+]+(\\/[a-zA-Z0-9\\.\\_\\-\\+]+)*\\>)", beginCaptures: { 0: { name: "string.unquoted.spath.nix" } }, end: "(?=([\\])};,]|\\b(else|then)\\b))", patterns: [{ include: "#expression-cont" }] }, { begin: "([a-zA-Z][a-zA-Z0-9\\+\\-\\.]*\\:[a-zA-Z0-9\\%\\/\\?\\:\\@\\&\\=\\+\\$\\,\\-\\_\\.\\!\\~\\*\\']+)", beginCaptures: { 0: { name: "string.unquoted.url.nix" } }, end: "(?=([\\])};,]|\\b(else|then)\\b))", patterns: [{ include: "#expression-cont" }] }] }, "string-quoted": { begin: '\\"', beginCaptures: { 0: { name: "punctuation.definition.string.double.start.nix" } }, end: '\\"', endCaptures: { 0: { name: "punctuation.definition.string.double.end.nix" } }, name: "string.quoted.double.nix", patterns: [{ match: "\\\\.", name: "constant.character.escape.nix" }, { include: "#interpolation" }] }, whitespace: { match: "\\s+" }, "with-assert": { begin: "(?<![\\w'-])(with|assert)(?![\\w'-])", beginCaptures: { 0: { name: "keyword.other.nix" } }, end: "\\;", patterns: [{ include: "#expression" }] } }, scopeName: "source.nix" });
var xn = [
  yn
];
const kn = Object.freeze({ displayName: "OCaml", fileTypes: [".ml", ".mli"], name: "ocaml", patterns: [{ include: "#comment" }, { include: "#pragma" }, { include: "#decl" }], repository: { attribute: { begin: "(\\[)[[:space:]]*((?<![#\\-:!?.@*/&%^+<=>|~$])@{1,3}(?![#\\-:!?.@*/&%^+<=>|~$]))", beginCaptures: { 1: { name: "constant.language constant.numeric entity.other.attribute-name.id.css strong" }, 2: { name: "variable.other.class.js message.error variable.interpolation string.regexp" } }, end: "\\]", endCaptures: { 0: { name: "constant.language constant.numeric entity.other.attribute-name.id.css strong" } }, patterns: [{ include: "#attributePayload" }] }, attributeIdentifier: { captures: { 1: { name: "variable.other.class.js message.error variable.interpolation string.regexp strong" }, 2: { name: "punctuation.definition.tag" } }, match: `((?<![#\\-:!?.@*/&%^+<=>|~$])%(?![#\\-:!?.@*/&%^+<=>|~$]))((?:(?!\\b(?:and|'|as|asr|assert|\\*|begin|class|:|,|@|constraint|do|done|downto|else|end|=|exception|external|false|for|\\.|fun|function|functor|>|-|if|in|include|inherit|initializer|land|lazy|\\{|\\(|\\[|<|let|lor|lsl|lsr|lxor|match|method|mod|module|mutable|new|nonrec|#|object|of|open|or|%|\\+|private|\\?|"|rec|\\\\|\\}|\\)|\\]|;|sig|/|struct|then|~|to|true|try|type|val|\\||virtual|when|while|with)\\b(?:[^']|$))\\b(?=[[:lower:]_])[[:alpha:]_][[:word:]']*))` }, attributePayload: { patterns: [{ begin: "(?:(?<=(?:[^#\\-:!?.@*/&%^+<=>|~$]%|^%))(?![#\\-:!?.@*/&%^+<=>|~$]))", end: "((?<![#\\-:!?.@*/&%^+<=>|~$])[:\\?](?![#\\-:!?.@*/&%^+<=>|~$]))|(?<=[[:space:]])|(?=\\])", endCaptures: { 1: { name: "variable.other.class.js message.error variable.interpolation string.regexp" } }, patterns: [{ include: "#pathModuleExtended" }, { include: "#pathRecord" }] }, { begin: "(?:(?<=(?:[^#\\-:!?.@*/&%^+<=>|~$]:|^:))(?![#\\-:!?.@*/&%^+<=>|~$]))", end: "(?=\\])", patterns: [{ include: "#signature" }, { include: "#type" }] }, { begin: "(?:(?<=(?:[^#\\-:!?.@*/&%^+<=>|~$]\\?|^\\?))(?![#\\-:!?.@*/&%^+<=>|~$]))", end: "(?=\\])", patterns: [{ begin: "(?:(?<=(?:[^#\\-:!?.@*/&%^+<=>|~$]\\?|^\\?))(?![#\\-:!?.@*/&%^+<=>|~$]))", end: "(?=\\])|\\bwhen\\b", endCaptures: { 1: {} }, patterns: [{ include: "#pattern" }] }, { begin: "(?:(?<=(?:[^[:word:]]when|^when))(?![[:word:]]))", end: "(?=\\])", patterns: [{ include: "#term" }] }] }, { include: "#term" }] }, bindClassTerm: { patterns: [{ begin: "(?:(?<=(?:[^[:word:]]and|^and|[^[:word:]]class|^class|[^[:word:]]type|^type))(?![[:word:]]))", end: "(?<![#\\-:!?.@*/&%^+<=>|~$])(:)|(=)(?![#\\-:!?.@*/&%^+<=>|~$])|(?=;;|\\}|\\)|\\]|\\b(?:end|and|class|exception|external|in|include|inherit|initializer|let|method|module|open|type|val)\\b)", endCaptures: { 1: { name: "variable.other.class.js message.error variable.interpolation string.regexp strong" }, 2: { name: "support.type strong" } }, patterns: [{ begin: "(?:(?<=(?:[^[:word:]]and|^and|[^[:word:]]class|^class|[^[:word:]]type|^type))(?![[:word:]]))", end: `(?=(?:(?!\\b(?:and|'|as|asr|assert|\\*|begin|class|:|,|@|constraint|do|done|downto|else|end|=|exception|external|false|for|\\.|fun|function|functor|>|-|if|in|include|inherit|initializer|land|lazy|\\{|\\(|\\[|<|let|lor|lsl|lsr|lxor|match|method|mod|module|mutable|new|nonrec|#|object|of|open|or|%|\\+|private|\\?|"|rec|\\\\|\\}|\\)|\\]|;|sig|/|struct|then|~|to|true|try|type|val|\\||virtual|when|while|with)\\b(?:[^']|$))\\b(?=[[:lower:]_])[[:alpha:]_][[:word:]']*)[[:space:]]*,|[^[:space:][:lower:]%])|(?:(?!\\b(?:and|'|as|asr|assert|\\*|begin|class|:|,|@|constraint|do|done|downto|else|end|=|exception|external|false|for|\\.|fun|function|functor|>|-|if|in|include|inherit|initializer|land|lazy|\\{|\\(|\\[|<|let|lor|lsl|lsr|lxor|match|method|mod|module|mutable|new|nonrec|#|object|of|open|or|%|\\+|private|\\?|"|rec|\\\\|\\}|\\)|\\]|;|sig|/|struct|then|~|to|true|try|type|val|\\||virtual|when|while|with)\\b(?:[^']|$))\\b(?=[[:lower:]_])[[:alpha:]_][[:word:]']*)|(?=\\btype\\b)`, endCaptures: { 0: { name: "entity.name.function strong emphasis" } }, patterns: [{ include: "#attributeIdentifier" }] }, { begin: "\\[", captures: { 0: { name: "punctuation.definition.tag" } }, end: "\\]", patterns: [{ include: "#type" }] }, { include: "#bindTermArgs" }] }, { begin: "(?:(?<=(?:[^#\\-:!?.@*/&%^+<=>|~$]:|^:))(?![#\\-:!?.@*/&%^+<=>|~$]))", end: "(?<![#\\-:!?.@*/&%^+<=>|~$])=(?![#\\-:!?.@*/&%^+<=>|~$])|(?=\\}|\\)|\\]|\\b(?:end|and|class|exception|external|in|include|inherit|initializer|let|method|module|open|val)\\b)", endCaptures: { 0: { name: "support.type strong" } }, patterns: [{ include: "#literalClassType" }] }, { begin: "(?:(?<=(?:[^#\\-:!?.@*/&%^+<=>|~$]=|^=))(?![#\\-:!?.@*/&%^+<=>|~$]))", end: "\\band\\b|(?=;;|\\}|\\)|\\]|\\b(?:end|and|class|exception|external|in|include|inherit|initializer|let|method|module|open|type|val)\\b)", endCaptures: { 0: { name: "variable.other.class.js message.error variable.interpolation string.regexp markup.underline" } }, patterns: [{ include: "#term" }] }] }, bindClassType: { patterns: [{ begin: "(?:(?<=(?:[^[:word:]]and|^and|[^[:word:]]class|^class|[^[:word:]]type|^type))(?![[:word:]]))", end: "(?<![#\\-:!?.@*/&%^+<=>|~$])(:)|(=)(?![#\\-:!?.@*/&%^+<=>|~$])|(?=;;|\\}|\\)|\\]|\\b(?:end|and|class|exception|external|in|include|inherit|initializer|let|method|module|open|type|val)\\b)", endCaptures: { 1: { name: "variable.other.class.js message.error variable.interpolation string.regexp strong" }, 2: { name: "support.type strong" } }, patterns: [{ begin: "(?:(?<=(?:[^[:word:]]and|^and|[^[:word:]]class|^class|[^[:word:]]type|^type))(?![[:word:]]))", end: `(?=(?:(?!\\b(?:and|'|as|asr|assert|\\*|begin|class|:|,|@|constraint|do|done|downto|else|end|=|exception|external|false|for|\\.|fun|function|functor|>|-|if|in|include|inherit|initializer|land|lazy|\\{|\\(|\\[|<|let|lor|lsl|lsr|lxor|match|method|mod|module|mutable|new|nonrec|#|object|of|open|or|%|\\+|private|\\?|"|rec|\\\\|\\}|\\)|\\]|;|sig|/|struct|then|~|to|true|try|type|val|\\||virtual|when|while|with)\\b(?:[^']|$))\\b(?=[[:lower:]_])[[:alpha:]_][[:word:]']*)[[:space:]]*,|[^[:space:][:lower:]%])|(?:(?!\\b(?:and|'|as|asr|assert|\\*|begin|class|:|,|@|constraint|do|done|downto|else|end|=|exception|external|false|for|\\.|fun|function|functor|>|-|if|in|include|inherit|initializer|land|lazy|\\{|\\(|\\[|<|let|lor|lsl|lsr|lxor|match|method|mod|module|mutable|new|nonrec|#|object|of|open|or|%|\\+|private|\\?|"|rec|\\\\|\\}|\\)|\\]|;|sig|/|struct|then|~|to|true|try|type|val|\\||virtual|when|while|with)\\b(?:[^']|$))\\b(?=[[:lower:]_])[[:alpha:]_][[:word:]']*)|(?=\\btype\\b)`, endCaptures: { 0: { name: "entity.name.function strong emphasis" } }, patterns: [{ include: "#attributeIdentifier" }] }, { begin: "\\[", captures: { 0: { name: "punctuation.definition.tag" } }, end: "\\]", patterns: [{ include: "#type" }] }, { include: "#bindTermArgs" }] }, { begin: "(?:(?<=(?:[^#\\-:!?.@*/&%^+<=>|~$]:|^:))(?![#\\-:!?.@*/&%^+<=>|~$]))", end: "(?<![#\\-:!?.@*/&%^+<=>|~$])=(?![#\\-:!?.@*/&%^+<=>|~$])|(?=\\}|\\)|\\]|\\b(?:end|and|class|exception|external|in|include|inherit|initializer|let|method|module|open|val)\\b)", endCaptures: { 0: { name: "support.type strong" } }, patterns: [{ include: "#literalClassType" }] }, { begin: "(?:(?<=(?:[^#\\-:!?.@*/&%^+<=>|~$]=|^=))(?![#\\-:!?.@*/&%^+<=>|~$]))", end: "\\band\\b|(?=;;|\\}|\\)|\\]|\\b(?:end|and|class|exception|external|in|include|inherit|initializer|let|method|module|open|type|val)\\b)", endCaptures: { 0: { name: "variable.other.class.js message.error variable.interpolation string.regexp markup.underline" } }, patterns: [{ include: "#literalClassType" }] }] }, bindConstructor: { patterns: [{ begin: "(?:(?<=(?:[^[:word:]]exception|^exception))(?![[:word:]]))|(?:(?<=(?:[^#\\-:!?.@*/&%^+<=>|~$]\\+=|^\\+=|[^#\\-:!?.@*/&%^+<=>|~$]=|^=|[^#\\-:!?.@*/&%^+<=>|~$]\\||^\\|))(?![#\\-:!?.@*/&%^+<=>|~$]))", end: "(:)|(\\bof\\b)|((?<![#\\-:!?.@*/&%^+<=>|~$])\\|(?![#\\-:!?.@*/&%^+<=>|~$]))|(?=;;|\\}|\\)|\\]|\\b(?:end|and|class|exception|external|in|include|inherit|initializer|let|method|module|open|type|val)\\b)", endCaptures: { 1: { name: "variable.other.class.js message.error variable.interpolation string.regexp strong" }, 2: { name: "punctuation.definition.tag" }, 3: { name: "support.type strong" } }, patterns: [{ include: "#attributeIdentifier" }, { match: "\\.\\.", name: "variable.other.class.js message.error variable.interpolation string.regexp" }, { match: "\\b(?:\\b(?=[[:upper:]])[[:alpha:]_][[:word:]']*)\\b(?![[:space:]]*(?:\\.|\\([^\\*]))", name: "constant.language constant.numeric entity.other.attribute-name.id.css strong" }, { include: "#type" }] }, { begin: "(?:(?<=(?:[^#\\-:!?.@*/&%^+<=>|~$]:|^:))(?![#\\-:!?.@*/&%^+<=>|~$]))|(?:(?<=(?:[^[:word:]]of|^of))(?![[:word:]]))", end: "(?<![#\\-:!?.@*/&%^+<=>|~$])\\|(?![#\\-:!?.@*/&%^+<=>|~$])|(?=;;|\\}|\\)|\\]|\\b(?:end|and|class|exception|external|in|include|inherit|initializer|let|method|module|open|type|val)\\b)", endCaptures: { 0: { name: "support.type strong" } }, patterns: [{ include: "#type" }] }] }, bindSignature: { patterns: [{ include: "#comment" }, { begin: "(?:(?<=(?:[^[:word:]]type|^type))(?![[:word:]]))", end: "(?<![#\\-:!?.@*/&%^+<=>|~$])=(?![#\\-:!?.@*/&%^+<=>|~$])", endCaptures: { 0: { name: "support.type strong" } }, patterns: [{ include: "#comment" }, { include: "#pathModuleExtended" }] }, { begin: "(?:(?<=(?:[^#\\-:!?.@*/&%^+<=>|~$]=|^=))(?![#\\-:!?.@*/&%^+<=>|~$]))", end: "\\band\\b|(?=;;|\\}|\\)|\\]|\\b(?:end|and|class|exception|external|in|include|inherit|initializer|let|method|module|open|type|val)\\b)", endCaptures: { 0: { name: "variable.other.class.js message.error variable.interpolation string.regexp markup.underline" } }, patterns: [{ include: "#signature" }] }] }, bindStructure: { patterns: [{ include: "#comment" }, { begin: "(?:(?<=(?:[^[:word:]]and|^and))(?![[:word:]]))|(?=[[:upper:]])", end: "(?<![#\\-:!?.@*/&%^+<=>|~$])(:(?!=))|(:?=)(?![#\\-:!?.@*/&%^+<=>|~$])|(?=\\}|\\)|\\]|\\b(?:end|and|class|exception|external|in|include|inherit|initializer|let|method|open|type|val)\\b)", endCaptures: { 1: { name: "variable.other.class.js message.error variable.interpolation string.regexp strong" }, 2: { name: "support.type strong" } }, patterns: [{ include: "#comment" }, { match: "\\bmodule\\b", name: "markup.inserted constant.language support.constant.property-value entity.name.filename" }, { match: "(?:\\b(?=[[:upper:]])[[:alpha:]_][[:word:]']*)", name: "entity.name.function strong emphasis" }, { begin: "\\((?!\\))", captures: { 0: { name: "punctuation.definition.tag" } }, end: "\\)", patterns: [{ include: "#comment" }, { begin: "(?<![#\\-:!?.@*/&%^+<=>|~$]):(?![#\\-:!?.@*/&%^+<=>|~$])", beginCaptures: { 0: { name: "variable.other.class.js message.error variable.interpolation string.regexp strong" } }, end: "(?=\\))", patterns: [{ include: "#signature" }] }, { include: "#variableModule" }] }, { include: "#literalUnit" }] }, { begin: "(?:(?<=(?:[^#\\-:!?.@*/&%^+<=>|~$]:|^:))(?![#\\-:!?.@*/&%^+<=>|~$]))", end: "\\b(and)\\b|((?<![#\\-:!?.@*/&%^+<=>|~$])=(?![#\\-:!?.@*/&%^+<=>|~$]))|(?=;;|\\}|\\)|\\]|\\b(?:end|and|class|exception|external|in|include|inherit|initializer|let|method|module|open|type|val)\\b)", endCaptures: { 1: { name: "variable.other.class.js message.error variable.interpolation string.regexp markup.underline" }, 2: { name: "support.type strong" } }, patterns: [{ include: "#signature" }] }, { begin: "(?:(?<=(?:[^#\\-:!?.@*/&%^+<=>|~$]:=|^:=|[^#\\-:!?.@*/&%^+<=>|~$]=|^=))(?![#\\-:!?.@*/&%^+<=>|~$]))", end: "\\b(?:(and)|(with))\\b|(?=;;|\\}|\\)|\\]|\\b(?:end|and|class|exception|external|in|include|inherit|initializer|let|method|module|open|type|val)\\b)", endCaptures: { 1: { name: "variable.other.class.js message.error variable.interpolation string.regexp markup.underline" }, 2: { name: "variable.other.class.js message.error variable.interpolation string.regexp markup.underline" } }, patterns: [{ include: "#structure" }] }] }, bindTerm: { patterns: [{ begin: "(?:(?<=(?:[^#\\-:!?.@*/&%^+<=>|~$]!|^!))(?![#\\-:!?.@*/&%^+<=>|~$]))|(?:(?<=(?:[^[:word:]]and|^and|[^[:word:]]external|^external|[^[:word:]]let|^let|[^[:word:]]method|^method|[^[:word:]]val|^val))(?![[:word:]]))", end: "(\\bmodule\\b)|(\\bopen\\b)|(?<![#\\-:!?.@*/&%^+<=>|~$])(:)|((?<![#\\-:!?.@*/&%^+<=>|~$])=(?![#\\-:!?.@*/&%^+<=>|~$]))(?![#\\-:!?.@*/&%^+<=>|~$])|(?=;;|\\}|\\)|\\]|\\b(?:end|and|class|exception|external|in|include|inherit|initializer|let|method|module|open|type|val)\\b)", endCaptures: { 1: { name: "markup.inserted constant.language support.constant.property-value entity.name.filename" }, 2: { name: "variable.other.class.js message.error variable.interpolation string.regexp" }, 3: { name: "variable.other.class.js message.error variable.interpolation string.regexp strong" }, 4: { name: "support.type strong" } }, patterns: [{ begin: "(?:(?<=(?:[^#\\-:!?.@*/&%^+<=>|~$]!|^!))(?![#\\-:!?.@*/&%^+<=>|~$]))|(?:(?<=(?:[^[:word:]]and|^and|[^[:word:]]external|^external|[^[:word:]]let|^let|[^[:word:]]method|^method|[^[:word:]]val|^val))(?![[:word:]]))", end: `(?=\\b(?:module|open)\\b)|(?=(?:(?!\\b(?:and|'|as|asr|assert|\\*|begin|class|:|,|@|constraint|do|done|downto|else|end|=|exception|external|false|for|\\.|fun|function|functor|>|-|if|in|include|inherit|initializer|land|lazy|\\{|\\(|\\[|<|let|lor|lsl|lsr|lxor|match|method|mod|module|mutable|new|nonrec|#|object|of|open|or|%|\\+|private|\\?|"|rec|\\\\|\\}|\\)|\\]|;|sig|/|struct|then|~|to|true|try|type|val|\\||virtual|when|while|with)\\b(?:[^']|$))\\b(?=[[:lower:]_])[[:alpha:]_][[:word:]']*)[[:space:]]*,|[^[:space:][:lower:]%])|(\\brec\\b)|((?:(?!\\b(?:and|'|as|asr|assert|\\*|begin|class|:|,|@|constraint|do|done|downto|else|end|=|exception|external|false|for|\\.|fun|function|functor|>|-|if|in|include|inherit|initializer|land|lazy|\\{|\\(|\\[|<|let|lor|lsl|lsr|lxor|match|method|mod|module|mutable|new|nonrec|#|object|of|open|or|%|\\+|private|\\?|"|rec|\\\\|\\}|\\)|\\]|;|sig|/|struct|then|~|to|true|try|type|val|\\||virtual|when|while|with)\\b(?:[^']|$))\\b(?=[[:lower:]_])[[:alpha:]_][[:word:]']*))`, endCaptures: { 1: { name: "variable.other.class.js message.error variable.interpolation string.regexp" }, 2: { name: "entity.name.function strong emphasis" } }, patterns: [{ include: "#attributeIdentifier" }, { include: "#comment" }] }, { begin: "(?:(?<=(?:[^[:word:]]rec|^rec))(?![[:word:]]))", end: `((?:(?!\\b(?:and|'|as|asr|assert|\\*|begin|class|:|,|@|constraint|do|done|downto|else|end|=|exception|external|false|for|\\.|fun|function|functor|>|-|if|in|include|inherit|initializer|land|lazy|\\{|\\(|\\[|<|let|lor|lsl|lsr|lxor|match|method|mod|module|mutable|new|nonrec|#|object|of|open|or|%|\\+|private|\\?|"|rec|\\\\|\\}|\\)|\\]|;|sig|/|struct|then|~|to|true|try|type|val|\\||virtual|when|while|with)\\b(?:[^']|$))\\b(?=[[:lower:]_])[[:alpha:]_][[:word:]']*))|(?=[^[:space:][:alpha:]])`, endCaptures: { 0: { name: "entity.name.function strong emphasis" } }, patterns: [{ include: "#bindTermArgs" }] }, { include: "#bindTermArgs" }] }, { begin: "(?:(?<=(?:[^[:word:]]module|^module))(?![[:word:]]))", end: "(?=;;|\\}|\\)|\\]|\\b(?:end|and|class|exception|external|in|include|inherit|initializer|let|method|module|open|type|val)\\b)", patterns: [{ include: "#declModule" }] }, { begin: "(?:(?<=(?:[^[:word:]]open|^open))(?![[:word:]]))", end: "(?=\\bin\\b)|(?=\\}|\\)|\\]|\\b(?:end|and|class|exception|external|in|include|inherit|initializer|let|method|module|open|type|val)\\b)", patterns: [{ include: "#pathModuleSimple" }] }, { begin: "(?:(?<=(?:[^#\\-:!?.@*/&%^+<=>|~$]:|^:))(?![#\\-:!?.@*/&%^+<=>|~$]))", end: "(?<![#\\-:!?.@*/&%^+<=>|~$])=(?![#\\-:!?.@*/&%^+<=>|~$])|(?=;;|\\}|\\)|\\]|\\b(?:end|and|class|exception|external|in|include|inherit|initializer|let|method|module|open|type|val)\\b)", endCaptures: { 0: { name: "support.type strong" } }, patterns: [{ begin: "(?:(?<=(?:[^#\\-:!?.@*/&%^+<=>|~$]:|^:))(?![#\\-:!?.@*/&%^+<=>|~$]))", end: "\\btype\\b|(?=[^[:space:]])", endCaptures: { 0: { name: "keyword.control" } } }, { begin: "(?:(?<=(?:[^[:word:]]type|^type))(?![[:word:]]))", end: "(?<![#\\-:!?.@*/&%^+<=>|~$])\\.(?![#\\-:!?.@*/&%^+<=>|~$])", endCaptures: { 0: { name: "variable.other.class.js message.error variable.interpolation string.regexp" } }, patterns: [{ include: "#pattern" }] }, { include: "#type" }] }, { begin: "(?:(?<=(?:[^#\\-:!?.@*/&%^+<=>|~$]=|^=))(?![#\\-:!?.@*/&%^+<=>|~$]))", end: "\\band\\b|(?=;;|\\}|\\)|\\]|\\b(?:end|and|class|exception|external|in|include|inherit|initializer|let|method|module|open|type|val)\\b)", endCaptures: { 0: { name: "variable.other.class.js message.error variable.interpolation string.regexp markup.underline" } }, patterns: [{ include: "#term" }] }] }, bindTermArgs: { patterns: [{ applyEndPatternLast: !0, begin: "~|\\?", beginCaptures: { 0: { name: "variable.other.class.js message.error variable.interpolation string.regexp" } }, end: ":|(?=[^[:space:]])", endCaptures: { 0: { name: "keyword" } }, patterns: [{ begin: "(?:(?<=(?:[^#\\-:!?.@*/&%^+<=>|~$]~|^~|[^#\\-:!?.@*/&%^+<=>|~$]\\?|^\\?))(?![#\\-:!?.@*/&%^+<=>|~$]))", end: `(?:(?!\\b(?:and|'|as|asr|assert|\\*|begin|class|:|,|@|constraint|do|done|downto|else|end|=|exception|external|false|for|\\.|fun|function|functor|>|-|if|in|include|inherit|initializer|land|lazy|\\{|\\(|\\[|<|let|lor|lsl|lsr|lxor|match|method|mod|module|mutable|new|nonrec|#|object|of|open|or|%|\\+|private|\\?|"|rec|\\\\|\\}|\\)|\\]|;|sig|/|struct|then|~|to|true|try|type|val|\\||virtual|when|while|with)\\b(?:[^']|$))\\b(?=[[:lower:]_])[[:alpha:]_][[:word:]']*)|(?<=\\))`, endCaptures: { 0: { name: "markup.inserted constant.language support.constant.property-value entity.name.filename" } }, patterns: [{ include: "#comment" }, { begin: "\\((?!\\*)", captures: { 0: { name: "punctuation.definition.tag" } }, end: "\\)", patterns: [{ begin: "(?<=\\()", end: ":|=", endCaptures: { 0: { name: "keyword" } }, patterns: [{ match: `(?:(?!\\b(?:and|'|as|asr|assert|\\*|begin|class|:|,|@|constraint|do|done|downto|else|end|=|exception|external|false|for|\\.|fun|function|functor|>|-|if|in|include|inherit|initializer|land|lazy|\\{|\\(|\\[|<|let|lor|lsl|lsr|lxor|match|method|mod|module|mutable|new|nonrec|#|object|of|open|or|%|\\+|private|\\?|"|rec|\\\\|\\}|\\)|\\]|;|sig|/|struct|then|~|to|true|try|type|val|\\||virtual|when|while|with)\\b(?:[^']|$))\\b(?=[[:lower:]_])[[:alpha:]_][[:word:]']*)`, name: "markup.inserted constant.language support.constant.property-value entity.name.filename" }] }, { begin: "(?<=:)", end: "=|(?=\\))", endCaptures: { 0: { name: "keyword" } }, patterns: [{ include: "#type" }] }, { begin: "(?:(?<=(?:[^#\\-:!?.@*/&%^+<=>|~$]=|^=))(?![#\\-:!?.@*/&%^+<=>|~$]))", end: "(?=\\))", patterns: [{ include: "#term" }] }] }] }] }, { include: "#pattern" }] }, bindType: { patterns: [{ begin: "(?:(?<=(?:[^[:word:]]and|^and|[^[:word:]]type|^type))(?![[:word:]]))", end: "(?<![#\\-:!?.@*/&%^+<=>|~$])\\+=|=(?![#\\-:!?.@*/&%^+<=>|~$])|(?=;;|\\}|\\)|\\]|\\b(?:end|and|class|exception|external|in|include|inherit|initializer|let|method|module|open|type|val)\\b)", endCaptures: { 0: { name: "support.type strong" } }, patterns: [{ include: "#attributeIdentifier" }, { include: "#pathType" }, { match: `(?:(?!\\b(?:and|'|as|asr|assert|\\*|begin|class|:|,|@|constraint|do|done|downto|else|end|=|exception|external|false|for|\\.|fun|function|functor|>|-|if|in|include|inherit|initializer|land|lazy|\\{|\\(|\\[|<|let|lor|lsl|lsr|lxor|match|method|mod|module|mutable|new|nonrec|#|object|of|open|or|%|\\+|private|\\?|"|rec|\\\\|\\}|\\)|\\]|;|sig|/|struct|then|~|to|true|try|type|val|\\||virtual|when|while|with)\\b(?:[^']|$))\\b(?=[[:lower:]_])[[:alpha:]_][[:word:]']*)`, name: "entity.name.function strong" }, { include: "#type" }] }, { begin: "(?:(?<=(?:[^#\\-:!?.@*/&%^+<=>|~$]\\+=|^\\+=|[^#\\-:!?.@*/&%^+<=>|~$]=|^=))(?![#\\-:!?.@*/&%^+<=>|~$]))", end: "\\band\\b|(?=;;|\\}|\\)|\\]|\\b(?:end|and|class|exception|external|in|include|inherit|initializer|let|method|module|open|type|val)\\b)", endCaptures: { 0: { name: "variable.other.class.js message.error variable.interpolation string.regexp markup.underline" } }, patterns: [{ include: "#bindConstructor" }] }] }, comment: { patterns: [{ include: "#attribute" }, { include: "#extension" }, { include: "#commentBlock" }, { include: "#commentDoc" }] }, commentBlock: { begin: "\\(\\*(?!\\*[^\\)])", contentName: "emphasis", end: "\\*\\)", name: "comment constant.regexp meta.separator.markdown", patterns: [{ include: "#commentBlock" }, { include: "#commentDoc" }] }, commentDoc: { begin: "\\(\\*\\*", end: "\\*\\)", name: "comment constant.regexp meta.separator.markdown", patterns: [{ match: "\\*" }, { include: "#comment" }] }, decl: { patterns: [{ include: "#declClass" }, { include: "#declException" }, { include: "#declInclude" }, { include: "#declModule" }, { include: "#declOpen" }, { include: "#declTerm" }, { include: "#declType" }] }, declClass: { begin: "\\bclass\\b", beginCaptures: { 0: { name: "entity.name.class constant.numeric markup.underline" } }, end: ";;|(?=\\}|\\)|\\]|\\b(?:end|and|class|exception|external|in|include|inherit|initializer|let|method|module|open|type|val)\\b)", endCaptures: { 0: { name: "punctuation.definition.tag" } }, patterns: [{ include: "#comment" }, { include: "#pragma" }, { begin: "(?:(?<=(?:[^[:word:]]class|^class))(?![[:word:]]))", beginCaptures: { 0: { name: "entity.name.class constant.numeric markup.underline" } }, end: "\\btype\\b|(?=\\}|\\)|\\]|\\b(?:end|and|class|exception|external|in|include|inherit|initializer|let|method|module|open|val)\\b)", endCaptures: { 0: { name: "keyword" } }, patterns: [{ include: "#bindClassTerm" }] }, { begin: "(?:(?<=(?:[^[:word:]]type|^type))(?![[:word:]]))", end: "(?=;;|\\}|\\)|\\]|\\b(?:end|and|class|exception|external|in|include|inherit|initializer|let|method|module|open|type|val)\\b)", patterns: [{ include: "#bindClassType" }] }] }, declException: { begin: "\\bexception\\b", beginCaptures: { 0: { name: "keyword markup.underline" } }, end: ";;|(?=\\}|\\)|\\]|\\b(?:end|and|class|exception|external|in|include|inherit|initializer|let|method|module|open|type|val)\\b)", endCaptures: { 0: { name: "punctuation.definition.tag" } }, patterns: [{ include: "#attributeIdentifier" }, { include: "#comment" }, { include: "#pragma" }, { include: "#bindConstructor" }] }, declInclude: { begin: "\\binclude\\b", beginCaptures: { 0: { name: "variable.other.class.js message.error variable.interpolation string.regexp" } }, end: ";;|(?=\\}|\\)|\\]|\\b(?:end|and|class|exception|external|in|include|inherit|initializer|let|method|module|open|type|val)\\b)", endCaptures: { 0: { name: "punctuation.definition.tag" } }, patterns: [{ include: "#attributeIdentifier" }, { include: "#comment" }, { include: "#pragma" }, { include: "#signature" }] }, declModule: { begin: "(?:(?<=(?:[^[:word:]]module|^module))(?![[:word:]]))|\\bmodule\\b", beginCaptures: { 0: { name: "markup.inserted constant.language support.constant.property-value entity.name.filename markup.underline" } }, end: ";;|(?=\\}|\\)|\\]|\\b(?:end|and|class|exception|external|in|include|inherit|initializer|let|method|module|open|type|val)\\b)", endCaptures: { 0: { name: "punctuation.definition.tag" } }, patterns: [{ include: "#comment" }, { include: "#pragma" }, { begin: "(?:(?<=(?:[^[:word:]]module|^module))(?![[:word:]]))", end: "(\\btype\\b)|(?=[[:upper:]])", endCaptures: { 0: { name: "keyword" } }, patterns: [{ include: "#attributeIdentifier" }, { include: "#comment" }, { match: "\\brec\\b", name: "variable.other.class.js message.error variable.interpolation string.regexp" }] }, { begin: "(?:(?<=(?:[^[:word:]]type|^type))(?![[:word:]]))", end: "(?=;;|\\}|\\)|\\]|\\b(?:end|and|class|exception|external|in|include|inherit|initializer|let|method|module|open|type|val)\\b)", patterns: [{ include: "#bindSignature" }] }, { begin: "(?=[[:upper:]])", end: "(?=;;|\\}|\\)|\\]|\\b(?:end|and|class|exception|external|in|include|inherit|initializer|let|method|module|open|type|val)\\b)", patterns: [{ include: "#bindStructure" }] }] }, declOpen: { begin: "\\bopen\\b", beginCaptures: { 0: { name: "variable.other.class.js message.error variable.interpolation string.regexp" } }, end: ";;|(?=\\}|\\)|\\]|\\b(?:end|and|class|exception|external|in|include|inherit|initializer|let|method|module|open|type|val)\\b)", endCaptures: { 0: { name: "punctuation.definition.tag" } }, patterns: [{ include: "#attributeIdentifier" }, { include: "#comment" }, { include: "#pragma" }, { include: "#pathModuleExtended" }] }, declTerm: { begin: "\\b(?:(external|val)|(method)|(let))\\b(!?)", beginCaptures: { 1: { name: "support.type markup.underline" }, 2: { name: "storage.type markup.underline" }, 3: { name: "keyword.control markup.underline" }, 4: { name: "variable.other.class.js message.error variable.interpolation string.regexp" } }, end: ";;|(?=\\}|\\)|\\]|\\b(?:end|and|class|exception|external|in|include|inherit|initializer|let|method|module|open|type|val)\\b)", endCaptures: { 0: { name: "punctuation.definition.tag" } }, patterns: [{ include: "#comment" }, { include: "#pragma" }, { include: "#bindTerm" }] }, declType: { begin: "(?:(?<=(?:[^[:word:]]type|^type))(?![[:word:]]))|\\btype\\b", beginCaptures: { 0: { name: "keyword markup.underline" } }, end: ";;|(?=\\}|\\)|\\]|\\b(?:end|and|class|exception|external|in|include|inherit|initializer|let|method|module|open|type|val)\\b)", endCaptures: { 0: { name: "punctuation.definition.tag" } }, patterns: [{ include: "#comment" }, { include: "#pragma" }, { include: "#bindType" }] }, extension: { begin: "(\\[)((?<![#\\-:!?.@*/&%^+<=>|~$])%{1,3}(?![#\\-:!?.@*/&%^+<=>|~$]))", beginCaptures: { 1: { name: "constant.language constant.numeric entity.other.attribute-name.id.css strong" }, 2: { name: "variable.other.class.js message.error variable.interpolation string.regexp" } }, end: "\\]", endCaptures: { 0: { name: "constant.language constant.numeric entity.other.attribute-name.id.css strong" } }, patterns: [{ include: "#attributePayload" }] }, literal: { patterns: [{ include: "#termConstructor" }, { include: "#literalArray" }, { include: "#literalBoolean" }, { include: "#literalCharacter" }, { include: "#literalList" }, { include: "#literalNumber" }, { include: "#literalObjectTerm" }, { include: "#literalString" }, { include: "#literalRecord" }, { include: "#literalUnit" }] }, literalArray: { begin: "\\[\\|", captures: { 0: { name: "constant.language constant.numeric entity.other.attribute-name.id.css strong" } }, end: "\\|\\]", patterns: [{ include: "#term" }] }, literalBoolean: { match: "\\bfalse|true\\b", name: "constant.language constant.numeric entity.other.attribute-name.id.css strong" }, literalCharacter: { begin: "(?<![[:word:]])'", end: "'", name: "markup.punctuation.quote.beginning", patterns: [{ include: "#literalCharacterEscape" }] }, literalCharacterEscape: { match: `\\\\(?:[\\\\"'ntbr]|[[:digit:]][[:digit:]][[:digit:]]|x[[:xdigit:]][[:xdigit:]]|o[0-3][0-7][0-7])` }, literalClassType: { patterns: [{ include: "#comment" }, { begin: "\\bobject\\b", captures: { 0: { name: "punctuation.definition.tag emphasis" } }, end: "\\bend\\b", patterns: [{ begin: "\\binherit\\b", beginCaptures: { 0: { name: "variable.other.class.js message.error variable.interpolation string.regexp" } }, end: ";;|(?=\\}|\\)|\\]|\\b(?:end|and|class|exception|external|in|include|inherit|initializer|let|method|module|open|type|val)\\b)", endCaptures: { 0: { name: "punctuation.definition.tag" } }, patterns: [{ begin: "\\bas\\b", beginCaptures: { 0: { name: "variable.other.class.js message.error variable.interpolation string.regexp" } }, end: ";;|(?=\\}|\\)|\\]|\\b(?:end|and|class|exception|external|in|include|inherit|initializer|let|method|module|open|type|val)\\b)", patterns: [{ include: "#variablePattern" }] }, { include: "#type" }] }, { include: "#pattern" }, { include: "#declTerm" }] }, { begin: "\\[", end: "\\]" }] }, literalList: { patterns: [{ begin: "\\[", captures: { 0: { name: "constant.language constant.numeric entity.other.attribute-name.id.css strong" } }, end: "\\]", patterns: [{ include: "#term" }] }] }, literalNumber: { match: "(?<![[:alpha:]])[[:digit:]][[:digit:]]*(\\.[[:digit:]][[:digit:]]*)?", name: "constant.numeric" }, literalObjectTerm: { patterns: [{ include: "#comment" }, { begin: "\\bobject\\b", captures: { 0: { name: "punctuation.definition.tag emphasis" } }, end: "\\bend\\b", patterns: [{ begin: "\\binherit\\b", beginCaptures: { 0: { name: "variable.other.class.js message.error variable.interpolation string.regexp" } }, end: ";;|(?=\\}|\\)|\\]|\\b(?:end|and|class|exception|external|in|include|inherit|initializer|let|method|module|open|type|val)\\b)", endCaptures: { 0: { name: "punctuation.definition.tag" } }, patterns: [{ begin: "\\bas\\b", beginCaptures: { 0: { name: "variable.other.class.js message.error variable.interpolation string.regexp" } }, end: ";;|(?=\\}|\\)|\\]|\\b(?:end|and|class|exception|external|in|include|inherit|initializer|let|method|module|open|type|val)\\b)", patterns: [{ include: "#variablePattern" }] }, { include: "#term" }] }, { include: "#pattern" }, { include: "#declTerm" }] }, { begin: "\\[", end: "\\]" }] }, literalRecord: { begin: "\\{", captures: { 0: { name: "constant.language constant.numeric entity.other.attribute-name.id.css strong strong" } }, end: "\\}", patterns: [{ begin: "(?<=\\{|;)", end: "(:)|(=)|(;)|(with)|(?=\\})", endCaptures: { 1: { name: "variable.other.class.js message.error variable.interpolation string.regexp strong" }, 2: { name: "support.type strong" }, 3: { name: "variable.other.class.js message.error variable.interpolation string.regexp" }, 4: { name: "variable.other.class.js message.error variable.interpolation string.regexp" } }, patterns: [{ include: "#comment" }, { include: "#pathModulePrefixSimple" }, { match: `(?:(?!\\b(?:and|'|as|asr|assert|\\*|begin|class|:|,|@|constraint|do|done|downto|else|end|=|exception|external|false|for|\\.|fun|function|functor|>|-|if|in|include|inherit|initializer|land|lazy|\\{|\\(|\\[|<|let|lor|lsl|lsr|lxor|match|method|mod|module|mutable|new|nonrec|#|object|of|open|or|%|\\+|private|\\?|"|rec|\\\\|\\}|\\)|\\]|;|sig|/|struct|then|~|to|true|try|type|val|\\||virtual|when|while|with)\\b(?:[^']|$))\\b(?=[[:lower:]_])[[:alpha:]_][[:word:]']*)`, name: "markup.inserted constant.language support.constant.property-value entity.name.filename emphasis" }] }, { begin: "(?:(?<=(?:[^[:word:]]with|^with))(?![[:word:]]))", end: "(:)|(=)|(;)|(?=\\})", endCaptures: { 1: { name: "variable.other.class.js message.error variable.interpolation string.regexp strong" }, 2: { name: "support.type strong" }, 3: { name: "variable.other.class.js message.error variable.interpolation string.regexp" } }, patterns: [{ match: `(?:(?!\\b(?:and|'|as|asr|assert|\\*|begin|class|:|,|@|constraint|do|done|downto|else|end|=|exception|external|false|for|\\.|fun|function|functor|>|-|if|in|include|inherit|initializer|land|lazy|\\{|\\(|\\[|<|let|lor|lsl|lsr|lxor|match|method|mod|module|mutable|new|nonrec|#|object|of|open|or|%|\\+|private|\\?|"|rec|\\\\|\\}|\\)|\\]|;|sig|/|struct|then|~|to|true|try|type|val|\\||virtual|when|while|with)\\b(?:[^']|$))\\b(?=[[:lower:]_])[[:alpha:]_][[:word:]']*)`, name: "markup.inserted constant.language support.constant.property-value entity.name.filename emphasis" }] }, { begin: "(?:(?<=(?:[^#\\-:!?.@*/&%^+<=>|~$]:|^:))(?![#\\-:!?.@*/&%^+<=>|~$]))", end: "(;)|(=)|(?=\\})", endCaptures: { 1: { name: "variable.other.class.js message.error variable.interpolation string.regexp" }, 2: { name: "support.type strong" } }, patterns: [{ include: "#type" }] }, { begin: "(?:(?<=(?:[^#\\-:!?.@*/&%^+<=>|~$]=|^=))(?![#\\-:!?.@*/&%^+<=>|~$]))", end: ";|(?=\\})", endCaptures: { 0: { name: "variable.other.class.js message.error variable.interpolation string.regexp" } }, patterns: [{ include: "#term" }] }] }, literalString: { patterns: [{ begin: '"', end: '"', name: "string beginning.punctuation.definition.quote.markdown", patterns: [{ include: "#literalStringEscape" }] }, { begin: "(\\{)([_[:lower:]]*?)(\\|)", end: "(\\|)(\\2)(\\})", name: "string beginning.punctuation.definition.quote.markdown", patterns: [{ include: "#literalStringEscape" }] }] }, literalStringEscape: { match: '\\\\(?:[\\\\"ntbr]|[[:digit:]][[:digit:]][[:digit:]]|x[[:xdigit:]][[:xdigit:]]|o[0-3][0-7][0-7])' }, literalUnit: { match: "\\(\\)", name: "constant.language constant.numeric entity.other.attribute-name.id.css strong" }, pathModuleExtended: { patterns: [{ include: "#pathModulePrefixExtended" }, { match: "(?:\\b(?=[[:upper:]])[[:alpha:]_][[:word:]']*)", name: "entity.name.class constant.numeric" }] }, pathModulePrefixExtended: { begin: "(?:\\b(?=[[:upper:]])[[:alpha:]_][[:word:]']*)(?=[[:space:]]*\\.|$|\\()", beginCaptures: { 0: { name: "entity.name.class constant.numeric" } }, end: "(?![[:space:]\\.]|$|\\()", patterns: [{ include: "#comment" }, { begin: "\\(", captures: { 0: { name: "keyword.control" } }, end: "\\)", patterns: [{ match: "((?:\\b(?=[[:upper:]])[[:alpha:]_][[:word:]']*)(?=[[:space:]]*\\)))", name: "string.other.link variable.language variable.parameter emphasis" }, { include: "#structure" }] }, { begin: "(?<![#\\-:!?.@*/&%^+<=>|~$])\\.(?![#\\-:!?.@*/&%^+<=>|~$])", beginCaptures: { 0: { name: "keyword strong" } }, end: "((?:\\b(?=[[:upper:]])[[:alpha:]_][[:word:]']*)(?=[[:space:]]*\\.|$))|((?:\\b(?=[[:upper:]])[[:alpha:]_][[:word:]']*)(?=[[:space:]]*(?:$|\\()))|((?:\\b(?=[[:upper:]])[[:alpha:]_][[:word:]']*)(?=[[:space:]]*\\)))|(?![[:space:]\\.[:upper:]]|$|\\()", endCaptures: { 1: { name: "entity.name.class constant.numeric" }, 2: { name: "entity.name.function strong" }, 3: { name: "string.other.link variable.language variable.parameter emphasis" } } }] }, pathModulePrefixExtendedParens: { begin: "\\(", captures: { 0: { name: "keyword.control" } }, end: "\\)", patterns: [{ match: "((?:\\b(?=[[:upper:]])[[:alpha:]_][[:word:]']*)(?=[[:space:]]*\\)))", name: "string.other.link variable.language variable.parameter emphasis" }, { include: "#structure" }] }, pathModulePrefixSimple: { begin: "(?:\\b(?=[[:upper:]])[[:alpha:]_][[:word:]']*)(?=[[:space:]]*\\.)", beginCaptures: { 0: { name: "entity.name.class constant.numeric" } }, end: "(?![[:space:]\\.])", patterns: [{ include: "#comment" }, { begin: "(?<![#\\-:!?.@*/&%^+<=>|~$])\\.(?![#\\-:!?.@*/&%^+<=>|~$])", beginCaptures: { 0: { name: "keyword strong" } }, end: "((?:\\b(?=[[:upper:]])[[:alpha:]_][[:word:]']*)(?=[[:space:]]*\\.))|((?:\\b(?=[[:upper:]])[[:alpha:]_][[:word:]']*)(?=[[:space:]]*))|(?![[:space:]\\.[:upper:]])", endCaptures: { 1: { name: "entity.name.class constant.numeric" }, 2: { name: "constant.language constant.numeric entity.other.attribute-name.id.css strong" } } }] }, pathModuleSimple: { patterns: [{ include: "#pathModulePrefixSimple" }, { match: "(?:\\b(?=[[:upper:]])[[:alpha:]_][[:word:]']*)", name: "entity.name.class constant.numeric" }] }, pathRecord: { patterns: [{ begin: `(?:(?!\\b(?:and|'|as|asr|assert|\\*|begin|class|:|,|@|constraint|do|done|downto|else|end|=|exception|external|false|for|\\.|fun|function|functor|>|-|if|in|include|inherit|initializer|land|lazy|\\{|\\(|\\[|<|let|lor|lsl|lsr|lxor|match|method|mod|module|mutable|new|nonrec|#|object|of|open|or|%|\\+|private|\\?|"|rec|\\\\|\\}|\\)|\\]|;|sig|/|struct|then|~|to|true|try|type|val|\\||virtual|when|while|with)\\b(?:[^']|$))\\b(?=[[:lower:]_])[[:alpha:]_][[:word:]']*)`, end: "(?=[^[:space:]\\.])(?!\\(\\*)", patterns: [{ include: "#comment" }, { begin: "(?:(?<=(?:[^#\\-:!?.@*/&%^+<=>|~$]\\.|^\\.))(?![#\\-:!?.@*/&%^+<=>|~$]))|(?<![#\\-:!?.@*/&%^+<=>|~$])\\.(?![#\\-:!?.@*/&%^+<=>|~$])", beginCaptures: { 0: { name: "keyword strong" } }, end: `((?<![#\\-:!?.@*/&%^+<=>|~$])\\.(?![#\\-:!?.@*/&%^+<=>|~$]))|((?:(?!\\b(?:and|'|as|asr|assert|\\*|begin|class|:|,|@|constraint|do|done|downto|else|end|=|exception|external|false|for|\\.|fun|function|functor|>|-|if|in|include|inherit|initializer|land|lazy|\\{|\\(|\\[|<|let|lor|lsl|lsr|lxor|match|method|mod|mutable|nonrec|#|object|of|open|or|%|\\+|private|\\?|"|rec|\\\\|\\}|\\)|\\]|;|sig|/|struct|then|~|to|true|try|type|val|\\||virtual|when|while|with)\\b(?:[^']|$))\\b(?=[[:lower:]_])[[:alpha:]_][[:word:]']*))|(?<=\\))|(?<=\\])`, endCaptures: { 1: { name: "keyword strong" }, 2: { name: "markup.inserted constant.language support.constant.property-value entity.name.filename" } }, patterns: [{ include: "#comment" }, { include: "#pathModulePrefixSimple" }, { begin: "\\((?!\\*)", captures: { 0: { name: "variable.other.class.js message.error variable.interpolation string.regexp" } }, end: "\\)", patterns: [{ include: "#term" }] }, { begin: "\\[", captures: { 0: { name: "variable.other.class.js message.error variable.interpolation string.regexp" } }, end: "\\]", patterns: [{ include: "#pattern" }] }] }] }] }, pattern: { patterns: [{ include: "#comment" }, { include: "#patternArray" }, { include: "#patternLazy" }, { include: "#patternList" }, { include: "#patternMisc" }, { include: "#patternModule" }, { include: "#patternRecord" }, { include: "#literal" }, { include: "#patternParens" }, { include: "#patternType" }, { include: "#variablePattern" }, { include: "#termOperator" }] }, patternArray: { begin: "\\[\\|", captures: { 0: { name: "constant.language constant.numeric entity.other.attribute-name.id.css strong" } }, end: "\\|\\]", patterns: [{ include: "#pattern" }] }, patternLazy: { match: "lazy", name: "variable.other.class.js message.error variable.interpolation string.regexp" }, patternList: { begin: "\\[", captures: { 0: { name: "constant.language constant.numeric entity.other.attribute-name.id.css strong" } }, end: "\\]", patterns: [{ include: "#pattern" }] }, patternMisc: { captures: { 1: { name: "string.regexp strong" }, 2: { name: "variable.other.class.js message.error variable.interpolation string.regexp" }, 3: { name: "variable.other.class.js message.error variable.interpolation string.regexp" } }, match: "((?<![#\\-:!?.@*/&%^+<=>|~$]),(?![#\\-:!?.@*/&%^+<=>|~$]))|([#\\-:!?.@*/&%^+<=>|~$]+)|\\b(as)\\b" }, patternModule: { begin: "\\bmodule\\b", beginCaptures: { 0: { name: "markup.inserted constant.language support.constant.property-value entity.name.filename" } }, end: "(?=\\))", patterns: [{ include: "#declModule" }] }, patternParens: { begin: "\\((?!\\))", captures: { 0: { name: "punctuation.definition.tag" } }, end: "\\)", patterns: [{ include: "#comment" }, { begin: "(?<![#\\-:!?.@*/&%^+<=>|~$]):(?![#\\-:!?.@*/&%^+<=>|~$])", beginCaptures: { 0: { name: "variable.other.class.js message.error variable.interpolation string.regexp strong" } }, end: "(?=\\))", patterns: [{ include: "#type" }] }, { include: "#pattern" }] }, patternRecord: { begin: "\\{", captures: { 0: { name: "constant.language constant.numeric entity.other.attribute-name.id.css strong strong" } }, end: "\\}", patterns: [{ begin: "(?<=\\{|;)", end: "(:)|(=)|(;)|(with)|(?=\\})", endCaptures: { 1: { name: "variable.other.class.js message.error variable.interpolation string.regexp strong" }, 2: { name: "support.type strong" }, 3: { name: "variable.other.class.js message.error variable.interpolation string.regexp" }, 4: { name: "variable.other.class.js message.error variable.interpolation string.regexp" } }, patterns: [{ include: "#comment" }, { include: "#pathModulePrefixSimple" }, { match: `(?:(?!\\b(?:and|'|as|asr|assert|\\*|begin|class|:|,|@|constraint|do|done|downto|else|end|=|exception|external|false|for|\\.|fun|function|functor|>|-|if|in|include|inherit|initializer|land|lazy|\\{|\\(|\\[|<|let|lor|lsl|lsr|lxor|match|method|mod|module|mutable|new|nonrec|#|object|of|open|or|%|\\+|private|\\?|"|rec|\\\\|\\}|\\)|\\]|;|sig|/|struct|then|~|to|true|try|type|val|\\||virtual|when|while|with)\\b(?:[^']|$))\\b(?=[[:lower:]_])[[:alpha:]_][[:word:]']*)`, name: "markup.inserted constant.language support.constant.property-value entity.name.filename emphasis" }] }, { begin: "(?:(?<=(?:[^[:word:]]with|^with))(?![[:word:]]))", end: "(:)|(=)|(;)|(?=\\})", endCaptures: { 1: { name: "variable.other.class.js message.error variable.interpolation string.regexp strong" }, 2: { name: "support.type strong" }, 3: { name: "variable.other.class.js message.error variable.interpolation string.regexp" } }, patterns: [{ match: `(?:(?!\\b(?:and|'|as|asr|assert|\\*|begin|class|:|,|@|constraint|do|done|downto|else|end|=|exception|external|false|for|\\.|fun|function|functor|>|-|if|in|include|inherit|initializer|land|lazy|\\{|\\(|\\[|<|let|lor|lsl|lsr|lxor|match|method|mod|module|mutable|new|nonrec|#|object|of|open|or|%|\\+|private|\\?|"|rec|\\\\|\\}|\\)|\\]|;|sig|/|struct|then|~|to|true|try|type|val|\\||virtual|when|while|with)\\b(?:[^']|$))\\b(?=[[:lower:]_])[[:alpha:]_][[:word:]']*)`, name: "markup.inserted constant.language support.constant.property-value entity.name.filename emphasis" }] }, { begin: "(?:(?<=(?:[^#\\-:!?.@*/&%^+<=>|~$]:|^:))(?![#\\-:!?.@*/&%^+<=>|~$]))", end: "(;)|(=)|(?=\\})", endCaptures: { 1: { name: "variable.other.class.js message.error variable.interpolation string.regexp" }, 2: { name: "support.type strong" } }, patterns: [{ include: "#type" }] }, { begin: "(?:(?<=(?:[^#\\-:!?.@*/&%^+<=>|~$]=|^=))(?![#\\-:!?.@*/&%^+<=>|~$]))", end: ";|(?=\\})", endCaptures: { 0: { name: "variable.other.class.js message.error variable.interpolation string.regexp" } }, patterns: [{ include: "#pattern" }] }] }, patternType: { begin: "\\btype\\b", beginCaptures: { 0: { name: "keyword" } }, end: "(?=\\))", patterns: [{ include: "#declType" }] }, pragma: { begin: "(?<![#\\-:!?.@*/&%^+<=>|~$])#(?![#\\-:!?.@*/&%^+<=>|~$])", beginCaptures: { 0: { name: "punctuation.definition.tag" } }, end: "(?=;;|\\}|\\)|\\]|\\b(?:end|and|class|exception|external|in|include|inherit|initializer|let|method|module|open|type|val)\\b)", patterns: [{ include: "#comment" }, { include: "#literalNumber" }, { include: "#literalString" }] }, signature: { patterns: [{ include: "#comment" }, { include: "#signatureLiteral" }, { include: "#signatureFunctor" }, { include: "#pathModuleExtended" }, { include: "#signatureParens" }, { include: "#signatureRecovered" }, { include: "#signatureConstraints" }] }, signatureConstraints: { begin: "\\bwith\\b", beginCaptures: { 0: { name: "variable.other.class.js message.error variable.interpolation string.regexp markup.underline" } }, end: "(?=\\))|(?=;;|\\}|\\)|\\]|\\b(?:end|and|class|exception|external|in|include|inherit|initializer|let|method|module|open|type|val)\\b)", patterns: [{ begin: "(?:(?<=(?:[^[:word:]]with|^with))(?![[:word:]]))", end: "\\b(?:(module)|(type))\\b", endCaptures: { 1: { name: "markup.inserted constant.language support.constant.property-value entity.name.filename" }, 2: { name: "keyword" } } }, { include: "#declModule" }, { include: "#declType" }] }, signatureFunctor: { patterns: [{ begin: "\\bfunctor\\b", beginCaptures: { 0: { name: "keyword" } }, end: "(?=;;|\\}|\\)|\\]|\\b(?:end|and|class|exception|external|in|include|inherit|initializer|let|method|module|open|type|val)\\b)", patterns: [{ begin: "(?:(?<=(?:[^[:word:]]functor|^functor))(?![[:word:]]))", end: "(\\(\\))|(\\((?!\\)))", endCaptures: { 1: { name: "constant.language constant.numeric entity.other.attribute-name.id.css strong" }, 2: { name: "punctuation.definition.tag" } } }, { begin: "(?<=\\()", end: "(:)|(\\))", endCaptures: { 1: { name: "variable.other.class.js message.error variable.interpolation string.regexp strong" }, 2: { name: "punctuation.definition.tag" } }, patterns: [{ include: "#variableModule" }] }, { begin: "(?:(?<=(?:[^#\\-:!?.@*/&%^+<=>|~$]:|^:))(?![#\\-:!?.@*/&%^+<=>|~$]))", end: "\\)", endCaptures: { 0: { name: "punctuation.definition.tag" } }, patterns: [{ include: "#signature" }] }, { begin: "(?<=\\))", end: "(\\()|((?<![#\\-:!?.@*/&%^+<=>|~$])->(?![#\\-:!?.@*/&%^+<=>|~$]))", endCaptures: { 1: { name: "punctuation.definition.tag" }, 2: { name: "support.type strong" } } }, { begin: "(?:(?<=(?:[^#\\-:!?.@*/&%^+<=>|~$]->|^->))(?![#\\-:!?.@*/&%^+<=>|~$]))", end: "(?=;;|\\}|\\)|\\]|\\b(?:end|and|class|exception|external|in|include|inherit|initializer|let|method|module|open|type|val)\\b)", patterns: [{ include: "#signature" }] }] }, { match: "(?<![#\\-:!?.@*/&%^+<=>|~$])->(?![#\\-:!?.@*/&%^+<=>|~$])", name: "support.type strong" }] }, signatureLiteral: { begin: "\\bsig\\b", captures: { 0: { name: "punctuation.definition.tag emphasis" } }, end: "\\bend\\b", patterns: [{ include: "#comment" }, { include: "#pragma" }, { include: "#decl" }] }, signatureParens: { begin: "\\((?!\\))", captures: { 0: { name: "punctuation.definition.tag" } }, end: "\\)", patterns: [{ include: "#comment" }, { begin: "(?<![#\\-:!?.@*/&%^+<=>|~$]):(?![#\\-:!?.@*/&%^+<=>|~$])", beginCaptures: { 0: { name: "variable.other.class.js message.error variable.interpolation string.regexp strong" } }, end: "(?=\\))", patterns: [{ include: "#signature" }] }, { include: "#signature" }] }, signatureRecovered: { patterns: [{ begin: "\\(|(?:(?<=(?:[^#\\-:!?.@*/&%^+<=>|~$]:|^:|[^#\\-:!?.@*/&%^+<=>|~$]->|^->))(?![#\\-:!?.@*/&%^+<=>|~$]))|(?:(?<=(?:[^[:word:]]include|^include|[^[:word:]]open|^open))(?![[:word:]]))", end: "\\bmodule\\b|(?!$|[[:space:]]|\\bmodule\\b)", endCaptures: { 0: { name: "markup.inserted constant.language support.constant.property-value entity.name.filename" } } }, { begin: "(?:(?<=(?:[^[:word:]]module|^module))(?![[:word:]]))", end: "(?=;;|\\}|\\)|\\]|\\b(?:end|and|class|exception|external|in|include|inherit|initializer|let|method|module|open|type|val)\\b)", patterns: [{ begin: "(?:(?<=(?:[^[:word:]]module|^module))(?![[:word:]]))", end: "\\btype\\b", endCaptures: { 0: { name: "keyword" } } }, { begin: "(?:(?<=(?:[^[:word:]]type|^type))(?![[:word:]]))", end: "\\bof\\b", endCaptures: { 0: { name: "punctuation.definition.tag" } } }, { begin: "(?:(?<=(?:[^[:word:]]of|^of))(?![[:word:]]))", end: "(?=;;|\\}|\\)|\\]|\\b(?:end|and|class|exception|external|in|include|inherit|initializer|let|method|module|open|type|val)\\b)", patterns: [{ include: "#signature" }] }] }] }, structure: { patterns: [{ include: "#comment" }, { include: "#structureLiteral" }, { include: "#structureFunctor" }, { include: "#pathModuleExtended" }, { include: "#structureParens" }] }, structureFunctor: { patterns: [{ begin: "\\bfunctor\\b", beginCaptures: { 0: { name: "keyword" } }, end: "(?=;;|\\}|\\)|\\]|\\b(?:end|and|class|exception|external|in|include|inherit|initializer|let|method|module|open|type|val)\\b)", patterns: [{ begin: "(?:(?<=(?:[^[:word:]]functor|^functor))(?![[:word:]]))", end: "(\\(\\))|(\\((?!\\)))", endCaptures: { 1: { name: "constant.language constant.numeric entity.other.attribute-name.id.css strong" }, 2: { name: "punctuation.definition.tag" } } }, { begin: "(?<=\\()", end: "(:)|(\\))", endCaptures: { 1: { name: "variable.other.class.js message.error variable.interpolation string.regexp strong" }, 2: { name: "punctuation.definition.tag" } }, patterns: [{ include: "#variableModule" }] }, { begin: "(?:(?<=(?:[^#\\-:!?.@*/&%^+<=>|~$]:|^:))(?![#\\-:!?.@*/&%^+<=>|~$]))", end: "\\)", endCaptures: { 0: { name: "punctuation.definition.tag" } }, patterns: [{ include: "#signature" }] }, { begin: "(?<=\\))", end: "(\\()|((?<![#\\-:!?.@*/&%^+<=>|~$])->(?![#\\-:!?.@*/&%^+<=>|~$]))", endCaptures: { 1: { name: "punctuation.definition.tag" }, 2: { name: "support.type strong" } } }, { begin: "(?:(?<=(?:[^#\\-:!?.@*/&%^+<=>|~$]->|^->))(?![#\\-:!?.@*/&%^+<=>|~$]))", end: "(?=;;|\\}|\\)|\\]|\\b(?:end|and|class|exception|external|in|include|inherit|initializer|let|method|module|open|type|val)\\b)", patterns: [{ include: "#structure" }] }] }, { match: "(?<![#\\-:!?.@*/&%^+<=>|~$])->(?![#\\-:!?.@*/&%^+<=>|~$])", name: "support.type strong" }] }, structureLiteral: { begin: "\\bstruct\\b", captures: { 0: { name: "punctuation.definition.tag emphasis" } }, end: "\\bend\\b", patterns: [{ include: "#comment" }, { include: "#pragma" }, { include: "#decl" }] }, structureParens: { begin: "\\(", captures: { 0: { name: "punctuation.definition.tag" } }, end: "\\)", patterns: [{ include: "#structureUnpack" }, { include: "#structure" }] }, structureUnpack: { begin: "\\bval\\b", beginCaptures: { 0: { name: "variable.other.class.js message.error variable.interpolation string.regexp" } }, end: "(?=\\))" }, term: { patterns: [{ include: "#termLet" }, { include: "#termAtomic" }] }, termAtomic: { patterns: [{ include: "#comment" }, { include: "#termConditional" }, { include: "#termConstructor" }, { include: "#termDelim" }, { include: "#termFor" }, { include: "#termFunction" }, { include: "#literal" }, { include: "#termMatch" }, { include: "#termMatchRule" }, { include: "#termPun" }, { include: "#termOperator" }, { include: "#termTry" }, { include: "#termWhile" }, { include: "#pathRecord" }] }, termConditional: { match: "\\b(?:if|then|else)\\b", name: "keyword.control" }, termConstructor: { patterns: [{ include: "#pathModulePrefixSimple" }, { match: "(?:\\b(?=[[:upper:]])[[:alpha:]_][[:word:]']*)", name: "constant.language constant.numeric entity.other.attribute-name.id.css strong" }] }, termDelim: { patterns: [{ begin: "\\((?!\\))", captures: { 0: { name: "punctuation.definition.tag" } }, end: "\\)", patterns: [{ include: "#term" }] }, { begin: "\\bbegin\\b", captures: { 0: { name: "punctuation.definition.tag" } }, end: "\\bend\\b", patterns: [{ include: "#attributeIdentifier" }, { include: "#term" }] }] }, termFor: { patterns: [{ begin: "\\bfor\\b", beginCaptures: { 0: { name: "keyword.control" } }, end: "\\bdone\\b", endCaptures: { 0: { name: "keyword.control" } }, patterns: [{ begin: "(?:(?<=(?:[^[:word:]]for|^for))(?![[:word:]]))", end: "(?<![#\\-:!?.@*/&%^+<=>|~$])=(?![#\\-:!?.@*/&%^+<=>|~$])", endCaptures: { 0: { name: "support.type strong" } }, patterns: [{ include: "#pattern" }] }, { begin: "(?:(?<=(?:[^#\\-:!?.@*/&%^+<=>|~$]=|^=))(?![#\\-:!?.@*/&%^+<=>|~$]))", end: "\\b(?:downto|to)\\b", endCaptures: { 0: { name: "keyword.control" } }, patterns: [{ include: "#term" }] }, { begin: "(?:(?<=(?:[^[:word:]]to|^to))(?![[:word:]]))", end: "\\bdo\\b", endCaptures: { 0: { name: "keyword.control" } }, patterns: [{ include: "#term" }] }, { begin: "(?:(?<=(?:[^[:word:]]do|^do))(?![[:word:]]))", end: "(?=\\bdone\\b)", patterns: [{ include: "#term" }] }] }] }, termFunction: { captures: { 1: { name: "storage.type" }, 2: { name: "storage.type" } }, match: "\\b(?:(fun)|(function))\\b" }, termLet: { patterns: [{ begin: "(?:(?:(?<=(?:[^#\\-:!?.@*/&%^+<=>|~$]=|^=|[^#\\-:!?.@*/&%^+<=>|~$]->|^->))(?![#\\-:!?.@*/&%^+<=>|~$]))|(?<=;|\\())(?=[[:space:]]|\\blet\\b)|(?:(?<=(?:[^[:word:]]begin|^begin|[^[:word:]]do|^do|[^[:word:]]else|^else|[^[:word:]]in|^in|[^[:word:]]struct|^struct|[^[:word:]]then|^then|[^[:word:]]try|^try))(?![[:word:]]))|(?:(?<=(?:[^#\\-:!?.@*/&%^+<=>|~$]@@|^@@))(?![#\\-:!?.@*/&%^+<=>|~$]))[[:space:]]+", end: "\\b(?:(and)|(let))\\b|(?=[^[:space:]])(?!\\(\\*)", endCaptures: { 1: { name: "variable.other.class.js message.error variable.interpolation string.regexp markup.underline" }, 2: { name: "storage.type markup.underline" } }, patterns: [{ include: "#comment" }] }, { begin: "(?:(?<=(?:[^[:word:]]and|^and|[^[:word:]]let|^let))(?![[:word:]]))|(let)", beginCaptures: { 1: { name: "storage.type markup.underline" } }, end: "\\b(?:(and)|(in))\\b|(?=\\}|\\)|\\]|\\b(?:end|class|exception|external|include|inherit|initializer|let|method|module|open|type|val)\\b)", endCaptures: { 1: { name: "variable.other.class.js message.error variable.interpolation string.regexp markup.underline" }, 2: { name: "storage.type markup.underline" } }, patterns: [{ include: "#bindTerm" }] }] }, termMatch: { begin: "\\bmatch\\b", captures: { 0: { name: "keyword.control" } }, end: "\\bwith\\b", patterns: [{ include: "#term" }] }, termMatchRule: { patterns: [{ begin: "(?:(?<=(?:[^[:word:]]fun|^fun|[^[:word:]]function|^function|[^[:word:]]with|^with))(?![[:word:]]))", end: "(?<![#\\-:!?.@*/&%^+<=>|~$])(\\|)|(->)(?![#\\-:!?.@*/&%^+<=>|~$])", endCaptures: { 1: { name: "support.type strong" }, 2: { name: "support.type strong" } }, patterns: [{ include: "#comment" }, { include: "#attributeIdentifier" }, { include: "#pattern" }] }, { begin: "(?:(?<=(?:[^\\[#\\-:!?.@*/&%^+<=>|~$]\\||^\\|))(?![#\\-:!?.@*/&%^+<=>|~$]))|(?<![#\\-:!?.@*/&%^+<=>|~$])\\|(?![#\\-:!?.@*/&%^+<=>|~$])", beginCaptures: { 0: { name: "support.type strong" } }, end: "(?<![#\\-:!?.@*/&%^+<=>|~$])(\\|)|(->)(?![#\\-:!?.@*/&%^+<=>|~$])", endCaptures: { 1: { name: "support.type strong" }, 2: { name: "support.type strong" } }, patterns: [{ include: "#pattern" }, { begin: "\\bwhen\\b", beginCaptures: { 0: { name: "variable.other.class.js message.error variable.interpolation string.regexp" } }, end: "(?=(?<![#\\-:!?.@*/&%^+<=>|~$])->(?![#\\-:!?.@*/&%^+<=>|~$]))", patterns: [{ include: "#term" }] }] }] }, termOperator: { patterns: [{ begin: "(?<![#\\-:!?.@*/&%^+<=>|~$])#(?![#\\-:!?.@*/&%^+<=>|~$])", beginCaptures: { 0: { name: "keyword" } }, end: `(?:(?!\\b(?:and|'|as|asr|assert|\\*|begin|class|:|,|@|constraint|do|done|downto|else|end|=|exception|external|false|for|\\.|fun|function|functor|>|-|if|in|include|inherit|initializer|land|lazy|\\{|\\(|\\[|<|let|lor|lsl|lsr|lxor|match|method|mod|module|mutable|new|nonrec|#|object|of|open|or|%|\\+|private|\\?|"|rec|\\\\|\\}|\\)|\\]|;|sig|/|struct|then|~|to|true|try|type|val|\\||virtual|when|while|with)\\b(?:[^']|$))\\b(?=[[:lower:]_])[[:alpha:]_][[:word:]']*)`, endCaptures: { 0: { name: "entity.name.function" } } }, { captures: { 0: { name: "keyword.control strong" } }, match: "<-" }, { captures: { 1: { name: "variable.other.class.js message.error variable.interpolation string.regexp" }, 2: { name: "variable.other.class.js message.error variable.interpolation string.regexp" } }, match: "(,|[#\\-:!?.@*/&%^+<=>|~$]+)|(;)" }, { match: "\\b(?:and|assert|asr|land|lazy|lsr|lxor|mod|new|or)\\b", name: "variable.other.class.js message.error variable.interpolation string.regexp" }] }, termPun: { applyEndPatternLast: !0, begin: "(?<![#\\-:!?.@*/&%^+<=>|~$])\\?|~(?![#\\-:!?.@*/&%^+<=>|~$])", beginCaptures: { 0: { name: "variable.other.class.js message.error variable.interpolation string.regexp" } }, end: ":|(?=[^[:space:]:])", endCaptures: { 0: { name: "keyword" } }, patterns: [{ begin: "(?:(?<=(?:[^#\\-:!?.@*/&%^+<=>|~$]\\?|^\\?|[^#\\-:!?.@*/&%^+<=>|~$]~|^~))(?![#\\-:!?.@*/&%^+<=>|~$]))", end: `(?:(?!\\b(?:and|'|as|asr|assert|\\*|begin|class|:|,|@|constraint|do|done|downto|else|end|=|exception|external|false|for|\\.|fun|function|functor|>|-|if|in|include|inherit|initializer|land|lazy|\\{|\\(|\\[|<|let|lor|lsl|lsr|lxor|match|method|mod|module|mutable|new|nonrec|#|object|of|open|or|%|\\+|private|\\?|"|rec|\\\\|\\}|\\)|\\]|;|sig|/|struct|then|~|to|true|try|type|val|\\||virtual|when|while|with)\\b(?:[^']|$))\\b(?=[[:lower:]_])[[:alpha:]_][[:word:]']*)`, endCaptures: { 0: { name: "markup.inserted constant.language support.constant.property-value entity.name.filename" } } }] }, termTry: { begin: "\\btry\\b", captures: { 0: { name: "keyword.control" } }, end: "\\bwith\\b", patterns: [{ include: "#term" }] }, termWhile: { patterns: [{ begin: "\\bwhile\\b", beginCaptures: { 0: { name: "keyword.control" } }, end: "\\bdone\\b", endCaptures: { 0: { name: "keyword.control" } }, patterns: [{ begin: "(?:(?<=(?:[^[:word:]]while|^while))(?![[:word:]]))", end: "\\bdo\\b", endCaptures: { 0: { name: "keyword.control" } }, patterns: [{ include: "#term" }] }, { begin: "(?:(?<=(?:[^[:word:]]do|^do))(?![[:word:]]))", end: "(?=\\bdone\\b)", patterns: [{ include: "#term" }] }] }] }, type: { patterns: [{ include: "#comment" }, { match: "\\bnonrec\\b", name: "variable.other.class.js message.error variable.interpolation string.regexp" }, { include: "#pathModulePrefixExtended" }, { include: "#typeLabel" }, { include: "#typeObject" }, { include: "#typeOperator" }, { include: "#typeParens" }, { include: "#typePolymorphicVariant" }, { include: "#typeRecord" }, { include: "#typeConstructor" }] }, typeConstructor: { patterns: [{ begin: `(_)|((?:(?!\\b(?:and|'|as|asr|assert|\\*|begin|class|:|,|@|constraint|do|done|downto|else|end|=|exception|external|false|for|\\.|fun|function|functor|>|-|if|in|include|inherit|initializer|land|lazy|\\{|\\(|\\[|<|let|lor|lsl|lsr|lxor|match|method|mod|module|mutable|new|nonrec|#|object|of|open|or|%|\\+|private|\\?|"|rec|\\\\|\\}|\\)|\\]|;|sig|/|struct|then|~|to|true|try|type|val|\\||virtual|when|while|with)\\b(?:[^']|$))\\b(?=[[:lower:]_])[[:alpha:]_][[:word:]']*))|(')((?:(?!\\b(?:and|'|as|asr|assert|\\*|begin|class|:|,|@|constraint|do|done|downto|else|end|=|exception|external|false|for|\\.|fun|function|functor|>|-|if|in|include|inherit|initializer|land|lazy|\\{|\\(|\\[|<|let|lor|lsl|lsr|lxor|match|method|mod|module|mutable|new|nonrec|#|object|of|open|or|%|\\+|private|\\?|"|rec|\\\\|\\}|\\)|\\]|;|sig|/|struct|then|~|to|true|try|type|val|\\||virtual|when|while|with)\\b(?:[^']|$))\\b(?=[[:lower:]_])[[:alpha:]_][[:word:]']*))|(?<=[^\\*]\\)|\\])`, beginCaptures: { 1: { name: "comment constant.regexp meta.separator.markdown" }, 3: { name: "string.other.link variable.language variable.parameter emphasis strong emphasis" }, 4: { name: "keyword.control emphasis" } }, end: `(?=\\((?!\\*)|\\*|:|,|=|\\.|>|-|\\{|\\[|\\+|\\}|\\)|\\]|;|\\|)|((?:(?!\\b(?:and|'|as|asr|assert|\\*|begin|class|:|,|@|constraint|do|done|downto|else|end|=|exception|external|false|for|\\.|fun|function|functor|>|-|if|in|include|inherit|initializer|land|lazy|\\{|\\(|\\[|<|let|lor|lsl|lsr|lxor|match|method|mod|module|mutable|new|nonrec|#|object|of|open|or|%|\\+|private|\\?|"|rec|\\\\|\\}|\\)|\\]|;|sig|/|struct|then|~|to|true|try|type|val|\\||virtual|when|while|with)\\b(?:[^']|$))\\b(?=[[:lower:]_])[[:alpha:]_][[:word:]']*))[:space:]*(?!\\(\\*|[[:word:]])|(?=;;|\\}|\\)|\\]|\\b(?:end|and|class|exception|external|in|include|inherit|initializer|let|method|module|open|type|val)\\b)`, endCaptures: { 1: { name: "entity.name.function strong" } }, patterns: [{ include: "#comment" }, { include: "#pathModulePrefixExtended" }] }] }, typeLabel: { patterns: [{ begin: `(\\??)((?:(?!\\b(?:and|'|as|asr|assert|\\*|begin|class|:|,|@|constraint|do|done|downto|else|end|=|exception|external|false|for|\\.|fun|function|functor|>|-|if|in|include|inherit|initializer|land|lazy|\\{|\\(|\\[|<|let|lor|lsl|lsr|lxor|match|method|mod|module|mutable|new|nonrec|#|object|of|open|or|%|\\+|private|\\?|"|rec|\\\\|\\}|\\)|\\]|;|sig|/|struct|then|~|to|true|try|type|val|\\||virtual|when|while|with)\\b(?:[^']|$))\\b(?=[[:lower:]_])[[:alpha:]_][[:word:]']*))[[:space:]]*((?<![#\\-:!?.@*/&%^+<=>|~$]):(?![#\\-:!?.@*/&%^+<=>|~$]))`, captures: { 1: { name: "keyword strong emphasis" }, 2: { name: "markup.inserted constant.language support.constant.property-value entity.name.filename emphasis" }, 3: { name: "keyword" } }, end: "(?=(?<![#\\-:!?.@*/&%^+<=>|~$])->(?![#\\-:!?.@*/&%^+<=>|~$]))", patterns: [{ include: "#type" }] }] }, typeModule: { begin: "\\bmodule\\b", beginCaptures: { 0: { name: "markup.inserted constant.language support.constant.property-value entity.name.filename" } }, end: "(?=\\))", patterns: [{ include: "#pathModuleExtended" }, { include: "#signatureConstraints" }] }, typeObject: { begin: "<", captures: { 0: { name: "constant.language constant.numeric entity.other.attribute-name.id.css strong strong" } }, end: ">", patterns: [{ begin: "(?<=<|;)", end: "(:)|(?=>)", endCaptures: { 1: { name: "variable.other.class.js message.error variable.interpolation string.regexp strong" }, 3: { name: "variable.other.class.js message.error variable.interpolation string.regexp" }, 4: { name: "variable.other.class.js message.error variable.interpolation string.regexp" } }, patterns: [{ include: "#comment" }, { include: "#pathModulePrefixSimple" }, { match: `(?:(?!\\b(?:and|'|as|asr|assert|\\*|begin|class|:|,|@|constraint|do|done|downto|else|end|=|exception|external|false|for|\\.|fun|function|functor|>|-|if|in|include|inherit|initializer|land|lazy|\\{|\\(|\\[|<|let|lor|lsl|lsr|lxor|match|method|mod|module|mutable|new|nonrec|#|object|of|open|or|%|\\+|private|\\?|"|rec|\\\\|\\}|\\)|\\]|;|sig|/|struct|then|~|to|true|try|type|val|\\||virtual|when|while|with)\\b(?:[^']|$))\\b(?=[[:lower:]_])[[:alpha:]_][[:word:]']*)`, name: "markup.inserted constant.language support.constant.property-value entity.name.filename emphasis" }] }, { begin: "(?:(?<=(?:[^#\\-:!?.@*/&%^+<=>|~$]:|^:))(?![#\\-:!?.@*/&%^+<=>|~$]))", end: "(;)|(?=>)", endCaptures: { 1: { name: "variable.other.class.js message.error variable.interpolation string.regexp" }, 2: { name: "support.type strong" } }, patterns: [{ include: "#type" }] }] }, typeOperator: { patterns: [{ match: ",|;|[#\\-:!?.@*/&%^+<=>|~$]+", name: "variable.other.class.js message.error variable.interpolation string.regexp strong" }] }, typeParens: { begin: "\\(", captures: { 0: { name: "punctuation.definition.tag" } }, end: "\\)", patterns: [{ match: ",", name: "variable.other.class.js message.error variable.interpolation string.regexp" }, { include: "#typeModule" }, { include: "#type" }] }, typePolymorphicVariant: { begin: "\\[", end: "\\]", patterns: [] }, typeRecord: { begin: "\\{", captures: { 0: { name: "constant.language constant.numeric entity.other.attribute-name.id.css strong strong" } }, end: "\\}", patterns: [{ begin: "(?<=\\{|;)", end: "(:)|(=)|(;)|(with)|(?=\\})", endCaptures: { 1: { name: "variable.other.class.js message.error variable.interpolation string.regexp strong" }, 2: { name: "support.type strong" }, 3: { name: "variable.other.class.js message.error variable.interpolation string.regexp" }, 4: { name: "variable.other.class.js message.error variable.interpolation string.regexp" } }, patterns: [{ include: "#comment" }, { include: "#pathModulePrefixSimple" }, { match: `(?:(?!\\b(?:and|'|as|asr|assert|\\*|begin|class|:|,|@|constraint|do|done|downto|else|end|=|exception|external|false|for|\\.|fun|function|functor|>|-|if|in|include|inherit|initializer|land|lazy|\\{|\\(|\\[|<|let|lor|lsl|lsr|lxor|match|method|mod|module|mutable|new|nonrec|#|object|of|open|or|%|\\+|private|\\?|"|rec|\\\\|\\}|\\)|\\]|;|sig|/|struct|then|~|to|true|try|type|val|\\||virtual|when|while|with)\\b(?:[^']|$))\\b(?=[[:lower:]_])[[:alpha:]_][[:word:]']*)`, name: "markup.inserted constant.language support.constant.property-value entity.name.filename emphasis" }] }, { begin: "(?:(?<=(?:[^[:word:]]with|^with))(?![[:word:]]))", end: "(:)|(=)|(;)|(?=\\})", endCaptures: { 1: { name: "variable.other.class.js message.error variable.interpolation string.regexp strong" }, 2: { name: "support.type strong" }, 3: { name: "variable.other.class.js message.error variable.interpolation string.regexp" } }, patterns: [{ match: `(?:(?!\\b(?:and|'|as|asr|assert|\\*|begin|class|:|,|@|constraint|do|done|downto|else|end|=|exception|external|false|for|\\.|fun|function|functor|>|-|if|in|include|inherit|initializer|land|lazy|\\{|\\(|\\[|<|let|lor|lsl|lsr|lxor|match|method|mod|module|mutable|new|nonrec|#|object|of|open|or|%|\\+|private|\\?|"|rec|\\\\|\\}|\\)|\\]|;|sig|/|struct|then|~|to|true|try|type|val|\\||virtual|when|while|with)\\b(?:[^']|$))\\b(?=[[:lower:]_])[[:alpha:]_][[:word:]']*)`, name: "markup.inserted constant.language support.constant.property-value entity.name.filename emphasis" }] }, { begin: "(?:(?<=(?:[^#\\-:!?.@*/&%^+<=>|~$]:|^:))(?![#\\-:!?.@*/&%^+<=>|~$]))", end: "(;)|(=)|(?=\\})", endCaptures: { 1: { name: "variable.other.class.js message.error variable.interpolation string.regexp" }, 2: { name: "support.type strong" } }, patterns: [{ include: "#type" }] }, { begin: "(?:(?<=(?:[^#\\-:!?.@*/&%^+<=>|~$]=|^=))(?![#\\-:!?.@*/&%^+<=>|~$]))", end: ";|(?=\\})", endCaptures: { 0: { name: "variable.other.class.js message.error variable.interpolation string.regexp" } }, patterns: [{ include: "#type" }] }] }, variableModule: { captures: { 0: { name: "string.other.link variable.language variable.parameter emphasis" } }, match: "(?:\\b(?=[[:upper:]])[[:alpha:]_][[:word:]']*)" }, variablePattern: { captures: { 1: { name: "comment constant.regexp meta.separator.markdown" }, 2: { name: "string.other.link variable.language variable.parameter emphasis" } }, match: `(\\b_\\b)|((?:(?!\\b(?:and|'|as|asr|assert|\\*|begin|class|:|,|@|constraint|do|done|downto|else|end|=|exception|external|false|for|\\.|fun|function|functor|>|-|if|in|include|inherit|initializer|land|lazy|\\{|\\(|\\[|<|let|lor|lsl|lsr|lxor|match|method|mod|module|mutable|new|nonrec|#|object|of|open|or|%|\\+|private|\\?|"|rec|\\\\|\\}|\\)|\\]|;|sig|/|struct|then|~|to|true|try|type|val|\\||virtual|when|while|with)\\b(?:[^']|$))\\b(?=[[:lower:]_])[[:alpha:]_][[:word:]']*))` } }, scopeName: "source.ocaml" });
var wn = [
  kn
];
const vn = Object.freeze({ displayName: "Perl", name: "perl", patterns: [{ include: "#line_comment" }, { begin: "^(?==[a-zA-Z]+)", end: "^(=cut\\b.*$)", endCaptures: { 1: { patterns: [{ include: "#pod" }] } }, name: "comment.block.documentation.perl", patterns: [{ include: "#pod" }] }, { include: "#variable" }, { applyEndPatternLast: 1, begin: "\\b(?=qr\\s*[^\\s\\w])", comment: "string.regexp.compile.perl", end: "((([egimosxradlupcn]*)))(?=(\\s+\\S|\\s*[;\\,\\#\\{\\}\\)]|\\s*$))", endCaptures: { 1: { name: "string.regexp.compile.perl" }, 2: { name: "punctuation.definition.string.perl" }, 3: { name: "keyword.control.regexp-option.perl" } }, patterns: [{ begin: "(qr)\\s*\\{", captures: { 0: { name: "punctuation.definition.string.perl" }, 1: { name: "support.function.perl" } }, end: "\\}", name: "string.regexp.compile.nested_braces.perl", patterns: [{ include: "#escaped_char" }, { include: "#variable" }, { include: "#nested_braces_interpolated" }] }, { begin: "(qr)\\s*\\[", captures: { 0: { name: "punctuation.definition.string.perl" }, 1: { name: "support.function.perl" } }, end: "\\]", name: "string.regexp.compile.nested_brackets.perl", patterns: [{ include: "#escaped_char" }, { include: "#variable" }, { include: "#nested_brackets_interpolated" }] }, { begin: "(qr)\\s*<", captures: { 0: { name: "punctuation.definition.string.perl" }, 1: { name: "support.function.perl" } }, end: ">", name: "string.regexp.compile.nested_ltgt.perl", patterns: [{ include: "#escaped_char" }, { include: "#variable" }, { include: "#nested_ltgt_interpolated" }] }, { begin: "(qr)\\s*\\(", captures: { 0: { name: "punctuation.definition.string.perl" }, 1: { name: "support.function.perl" } }, end: "\\)", name: "string.regexp.compile.nested_parens.perl", patterns: [{ comment: "This is to prevent thinks like qr/foo$/ to treat $/ as a variable", match: "\\$(?=[^\\s\\w\\\\'\\{\\[\\(\\<])" }, { include: "#escaped_char" }, { include: "#variable" }, { include: "#nested_parens_interpolated" }] }, { begin: "(qr)\\s*'", captures: { 0: { name: "punctuation.definition.string.perl" }, 1: { name: "support.function.perl" } }, end: "'", name: "string.regexp.compile.single-quote.perl", patterns: [{ include: "#escaped_char" }] }, { begin: "(qr)\\s*([^\\s\\w'\\{\\[\\(\\<])", captures: { 0: { name: "punctuation.definition.string.perl" }, 1: { name: "support.function.perl" } }, end: "\\2", name: "string.regexp.compile.simple-delimiter.perl", patterns: [{ comment: "This is to prevent thinks like qr/foo$/ to treat $/ as a variable", match: "\\$(?=[^\\s\\w'\\{\\[\\(\\<])", name: "keyword.control.anchor.perl" }, { include: "#escaped_char" }, { include: "#variable" }, { include: "#nested_parens_interpolated" }] }] }, { applyEndPatternLast: 1, begin: "(?<!\\{|\\+|\\-)\\b(?=m\\s*[^\\sa-zA-Z0-9])", comment: "string.regexp.find-m.perl", end: "((([egimosxradlupcn]*)))(?=(\\s+\\S|\\s*[;\\,\\#\\{\\}\\)]|\\s*$))", endCaptures: { 1: { name: "string.regexp.find-m.perl" }, 2: { name: "punctuation.definition.string.perl" }, 3: { name: "keyword.control.regexp-option.perl" } }, patterns: [{ begin: "(m)\\s*\\{", captures: { 0: { name: "punctuation.definition.string.perl" }, 1: { name: "support.function.perl" } }, end: "\\}", name: "string.regexp.find-m.nested_braces.perl", patterns: [{ include: "#escaped_char" }, { include: "#variable" }, { include: "#nested_braces_interpolated" }] }, { begin: "(m)\\s*\\[", captures: { 0: { name: "punctuation.definition.string.perl" }, 1: { name: "support.function.perl" } }, end: "\\]", name: "string.regexp.find-m.nested_brackets.perl", patterns: [{ include: "#escaped_char" }, { include: "#variable" }, { include: "#nested_brackets_interpolated" }] }, { begin: "(m)\\s*<", captures: { 0: { name: "punctuation.definition.string.perl" }, 1: { name: "support.function.perl" } }, end: ">", name: "string.regexp.find-m.nested_ltgt.perl", patterns: [{ include: "#escaped_char" }, { include: "#variable" }, { include: "#nested_ltgt_interpolated" }] }, { begin: "(m)\\s*\\(", captures: { 0: { name: "punctuation.definition.string.perl" }, 1: { name: "support.function.perl" } }, end: "\\)", name: "string.regexp.find-m.nested_parens.perl", patterns: [{ include: "#escaped_char" }, { include: "#variable" }, { include: "#nested_parens_interpolated" }] }, { begin: "(m)\\s*'", captures: { 0: { name: "punctuation.definition.string.perl" }, 1: { name: "support.function.perl" } }, end: "'", name: "string.regexp.find-m.single-quote.perl", patterns: [{ include: "#escaped_char" }] }, { begin: "\\G(?<!\\{|\\+|\\-)(m)(?!_)\\s*([^\\sa-zA-Z0-9'\\{\\[\\(\\<])", captures: { 0: { name: "punctuation.definition.string.perl" }, 1: { name: "support.function.perl" } }, end: "\\2", name: "string.regexp.find-m.simple-delimiter.perl", patterns: [{ comment: "This is to prevent thinks like qr/foo$/ to treat $/ as a variable", match: "\\$(?=[^\\sa-zA-Z0-9'\\{\\[\\(\\<])", name: "keyword.control.anchor.perl" }, { include: "#escaped_char" }, { include: "#variable" }, { begin: "\\[", beginCaptures: { 1: { name: "punctuation.definition.character-class.begin.perl" } }, end: "\\]", endCaptures: { 1: { name: "punctuation.definition.character-class.end.perl" } }, name: "constant.other.character-class.set.perl", patterns: [{ comment: "This is to prevent thinks like qr/foo$/ to treat $/ as a variable", match: "\\$(?=[^\\s\\w'\\{\\[\\(\\<])", name: "keyword.control.anchor.perl" }, { include: "#escaped_char" }] }, { include: "#nested_parens_interpolated" }] }] }, { applyEndPatternLast: 1, begin: "\\b(?=(?<!\\&)(s)(\\s+\\S|\\s*[;\\,\\{\\}\\(\\)\\[<]|$))", comment: "string.regexp.replace.perl", end: "((([egimosxradlupcn]*)))(?=(\\s+\\S|\\s*[;\\,\\{\\}\\)\\]>]|\\s*$))", endCaptures: { 1: { name: "string.regexp.replace.perl" }, 2: { name: "punctuation.definition.string.perl" }, 3: { name: "keyword.control.regexp-option.perl" } }, patterns: [{ begin: "(s)\\s*\\{", captures: { 0: { name: "punctuation.definition.string.perl" }, 1: { name: "support.function.perl" } }, end: "\\}", name: "string.regexp.nested_braces.perl", patterns: [{ include: "#escaped_char" }, { include: "#nested_braces" }] }, { begin: "(s)\\s*\\[", captures: { 0: { name: "punctuation.definition.string.perl" }, 1: { name: "support.function.perl" } }, end: "\\]", name: "string.regexp.nested_brackets.perl", patterns: [{ include: "#escaped_char" }, { include: "#nested_brackets" }] }, { begin: "(s)\\s*<", captures: { 0: { name: "punctuation.definition.string.perl" }, 1: { name: "support.function.perl" } }, end: ">", name: "string.regexp.nested_ltgt.perl", patterns: [{ include: "#escaped_char" }, { include: "#nested_ltgt" }] }, { begin: "(s)\\s*\\(", captures: { 0: { name: "punctuation.definition.string.perl" }, 1: { name: "support.function.perl" } }, end: "\\)", name: "string.regexp.nested_parens.perl", patterns: [{ include: "#escaped_char" }, { include: "#nested_parens" }] }, { begin: "\\{", captures: { 0: { name: "punctuation.definition.string.perl" } }, end: "\\}", name: "string.regexp.format.nested_braces.perl", patterns: [{ include: "#escaped_char" }, { include: "#variable" }, { include: "#nested_braces_interpolated" }] }, { begin: "\\[", captures: { 0: { name: "punctuation.definition.string.perl" } }, end: "\\]", name: "string.regexp.format.nested_brackets.perl", patterns: [{ include: "#escaped_char" }, { include: "#variable" }, { include: "#nested_brackets_interpolated" }] }, { begin: "<", captures: { 0: { name: "punctuation.definition.string.perl" } }, end: ">", name: "string.regexp.format.nested_ltgt.perl", patterns: [{ include: "#escaped_char" }, { include: "#variable" }, { include: "#nested_ltgt_interpolated" }] }, { begin: "\\(", captures: { 0: { name: "punctuation.definition.string.perl" } }, end: "\\)", name: "string.regexp.format.nested_parens.perl", patterns: [{ include: "#escaped_char" }, { include: "#variable" }, { include: "#nested_parens_interpolated" }] }, { begin: "'", captures: { 0: { name: "punctuation.definition.string.perl" } }, end: "'", name: "string.regexp.format.single_quote.perl", patterns: [{ match: "\\\\['\\\\]", name: "constant.character.escape.perl" }] }, { begin: "([^\\s\\w\\[({<;])", captures: { 0: { name: "punctuation.definition.string.perl" } }, end: "\\1", name: "string.regexp.format.simple_delimiter.perl", patterns: [{ include: "#escaped_char" }, { include: "#variable" }] }, { match: "\\s+" }] }, { begin: "\\b(?=s([^\\sa-zA-Z0-9\\[({<]).*\\1([egimosxradlupcn]*)([\\}\\)\\;\\,]|\\s+))", comment: "string.regexp.replaceXXX", end: "((([egimosxradlupcn]*)))(?=([\\}\\)\\;\\,]|\\s+|\\s*$))", endCaptures: { 1: { name: "string.regexp.replace.perl" }, 2: { name: "punctuation.definition.string.perl" }, 3: { name: "keyword.control.regexp-option.perl" } }, patterns: [{ begin: "(s\\s*)([^\\sa-zA-Z0-9\\[({<])", captures: { 0: { name: "punctuation.definition.string.perl" }, 1: { name: "support.function.perl" } }, end: "(?=\\2)", name: "string.regexp.replaceXXX.simple_delimiter.perl", patterns: [{ include: "#escaped_char" }] }, { begin: "'", captures: { 0: { name: "punctuation.definition.string.perl" } }, end: "'", name: "string.regexp.replaceXXX.format.single_quote.perl", patterns: [{ match: "\\\\['\\\\]", name: "constant.character.escape.perl.perl" }] }, { begin: "([^\\sa-zA-Z0-9\\[({<])", captures: { 0: { name: "punctuation.definition.string.perl" } }, end: "\\1", name: "string.regexp.replaceXXX.format.simple_delimiter.perl", patterns: [{ include: "#escaped_char" }, { include: "#variable" }] }] }, { begin: "\\b(?=(?<!\\\\)s\\s*([^\\s\\w\\[({<>]))", comment: "string.regexp.replace.extended", end: "((([egimosradlupc]*x[egimosradlupc]*)))\\b", endCaptures: { 1: { name: "string.regexp.replace.perl" }, 2: { name: "punctuation.definition.string.perl" }, 3: { name: "keyword.control.regexp-option.perl" } }, patterns: [{ begin: "(s)\\s*(.)", captures: { 0: { name: "punctuation.definition.string.perl" }, 1: { name: "support.function.perl" } }, end: "(?=\\2)", name: "string.regexp.replace.extended.simple_delimiter.perl", patterns: [{ include: "#escaped_char" }] }, { begin: "'", captures: { 0: { name: "punctuation.definition.string.perl" } }, end: "'(?=[egimosradlupc]*x[egimosradlupc]*)\\b", name: "string.regexp.replace.extended.simple_delimiter.perl", patterns: [{ include: "#escaped_char" }] }, { begin: "(.)", captures: { 0: { name: "punctuation.definition.string.perl" } }, end: "\\1(?=[egimosradlupc]*x[egimosradlupc]*)\\b", name: "string.regexp.replace.extended.simple_delimiter.perl", patterns: [{ include: "#escaped_char" }, { include: "#variable" }] }] }, { begin: "(?<=\\(|\\{|~|&|\\||if|unless|^)\\s*((\\/))", beginCaptures: { 1: { name: "string.regexp.find.perl" }, 2: { name: "punctuation.definition.string.perl" } }, contentName: "string.regexp.find.perl", end: "((\\1([egimosxradlupcn]*)))(?=(\\s+\\S|\\s*[;\\,\\#\\{\\}\\)]|\\s*$))", endCaptures: { 1: { name: "string.regexp.find.perl" }, 2: { name: "punctuation.definition.string.perl" }, 3: { name: "keyword.control.regexp-option.perl" } }, patterns: [{ comment: "This is to prevent thinks like /foo$/ to treat $/ as a variable", match: "\\$(?=\\/)", name: "keyword.control.anchor.perl" }, { include: "#escaped_char" }, { include: "#variable" }] }, { captures: { 1: { name: "constant.other.key.perl" } }, match: "\\b(\\w+)\\s*(?==>)" }, { match: "(?<={)\\s*\\w+\\s*(?=})", name: "constant.other.bareword.perl" }, { captures: { 1: { name: "keyword.control.perl" }, 2: { name: "entity.name.type.class.perl" } }, match: "^\\s*(package)\\s+([^\\s;]+)", name: "meta.class.perl" }, { captures: { 1: { name: "storage.type.sub.perl" }, 2: { name: "entity.name.function.perl" }, 3: { name: "storage.type.method.perl" } }, match: "\\b(sub)(?:\\s+([-a-zA-Z0-9_]+))?\\s*(?:\\([\\$\\@\\*;]*\\))?[^\\w\\{]", name: "meta.function.perl" }, { captures: { 1: { name: "entity.name.function.perl" }, 2: { name: "punctuation.definition.parameters.perl" }, 3: { name: "variable.parameter.function.perl" } }, match: "^\\s*(BEGIN|UNITCHECK|CHECK|INIT|END|DESTROY)\\b", name: "meta.function.perl" }, { begin: "^(?=(\\t| {4}))", end: "(?=[^\\t\\s])", name: "meta.leading-tabs", patterns: [{ captures: { 1: { name: "meta.odd-tab" }, 2: { name: "meta.even-tab" } }, match: "(\\t| {4})(\\t| {4})?" }] }, { captures: { 1: { name: "support.function.perl" }, 2: { name: "punctuation.definition.string.perl" }, 5: { name: "punctuation.definition.string.perl" }, 8: { name: "punctuation.definition.string.perl" } }, match: "\\b(tr|y)\\s*([^A-Za-z0-9\\s])(.*?)(?<!\\\\)(\\\\{2})*(\\2)(.*?)(?<!\\\\)(\\\\{2})*(\\2)", name: "string.regexp.replace.perl" }, { match: "\\b(__FILE__|__LINE__|__PACKAGE__|__SUB__)\\b", name: "constant.language.perl" }, { begin: "\\b(__DATA__|__END__)\\n?", beginCaptures: { 1: { name: "constant.language.perl" } }, contentName: "comment.block.documentation.perl", end: "\\z", patterns: [{ include: "#pod" }] }, { match: "(?<!->)\\b(continue|default|die|do|else|elsif|exit|for|foreach|given|goto|if|last|next|redo|return|select|unless|until|wait|when|while|switch|case|require|use|eval)\\b", name: "keyword.control.perl" }, { match: "\\b(my|our|local)\\b", name: "storage.modifier.perl" }, { match: "(?<!\\w)\\-[rwxoRWXOezsfdlpSbctugkTBMAC]\\b", name: "keyword.operator.filetest.perl" }, { match: "\\b(and|or|xor|as|not)\\b", name: "keyword.operator.logical.perl" }, { match: "(<=>|=>|->)", name: "keyword.operator.comparison.perl" }, { include: "#heredoc" }, { begin: "\\bqq\\s*([^\\(\\{\\[\\<\\w\\s])", beginCaptures: { 0: { name: "punctuation.definition.string.begin.perl" } }, end: "\\1", endCaptures: { 0: { name: "punctuation.definition.string.end.perl" } }, name: "string.quoted.other.qq.perl", patterns: [{ include: "#escaped_char" }, { include: "#variable" }] }, { begin: "\\bqx\\s*([^'\\(\\{\\[\\<\\w\\s])", beginCaptures: { 0: { name: "punctuation.definition.string.begin.perl" } }, end: "\\1", endCaptures: { 0: { name: "punctuation.definition.string.end.perl" } }, name: "string.interpolated.qx.perl", patterns: [{ include: "#escaped_char" }, { include: "#variable" }] }, { begin: "\\bqx\\s*'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.perl" } }, end: "'", endCaptures: { 0: { name: "punctuation.definition.string.end.perl" } }, name: "string.interpolated.qx.single-quote.perl", patterns: [{ include: "#escaped_char" }] }, { begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.perl" } }, end: '"', endCaptures: { 0: { name: "punctuation.definition.string.end.perl" } }, name: "string.quoted.double.perl", patterns: [{ include: "#escaped_char" }, { include: "#variable" }] }, { begin: "(?<!->)\\bqw?\\s*([^\\(\\{\\[\\<\\w\\s])", beginCaptures: { 0: { name: "punctuation.definition.string.begin.perl" } }, end: "\\1", endCaptures: { 0: { name: "punctuation.definition.string.end.perl" } }, name: "string.quoted.other.q.perl" }, { begin: "'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.perl" } }, end: "'", endCaptures: { 0: { name: "punctuation.definition.string.end.perl" } }, name: "string.quoted.single.perl", patterns: [{ match: "\\\\['\\\\]", name: "constant.character.escape.perl" }] }, { begin: "`", beginCaptures: { 0: { name: "punctuation.definition.string.begin.perl" } }, end: "`", endCaptures: { 0: { name: "punctuation.definition.string.end.perl" } }, name: "string.interpolated.perl", patterns: [{ include: "#escaped_char" }, { include: "#variable" }] }, { begin: "(?<!->)\\bqq\\s*\\(", beginCaptures: { 0: { name: "punctuation.definition.string.begin.perl" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.string.end.perl" } }, name: "string.quoted.other.qq-paren.perl", patterns: [{ include: "#escaped_char" }, { include: "#nested_parens_interpolated" }, { include: "#variable" }] }, { begin: "\\bqq\\s*\\{", beginCaptures: { 0: { name: "punctuation.definition.string.begin.perl" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.string.end.perl" } }, name: "string.quoted.other.qq-brace.perl", patterns: [{ include: "#escaped_char" }, { include: "#nested_braces_interpolated" }, { include: "#variable" }] }, { begin: "\\bqq\\s*\\[", beginCaptures: { 0: { name: "punctuation.definition.string.begin.perl" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.string.end.perl" } }, name: "string.quoted.other.qq-bracket.perl", patterns: [{ include: "#escaped_char" }, { include: "#nested_brackets_interpolated" }, { include: "#variable" }] }, { begin: "\\bqq\\s*\\<", beginCaptures: { 0: { name: "punctuation.definition.string.begin.perl" } }, end: "\\>", endCaptures: { 0: { name: "punctuation.definition.string.end.perl" } }, name: "string.quoted.other.qq-ltgt.perl", patterns: [{ include: "#escaped_char" }, { include: "#nested_ltgt_interpolated" }, { include: "#variable" }] }, { begin: "(?<!->)\\bqx\\s*\\(", beginCaptures: { 0: { name: "punctuation.definition.string.begin.perl" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.string.end.perl" } }, name: "string.interpolated.qx-paren.perl", patterns: [{ include: "#escaped_char" }, { include: "#nested_parens_interpolated" }, { include: "#variable" }] }, { begin: "\\bqx\\s*\\{", beginCaptures: { 0: { name: "punctuation.definition.string.begin.perl" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.string.end.perl" } }, name: "string.interpolated.qx-brace.perl", patterns: [{ include: "#escaped_char" }, { include: "#nested_braces_interpolated" }, { include: "#variable" }] }, { begin: "\\bqx\\s*\\[", beginCaptures: { 0: { name: "punctuation.definition.string.begin.perl" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.string.end.perl" } }, name: "string.interpolated.qx-bracket.perl", patterns: [{ include: "#escaped_char" }, { include: "#nested_brackets_interpolated" }, { include: "#variable" }] }, { begin: "\\bqx\\s*\\<", beginCaptures: { 0: { name: "punctuation.definition.string.begin.perl" } }, end: "\\>", endCaptures: { 0: { name: "punctuation.definition.string.end.perl" } }, name: "string.interpolated.qx-ltgt.perl", patterns: [{ include: "#escaped_char" }, { include: "#nested_ltgt_interpolated" }, { include: "#variable" }] }, { begin: "(?<!->)\\bqw?\\s*\\(", beginCaptures: { 0: { name: "punctuation.definition.string.begin.perl" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.string.end.perl" } }, name: "string.quoted.other.q-paren.perl", patterns: [{ include: "#nested_parens" }] }, { begin: "\\bqw?\\s*\\{", beginCaptures: { 0: { name: "punctuation.definition.string.begin.perl" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.string.end.perl" } }, name: "string.quoted.other.q-brace.perl", patterns: [{ include: "#nested_braces" }] }, { begin: "\\bqw?\\s*\\[", beginCaptures: { 0: { name: "punctuation.definition.string.begin.perl" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.string.end.perl" } }, name: "string.quoted.other.q-bracket.perl", patterns: [{ include: "#nested_brackets" }] }, { begin: "\\bqw?\\s*\\<", beginCaptures: { 0: { name: "punctuation.definition.string.begin.perl" } }, end: "\\>", endCaptures: { 0: { name: "punctuation.definition.string.end.perl" } }, name: "string.quoted.other.q-ltgt.perl", patterns: [{ include: "#nested_ltgt" }] }, { begin: "^__\\w+__", beginCaptures: { 0: { name: "punctuation.definition.string.begin.perl" } }, end: "$", endCaptures: { 0: { name: "punctuation.definition.string.end.perl" } }, name: "string.unquoted.program-block.perl" }, { begin: "\\b(format)\\s+(\\w+)\\s*=", beginCaptures: { 1: { name: "support.function.perl" }, 2: { name: "entity.name.function.format.perl" } }, end: "^\\.\\s*$", name: "meta.format.perl", patterns: [{ include: "#line_comment" }, { include: "#variable" }] }, { captures: { 1: { name: "support.function.perl" }, 2: { name: "entity.name.function.perl" } }, match: "\\b(x)\\s*(\\d+)\\b" }, { match: "\\b(ARGV|DATA|ENV|SIG|STDERR|STDIN|STDOUT|atan2|bind|binmode|bless|caller|chdir|chmod|chomp|chop|chown|chr|chroot|close|closedir|cmp|connect|cos|crypt|dbmclose|dbmopen|defined|delete|dump|each|endgrent|endhostent|endnetent|endprotoent|endpwent|endservent|eof|eq|eval|exec|exists|exp|fcntl|fileno|flock|fork|formline|ge|getc|getgrent|getgrgid|getgrnam|gethostbyaddr|gethostbyname|gethostent|getlogin|getnetbyaddr|getnetbyname|getnetent|getpeername|getpgrp|getppid|getpriority|getprotobyname|getprotobynumber|getprotoent|getpwent|getpwnam|getpwuid|getservbyname|getservbyport|getservent|getsockname|getsockopt|glob|gmtime|grep|gt|hex|import|index|int|ioctl|join|keys|kill|lc|lcfirst|le|length|link|listen|local|localtime|log|lstat|lt|m|map|mkdir|msgctl|msgget|msgrcv|msgsnd|ne|no|oct|open|opendir|ord|pack|pipe|pop|pos|print|printf|push|quotemeta|rand|read|readdir|readlink|recv|ref|rename|reset|reverse|rewinddir|rindex|rmdir|s|say|scalar|seek|seekdir|semctl|semget|semop|send|setgrent|sethostent|setnetent|setpgrp|setpriority|setprotoent|setpwent|setservent|setsockopt|shift|shmctl|shmget|shmread|shmwrite|shutdown|sin|sleep|socket|socketpair|sort|splice|split|sprintf|sqrt|srand|stat|study|substr|symlink|syscall|sysopen|sysread|system|syswrite|tell|telldir|tie|tied|time|times|tr|truncate|uc|ucfirst|umask|undef|unlink|unpack|unshift|untie|utime|values|vec|waitpid|wantarray|warn|write|y)\\b", name: "support.function.perl" }, { captures: { 1: { name: "punctuation.section.scope.begin.perl" }, 2: { name: "punctuation.section.scope.end.perl" } }, comment: "Match empty brackets for ↩ snippet", match: "(\\{)(\\})" }, { captures: { 1: { name: "punctuation.section.scope.begin.perl" }, 2: { name: "punctuation.section.scope.end.perl" } }, comment: "Match empty parenthesis for ↩ snippet", match: "(\\()(\\))" }], repository: { escaped_char: { patterns: [{ match: "\\\\\\d+", name: "constant.character.escape.perl" }, { match: "\\\\c[^\\s\\\\]", name: "constant.character.escape.perl" }, { match: "\\\\g(?:\\{(?:\\w*|-\\d+)\\}|\\d+)", name: "constant.character.escape.perl" }, { match: "\\\\k(?:\\{\\w*\\}|<\\w*>|'\\w*')", name: "constant.character.escape.perl" }, { match: "\\\\N\\{[^\\}]*\\}", name: "constant.character.escape.perl" }, { match: "\\\\o\\{\\d*\\}", name: "constant.character.escape.perl" }, { match: "\\\\(?:p|P)(?:\\{\\w*\\}|P)", name: "constant.character.escape.perl" }, { match: "\\\\x(?:[0-9a-zA-Z]{2}|\\{\\w*\\})?", name: "constant.character.escape.perl" }, { match: "\\\\.", name: "constant.character.escape.perl" }] }, heredoc: { patterns: [{ begin: "((((<<(~)?) *')(HTML)(')))(.*)\\n?", beginCaptures: { 1: { name: "string.unquoted.heredoc.raw.perl" }, 2: { name: "punctuation.definition.string.begin.perl" }, 3: { name: "punctuation.definition.delimiter.begin.perl" }, 7: { name: "punctuation.definition.delimiter.end.perl" }, 8: { patterns: [{ include: "$self" }] } }, contentName: "string.unquoted.heredoc.raw.perl", end: "^((?!\\5)\\s+)?((\\6))$", endCaptures: { 2: { name: "string.unquoted.heredoc.raw.perl" }, 3: { name: "punctuation.definition.string.end.perl" } }, name: "meta.embedded.block.html", patterns: [{ begin: "^", end: "\\n", name: "text.html.basic", patterns: [{ include: "text.html.basic" }] }] }, { begin: "((((<<(~)?) *')(XML)(')))(.*)\\n?", beginCaptures: { 1: { name: "string.unquoted.heredoc.raw.perl" }, 2: { name: "punctuation.definition.string.begin.perl" }, 3: { name: "punctuation.definition.delimiter.begin.perl" }, 7: { name: "punctuation.definition.delimiter.end.perl" }, 8: { patterns: [{ include: "$self" }] } }, contentName: "string.unquoted.heredoc.raw.perl", end: "^((?!\\5)\\s+)?((\\6))$", endCaptures: { 2: { name: "string.unquoted.heredoc.raw.perl" }, 3: { name: "punctuation.definition.string.end.perl" } }, name: "meta.embedded.block.xml", patterns: [{ begin: "^", end: "\\n", name: "text.xml", patterns: [{ include: "text.xml" }] }] }, { begin: "((((<<(~)?) *')(CSS)(')))(.*)\\n?", beginCaptures: { 1: { name: "string.unquoted.heredoc.raw.perl" }, 2: { name: "punctuation.definition.string.begin.perl" }, 3: { name: "punctuation.definition.delimiter.begin.perl" }, 7: { name: "punctuation.definition.delimiter.end.perl" }, 8: { patterns: [{ include: "$self" }] } }, contentName: "string.unquoted.heredoc.raw.perl", end: "^((?!\\5)\\s+)?((\\6))$", endCaptures: { 2: { name: "string.unquoted.heredoc.raw.perl" }, 3: { name: "punctuation.definition.string.end.perl" } }, name: "meta.embedded.block.css", patterns: [{ begin: "^", end: "\\n", name: "source.css", patterns: [{ include: "source.css" }] }] }, { begin: "((((<<(~)?) *')(JAVASCRIPT)(')))(.*)\\n?", beginCaptures: { 1: { name: "string.unquoted.heredoc.raw.perl" }, 2: { name: "punctuation.definition.string.begin.perl" }, 3: { name: "punctuation.definition.delimiter.begin.perl" }, 7: { name: "punctuation.definition.delimiter.end.perl" }, 8: { patterns: [{ include: "$self" }] } }, contentName: "string.unquoted.heredoc.raw.perl", end: "^((?!\\5)\\s+)?((\\6))$", endCaptures: { 2: { name: "string.unquoted.heredoc.raw.perl" }, 3: { name: "punctuation.definition.string.end.perl" } }, name: "meta.embedded.block.js", patterns: [{ begin: "^", end: "\\n", name: "source.js", patterns: [{ include: "source.js" }] }] }, { begin: "((((<<(~)?) *')(SQL)(')))(.*)\\n?", beginCaptures: { 1: { name: "string.unquoted.heredoc.raw.perl" }, 2: { name: "punctuation.definition.string.begin.perl" }, 3: { name: "punctuation.definition.delimiter.begin.perl" }, 7: { name: "punctuation.definition.delimiter.end.perl" }, 8: { patterns: [{ include: "$self" }] } }, contentName: "string.unquoted.heredoc.raw.perl", end: "^((?!\\5)\\s+)?((\\6))$", endCaptures: { 2: { name: "string.unquoted.heredoc.raw.perl" }, 3: { name: "punctuation.definition.string.end.perl" } }, name: "meta.embedded.block.sql", patterns: [{ begin: "^", end: "\\n", name: "source.sql", patterns: [{ include: "source.sql" }] }] }, { begin: "((((<<(~)?) *')(POSTSCRIPT)(')))(.*)\\n?", beginCaptures: { 1: { name: "string.unquoted.heredoc.raw.perl" }, 2: { name: "punctuation.definition.string.begin.perl" }, 3: { name: "punctuation.definition.delimiter.begin.perl" }, 7: { name: "punctuation.definition.delimiter.end.perl" }, 8: { patterns: [{ include: "$self" }] } }, contentName: "string.unquoted.heredoc.raw.perl", end: "^((?!\\5)\\s+)?((\\6))$", endCaptures: { 2: { name: "string.unquoted.heredoc.raw.perl" }, 3: { name: "punctuation.definition.string.end.perl" } }, name: "meta.embedded.block.postscript", patterns: [{ begin: "^", end: "\\n", name: "source.postscript", patterns: [{ include: "source.postscript" }] }] }, { begin: "((((<<(~)?) *')([^']*)(')))(.*)\\n?", beginCaptures: { 1: { name: "string.unquoted.heredoc.raw.perl" }, 2: { name: "punctuation.definition.string.begin.perl" }, 3: { name: "punctuation.definition.delimiter.begin.perl" }, 7: { name: "punctuation.definition.delimiter.end.perl" }, 8: { patterns: [{ include: "$self" }] } }, contentName: "string.unquoted.heredoc.raw.perl", end: "^((?!\\5)\\s+)?((\\6))$", endCaptures: { 2: { name: "string.unquoted.heredoc.raw.perl" }, 3: { name: "punctuation.definition.string.end.perl" } } }, { begin: "((((<<(~)?) *\\\\)((?![=\\d\\$\\( ])[^;,'\"`\\s\\)]*)()))(.*)\\n?", beginCaptures: { 1: { name: "string.unquoted.heredoc.raw.perl" }, 2: { name: "punctuation.definition.string.begin.perl" }, 3: { name: "punctuation.definition.delimiter.begin.perl" }, 7: { name: "punctuation.definition.delimiter.end.perl" }, 8: { patterns: [{ include: "$self" }] } }, contentName: "string.unquoted.heredoc.raw.perl", end: "^((?!\\5)\\s+)?((\\6))$", endCaptures: { 2: { name: "string.unquoted.heredoc.raw.perl" }, 3: { name: "punctuation.definition.string.end.perl" } } }, { begin: '((((<<(~)?) *")(HTML)(")))(.*)\\n?', beginCaptures: { 1: { name: "string.unquoted.heredoc.interpolated.perl" }, 2: { name: "punctuation.definition.string.begin.perl" }, 3: { name: "punctuation.definition.delimiter.begin.perl" }, 7: { name: "punctuation.definition.delimiter.end.perl" }, 8: { patterns: [{ include: "$self" }] } }, contentName: "string.unquoted.heredoc.interpolated.perl", end: "^((?!\\5)\\s+)?((\\6))$", endCaptures: { 2: { name: "string.unquoted.heredoc.interpolated.perl" }, 3: { name: "punctuation.definition.string.end.perl" } }, name: "meta.embedded.block.html", patterns: [{ begin: "^", end: "\\n", name: "text.html.basic", patterns: [{ include: "#escaped_char" }, { include: "#variable" }, { include: "text.html.basic" }] }] }, { begin: '((((<<(~)?) *")(XML)(")))(.*)\\n?', beginCaptures: { 1: { name: "string.unquoted.heredoc.interpolated.perl" }, 2: { name: "punctuation.definition.string.begin.perl" }, 3: { name: "punctuation.definition.delimiter.begin.perl" }, 7: { name: "punctuation.definition.delimiter.end.perl" }, 8: { patterns: [{ include: "$self" }] } }, contentName: "string.unquoted.heredoc.interpolated.perl", end: "^((?!\\5)\\s+)?((\\6))$", endCaptures: { 2: { name: "string.unquoted.heredoc.interpolated.perl" }, 3: { name: "punctuation.definition.string.end.perl" } }, name: "meta.embedded.block.xml", patterns: [{ begin: "^", end: "\\n", name: "text.xml", patterns: [{ include: "#escaped_char" }, { include: "#variable" }, { include: "text.xml" }] }] }, { begin: '((((<<(~)?) *")(CSS)(")))(.*)\\n?', beginCaptures: { 1: { name: "string.unquoted.heredoc.interpolated.perl" }, 2: { name: "punctuation.definition.string.begin.perl" }, 3: { name: "punctuation.definition.delimiter.begin.perl" }, 7: { name: "punctuation.definition.delimiter.end.perl" }, 8: { patterns: [{ include: "$self" }] } }, contentName: "string.unquoted.heredoc.interpolated.perl", end: "^((?!\\5)\\s+)?((\\6))$", endCaptures: { 2: { name: "string.unquoted.heredoc.interpolated.perl" }, 3: { name: "punctuation.definition.string.end.perl" } }, name: "meta.embedded.block.css", patterns: [{ begin: "^", end: "\\n", name: "source.css", patterns: [{ include: "#escaped_char" }, { include: "#variable" }, { include: "source.css" }] }] }, { begin: '((((<<(~)?) *")(JAVASCRIPT)(")))(.*)\\n?', beginCaptures: { 1: { name: "string.unquoted.heredoc.interpolated.perl" }, 2: { name: "punctuation.definition.string.begin.perl" }, 3: { name: "punctuation.definition.delimiter.begin.perl" }, 7: { name: "punctuation.definition.delimiter.end.perl" }, 8: { patterns: [{ include: "$self" }] } }, contentName: "string.unquoted.heredoc.interpolated.perl", end: "^((?!\\5)\\s+)?((\\6))$", endCaptures: { 2: { name: "string.unquoted.heredoc.interpolated.perl" }, 3: { name: "punctuation.definition.string.end.perl" } }, name: "meta.embedded.block.js", patterns: [{ begin: "^", end: "\\n", name: "source.js", patterns: [{ include: "#escaped_char" }, { include: "#variable" }, { include: "source.js" }] }] }, { begin: '((((<<(~)?) *")(SQL)(")))(.*)\\n?', beginCaptures: { 1: { name: "string.unquoted.heredoc.interpolated.perl" }, 2: { name: "punctuation.definition.string.begin.perl" }, 3: { name: "punctuation.definition.delimiter.begin.perl" }, 7: { name: "punctuation.definition.delimiter.end.perl" }, 8: { patterns: [{ include: "$self" }] } }, contentName: "string.unquoted.heredoc.interpolated.perl", end: "^((?!\\5)\\s+)?((\\6))$", endCaptures: { 2: { name: "string.unquoted.heredoc.interpolated.perl" }, 3: { name: "punctuation.definition.string.end.perl" } }, name: "meta.embedded.block.sql", patterns: [{ begin: "^", end: "\\n", name: "source.sql", patterns: [{ include: "#escaped_char" }, { include: "#variable" }, { include: "source.sql" }] }] }, { begin: '((((<<(~)?) *")(POSTSCRIPT)(")))(.*)\\n?', beginCaptures: { 1: { name: "string.unquoted.heredoc.interpolated.perl" }, 2: { name: "punctuation.definition.string.begin.perl" }, 3: { name: "punctuation.definition.delimiter.begin.perl" }, 7: { name: "punctuation.definition.delimiter.end.perl" }, 8: { patterns: [{ include: "$self" }] } }, contentName: "string.unquoted.heredoc.interpolated.perl", end: "^((?!\\5)\\s+)?((\\6))$", endCaptures: { 2: { name: "string.unquoted.heredoc.interpolated.perl" }, 3: { name: "punctuation.definition.string.end.perl" } }, name: "meta.embedded.block.postscript", patterns: [{ begin: "^", end: "\\n", name: "source.postscript", patterns: [{ include: "#escaped_char" }, { include: "#variable" }, { include: "source.postscript" }] }] }, { begin: '((((<<(~)?) *")([^"]*)(")))(.*)\\n?', beginCaptures: { 1: { name: "string.unquoted.heredoc.interpolated.perl" }, 2: { name: "punctuation.definition.string.begin.perl" }, 3: { name: "punctuation.definition.delimiter.begin.perl" }, 7: { name: "punctuation.definition.delimiter.end.perl" }, 8: { patterns: [{ include: "$self" }] } }, contentName: "string.unquoted.heredoc.interpolated.perl", end: "^((?!\\5)\\s+)?((\\6))$", endCaptures: { 2: { name: "string.unquoted.heredoc.interpolated.perl" }, 3: { name: "punctuation.definition.string.end.perl" } }, patterns: [{ include: "#escaped_char" }, { include: "#variable" }] }, { begin: "((((<<(~)?) *)(HTML)()))(.*)\\n?", beginCaptures: { 1: { name: "string.unquoted.heredoc.interpolated.perl" }, 2: { name: "punctuation.definition.string.begin.perl" }, 3: { name: "punctuation.definition.delimiter.begin.perl" }, 7: { name: "punctuation.definition.delimiter.end.perl" }, 8: { patterns: [{ include: "$self" }] } }, contentName: "string.unquoted.heredoc.interpolated.perl", end: "^((?!\\5)\\s+)?((\\6))$", endCaptures: { 2: { name: "string.unquoted.heredoc.interpolated.perl" }, 3: { name: "punctuation.definition.string.end.perl" } }, name: "meta.embedded.block.html", patterns: [{ begin: "^", end: "\\n", name: "text.html.basic", patterns: [{ include: "#escaped_char" }, { include: "#variable" }, { include: "text.html.basic" }] }] }, { begin: "((((<<(~)?) *)(XML)()))(.*)\\n?", beginCaptures: { 1: { name: "string.unquoted.heredoc.interpolated.perl" }, 2: { name: "punctuation.definition.string.begin.perl" }, 3: { name: "punctuation.definition.delimiter.begin.perl" }, 7: { name: "punctuation.definition.delimiter.end.perl" }, 8: { patterns: [{ include: "$self" }] } }, contentName: "string.unquoted.heredoc.interpolated.perl", end: "^((?!\\5)\\s+)?((\\6))$", endCaptures: { 2: { name: "string.unquoted.heredoc.interpolated.perl" }, 3: { name: "punctuation.definition.string.end.perl" } }, name: "meta.embedded.block.xml", patterns: [{ begin: "^", end: "\\n", name: "text.xml", patterns: [{ include: "#escaped_char" }, { include: "#variable" }, { include: "text.xml" }] }] }, { begin: "((((<<(~)?) *)(CSS)()))(.*)\\n?", beginCaptures: { 1: { name: "string.unquoted.heredoc.interpolated.perl" }, 2: { name: "punctuation.definition.string.begin.perl" }, 3: { name: "punctuation.definition.delimiter.begin.perl" }, 7: { name: "punctuation.definition.delimiter.end.perl" }, 8: { patterns: [{ include: "$self" }] } }, contentName: "string.unquoted.heredoc.interpolated.perl", end: "^((?!\\5)\\s+)?((\\6))$", endCaptures: { 2: { name: "string.unquoted.heredoc.interpolated.perl" }, 3: { name: "punctuation.definition.string.end.perl" } }, name: "meta.embedded.block.css", patterns: [{ begin: "^", end: "\\n", name: "source.css", patterns: [{ include: "#escaped_char" }, { include: "#variable" }, { include: "source.css" }] }] }, { begin: "((((<<(~)?) *)(JAVASCRIPT)()))(.*)\\n?", beginCaptures: { 1: { name: "string.unquoted.heredoc.interpolated.perl" }, 2: { name: "punctuation.definition.string.begin.perl" }, 3: { name: "punctuation.definition.delimiter.begin.perl" }, 7: { name: "punctuation.definition.delimiter.end.perl" }, 8: { patterns: [{ include: "$self" }] } }, contentName: "string.unquoted.heredoc.interpolated.perl", end: "^((?!\\5)\\s+)?((\\6))$", endCaptures: { 2: { name: "string.unquoted.heredoc.interpolated.perl" }, 3: { name: "punctuation.definition.string.end.perl" } }, name: "meta.embedded.block.js", patterns: [{ begin: "^", end: "\\n", name: "source.js", patterns: [{ include: "#escaped_char" }, { include: "#variable" }, { include: "source.js" }] }] }, { begin: "((((<<(~)?) *)(SQL)()))(.*)\\n?", beginCaptures: { 1: { name: "string.unquoted.heredoc.interpolated.perl" }, 2: { name: "punctuation.definition.string.begin.perl" }, 3: { name: "punctuation.definition.delimiter.begin.perl" }, 7: { name: "punctuation.definition.delimiter.end.perl" }, 8: { patterns: [{ include: "$self" }] } }, contentName: "string.unquoted.heredoc.interpolated.perl", end: "^((?!\\5)\\s+)?((\\6))$", endCaptures: { 2: { name: "string.unquoted.heredoc.interpolated.perl" }, 3: { name: "punctuation.definition.string.end.perl" } }, name: "meta.embedded.block.sql", patterns: [{ begin: "^", end: "\\n", name: "source.sql", patterns: [{ include: "#escaped_char" }, { include: "#variable" }, { include: "source.sql" }] }] }, { begin: "((((<<(~)?) *)(POSTSCRIPT)()))(.*)\\n?", beginCaptures: { 1: { name: "string.unquoted.heredoc.interpolated.perl" }, 2: { name: "punctuation.definition.string.begin.perl" }, 3: { name: "punctuation.definition.delimiter.begin.perl" }, 7: { name: "punctuation.definition.delimiter.end.perl" }, 8: { patterns: [{ include: "$self" }] } }, contentName: "string.unquoted.heredoc.interpolated.perl", end: "^((?!\\5)\\s+)?((\\6))$", endCaptures: { 2: { name: "string.unquoted.heredoc.interpolated.perl" }, 3: { name: "punctuation.definition.string.end.perl" } }, name: "meta.embedded.block.postscript", patterns: [{ begin: "^", end: "\\n", name: "source.postscript", patterns: [{ include: "#escaped_char" }, { include: "#variable" }, { include: "source.postscript" }] }] }, { begin: "((((<<(~)?) *)((?![=\\d\\$\\( ])[^;,'\"`\\s\\)]*)()))(.*)\\n?", beginCaptures: { 1: { name: "string.unquoted.heredoc.interpolated.perl" }, 2: { name: "punctuation.definition.string.begin.perl" }, 3: { name: "punctuation.definition.delimiter.begin.perl" }, 7: { name: "punctuation.definition.delimiter.end.perl" }, 8: { patterns: [{ include: "$self" }] } }, contentName: "string.unquoted.heredoc.interpolated.perl", end: "^((?!\\5)\\s+)?((\\6))$", endCaptures: { 2: { name: "string.unquoted.heredoc.interpolated.perl" }, 3: { name: "punctuation.definition.string.end.perl" } }, patterns: [{ include: "#escaped_char" }, { include: "#variable" }] }, { begin: "((((<<(~)?) *`)([^`]*)(`)))(.*)\\n?", beginCaptures: { 1: { name: "string.unquoted.heredoc.interpolated.perl" }, 2: { name: "punctuation.definition.string.begin.perl" }, 3: { name: "punctuation.definition.delimiter.begin.perl" }, 7: { name: "punctuation.definition.delimiter.end.perl" }, 8: { patterns: [{ include: "$self" }] } }, contentName: "string.unquoted.heredoc.shell.perl", end: "^((?!\\5)\\s+)?((\\6))$", endCaptures: { 2: { name: "string.unquoted.heredoc.interpolated.perl" }, 3: { name: "punctuation.definition.string.end.perl" } }, patterns: [{ include: "#escaped_char" }, { include: "#variable" }] }] }, line_comment: { patterns: [{ begin: "(^[ \\t]+)?(?=#)", beginCaptures: { 1: { name: "punctuation.whitespace.comment.leading.perl" } }, end: "(?!\\G)", patterns: [{ begin: "#", beginCaptures: { 0: { name: "punctuation.definition.comment.perl" } }, end: "\\n", name: "comment.line.number-sign.perl" }] }] }, nested_braces: { begin: "\\{", captures: { 1: { name: "punctuation.section.scope.perl" } }, end: "\\}", patterns: [{ include: "#escaped_char" }, { include: "#nested_braces" }] }, nested_braces_interpolated: { begin: "\\{", captures: { 1: { name: "punctuation.section.scope.perl" } }, end: "\\}", patterns: [{ include: "#escaped_char" }, { include: "#variable" }, { include: "#nested_braces_interpolated" }] }, nested_brackets: { begin: "\\[", captures: { 1: { name: "punctuation.section.scope.perl" } }, end: "\\]", patterns: [{ include: "#escaped_char" }, { include: "#nested_brackets" }] }, nested_brackets_interpolated: { begin: "\\[", captures: { 1: { name: "punctuation.section.scope.perl" } }, end: "\\]", patterns: [{ include: "#escaped_char" }, { include: "#variable" }, { include: "#nested_brackets_interpolated" }] }, nested_ltgt: { begin: "<", captures: { 1: { name: "punctuation.section.scope.perl" } }, end: ">", patterns: [{ include: "#nested_ltgt" }] }, nested_ltgt_interpolated: { begin: "<", captures: { 1: { name: "punctuation.section.scope.perl" } }, end: ">", patterns: [{ include: "#variable" }, { include: "#nested_ltgt_interpolated" }] }, nested_parens: { begin: "\\(", captures: { 1: { name: "punctuation.section.scope.perl" } }, end: "\\)", patterns: [{ include: "#escaped_char" }, { include: "#nested_parens" }] }, nested_parens_interpolated: { begin: "\\(", captures: { 1: { name: "punctuation.section.scope.perl" } }, end: "\\)", patterns: [{ comment: "This is to prevent thinks like qr/foo$/ to treat $/ as a variable", match: "\\$(?=[^\\s\\w'\\{\\[\\(\\<])", name: "keyword.control.anchor.perl" }, { include: "#escaped_char" }, { include: "#variable" }, { include: "#nested_parens_interpolated" }] }, pod: { patterns: [{ match: "^=(pod|back|cut)\\b", name: "storage.type.class.pod.perl" }, { begin: "^(=begin)\\s+(html)\\s*$", beginCaptures: { 1: { name: "storage.type.class.pod.perl" }, 2: { name: "variable.other.pod.perl" } }, contentName: "text.embedded.html.basic", end: "^(=end)\\s+(html)|^(?==cut)", endCaptures: { 1: { name: "storage.type.class.pod.perl" }, 2: { name: "variable.other.pod.perl" } }, name: "meta.embedded.pod.perl", patterns: [{ include: "text.html.basic" }] }, { captures: { 1: { name: "storage.type.class.pod.perl" }, 2: { name: "variable.other.pod.perl", patterns: [{ include: "#pod-formatting" }] } }, match: "^(=(?:head[1-4]|item|over|encoding|begin|end|for))\\b\\s*(.*)" }, { include: "#pod-formatting" }] }, "pod-formatting": { patterns: [{ captures: { 1: { name: "markup.italic.pod.perl" }, 2: { name: "markup.italic.pod.perl" } }, match: "I(?:<([^<>]+)>|<+(\\s+(?:(?<!\\s)>|[^>])+\\s+)>+)", name: "entity.name.type.instance.pod.perl" }, { captures: { 1: { name: "markup.bold.pod.perl" }, 2: { name: "markup.bold.pod.perl" } }, match: "B(?:<([^<>]+)>|<+(\\s+(?:(?<!\\s)>|[^>])+\\s+)>+)", name: "entity.name.type.instance.pod.perl" }, { captures: { 1: { name: "markup.raw.pod.perl" }, 2: { name: "markup.raw.pod.perl" } }, match: "C(?:<([^<>]+)>|<+(\\\\s+(?:(?<!\\\\s)>|[^>])+\\\\s+)>+)", name: "entity.name.type.instance.pod.perl" }, { captures: { 1: { name: "markup.underline.link.hyperlink.pod.perl" } }, match: "L<([^>]+)>", name: "entity.name.type.instance.pod.perl" }, { match: "[EFSXZ]<[^>]*>", name: "entity.name.type.instance.pod.perl" }] }, variable: { patterns: [{ captures: { 1: { name: "punctuation.definition.variable.perl" } }, match: "(\\$)&(?![A-Za-z0-9_])", name: "variable.other.regexp.match.perl" }, { captures: { 1: { name: "punctuation.definition.variable.perl" } }, match: "(\\$)`(?![A-Za-z0-9_])", name: "variable.other.regexp.pre-match.perl" }, { captures: { 1: { name: "punctuation.definition.variable.perl" } }, match: "(\\$)'(?![A-Za-z0-9_])", name: "variable.other.regexp.post-match.perl" }, { captures: { 1: { name: "punctuation.definition.variable.perl" } }, match: "(\\$)\\+(?![A-Za-z0-9_])", name: "variable.other.regexp.last-paren-match.perl" }, { captures: { 1: { name: "punctuation.definition.variable.perl" } }, match: '(\\$)"(?![A-Za-z0-9_])', name: "variable.other.readwrite.list-separator.perl" }, { captures: { 1: { name: "punctuation.definition.variable.perl" } }, match: "(\\$)0(?![A-Za-z0-9_])", name: "variable.other.predefined.program-name.perl" }, { captures: { 1: { name: "punctuation.definition.variable.perl" } }, match: "(\\$)[_ab\\*\\.\\/\\|,\\\\;#%=\\-~^:?!\\$<>\\(\\)\\[\\]@](?![A-Za-z0-9_])", name: "variable.other.predefined.perl" }, { captures: { 1: { name: "punctuation.definition.variable.perl" } }, match: "(\\$)[0-9]+(?![A-Za-z0-9_])", name: "variable.other.subpattern.perl" }, { captures: { 1: { name: "punctuation.definition.variable.perl" } }, match: "([\\$\\@\\%](#)?)([a-zA-Zx7f-xff\\$]|::)([a-zA-Z0-9_x7f-xff\\$]|::)*\\b", name: "variable.other.readwrite.global.perl" }, { captures: { 1: { name: "punctuation.definition.variable.perl" }, 2: { name: "punctuation.definition.variable.perl" } }, match: "(\\$\\{)(?:[a-zA-Zx7f-xff\\$]|::)(?:[a-zA-Z0-9_x7f-xff\\$]|::)*(\\})", name: "variable.other.readwrite.global.perl" }, { captures: { 1: { name: "punctuation.definition.variable.perl" } }, match: "([\\$\\@\\%](#)?)[0-9_]\\b", name: "variable.other.readwrite.global.special.perl" }] } }, scopeName: "source.perl", embeddedLangs: ["html", "xml", "css", "javascript", "sql"] });
var $n = [
  ...t,
  ...s,
  ...n,
  ...e,
  ...a,
  vn
];
const Cn = Object.freeze({ displayName: "PHP", name: "php", patterns: [{ include: "#attribute" }, { include: "#comments" }, { captures: { 1: { name: "keyword.other.namespace.php" }, 2: { name: "entity.name.type.namespace.php", patterns: [{ match: "\\\\", name: "punctuation.separator.inheritance.php" }] } }, match: "(?i)(?:^|(?<=<\\?php))\\s*(namespace)\\s+([a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+)(?=\\s*;)", name: "meta.namespace.php" }, { begin: "(?i)(?:^|(?<=<\\?php))\\s*(namespace)\\s+", beginCaptures: { 1: { name: "keyword.other.namespace.php" } }, end: "(?<=})|(?=\\?>)", name: "meta.namespace.php", patterns: [{ include: "#comments" }, { captures: { 0: { patterns: [{ match: "\\\\", name: "punctuation.separator.inheritance.php" }] } }, match: "(?i)[a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+", name: "entity.name.type.namespace.php" }, { begin: "{", beginCaptures: { 0: { name: "punctuation.definition.namespace.begin.bracket.curly.php" } }, end: "}|(?=\\?>)", endCaptures: { 0: { name: "punctuation.definition.namespace.end.bracket.curly.php" } }, patterns: [{ include: "$self" }] }, { match: "[^\\s]+", name: "invalid.illegal.identifier.php" }] }, { match: "\\s+(?=use\\b)" }, { begin: "(?i)\\buse\\b", beginCaptures: { 0: { name: "keyword.other.use.php" } }, end: "(?<=})|(?=;)|(?=\\?>)", name: "meta.use.php", patterns: [{ match: "\\b(const|function)\\b", name: "storage.type.${1:/downcase}.php" }, { begin: "{", beginCaptures: { 0: { name: "punctuation.definition.use.begin.bracket.curly.php" } }, end: "}", endCaptures: { 0: { name: "punctuation.definition.use.end.bracket.curly.php" } }, patterns: [{ include: "#scope-resolution" }, { captures: { 1: { name: "keyword.other.use-as.php" }, 2: { name: "storage.modifier.php" }, 3: { name: "entity.other.alias.php" } }, match: `(?xi)
\\b(as)
\\s+(final|abstract|public|private|protected|static)
\\s+([a-z_\\x{7f}-\\x{10ffff}][a-z0-9_\\x{7f}-\\x{10ffff}]*)` }, { captures: { 1: { name: "keyword.other.use-as.php" }, 2: { patterns: [{ match: "^(?:final|abstract|public|private|protected|static)$", name: "storage.modifier.php" }, { match: ".+", name: "entity.other.alias.php" }] } }, match: `(?xi)
\\b(as)
\\s+([a-z_\\x{7f}-\\x{10ffff}][a-z0-9_\\x{7f}-\\x{10ffff}]*)` }, { captures: { 1: { name: "keyword.other.use-insteadof.php" }, 2: { name: "support.class.php" } }, match: "(?i)\\b(insteadof)\\s+([a-z_\\x{7f}-\\x{10ffff}][a-z0-9_\\x{7f}-\\x{10ffff}]*)" }, { match: ";", name: "punctuation.terminator.expression.php" }, { include: "#use-inner" }] }, { include: "#use-inner" }] }, { begin: `(?ix)
\\b(trait)\\s+([a-z_\\x{7f}-\\x{10ffff}][a-z0-9_\\x{7f}-\\x{10ffff}]*)`, beginCaptures: { 1: { name: "storage.type.trait.php" }, 2: { name: "entity.name.type.trait.php" } }, end: "}|(?=\\?>)", endCaptures: { 0: { name: "punctuation.definition.trait.end.bracket.curly.php" } }, name: "meta.trait.php", patterns: [{ include: "#comments" }, { begin: "{", beginCaptures: { 0: { name: "punctuation.definition.trait.begin.bracket.curly.php" } }, contentName: "meta.trait.body.php", end: "(?=}|\\?>)", patterns: [{ include: "$self" }] }] }, { begin: `(?ix)
\\b(interface)\\s+([a-z_\\x{7f}-\\x{10ffff}][a-z0-9_\\x{7f}-\\x{10ffff}]*)`, beginCaptures: { 1: { name: "storage.type.interface.php" }, 2: { name: "entity.name.type.interface.php" } }, end: "}|(?=\\?>)", endCaptures: { 0: { name: "punctuation.definition.interface.end.bracket.curly.php" } }, name: "meta.interface.php", patterns: [{ include: "#comments" }, { include: "#interface-extends" }, { begin: "{", beginCaptures: { 0: { name: "punctuation.definition.interface.begin.bracket.curly.php" } }, contentName: "meta.interface.body.php", end: "(?=}|\\?>)", patterns: [{ include: "#class-constant" }, { include: "$self" }] }] }, { begin: `(?ix)
\\b(enum)\\s+([a-z_\\x{7f}-\\x{10ffff}][a-z0-9_\\x{7f}-\\x{10ffff}]*)
(?: \\s* (:) \\s* (int | string) \\b )?`, beginCaptures: { 1: { name: "storage.type.enum.php" }, 2: { name: "entity.name.type.enum.php" }, 3: { name: "keyword.operator.return-value.php" }, 4: { name: "keyword.other.type.php" } }, end: "}|(?=\\?>)", endCaptures: { 0: { name: "punctuation.definition.enum.end.bracket.curly.php" } }, name: "meta.enum.php", patterns: [{ include: "#comments" }, { include: "#class-implements" }, { begin: "{", beginCaptures: { 0: { name: "punctuation.definition.enum.begin.bracket.curly.php" } }, contentName: "meta.enum.body.php", end: "(?=}|\\?>)", patterns: [{ captures: { 1: { name: "storage.modifier.php" }, 2: { name: "constant.enum.php" } }, match: "(?i)\\b(case)\\s*([a-z_\\x{7f}-\\x{10ffff}][a-z0-9_\\x{7f}-\\x{10ffff}]*)" }, { include: "#class-constant" }, { include: "$self" }] }] }, { begin: `(?ix)
(?:
\\b((?:(?:final|abstract|readonly)\\s+)*)(class)\\s+([a-z_\\x{7f}-\\x{10ffff}][a-z0-9_\\x{7f}-\\x{10ffff}]*)
|\\b(new)\\b\\s*(\\#\\[.*\\])?\\s*(?:(readonly)\\s+)?\\b(class)\\b
)`, beginCaptures: { 1: { patterns: [{ match: "final|abstract", name: "storage.modifier.${0:/downcase}.php" }, { match: "readonly", name: "storage.modifier.php" }] }, 2: { name: "storage.type.class.php" }, 3: { name: "entity.name.type.class.php" }, 4: { name: "keyword.other.new.php" }, 5: { patterns: [{ include: "#attribute" }] }, 6: { name: "storage.modifier.php" }, 7: { name: "storage.type.class.php" } }, end: "}|(?=\\?>)", endCaptures: { 0: { name: "punctuation.definition.class.end.bracket.curly.php" } }, name: "meta.class.php", patterns: [{ begin: "(?<=class)\\s*(\\()", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.bracket.round.php" } }, end: "\\)|(?=\\?>)", endCaptures: { 0: { name: "punctuation.definition.arguments.end.bracket.round.php" } }, name: "meta.function-call.php", patterns: [{ include: "#named-arguments" }, { include: "$self" }] }, { include: "#comments" }, { include: "#class-extends" }, { include: "#class-implements" }, { begin: "{", beginCaptures: { 0: { name: "punctuation.definition.class.begin.bracket.curly.php" } }, contentName: "meta.class.body.php", end: "(?=}|\\?>)", patterns: [{ include: "#class-constant" }, { include: "$self" }] }] }, { include: "#match_statement" }, { include: "#switch_statement" }, { captures: { 1: { name: "keyword.control.yield-from.php" } }, match: "\\s*\\b(yield\\s+from)\\b" }, { captures: { 1: { name: "keyword.control.${1:/downcase}.php" } }, match: `(?x)
\\b(
break|case|continue|declare|default|die|do|
else(if)?|end(declare|for(each)?|if|switch|while)|exit|
for(each)?|if|return|switch|use|while|yield
)\\b` }, { begin: "(?i)\\b((?:require|include)(?:_once)?)(\\s+|(?=\\())", beginCaptures: { 1: { name: "keyword.control.import.include.php" } }, end: "(?=\\s|;|$|\\?>)", name: "meta.include.php", patterns: [{ include: "$self" }] }, { begin: "\\b(catch)\\s*(\\()", beginCaptures: { 1: { name: "keyword.control.exception.catch.php" }, 2: { name: "punctuation.definition.parameters.begin.bracket.round.php" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.parameters.end.bracket.round.php" } }, name: "meta.catch.php", patterns: [{ captures: { 1: { patterns: [{ match: "\\|", name: "punctuation.separator.delimiter.php" }, { begin: "(?i)(?=[\\\\a-z_\\x{7f}-\\x{10ffff}])", end: `(?xi)
( [a-z_\\x{7f}-\\x{10ffff}] [a-z0-9_\\x{7f}-\\x{10ffff}]* )
(?![a-z0-9_\\x{7f}-\\x{10ffff}\\\\])`, endCaptures: { 1: { name: "support.class.exception.php" } }, patterns: [{ include: "#namespace" }] }] }, 2: { name: "variable.other.php" }, 3: { name: "punctuation.definition.variable.php" } }, match: `(?xi)
([a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+ (?: \\s*\\|\\s* [a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+)*)
\\s*
((\\$+)[a-z_\\x{7f}-\\x{10ffff}][a-z0-9_\\x{7f}-\\x{10ffff}]*)?` }] }, { match: "\\b(catch|try|throw|exception|finally)\\b", name: "keyword.control.exception.php" }, { begin: "(?i)\\b(function)\\s*(?=&?\\s*\\()", beginCaptures: { 1: { name: "storage.type.function.php" } }, end: "(?=\\s*{)", name: "meta.function.closure.php", patterns: [{ include: "#comments" }, { begin: "(&)?\\s*(\\()", beginCaptures: { 1: { name: "storage.modifier.reference.php" }, 2: { name: "punctuation.definition.parameters.begin.bracket.round.php" } }, contentName: "meta.function.parameters.php", end: "\\)", endCaptures: { 0: { name: "punctuation.definition.parameters.end.bracket.round.php" } }, patterns: [{ include: "#function-parameters" }] }, { begin: "(?i)(use)\\s*(\\()", beginCaptures: { 1: { name: "keyword.other.function.use.php" }, 2: { name: "punctuation.definition.parameters.begin.bracket.round.php" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.parameters.end.bracket.round.php" } }, name: "meta.function.closure.use.php", patterns: [{ match: ",", name: "punctuation.separator.delimiter.php" }, { captures: { 1: { name: "variable.other.php" }, 2: { name: "storage.modifier.reference.php" }, 3: { name: "punctuation.definition.variable.php" } }, match: "(?i)((?:(&)\\s*)?(\\$+)[a-z_\\x{7f}-\\x{10ffff}][a-z0-9_\\x{7f}-\\x{10ffff}]*)\\s*(?=,|\\))" }] }, { captures: { 1: { name: "keyword.operator.return-value.php" }, 2: { patterns: [{ include: "#php-types" }] } }, match: `(?xi)
(:)\\s*
(

(?:\\?\\s*)? [a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+ |

(?: [a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+ | \\(\\s* [a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+(?:\\s*&\\s*[a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+)+ \\s*\\) )
(?: \\s*[|&]\\s*
(?: [a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+ | \\(\\s* [a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+(?:\\s*&\\s*[a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+)+ \\s*\\) )
)+
)
(?=\\s*(?:{|/[/*]|\\#|$))` }] }, { begin: "(?i)\\b(fn)\\s*(?=&?\\s*\\()", beginCaptures: { 1: { name: "storage.type.function.php" } }, end: "=>", endCaptures: { 0: { name: "punctuation.definition.arrow.php" } }, name: "meta.function.closure.php", patterns: [{ begin: "(?:(&)\\s*)?(\\()", beginCaptures: { 1: { name: "storage.modifier.reference.php" }, 2: { name: "punctuation.definition.parameters.begin.bracket.round.php" } }, contentName: "meta.function.parameters.php", end: "\\)", endCaptures: { 0: { name: "punctuation.definition.parameters.end.bracket.round.php" } }, patterns: [{ include: "#function-parameters" }] }, { captures: { 1: { name: "keyword.operator.return-value.php" }, 2: { patterns: [{ include: "#php-types" }] } }, match: `(?xi)
(:)\\s*
(

(?:\\?\\s*)? [a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+ |

(?: [a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+ | \\(\\s* [a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+(?:\\s*&\\s*[a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+)+ \\s*\\) )
(?: \\s*[|&]\\s*
(?: [a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+ | \\(\\s* [a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+(?:\\s*&\\s*[a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+)+ \\s*\\) )
)+
)
(?=\\s*(?:=>|/[/*]|\\#|$))` }] }, { begin: `(?x)
((?:(?:final|abstract|public|private|protected)\\s+)*)
(function)\\s+(__construct)
\\s*(\\()`, beginCaptures: { 1: { patterns: [{ match: "final|abstract|public|private|protected", name: "storage.modifier.php" }] }, 2: { name: "storage.type.function.php" }, 3: { name: "support.function.constructor.php" }, 4: { name: "punctuation.definition.parameters.begin.bracket.round.php" } }, contentName: "meta.function.parameters.php", end: `(?xi)
(\\)) \\s* ( : \\s*
(?:\\?\\s*)? (?!\\s) [a-z0-9_\\x{7f}-\\x{10ffff}\\\\\\s\\|&()]+ (?<!\\s)
)?
(?=\\s*(?:{|/[/*]|\\#|$|;))`, endCaptures: { 1: { name: "punctuation.definition.parameters.end.bracket.round.php" }, 2: { name: "invalid.illegal.return-type.php" } }, name: "meta.function.php", patterns: [{ include: "#comments" }, { match: ",", name: "punctuation.separator.delimiter.php" }, { begin: `(?xi)
((?:(?:public|private|protected|readonly)(?:\\s+|(?=\\?)))++)
(?: (

(?:\\?\\s*)? [a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+ |

(?: [a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+ | \\(\\s* [a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+(?:\\s*&\\s*[a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+)+ \\s*\\) )
(?: \\s*[|&]\\s*
(?: [a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+ | \\(\\s* [a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+(?:\\s*&\\s*[a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+)+ \\s*\\) )
)+
) \\s+ )?
((?:(&)\\s*)?(\\$)[a-z_\\x{7f}-\\x{10ffff}][a-z0-9_\\x{7f}-\\x{10ffff}]*)`, beginCaptures: { 1: { patterns: [{ match: "public|private|protected|readonly", name: "storage.modifier.php" }] }, 2: { patterns: [{ include: "#php-types" }] }, 3: { name: "variable.other.php" }, 4: { name: "storage.modifier.reference.php" }, 5: { name: "punctuation.definition.variable.php" } }, end: "(?=\\s*(?:,|\\)|/[/*]|\\#))", name: "meta.function.parameter.promoted-property.php", patterns: [{ begin: "=", beginCaptures: { 0: { name: "keyword.operator.assignment.php" } }, end: "(?=\\s*(?:,|\\)|/[/*]|\\#))", patterns: [{ include: "#parameter-default-types" }] }] }, { include: "#function-parameters" }] }, { begin: `(?x)
((?:(?:final|abstract|public|private|protected|static)\\s+)*)
(function)\\s+
(?i:
(__(?:call|construct|debugInfo|destruct|get|set|isset|unset|toString|
clone|set_state|sleep|wakeup|autoload|invoke|callStatic|serialize|unserialize))
|(?:(&)?\\s*([a-zA-Z_\\x{7f}-\\x{10ffff}][a-zA-Z0-9_\\x{7f}-\\x{10ffff}]*))
)
\\s*(\\()`, beginCaptures: { 1: { patterns: [{ match: "final|abstract|public|private|protected|static", name: "storage.modifier.php" }] }, 2: { name: "storage.type.function.php" }, 3: { name: "support.function.magic.php" }, 4: { name: "storage.modifier.reference.php" }, 5: { name: "entity.name.function.php" }, 6: { name: "punctuation.definition.parameters.begin.bracket.round.php" } }, contentName: "meta.function.parameters.php", end: `(?xi)
(\\)) (?: \\s* (:) \\s* (

(?:\\?\\s*)? [a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+ |

(?: [a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+ | \\(\\s* [a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+(?:\\s*&\\s*[a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+)+ \\s*\\) )
(?: \\s*[|&]\\s*
(?: [a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+ | \\(\\s* [a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+(?:\\s*&\\s*[a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+)+ \\s*\\) )
)+
) )?
(?=\\s*(?:{|/[/*]|\\#|$|;))`, endCaptures: { 1: { name: "punctuation.definition.parameters.end.bracket.round.php" }, 2: { name: "keyword.operator.return-value.php" }, 3: { patterns: [{ match: "\\b(static)\\b", name: "storage.type.php" }, { match: "\\b(never)\\b", name: "keyword.other.type.never.php" }, { include: "#php-types" }] } }, name: "meta.function.php", patterns: [{ include: "#function-parameters" }] }, { captures: { 1: { patterns: [{ match: "public|private|protected|static|readonly", name: "storage.modifier.php" }] }, 2: { patterns: [{ include: "#php-types" }] }, 3: { name: "variable.other.php" }, 4: { name: "punctuation.definition.variable.php" } }, match: `(?xi)
((?:(?:public|private|protected|static|readonly)(?:\\s+|(?=\\?)))++)
(

(?:\\?\\s*)? [a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+ |

(?: [a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+ | \\(\\s* [a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+(?:\\s*&\\s*[a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+)+ \\s*\\) )
(?: \\s*[|&]\\s*
(?: [a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+ | \\(\\s* [a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+(?:\\s*&\\s*[a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+)+ \\s*\\) )
)+
)?
\\s+ ((\\$)[a-z_\\x{7f}-\\x{10ffff}][a-z0-9_\\x{7f}-\\x{10ffff}]*)` }, { include: "#invoke-call" }, { include: "#scope-resolution" }, { include: "#variables" }, { include: "#strings" }, { captures: { 1: { name: "support.function.construct.php" }, 2: { name: "punctuation.definition.array.begin.bracket.round.php" }, 3: { name: "punctuation.definition.array.end.bracket.round.php" } }, match: "(array)(\\()(\\))", name: "meta.array.empty.php" }, { begin: "(array)\\s*(\\()", beginCaptures: { 1: { name: "support.function.construct.php" }, 2: { name: "punctuation.definition.array.begin.bracket.round.php" } }, end: "\\)|(?=\\?>)", endCaptures: { 0: { name: "punctuation.definition.array.end.bracket.round.php" } }, name: "meta.array.php", patterns: [{ include: "$self" }] }, { captures: { 1: { name: "punctuation.definition.storage-type.begin.bracket.round.php" }, 2: { name: "storage.type.php" }, 3: { name: "punctuation.definition.storage-type.end.bracket.round.php" } }, match: "(?i)(\\()\\s*(array|real|double|float|int(?:eger)?|bool(?:ean)?|string|object|binary|unset)\\s*(\\))" }, { match: "(?i)\\b(array|real|double|float|int(eger)?|bool(ean)?|string|class|var|function|interface|trait|parent|self|object|mixed)\\b", name: "storage.type.php" }, { match: "(?i)\\b(global|abstract|const|final|private|protected|public|static)\\b", name: "storage.modifier.php" }, { include: "#object" }, { match: ";", name: "punctuation.terminator.expression.php" }, { match: ":", name: "punctuation.terminator.statement.php" }, { include: "#heredoc" }, { include: "#numbers" }, { match: "(?i)\\bclone\\b", name: "keyword.other.clone.php" }, { match: "\\.\\.\\.", name: "keyword.operator.spread.php" }, { match: "\\.=?", name: "keyword.operator.string.php" }, { match: "=>", name: "keyword.operator.key.php" }, { captures: { 1: { name: "keyword.operator.assignment.php" }, 2: { name: "storage.modifier.reference.php" }, 3: { name: "storage.modifier.reference.php" } }, match: "(?i)(\\=)(&)|(&)(?=[$a-z_])" }, { match: "@", name: "keyword.operator.error-control.php" }, { match: "===|==|!==|!=|<>", name: "keyword.operator.comparison.php" }, { match: "=|\\+=|\\-=|\\*\\*?=|/=|%=|&=|\\|=|\\^=|<<=|>>=|\\?\\?=", name: "keyword.operator.assignment.php" }, { match: "<=>|<=|>=|<|>", name: "keyword.operator.comparison.php" }, { match: "\\-\\-|\\+\\+", name: "keyword.operator.increment-decrement.php" }, { match: "\\-|\\+|\\*\\*?|/|%", name: "keyword.operator.arithmetic.php" }, { match: "(?i)(!|&&|\\|\\|)|\\b(and|or|xor|as)\\b", name: "keyword.operator.logical.php" }, { include: "#function-call" }, { match: "<<|>>|~|\\^|&|\\|", name: "keyword.operator.bitwise.php" }, { begin: "(?i)\\b(instanceof)\\s+(?=[\\\\$a-z_])", beginCaptures: { 1: { name: "keyword.operator.type.php" } }, end: "(?i)(?=[^\\\\$a-z0-9_\\x{7f}-\\x{10ffff}])", patterns: [{ include: "#class-name" }, { include: "#variable-name" }] }, { include: "#instantiation" }, { captures: { 1: { name: "keyword.control.goto.php" }, 2: { name: "support.other.php" } }, match: "(?i)(goto)\\s+([a-z_\\x{7f}-\\x{10ffff}][a-z0-9_\\x{7f}-\\x{10ffff}]*)" }, { captures: { 1: { name: "entity.name.goto-label.php" } }, match: "(?i)^\\s*([a-z_\\x{7f}-\\x{10ffff}][a-z0-9_\\x{7f}-\\x{10ffff}]*(?<!default))\\s*:(?!:)" }, { include: "#string-backtick" }, { include: "#ternary_shorthand" }, { include: "#null_coalescing" }, { include: "#ternary_expression" }, { begin: "{", beginCaptures: { 0: { name: "punctuation.definition.begin.bracket.curly.php" } }, end: "}|(?=\\?>)", endCaptures: { 0: { name: "punctuation.definition.end.bracket.curly.php" } }, patterns: [{ include: "$self" }] }, { begin: "\\[", beginCaptures: { 0: { name: "punctuation.section.array.begin.php" } }, end: "\\]|(?=\\?>)", endCaptures: { 0: { name: "punctuation.section.array.end.php" } }, patterns: [{ include: "$self" }] }, { begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.begin.bracket.round.php" } }, end: "\\)|(?=\\?>)", endCaptures: { 0: { name: "punctuation.definition.end.bracket.round.php" } }, patterns: [{ include: "$self" }] }, { include: "#constants" }, { match: ",", name: "punctuation.separator.delimiter.php" }], repository: { attribute: { begin: "\\#\\[", end: "\\]", name: "meta.attribute.php", patterns: [{ match: ",", name: "punctuation.separator.delimiter.php" }, { begin: "([a-zA-Z0-9_\\x{7f}-\\x{10ffff}\\\\]+)\\s*(\\()", beginCaptures: { 1: { patterns: [{ include: "#attribute-name" }] }, 2: { name: "punctuation.definition.arguments.begin.bracket.round.php" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.arguments.end.bracket.round.php" } }, patterns: [{ include: "#named-arguments" }, { include: "$self" }] }, { include: "#attribute-name" }] }, "attribute-name": { patterns: [{ begin: "(?i)(?=\\\\?[a-z_\\x{7f}-\\x{10ffff}][a-z0-9_\\x{7f}-\\x{10ffff}]*\\\\)", end: `(?xi)
( [a-z_\\x{7f}-\\x{10ffff}] [a-z0-9_\\x{7f}-\\x{10ffff}]* )?
(?![a-z0-9_\\x{7f}-\\x{10ffff}\\\\])`, endCaptures: { 1: { name: "support.attribute.php" } }, patterns: [{ include: "#namespace" }] }, { captures: { 1: { name: "punctuation.separator.inheritance.php" } }, match: `(?xi)
(\\\\)?\\b(Attribute|SensitiveParameter|AllowDynamicProperties|ReturnTypeWillChange)\\b`, name: "support.attribute.builtin.php" }, { begin: "(?i)(?=[\\\\a-z_\\x{7f}-\\x{10ffff}])", end: `(?xi)
( [a-z_\\x{7f}-\\x{10ffff}] [a-z0-9_\\x{7f}-\\x{10ffff}]* )?
(?![a-z0-9_\\x{7f}-\\x{10ffff}\\\\])`, endCaptures: { 1: { name: "support.attribute.php" } }, patterns: [{ include: "#namespace" }] }] }, "class-builtin": { patterns: [{ captures: { 1: { name: "punctuation.separator.inheritance.php" } }, match: `(?xi)
(\\\\)?\\b
(Attribute|(APC|Append)Iterator|Array(Access|Iterator|Object)
|Bad(Function|Method)CallException
|(Caching|CallbackFilter)Iterator|Collator|Collectable|Cond|Countable|CURLFile
|Date(Interval|Period|Time(Interface|Immutable|Zone)?)?|Directory(Iterator)?|DomainException
|DOM(Attr|CdataSection|CharacterData|Comment|Document(Fragment)?|Element|EntityReference
|Implementation|NamedNodeMap|Node(list)?|ProcessingInstruction|Text|XPath)
|(Error)?Exception|EmptyIterator
|finfo
|Ev(Check|Child|Embed|Fork|Idle|Io|Loop|Periodic|Prepare|Signal|Stat|Timer|Watcher)?
|Event(Base|Buffer(Event)?|SslContext|Http(Request|Connection)?|Config|DnsBase|Util|Listener)?
|FANNConnection|(Filter|Filesystem)Iterator
|Gender\\\\Gender|GlobIterator|Gmagick(Draw|Pixel)?
|Haru(Annotation|Destination|Doc|Encoder|Font|Image|Outline|Page)
|Http((Inflate|Deflate)?Stream|Message|Request(Pool)?|Response|QueryString)
|HRTime\\\\(PerformanceCounter|StopWatch)
|Intl(Calendar|((CodePoint|RuleBased)?Break|Parts)?Iterator|DateFormatter|TimeZone)
|Imagick(Draw|Pixel(Iterator)?)?
|InfiniteIterator|InvalidArgumentException|Iterator(Aggregate|Iterator)?
|JsonSerializable
|KTaglib_(MPEG_(File|AudioProperties)|Tag|ID3v2_(Tag|(AttachedPicture)?Frame))
|Lapack|(Length|Locale|Logic)Exception|LimitIterator|Lua(Closure)?
|Mongo(BinData|Client|Code|Collection|CommandCursor|Cursor(Exception)?|Date|DB(Ref)?|DeleteBatch
|Grid(FS(Cursor|File)?)|Id|InsertBatch|Int(32|64)|Log|Pool|Regex|ResultException|Timestamp
|UpdateBatch|Write(Batch|ConcernException))?
|Memcache(d)?|MessageFormatter|MultipleIterator|Mutex
|mysqli(_(driver|stmt|warning|result))?
|MysqlndUh(Connection|PreparedStatement)
|NoRewindIterator|Normalizer|NumberFormatter
|OCI-(Collection|Lob)|OuterIterator|(OutOf(Bounds|Range)|Overflow)Exception
|ParentIterator|PDO(Statement)?|Phar(Data|FileInfo)?|php_user_filter|Pool
|QuickHash(Int(Set|StringHash)|StringIntHash)
|Recursive(Array|Caching|Directory|Fallback|Filter|Iterator|Regex|Tree)?Iterator
|Reflection(Class|Function(Abstract)?|Method|Object|Parameter|Property|(Zend)?Extension)?
|RangeException|Reflector|RegexIterator|ResourceBundle|RuntimeException|RRD(Creator|Graph|Updater)
|SAM(Connection|Message)|SCA(_(SoapProxy|LocalProxy))?
|SDO_(DAS_(ChangeSummary|Data(Factory|Object)|Relational|Setting|XML(_Document)?)
|Data(Factory|Object)|Exception|List|Model_(Property|ReflectionDataObject|Type)|Sequence)
|SeekableIterator|Serializable|SessionHandler(Interface)?|SimpleXML(Iterator|Element)|SNMP
|Soap(Client|Fault|Header|Param|Server|Var)
|SphinxClient|Spoofchecker
|Spl(DoublyLinkedList|Enum|File(Info|Object)|FixedArray|(Max|Min)?Heap|Observer|ObjectStorage
|(Priority)?Queue|Stack|Subject|Type|TempFileObject)
|SQLite(3(Result|Stmt)?|Database|Result|Unbuffered)
|stdClass|streamWrapper|SVM(Model)?|Swish(Result(s)?|Search)?|Sync(Event|Mutex|ReaderWriter|Semaphore)
|Thread(ed)?|tidy(Node)?|TokyoTyrant(Table|Iterator|Query)?|Transliterator|Traversable
|UConverter|(Underflow|UnexpectedValue)Exception
|V8Js(Exception)?|Varnish(Admin|Log|Stat)
|Worker|Weak(Map|Ref)
|XML(Diff\\\\(Base|DOM|File|Memory)|Reader|Writer)|XsltProcessor
|Yaf_(Route_(Interface|Map|Regex|Rewrite|Simple|Supervar)
|Action_Abstract|Application|Config_(Simple|Ini|Abstract)|Controller_Abstract
|Dispatcher|Exception|Loader|Plugin_Abstract|Registry|Request_(Abstract|Simple|Http)
|Response_Abstract|Router|Session|View_(Simple|Interface))
|Yar_(Client(_Exception)?|Concurrent_Client|Server(_Exception)?)
|ZipArchive|ZMQ(Context|Device|Poll|Socket)?)
\\b`, name: "support.class.builtin.php" }] }, "class-constant": { patterns: [{ captures: { 1: { name: "storage.modifier.php" }, 2: { name: "constant.other.php" } }, match: "(?i)\\b(const)\\s*([a-z_\\x{7f}-\\x{10ffff}][a-z0-9_\\x{7f}-\\x{10ffff}]*)" }] }, "class-extends": { patterns: [{ begin: "(?i)(extends)\\s+", beginCaptures: { 1: { name: "storage.modifier.extends.php" } }, end: "(?i)(?=[^A-Za-z0-9_\\x{7f}-\\x{10ffff}\\\\])", patterns: [{ include: "#comments" }, { include: "#inheritance-single" }] }] }, "class-implements": { patterns: [{ begin: "(?i)(implements)\\s+", beginCaptures: { 1: { name: "storage.modifier.implements.php" } }, end: "(?i)(?={)", patterns: [{ include: "#comments" }, { match: ",", name: "punctuation.separator.classes.php" }, { include: "#inheritance-single" }] }] }, "class-name": { patterns: [{ begin: "(?i)(?=\\\\?[a-z_\\x{7f}-\\x{10ffff}][a-z0-9_\\x{7f}-\\x{10ffff}]*\\\\)", end: `(?xi)
( [a-z_\\x{7f}-\\x{10ffff}] [a-z0-9_\\x{7f}-\\x{10ffff}]* )?
(?![a-z0-9_\\x{7f}-\\x{10ffff}\\\\])`, endCaptures: { 1: { name: "support.class.php" } }, patterns: [{ include: "#namespace" }] }, { include: "#class-builtin" }, { begin: "(?i)(?=[\\\\a-z_\\x{7f}-\\x{10ffff}])", end: `(?xi)
( [a-z_\\x{7f}-\\x{10ffff}] [a-z0-9_\\x{7f}-\\x{10ffff}]* )?
(?![a-z0-9_\\x{7f}-\\x{10ffff}\\\\])`, endCaptures: { 1: { name: "support.class.php" } }, patterns: [{ include: "#namespace" }] }] }, comments: { patterns: [{ begin: "/\\*\\*(?=\\s)", beginCaptures: { 0: { name: "punctuation.definition.comment.php" } }, end: "\\*/", endCaptures: { 0: { name: "punctuation.definition.comment.php" } }, name: "comment.block.documentation.phpdoc.php", patterns: [{ include: "#php_doc" }] }, { begin: "/\\*", captures: { 0: { name: "punctuation.definition.comment.php" } }, end: "\\*/", name: "comment.block.php" }, { begin: "(^\\s+)?(?=//)", beginCaptures: { 1: { name: "punctuation.whitespace.comment.leading.php" } }, end: "(?!\\G)", patterns: [{ begin: "//", beginCaptures: { 0: { name: "punctuation.definition.comment.php" } }, end: "\\n|(?=\\?>)", name: "comment.line.double-slash.php" }] }, { begin: "(^\\s+)?(?=#)(?!#\\[)", beginCaptures: { 1: { name: "punctuation.whitespace.comment.leading.php" } }, end: "(?!\\G)", patterns: [{ begin: "#", beginCaptures: { 0: { name: "punctuation.definition.comment.php" } }, end: "\\n|(?=\\?>)", name: "comment.line.number-sign.php" }] }] }, constants: { patterns: [{ match: "(?i)\\b(TRUE|FALSE|NULL|__(FILE|DIR|FUNCTION|CLASS|METHOD|LINE|NAMESPACE)__|ON|OFF|YES|NO|NL|BR|TAB)\\b", name: "constant.language.php" }, { captures: { 1: { name: "punctuation.separator.inheritance.php" } }, match: `(?x)
(\\\\)?\\b
(DEFAULT_INCLUDE_PATH
|EAR_(INSTALL|EXTENSION)_DIR
|E_(ALL|COMPILE_(ERROR|WARNING)|CORE_(ERROR|WARNING)|DEPRECATED|ERROR|NOTICE
|PARSE|RECOVERABLE_ERROR|STRICT|USER_(DEPRECATED|ERROR|NOTICE|WARNING)|WARNING)
|PHP_(ROUND_HALF_(DOWN|EVEN|ODD|UP)|(MAJOR|MINOR|RELEASE)_VERSION|MAXPATHLEN
|BINDIR|SHLIB_SUFFIX|SYSCONFDIR|SAPI|CONFIG_FILE_(PATH|SCAN_DIR)
|INT_(MAX|SIZE)|ZTS|OS|OUTPUT_HANDLER_(START|CONT|END)|DEBUG|DATADIR
|URL_(SCHEME|HOST|USER|PORT|PASS|PATH|QUERY|FRAGMENT)|PREFIX
|EXTRA_VERSION|EXTENSION_DIR|EOL|VERSION(_ID)?
|WINDOWS_(NT_(SERVER|DOMAIN_CONTROLLER|WORKSTATION)
|VERSION_(MAJOR|MINOR)|BUILD|SUITEMASK|SP_(MAJOR|MINOR)
|PRODUCTTYPE|PLATFORM)
|LIBDIR|LOCALSTATEDIR)
|STD(ERR|IN|OUT)|ZEND_(DEBUG_BUILD|THREAD_SAFE))
\\b`, name: "support.constant.core.php" }, { captures: { 1: { name: "punctuation.separator.inheritance.php" } }, match: `(?x)
(\\\\)?\\b
(__COMPILER_HALT_OFFSET__|AB(MON_(1|2|3|4|5|6|7|8|9|10|11|12)|DAY[1-7])
|AM_STR|ASSERT_(ACTIVE|BAIL|CALLBACK_QUIET_EVAL|WARNING)|ALT_DIGITS
|CASE_(UPPER|LOWER)|CHAR_MAX|CONNECTION_(ABORTED|NORMAL|TIMEOUT)|CODESET|COUNT_(NORMAL|RECURSIVE)
|CREDITS_(ALL|DOCS|FULLPAGE|GENERAL|GROUP|MODULES|QA|SAPI)
|CRYPT_(BLOWFISH|EXT_DES|MD5|SHA(256|512)|SALT_LENGTH|STD_DES)|CURRENCY_SYMBOL
|D_(T_)?FMT|DATE_(ATOM|COOKIE|ISO8601|RFC(822|850|1036|1123|2822|3339)|RSS|W3C)
|DAY_[1-7]|DECIMAL_POINT|DIRECTORY_SEPARATOR
|ENT_(COMPAT|IGNORE|(NO)?QUOTES)|EXTR_(IF_EXISTS|OVERWRITE|PREFIX_(ALL|IF_EXISTS|INVALID|SAME)|REFS|SKIP)
|ERA(_(D_(T_)?FMT)|T_FMT|YEAR)?|FRAC_DIGITS|GROUPING|HASH_HMAC|HTML_(ENTITIES|SPECIALCHARS)
|INF|INFO_(ALL|CREDITS|CONFIGURATION|ENVIRONMENT|GENERAL|LICENSEMODULES|VARIABLES)
|INI_(ALL|CANNER_(NORMAL|RAW)|PERDIR|SYSTEM|USER)|INT_(CURR_SYMBOL|FRAC_DIGITS)
|LC_(ALL|COLLATE|CTYPE|MESSAGES|MONETARY|NUMERIC|TIME)|LOCK_(EX|NB|SH|UN)
|LOG_(ALERT|AUTH(PRIV)?|CRIT|CRON|CONS|DAEMON|DEBUG|EMERG|ERR|INFO|LOCAL[1-7]|LPR|KERN|MAIL
|NEWS|NODELAY|NOTICE|NOWAIT|ODELAY|PID|PERROR|WARNING|SYSLOG|UCP|USER)
|M_(1_PI|SQRT(1_2|2|3|PI)|2_(SQRT)?PI|PI(_(2|4))?|E(ULER)?|LN(10|2|PI)|LOG(10|2)E)
|MON_(1|2|3|4|5|6|7|8|9|10|11|12|DECIMAL_POINT|GROUPING|THOUSANDS_SEP)
|N_(CS_PRECEDES|SEP_BY_SPACE|SIGN_POSN)|NAN|NEGATIVE_SIGN|NO(EXPR|STR)
|P_(CS_PRECEDES|SEP_BY_SPACE|SIGN_POSN)|PM_STR|POSITIVE_SIGN
|PATH(_SEPARATOR|INFO_(EXTENSION|(BASE|DIR|FILE)NAME))|RADIXCHAR
|SEEK_(CUR|END|SET)|SORT_(ASC|DESC|LOCALE_STRING|REGULAR|STRING)|STR_PAD_(BOTH|LEFT|RIGHT)
|T_FMT(_AMPM)?|THOUSEP|THOUSANDS_SEP
|UPLOAD_ERR_(CANT_WRITE|EXTENSION|(FORM|INI)_SIZE|NO_(FILE|TMP_DIR)|OK|PARTIAL)
|YES(EXPR|STR))
\\b`, name: "support.constant.std.php" }, { captures: { 1: { name: "punctuation.separator.inheritance.php" } }, match: `(?x)
(\\\\)?\\b
(GLOB_(MARK|BRACE|NO(SORT|CHECK|ESCAPE)|ONLYDIR|ERR|AVAILABLE_FLAGS)
|XML_(SAX_IMPL|(DTD|DOCUMENT(_(FRAG|TYPE))?|HTML_DOCUMENT|NOTATION|NAMESPACE_DECL|PI|COMMENT|DATA_SECTION|TEXT)_NODE
|OPTION_(SKIP_(TAGSTART|WHITE)|CASE_FOLDING|TARGET_ENCODING)
|ERROR_((BAD_CHAR|(ATTRIBUTE_EXTERNAL|BINARY|PARAM|RECURSIVE)_ENTITY)_REF|MISPLACED_XML_PI|SYNTAX|NONE
|NO_(MEMORY|ELEMENTS)|TAG_MISMATCH|INCORRECT_ENCODING|INVALID_TOKEN|DUPLICATE_ATTRIBUTE
|UNCLOSED_(CDATA_SECTION|TOKEN)|UNDEFINED_ENTITY|UNKNOWN_ENCODING|JUNK_AFTER_DOC_ELEMENT
|PARTIAL_CHAR|EXTERNAL_ENTITY_HANDLING|ASYNC_ENTITY)
|ENTITY_(((REF|DECL)_)?NODE)|ELEMENT(_DECL)?_NODE|LOCAL_NAMESPACE|ATTRIBUTE_(NMTOKEN(S)?|NOTATION|NODE)
|CDATA|ID(REF(S)?)?|DECL_NODE|ENTITY|ENUMERATION)
|MHASH_(RIPEMD(128|160|256|320)|GOST|MD(2|4|5)|SHA(1|224|256|384|512)|SNEFRU256|HAVAL(128|160|192|224|256)
|CRC23(B)?|TIGER(128|160)?|WHIRLPOOL|ADLER32)
|MYSQL_(BOTH|NUM|CLIENT_(SSL|COMPRESS|IGNORE_SPACE|INTERACTIVE|ASSOC))
|MYSQLI_(REPORT_(STRICT|INDEX|OFF|ERROR|ALL)|REFRESH_(GRANT|MASTER|BACKUP_LOG|STATUS|SLAVE|HOSTS|THREADS|TABLES|LOG)
|READ_DEFAULT_(FILE|GROUP)|(GROUP|MULTIPLE_KEY|BINARY|BLOB)_FLAG|BOTH
|STMT_ATTR_(CURSOR_TYPE|UPDATE_MAX_LENGTH|PREFETCH_ROWS)|STORE_RESULT
|SERVER_QUERY_(NO_((GOOD_)?INDEX_USED)|WAS_SLOW)|SET_(CHARSET_NAME|FLAG)
|NO_(DEFAULT_VALUE_FLAG|DATA)|NOT_NULL_FLAG|NUM(_FLAG)?
|CURSOR_TYPE_(READ_ONLY|SCROLLABLE|NO_CURSOR|FOR_UPDATE)
|CLIENT_(SSL|NO_SCHEMA|COMPRESS|IGNORE_SPACE|INTERACTIVE|FOUND_ROWS)
|TYPE_(GEOMETRY|((MEDIUM|LONG|TINY)_)?BLOB|BIT|SHORT|STRING|SET|YEAR|NULL|NEWDECIMAL|NEWDATE|CHAR
|TIME(STAMP)?|TINY|INT24|INTERVAL|DOUBLE|DECIMAL|DATE(TIME)?|ENUM|VAR_STRING|FLOAT|LONG(LONG)?)
|TIME_STAMP_FLAG|INIT_COMMAND|ZEROFILL_FLAG|ON_UPDATE_NOW_FLAG
|OPT_(NET_((CMD|READ)_BUFFER_SIZE)|CONNECT_TIMEOUT|INT_AND_FLOAT_NATIVE|LOCAL_INFILE)
|DEBUG_TRACE_ENABLED|DATA_TRUNCATED|USE_RESULT|(ENUM|(PART|PRI|UNIQUE)_KEY|UNSIGNED)_FLAG
|ASSOC|ASYNC|AUTO_INCREMENT_FLAG)
|MCRYPT_(RC(2|6)|RIJNDAEL_(128|192|256)|RAND|GOST|XTEA|MODE_(STREAM|NOFB|CBC|CFB|OFB|ECB)|MARS
|BLOWFISH(_COMPAT)?|SERPENT|SKIPJACK|SAFER(64|128|PLUS)|CRYPT|CAST_(128|256)|TRIPLEDES|THREEWAY
|TWOFISH|IDEA|(3)?DES|DECRYPT|DEV_(U)?RANDOM|PANAMA|ENCRYPT|ENIGNA|WAKE|LOKI97|ARCFOUR(_IV)?)
|STREAM_(REPORT_ERRORS|MUST_SEEK|MKDIR_RECURSIVE|BUFFER_(NONE|FULL|LINE)|SHUT_(RD)?WR
|SOCK_(RDM|RAW|STREAM|SEQPACKET|DGRAM)|SERVER_(BIND|LISTEN)
|NOTIFY_(REDIRECTED|RESOLVE|MIME_TYPE_IS|SEVERITY_(INFO|ERR|WARN)|COMPLETED|CONNECT|PROGRESS
|FILE_SIZE_IS|FAILURE|AUTH_(REQUIRED|RESULT))
|CRYPTO_METHOD_((SSLv2(3)?|SSLv3|TLS)_(CLIENT|SERVER))|CLIENT_((ASYNC_)?CONNECT|PERSISTENT)
|CAST_(AS_STREAM|FOR_SELECT)|(IGNORE|IS)_URL|IPPROTO_(RAW|TCP|ICMP|IP|UDP)|OOB
|OPTION_(READ_(BUFFER|TIMEOUT)|BLOCKING|WRITE_BUFFER)|URL_STAT_(LINK|QUIET)|USE_PATH
|PEEK|PF_(INET(6)?|UNIX)|ENFORCE_SAFE_MODE|FILTER_(ALL|READ|WRITE))
|SUNFUNCS_RET_(DOUBLE|STRING|TIMESTAMP)
|SQLITE_(READONLY|ROW|MISMATCH|MISUSE|BOTH|BUSY|SCHEMA|NOMEM|NOTFOUND|NOTADB|NOLFS|NUM|CORRUPT
|CONSTRAINT|CANTOPEN|TOOBIG|INTERRUPT|INTERNAL|IOERR|OK|DONE|PROTOCOL|PERM|ERROR|EMPTY
|FORMAT|FULL|LOCKED|ABORT|ASSOC|AUTH)
|SQLITE3_(BOTH|BLOB|NUM|NULL|TEXT|INTEGER|OPEN_(READ(ONLY|WRITE)|CREATE)|FLOAT_ASSOC)
|CURL(M_(BAD_((EASY)?HANDLE)|CALL_MULTI_PERFORM|INTERNAL_ERROR|OUT_OF_MEMORY|OK)
|MSG_DONE|SSH_AUTH_(HOST|NONE|DEFAULT|PUBLICKEY|PASSWORD|KEYBOARD)
|CLOSEPOLICY_(SLOWEST|CALLBACK|OLDEST|LEAST_(RECENTLY_USED|TRAFFIC)
|INFO_(REDIRECT_(COUNT|TIME)|REQUEST_SIZE|SSL_VERIFYRESULT|STARTTRANSFER_TIME
|(SIZE|SPEED)_(DOWNLOAD|UPLOAD)|HTTP_CODE|HEADER_(OUT|SIZE)|NAMELOOKUP_TIME
|CONNECT_TIME|CONTENT_(TYPE|LENGTH_(DOWNLOAD|UPLOAD))|CERTINFO|TOTAL_TIME
|PRIVATE|PRETRANSFER_TIME|EFFECTIVE_URL|FILETIME)
|OPT_(RESUME_FROM|RETURNTRANSFER|REDIR_PROTOCOLS|REFERER|READ(DATA|FUNCTION)|RANGE|RANDOM_FILE
|MAX(CONNECTS|REDIRS)|BINARYTRANSFER|BUFFERSIZE
|SSH_(HOST_PUBLIC_KEY_MD5|(PRIVATE|PUBLIC)_KEYFILE)|AUTH_TYPES)
|SSL(CERT(TYPE|PASSWD)?|ENGINE(_DEFAULT)?|VERSION|KEY(TYPE|PASSWD)?)
|SSL_(CIPHER_LIST|VERIFY(HOST|PEER))
|STDERR|HTTP(GET|HEADER|200ALIASES|_VERSION|PROXYTUNNEL|AUTH)
|HEADER(FUNCTION)?|NO(BODY|SIGNAL|PROGRESS)|NETRC|CRLF|CONNECTTIMEOUT(_MS)?
|COOKIE(SESSION|JAR|FILE)?|CUSTOMREQUEST|CERTINFO|CLOSEPOLICY|CA(INFO|PATH)|TRANSFERTEXT
|TCP_NODELAY|TIME(CONDITION|OUT(_MS)?|VALUE)|INTERFACE|INFILE(SIZE)?|IPRESOLVE
|DNS_(CACHE_TIMEOUT|USE_GLOBAL_CACHE)|URL|USER(AGENT|PWD)|UNRESTRICTED_AUTH|UPLOAD
|PRIVATE|PROGRESSFUNCTION|PROXY(TYPE|USERPWD|PORT|AUTH)?|PROTOCOLS|PORT
|POST(REDIR|QUOTE|FIELDS)?|PUT|EGDSOCKET|ENCODING|VERBOSE|KRB4LEVEL|KEYPASSWD|QUOTE|FRESH_CONNECT
|FTP(APPEND|LISTONLY|PORT|SSLAUTH)
|FTP_(SSL|SKIP_PASV_IP|CREATE_MISSING_DIRS|USE_EP(RT|SV)|FILEMETHOD)
|FILE(TIME)?|FORBID_REUSE|FOLLOWLOCATION|FAILONERROR|WRITE(FUNCTION|HEADER)|LOW_SPEED_(LIMIT|TIME)
|AUTOREFERER)
|PROXY_(HTTP|SOCKS(4|5))|PROTO_(SCP|SFTP|HTTP(S)?|TELNET|TFTP|DICT|FTP(S)?|FILE|LDAP(S)?|ALL)
|E_((RECV|READ)_ERROR|GOT_NOTHING|MALFORMAT_USER
|BAD_(CONTENT_ENCODING|CALLING_ORDER|PASSWORD_ENTERED|FUNCTION_ARGUMENT)
|SSH|SSL_(CIPHER|CONNECT_ERROR|CERTPROBLEM|CACERT|PEER_CERTIFICATE|ENGINE_(NOTFOUND|SETFAILED))
|SHARE_IN_USE|SEND_ERROR|HTTP_(RANGE_ERROR|NOT_FOUND|PORT_FAILED|POST_ERROR)
|COULDNT_(RESOLVE_(HOST|PROXY)|CONNECT)|TOO_MANY_REDIRECTS|TELNET_OPTION_SYNTAX|OBSOLETE
|OUT_OF_MEMORY|OPERATION|TIMEOUTED|OK|URL_MALFORMAT(_USER)?|UNSUPPORTED_PROTOCOL
|UNKNOWN_TELNET_OPTION|PARTIAL_FILE
|FTP_(BAD_DOWNLOAD_RESUME|SSL_FAILED|COULDNT_(RETR_FILE|GET_SIZE|STOR_FILE|SET_(BINARY|ASCII)|USE_REST)
|CANT_(GET_HOST|RECONNECT)|USER_PASSWORD_INCORRECT|PORT_FAILED|QUOTE_ERROR|WRITE_ERROR
|WEIRD_((PASS|PASV|SERVER|USER)_REPLY|227_FORMAT)|ACCESS_DENIED)
|FILESIZE_EXCEEDED|FILE_COULDNT_READ_FILE|FUNCTION_NOT_FOUND|FAILED_INIT|WRITE_ERROR|LIBRARY_NOT_FOUND
|LDAP_(SEARCH_FAILED|CANNOT_BIND|INVALID_URL)|ABORTED_BY_CALLBACK)
|VERSION_NOW
|FTP(METHOD_(MULTI|SINGLE|NO)CWD|SSL_(ALL|NONE|CONTROL|TRY)|AUTH_(DEFAULT|SSL|TLS))
|AUTH_(ANY(SAFE)?|BASIC|DIGEST|GSSNEGOTIATE|NTLM))
|CURL_(HTTP_VERSION_(1_(0|1)|NONE)|NETRC_(REQUIRED|IGNORED|OPTIONAL)|TIMECOND_(IF(UN)?MODSINCE|LASTMOD)
|IPRESOLVE_(V(4|6)|WHATEVER)|VERSION_(SSL|IPV6|KERBEROS4|LIBZ))
|IMAGETYPE_(GIF|XBM|BMP|SWF|COUNT|TIFF_(MM|II)|ICO|IFF|UNKNOWN|JB2|JPX|JP2|JPC|JPEG(2000)?|PSD|PNG|WBMP)
|INPUT_(REQUEST|GET|SERVER|SESSION|COOKIE|POST|ENV)|ICONV_(MIME_DECODE_(STRICT|CONTINUE_ON_ERROR)|IMPL|VERSION)
|DNS_(MX|SRV|SOA|HINFO|NS|NAPTR|CNAME|TXT|PTR|ANY|ALL|AAAA|A(6)?)
|DOM(STRING_SIZE_ERR)
|DOM_((SYNTAX|HIERARCHY_REQUEST|NO_(MODIFICATION_ALLOWED|DATA_ALLOWED)|NOT_(FOUND|SUPPORTED)|NAMESPACE
|INDEX_SIZE|USE_ATTRIBUTE|VALID_(MODIFICATION|STATE|CHARACTER|ACCESS)|PHP|VALIDATION|WRONG_DOCUMENT)_ERR)
|JSON_(HEX_(TAG|QUOT|AMP|APOS)|NUMERIC_CHECK|ERROR_(SYNTAX|STATE_MISMATCH|NONE|CTRL_CHAR|DEPTH|UTF8)|FORCE_OBJECT)
|PREG_((D_UTF8(_OFFSET)?|NO|INTERNAL|(BACKTRACK|RECURSION)_LIMIT)_ERROR|GREP_INVERT
|SPLIT_(NO_EMPTY|(DELIM|OFFSET)_CAPTURE)|SET_ORDER|OFFSET_CAPTURE|PATTERN_ORDER)
|PSFS_(PASS_ON|ERR_FATAL|FEED_ME|FLAG_(NORMAL|FLUSH_(CLOSE|INC)))
|PCRE_VERSION|POSIX_((F|R|W|X)_OK|S_IF(REG|BLK|SOCK|CHR|IFO))
|FNM_(NOESCAPE|CASEFOLD|PERIOD|PATHNAME)
|FILTER_(REQUIRE_(SCALAR|ARRAY)|NULL_ON_FAILURE|CALLBACK|DEFAULT|UNSAFE_RAW
|SANITIZE_(MAGIC_QUOTES|STRING|STRIPPED|SPECIAL_CHARS|NUMBER_(INT|FLOAT)|URL
|EMAIL|ENCODED|FULL_SPCIAL_CHARS)
|VALIDATE_(REGEXP|BOOLEAN|INT|IP|URL|EMAIL|FLOAT)
|FORCE_ARRAY
|FLAG_(SCHEME_REQUIRED|STRIP_(BACKTICK|HIGH|LOW)|HOST_REQUIRED|NONE|NO_(RES|PRIV)_RANGE|ENCODE_QUOTES
|IPV(4|6)|PATH_REQUIRED|EMPTY_STRING_NULL|ENCODE_(HIGH|LOW|AMP)|QUERY_REQUIRED
|ALLOW_(SCIENTIFIC|HEX|THOUSAND|OCTAL|FRACTION)))
|FILE_(BINARY|SKIP_EMPTY_LINES|NO_DEFAULT_CONTEXT|TEXT|IGNORE_NEW_LINES|USE_INCLUDE_PATH|APPEND)
|FILEINFO_(RAW|MIME(_(ENCODING|TYPE))?|SYMLINK|NONE|CONTINUE|DEVICES|PRESERVE_ATIME)
|FORCE_(DEFLATE|GZIP)
|LIBXML_(XINCLUDE|NSCLEAN|NO(XMLDECL|BLANKS|NET|CDATA|ERROR|EMPTYTAG|ENT|WARNING)
|COMPACT|DTD(VALID|LOAD|ATTR)|((DOTTED|LOADED)_)?VERSION|PARSEHUGE|ERR_(NONE|ERROR|FATAL|WARNING)))
\\b`, name: "support.constant.ext.php" }, { captures: { 1: { name: "punctuation.separator.inheritance.php" } }, match: `(?x)
(\\\\)?\\b
(T_(RETURN|REQUIRE(_ONCE)?|GOTO|GLOBAL|(MINUS|MOD|MUL|XOR)_EQUAL|METHOD_C|ML_COMMENT|BREAK
|BOOL_CAST|BOOLEAN_(AND|OR)|BAD_CHARACTER|SR(_EQUAL)?|STRING(_CAST|VARNAME)?|START_HEREDOC|STATIC
|SWITCH|SL(_EQUAL)?|HALT_COMPILER|NS_(C|SEPARATOR)|NUM_STRING|NEW|NAMESPACE|CHARACTER|COMMENT
|CONSTANT(_ENCAPSED_STRING)?|CONCAT_EQUAL|CONTINUE|CURLY_OPEN|CLOSE_TAG|CLONE|CLASS(_C)?
|CASE|CATCH|TRY|THROW|IMPLEMENTS|ISSET|IS_((GREATER|SMALLER)_OR_EQUAL|(NOT_)?(IDENTICAL|EQUAL))
|INSTANCEOF|INCLUDE(_ONCE)?|INC|INT_CAST|INTERFACE|INLINE_HTML|IF|OR_EQUAL|OBJECT_(CAST|OPERATOR)
|OPEN_TAG(_WITH_ECHO)?|OLD_FUNCTION|DNUMBER|DIR|DIV_EQUAL|DOC_COMMENT|DOUBLE_(ARROW|CAST|COLON)
|DOLLAR_OPEN_CURLY_BRACES|DO|DEC|DECLARE|DEFAULT|USE|UNSET(_CAST)?|PRINT|PRIVATE|PROTECTED|PUBLIC
|PLUS_EQUAL|PAAMAYIM_NEKUDOTAYIM|EXTENDS|EXIT|EMPTY|ENCAPSED_AND_WHITESPACE
|END(SWITCH|IF|DECLARE|FOR(EACH)?|WHILE)|END_HEREDOC|ECHO|EVAL|ELSE(IF)?|VAR(IABLE)?|FINAL|FILE
|FOR(EACH)?|FUNC_C|FUNCTION|WHITESPACE|WHILE|LNUMBER|LIST|LINE|LOGICAL_(AND|OR|XOR)
|ARRAY_(CAST)?|ABSTRACT|AS|AND_EQUAL))
\\b`, name: "support.constant.parser-token.php" }, { match: "(?i)[a-z_\\x{7f}-\\x{10ffff}][a-z0-9_\\x{7f}-\\x{10ffff}]*", name: "constant.other.php" }] }, "function-call": { patterns: [{ begin: `(?x)
(
\\\\?(?<![a-zA-Z0-9_\\x{7f}-\\x{10ffff}])
[a-zA-Z_\\x{7f}-\\x{10ffff}][a-zA-Z0-9_\\x{7f}-\\x{10ffff}]*
(?:\\\\[a-zA-Z_\\x{7f}-\\x{10ffff}][a-zA-Z0-9_\\x{7f}-\\x{10ffff}]*)+
)\\s*(\\()`, beginCaptures: { 1: { patterns: [{ include: "#namespace" }, { match: "(?i)[a-z_\\x{7f}-\\x{10ffff}][a-z0-9_\\x{7f}-\\x{10ffff}]*", name: "entity.name.function.php" }] }, 2: { name: "punctuation.definition.arguments.begin.bracket.round.php" } }, end: "\\)|(?=\\?>)", endCaptures: { 0: { name: "punctuation.definition.arguments.end.bracket.round.php" } }, name: "meta.function-call.php", patterns: [{ include: "#named-arguments" }, { include: "$self" }] }, { begin: "(\\\\)?(?<![a-zA-Z0-9_\\x{7f}-\\x{10ffff}])([a-zA-Z_\\x{7f}-\\x{10ffff}][a-zA-Z0-9_\\x{7f}-\\x{10ffff}]*)\\s*(\\()", beginCaptures: { 1: { patterns: [{ include: "#namespace" }] }, 2: { patterns: [{ include: "#support" }, { match: "(?i)[a-z_\\x{7f}-\\x{10ffff}][a-z0-9_\\x{7f}-\\x{10ffff}]*", name: "entity.name.function.php" }] }, 3: { name: "punctuation.definition.arguments.begin.bracket.round.php" } }, end: "\\)|(?=\\?>)", endCaptures: { 0: { name: "punctuation.definition.arguments.end.bracket.round.php" } }, name: "meta.function-call.php", patterns: [{ include: "#named-arguments" }, { include: "$self" }] }, { match: "(?i)\\b(print|echo)\\b", name: "support.function.construct.output.php" }] }, "function-parameters": { patterns: [{ include: "#attribute" }, { include: "#comments" }, { match: ",", name: "punctuation.separator.delimiter.php" }, { captures: { 1: { patterns: [{ include: "#php-types" }] }, 2: { name: "variable.other.php" }, 3: { name: "storage.modifier.reference.php" }, 4: { name: "keyword.operator.variadic.php" }, 5: { name: "punctuation.definition.variable.php" } }, match: `(?xi)
(?: (

(?:\\?\\s*)? [a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+ |

(?: [a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+ | \\(\\s* [a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+(?:\\s*&\\s*[a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+)+ \\s*\\) )
(?: \\s*[|&]\\s*
(?: [a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+ | \\(\\s* [a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+(?:\\s*&\\s*[a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+)+ \\s*\\) )
)+
) \\s+ )?
((?:(&)\\s*)?(\\.\\.\\.)(\\$)[a-z_\\x{7f}-\\x{10ffff}][a-z0-9_\\x{7f}-\\x{10ffff}]*)
(?=\\s*(?:,|\\)|/[/*]|\\#|$))`, name: "meta.function.parameter.variadic.php" }, { begin: `(?xi)
(

(?:\\?\\s*)? [a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+ |

(?: [a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+ | \\(\\s* [a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+(?:\\s*&\\s*[a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+)+ \\s*\\) )
(?: \\s*[|&]\\s*
(?: [a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+ | \\(\\s* [a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+(?:\\s*&\\s*[a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+)+ \\s*\\) )
)+
)
\\s+ ((?:(&)\\s*)?(\\$)[a-z_\\x{7f}-\\x{10ffff}][a-z0-9_\\x{7f}-\\x{10ffff}]*)`, beginCaptures: { 1: { patterns: [{ include: "#php-types" }] }, 2: { name: "variable.other.php" }, 3: { name: "storage.modifier.reference.php" }, 4: { name: "punctuation.definition.variable.php" } }, end: "(?=\\s*(?:,|\\)|/[/*]|\\#))", name: "meta.function.parameter.typehinted.php", patterns: [{ begin: "=", beginCaptures: { 0: { name: "keyword.operator.assignment.php" } }, end: "(?=\\s*(?:,|\\)|/[/*]|\\#))", patterns: [{ include: "#parameter-default-types" }] }] }, { captures: { 1: { name: "variable.other.php" }, 2: { name: "storage.modifier.reference.php" }, 3: { name: "punctuation.definition.variable.php" } }, match: `(?xi)
((?:(&)\\s*)?(\\$)[a-z_\\x{7f}-\\x{10ffff}][a-z0-9_\\x{7f}-\\x{10ffff}]*)
(?=\\s*(?:,|\\)|/[/*]|\\#|$))`, name: "meta.function.parameter.no-default.php" }, { begin: `(?xi)
((?:(&)\\s*)?(\\$)[a-z_\\x{7f}-\\x{10ffff}][a-z0-9_\\x{7f}-\\x{10ffff}]*)
\\s*(=)\\s*`, beginCaptures: { 1: { name: "variable.other.php" }, 2: { name: "storage.modifier.reference.php" }, 3: { name: "punctuation.definition.variable.php" }, 4: { name: "keyword.operator.assignment.php" } }, end: "(?=\\s*(?:,|\\)|/[/*]|\\#))", name: "meta.function.parameter.default.php", patterns: [{ include: "#parameter-default-types" }] }] }, heredoc: { patterns: [{ begin: '(?i)(?=<<<\\s*("?)([a-z_\\x{7f}-\\x{10ffff}][a-z0-9_\\x{7f}-\\x{10ffff}]*)(\\1)\\s*$)', end: "(?!\\G)", name: "string.unquoted.heredoc.php", patterns: [{ include: "#heredoc_interior" }] }, { begin: "(?=<<<\\s*'([a-zA-Z_]+[a-zA-Z0-9_]*)'\\s*$)", end: "(?!\\G)", name: "string.unquoted.nowdoc.php", patterns: [{ include: "#nowdoc_interior" }] }] }, heredoc_interior: { patterns: [{ begin: '(<<<)\\s*("?)(HTML)(\\2)(\\s*)$', beginCaptures: { 0: { name: "punctuation.section.embedded.begin.php" }, 1: { name: "punctuation.definition.string.php" }, 3: { name: "keyword.operator.heredoc.php" }, 5: { name: "invalid.illegal.trailing-whitespace.php" } }, contentName: "text.html", end: "^\\s*(\\3)(?![A-Za-z0-9_\\x{7f}-\\x{10ffff}])", endCaptures: { 0: { name: "punctuation.section.embedded.end.php" }, 1: { name: "keyword.operator.heredoc.php" } }, name: "meta.embedded.html", patterns: [{ include: "#interpolation" }, { include: "text.html.basic" }] }, { begin: '(<<<)\\s*("?)(XML)(\\2)(\\s*)$', beginCaptures: { 0: { name: "punctuation.section.embedded.begin.php" }, 1: { name: "punctuation.definition.string.php" }, 3: { name: "keyword.operator.heredoc.php" }, 5: { name: "invalid.illegal.trailing-whitespace.php" } }, contentName: "text.xml", end: "^\\s*(\\3)(?![A-Za-z0-9_\\x{7f}-\\x{10ffff}])", endCaptures: { 0: { name: "punctuation.section.embedded.end.php" }, 1: { name: "keyword.operator.heredoc.php" } }, name: "meta.embedded.xml", patterns: [{ include: "#interpolation" }, { include: "text.xml" }] }, { begin: '(<<<)\\s*("?)([DS]QL)(\\2)(\\s*)$', beginCaptures: { 0: { name: "punctuation.section.embedded.begin.php" }, 1: { name: "punctuation.definition.string.php" }, 3: { name: "keyword.operator.heredoc.php" }, 5: { name: "invalid.illegal.trailing-whitespace.php" } }, contentName: "source.sql", end: "^\\s*(\\3)(?![A-Za-z0-9_\\x{7f}-\\x{10ffff}])", endCaptures: { 0: { name: "punctuation.section.embedded.end.php" }, 1: { name: "keyword.operator.heredoc.php" } }, name: "meta.embedded.sql", patterns: [{ include: "#interpolation" }, { include: "source.sql" }] }, { begin: '(<<<)\\s*("?)(JAVASCRIPT|JS)(\\2)(\\s*)$', beginCaptures: { 0: { name: "punctuation.section.embedded.begin.php" }, 1: { name: "punctuation.definition.string.php" }, 3: { name: "keyword.operator.heredoc.php" }, 5: { name: "invalid.illegal.trailing-whitespace.php" } }, contentName: "source.js", end: "^\\s*(\\3)(?![A-Za-z0-9_\\x{7f}-\\x{10ffff}])", endCaptures: { 0: { name: "punctuation.section.embedded.end.php" }, 1: { name: "keyword.operator.heredoc.php" } }, name: "meta.embedded.js", patterns: [{ include: "#interpolation" }, { include: "source.js" }] }, { begin: '(<<<)\\s*("?)(JSON)(\\2)(\\s*)$', beginCaptures: { 0: { name: "punctuation.section.embedded.begin.php" }, 1: { name: "punctuation.definition.string.php" }, 3: { name: "keyword.operator.heredoc.php" }, 5: { name: "invalid.illegal.trailing-whitespace.php" } }, contentName: "source.json", end: "^\\s*(\\3)(?![A-Za-z0-9_\\x{7f}-\\x{10ffff}])", endCaptures: { 0: { name: "punctuation.section.embedded.end.php" }, 1: { name: "keyword.operator.heredoc.php" } }, name: "meta.embedded.json", patterns: [{ include: "#interpolation" }, { include: "source.json" }] }, { begin: '(<<<)\\s*("?)(CSS)(\\2)(\\s*)$', beginCaptures: { 0: { name: "punctuation.section.embedded.begin.php" }, 1: { name: "punctuation.definition.string.php" }, 3: { name: "keyword.operator.heredoc.php" }, 5: { name: "invalid.illegal.trailing-whitespace.php" } }, contentName: "source.css", end: "^\\s*(\\3)(?![A-Za-z0-9_\\x{7f}-\\x{10ffff}])", endCaptures: { 0: { name: "punctuation.section.embedded.end.php" }, 1: { name: "keyword.operator.heredoc.php" } }, name: "meta.embedded.css", patterns: [{ include: "#interpolation" }, { include: "source.css" }] }, { begin: '(<<<)\\s*("?)(REGEXP?)(\\2)(\\s*)$', beginCaptures: { 0: { name: "punctuation.section.embedded.begin.php" }, 1: { name: "punctuation.definition.string.php" }, 3: { name: "keyword.operator.heredoc.php" }, 5: { name: "invalid.illegal.trailing-whitespace.php" } }, contentName: "string.regexp.heredoc.php", end: "^\\s*(\\3)(?![A-Za-z0-9_\\x{7f}-\\x{10ffff}])", endCaptures: { 0: { name: "punctuation.section.embedded.end.php" }, 1: { name: "keyword.operator.heredoc.php" } }, patterns: [{ include: "#interpolation" }, { match: "(\\\\){1,2}[.$^\\[\\]{}]", name: "constant.character.escape.regex.php" }, { captures: { 1: { name: "punctuation.definition.arbitrary-repitition.php" }, 3: { name: "punctuation.definition.arbitrary-repitition.php" } }, match: "({)\\d+(,\\d+)?(})", name: "string.regexp.arbitrary-repitition.php" }, { begin: "\\[(?:\\^?\\])?", captures: { 0: { name: "punctuation.definition.character-class.php" } }, end: "\\]", name: "string.regexp.character-class.php", patterns: [{ match: "\\\\[\\\\'\\[\\]]", name: "constant.character.escape.php" }] }, { match: "[$^+*]", name: "keyword.operator.regexp.php" }, { begin: "(?i)(?<=^|\\s)(#)\\s(?=[[a-z0-9_\\x{7f}-\\x{10ffff},. \\t?!-][^\\x{00}-\\x{7f}]]*$)", beginCaptures: { 1: { name: "punctuation.definition.comment.php" } }, end: "$", endCaptures: { 0: { name: "punctuation.definition.comment.php" } }, name: "comment.line.number-sign.php" }] }, { begin: '(<<<)\\s*("?)(BLADE)(\\2)(\\s*)$', beginCaptures: { 0: { name: "punctuation.section.embedded.begin.php" }, 1: { name: "punctuation.definition.string.php" }, 3: { name: "keyword.operator.heredoc.php" }, 5: { name: "invalid.illegal.trailing-whitespace.php" } }, contentName: "text.html.php.blade", end: "^\\s*(\\3)(?![A-Za-z0-9_\\x{7f}-\\x{10ffff}])", endCaptures: { 0: { name: "punctuation.section.embedded.end.php" }, 1: { name: "keyword.operator.heredoc.php" } }, name: "meta.embedded.php.blade", patterns: [{ include: "#interpolation" }] }, { begin: '(?i)(<<<)\\s*("?)([a-z_\\x{7f}-\\x{10ffff}]+[a-z0-9_\\x{7f}-\\x{10ffff}]*)(\\2)(\\s*)', beginCaptures: { 1: { name: "punctuation.definition.string.php" }, 3: { name: "keyword.operator.heredoc.php" }, 5: { name: "invalid.illegal.trailing-whitespace.php" } }, end: "^\\s*(\\3)(?![A-Za-z0-9_\\x{7f}-\\x{10ffff}])", endCaptures: { 1: { name: "keyword.operator.heredoc.php" } }, patterns: [{ include: "#interpolation" }] }] }, "inheritance-single": { patterns: [{ begin: "(?i)(?=\\\\?[a-z_\\x{7f}-\\x{10ffff}][a-z0-9_\\x{7f}-\\x{10ffff}]*\\\\)", end: "(?i)([a-z_\\x{7f}-\\x{10ffff}][a-z0-9_\\x{7f}-\\x{10ffff}]*)?(?=[^a-z0-9_\\x{7f}-\\x{10ffff}\\\\])", endCaptures: { 1: { name: "entity.other.inherited-class.php" } }, patterns: [{ include: "#namespace" }] }, { include: "#class-builtin" }, { include: "#namespace" }, { match: "(?i)[a-z_\\x{7f}-\\x{10ffff}][a-z0-9_\\x{7f}-\\x{10ffff}]*", name: "entity.other.inherited-class.php" }] }, instantiation: { begin: "(?i)(new)\\s+(?!class\\b)", beginCaptures: { 1: { name: "keyword.other.new.php" } }, end: "(?i)(?=[^a-z0-9_\\x{7f}-\\x{10ffff}\\\\])", patterns: [{ match: "(?i)(parent|static|self)(?![a-z0-9_\\x{7f}-\\x{10ffff}])", name: "storage.type.php" }, { include: "#class-name" }, { include: "#variable-name" }] }, "interface-extends": { patterns: [{ begin: "(?i)(extends)\\s+", beginCaptures: { 1: { name: "storage.modifier.extends.php" } }, end: "(?i)(?={)", patterns: [{ include: "#comments" }, { match: ",", name: "punctuation.separator.classes.php" }, { include: "#inheritance-single" }] }] }, interpolation: { patterns: [{ match: "\\\\[0-7]{1,3}", name: "constant.character.escape.octal.php" }, { match: "\\\\x[0-9A-Fa-f]{1,2}", name: "constant.character.escape.hex.php" }, { match: "\\\\u{[0-9A-Fa-f]+}", name: "constant.character.escape.unicode.php" }, { match: "\\\\[nrtvef$\\\\]", name: "constant.character.escape.php" }, { begin: "{(?=\\$.*?})", beginCaptures: { 0: { name: "punctuation.definition.variable.php" } }, end: "}", endCaptures: { 0: { name: "punctuation.definition.variable.php" } }, patterns: [{ include: "$self" }] }, { include: "#variable-name" }] }, interpolation_double_quoted: { patterns: [{ match: '\\\\"', name: "constant.character.escape.php" }, { include: "#interpolation" }] }, "invoke-call": { captures: { 1: { name: "variable.other.php" }, 2: { name: "punctuation.definition.variable.php" } }, match: "(?i)((\\$+)[a-z_\\x{7f}-\\x{10ffff}][a-z0-9_\\x{7f}-\\x{10ffff}]*)(?=\\s*\\()", name: "meta.function-call.invoke.php" }, match_statement: { patterns: [{ match: "\\s+(?=match\\b)" }, { begin: "\\bmatch\\b", beginCaptures: { 0: { name: "keyword.control.match.php" } }, end: "}|(?=\\?>)", endCaptures: { 0: { name: "punctuation.definition.section.match-block.end.bracket.curly.php" } }, name: "meta.match-statement.php", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.match-expression.begin.bracket.round.php" } }, end: "\\)|(?=\\?>)", endCaptures: { 0: { name: "punctuation.definition.match-expression.end.bracket.round.php" } }, patterns: [{ include: "$self" }] }, { begin: "{", beginCaptures: { 0: { name: "punctuation.definition.section.match-block.begin.bracket.curly.php" } }, end: "(?=}|\\?>)", patterns: [{ match: "=>", name: "keyword.definition.arrow.php" }, { include: "$self" }] }] }] }, "named-arguments": { captures: { 1: { name: "entity.name.variable.parameter.php" }, 2: { name: "punctuation.separator.colon.php" } }, match: "(?i)(?<=^|\\(|,)\\s*([a-z_\\x{7f}-\\x{10ffff}][a-z0-9_\\x{7f}-\\x{10ffff}]*)\\s*(:)(?!:)" }, namespace: { begin: "(?i)(?:(namespace)|[a-z_\\x{7f}-\\x{10ffff}][a-z0-9_\\x{7f}-\\x{10ffff}]*)?(\\\\)", beginCaptures: { 1: { name: "variable.language.namespace.php" }, 2: { name: "punctuation.separator.inheritance.php" } }, end: "(?i)(?![a-z0-9_\\x{7f}-\\x{10ffff}]*\\\\)", name: "support.other.namespace.php", patterns: [{ match: "\\\\", name: "punctuation.separator.inheritance.php" }] }, nowdoc_interior: { patterns: [{ begin: "(<<<)\\s*'(HTML)'(\\s*)$", beginCaptures: { 0: { name: "punctuation.section.embedded.begin.php" }, 1: { name: "punctuation.definition.string.php" }, 2: { name: "keyword.operator.nowdoc.php" }, 3: { name: "invalid.illegal.trailing-whitespace.php" } }, contentName: "text.html", end: "^\\s*(\\2)(?![A-Za-z0-9_\\x{7f}-\\x{10ffff}])", endCaptures: { 0: { name: "punctuation.section.embedded.end.php" }, 1: { name: "keyword.operator.nowdoc.php" } }, name: "meta.embedded.html", patterns: [{ include: "text.html.basic" }] }, { begin: "(<<<)\\s*'(XML)'(\\s*)$", beginCaptures: { 0: { name: "punctuation.section.embedded.begin.php" }, 1: { name: "punctuation.definition.string.php" }, 2: { name: "keyword.operator.nowdoc.php" }, 3: { name: "invalid.illegal.trailing-whitespace.php" } }, contentName: "text.xml", end: "^\\s*(\\2)(?![A-Za-z0-9_\\x{7f}-\\x{10ffff}])", endCaptures: { 0: { name: "punctuation.section.embedded.end.php" }, 1: { name: "keyword.operator.nowdoc.php" } }, name: "meta.embedded.xml", patterns: [{ include: "text.xml" }] }, { begin: "(<<<)\\s*'([DS]QL)'(\\s*)$", beginCaptures: { 0: { name: "punctuation.section.embedded.begin.php" }, 1: { name: "punctuation.definition.string.php" }, 2: { name: "keyword.operator.nowdoc.php" }, 3: { name: "invalid.illegal.trailing-whitespace.php" } }, contentName: "source.sql", end: "^\\s*(\\2)(?![A-Za-z0-9_\\x{7f}-\\x{10ffff}])", endCaptures: { 0: { name: "punctuation.section.embedded.end.php" }, 1: { name: "keyword.operator.nowdoc.php" } }, name: "meta.embedded.sql", patterns: [{ include: "source.sql" }] }, { begin: "(<<<)\\s*'(JAVASCRIPT|JS)'(\\s*)$", beginCaptures: { 0: { name: "punctuation.section.embedded.begin.php" }, 1: { name: "punctuation.definition.string.php" }, 2: { name: "keyword.operator.nowdoc.php" }, 3: { name: "invalid.illegal.trailing-whitespace.php" } }, contentName: "source.js", end: "^\\s*(\\2)(?![A-Za-z0-9_\\x{7f}-\\x{10ffff}])", endCaptures: { 0: { name: "punctuation.section.embedded.end.php" }, 1: { name: "keyword.operator.nowdoc.php" } }, name: "meta.embedded.js", patterns: [{ include: "source.js" }] }, { begin: "(<<<)\\s*'(JSON)'(\\s*)$", beginCaptures: { 0: { name: "punctuation.section.embedded.begin.php" }, 1: { name: "punctuation.definition.string.php" }, 2: { name: "keyword.operator.nowdoc.php" }, 3: { name: "invalid.illegal.trailing-whitespace.php" } }, contentName: "source.json", end: "^\\s*(\\2)(?![A-Za-z0-9_\\x{7f}-\\x{10ffff}])", endCaptures: { 0: { name: "punctuation.section.embedded.end.php" }, 1: { name: "keyword.operator.nowdoc.php" } }, name: "meta.embedded.json", patterns: [{ include: "source.json" }] }, { begin: "(<<<)\\s*'(CSS)'(\\s*)$", beginCaptures: { 0: { name: "punctuation.section.embedded.begin.php" }, 1: { name: "punctuation.definition.string.php" }, 2: { name: "keyword.operator.nowdoc.php" }, 3: { name: "invalid.illegal.trailing-whitespace.php" } }, contentName: "source.css", end: "^\\s*(\\2)(?![A-Za-z0-9_\\x{7f}-\\x{10ffff}])", endCaptures: { 0: { name: "punctuation.section.embedded.end.php" }, 1: { name: "keyword.operator.nowdoc.php" } }, name: "meta.embedded.css", patterns: [{ include: "source.css" }] }, { begin: "(<<<)\\s*'(REGEXP?)'(\\s*)$", beginCaptures: { 0: { name: "punctuation.section.embedded.begin.php" }, 1: { name: "punctuation.definition.string.php" }, 2: { name: "keyword.operator.nowdoc.php" }, 3: { name: "invalid.illegal.trailing-whitespace.php" } }, contentName: "string.regexp.nowdoc.php", end: "^\\s*(\\2)(?![A-Za-z0-9_\\x{7f}-\\x{10ffff}])", endCaptures: { 0: { name: "punctuation.section.embedded.end.php" }, 1: { name: "keyword.operator.nowdoc.php" } }, patterns: [{ match: "(\\\\){1,2}[.$^\\[\\]{}]", name: "constant.character.escape.regex.php" }, { captures: { 1: { name: "punctuation.definition.arbitrary-repitition.php" }, 3: { name: "punctuation.definition.arbitrary-repitition.php" } }, match: "({)\\d+(,\\d+)?(})", name: "string.regexp.arbitrary-repitition.php" }, { begin: "\\[(?:\\^?\\])?", captures: { 0: { name: "punctuation.definition.character-class.php" } }, end: "\\]", name: "string.regexp.character-class.php", patterns: [{ match: "\\\\[\\\\'\\[\\]]", name: "constant.character.escape.php" }] }, { match: "[$^+*]", name: "keyword.operator.regexp.php" }, { begin: "(?i)(?<=^|\\s)(#)\\s(?=[[a-z0-9_\\x{7f}-\\x{10ffff},. \\t?!-][^\\x{00}-\\x{7f}]]*$)", beginCaptures: { 1: { name: "punctuation.definition.comment.php" } }, end: "$", endCaptures: { 0: { name: "punctuation.definition.comment.php" } }, name: "comment.line.number-sign.php" }] }, { begin: "(<<<)\\s*'(BLADE)'(\\s*)$", beginCaptures: { 0: { name: "punctuation.section.embedded.begin.php" }, 1: { name: "punctuation.definition.string.php" }, 2: { name: "keyword.operator.nowdoc.php" }, 3: { name: "invalid.illegal.trailing-whitespace.php" } }, contentName: "text.html.php.blade", end: "^\\s*(\\2)(?![A-Za-z0-9_\\x{7f}-\\x{10ffff}])", endCaptures: { 0: { name: "punctuation.section.embedded.end.php" }, 1: { name: "keyword.operator.nowdoc.php" } }, name: "meta.embedded.php.blade" }, { begin: "(?i)(<<<)\\s*'([a-z_\\x{7f}-\\x{10ffff}]+[a-z0-9_\\x{7f}-\\x{10ffff}]*)'(\\s*)", beginCaptures: { 1: { name: "punctuation.definition.string.php" }, 2: { name: "keyword.operator.nowdoc.php" }, 3: { name: "invalid.illegal.trailing-whitespace.php" } }, end: "^\\s*(\\2)(?![A-Za-z0-9_\\x{7f}-\\x{10ffff}])", endCaptures: { 1: { name: "keyword.operator.nowdoc.php" } } }] }, null_coalescing: { match: "\\?\\?", name: "keyword.operator.null-coalescing.php" }, numbers: { patterns: [{ match: "0[xX][0-9a-fA-F]+(?:_[0-9a-fA-F]+)*", name: "constant.numeric.hex.php" }, { match: "0[bB][01]+(?:_[01]+)*", name: "constant.numeric.binary.php" }, { match: "0[oO][0-7]+(?:_[0-7]+)*", name: "constant.numeric.octal.php" }, { match: "0(?:_?[0-7]+)+", name: "constant.numeric.octal.php" }, { captures: { 1: { name: "punctuation.separator.decimal.period.php" }, 2: { name: "punctuation.separator.decimal.period.php" } }, match: `(?x)
(?:
(?:[0-9]+(?:_[0-9]+)*)?(\\.)[0-9]+(?:_[0-9]+)*(?:[eE][+-]?[0-9]+(?:_[0-9]+)*)?|
[0-9]+(?:_[0-9]+)*(\\.)(?:[0-9]+(?:_[0-9]+)*)?(?:[eE][+-]?[0-9]+(?:_[0-9]+)*)?|
[0-9]+(?:_[0-9]+)*[eE][+-]?[0-9]+(?:_[0-9]+)*
)`, name: "constant.numeric.decimal.php" }, { match: "0|[1-9](?:_?[0-9]+)*", name: "constant.numeric.decimal.php" }] }, object: { patterns: [{ begin: "(\\??->)\\s*(\\$?{)", beginCaptures: { 1: { name: "keyword.operator.class.php" }, 2: { name: "punctuation.definition.variable.php" } }, end: "}", endCaptures: { 0: { name: "punctuation.definition.variable.php" } }, patterns: [{ include: "$self" }] }, { begin: "(?i)(\\??->)\\s*([a-z_\\x{7f}-\\x{10ffff}][a-z0-9_\\x{7f}-\\x{10ffff}]*)\\s*(\\()", beginCaptures: { 1: { name: "keyword.operator.class.php" }, 2: { name: "entity.name.function.php" }, 3: { name: "punctuation.definition.arguments.begin.bracket.round.php" } }, end: "\\)|(?=\\?>)", endCaptures: { 0: { name: "punctuation.definition.arguments.end.bracket.round.php" } }, name: "meta.method-call.php", patterns: [{ include: "#named-arguments" }, { include: "$self" }] }, { captures: { 1: { name: "keyword.operator.class.php" }, 2: { name: "variable.other.property.php" }, 3: { name: "punctuation.definition.variable.php" } }, match: "(?i)(\\??->)\\s*((\\$+)?[a-z_\\x{7f}-\\x{10ffff}][a-z0-9_\\x{7f}-\\x{10ffff}]*)?" }] }, "parameter-default-types": { patterns: [{ include: "#strings" }, { include: "#numbers" }, { include: "#string-backtick" }, { include: "#variables" }, { match: "=>", name: "keyword.operator.key.php" }, { match: "=", name: "keyword.operator.assignment.php" }, { match: "&(?=\\s*\\$)", name: "storage.modifier.reference.php" }, { begin: "(array)\\s*(\\()", beginCaptures: { 1: { name: "support.function.construct.php" }, 2: { name: "punctuation.definition.array.begin.bracket.round.php" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.array.end.bracket.round.php" } }, name: "meta.array.php", patterns: [{ include: "#parameter-default-types" }] }, { begin: "\\[", beginCaptures: { 0: { name: "punctuation.section.array.begin.php" } }, end: "\\]|(?=\\?>)", endCaptures: { 0: { name: "punctuation.section.array.end.php" } }, patterns: [{ include: "$self" }] }, { include: "#instantiation" }, { begin: `(?xi)
(?=[a-z0-9_\\x{7f}-\\x{10ffff}\\\\]+
(::)\\s*([a-z_\\x{7f}-\\x{10ffff}][a-z0-9_\\x{7f}-\\x{10ffff}]*)?
)`, end: "(?i)(::)\\s*([a-z_\\x{7f}-\\x{10ffff}][a-z0-9_\\x{7f}-\\x{10ffff}]*)?", endCaptures: { 1: { name: "keyword.operator.class.php" }, 2: { name: "constant.other.class.php" } }, patterns: [{ include: "#class-name" }] }, { include: "#constants" }] }, "php-types": { patterns: [{ match: "\\?", name: "keyword.operator.nullable-type.php" }, { match: "[|&]", name: "punctuation.separator.delimiter.php" }, { match: "(?i)\\b(null|int|float|bool|string|array|object|callable|iterable|true|false|mixed|void)\\b", name: "keyword.other.type.php" }, { match: "(?i)\\b(parent|self)\\b", name: "storage.type.php" }, { match: "\\(", name: "punctuation.definition.type.begin.bracket.round.php" }, { match: "\\)", name: "punctuation.definition.type.end.bracket.round.php" }, { include: "#class-name" }] }, php_doc: { patterns: [{ match: "^(?!\\s*\\*).*?(?:(?=\\*\\/)|$\\n?)", name: "invalid.illegal.missing-asterisk.phpdoc.php" }, { captures: { 1: { name: "keyword.other.phpdoc.php" }, 3: { name: "storage.modifier.php" }, 4: { name: "invalid.illegal.wrong-access-type.phpdoc.php" } }, match: "^\\s*\\*\\s*(@access)\\s+((public|private|protected)|(.+))\\s*$" }, { captures: { 1: { name: "keyword.other.phpdoc.php" }, 2: { name: "markup.underline.link.php" } }, match: "(@xlink)\\s+(.+)\\s*$" }, { begin: "(@(?:global|param|property(-(read|write))?|return|throws|var))\\s+(?=[?A-Za-z_\\x{7f}-\\x{10ffff}\\\\]|\\()", beginCaptures: { 1: { name: "keyword.other.phpdoc.php" } }, contentName: "meta.other.type.phpdoc.php", end: "(?=\\s|\\*/)", patterns: [{ include: "#php_doc_types_array_multiple" }, { include: "#php_doc_types_array_single" }, { include: "#php_doc_types" }] }, { match: `(?x)
@
(
api|abstract|author|category|copyright|example|global|inherit[Dd]oc|internal|
license|link|method|property(-(read|write))?|package|param|return|see|since|source|
static|subpackage|throws|todo|var|version|uses|deprecated|final|ignore
)\\b`, name: "keyword.other.phpdoc.php" }, { captures: { 1: { name: "keyword.other.phpdoc.php" } }, match: "{(@(link|inherit[Dd]oc)).+?}", name: "meta.tag.inline.phpdoc.php" }] }, php_doc_types: { captures: { 0: { patterns: [{ match: "\\?", name: "keyword.operator.nullable-type.php" }, { match: `(?x)\\b
(string|integer|int|boolean|bool|float|double|object|mixed
|array|resource|void|null|callback|false|true|self|static)\\b`, name: "keyword.other.type.php" }, { include: "#class-name" }, { match: "[|&]", name: "punctuation.separator.delimiter.php" }, { match: "\\(", name: "punctuation.definition.type.begin.bracket.round.php" }, { match: "\\)", name: "punctuation.definition.type.end.bracket.round.php" }] } }, match: "(?i)\\??[a-z_\\x{7f}-\\x{10ffff}\\\\][a-z0-9_\\x{7f}-\\x{10ffff}\\\\]*([|&]\\??[a-z_\\x{7f}-\\x{10ffff}\\\\][a-z0-9_\\x{7f}-\\x{10ffff}\\\\]*)*" }, php_doc_types_array_multiple: { begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.type.begin.bracket.round.phpdoc.php" } }, end: "(\\))(\\[\\])|(?=\\*/)", endCaptures: { 1: { name: "punctuation.definition.type.end.bracket.round.phpdoc.php" }, 2: { name: "keyword.other.array.phpdoc.php" } }, patterns: [{ include: "#php_doc_types_array_multiple" }, { include: "#php_doc_types_array_single" }, { include: "#php_doc_types" }, { match: "[|&]", name: "punctuation.separator.delimiter.php" }] }, php_doc_types_array_single: { captures: { 1: { patterns: [{ include: "#php_doc_types" }] }, 2: { name: "keyword.other.array.phpdoc.php" } }, match: "(?i)([a-z_\\x{7f}-\\x{10ffff}\\\\][a-z0-9_\\x{7f}-\\x{10ffff}\\\\]*)(\\[\\])" }, "regex-double-quoted": { begin: '"/(?=(\\\\.|[^"/])++/[imsxeADSUXu]*")', beginCaptures: { 0: { name: "punctuation.definition.string.begin.php" } }, end: '(/)([imsxeADSUXu]*)(")', endCaptures: { 0: { name: "punctuation.definition.string.end.php" } }, name: "string.regexp.double-quoted.php", patterns: [{ match: "(\\\\){1,2}[.$^\\[\\]{}]", name: "constant.character.escape.regex.php" }, { include: "#interpolation_double_quoted" }, { captures: { 1: { name: "punctuation.definition.arbitrary-repetition.php" }, 3: { name: "punctuation.definition.arbitrary-repetition.php" } }, match: "({)\\d+(,\\d+)?(})", name: "string.regexp.arbitrary-repetition.php" }, { begin: "\\[(?:\\^?\\])?", captures: { 0: { name: "punctuation.definition.character-class.php" } }, end: "\\]", name: "string.regexp.character-class.php", patterns: [{ include: "#interpolation_double_quoted" }] }, { match: "[$^+*]", name: "keyword.operator.regexp.php" }] }, "regex-single-quoted": { begin: "'/(?=(\\\\(?:\\\\(?:\\\\[\\\\']?|[^'])|.)|[^'/])++/[imsxeADSUXu]*')", beginCaptures: { 0: { name: "punctuation.definition.string.begin.php" } }, end: "(/)([imsxeADSUXu]*)(')", endCaptures: { 0: { name: "punctuation.definition.string.end.php" } }, name: "string.regexp.single-quoted.php", patterns: [{ include: "#single_quote_regex_escape" }, { captures: { 1: { name: "punctuation.definition.arbitrary-repetition.php" }, 3: { name: "punctuation.definition.arbitrary-repetition.php" } }, match: "({)\\d+(,\\d+)?(})", name: "string.regexp.arbitrary-repetition.php" }, { begin: "\\[(?:\\^?\\])?", captures: { 0: { name: "punctuation.definition.character-class.php" } }, end: "\\]", name: "string.regexp.character-class.php" }, { match: "[$^+*]", name: "keyword.operator.regexp.php" }] }, "scope-resolution": { patterns: [{ captures: { 1: { patterns: [{ match: "\\b(self|static|parent)\\b", name: "storage.type.php" }, { include: "#class-name" }, { include: "#variable-name" }] } }, match: "([A-Za-z_\\x{7f}-\\x{10ffff}\\\\][A-Za-z0-9_\\x{7f}-\\x{10ffff}\\\\]*)(?=\\s*::)" }, { begin: "(?i)(::)\\s*([a-z_\\x{7f}-\\x{10ffff}][a-z0-9_\\x{7f}-\\x{10ffff}]*)\\s*(\\()", beginCaptures: { 1: { name: "keyword.operator.class.php" }, 2: { name: "entity.name.function.php" }, 3: { name: "punctuation.definition.arguments.begin.bracket.round.php" } }, end: "\\)|(?=\\?>)", endCaptures: { 0: { name: "punctuation.definition.arguments.end.bracket.round.php" } }, name: "meta.method-call.static.php", patterns: [{ include: "#named-arguments" }, { include: "$self" }] }, { captures: { 1: { name: "keyword.operator.class.php" }, 2: { name: "keyword.other.class.php" } }, match: "(?i)(::)\\s*(class)\\b" }, { captures: { 1: { name: "keyword.operator.class.php" }, 2: { name: "variable.other.class.php" }, 3: { name: "punctuation.definition.variable.php" }, 4: { name: "constant.other.class.php" } }, match: `(?xi)
(::)\\s*
(?:
((\\$+)[a-z_\\x{7f}-\\x{10ffff}][a-z0-9_\\x{7f}-\\x{10ffff}]*)
|
([a-z_\\x{7f}-\\x{10ffff}][a-z0-9_\\x{7f}-\\x{10ffff}]*)
)?` }] }, single_quote_regex_escape: { match: "\\\\(?:\\\\(?:\\\\[\\\\']?|[^'])|.)", name: "constant.character.escape.php" }, "sql-string-double-quoted": { begin: '"\\s*(?=(SELECT|INSERT|UPDATE|DELETE|CREATE|REPLACE|ALTER|AND|WITH)\\b)', beginCaptures: { 0: { name: "punctuation.definition.string.begin.php" } }, contentName: "source.sql.embedded.php", end: '"', endCaptures: { 0: { name: "punctuation.definition.string.end.php" } }, name: "string.quoted.double.sql.php", patterns: [{ captures: { 1: { name: "punctuation.definition.comment.sql" } }, match: '(#)(\\\\"|[^"])*(?="|$)', name: "comment.line.number-sign.sql" }, { captures: { 1: { name: "punctuation.definition.comment.sql" } }, match: '(--)(\\\\"|[^"])*(?="|$)', name: "comment.line.double-dash.sql" }, { match: "\\\\[\\\\\"`']", name: "constant.character.escape.php" }, { match: `'(?=((\\\\')|[^'"])*("|$))`, name: "string.quoted.single.unclosed.sql" }, { match: '`(?=((\\\\`)|[^`"])*("|$))', name: "string.quoted.other.backtick.unclosed.sql" }, { begin: "'", end: "'", name: "string.quoted.single.sql", patterns: [{ include: "#interpolation_double_quoted" }] }, { begin: "`", end: "`", name: "string.quoted.other.backtick.sql", patterns: [{ include: "#interpolation_double_quoted" }] }, { include: "#interpolation_double_quoted" }, { include: "source.sql" }] }, "sql-string-single-quoted": { begin: "'\\s*(?=(SELECT|INSERT|UPDATE|DELETE|CREATE|REPLACE|ALTER|AND|WITH)\\b)", beginCaptures: { 0: { name: "punctuation.definition.string.begin.php" } }, contentName: "source.sql.embedded.php", end: "'", endCaptures: { 0: { name: "punctuation.definition.string.end.php" } }, name: "string.quoted.single.sql.php", patterns: [{ captures: { 1: { name: "punctuation.definition.comment.sql" } }, match: "(#)(\\\\'|[^'])*(?='|$)", name: "comment.line.number-sign.sql" }, { captures: { 1: { name: "punctuation.definition.comment.sql" } }, match: "(--)(\\\\'|[^'])*(?='|$)", name: "comment.line.double-dash.sql" }, { match: "\\\\[\\\\'`\"]", name: "constant.character.escape.php" }, { match: "`(?=((\\\\`)|[^`'])*('|$))", name: "string.quoted.other.backtick.unclosed.sql" }, { match: `"(?=((\\\\")|[^"'])*('|$))`, name: "string.quoted.double.unclosed.sql" }, { include: "source.sql" }] }, "string-backtick": { begin: "`", beginCaptures: { 0: { name: "punctuation.definition.string.begin.php" } }, end: "`", endCaptures: { 0: { name: "punctuation.definition.string.end.php" } }, name: "string.interpolated.php", patterns: [{ match: "\\\\`", name: "constant.character.escape.php" }, { include: "#interpolation" }] }, "string-double-quoted": { begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.php" } }, end: '"', endCaptures: { 0: { name: "punctuation.definition.string.end.php" } }, name: "string.quoted.double.php", patterns: [{ include: "#interpolation_double_quoted" }] }, "string-single-quoted": { begin: "'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.php" } }, end: "'", endCaptures: { 0: { name: "punctuation.definition.string.end.php" } }, name: "string.quoted.single.php", patterns: [{ match: "\\\\[\\\\']", name: "constant.character.escape.php" }] }, strings: { patterns: [{ include: "#regex-double-quoted" }, { include: "#sql-string-double-quoted" }, { include: "#string-double-quoted" }, { include: "#regex-single-quoted" }, { include: "#sql-string-single-quoted" }, { include: "#string-single-quoted" }] }, support: { patterns: [{ match: `(?xi)
\\b
apc_(
store|sma_info|compile_file|clear_cache|cas|cache_info|inc|dec|define_constants|delete(_file)?|
exists|fetch|load_constants|add|bin_(dump|load)(file)?
)\\b`, name: "support.function.apc.php" }, { match: `(?xi)\\b
(
shuffle|sizeof|sort|next|nat(case)?sort|count|compact|current|in_array|usort|uksort|uasort|
pos|prev|end|each|extract|ksort|key(_exists)?|krsort|list|asort|arsort|rsort|reset|range|
array(_(shift|sum|splice|search|slice|chunk|change_key_case|count_values|column|combine|
(diff|intersect)(_(u)?(key|assoc))?|u(diff|intersect)(_(u)?assoc)?|unshift|unique|
pop|push|pad|product|values|keys|key_exists|filter|fill(_keys)?|flip|walk(_recursive)?|
reduce|replace(_recursive)?|reverse|rand|multisort|merge(_recursive)?|map)?)
)\\b`, name: "support.function.array.php" }, { match: `(?xi)\\b
(
show_source|sys_getloadavg|sleep|highlight_(file|string)|constant|connection_(aborted|status)|
time_(nanosleep|sleep_until)|ignore_user_abort|die|define(d)?|usleep|uniqid|unpack|__halt_compiler|
php_(check_syntax|strip_whitespace)|pack|eval|exit|get_browser
)\\b`, name: "support.function.basic_functions.php" }, { match: "(?i)\\bbc(scale|sub|sqrt|comp|div|pow(mod)?|add|mod|mul)\\b", name: "support.function.bcmath.php" }, { match: "(?i)\\bblenc_encrypt\\b", name: "support.function.blenc.php" }, { match: "(?i)\\bbz(compress|close|open|decompress|errstr|errno|error|flush|write|read)\\b", name: "support.function.bz2.php" }, { match: `(?xi)\\b
(
(French|Gregorian|Jewish|Julian)ToJD|cal_(to_jd|info|days_in_month|from_jd)|unixtojd|
jdto(unix|jewish)|easter_(date|days)|JD(MonthName|To(Gregorian|Julian|French)|DayOfWeek)
)\\b`, name: "support.function.calendar.php" }, { match: `(?xi)\\b
(
class_alias|all_user_method(_array)?|is_(a|subclass_of)|__autoload|(class|interface|method|property|trait)_exists|
get_(class(_(vars|methods))?|(called|parent)_class|object_vars|declared_(classes|interfaces|traits))
)\\b`, name: "support.function.classobj.php" }, { match: `(?xi)\\b
(
com_(create_guid|print_typeinfo|event_sink|load_typelib|get_active_object|message_pump)|
variant_(sub|set(_type)?|not|neg|cast|cat|cmp|int|idiv|imp|or|div|date_(from|to)_timestamp|
pow|eqv|fix|and|add|abs|round|get_type|xor|mod|mul)
)\\b`, name: "support.function.com.php" }, { match: "(?i)\\b(isset|unset|eval|empty|list)\\b", name: "support.function.construct.php" }, { match: "(?i)\\b(print|echo)\\b", name: "support.function.construct.output.php" }, { match: "(?i)\\bctype_(space|cntrl|digit|upper|punct|print|lower|alnum|alpha|graph|xdigit)\\b", name: "support.function.ctype.php" }, { match: `(?xi)\\b
curl_(
share_(close|init|setopt)|strerror|setopt(_array)?|copy_handle|close|init|unescape|pause|escape|
errno|error|exec|version|file_create|reset|getinfo|
multi_(strerror|setopt|select|close|init|info_read|(add|remove)_handle|getcontent|exec)
)\\b`, name: "support.function.curl.php" }, { match: `(?xi)\\b
(
strtotime|str[fp]time|checkdate|time|timezone_name_(from_abbr|get)|idate|
timezone_((location|offset|transitions|version)_get|(abbreviations|identifiers)_list|open)|
date(_(sun(rise|set)|sun_info|sub|create(_(immutable_)?from_format)?|timestamp_(get|set)|timezone_(get|set)|time_set|
isodate_set|interval_(create_from_date_string|format)|offset_get|diff|default_timezone_(get|set)|date_set|
parse(_from_format)?|format|add|get_last_errors|modify))?|
localtime|get(date|timeofday)|gm(strftime|date|mktime)|microtime|mktime
)\\b`, name: "support.function.datetime.php" }, { match: "(?i)\\bdba_(sync|handlers|nextkey|close|insert|optimize|open|delete|popen|exists|key_split|firstkey|fetch|list|replace)\\b", name: "support.function.dba.php" }, { match: "(?i)\\bdbx_(sort|connect|compare|close|escape_string|error|query|fetch_row)\\b", name: "support.function.dbx.php" }, { match: "(?i)\\b(scandir|chdir|chroot|closedir|opendir|dir|rewinddir|readdir|getcwd)\\b", name: "support.function.dir.php" }, { match: `(?xi)\\b
eio_(
sync(fs)?|sync_file_range|symlink|stat(vfs)?|sendfile|set_min_parallel|set_max_(idle|poll_(reqs|time)|parallel)|
seek|n(threads|op|pending|reqs|ready)|chown|chmod|custom|close|cancel|truncate|init|open|dup2|unlink|utime|poll|
event_loop|f(sync|stat(vfs)?|chown|chmod|truncate|datasync|utime|allocate)|write|lstat|link|rename|realpath|
read(ahead|dir|link)?|rmdir|get_(event_stream|last_error)|grp(_(add|cancel|limit))?|mknod|mkdir|busy
)\\b`, name: "support.function.eio.php" }, { match: `(?xi)\\b
enchant_(
dict_(store_replacement|suggest|check|is_in_session|describe|quick_check|add_to_(personal|session)|get_error)|
broker_(set_ordering|init|dict_exists|describe|free(_dict)?|list_dicts|request_(pwl_)?dict|get_error)
)\\b`, name: "support.function.enchant.php" }, { match: "(?i)\\b(split(i)?|sql_regcase|ereg(i)?(_replace)?)\\b", name: "support.function.ereg.php" }, { match: "(?i)\\b((restore|set)_(error_handler|exception_handler)|trigger_error|debug_(print_)?backtrace|user_error|error_(log|reporting|get_last))\\b", name: "support.function.errorfunc.php" }, { match: "(?i)\\b(shell_exec|system|passthru|proc_(nice|close|terminate|open|get_status)|escapeshell(arg|cmd)|exec)\\b", name: "support.function.exec.php" }, { match: "(?i)\\b(exif_(thumbnail|tagname|imagetype|read_data)|read_exif_data)\\b", name: "support.function.exif.php" }, { match: `(?xi)\\b
fann_(
(duplicate|length|merge|shuffle|subset)_train_data|scale_(train(_data)?|(input|output)(_train_data)?)|
set_(scaling_params|sarprop_(step_error_(shift|threshold_factor)|temperature|weight_decay_shift)|
cascade_(num_candidate_groups|candidate_(change_fraction|limit|stagnation_epochs)|
output_(change_fraction|stagnation_epochs)|weight_multiplier|activation_(functions|steepnesses)|
(max|min)_(cand|out)_epochs)|
callback|training_algorithm|train_(error|stop)_function|(input|output)_scaling_params|error_log|
quickprop_(decay|mu)|weight(_array)?|learning_(momentum|rate)|bit_fail_limit|
activation_(function|steepness)(_(hidden|layer|output))?|
rprop_((decrease|increase)_factor|delta_(max|min|zero)))|
save(_train)?|num_(input|output)_train_data|copy|clear_scaling_params|cascadetrain_on_(file|data)|
create_((sparse|shortcut|standard)(_array)?|train(_from_callback)?|from_file)|
test(_data)?|train(_(on_(file|data)|epoch))?|init_weights|descale_(input|output|train)|destroy(_train)?|
print_error|run|reset_(MSE|err(no|str))|read_train_from_file|randomize_weights|
get_(sarprop_(step_error_(shift|threshold_factor)|temperature|weight_decay_shift)|num_(input|output|layers)|
network_type|MSE|connection_(array|rate)|bias_array|bit_fail(_limit)?|
cascade_(num_(candidates|candidate_groups)|(candidate|output)_(change_fraction|limit|stagnation_epochs)|
weight_multiplier|activation_(functions|steepnesses)(_count)?|(max|min)_(cand|out)_epochs)|
total_(connections|neurons)|training_algorithm|train_(error|stop)_function|err(no|str)|
quickprop_(decay|mu)|learning_(momentum|rate)|layer_array|activation_(function|steepness)|
rprop_((decrease|increase)_factor|delta_(max|min|zero)))
)\\b`, name: "support.function.fann.php" }, { match: `(?xi)\\b
(
symlink|stat|set_file_buffer|chown|chgrp|chmod|copy|clearstatcache|touch|tempnam|tmpfile|
is_(dir|(uploaded_)?file|executable|link|readable|writ(e)?able)|disk_(free|total)_space|diskfreespace|
dirname|delete|unlink|umask|pclose|popen|pathinfo|parse_ini_(file|string)|fscanf|fstat|fseek|fnmatch|
fclose|ftell|ftruncate|file(size|[acm]time|type|inode|owner|perms|group)?|file_(exists|(get|put)_contents)|
f(open|puts|putcsv|passthru|eof|flush|write|lock|read|gets(s)?|getc(sv)?)|lstat|lchown|lchgrp|link(info)?|
rename|rewind|read(file|link)|realpath(_cache_(get|size))?|rmdir|glob|move_uploaded_file|mkdir|basename
)\\b`, name: "support.function.file.php" }, { match: "(?i)\\b(finfo_(set_flags|close|open|file|buffer)|mime_content_type)\\b", name: "support.function.fileinfo.php" }, { match: "(?i)\\bfilter_(has_var|input(_array)?|id|var(_array)?|list)\\b", name: "support.function.filter.php" }, { match: "(?i)\\bfastcgi_finish_request\\b", name: "support.function.fpm.php" }, { match: "(?i)\\b(call_user_(func|method)(_array)?|create_function|unregister_tick_function|forward_static_call(_array)?|function_exists|func_(num_args|get_arg(s)?)|register_(shutdown|tick)_function|get_defined_functions)\\b", name: "support.function.funchand.php" }, { match: "(?i)\\b((n)?gettext|textdomain|d((n)?gettext|c(n)?gettext)|bind(textdomain|_textdomain_codeset))\\b", name: "support.function.gettext.php" }, { match: `(?xi)\\b
gmp_(
scan[01]|strval|sign|sub|setbit|sqrt(rem)?|hamdist|neg|nextprime|com|clrbit|cmp|testbit|
intval|init|invert|import|or|div(exact)?|div_(q|qr|r)|jacobi|popcount|pow(m)?|perfect_square|
prob_prime|export|fact|legendre|and|add|abs|root(rem)?|random(_(bits|range))?|gcd(ext)?|xor|mod|mul
)\\b`, name: "support.function.gmp.php" }, { match: "(?i)\\bhash(_(hmac(_file)?|copy|init|update(_(file|stream))?|pbkdf2|equals|file|final|algos))?\\b", name: "support.function.hash.php" }, { match: `(?xi)\\b
(
http_(support|send_(status|stream|content_(disposition|type)|data|file|last_modified)|head|
negotiate_(charset|content_type|language)|chunked_decode|cache_(etag|last_modified)|throttle|
inflate|deflate|date|post_(data|fields)|put_(data|file|stream)|persistent_handles_(count|clean|ident)|
parse_(cookie|headers|message|params)|redirect|request(_(method_(exists|name|(un)?register)|body_encode))?|
get(_request_(headers|body(_stream)?))?|match_(etag|modified|request_header)|build_(cookie|str|url))|
ob_(etag|deflate|inflate)handler
)\\b`, name: "support.function.http.php" }, { match: "(?i)\\b(iconv(_(str(pos|len|rpos)|substr|(get|set)_encoding|mime_(decode(_headers)?|encode)))?|ob_iconv_handler)\\b", name: "support.function.iconv.php" }, { match: "(?i)\\biis_((start|stop)_(service|server)|set_(script_map|server_rights|dir_security|app_settings)|(add|remove)_server|get_(script_map|service_state|server_(rights|by_(comment|path))|dir_security))\\b", name: "support.function.iisfunc.php" }, { match: `(?xi)\\b
(
iptc(embed|parse)|(jpeg|png)2wbmp|gd_info|getimagesize(fromstring)?|
image(s[xy]|scale|(char|string)(up)?|set(style|thickness|tile|interpolation|pixel|brush)|savealpha|
convolution|copy(resampled|resized|merge(gray)?)?|colors(forindex|total)|
color(set|closest(alpha|hwb)?|transparent|deallocate|(allocate|exact|resolve)(alpha)?|at|match)|
crop(auto)?|create(truecolor|from(string|jpeg|png|wbmp|webp|gif|gd(2(part)?)?|xpm|xbm))?|
types|ttf(bbox|text)|truecolortopalette|istruecolor|interlace|2wbmp|destroy|dashedline|jpeg|
_type_to_(extension|mime_type)|ps(slantfont|text|(encode|extend|free|load)font|bbox)|png|polygon|
palette(copy|totruecolor)|ellipse|ft(text|bbox)|filter|fill|filltoborder|
filled(arc|ellipse|polygon|rectangle)|font(height|width)|flip|webp|wbmp|line|loadfont|layereffect|
antialias|affine(matrix(concat|get))?|alphablending|arc|rotate|rectangle|gif|gd(2)?|gammacorrect|
grab(screen|window)|xbm)
)\\b`, name: "support.function.image.php" }, { match: `(?xi)\\b
(
sys_get_temp_dir|set_(time_limit|include_path|magic_quotes_runtime)|cli_(get|set)_process_title|
ini_(alter|get(_all)?|restore|set)|zend_(thread_id|version|logo_guid)|dl|php(credits|info|version)|
php_(sapi_name|ini_(scanned_files|loaded_file)|uname|logo_guid)|putenv|extension_loaded|version_compare|
assert(_options)?|restore_include_path|gc_(collect_cycles|disable|enable(d)?)|getopt|
get_(cfg_var|current_user|defined_constants|extension_funcs|include_path|included_files|loaded_extensions|
magic_quotes_(gpc|runtime)|required_files|resources)|
get(env|lastmod|rusage|my(inode|[gup]id))|
memory_get_(peak_)?usage|main|magic_quotes_runtime
)\\b`, name: "support.function.info.php" }, { match: `(?xi)\\b
ibase_(
set_event_handler|service_(attach|detach)|server_info|num_(fields|params)|name_result|connect|
commit(_ret)?|close|trans|delete_user|drop_db|db_info|pconnect|param_info|prepare|err(code|msg)|
execute|query|field_info|fetch_(assoc|object|row)|free_(event_handler|query|result)|wait_event|
add_user|affected_rows|rollback(_ret)?|restore|gen_id|modify_user|maintain_db|backup|
blob_(cancel|close|create|import|info|open|echo|add|get)
)\\b`, name: "support.function.interbase.php" }, { match: `(?xi)\\b
(
normalizer_(normalize|is_normalized)|idn_to_(unicode|utf8|ascii)|
numfmt_(set_(symbol|(text_)?attribute|pattern)|create|(parse|format)(_currency)?|
get_(symbol|(text_)?attribute|pattern|error_(code|message)|locale))|
collator_(sort(_with_sort_keys)?|set_(attribute|strength)|compare|create|asort|
get_(strength|sort_key|error_(code|message)|locale|attribute))|
transliterator_(create(_(inverse|from_rules))?|transliterate|list_ids|get_error_(code|message))|
intl(cal|tz)_get_error_(code|message)|intl_(is_failure|error_name|get_error_(code|message))|
datefmt_(set_(calendar|lenient|pattern|timezone(_id)?)|create|is_lenient|parse|format(_object)?|localtime|
get_(calendar(_object)?|time(type|zone(_id)?)|datetype|pattern|error_(code|message)|locale))|
locale_(set_default|compose|canonicalize|parse|filter_matches|lookup|accept_from_http|
get_(script|display_(script|name|variant|language|region)|default|primary_language|keywords|all_variants|region))|
resourcebundle_(create|count|locales|get(_(error_(code|message)))?)|
grapheme_(str(i?str|r?i?pos|len)|substr|extract)|
msgfmt_(set_pattern|create|(format|parse)(_message)?|get_(pattern|error_(code|message)|locale))
)\\b`, name: "support.function.intl.php" }, { match: "(?i)\\bjson_(decode|encode|last_error(_msg)?)\\b", name: "support.function.json.php" }, { match: `(?xi)\\b
ldap_(
start|tls|sort|search|sasl_bind|set_(option|rebind_proc)|(first|next)_(attribute|entry|reference)|
connect|control_paged_result(_response)?|count_entries|compare|close|t61_to_8859|8859_to_t61|
dn2ufn|delete|unbind|parse_(reference|result)|escape|errno|err2str|error|explode_dn|bind|
free_result|list|add|rename|read|get_(option|dn|entries|values(_len)?|attributes)|modify(_batch)?|
mod_(add|del|replace)
)\\b`, name: "support.function.ldap.php" }, { match: "(?i)\\blibxml_(set_(streams_context|external_entity_loader)|clear_errors|disable_entity_loader|use_internal_errors|get_(errors|last_error))\\b", name: "support.function.libxml.php" }, { match: "(?i)\\b(ezmlm_hash|mail)\\b", name: "support.function.mail.php" }, { match: `(?xi)\\b
(
(a)?(cos|sin|tan)(h)?|sqrt|srand|hypot|hexdec|ceil|is_(nan|(in)?finite)|octdec|dec(hex|oct|bin)|deg2rad|
pi|pow|exp(m1)?|floor|fmod|lcg_value|log(1(p|0))?|atan2|abs|round|rand|rad2deg|getrandmax|
mt_(srand|rand|getrandmax)|max|min|bindec|base_convert
)\\b`, name: "support.function.math.php" }, { match: `(?xi)\\b
mb_(
str(cut|str|to(lower|upper)|istr|ipos|imwidth|pos|width|len|rchr|richr|ripos|rpos)|
substitute_character|substr(_count)?|split|send_mail|http_(input|output)|check_encoding|
convert_(case|encoding|kana|variables)|internal_encoding|output_handler|decode_(numericentity|mimeheader)|
detect_(encoding|order)|parse_str|preferred_mime_name|encoding_aliases|encode_(numericentity|mimeheader)|
ereg(i(_replace)?)?|ereg_(search(_(get(pos|regs)|init|regs|(set)?pos))?|replace(_callback)?|match)|
list_encodings|language|regex_(set_options|encoding)|get_info
)\\b`, name: "support.function.mbstring.php" }, { match: `(?xi)\\b
(
mcrypt_(
cfb|create_iv|cbc|ofb|decrypt|encrypt|ecb|list_(algorithms|modes)|generic(_((de)?init|end))?|
enc_(self_test|is_block_(algorithm|algorithm_mode|mode)|
get_(supported_key_sizes|(block|iv|key)_size|(algorithms|modes)_name))|
get_(cipher_name|(block|iv|key)_size)|
module_(close|self_test|is_block_(algorithm|algorithm_mode|mode)|open|
get_(supported_key_sizes|algo_(block|key)_size)))|
mdecrypt_generic
)\\b`, name: "support.function.mcrypt.php" }, { match: "(?i)\\bmemcache_debug\\b", name: "support.function.memcache.php" }, { match: "(?i)\\bmhash(_(count|keygen_s2k|get_(hash_name|block_size)))?\\b", name: "support.function.mhash.php" }, { match: "(?i)\\b(log_(cmd_(insert|delete|update)|killcursor|write_batch|reply|getmore)|bson_(decode|encode))\\b", name: "support.function.mongo.php" }, { match: `(?xi)\\b
mysql_(
stat|set_charset|select_db|num_(fields|rows)|connect|client_encoding|close|create_db|escape_string|
thread_id|tablename|insert_id|info|data_seek|drop_db|db_(name|query)|unbuffered_query|pconnect|ping|
errno|error|query|field_(seek|name|type|table|flags|len)|fetch_(object|field|lengths|assoc|array|row)|
free_result|list_(tables|dbs|processes|fields)|affected_rows|result|real_escape_string|
get_(client|host|proto|server)_info
)\\b`, name: "support.function.mysql.php" }, { match: `(?xi)\\b
mysqli_(
ssl_set|store_result|stat|send_(query|long_data)|set_(charset|opt|local_infile_(default|handler))|
stmt_(store_result|send_long_data|next_result|close|init|data_seek|prepare|execute|fetch|free_result|
attr_(get|set)|result_metadata|reset|get_(result|warnings)|more_results|bind_(param|result))|
select_db|slave_query|savepoint|next_result|change_user|character_set_name|connect|commit|
client_encoding|close|thread_safe|init|options|(enable|disable)_(reads_from_master|rpl_parse)|
dump_debug_info|debug|data_seek|use_result|ping|poll|param_count|prepare|escape_string|execute|
embedded_server_(start|end)|kill|query|field_seek|free_result|autocommit|rollback|report|refresh|
fetch(_(object|fields|field(_direct)?|assoc|all|array|row))?|rpl_(parse_enabled|probe|query_type)|
release_savepoint|reap_async_query|real_(connect|escape_string|query)|more_results|multi_query|
get_(charset|connection_stats|client_(stats|info|version)|cache_stats|warnings|links_stats|metadata)|
master_query|bind_(param|result)|begin_transaction
)\\b`, name: "support.function.mysqli.php" }, { match: "(?i)\\bmysqlnd_memcache_(set|get_config)\\b", name: "support.function.mysqlnd-memcache.php" }, { match: "(?i)\\bmysqlnd_ms_(set_(user_pick_server|qos)|dump_servers|query_is_select|fabric_select_(shard|global)|get_(stats|last_(used_connection|gtid))|xa_(commit|rollback|gc|begin)|match_wild)\\b", name: "support.function.mysqlnd-ms.php" }, { match: "(?i)\\bmysqlnd_qc_(set_(storage_handler|cache_condition|is_select|user_handlers)|clear_cache|get_(normalized_query_trace_log|core_stats|cache_info|query_trace_log|available_handlers))\\b", name: "support.function.mysqlnd-qc.php" }, { match: "(?i)\\bmysqlnd_uh_(set_(statement|connection)_proxy|convert_to_mysqlnd)\\b", name: "support.function.mysqlnd-uh.php" }, { match: `(?xi)\\b
(
syslog|socket_(set_(blocking|timeout)|get_status)|set(raw)?cookie|http_response_code|openlog|
headers_(list|sent)|header(_(register_callback|remove))?|checkdnsrr|closelog|inet_(ntop|pton)|ip2long|
openlog|dns_(check_record|get_(record|mx))|define_syslog_variables|(p)?fsockopen|long2ip|
get(servby(name|port)|host(name|by(name(l)?|addr))|protoby(name|number)|mxrr)
)\\b`, name: "support.function.network.php" }, { match: "(?i)\\bnsapi_(virtual|response_headers|request_headers)\\b", name: "support.function.nsapi.php" }, { match: `(?xi)\\b
(
oci(statementtype|setprefetch|serverversion|savelob(file)?|numcols|new(collection|cursor|descriptor)|nlogon|
column(scale|size|name|type(raw)?|isnull|precision)|coll(size|trim|assign(elem)?|append|getelem|max)|commit|
closelob|cancel|internaldebug|definebyname|plogon|parse|error|execute|fetch(statement|into)?|
free(statement|collection|cursor|desc)|write(temporarylob|lobtofile)|loadlob|log(on|off)|rowcount|rollback|
result|bindbyname)|
oci_(statement_type|set_(client_(info|identifier)|prefetch|edition|action|module_name)|server_version|
num_(fields|rows)|new_(connect|collection|cursor|descriptor)|connect|commit|client_version|close|cancel|
internal_debug|define_by_name|pconnect|password_change|parse|error|execute|bind_(array_)?by_name|
field_(scale|size|name|type(_raw)?|is_null|precision)|fetch(_(object|assoc|all|array|row))?|
free_(statement|descriptor)|lob_(copy|is_equal)|rollback|result|get_implicit_resultset)
)\\b`, name: "support.function.oci8.php" }, { match: "(?i)\\bopcache_(compile_file|invalidate|reset|get_(status|configuration))\\b", name: "support.function.opcache.php" }, { match: `(?xi)\\b
openssl_(
sign|spki_(new|export(_challenge)?|verify)|seal|csr_(sign|new|export(_to_file)?|get_(subject|public_key))|
cipher_iv_length|open|dh_compute_key|digest|decrypt|public_(decrypt|encrypt)|encrypt|error_string|
pkcs12_(export(_to_file)?|read)|pkcs7_(sign|decrypt|encrypt|verify)|verify|free_key|random_pseudo_bytes|
pkey_(new|export(_to_file)?|free|get_(details|public|private))|private_(decrypt|encrypt)|pbkdf2|
get_((cipher|md)_methods|cert_locations|(public|private)key)|
x509_(check_private_key|checkpurpose|parse|export(_to_file)?|fingerprint|free|read)
)\\b`, name: "support.function.openssl.php" }, { match: `(?xi)\\b
(
output_(add_rewrite_var|reset_rewrite_vars)|flush|
ob_(start|clean|implicit_flush|end_(clean|flush)|flush|list_handlers|gzhandler|
get_(status|contents|clean|flush|length|level))
)\\b`, name: "support.function.output.php" }, { match: "(?i)\\bpassword_(hash|needs_rehash|verify|get_info)\\b", name: "support.function.password.php" }, { match: `(?xi)\\b
pcntl_(
strerror|signal(_dispatch)?|sig(timedwait|procmask|waitinfo)|setpriority|errno|exec|fork|
w(stopsig|termsig|if(stopped|signaled|exited))|wait(pid)?|alarm|getpriority|get_last_error
)\\b`, name: "support.function.pcntl.php" }, { match: `(?xi)\\b
pg_(
socket|send_(prepare|execute|query(_params)?)|set_(client_encoding|error_verbosity)|select|host|
num_(fields|rows)|consume_input|connection_(status|reset|busy)|connect(_poll)?|convert|copy_(from|to)|
client_encoding|close|cancel_query|tty|transaction_status|trace|insert|options|delete|dbname|untrace|
unescape_bytea|update|pconnect|ping|port|put_line|parameter_status|prepare|version|query(_params)?|
escape_(string|identifier|literal|bytea)|end_copy|execute|flush|free_result|last_(notice|error|oid)|
field_(size|num|name|type(_oid)?|table|is_null|prtlen)|affected_rows|result_(status|seek|error(_field)?)|
fetch_(object|assoc|all(_columns)?|array|row|result)|get_(notify|pid|result)|meta_data|
lo_(seek|close|create|tell|truncate|import|open|unlink|export|write|read(_all)?)|
)\\b`, name: "support.function.pgsql.php" }, { match: "(?i)\\b(virtual|getallheaders|apache_((get|set)env|note|child_terminate|lookup_uri|response_headers|reset_timeout|request_headers|get_(version|modules)))\\b", name: "support.function.php_apache.php" }, { match: "(?i)\\bdom_import_simplexml\\b", name: "support.function.php_dom.php" }, { match: `(?xi)\\b
ftp_(
ssl_connect|systype|site|size|set_option|nlist|nb_(continue|f?(put|get))|ch(dir|mod)|connect|cdup|close|
delete|put|pwd|pasv|exec|quit|f(put|get)|login|alloc|rename|raw(list)?|rmdir|get(_option)?|mdtm|mkdir
)\\b`, name: "support.function.php_ftp.php" }, { match: `(?xi)\\b
imap_(
(create|delete|list|rename|scan)(mailbox)?|status|sort|subscribe|set_quota|set(flag_full|acl)|search|savebody|
num_(recent|msg)|check|close|clearflag_full|thread|timeout|open|header(info)?|headers|append|alerts|reopen|
8bit|unsubscribe|undelete|utf7_(decode|encode)|utf8|uid|ping|errors|expunge|qprint|gc|
fetch(structure|header|text|mime|body)|fetch_overview|lsub|list(scan|subscribed)|last_error|
rfc822_(parse_(headers|adrlist)|write_address)|get(subscribed|acl|mailboxes)|get_quota(root)?|
msgno|mime_header_decode|mail_(copy|compose|move)|mail|mailboxmsginfo|binary|body(struct)?|base64
)\\b`, name: "support.function.php_imap.php" }, { match: `(?xi)\\b
mssql_(
select_db|num_(fields|rows)|next_result|connect|close|init|data_seek|pconnect|execute|query|
field_(seek|name|type|length)|fetch_(object|field|assoc|array|row|batch)|free_(statement|result)|
rows_affected|result|guid_string|get_last_message|min_(error|message)_severity|bind
)\\b`, name: "support.function.php_mssql.php" }, { match: `(?xi)\\b
odbc_(
statistics|specialcolumns|setoption|num_(fields|rows)|next_result|connect|columns|columnprivileges|commit|
cursor|close(_all)?|tables|tableprivileges|do|data_source|pconnect|primarykeys|procedures|procedurecolumns|
prepare|error(msg)?|exec(ute)?|field_(scale|num|name|type|precision|len)|foreignkeys|free_result|
fetch_(into|object|array|row)|longreadlen|autocommit|rollback|result(_all)?|gettypeinfo|binmode
)\\b`, name: "support.function.php_odbc.php" }, { match: "(?i)\\bpreg_(split|quote|filter|last_error|replace(_callback)?|grep|match(_all)?)\\b", name: "support.function.php_pcre.php" }, { match: "(?i)\\b(spl_(classes|object_hash|autoload(_(call|unregister|extensions|functions|register))?)|class_(implements|uses|parents)|iterator_(count|to_array|apply))\\b", name: "support.function.php_spl.php" }, { match: "(?i)\\bzip_(close|open|entry_(name|compressionmethod|compressedsize|close|open|filesize|read)|read)\\b", name: "support.function.php_zip.php" }, { match: `(?xi)\\b
posix_(
strerror|set(s|e?u|[ep]?g)id|ctermid|ttyname|times|isatty|initgroups|uname|errno|kill|access|
get(sid|cwd|uid|pid|ppid|pwnam|pwuid|pgid|pgrp|euid|egid|login|rlimit|gid|grnam|groups|grgid)|
get_last_error|mknod|mkfifo
)\\b`, name: "support.function.posix.php" }, { match: "(?i)\\bset(thread|proc)title\\b", name: "support.function.proctitle.php" }, { match: `(?xi)\\b
pspell_(
store_replacement|suggest|save_wordlist|new(_(config|personal))?|check|clear_session|
config_(save_repl|create|ignore|(data|dict)_dir|personal|runtogether|repl|mode)|add_to_(session|personal)
)\\b`, name: "support.function.pspell.php" }, { match: "(?i)\\breadline(_(completion_function|clear_history|callback_(handler_(install|remove)|read_char)|info|on_new_line|write_history|list_history|add_history|redisplay|read_history))?\\b", name: "support.function.readline.php" }, { match: "(?i)\\brecode(_(string|file))?\\b", name: "support.function.recode.php" }, { match: "(?i)\\brrd(c_disconnect|_(create|tune|info|update|error|version|first|fetch|last(update)?|restore|graph|xport))\\b", name: "support.function.rrd.php" }, { match: `(?xi)\\b
(
shm_((get|has|remove|put)_var|detach|attach|remove)|sem_(acquire|release|remove|get)|ftok|
msg_((get|remove|set|stat)_queue|send|queue_exists|receive)
)\\b`, name: "support.function.sem.php" }, { match: `(?xi)\\b
session_(
status|start|set_(save_handler|cookie_params)|save_path|name|commit|cache_(expire|limiter)|
is_registered|id|destroy|decode|unset|unregister|encode|write_close|abort|reset|register(_shutdown)?|
regenerate_id|get_cookie_params|module_name
)\\b`, name: "support.function.session.php" }, { match: "(?i)\\bshmop_(size|close|open|delete|write|read)\\b", name: "support.function.shmop.php" }, { match: "(?i)\\bsimplexml_(import_dom|load_(string|file))\\b", name: "support.function.simplexml.php" }, { match: `(?xi)\\b
(
snmp(walk(oid)?|realwalk|get(next)?|set)|
snmp_(set_(valueretrieval|quick_print|enum_print|oid_(numeric_print|output_format))|read_mib|
get_(valueretrieval|quick_print))|
snmp[23]_(set|walk|real_walk|get(next)?)
)\\b`, name: "support.function.snmp.php" }, { match: "(?i)\\b(is_soap_fault|use_soap_error_handler)\\b", name: "support.function.soap.php" }, { match: `(?xi)\\b
socket_(
shutdown|strerror|send(to|msg)?|set_((non)?block|option)|select|connect|close|clear_error|bind|
create(_(pair|listen))?|cmsg_space|import_stream|write|listen|last_error|accept|recv(from|msg)?|
read|get(peer|sock)name|get_option
)\\b`, name: "support.function.sockets.php" }, { match: `(?xi)\\b
sqlite_(
single_query|seek|has_(more|prev)|num_(fields|rows)|next|changes|column|current|close|
create_(aggregate|function)|open|unbuffered_query|udf_(decode|encode)_binary|popen|prev|
escape_string|error_string|exec|valid|key|query|field_name|factory|
fetch_(string|single|column_types|object|all|array)|lib(encoding|version)|
last_(insert_rowid|error)|array_query|rewind|busy_timeout
)\\b`, name: "support.function.sqlite.php" }, { match: `(?xi)\\b
sqlsrv_(
send_stream_data|server_info|has_rows|num_(fields|rows)|next_result|connect|configure|commit|
client_info|close|cancel|prepare|errors|execute|query|field_metadata|fetch(_(array|object))?|
free_stmt|rows_affected|rollback|get_(config|field)|begin_transaction
)\\b`, name: "support.function.sqlsrv.php" }, { match: `(?xi)\\b
stats_(
harmonic_mean|covariance|standard_deviation|skew|
cdf_(noncentral_(chisquare|f)|negative_binomial|chisquare|cauchy|t|uniform|poisson|exponential|f|weibull|
logistic|laplace|gamma|binomial|beta)|
stat_(noncentral_t|correlation|innerproduct|independent_t|powersum|percentile|paired_t|gennch|binomial_coef)|
dens_(normal|negative_binomial|chisquare|cauchy|t|pmf_(hypergeometric|poisson|binomial)|exponential|f|
weibull|logistic|laplace|gamma|beta)|
den_uniform|variance|kurtosis|absolute_deviation|
rand_(setall|phrase_to_seeds|ranf|get_seeds|
gen_(noncentral_[ft]|noncenral_chisquare|normal|chisquare|t|int|
i(uniform|poisson|binomial(_negative)?)|exponential|f(uniform)?|gamma|beta))
)\\b`, name: "support.function.stats.php" }, { match: `(?xi)\\b
(
set_socket_blocking|
stream_(socket_(shutdown|sendto|server|client|pair|enable_crypto|accept|recvfrom|get_name)|
set_(chunk_size|timeout|(read|write)_buffer|blocking)|select|notification_callback|supports_lock|
context_(set_(option|default|params)|create|get_(options|default|params))|copy_to_stream|is_local|
encoding|filter_(append|prepend|register|remove)|wrapper_((un)?register|restore)|
resolve_include_path|register_wrapper|get_(contents|transports|filters|wrappers|line|meta_data)|
bucket_(new|prepend|append|make_writeable)
)
)\\b`, name: "support.function.streamsfuncs.php" }, { match: `(?xi)\\b
(
money_format|md5(_file)?|metaphone|bin2hex|sscanf|sha1(_file)?|
str(str|c?spn|n(at)?(case)?cmp|chr|coll|(case)?cmp|to(upper|lower)|tok|tr|istr|pos|pbrk|len|rchr|ri?pos|rev)|
str_(getcsv|ireplace|pad|repeat|replace|rot13|shuffle|split|word_count)|
strip(c?slashes|os)|strip_tags|similar_text|soundex|substr(_(count|compare|replace))?|setlocale|
html(specialchars(_decode)?|entities)|html_entity_decode|hex2bin|hebrev(c)?|number_format|nl2br|nl_langinfo|
chop|chunk_split|chr|convert_(cyr_string|uu(decode|encode))|count_chars|crypt|crc32|trim|implode|ord|
uc(first|words)|join|parse_str|print(f)?|echo|explode|v?[fs]?printf|quoted_printable_(decode|encode)|
quotemeta|wordwrap|lcfirst|[lr]trim|localeconv|levenshtein|addc?slashes|get_html_translation_table
)\\b`, name: "support.function.string.php" }, { match: `(?xi)\\b
sybase_(
set_message_handler|select_db|num_(fields|rows)|connect|close|deadlock_retry_count|data_seek|
unbuffered_query|pconnect|query|field_seek|fetch_(object|field|assoc|array|row)|free_result|
affected_rows|result|get_last_message|min_(client|error|message|server)_severity
)\\b`, name: "support.function.sybase.php" }, { match: "(?i)\\b(taint|is_tainted|untaint)\\b", name: "support.function.taint.php" }, { match: `(?xi)\\b
(
tidy_((get|set)opt|set_encoding|save_config|config_count|clean_repair|is_(xhtml|xml)|diagnose|
(access|error|warning)_count|load_config|reset_config|(parse|repair)_(string|file)|
get_(status|html(_ver)?|head|config|output|opt_doc|root|release|body))|
ob_tidyhandler
)\\b`, name: "support.function.tidy.php" }, { match: "(?i)\\btoken_(name|get_all)\\b", name: "support.function.tokenizer.php" }, { match: `(?xi)\\b
trader_(
stoch(f|r|rsi)?|stddev|sin(h)?|sum|sub|set_(compat|unstable_period)|sqrt|sar(ext)?|sma|
ht_(sine|trend(line|mode)|dc(period|phase)|phasor)|natr|cci|cos(h)?|correl|
cdl(shootingstar|shortline|sticksandwich|stalledpattern|spinningtop|separatinglines|
hikkake(mod)?|highwave|homingpigeon|hangingman|harami(cross)?|hammer|concealbabyswall|
counterattack|closingmarubozu|thrusting|tasukigap|takuri|tristar|inneck|invertedhammer|
identical3crows|2crows|onneck|doji(star)?|darkcloudcover|dragonflydoji|unique3river|
upsidegap2crows|3(starsinsouth|inside|outside|whitesoldiers|linestrike|blackcrows)|
piercing|engulfing|evening(doji)?star|kicking(bylength)?|longline|longleggeddoji|
ladderbottom|advanceblock|abandonedbaby|risefall3methods|rickshawman|gapsidesidewhite|
gravestonedoji|xsidegap3methods|morning(doji)?star|mathold|matchinglow|marubozu|
belthold|breakaway)|
ceil|cmo|tsf|typprice|t3|tema|tan(h)?|trix|trima|trange|obv|div|dema|dx|ultosc|ppo|
plus_d[im]|errno|exp|ema|var|kama|floor|wclprice|willr|wma|ln|log10|bop|beta|bbands|
linearreg(_(slope|intercept|angle))?|asin|acos|atan|atr|adosc|ad|add|adx(r)?|apo|avgprice|
aroon(osc)?|rsi|roc|rocp|rocr(100)?|get_(compat|unstable_period)|min(index)?|minus_d[im]|
minmax(index)?|mid(point|price)|mom|mult|medprice|mfi|macd(ext|fix)?|mavp|max(index)?|ma(ma)?
)\\b`, name: "support.function.trader.php" }, { match: "(?i)\\buopz_(copy|compose|implement|overload|delete|undefine|extend|function|flags|restore|rename|redefine|backup)\\b", name: "support.function.uopz.php" }, { match: "(?i)\\b(http_build_query|(raw)?url(decode|encode)|parse_url|get_(headers|meta_tags)|base64_(decode|encode))\\b", name: "support.function.url.php" }, { match: `(?xi)\\b
(
strval|settype|serialize|(bool|double|float)val|debug_zval_dump|intval|import_request_variables|isset|
is_(scalar|string|null|numeric|callable|int(eger)?|object|double|float|long|array|resource|real|bool)|
unset|unserialize|print_r|empty|var_(dump|export)|gettype|get_(defined_vars|resource_type)
)\\b`, name: "support.function.var.php" }, { match: "(?i)\\bwddx_(serialize_(value|vars)|deserialize|packet_(start|end)|add_vars)\\b", name: "support.function.wddx.php" }, { match: "(?i)\\bxhprof_(sample_)?(disable|enable)\\b", name: "support.function.xhprof.php" }, { match: `(?xi)
\\b
(
utf8_(decode|encode)|
xml_(set_((notation|(end|start)_namespace|unparsed_entity)_decl_handler|
(character_data|default|element|external_entity_ref|processing_instruction)_handler|object)|
parse(_into_struct)?|parser_((get|set)_option|create(_ns)?|free)|error_string|
get_(current_((column|line)_number|byte_index)|error_code))
)\\b`, name: "support.function.xml.php" }, { match: `(?xi)\\b
xmlrpc_(
server_(call_method|create|destroy|add_introspection_data|register_(introspection_callback|method))|
is_fault|decode(_request)?|parse_method_descriptions|encode(_request)?|(get|set)_type
)\\b`, name: "support.function.xmlrpc.php" }, { match: `(?xi)\\b
xmlwriter_(
(end|start|write)_(comment|cdata|dtd(_(attlist|entity|element))?|document|pi|attribute|element)|
(start|write)_(attribute|element)_ns|write_raw|set_indent(_string)?|text|output_memory|open_(memory|uri)|
full_end_element|flush|
)\\b`, name: "support.function.xmlwriter.php" }, { match: `(?xi)\\b
(
zlib_(decode|encode|get_coding_type)|readgzfile|
gz(seek|compress|close|tell|inflate|open|decode|deflate|uncompress|puts|passthru|encode|eof|file|
write|rewind|read|getc|getss?)
)\\b`, name: "support.function.zlib.php" }, { match: "(?i)\\bis_int(eger)?\\b", name: "support.function.alias.php" }] }, switch_statement: { patterns: [{ match: "\\s+(?=switch\\b)" }, { begin: "\\bswitch\\b(?!\\s*\\(.*\\)\\s*:)", beginCaptures: { 0: { name: "keyword.control.switch.php" } }, end: "}|(?=\\?>)", endCaptures: { 0: { name: "punctuation.definition.section.switch-block.end.bracket.curly.php" } }, name: "meta.switch-statement.php", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.switch-expression.begin.bracket.round.php" } }, end: "\\)|(?=\\?>)", endCaptures: { 0: { name: "punctuation.definition.switch-expression.end.bracket.round.php" } }, patterns: [{ include: "$self" }] }, { begin: "{", beginCaptures: { 0: { name: "punctuation.definition.section.switch-block.begin.bracket.curly.php" } }, end: "(?=}|\\?>)", patterns: [{ include: "$self" }] }] }] }, ternary_expression: { begin: "\\?", beginCaptures: { 0: { name: "keyword.operator.ternary.php" } }, end: "(?<!:):(?!:)", endCaptures: { 0: { name: "keyword.operator.ternary.php" } }, patterns: [{ captures: { 1: { patterns: [{ include: "$self" }] } }, match: "(?i)^\\s*([a-z_\\x{7f}-\\x{10ffff}][a-z0-9_\\x{7f}-\\x{10ffff}]*)\\s*(?=:(?!:))" }, { include: "$self" }] }, ternary_shorthand: { match: "\\?:", name: "keyword.operator.ternary.php" }, "use-inner": { patterns: [{ include: "#comments" }, { begin: "(?i)\\b(as)\\s+", beginCaptures: { 1: { name: "keyword.other.use-as.php" } }, end: "(?i)[a-z_\\x{7f}-\\x{10ffff}][a-z0-9_\\x{7f}-\\x{10ffff}]*", endCaptures: { 0: { name: "entity.other.alias.php" } } }, { include: "#class-name" }, { match: ",", name: "punctuation.separator.delimiter.php" }] }, var_basic: { patterns: [{ captures: { 1: { name: "punctuation.definition.variable.php" } }, match: "(?i)(\\$+)[a-z_\\x{7f}-\\x{10ffff}][a-z0-9_\\x{7f}-\\x{10ffff}]*", name: "variable.other.php" }] }, var_global: { captures: { 1: { name: "punctuation.definition.variable.php" } }, match: "(\\$)((_(COOKIE|FILES|GET|POST|REQUEST))|arg(v|c))\\b", name: "variable.other.global.php" }, var_global_safer: { captures: { 1: { name: "punctuation.definition.variable.php" } }, match: "(\\$)((GLOBALS|_(ENV|SERVER|SESSION)))", name: "variable.other.global.safer.php" }, var_language: { captures: { 1: { name: "punctuation.definition.variable.php" } }, match: "(\\$)this\\b", name: "variable.language.this.php" }, "variable-name": { patterns: [{ include: "#var_global" }, { include: "#var_global_safer" }, { captures: { 1: { name: "variable.other.php" }, 2: { name: "punctuation.definition.variable.php" }, 4: { name: "keyword.operator.class.php" }, 5: { name: "variable.other.property.php" }, 6: { name: "punctuation.section.array.begin.php" }, 7: { name: "constant.numeric.index.php" }, 8: { name: "variable.other.index.php" }, 9: { name: "punctuation.definition.variable.php" }, 10: { name: "string.unquoted.index.php" }, 11: { name: "punctuation.section.array.end.php" } }, match: `(?xi)
((\\$)(?<name>[a-z_\\x{7f}-\\x{10ffff}][a-z0-9_\\x{7f}-\\x{10ffff}]*))\\s*
(?:
(\\??->)\\s*(\\g<name>)
|
(\\[)(?:(\\d+)|((\\$)\\g<name>)|([a-z_\\x{7f}-\\x{10ffff}][a-z0-9_\\x{7f}-\\x{10ffff}]*))(\\])
)?` }, { captures: { 1: { name: "variable.other.php" }, 2: { name: "punctuation.definition.variable.php" }, 4: { name: "punctuation.definition.variable.php" } }, match: "(?i)((\\${)(?<name>[a-z_\\x{7f}-\\x{10ffff}][a-z0-9_\\x{7f}-\\x{10ffff}]*)(}))" }] }, variables: { patterns: [{ include: "#var_language" }, { include: "#var_global" }, { include: "#var_global_safer" }, { include: "#var_basic" }, { begin: "\\${(?=.*?})", beginCaptures: { 0: { name: "punctuation.definition.variable.php" } }, end: "}", endCaptures: { 0: { name: "punctuation.definition.variable.php" } }, patterns: [{ include: "$self" }] }] } }, scopeName: "source.php", embeddedLangs: ["html", "xml", "sql", "javascript", "json", "css"] });
var An = [
  ...t,
  ...s,
  ...a,
  ...e,
  ...i,
  ...n,
  Cn
];
const jn = Object.freeze({ displayName: "PL/SQL", fileTypes: ["sql", "ddl", "dml", "pkh", "pks", "pkb", "pck", "pls", "plb"], foldingStartMarker: "(?i)^\\s*(begin|if|loop)\\b", foldingStopMarker: "(?i)^\\s*(end)\\b", name: "plsql", patterns: [{ begin: "/\\*", end: "\\*/", name: "comment.block.oracle" }, { match: "--.*$", name: "comment.line.double-dash.oracle" }, { match: "(?i)(?:^\\s*)rem(?:\\s+.*$)", name: "comment.line.sqlplus.oracle" }, { match: "(?i)(?:^\\s*)prompt(?:\\s+.*$)", name: "comment.line.sqlplus-prompt.oracle" }, { captures: { 1: { name: "keyword.other.oracle" }, 2: { name: "keyword.other.oracle" } }, match: "(?i)^\\s*(create)(\\s+or\\s+replace)?\\s+", name: "meta.create.oracle" }, { captures: { 1: { name: "keyword.other.oracle" }, 2: { name: "keyword.other.oracle" }, 3: { name: "entity.name.type.oracle" } }, match: "(?i)\\b(package)(\\s+body)?\\s+(\\S+)", name: "meta.package.oracle" }, { captures: { 1: { name: "keyword.other.oracle" }, 2: { name: "entity.name.type.oracle" } }, match: '(?i)\\b(type)\\s+"([^"]+)"', name: "meta.type.oracle" }, { captures: { 1: { name: "keyword.other.oracle" }, 2: { name: "entity.name.function.oracle" } }, match: '(?i)^\\s*(function|procedure)\\s+"?([-a-z0-9_]+)"?', name: "meta.procedure.oracle" }, { match: "[!<>:]?=|<>|<|>|\\+|(?<!\\.)\\*|-|(?<!^)/|\\|\\|", name: "keyword.operator.oracle" }, { match: "(?i)\\b(true|false|null|is\\s+(not\\s+)?null)\\b", name: "constant.language.oracle" }, { match: "\\b\\d+(\\.\\d+)?\\b", name: "constant.numeric.oracle" }, { match: "(?i)\\b(if|elsif|else|end\\s+if|loop|end\\s+loop|for|while|case|end\\s+case|continue|return|goto)\\b", name: "keyword.control.oracle" }, { match: "(?i)\\b(or|and|not|like)\\b", name: "keyword.other.oracle" }, { match: "(?i)\\b(%(isopen|found|notfound|rowcount)|commit|rollback|sqlerrm)\\b", name: "support.function.oracle" }, { match: "(?i)\\b(sql|sqlcode)\\b", name: "variable.language.oracle" }, { match: "(?i)\\b(ascii|asciistr|chr|compose|concat|convert|decompose|dump|initcap|instr|instrb|instrc|instr2|instr4|unistr|length|lengthb|lengthc|length2|length4|lower|lpad|ltrim|nchr|replace|rpad|rtrim|soundex|substr|translate|trim|upper|vsize)\\b", name: "support.function.builtin.char.oracle" }, { match: "(?i)\\b(add_months|current_date|current_timestamp|dbtimezone|last_day|localtimestamp|months_between|new_time|next_day|round|sessiontimezone|sysdate|tz_offset|systimestamp)\\b", name: "support.function.builtin.date.oracle" }, { match: "(?i)\\b(avg|count|sum|max|min|median|corr|corr_\\w+|covar_(pop|samp)|cume_dist|dense_rank|first|group_id|grouping|grouping_id|last|percentile_cont|percentile_disc|percent_rank|rank|regr_\\w+|row_number|stats_binomial_test|stats_crosstab|stats_f_test|stats_ks_test|stats_mode|stats_mw_test|stats_one_way_anova|stats_t_test_\\w+|stats_wsr_test|stddev|stddev_pop|stddev_samp|var_pop|var_samp|variance)\\b", name: "support.function.builtin.aggregate.oracle" }, { match: "(?i)\\b(bfilename|cardinality|coalesce|decode|empty_(blob|clob)|lag|lead|listagg|lnnvl|nanvl|nullif|nvl|nvl2|sys_(context|guid|typeid|connect_by_path|extract_utc)|uid|(current\\s+)?user|userenv|cardinality|(bulk\\s+)?collect|powermultiset(_by_cardinality)?|ora_hash|standard_hash|execute\\s+immediate|alter\\s+session)\\b", name: "support.function.builtin.advanced.oracle" }, { match: "(?i)\\b(bin_to_num|cast|chartorowid|from_tz|hextoraw|numtodsinterval|numtoyminterval|rawtohex|rawtonhex|to_char|to_clob|to_date|to_dsinterval|to_lob|to_multi_byte|to_nclob|to_number|to_single_byte|to_timestamp|to_timestamp_tz|to_yminterval|scn_to_timestamp|timestamp_to_scn|rowidtochar|rowidtonchar|to_binary_double|to_binary_float|to_blob|to_nchar|con_dbid_to_id|con_guid_to_id|con_name_to_id|con_uid_to_id)\\b", name: "support.function.builtin.convert.oracle" }, { match: "(?i)\\b(abs|acos|asin|atan|atan2|bit_(and|or|xor)|ceil|cos|cosh|exp|extract|floor|greatest|least|ln|log|mod|power|remainder|round|sign|sin|sinh|sqrt|tan|tanh|trunc)\\b", name: "support.function.builtin.math.oracle" }, { match: "(?i)\\b(\\.(count|delete|exists|extend|first|last|limit|next|prior|trim|reverse))\\b", name: "support.function.builtin.collection.oracle" }, { match: "(?i)\\b(cluster_details|cluster_distance|cluster_id|cluster_probability|cluster_set|feature_details|feature_id|feature_set|feature_value|prediction|prediction_bounds|prediction_cost|prediction_details|prediction_probability|prediction_set)\\b", name: "support.function.builtin.data_mining.oracle" }, { match: "(?i)\\b(appendchildxml|deletexml|depth|extract|existsnode|extractvalue|insertchildxml|insertxmlbefore|xmlcast|xmldiff|xmlelement|xmlexists|xmlisvalid|insertchildxmlafter|insertchildxmlbefore|path|sys_dburigen|sys_xmlagg|sys_xmlgen|updatexml|xmlagg|xmlcdata|xmlcolattval|xmlcomment|xmlconcat|xmlforest|xmlparse|xmlpi|xmlquery|xmlroot|xmlsequence|xmlserialize|xmltable|xmltransform)\\b", name: "support.function.builtin.xml.oracle" }, { match: "(?i)\\b(pragma\\s+(autonomous_transaction|serially_reusable|restrict_references|exception_init|inline))\\b", name: "keyword.other.pragma.oracle" }, { match: "(?i)\\b(p(i|o|io)_[-a-z0-9_]+)\\b", name: "variable.parameter.oracle" }, { match: "(?i)\\b(l_[-a-z0-9_]+)\\b", name: "variable.other.oracle" }, { match: "(?i):\\b(new|old)\\b", name: "variable.trigger.oracle" }, { match: "(?i)\\b(connect\\s+by\\s+(nocycle\\s+)?(prior|level)|connect_by_(root|icycle)|level|start\\s+with)\\b", name: "keyword.hierarchical.sql.oracle" }, { match: "(?i)\\b(language|name|java|c)\\b", name: "keyword.wrapper.oracle" }, { match: "(?i)\\b(end|then|deterministic|exception|when|declare|begin|in|out|nocopy|is|as|exit|open|fetch|into|close|subtype|type|rowtype|default|exclusive|mode|lock|record|index\\s+by|result_cache|constant|comment|\\.(nextval|currval))\\b", name: "keyword.other.oracle" }, { match: "(?i)\\b(grant|revoke|alter|drop|force|add|check|constraint|primary\\s+key|foreign\\s+key|references|unique(\\s+index)?|column|sequence|increment\\s+by|cache|(materialized\\s+)?view|trigger|storage|tablespace|pct(free|used)|(init|max)trans|logging)\\b", name: "keyword.other.ddl.oracle" }, { match: "(?i)\\b(with|select|from|where|order\\s+(siblings\\s+)?by|group\\s+by|rollup|cube|((left|right|cross|natural)\\s+(outer\\s+)?)?join|on|asc|desc|update|set|insert|into|values|delete|distinct|union|minus|intersect|having|limit|table|between|like|of|row|(range|rows)\\s+between|nulls\\s+first|nulls\\s+last|before|after|all|any|exists|rownum|cursor|returning|over|partition\\s+by|merge|using|matched|pivot|unpivot)\\b", name: "keyword.other.sql.oracle" }, { match: "(?i)\\b(define|whenever\\s+sqlerror|exec|timing\\s+start|timing\\s+stop)\\b", name: "keyword.other.sqlplus.oracle" }, { match: "(?i)\\b(access_into_null|case_not_found|collection_is_null|cursor_already_open|dup_val_on_index|invalid_cursor|invalid_number|login_denied|no_data_found|not_logged_on|program_error|rowtype_mismatch|self_is_null|storage_error|subscript_beyond_count|subscript_outside_limit|sys_invalid_rowid|timeout_on_resource|too_many_rows|value_error|zero_divide|others)\\b", name: "support.type.exception.oracle" }, { captures: { 3: { name: "support.class.oracle" } }, match: "(?i)\\b((dbms|utl|owa|apex)_\\w+\\.(\\w+))\\b", name: "support.function.oracle" }, { captures: { 3: { name: "support.class.oracle" } }, match: "(?i)\\b((htf|htp)\\.(\\w+))\\b", name: "support.function.oracle" }, { captures: { 3: { name: "support.class.user-defined.oracle" } }, match: "(?i)\\b((\\w+_pkg|pkg_\\w+)\\.(\\w+))\\b", name: "support.function.user-defined.oracle" }, { match: "(?i)\\b(raise|raise_application_error)\\b", name: "support.function.oracle" }, { begin: "'", end: "'", name: "string.quoted.single.oracle" }, { begin: '"', end: '"', name: "string.quoted.double.oracle" }, { match: "(?i)\\b(char|varchar|varchar2|nchar|nvarchar2|boolean|date|timestamp(\\s+with(\\s+local)?\\s+time\\s+zone)?|interval\\s*day(\\(\\d*\\))?\\s*to\\s*month|interval\\s*year(\\(\\d*\\))?\\s*to\\s*second(\\(\\d*\\))?|xmltype|blob|clob|nclob|bfile|long|long\\s+raw|raw|number|integer|decimal|smallint|float|binary_(float|double|integer)|pls_(float|double|integer)|rowid|urowid|vararray|natural|naturaln|positive|positiven|signtype|simple_(float|double|integer))\\b", name: "storage.type.oracle" }], scopeName: "source.plsql.oracle" });
var Fn = [
  jn
];
const En = Object.freeze({ displayName: "PowerShell", name: "powershell", patterns: [{ begin: "<#", beginCaptures: { 0: { name: "punctuation.definition.comment.block.begin.powershell" } }, end: "#>", endCaptures: { 0: { name: "punctuation.definition.comment.block.end.powershell" } }, name: "comment.block.powershell", patterns: [{ include: "#commentEmbeddedDocs" }] }, { match: "[2-6]>&1|>>|>|<<|<|>|>\\||[1-6]>|[1-6]>>", name: "keyword.operator.redirection.powershell" }, { include: "#commands" }, { include: "#commentLine" }, { include: "#variable" }, { include: "#subexpression" }, { include: "#function" }, { include: "#attribute" }, { include: "#UsingDirective" }, { include: "#type" }, { include: "#hashtable" }, { include: "#doubleQuotedString" }, { include: "#scriptblock" }, { comment: "Needed to parse stuff correctly in 'argument mode'. (See about_parsing.)", include: "#doubleQuotedStringEscapes" }, { applyEndPatternLast: !0, begin: "['\\x{2018}-\\x{201B}]", beginCaptures: { 0: { name: "punctuation.definition.string.begin.powershell" } }, end: "['\\x{2018}-\\x{201B}]", endCaptures: { 0: { name: "punctuation.definition.string.end.powershell" } }, name: "string.quoted.single.powershell", patterns: [{ match: "['\\x{2018}-\\x{201B}]{2}", name: "constant.character.escape.powershell" }] }, { begin: '(@["\\x{201C}-\\x{201E}])\\s*$', beginCaptures: { 1: { name: "punctuation.definition.string.begin.powershell" } }, end: '^["\\x{201C}-\\x{201E}]@', endCaptures: { 0: { name: "punctuation.definition.string.end.powershell" } }, name: "string.quoted.double.heredoc.powershell", patterns: [{ include: "#variableNoProperty" }, { include: "#doubleQuotedStringEscapes" }, { include: "#interpolation" }] }, { begin: "(@['\\x{2018}-\\x{201B}])\\s*$", beginCaptures: { 1: { name: "punctuation.definition.string.begin.powershell" } }, end: "^['\\x{2018}-\\x{201B}]@", endCaptures: { 0: { name: "punctuation.definition.string.end.powershell" } }, name: "string.quoted.single.heredoc.powershell" }, { include: "#numericConstant" }, { begin: "(@)(\\()", beginCaptures: { 1: { name: "keyword.other.array.begin.powershell" }, 2: { name: "punctuation.section.group.begin.powershell" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.group.end.powershell" } }, name: "meta.group.array-expression.powershell", patterns: [{ include: "$self" }] }, { begin: "((\\$))(\\()", beginCaptures: { 1: { name: "keyword.other.substatement.powershell" }, 2: { name: "punctuation.definition.subexpression.powershell" }, 3: { name: "punctuation.section.group.begin.powershell" } }, comment: "TODO: move to repo; make recursive.", end: "\\)", endCaptures: { 0: { name: "punctuation.section.group.end.powershell" } }, name: "meta.group.complex.subexpression.powershell", patterns: [{ include: "$self" }] }, { match: "(\\b(([A-Za-z0-9\\-_\\.]+)\\.(?i:exe|com|cmd|bat))\\b)", name: "support.function.powershell" }, { match: "(?<!\\w|-|\\.)((?i:begin|break|catch|clean|continue|data|default|define|do|dynamicparam|else|elseif|end|exit|finally|for|from|if|in|inlinescript|parallel|param|process|return|sequence|switch|throw|trap|try|until|var|while)|%|\\?)(?!\\w)", name: "keyword.control.powershell" }, { match: "(?<!\\w|-|[^\\)]\\.)((?i:(foreach|where)(?!-object))|%|\\?)(?!\\w)", name: "keyword.control.powershell" }, { begin: "(?<!\\w)(--%)(?!\\w)", beginCaptures: { 1: { name: "keyword.control.powershell" } }, comment: "This should be moved to the repository at some point.", end: "$", patterns: [{ match: ".+", name: "string.unquoted.powershell" }] }, { comment: "This should only be relevant inside a class but will require a rework of how classes are matched. This is a temp fix.", match: "(?<!\\w)((?i:hidden|static))(?!\\w)", name: "storage.modifier.powershell" }, { captures: { 1: { name: "storage.type.powershell" }, 2: { name: "entity.name.function" } }, comment: "capture should be entity.name.type, but it doesn't provide a good color in the default schema.", match: "(?<!\\w|-)((?i:class)|%|\\?)(?:\\s)+((?:\\p{L}|\\d|_|-|)+)\\b" }, { match: "(?<!\\w)-(?i:is(?:not)?|as)\\b", name: "keyword.operator.comparison.powershell" }, { match: "(?<!\\w)-(?i:[ic]?(?:eq|ne|[gl][te]|(?:not)?(?:like|match|contains|in)|replace))(?!\\p{L})", name: "keyword.operator.comparison.powershell" }, { match: "(?<!\\w)-(?i:join|split)(?!\\p{L})|!", name: "keyword.operator.unary.powershell" }, { match: "(?<!\\w)-(?i:and|or|not|xor)(?!\\p{L})|!", name: "keyword.operator.logical.powershell" }, { match: "(?<!\\w)-(?i:band|bor|bnot|bxor|shl|shr)(?!\\p{L})", name: "keyword.operator.bitwise.powershell" }, { match: "(?<!\\w)-(?i:f)(?!\\p{L})", name: "keyword.operator.string-format.powershell" }, { match: "[+%*/-]?=|[+/*%-]", name: "keyword.operator.assignment.powershell" }, { match: "\\|{2}|&{2}|;", name: "punctuation.terminator.statement.powershell" }, { match: "&|(?<!\\w)\\.(?= )|`|,|\\|", name: "keyword.operator.other.powershell" }, { comment: "This is very imprecise, is there a syntax for 'must come after...' ", match: "(?<!\\s|^)\\.\\.(?=\\-?\\d|\\(|\\$)", name: "keyword.operator.range.powershell" }], repository: { RequiresDirective: { begin: "(?<=#)(?i:(requires))\\s", beginCaptures: { 0: { name: "keyword.control.requires.powershell" } }, end: "$", name: "meta.requires.powershell", patterns: [{ match: "\\-(?i:Modules|PSSnapin|RunAsAdministrator|ShellId|Version|Assembly|PSEdition)", name: "keyword.other.powershell" }, { match: "(?<!-)\\b\\p{L}+|\\d+(?:\\.\\d+)*", name: "variable.parameter.powershell" }, { include: "#hashtable" }] }, UsingDirective: { captures: { 1: { name: "keyword.control.using.powershell" }, 2: { name: "keyword.other.powershell" }, 3: { name: "variable.parameter.powershell" } }, match: "(?<!\\w)(?i:(using))\\s+(?i:(namespace|module))\\s+(?i:((?:\\w+(?:\\.)?)+))" }, attribute: { begin: "(\\[)\\s*\\b(?i)(cmdletbinding|alias|outputtype|parameter|validatenotnull|validatenotnullorempty|validatecount|validateset|allownull|allowemptycollection|allowemptystring|validatescript|validaterange|validatepattern|validatelength|supportswildcards)\\b", beginCaptures: { 1: { name: "punctuation.section.bracket.begin.powershell" }, 2: { name: "support.function.attribute.powershell" } }, end: "(\\])", endCaptures: { 1: { name: "punctuation.section.bracket.end.powershell" } }, name: "meta.attribute.powershell", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.section.group.begin.powershell" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.group.end.powershell" } }, patterns: [{ include: "$self" }, { captures: { 1: { name: "variable.parameter.attribute.powershell" }, 2: { name: "keyword.operator.assignment.powershell" } }, match: "(?i)\\b(mandatory|valuefrompipeline|valuefrompipelinebypropertyname|valuefromremainingarguments|position|parametersetname|defaultparametersetname|supportsshouldprocess|supportspaging|positionalbinding|helpuri|confirmimpact|helpmessage)\\b(?:\\s+)?(=)?" }] }] }, commands: { patterns: [{ comment: "Verb-Noun pattern:", match: "(?:(\\p{L}|\\d|_|-|\\\\|\\:)*\\\\)?\\b(?i:Add|Approve|Assert|Backup|Block|Build|Checkpoint|Clear|Close|Compare|Complete|Compress|Confirm|Connect|Convert|ConvertFrom|ConvertTo|Copy|Debug|Deny|Deploy|Disable|Disconnect|Dismount|Edit|Enable|Enter|Exit|Expand|Export|Find|Format|Get|Grant|Group|Hide|Import|Initialize|Install|Invoke|Join|Limit|Lock|Measure|Merge|Mount|Move|New|Open|Optimize|Out|Ping|Pop|Protect|Publish|Push|Read|Receive|Redo|Register|Remove|Rename|Repair|Request|Reset|Resize|Resolve|Restart|Restore|Resume|Revoke|Save|Search|Select|Send|Set|Show|Skip|Split|Start|Step|Stop|Submit|Suspend|Switch|Sync|Test|Trace|Unblock|Undo|Uninstall|Unlock|Unprotect|Unpublish|Unregister|Update|Use|Wait|Watch|Write)\\-.+?(?:\\.(?i:exe|cmd|bat|ps1))?\\b", name: "support.function.powershell" }, { comment: "Builtin cmdlets with reserved verbs", match: "(?<!\\w)(?i:foreach-object)(?!\\w)", name: "support.function.powershell" }, { comment: "Builtin cmdlets with reserved verbs", match: "(?<!\\w)(?i:where-object)(?!\\w)", name: "support.function.powershell" }, { comment: "Builtin cmdlets with reserved verbs", match: "(?<!\\w)(?i:sort-object)(?!\\w)", name: "support.function.powershell" }, { comment: "Builtin cmdlets with reserved verbs", match: "(?<!\\w)(?i:tee-object)(?!\\w)", name: "support.function.powershell" }] }, commentEmbeddedDocs: { patterns: [{ captures: { 1: { name: "constant.string.documentation.powershell" }, 2: { name: "keyword.operator.documentation.powershell" } }, comment: "these embedded doc keywords do not support arguments, must be the only thing on the line", match: "(?:^|\\G)(?i:\\s*(\\.)(COMPONENT|DESCRIPTION|EXAMPLE|FUNCTIONALITY|INPUTS|LINK|NOTES|OUTPUTS|ROLE|SYNOPSIS))\\s*$", name: "comment.documentation.embedded.powershell" }, { captures: { 1: { name: "constant.string.documentation.powershell" }, 2: { name: "keyword.operator.documentation.powershell" }, 3: { name: "keyword.operator.documentation.powershell" } }, comment: "these embedded doc keywords require arguments though the type required may be inconsistent, they may not all be able to use the same argument match", match: "(?:^|\\G)(?i:\\s*(\\.)(EXTERNALHELP|FORWARDHELP(?:CATEGORY|TARGETNAME)|PARAMETER|REMOTEHELPRUNSPACE))\\s+(.+?)\\s*$", name: "comment.documentation.embedded.powershell" }] }, commentLine: { begin: "(?<![`\\\\-])(#)#*", captures: { 1: { name: "punctuation.definition.comment.powershell" } }, end: "$\\n?", name: "comment.line.powershell", patterns: [{ include: "#commentEmbeddedDocs" }, { include: "#RequiresDirective" }] }, doubleQuotedString: { applyEndPatternLast: !0, begin: '["\\x{201C}-\\x{201E}]', beginCaptures: { 0: { name: "punctuation.definition.string.begin.powershell" } }, end: '["\\x{201C}-\\x{201E}]', endCaptures: { 0: { name: "punctuation.definition.string.end.powershell" } }, name: "string.quoted.double.powershell", patterns: [{ match: "(?i)\\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,64}\\b" }, { include: "#variableNoProperty" }, { include: "#doubleQuotedStringEscapes" }, { match: '["\\x{201C}-\\x{201E}]{2}', name: "constant.character.escape.powershell" }, { include: "#interpolation" }, { match: "`\\s*$", name: "keyword.other.powershell" }] }, doubleQuotedStringEscapes: { patterns: [{ match: "`[`0abefnrtv'\"\\x{2018}-\\x{201E}$]", name: "constant.character.escape.powershell" }, { include: "#unicodeEscape" }] }, function: { begin: "^(?:\\s*+)(?i)(function|filter|configuration|workflow)\\s+(?:(global|local|script|private):)?((?:\\p{L}|\\d|_|-|\\.)+)", beginCaptures: { 0: { name: "meta.function.powershell" }, 1: { name: "storage.type.powershell" }, 2: { name: "storage.modifier.scope.powershell" }, 3: { name: "entity.name.function.powershell" } }, end: "(?=\\{|\\()", patterns: [{ include: "#commentLine" }] }, hashtable: { begin: "(@)(\\{)", beginCaptures: { 1: { name: "keyword.other.hashtable.begin.powershell" }, 2: { name: "punctuation.section.braces.begin.powershell" } }, end: "(\\})", endCaptures: { 1: { name: "punctuation.section.braces.end.powershell" } }, name: "meta.hashtable.powershell", patterns: [{ captures: { 1: { name: "punctuation.definition.string.begin.powershell" }, 2: { name: "variable.other.readwrite.powershell" }, 3: { name: "punctuation.definition.string.end.powershell" }, 4: { name: "keyword.operator.assignment.powershell" } }, match: `\\b((?:\\'|\\")?)(\\w+)((?:\\'|\\")?)(?:\\s+)?(=)(?:\\s+)?`, name: "meta.hashtable.assignment.powershell" }, { include: "#scriptblock" }, { include: "$self" }] }, interpolation: { begin: "(((\\$)))((\\())", beginCaptures: { 1: { name: "keyword.other.substatement.powershell" }, 2: { name: "punctuation.definition.substatement.powershell" }, 3: { name: "punctuation.section.embedded.substatement.begin.powershell" }, 4: { name: "punctuation.section.group.begin.powershell" }, 5: { name: "punctuation.section.embedded.substatement.begin.powershell" } }, contentName: "interpolated.complex.source.powershell", end: "(\\))", endCaptures: { 0: { name: "punctuation.section.group.end.powershell" }, 1: { name: "punctuation.section.embedded.substatement.end.powershell" } }, name: "meta.embedded.substatement.powershell", patterns: [{ include: "$self" }] }, numericConstant: { patterns: [{ captures: { 1: { name: "constant.numeric.hex.powershell" }, 2: { name: "keyword.other.powershell" } }, match: "(?<!\\w)([-+]?0(?:x|X)[0-9a-fA-F_]+(?:U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?)((?i:[kmgtp]b)?)\\b" }, { captures: { 1: { name: "constant.numeric.integer.powershell" }, 2: { name: "keyword.other.powershell" } }, match: "(?<!\\w)([-+]?(?:[0-9_]+)?\\.[0-9_]+(?:(?:e|E)[0-9]+)?(?:F|f|D|d|M|m)?)((?i:[kmgtp]b)?)\\b" }, { captures: { 1: { name: "constant.numeric.octal.powershell" }, 2: { name: "keyword.other.powershell" } }, match: "(?<!\\w)([-+]?0(?:b|B)[01_]+(?:U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?)((?i:[kmgtp]b)?)\\b" }, { captures: { 1: { name: "constant.numeric.integer.powershell" }, 2: { name: "keyword.other.powershell" } }, match: "(?<!\\w)([-+]?[0-9_]+(?:e|E)(?:[0-9_])?+(?:F|f|D|d|M|m)?)((?i:[kmgtp]b)?)\\b" }, { captures: { 1: { name: "constant.numeric.integer.powershell" }, 2: { name: "keyword.other.powershell" } }, match: "(?<!\\w)([-+]?[0-9_]+\\.(?:e|E)(?:[0-9_])?+(?:F|f|D|d|M|m)?)((?i:[kmgtp]b)?)\\b" }, { captures: { 1: { name: "constant.numeric.integer.powershell" }, 2: { name: "keyword.other.powershell" } }, match: "(?<!\\w)([-+]?[0-9_]+[\\.]?(?:F|f|D|d|M|m))((?i:[kmgtp]b)?)\\b" }, { captures: { 1: { name: "constant.numeric.integer.powershell" }, 2: { name: "keyword.other.powershell" } }, match: "(?<!\\w)([-+]?[0-9_]+[\\.]?(?:U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?)((?i:[kmgtp]b)?)\\b" }] }, scriptblock: { begin: "\\{", beginCaptures: { 0: { name: "punctuation.section.braces.begin.powershell" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.section.braces.end.powershell" } }, name: "meta.scriptblock.powershell", patterns: [{ include: "$self" }] }, subexpression: { begin: "\\(", beginCaptures: { 0: { name: "punctuation.section.group.begin.powershell" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.section.group.end.powershell" } }, name: "meta.group.simple.subexpression.powershell", patterns: [{ include: "$self" }] }, type: { begin: "\\[", beginCaptures: { 0: { name: "punctuation.section.bracket.begin.powershell" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.section.bracket.end.powershell" } }, patterns: [{ match: "(?!\\d+|\\.)(?:\\p{L}|\\p{N}|\\.)+", name: "storage.type.powershell" }, { include: "$self" }] }, unicodeEscape: { comment: "`u{xxxx} added in PowerShell 6.0", patterns: [{ match: "`u\\{(?:(?:10)?([0-9a-fA-F]){1,4}|0?\\g<1>{1,5})}", name: "constant.character.escape.powershell" }, { match: "`u(?:\\{[0-9a-fA-F]{,6}.)?", name: "invalid.character.escape.powershell" }] }, variable: { patterns: [{ captures: { 0: { name: "constant.language.powershell" }, 1: { name: "punctuation.definition.variable.powershell" } }, comment: "These are special constants.", match: "(\\$)(?i:(False|Null|True))\\b" }, { captures: { 0: { name: "support.constant.variable.powershell" }, 1: { name: "punctuation.definition.variable.powershell" }, 3: { name: "variable.other.member.powershell" } }, comment: "These are the other built-in constants.", match: "(\\$)(?i:(Error|ExecutionContext|Host|Home|PID|PsHome|PsVersionTable|ShellID))((?:\\.(?:\\p{L}|\\d|_)+)*\\b)?\\b" }, { captures: { 0: { name: "support.variable.automatic.powershell" }, 1: { name: "punctuation.definition.variable.powershell" }, 3: { name: "variable.other.member.powershell" } }, comment: "Automatic variables are not constants, but they are read-only. In monokai (default) color schema support.variable doesn't have color, so we use constant.", match: "(\\$)((?:[$^?])|(?i:_|Args|ConsoleFileName|Event|EventArgs|EventSubscriber|ForEach|Input|LastExitCode|Matches|MyInvocation|NestedPromptLevel|Profile|PSBoundParameters|PsCmdlet|PsCulture|PSDebugContext|PSItem|PSCommandPath|PSScriptRoot|PsUICulture|Pwd|Sender|SourceArgs|SourceEventArgs|StackTrace|Switch|This)\\b)((?:\\.(?:\\p{L}|\\d|_)+)*\\b)?" }, { captures: { 0: { name: "variable.language.powershell" }, 1: { name: "punctuation.definition.variable.powershell" }, 3: { name: "variable.other.member.powershell" } }, comment: "Style preference variables as language variables so that they stand out.", match: "(\\$)(?i:(ConfirmPreference|DebugPreference|ErrorActionPreference|ErrorView|FormatEnumerationLimit|InformationPreference|LogCommandHealthEvent|LogCommandLifecycleEvent|LogEngineHealthEvent|LogEngineLifecycleEvent|LogProviderHealthEvent|LogProviderLifecycleEvent|MaximumAliasCount|MaximumDriveCount|MaximumErrorCount|MaximumFunctionCount|MaximumHistoryCount|MaximumVariableCount|OFS|OutputEncoding|PSCulture|PSDebugContext|PSDefaultParameterValues|PSEmailServer|PSItem|PSModuleAutoLoadingPreference|PSModuleAutoloadingPreference|PSSenderInfo|PSSessionApplicationName|PSSessionConfigurationName|PSSessionOption|ProgressPreference|VerbosePreference|WarningPreference|WhatIfPreference))((?:\\.(?:\\p{L}|\\d|_)+)*\\b)?\\b" }, { captures: { 0: { name: "variable.other.readwrite.powershell" }, 1: { name: "punctuation.definition.variable.powershell" }, 2: { name: "storage.modifier.scope.powershell" }, 4: { name: "variable.other.member.powershell" } }, match: "(?i:(\\$|@)(global|local|private|script|using|workflow):((?:\\p{L}|\\d|_)+))((?:\\.(?:\\p{L}|\\d|_)+)*\\b)?" }, { captures: { 0: { name: "variable.other.readwrite.powershell" }, 1: { name: "punctuation.definition.variable.powershell" }, 2: { name: "punctuation.section.braces.begin.powershell" }, 3: { name: "storage.modifier.scope.powershell" }, 5: { name: "punctuation.section.braces.end.powershell" }, 6: { name: "variable.other.member.powershell" } }, match: "(?i:(\\$)(\\{)(global|local|private|script|using|workflow):([^}]*[^}`])(\\}))((?:\\.(?:\\p{L}|\\d|_)+)*\\b)?" }, { captures: { 0: { name: "variable.other.readwrite.powershell" }, 1: { name: "punctuation.definition.variable.powershell" }, 2: { name: "support.variable.drive.powershell" }, 4: { name: "variable.other.member.powershell" } }, match: "(?i:(\\$|@)((?:\\p{L}|\\d|_)+:)?((?:\\p{L}|\\d|_)+))((?:\\.(?:\\p{L}|\\d|_)+)*\\b)?" }, { captures: { 0: { name: "variable.other.readwrite.powershell" }, 1: { name: "punctuation.definition.variable.powershell" }, 2: { name: "punctuation.section.braces.begin.powershell" }, 3: { name: "support.variable.drive.powershell" }, 5: { name: "punctuation.section.braces.end.powershell" }, 6: { name: "variable.other.member.powershell" } }, match: "(?i:(\\$)(\\{)((?:\\p{L}|\\d|_)+:)?([^}]*[^}`])(\\}))((?:\\.(?:\\p{L}|\\d|_)+)*\\b)?" }] }, variableNoProperty: { patterns: [{ captures: { 0: { name: "constant.language.powershell" }, 1: { name: "punctuation.definition.variable.powershell" } }, comment: "These are special constants.", match: "(\\$)(?i:(False|Null|True))\\b" }, { captures: { 0: { name: "support.constant.variable.powershell" }, 1: { name: "punctuation.definition.variable.powershell" }, 3: { name: "variable.other.member.powershell" } }, comment: "These are the other built-in constants.", match: "(\\$)(?i:(Error|ExecutionContext|Host|Home|PID|PsHome|PsVersionTable|ShellID))\\b" }, { captures: { 0: { name: "support.variable.automatic.powershell" }, 1: { name: "punctuation.definition.variable.powershell" }, 3: { name: "variable.other.member.powershell" } }, comment: "Automatic variables are not constants, but they are read-only...", match: "(\\$)((?:[$^?])|(?i:_|Args|ConsoleFileName|Event|EventArgs|EventSubscriber|ForEach|Input|LastExitCode|Matches|MyInvocation|NestedPromptLevel|Profile|PSBoundParameters|PsCmdlet|PsCulture|PSDebugContext|PSItem|PSCommandPath|PSScriptRoot|PsUICulture|Pwd|Sender|SourceArgs|SourceEventArgs|StackTrace|Switch|This)\\b)" }, { captures: { 0: { name: "variable.language.powershell" }, 1: { name: "punctuation.definition.variable.powershell" }, 3: { name: "variable.other.member.powershell" } }, comment: "Style preference variables as language variables so that they stand out.", match: "(\\$)(?i:(ConfirmPreference|DebugPreference|ErrorActionPreference|ErrorView|FormatEnumerationLimit|InformationPreference|LogCommandHealthEvent|LogCommandLifecycleEvent|LogEngineHealthEvent|LogEngineLifecycleEvent|LogProviderHealthEvent|LogProviderLifecycleEvent|MaximumAliasCount|MaximumDriveCount|MaximumErrorCount|MaximumFunctionCount|MaximumHistoryCount|MaximumVariableCount|OFS|OutputEncoding|PSCulture|PSDebugContext|PSDefaultParameterValues|PSEmailServer|PSItem|PSModuleAutoLoadingPreference|PSModuleAutoloadingPreference|PSSenderInfo|PSSessionApplicationName|PSSessionConfigurationName|PSSessionOption|ProgressPreference|VerbosePreference|WarningPreference|WhatIfPreference))\\b" }, { captures: { 0: { name: "variable.other.readwrite.powershell" }, 1: { name: "punctuation.definition.variable.powershell" }, 2: { name: "storage.modifier.scope.powershell" }, 4: { name: "variable.other.member.powershell" } }, match: "(?i:(\\$)(global|local|private|script|using|workflow):((?:\\p{L}|\\d|_)+))" }, { captures: { 0: { name: "variable.other.readwrite.powershell" }, 1: { name: "punctuation.definition.variable.powershell" }, 2: { name: "storage.modifier.scope.powershell" }, 4: { name: "keyword.other.powershell" }, 5: { name: "variable.other.member.powershell" } }, match: "(?i:(\\$)(\\{)(global|local|private|script|using|workflow):([^}]*[^}`])(\\}))" }, { captures: { 0: { name: "variable.other.readwrite.powershell" }, 1: { name: "punctuation.definition.variable.powershell" }, 2: { name: "support.variable.drive.powershell" }, 4: { name: "variable.other.member.powershell" } }, match: "(?i:(\\$)((?:\\p{L}|\\d|_)+:)?((?:\\p{L}|\\d|_)+))" }, { captures: { 0: { name: "variable.other.readwrite.powershell" }, 1: { name: "punctuation.definition.variable.powershell" }, 2: { name: "punctuation.section.braces.begin" }, 3: { name: "support.variable.drive.powershell" }, 5: { name: "punctuation.section.braces.end" } }, match: "(?i:(\\$)(\\{)((?:\\p{L}|\\d|_)+:)?([^}]*[^}`])(\\}))" }] } }, scopeName: "source.powershell", aliases: ["ps", "ps1"] });
var qn = [
  En
];
const zn = Object.freeze({ displayName: "Prisma", fileTypes: ["prisma"], name: "prisma", patterns: [{ include: "#triple_comment" }, { include: "#double_comment" }, { include: "#model_block_definition" }, { include: "#config_block_definition" }, { include: "#enum_block_definition" }, { include: "#type_definition" }], repository: { array: { begin: "\\[", beginCaptures: { 1: { name: "punctuation.definition.tag.prisma" } }, end: "\\]", endCaptures: { 1: { name: "punctuation.definition.tag.prisma" } }, name: "source.prisma.array", patterns: [{ include: "#value" }] }, assignment: { patterns: [{ begin: "^\\s*(\\w+)\\s*(=)\\s*", beginCaptures: { 1: { name: "variable.other.assignment.prisma" }, 2: { name: "keyword.operator.terraform" } }, end: "\\n", patterns: [{ include: "#value" }, { include: "#double_comment_inline" }] }] }, attribute: { captures: { 1: { name: "entity.name.function.attribute.prisma" } }, match: "(@@?[\\w\\.]+)", name: "source.prisma.attribute" }, attribute_with_arguments: { begin: "(@@?[\\w\\.]+)(\\()", beginCaptures: { 1: { name: "entity.name.function.attribute.prisma" }, 2: { name: "punctuation.definition.tag.prisma" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.tag.prisma" } }, name: "source.prisma.attribute.with_arguments", patterns: [{ include: "#named_argument" }, { include: "#value" }] }, boolean: { match: "\\b(true|false)\\b", name: "constant.language.boolean.prisma" }, config_block_definition: { begin: "^\\s*(generator|datasource)\\s+([A-Za-z][\\w]*)\\s+({)", beginCaptures: { 1: { name: "storage.type.config.prisma" }, 2: { name: "entity.name.type.config.prisma" }, 3: { name: "punctuation.definition.tag.prisma" } }, end: "\\s*\\}", endCaptures: { 1: { name: "punctuation.definition.tag.prisma" } }, name: "source.prisma.embedded.source", patterns: [{ include: "#triple_comment" }, { include: "#double_comment" }, { include: "#assignment" }] }, double_comment: { begin: "//", end: "$\\n?", name: "comment.prisma" }, double_comment_inline: { match: "//[^\\n]*", name: "comment.prisma" }, double_quoted_string: { begin: '"', beginCaptures: { 0: { name: "string.quoted.double.start.prisma" } }, end: '"', endCaptures: { 0: { name: "string.quoted.double.end.prisma" } }, name: "unnamed", patterns: [{ include: "#string_interpolation" }, { match: "([\\w\\-\\/\\._\\\\%@:\\?=]+)", name: "string.quoted.double.prisma" }] }, enum_block_definition: { begin: "^\\s*(enum)\\s+([A-Za-z][\\w]*)\\s+({)", beginCaptures: { 1: { name: "storage.type.enum.prisma" }, 2: { name: "entity.name.type.enum.prisma" }, 3: { name: "punctuation.definition.tag.prisma" } }, end: "\\s*\\}", endCaptures: { 0: { name: "punctuation.definition.tag.prisma" } }, name: "source.prisma.embedded.source", patterns: [{ include: "#triple_comment" }, { include: "#double_comment" }, { include: "#enum_value_definition" }] }, enum_value_definition: { patterns: [{ captures: { 1: { name: "variable.other.assignment.prisma" } }, match: "^\\s*(\\w+)\\s*" }, { include: "#attribute_with_arguments" }, { include: "#attribute" }] }, field_definition: { name: "scalar.field", patterns: [{ captures: { 1: { name: "variable.other.assignment.prisma" }, 2: { name: "invalid.illegal.colon.prisma" }, 3: { name: "variable.language.relations.prisma" }, 4: { name: "support.type.primitive.prisma" }, 5: { name: "keyword.operator.list_type.prisma" }, 6: { name: "keyword.operator.optional_type.prisma" }, 7: { name: "invalid.illegal.required_type.prisma" } }, match: "^\\s*(\\w+)(\\s*:)?\\s+((?!(?:Int|BigInt|String|DateTime|Bytes|Decimal|Float|Json|Boolean)\\b)\\b\\w+)?(Int|BigInt|String|DateTime|Bytes|Decimal|Float|Json|Boolean)?(\\[\\])?(\\?)?(\\!)?" }, { include: "#attribute_with_arguments" }, { include: "#attribute" }] }, functional: { begin: "(\\w+)(\\()", beginCaptures: { 1: { name: "support.function.functional.prisma" }, 2: { name: "punctuation.definition.tag.prisma" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.tag.prisma" } }, name: "source.prisma.functional", patterns: [{ include: "#value" }] }, identifier: { patterns: [{ match: "\\b(\\w)+\\b", name: "support.constant.constant.prisma" }] }, literal: { name: "source.prisma.literal", patterns: [{ include: "#boolean" }, { include: "#number" }, { include: "#double_quoted_string" }, { include: "#identifier" }] }, map_key: { name: "source.prisma.key", patterns: [{ captures: { 1: { name: "variable.parameter.key.prisma" }, 2: { name: "punctuation.definition.separator.key-value.prisma" } }, match: "(\\w+)\\s*(:)\\s*" }] }, model_block_definition: { begin: "^\\s*(model|type|view)\\s+([A-Za-z][\\w]*)\\s*({)", beginCaptures: { 1: { name: "storage.type.model.prisma" }, 2: { name: "entity.name.type.model.prisma" }, 3: { name: "punctuation.definition.tag.prisma" } }, end: "\\s*\\}", endCaptures: { 0: { name: "punctuation.definition.tag.prisma" } }, name: "source.prisma.embedded.source", patterns: [{ include: "#triple_comment" }, { include: "#double_comment" }, { include: "#field_definition" }] }, named_argument: { name: "source.prisma.named_argument", patterns: [{ include: "#map_key" }, { include: "#value" }] }, number: { match: "((0(x|X)[0-9a-fA-F]*)|(\\+|-)?\\b(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)([LlFfUuDdg]|UL|ul)?\\b", name: "constant.numeric.prisma" }, string_interpolation: { patterns: [{ begin: "\\$\\{", beginCaptures: { 0: { name: "keyword.control.interpolation.start.prisma" } }, end: "\\s*\\}", endCaptures: { 0: { name: "keyword.control.interpolation.end.prisma" } }, name: "source.tag.embedded.source.prisma", patterns: [{ include: "#value" }] }] }, triple_comment: { begin: "///", end: "$\\n?", name: "comment.prisma" }, type_definition: { patterns: [{ captures: { 1: { name: "storage.type.type.prisma" }, 2: { name: "entity.name.type.type.prisma" }, 3: { name: "support.type.primitive.prisma" } }, match: "^\\s*(type)\\s+(\\w+)\\s*=\\s*(\\w+)" }, { include: "#attribute_with_arguments" }, { include: "#attribute" }] }, value: { name: "source.prisma.value", patterns: [{ include: "#array" }, { include: "#functional" }, { include: "#literal" }] } }, scopeName: "source.prisma" });
var Sn = [
  zn
];
const Nn = Object.freeze({ displayName: "Protocol Buffer 3", fileTypes: ["proto"], name: "proto", patterns: [{ include: "#comments" }, { include: "#syntax" }, { include: "#package" }, { include: "#import" }, { include: "#optionStmt" }, { include: "#message" }, { include: "#enum" }, { include: "#service" }], repository: { comments: { patterns: [{ begin: "/\\*", end: "\\*/", name: "comment.block.proto" }, { begin: "//", end: "$\\n?", name: "comment.line.double-slash.proto" }] }, constants: { match: "\\b(true|false|max|[A-Z_]+)\\b", name: "constant.language.proto" }, enum: { begin: "(enum)(\\s+)([A-Za-z][A-Za-z0-9_]*)(\\s*)(\\{)?", beginCaptures: { 1: { name: "keyword.other.proto" }, 3: { name: "entity.name.class.proto" } }, end: "\\}", patterns: [{ include: "#reserved" }, { include: "#optionStmt" }, { include: "#comments" }, { begin: "([A-Za-z][A-Za-z0-9_]*)\\s*(=)\\s*(0[xX][0-9a-fA-F]+|[0-9]+)", beginCaptures: { 1: { name: "variable.other.proto" }, 2: { name: "keyword.operator.assignment.proto" }, 3: { name: "constant.numeric.proto" } }, end: "(;)", endCaptures: { 1: { name: "punctuation.terminator.proto" } }, patterns: [{ include: "#fieldOptions" }] }] }, field: { begin: "\\s*(optional|repeated|required)?\\s*\\b([\\w.]+)\\s+(\\w+)\\s*(=)\\s*(0[xX][0-9a-fA-F]+|[0-9]+)", beginCaptures: { 1: { name: "storage.modifier.proto" }, 2: { name: "storage.type.proto" }, 3: { name: "variable.other.proto" }, 4: { name: "keyword.operator.assignment.proto" }, 5: { name: "constant.numeric.proto" } }, end: "(;)", endCaptures: { 1: { name: "punctuation.terminator.proto" } }, patterns: [{ include: "#fieldOptions" }] }, fieldOptions: { begin: "\\[", end: "\\]", patterns: [{ include: "#constants" }, { include: "#number" }, { include: "#string" }, { include: "#subMsgOption" }, { include: "#optionName" }] }, ident: { match: "[A-Za-z][A-Za-z0-9_]*", name: "entity.name.class.proto" }, import: { captures: { 1: { name: "keyword.other.proto" }, 2: { name: "keyword.other.proto" }, 3: { name: "string.quoted.double.proto.import" }, 4: { name: "punctuation.terminator.proto" } }, match: '\\s*(import)\\s+(weak|public)?\\s*("[^"]+")\\s*(;)' }, kv: { begin: "(\\w+)\\s*(:)", beginCaptures: { 1: { name: "keyword.other.proto" }, 2: { name: "punctuation.separator.key-value.proto" } }, end: "(;)|,|(?=[}/_a-zA-Z])", endCaptures: { 1: { name: "punctuation.terminator.proto" } }, patterns: [{ include: "#constants" }, { include: "#number" }, { include: "#string" }, { include: "#subMsgOption" }] }, mapfield: { begin: "\\s*(map)\\s*(<)\\s*([\\w.]+)\\s*,\\s*([\\w.]+)\\s*(>)\\s+(\\w+)\\s*(=)\\s*(\\d+)", beginCaptures: { 1: { name: "storage.type.proto" }, 2: { name: "punctuation.definition.typeparameters.begin.proto" }, 3: { name: "storage.type.proto" }, 4: { name: "storage.type.proto" }, 5: { name: "punctuation.definition.typeparameters.end.proto" }, 6: { name: "variable.other.proto" }, 7: { name: "keyword.operator.assignment.proto" }, 8: { name: "constant.numeric.proto" } }, end: "(;)", endCaptures: { 1: { name: "punctuation.terminator.proto" } }, patterns: [{ include: "#fieldOptions" }] }, message: { begin: "(message|extend)(\\s+)([A-Za-z_][A-Za-z0-9_.]*)(\\s*)(\\{)?", beginCaptures: { 1: { name: "keyword.other.proto" }, 3: { name: "entity.name.class.message.proto" } }, end: "\\}", patterns: [{ include: "#reserved" }, { include: "$self" }, { include: "#enum" }, { include: "#optionStmt" }, { include: "#comments" }, { include: "#oneof" }, { include: "#field" }, { include: "#mapfield" }] }, method: { begin: "(rpc)\\s+([A-Za-z][A-Za-z0-9_]*)", beginCaptures: { 1: { name: "keyword.other.proto" }, 2: { name: "entity.name.function" } }, end: "\\}|(;)", endCaptures: { 1: { name: "punctuation.terminator.proto" } }, patterns: [{ include: "#comments" }, { include: "#optionStmt" }, { include: "#rpcKeywords" }, { include: "#ident" }] }, number: { match: "\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)\\b", name: "constant.numeric.proto" }, oneof: { begin: "(oneof)\\s+([A-Za-z][A-Za-z0-9_]*)\\s*\\{?", beginCaptures: { 1: { name: "keyword.other.proto" }, 2: { name: "variable.other.proto" } }, end: "\\}", patterns: [{ include: "#optionStmt" }, { include: "#comments" }, { include: "#field" }] }, optionName: { captures: { 1: { name: "support.other.proto" }, 2: { name: "support.other.proto" }, 3: { name: "support.other.proto" } }, match: "(\\w+|\\(\\w+(\\.\\w+)*\\))(\\.\\w+)*" }, optionStmt: { begin: "(option)\\s+(\\w+|\\(\\w+(\\.\\w+)*\\))(\\.\\w+)*\\s*(=)", beginCaptures: { 1: { name: "keyword.other.proto" }, 2: { name: "support.other.proto" }, 3: { name: "support.other.proto" }, 4: { name: "support.other.proto" }, 5: { name: "keyword.operator.assignment.proto" } }, end: "(;)", endCaptures: { 1: { name: "punctuation.terminator.proto" } }, patterns: [{ include: "#constants" }, { include: "#number" }, { include: "#string" }, { include: "#subMsgOption" }] }, package: { captures: { 1: { name: "keyword.other.proto" }, 2: { name: "string.unquoted.proto.package" }, 3: { name: "punctuation.terminator.proto" } }, match: "\\s*(package)\\s+([\\w.]+)\\s*(;)" }, reserved: { begin: "(reserved)\\s+", beginCaptures: { 1: { name: "keyword.other.proto" } }, end: "(;)", endCaptures: { 1: { name: "punctuation.terminator.proto" } }, patterns: [{ captures: { 1: { name: "constant.numeric.proto" }, 3: { name: "keyword.other.proto" }, 4: { name: "constant.numeric.proto" } }, match: "(\\d+)(\\s+(to)\\s+(\\d+))?" }, { include: "#string" }] }, rpcKeywords: { match: "\\b(stream|returns)\\b", name: "keyword.other.proto" }, service: { begin: "(service)\\s+([A-Za-z][A-Za-z0-9_.]*)\\s*\\{?", beginCaptures: { 1: { name: "keyword.other.proto" }, 2: { name: "entity.name.class.message.proto" } }, end: "\\}", patterns: [{ include: "#comments" }, { include: "#optionStmt" }, { include: "#method" }] }, storagetypes: { match: "\\b(double|float|int32|int64|uint32|uint64|sint32|sint64|fixed32|fixed64|sfixed32|sfixed64|bool|string|bytes)\\b", name: "storage.type.proto" }, string: { match: `('([^']|\\')*')|("([^"]|\\")*")`, name: "string.quoted.double.proto" }, subMsgOption: { begin: "\\{", end: "\\}", patterns: [{ include: "#kv" }, { include: "#comments" }] }, syntax: { captures: { 1: { name: "keyword.other.proto" }, 2: { name: "keyword.operator.assignment.proto" }, 3: { name: "string.quoted.double.proto.syntax" }, 4: { name: "punctuation.terminator.proto" } }, match: '\\s*(syntax)\\s*(=)\\s*("proto[23]")\\s*(;)' } }, scopeName: "source.proto", aliases: ["protobuf"] });
var Ln = [
  Nn
];
const Tn = Object.freeze({ displayName: "CoffeeScript", name: "coffee", patterns: [{ include: "#jsx" }, { captures: { 1: { name: "keyword.operator.new.coffee" }, 2: { name: "storage.type.class.coffee" }, 3: { name: "entity.name.type.instance.coffee" }, 4: { name: "entity.name.type.instance.coffee" } }, match: "(new)\\s+(?:(?:(class)\\s+(\\w+(?:\\.\\w*)*)?)|(\\w+(?:\\.\\w*)*))", name: "meta.class.instance.constructor.coffee" }, { begin: "'''", beginCaptures: { 0: { name: "punctuation.definition.string.begin.coffee" } }, end: "'''", endCaptures: { 0: { name: "punctuation.definition.string.end.coffee" } }, name: "string.quoted.single.heredoc.coffee", patterns: [{ captures: { 1: { name: "punctuation.definition.escape.backslash.coffee" } }, match: "(\\\\).", name: "constant.character.escape.backslash.coffee" }] }, { begin: '"""', beginCaptures: { 0: { name: "punctuation.definition.string.begin.coffee" } }, end: '"""', endCaptures: { 0: { name: "punctuation.definition.string.end.coffee" } }, name: "string.quoted.double.heredoc.coffee", patterns: [{ captures: { 1: { name: "punctuation.definition.escape.backslash.coffee" } }, match: "(\\\\).", name: "constant.character.escape.backslash.coffee" }, { include: "#interpolated_coffee" }] }, { captures: { 1: { name: "punctuation.definition.string.begin.coffee" }, 2: { name: "source.js.embedded.coffee", patterns: [{ include: "source.js" }] }, 3: { name: "punctuation.definition.string.end.coffee" } }, match: "(`)(.*)(`)", name: "string.quoted.script.coffee" }, { begin: "(?<!#)###(?!#)", beginCaptures: { 0: { name: "punctuation.definition.comment.coffee" } }, end: "###", endCaptures: { 0: { name: "punctuation.definition.comment.coffee" } }, name: "comment.block.coffee", patterns: [{ match: "(?<=^|\\s)@\\w*(?=\\s)", name: "storage.type.annotation.coffee" }] }, { begin: "#", beginCaptures: { 0: { name: "punctuation.definition.comment.coffee" } }, end: "$", name: "comment.line.number-sign.coffee" }, { begin: "///", beginCaptures: { 0: { name: "punctuation.definition.string.begin.coffee" } }, end: "(///)[gimuy]*", endCaptures: { 1: { name: "punctuation.definition.string.end.coffee" } }, name: "string.regexp.multiline.coffee", patterns: [{ include: "#heregexp" }] }, { begin: "(?<![\\w$])(/)(?=(?![/*+?])(.+)(/)[gimuy]*(?!\\s*[\\w$/(]))", beginCaptures: { 1: { name: "punctuation.definition.string.begin.coffee" } }, end: "(/)[gimuy]*(?!\\s*[\\w$/(])", endCaptures: { 1: { name: "punctuation.definition.string.end.coffee" } }, name: "string.regexp.coffee", patterns: [{ include: "source.js.regexp" }] }, { match: "\\b(?<![\\.\\$])(break|by|catch|continue|else|finally|for|in|of|if|return|switch|then|throw|try|unless|when|while|until|loop|do|export|import|default|from|as|yield|async|await|(?<=for)\\s+own)(?!\\s*:)\\b", name: "keyword.control.coffee" }, { match: "\\b(?<![\\.\\$])(delete|instanceof|new|typeof)(?!\\s*:)\\b", name: "keyword.operator.$1.coffee" }, { match: "\\b(?<![\\.\\$])(case|function|var|void|with|const|let|enum|native|__hasProp|__extends|__slice|__bind|__indexOf|implements|interface|package|private|protected|public|static)(?!\\s*:)\\b", name: "keyword.reserved.coffee" }, { begin: `(?x)
(?<=\\s|^)((@)?[a-zA-Z_$][\\w$]*)
\\s*([:=])\\s*
(?=(\\([^\\(\\)]*\\)\\s*)?[=-]>)`, beginCaptures: { 1: { name: "entity.name.function.coffee" }, 2: { name: "variable.other.readwrite.instance.coffee" }, 3: { name: "keyword.operator.assignment.coffee" } }, end: "[=-]>", endCaptures: { 0: { name: "storage.type.function.coffee" } }, name: "meta.function.coffee", patterns: [{ include: "#function_params" }] }, { begin: `(?x)
(?<=\\s|^)(?:((')([^']*?)('))|((")([^"]*?)(")))
\\s*([:=])\\s*
(?=(\\([^\\(\\)]*\\)\\s*)?[=-]>)`, beginCaptures: { 1: { name: "string.quoted.single.coffee" }, 2: { name: "punctuation.definition.string.begin.coffee" }, 3: { name: "entity.name.function.coffee" }, 4: { name: "punctuation.definition.string.end.coffee" }, 5: { name: "string.quoted.double.coffee" }, 6: { name: "punctuation.definition.string.begin.coffee" }, 7: { name: "entity.name.function.coffee" }, 8: { name: "punctuation.definition.string.end.coffee" }, 9: { name: "keyword.operator.assignment.coffee" } }, end: "[=-]>", endCaptures: { 0: { name: "storage.type.function.coffee" } }, name: "meta.function.coffee", patterns: [{ include: "#function_params" }] }, { begin: "(?=(\\([^\\(\\)]*\\)\\s*)?[=-]>)", end: "[=-]>", endCaptures: { 0: { name: "storage.type.function.coffee" } }, name: "meta.function.inline.coffee", patterns: [{ include: "#function_params" }] }, { begin: `(?<=\\s|^)({)(?=[^'"#]+?}[\\s\\]}]*=)`, beginCaptures: { 1: { name: "punctuation.definition.destructuring.begin.bracket.curly.coffee" } }, end: "}", endCaptures: { 0: { name: "punctuation.definition.destructuring.end.bracket.curly.coffee" } }, name: "meta.variable.assignment.destructured.object.coffee", patterns: [{ include: "$self" }, { match: "[a-zA-Z$_]\\w*", name: "variable.assignment.coffee" }] }, { begin: `(?<=\\s|^)(\\[)(?=[^'"#]+?\\][\\s\\]}]*=)`, beginCaptures: { 1: { name: "punctuation.definition.destructuring.begin.bracket.square.coffee" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.destructuring.end.bracket.square.coffee" } }, name: "meta.variable.assignment.destructured.array.coffee", patterns: [{ include: "$self" }, { match: "[a-zA-Z$_]\\w*", name: "variable.assignment.coffee" }] }, { match: "\\b(?<!\\.|::)(true|on|yes)(?!\\s*[:=][^=])\\b", name: "constant.language.boolean.true.coffee" }, { match: "\\b(?<!\\.|::)(false|off|no)(?!\\s*[:=][^=])\\b", name: "constant.language.boolean.false.coffee" }, { match: "\\b(?<!\\.|::)null(?!\\s*[:=][^=])\\b", name: "constant.language.null.coffee" }, { match: "\\b(?<!\\.|::)extends(?!\\s*[:=])\\b", name: "variable.language.coffee" }, { match: "(?<!\\.)\\b(?<!\\$)(super|this|arguments)(?!\\s*[:=][^=]|\\$)\\b", name: "variable.language.$1.coffee" }, { captures: { 1: { name: "storage.type.class.coffee" }, 2: { name: "keyword.control.inheritance.coffee" }, 3: { name: "entity.other.inherited-class.coffee" } }, match: "(?<=\\s|^|\\[|\\()(class)\\s+(extends)\\s+(@?[a-zA-Z\\$\\._][\\w\\.]*)", name: "meta.class.coffee" }, { captures: { 1: { name: "storage.type.class.coffee" }, 2: { name: "entity.name.type.class.coffee" }, 3: { name: "keyword.control.inheritance.coffee" }, 4: { name: "entity.other.inherited-class.coffee" } }, match: "(?<=\\s|^|\\[|\\()(class\\b)\\s+(@?[a-zA-Z\\$_][\\w\\.]*)?(?:\\s+(extends)\\s+(@?[a-zA-Z\\$\\._][\\w\\.]*))?", name: "meta.class.coffee" }, { match: "\\b(debugger|\\\\)\\b", name: "keyword.other.coffee" }, { match: "\\b(Array|ArrayBuffer|Blob|Boolean|Date|document|Function|Int(8|16|32|64)Array|Math|Map|Number|Object|Proxy|RegExp|Set|String|WeakMap|window|Uint(8|16|32|64)Array|XMLHttpRequest)\\b", name: "support.class.coffee" }, { match: "\\b(console)\\b", name: "entity.name.type.object.coffee" }, { match: "((?<=console\\.)(debug|warn|info|log|error|time|timeEnd|assert))\\b", name: "support.function.console.coffee" }, { match: "((?<=\\.)(apply|call|concat|every|filter|forEach|from|hasOwnProperty|indexOf|isPrototypeOf|join|lastIndexOf|map|of|pop|propertyIsEnumerable|push|reduce(Right)?|reverse|shift|slice|some|sort|splice|to(Locale)?String|unshift|valueOf))\\b", name: "support.function.method.array.coffee" }, { match: "((?<=Array\\.)(isArray))\\b", name: "support.function.static.array.coffee" }, { match: "((?<=Object\\.)(create|definePropert(ies|y)|freeze|getOwnProperty(Descriptors?|Names)|getProperty(Descriptor|Names)|getPrototypeOf|is(Extensible|Frozen|Sealed)?|isnt|keys|preventExtensions|seal))\\b", name: "support.function.static.object.coffee" }, { match: "((?<=Math\\.)(abs|acos|acosh|asin|asinh|atan|atan2|atanh|ceil|cos|cosh|exp|expm1|floor|hypot|log|log10|log1p|log2|max|min|pow|random|round|sign|sin|sinh|sqrt|tan|tanh|trunc))\\b", name: "support.function.static.math.coffee" }, { match: "((?<=Number\\.)(is(Finite|Integer|NaN)|toInteger))\\b", name: "support.function.static.number.coffee" }, { match: "(?<!\\.)\\b(module|exports|__filename|__dirname|global|process)(?!\\s*:)\\b", name: "support.variable.coffee" }, { match: "\\b(Infinity|NaN|undefined)\\b", name: "constant.language.coffee" }, { include: "#operators" }, { include: "#method_calls" }, { include: "#function_calls" }, { include: "#numbers" }, { include: "#objects" }, { include: "#properties" }, { match: "::", name: "keyword.operator.prototype.coffee" }, { match: "(?<!\\$)\\b[0-9]+[\\w$]*", name: "invalid.illegal.identifier.coffee" }, { match: ";", name: "punctuation.terminator.statement.coffee" }, { match: ",", name: "punctuation.separator.delimiter.coffee" }, { begin: "{", beginCaptures: { 0: { name: "meta.brace.curly.coffee" } }, end: "}", endCaptures: { 0: { name: "meta.brace.curly.coffee" } }, patterns: [{ include: "$self" }] }, { begin: "\\[", beginCaptures: { 0: { name: "punctuation.definition.array.begin.bracket.square.coffee" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.array.end.bracket.square.coffee" } }, patterns: [{ match: "(?<!\\.)\\.{3}", name: "keyword.operator.slice.exclusive.coffee" }, { match: "(?<!\\.)\\.{2}", name: "keyword.operator.slice.inclusive.coffee" }, { include: "$self" }] }, { begin: "\\(", beginCaptures: { 0: { name: "meta.brace.round.coffee" } }, end: "\\)", endCaptures: { 0: { name: "meta.brace.round.coffee" } }, patterns: [{ include: "$self" }] }, { include: "#instance_variable" }, { include: "#single_quoted_string" }, { include: "#double_quoted_string" }], repository: { arguments: { patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.arguments.begin.bracket.round.coffee" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.arguments.end.bracket.round.coffee" } }, name: "meta.arguments.coffee", patterns: [{ include: "$self" }] }, { begin: `(?=(@|@?[\\w$]+|[=-]>|\\-\\d|\\[|{|"|'))`, end: "(?=\\s*(?<![\\w$])(of|in|then|is|isnt|and|or|for|else|when|if|unless|by|instanceof)(?![\\w$]))|(?=\\s*(}|\\]|\\)|#|$))", name: "meta.arguments.coffee", patterns: [{ include: "$self" }] }] }, double_quoted_string: { patterns: [{ begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.coffee" } }, end: '"', endCaptures: { 0: { name: "punctuation.definition.string.end.coffee" } }, name: "string.quoted.double.coffee", patterns: [{ captures: { 1: { name: "punctuation.definition.escape.backslash.coffee" } }, match: "(\\\\)(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)", name: "constant.character.escape.backslash.coffee" }, { include: "#interpolated_coffee" }] }] }, embedded_comment: { patterns: [{ captures: { 1: { name: "punctuation.definition.comment.coffee" } }, match: "(?<!\\\\)(#).*$\\n?", name: "comment.line.number-sign.coffee" }] }, function_calls: { patterns: [{ begin: "(@)?([\\w$]+)(?=\\()", beginCaptures: { 1: { name: "variable.other.readwrite.instance.coffee" }, 2: { patterns: [{ include: "#function_names" }] } }, end: "(?<=\\))", name: "meta.function-call.coffee", patterns: [{ include: "#arguments" }] }, { begin: `(?x)
(@)?([\\w$]+)
\\s*
(?=\\s+(?!(?<![\\w$])(of|in|then|is|isnt|and|or|for|else|when|if|unless|by|instanceof)(?![\\w$]))(?=(@?[\\w$]+|[=-]>|\\-\\d|\\[|{|"|')))`, beginCaptures: { 1: { name: "variable.other.readwrite.instance.coffee" }, 2: { patterns: [{ include: "#function_names" }] } }, end: "(?=\\s*(?<![\\w$])(of|in|then|is|isnt|and|or|for|else|when|if|unless|by|instanceof)(?![\\w$]))|(?=\\s*(}|\\]|\\)|#|$))", name: "meta.function-call.coffee", patterns: [{ include: "#arguments" }] }] }, function_names: { patterns: [{ match: `(?x)
\\b(isNaN|isFinite|eval|uneval|parseInt|parseFloat|decodeURI|
decodeURIComponent|encodeURI|encodeURIComponent|escape|unescape|
require|set(Interval|Timeout)|clear(Interval|Timeout))\\b`, name: "support.function.coffee" }, { match: "[a-zA-Z_$][\\w$]*", name: "entity.name.function.coffee" }, { match: "\\d[\\w$]*", name: "invalid.illegal.identifier.coffee" }] }, function_params: { patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.parameters.begin.bracket.round.coffee" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.parameters.end.bracket.round.coffee" } }, name: "meta.parameters.coffee", patterns: [{ captures: { 1: { name: "variable.parameter.function.coffee" }, 2: { name: "keyword.operator.splat.coffee" } }, match: "([a-zA-Z_$][\\w$]*)(\\.\\.\\.)?" }, { captures: { 1: { name: "variable.parameter.function.readwrite.instance.coffee" }, 2: { name: "keyword.operator.splat.coffee" } }, match: "(@(?:[a-zA-Z_$][\\w$]*)?)(\\.\\.\\.)?" }, { include: "$self" }] }] }, heregexp: { patterns: [{ match: "\\\\[bB]|\\^|\\$", name: "keyword.control.anchor.regexp" }, { match: "\\\\[1-9]\\d*", name: "keyword.other.back-reference.regexp" }, { match: "[?+*]|\\{(\\d+,\\d+|\\d+,|,\\d+|\\d+)\\}\\??", name: "keyword.operator.quantifier.regexp" }, { match: "\\|", name: "keyword.operator.or.regexp" }, { begin: "(\\()((\\?=)|(\\?!))", beginCaptures: { 1: { name: "punctuation.definition.group.regexp" }, 3: { name: "meta.assertion.look-ahead.regexp" }, 4: { name: "meta.assertion.negative-look-ahead.regexp" } }, end: "(\\))", endCaptures: { 1: { name: "punctuation.definition.group.regexp" } }, name: "meta.group.assertion.regexp", patterns: [{ include: "#heregexp" }] }, { begin: "\\((\\?:)?", beginCaptures: { 0: { name: "punctuation.definition.group.regexp" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.regexp" } }, name: "meta.group.regexp", patterns: [{ include: "#heregexp" }] }, { begin: "(\\[)(\\^)?", beginCaptures: { 1: { name: "punctuation.definition.character-class.regexp" }, 2: { name: "keyword.operator.negation.regexp" } }, end: "(\\])", endCaptures: { 1: { name: "punctuation.definition.character-class.regexp" } }, name: "constant.other.character-class.set.regexp", patterns: [{ captures: { 1: { name: "constant.character.numeric.regexp" }, 2: { name: "constant.character.control.regexp" }, 3: { name: "constant.character.escape.backslash.regexp" }, 4: { name: "constant.character.numeric.regexp" }, 5: { name: "constant.character.control.regexp" }, 6: { name: "constant.character.escape.backslash.regexp" } }, match: "(?:.|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))\\-(?:[^\\]\\\\]|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))", name: "constant.other.character-class.range.regexp" }, { include: "#regex-character-class" }] }, { include: "#regex-character-class" }, { include: "#interpolated_coffee" }, { include: "#embedded_comment" }] }, instance_variable: { patterns: [{ match: "(@)([a-zA-Z_\\$]\\w*)?", name: "variable.other.readwrite.instance.coffee" }] }, interpolated_coffee: { patterns: [{ begin: "\\#\\{", captures: { 0: { name: "punctuation.section.embedded.coffee" } }, end: "\\}", name: "source.coffee.embedded.source", patterns: [{ include: "$self" }] }] }, jsx: { patterns: [{ include: "#jsx-tag" }, { include: "#jsx-end-tag" }] }, "jsx-attribute": { patterns: [{ captures: { 1: { name: "entity.other.attribute-name.coffee" }, 2: { name: "keyword.operator.assignment.coffee" } }, match: "(?:^|\\s+)([-\\w.]+)\\s*(=)" }, { include: "#double_quoted_string" }, { include: "#single_quoted_string" }, { include: "#jsx-expression" }] }, "jsx-end-tag": { patterns: [{ begin: "(</)([-\\w\\.]+)", beginCaptures: { 1: { name: "punctuation.definition.tag.coffee" }, 2: { name: "entity.name.tag.coffee" } }, end: "(/?>)", name: "meta.tag.coffee" }] }, "jsx-expression": { begin: "{", beginCaptures: { 0: { name: "meta.brace.curly.coffee" } }, end: "}", endCaptures: { 0: { name: "meta.brace.curly.coffee" } }, patterns: [{ include: "#double_quoted_string" }, { include: "$self" }] }, "jsx-tag": { patterns: [{ begin: "(<)([-\\w\\.]+)", beginCaptures: { 1: { name: "punctuation.definition.tag.coffee" }, 2: { name: "entity.name.tag.coffee" } }, end: "(/?>)", name: "meta.tag.coffee", patterns: [{ include: "#jsx-attribute" }] }] }, method_calls: { patterns: [{ begin: "(?:(\\.)|(::))\\s*([\\w$]+)\\s*(?=\\()", beginCaptures: { 1: { name: "punctuation.separator.method.period.coffee" }, 2: { name: "keyword.operator.prototype.coffee" }, 3: { patterns: [{ include: "#method_names" }] } }, end: "(?<=\\))", name: "meta.method-call.coffee", patterns: [{ include: "#arguments" }] }, { begin: `(?:(\\.)|(::))\\s*([\\w$]+)\\s*(?=\\s+(?!(?<![\\w$])(of|in|then|is|isnt|and|or|for|else|when|if|unless|by|instanceof)(?![\\w$]))(?=(@|@?[\\w$]+|[=-]>|\\-\\d|\\[|{|"|')))`, beginCaptures: { 1: { name: "punctuation.separator.method.period.coffee" }, 2: { name: "keyword.operator.prototype.coffee" }, 3: { patterns: [{ include: "#method_names" }] } }, end: "(?=\\s*(?<![\\w$])(of|in|then|is|isnt|and|or|for|else|when|if|unless|by|instanceof)(?![\\w$]))|(?=\\s*(}|\\]|\\)|#|$))", name: "meta.method-call.coffee", patterns: [{ include: "#arguments" }] }] }, method_names: { patterns: [{ match: `(?x)
\\bon(Rowsinserted|Rowsdelete|Rowenter|Rowexit|Resize|Resizestart|Resizeend|Reset|
Readystatechange|Mouseout|Mouseover|Mousedown|Mouseup|Mousemove|
Before(cut|deactivate|unload|update|paste|print|editfocus|activate)|
Blur|Scrolltop|Submit|Select|Selectstart|Selectionchange|Hover|Help|
Change|Contextmenu|Controlselect|Cut|Cellchange|Clock|Close|Deactivate|
Datasetchanged|Datasetcomplete|Dataavailable|Drop|Drag|Dragstart|Dragover|
Dragdrop|Dragenter|Dragend|Dragleave|Dblclick|Unload|Paste|Propertychange|Error|
Errorupdate|Keydown|Keyup|Keypress|Focus|Load|Activate|Afterupdate|Afterprint|Abort)\\b`, name: "support.function.event-handler.coffee" }, { match: `(?x)
\\b(shift|showModelessDialog|showModalDialog|showHelp|scroll|scrollX|scrollByPages|
scrollByLines|scrollY|scrollTo|stop|strike|sizeToContent|sidebar|signText|sort|
sup|sub|substr|substring|splice|split|send|set(Milliseconds|Seconds|Minutes|Hours|
Month|Year|FullYear|Date|UTC(Milliseconds|Seconds|Minutes|Hours|Month|FullYear|Date)|
Time|Hotkeys|Cursor|ZOptions|Active|Resizable|RequestHeader)|search|slice|
savePreferences|small|home|handleEvent|navigate|char|charCodeAt|charAt|concat|
contextual|confirm|compile|clear|captureEvents|call|createStyleSheet|createPopup|
createEventObject|to(GMTString|UTCString|String|Source|UpperCase|LowerCase|LocaleString)|
test|taint|taintEnabled|indexOf|italics|disableExternalCapture|dump|detachEvent|unshift|
untaint|unwatch|updateCommands|join|javaEnabled|pop|push|plugins.refresh|paddings|parse|
print|prompt|preference|enableExternalCapture|exec|execScript|valueOf|UTC|find|file|
fileModifiedDate|fileSize|fileCreatedDate|fileUpdatedDate|fixed|fontsize|fontcolor|
forward|fromCharCode|watch|link|load|lastIndexOf|anchor|attachEvent|atob|apply|alert|
abort|routeEvents|resize|resizeBy|resizeTo|recalc|returnValue|replace|reverse|reload|
releaseCapture|releaseEvents|go|get(Milliseconds|Seconds|Minutes|Hours|Month|Day|Year|FullYear|
Time|Date|TimezoneOffset|UTC(Milliseconds|Seconds|Minutes|Hours|Day|Month|FullYear|Date)|
Attention|Selection|ResponseHeader|AllResponseHeaders)|moveBy|moveBelow|moveTo|
moveToAbsolute|moveAbove|mergeAttributes|match|margins|btoa|big|bold|borderWidths|blink|back)\\b`, name: "support.function.coffee" }, { match: `(?x)
\\b(acceptNode|add|addEventListener|addTextTrack|adoptNode|after|animate|append|
appendChild|appendData|before|blur|canPlayType|captureStream|
caretPositionFromPoint|caretRangeFromPoint|checkValidity|clear|click|
cloneContents|cloneNode|cloneRange|close|closest|collapse|
compareBoundaryPoints|compareDocumentPosition|comparePoint|contains|
convertPointFromNode|convertQuadFromNode|convertRectFromNode|createAttribute|
createAttributeNS|createCaption|createCDATASection|createComment|
createContextualFragment|createDocument|createDocumentFragment|
createDocumentType|createElement|createElementNS|createEntityReference|
createEvent|createExpression|createHTMLDocument|createNodeIterator|
createNSResolver|createProcessingInstruction|createRange|createShadowRoot|
createTBody|createTextNode|createTFoot|createTHead|createTreeWalker|delete|
deleteCaption|deleteCell|deleteContents|deleteData|deleteRow|deleteTFoot|
deleteTHead|detach|disconnect|dispatchEvent|elementFromPoint|elementsFromPoint|
enableStyleSheetsForSet|entries|evaluate|execCommand|exitFullscreen|
exitPointerLock|expand|extractContents|fastSeek|firstChild|focus|forEach|get|
getAll|getAnimations|getAttribute|getAttributeNames|getAttributeNode|
getAttributeNodeNS|getAttributeNS|getBoundingClientRect|getBoxQuads|
getClientRects|getContext|getDestinationInsertionPoints|getElementById|
getElementsByClassName|getElementsByName|getElementsByTagName|
getElementsByTagNameNS|getItem|getNamedItem|getSelection|getStartDate|
getVideoPlaybackQuality|has|hasAttribute|hasAttributeNS|hasAttributes|
hasChildNodes|hasFeature|hasFocus|importNode|initEvent|insertAdjacentElement|
insertAdjacentHTML|insertAdjacentText|insertBefore|insertCell|insertData|
insertNode|insertRow|intersectsNode|isDefaultNamespace|isEqualNode|
isPointInRange|isSameNode|item|key|keys|lastChild|load|lookupNamespaceURI|
lookupPrefix|matches|move|moveAttribute|moveAttributeNode|moveChild|
moveNamedItem|namedItem|nextNode|nextSibling|normalize|observe|open|
parentNode|pause|play|postMessage|prepend|preventDefault|previousNode|
previousSibling|probablySupportsContext|queryCommandEnabled|
queryCommandIndeterm|queryCommandState|queryCommandSupported|queryCommandValue|
querySelector|querySelectorAll|registerContentHandler|registerElement|
registerProtocolHandler|releaseCapture|releaseEvents|remove|removeAttribute|
removeAttributeNode|removeAttributeNS|removeChild|removeEventListener|
removeItem|replace|replaceChild|replaceData|replaceWith|reportValidity|
requestFullscreen|requestPointerLock|reset|scroll|scrollBy|scrollIntoView|
scrollTo|seekToNextFrame|select|selectNode|selectNodeContents|set|setAttribute|
setAttributeNode|setAttributeNodeNS|setAttributeNS|setCapture|
setCustomValidity|setEnd|setEndAfter|setEndBefore|setItem|setNamedItem|
setRangeText|setSelectionRange|setSinkId|setStart|setStartAfter|setStartBefore|
slice|splitText|stepDown|stepUp|stopImmediatePropagation|stopPropagation|
submit|substringData|supports|surroundContents|takeRecords|terminate|toBlob|
toDataURL|toggle|toString|values|write|writeln)\\b`, name: "support.function.dom.coffee" }, { match: "[a-zA-Z_$][\\w$]*", name: "entity.name.function.coffee" }, { match: "\\d[\\w$]*", name: "invalid.illegal.identifier.coffee" }] }, numbers: { patterns: [{ match: "\\b(?<!\\$)0(x|X)[0-9a-fA-F]+\\b(?!\\$)", name: "constant.numeric.hex.coffee" }, { match: "\\b(?<!\\$)0(b|B)[01]+\\b(?!\\$)", name: "constant.numeric.binary.coffee" }, { match: "\\b(?<!\\$)0(o|O)?[0-7]+\\b(?!\\$)", name: "constant.numeric.octal.coffee" }, { captures: { 0: { name: "constant.numeric.decimal.coffee" }, 1: { name: "punctuation.separator.decimal.period.coffee" }, 2: { name: "punctuation.separator.decimal.period.coffee" }, 3: { name: "punctuation.separator.decimal.period.coffee" }, 4: { name: "punctuation.separator.decimal.period.coffee" }, 5: { name: "punctuation.separator.decimal.period.coffee" }, 6: { name: "punctuation.separator.decimal.period.coffee" } }, match: `(?x)
(?<!\\$)(?:
(?:\\b[0-9]+(\\.)[0-9]+[eE][+-]?[0-9]+\\b)|
(?:\\b[0-9]+(\\.)[eE][+-]?[0-9]+\\b)|
(?:\\B(\\.)[0-9]+[eE][+-]?[0-9]+\\b)|
(?:\\b[0-9]+[eE][+-]?[0-9]+\\b)|
(?:\\b[0-9]+(\\.)[0-9]+\\b)|
(?:\\b[0-9]+(?=\\.{2,3}))|
(?:\\b[0-9]+(\\.)\\B)|
(?:\\B(\\.)[0-9]+\\b)|
(?:\\b[0-9]+\\b(?!\\.))
)(?!\\$)` }] }, objects: { patterns: [{ match: "[A-Z][A-Z0-9_$]*(?=\\s*\\??(\\.\\s*[a-zA-Z_$]\\w*|::))", name: "constant.other.object.coffee" }, { match: "[a-zA-Z_$][\\w$]*(?=\\s*\\??(\\.\\s*[a-zA-Z_$]\\w*|::))", name: "variable.other.object.coffee" }] }, operators: { patterns: [{ captures: { 1: { name: "variable.assignment.coffee" }, 2: { name: "keyword.operator.assignment.compound.coffee" } }, match: "(?:([a-zA-Z$_][\\w$]*)?\\s+|(?<![\\w$]))(and=|or=)" }, { captures: { 1: { name: "variable.assignment.coffee" }, 2: { name: "keyword.operator.assignment.compound.coffee" } }, match: "([a-zA-Z$_][\\w$]*)?\\s*(%=|\\+=|-=|\\*=|&&=|\\|\\|=|\\?=|(?<!\\()/=)" }, { captures: { 1: { name: "variable.assignment.coffee" }, 2: { name: "keyword.operator.assignment.compound.bitwise.coffee" } }, match: "([a-zA-Z$_][\\w$]*)?\\s*(&=|\\^=|<<=|>>=|>>>=|\\|=)" }, { match: "<<|>>>|>>", name: "keyword.operator.bitwise.shift.coffee" }, { match: "!=|<=|>=|==|<|>", name: "keyword.operator.comparison.coffee" }, { match: "&&|!|\\|\\|", name: "keyword.operator.logical.coffee" }, { match: "&|\\||\\^|~", name: "keyword.operator.bitwise.coffee" }, { captures: { 1: { name: "variable.assignment.coffee" }, 2: { name: "keyword.operator.assignment.coffee" } }, match: "([a-zA-Z$_][\\w$]*)?\\s*(=|:(?!:))(?![>=])" }, { match: "--", name: "keyword.operator.decrement.coffee" }, { match: "\\+\\+", name: "keyword.operator.increment.coffee" }, { match: "\\.\\.\\.", name: "keyword.operator.splat.coffee" }, { match: "\\?", name: "keyword.operator.existential.coffee" }, { match: "%|\\*|/|-|\\+", name: "keyword.operator.coffee" }, { captures: { 1: { name: "keyword.operator.logical.coffee" }, 2: { name: "keyword.operator.comparison.coffee" } }, match: `(?x)
\\b(?<![\\.\\$])
(?:
(and|or|not)
|
(is|isnt)
)
(?!\\s*:)\\b` }] }, properties: { patterns: [{ captures: { 1: { name: "punctuation.separator.property.period.coffee" }, 2: { name: "keyword.operator.prototype.coffee" }, 3: { name: "constant.other.object.property.coffee" } }, match: "(?:(\\.)|(::))\\s*([A-Z][A-Z0-9_$]*\\b\\$*)(?=\\s*\\??(\\.\\s*[a-zA-Z_$]\\w*|::))" }, { captures: { 1: { name: "punctuation.separator.property.period.coffee" }, 2: { name: "keyword.operator.prototype.coffee" }, 3: { name: "variable.other.object.property.coffee" } }, match: "(?:(\\.)|(::))\\s*(\\$*[a-zA-Z_$][\\w$]*)(?=\\s*\\??(\\.\\s*[a-zA-Z_$]\\w*|::))" }, { captures: { 1: { name: "punctuation.separator.property.period.coffee" }, 2: { name: "keyword.operator.prototype.coffee" }, 3: { name: "constant.other.property.coffee" } }, match: "(?:(\\.)|(::))\\s*([A-Z][A-Z0-9_$]*\\b\\$*)" }, { captures: { 1: { name: "punctuation.separator.property.period.coffee" }, 2: { name: "keyword.operator.prototype.coffee" }, 3: { name: "variable.other.property.coffee" } }, match: "(?:(\\.)|(::))\\s*(\\$*[a-zA-Z_$][\\w$]*)" }, { captures: { 1: { name: "punctuation.separator.property.period.coffee" }, 2: { name: "keyword.operator.prototype.coffee" }, 3: { name: "invalid.illegal.identifier.coffee" } }, match: "(?:(\\.)|(::))\\s*([0-9][\\w$]*)" }] }, "regex-character-class": { patterns: [{ match: "\\\\[wWsSdD]|\\.", name: "constant.character.character-class.regexp" }, { match: "\\\\([0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4})", name: "constant.character.numeric.regexp" }, { match: "\\\\c[A-Z]", name: "constant.character.control.regexp" }, { match: "\\\\.", name: "constant.character.escape.backslash.regexp" }] }, single_quoted_string: { patterns: [{ begin: "'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.coffee" } }, end: "'", endCaptures: { 0: { name: "punctuation.definition.string.end.coffee" } }, name: "string.quoted.single.coffee", patterns: [{ captures: { 1: { name: "punctuation.definition.escape.backslash.coffee" } }, match: "(\\\\)(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)", name: "constant.character.escape.backslash.coffee" }] }] } }, scopeName: "source.coffee", embeddedLangs: ["javascript"], aliases: ["coffeescript"] });
var j = [
  ...e,
  Tn
];
const Dn = Object.freeze({ displayName: "Pug", name: "pug", patterns: [{ comment: "Doctype declaration.", match: "^(!!!|doctype)(\\s*[a-zA-Z0-9-_]+)?", name: "meta.tag.sgml.doctype.html" }, { begin: "^(\\s*)//-", comment: "Unbuffered (pug-only) comments.", end: "^(?!(\\1\\s)|\\s*$)", name: "comment.unbuffered.block.pug" }, { begin: "^(\\s*)//", comment: "Buffered (html) comments.", end: "^(?!(\\1\\s)|\\s*$)", name: "string.comment.buffered.block.pug", patterns: [{ captures: { 1: { name: "invalid.illegal.comment.comment.block.pug" } }, comment: "Buffered comments inside buffered comments will generate invalid html.", match: "^\\s*(//)(?!-)", name: "string.comment.buffered.block.pug" }] }, { begin: "<!--", end: "--\\s*>", name: "comment.unbuffered.block.pug", patterns: [{ match: "--", name: "invalid.illegal.comment.comment.block.pug" }] }, { begin: "^(\\s*)-$", comment: "Unbuffered code block.", end: "^(?!(\\1\\s)|\\s*$)", name: "source.js", patterns: [{ include: "source.js" }] }, { begin: "^(\\s*)(script)((\\.$)|(?=[^\\n]*((text|application)/javascript|module).*\\.$))", beginCaptures: { 2: { name: "entity.name.tag.pug" } }, comment: "Script tag with JavaScript code.", end: "^(?!(\\1\\s)|\\s*$)", name: "meta.tag.other", patterns: [{ begin: "\\G(?=\\()", end: "$", patterns: [{ include: "#tag_attributes" }] }, { begin: "\\G(?=[.#])", end: "$", patterns: [{ include: "#complete_tag" }] }, { include: "source.js" }] }, { begin: "^(\\s*)(style)((\\.$)|(?=[.#(].*\\.$))", beginCaptures: { 2: { name: "entity.name.tag.pug" } }, comment: "Style tag with CSS code.", end: "^(?!(\\1\\s)|\\s*$)", name: "meta.tag.other", patterns: [{ begin: "\\G(?=\\()", end: "$", patterns: [{ include: "#tag_attributes" }] }, { begin: "\\G(?=[.#])", end: "$", patterns: [{ include: "#complete_tag" }] }, { include: "source.css" }] }, { begin: "^(\\s*):(sass)(?=\\(|$)", beginCaptures: { 2: { name: "constant.language.name.sass.filter.pug" } }, end: "^(?!(\\1\\s)|\\s*$)", name: "source.sass.filter.pug", patterns: [{ include: "#tag_attributes" }, { include: "source.sass" }] }, { begin: "^(\\s*):(scss)(?=\\(|$)", beginCaptures: { 2: { name: "constant.language.name.scss.filter.pug" } }, end: "^(?!(\\1\\s)|\\s*$)", name: "source.css.scss.filter.pug", patterns: [{ include: "#tag_attributes" }, { include: "source.css.scss" }] }, { begin: "^(\\s*):(less)(?=\\(|$)", beginCaptures: { 2: { name: "constant.language.name.less.filter.pug" } }, end: "^(?!(\\1\\s)|\\s*$)", name: "source.less.filter.pug", patterns: [{ include: "#tag_attributes" }, { include: "source.less" }] }, { begin: "^(\\s*):(stylus)(?=\\(|$)", beginCaptures: { 2: { name: "constant.language.name.stylus.filter.pug" } }, end: "^(?!(\\1\\s)|\\s*$)", patterns: [{ include: "#tag_attributes" }, { include: "source.stylus" }] }, { begin: "^(\\s*):(coffee(-?script)?)(?=\\(|$)", beginCaptures: { 2: { name: "constant.language.name.coffeescript.filter.pug" } }, end: "^(?!(\\1\\s)|\\s*$)", name: "source.coffeescript.filter.pug", patterns: [{ include: "#tag_attributes" }, { include: "source.coffee" }] }, { begin: "^(\\s*):(uglify-js)(?=\\(|$)", beginCaptures: { 2: { name: "constant.language.name.js.filter.pug" } }, end: "^(?!(\\1\\s)|\\s*$)", name: "source.js.filter.pug", patterns: [{ include: "#tag_attributes" }, { include: "source.js" }] }, { begin: "^(\\s*)((:(?=.))|(:$))", beginCaptures: { 4: { name: "invalid.illegal.empty.generic.filter.pug" } }, comment: "Generic Pug filter.", end: "^(?!(\\1\\s)|\\s*$)", patterns: [{ begin: "\\G(?<=:)(?=.)", end: "$", name: "name.generic.filter.pug", patterns: [{ match: "\\G\\(", name: "invalid.illegal.name.generic.filter.pug" }, { match: "[\\w-]", name: "constant.language.name.generic.filter.pug" }, { include: "#tag_attributes" }, { match: "\\W", name: "invalid.illegal.name.generic.filter.pug" }] }] }, { begin: `^(\\s*)(?:(?=\\.$)|(?:(?=[\\w.#].*?\\.$)(?=(?:(?:(?:(?:(?:#[\\w-]+)|(?:\\.[\\w-]+))|(?:(?:[#!]\\{[^}]*\\})|(?:\\w(?:(?:[\\w:-]+[\\w-])|(?:[\\w-]*)))))(?:(?:#[\\w-]+)|(?:\\.[\\w-]+)|(?:\\((?:[^()\\'\\"]*(?:(?:\\'(?:[^\\']|(?:(?<!\\\\)\\\\\\'))*\\')|(?:\\"(?:[^\\"]|(?:(?<!\\\\)\\\\\\"))*\\")))*[^()]*\\))*)*)(?:(?:(?::\\s+)|(?<=\\)))(?:(?:(?:(?:#[\\w-]+)|(?:\\.[\\w-]+))|(?:(?:[#!]\\{[^}]*\\})|(?:\\w(?:(?:[\\w:-]+[\\w-])|(?:[\\w-]*)))))(?:(?:#[\\w-]+)|(?:\\.[\\w-]+)|(?:\\((?:[^()\\'\\"]*(?:(?:\\'(?:[^\\']|(?:(?<!\\\\)\\\\\\'))*\\')|(?:\\"(?:[^\\"]|(?:(?<!\\\\)\\\\\\"))*\\")))*[^()]*\\))*)*))*)\\.$)(?:(?:(#[\\w-]+)|(\\.[\\w-]+))|((?:[#!]\\{[^}]*\\})|(?:\\w(?:(?:[\\w:-]+[\\w-])|(?:[\\w-]*)))))))`, beginCaptures: { 2: { name: "meta.selector.css entity.other.attribute-name.id.css.pug" }, 3: { name: "meta.selector.css entity.other.attribute-name.class.css.pug" }, 4: { name: "meta.tag.other entity.name.tag.pug" } }, comment: "Generated from dot_block_tag.py", end: "^(?!(\\1\\s)|\\s*$)", patterns: [{ match: "\\.$", name: "storage.type.function.pug.dot-block-dot" }, { include: "#tag_attributes" }, { include: "#complete_tag" }, { begin: "^(?=.)", end: "$", name: "text.block.pug", patterns: [{ include: "#inline_pug" }, { include: "#embedded_html" }, { include: "#html_entity" }, { include: "#interpolated_value" }, { include: "#interpolated_error" }] }] }, { begin: "^\\s*", comment: "All constructs that generally span a single line starting with any number of white-spaces.", end: "$", patterns: [{ include: "#inline_pug" }, { include: "#blocks_and_includes" }, { include: "#unbuffered_code" }, { include: "#mixin_definition" }, { include: "#mixin_call" }, { include: "#flow_control" }, { include: "#flow_control_each" }, { include: "#case_conds" }, { begin: "\\|", comment: "Tag pipe text line.", end: "$", name: "text.block.pipe.pug", patterns: [{ include: "#inline_pug" }, { include: "#embedded_html" }, { include: "#html_entity" }, { include: "#interpolated_value" }, { include: "#interpolated_error" }] }, { include: "#printed_expression" }, { begin: "\\G(?=(#[^\\{\\w-])|[^\\w.#])", comment: "Line starting with characters incompatible with tag name/id/class is standalone text.", end: "$", patterns: [{ begin: "</?(?=[!#])", end: ">|$", patterns: [{ include: "#inline_pug" }, { include: "#interpolated_value" }, { include: "#interpolated_error" }] }, { include: "#inline_pug" }, { include: "#embedded_html" }, { include: "#html_entity" }, { include: "#interpolated_value" }, { include: "#interpolated_error" }] }, { include: "#complete_tag" }] }], repository: { babel_parens: { begin: "\\(", end: "\\)|(({\\s*)?$)", patterns: [{ include: "#babel_parens" }, { include: "source.js" }] }, blocks_and_includes: { captures: { 1: { name: "storage.type.import.include.pug" }, 4: { name: "variable.control.import.include.pug" } }, comment: "Template blocks and includes.", match: "(extends|include|yield|append|prepend|block( (append|prepend))?)\\s+(.*)$", name: "meta.first-class.pug" }, case_conds: { begin: "(default|when)((\\s+|(?=:))|$)", captures: { 1: { name: "storage.type.function.pug" } }, comment: "Pug case conditionals.", end: "$", name: "meta.control.flow.pug", patterns: [{ begin: "\\G(?!:)", end: "(?=:\\s+)|$", name: "js.embedded.control.flow.pug", patterns: [{ include: "#case_when_paren" }, { include: "source.js" }] }, { begin: ":\\s+", end: "$", name: "tag.case.control.flow.pug", patterns: [{ include: "#complete_tag" }] }] }, case_when_paren: { begin: "\\(", end: "\\)", name: "js.when.control.flow.pug", patterns: [{ include: "#case_when_paren" }, { match: ":", name: "invalid.illegal.name.tag.pug" }, { include: "source.js" }] }, complete_tag: { begin: "(?=[\\w.#])|(:\\s*)", end: "(\\.?$)|(?=:.)", endCaptures: { 1: { name: "storage.type.function.pug.dot-block-dot" } }, patterns: [{ include: "#blocks_and_includes" }, { include: "#unbuffered_code" }, { include: "#mixin_call" }, { include: "#flow_control" }, { include: "#flow_control_each" }, { match: "(?<=:)\\w.*$", name: "invalid.illegal.name.tag.pug" }, { include: "#tag_name" }, { include: "#tag_id" }, { include: "#tag_classes" }, { include: "#tag_attributes" }, { include: "#tag_mixin_attributes" }, { captures: { 2: { name: "invalid.illegal.end.tag.pug" }, 4: { name: "invalid.illegal.end.tag.pug" } }, match: "((\\.)\\s+$)|((:)\\s*$)" }, { include: "#printed_expression" }, { include: "#tag_text" }] }, embedded_html: { begin: "(?=<[^>]*>)", end: "$|(?=>)", name: "html", patterns: [{ include: "text.html.basic" }, { include: "#interpolated_value" }, { include: "#interpolated_error" }] }, flow_control: { begin: "(for|if|else if|else|until|while|unless|case)(\\s+|$)", captures: { 1: { name: "storage.type.function.pug" } }, comment: "Pug control flow.", end: "$", name: "meta.control.flow.pug", patterns: [{ begin: "", end: "$", name: "js.embedded.control.flow.pug", patterns: [{ include: "source.js" }] }] }, flow_control_each: { begin: "(each)(\\s+|$)", captures: { 1: { name: "storage.type.function.pug" } }, end: "$", name: "meta.control.flow.pug.each", patterns: [{ match: "([\\w$_]+)(?:\\s*,\\s*([\\w$_]+))?", name: "variable.other.pug.each-var" }, { begin: "", end: "$", name: "js.embedded.control.flow.pug", patterns: [{ include: "source.js" }] }] }, html_entity: { patterns: [{ match: "(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)", name: "constant.character.entity.html.text.pug" }, { match: "[<>&]", name: "invalid.illegal.html_entity.text.pug" }] }, inline_pug: { begin: "(?<!\\\\)(#\\[)", captures: { 1: { name: "entity.name.function.pug" }, 2: { name: "entity.name.function.pug" } }, end: "(\\])", name: "inline.pug", patterns: [{ include: "#inline_pug" }, { include: "#mixin_call" }, { begin: "(?<!\\])(?=[\\w.#])|(:\\s*)", end: "(?=\\]|(:.)|=|\\s)", name: "tag.inline.pug", patterns: [{ include: "#tag_name" }, { include: "#tag_id" }, { include: "#tag_classes" }, { include: "#tag_attributes" }, { include: "#tag_mixin_attributes" }, { include: "#inline_pug" }, { match: "\\[", name: "invalid.illegal.tag.pug" }] }, { include: "#unbuffered_code" }, { include: "#printed_expression" }, { match: "\\[", name: "invalid.illegal.tag.pug" }, { include: "#inline_pug_text" }] }, inline_pug_text: { begin: "", end: "(?=\\])", patterns: [{ begin: "\\[", end: "\\]", patterns: [{ include: "#inline_pug_text" }] }, { include: "#inline_pug" }, { include: "#embedded_html" }, { include: "#html_entity" }, { include: "#interpolated_value" }, { include: "#interpolated_error" }] }, interpolated_error: { match: "(?<!\\\\)[#!]\\{(?=[^}]*$)", name: "invalid.illegal.tag.pug" }, interpolated_value: { begin: "(?<!\\\\)[#!]\\{(?=.*?\\})", end: "\\}", name: "string.interpolated.pug", patterns: [{ match: "{", name: "invalid.illegal.tag.pug" }, { include: "source.js" }] }, js_braces: { begin: "\\{", end: "\\}", patterns: [{ include: "#js_braces" }, { include: "source.js" }] }, js_brackets: { begin: "\\[", end: "\\]", patterns: [{ include: "#js_brackets" }, { include: "source.js" }] }, js_parens: { begin: "\\(", end: "\\)", patterns: [{ include: "#js_parens" }, { include: "source.js" }] }, mixin_call: { begin: "((?:mixin\\s+)|\\+)([\\w-]+)", beginCaptures: { 1: { name: "storage.type.function.pug" }, 2: { name: "meta.tag.other entity.name.function.pug" } }, end: "(?!\\()|$", patterns: [{ begin: "(?<!\\))\\(", end: "\\)", name: "args.mixin.pug", patterns: [{ include: "#js_parens" }, { captures: { 1: { name: "meta.tag.other entity.other.attribute-name.tag.pug" } }, match: "([^\\s(),=/]+)\\s*=\\s*" }, { include: "source.js" }] }, { include: "#tag_attributes" }] }, mixin_definition: { captures: { 1: { name: "storage.type.function.pug" }, 2: { name: "meta.tag.other entity.name.function.pug" }, 3: { name: "punctuation.definition.parameters.begin.js" }, 4: { name: "variable.parameter.function.js" }, 5: { name: "punctuation.definition.parameters.begin.js" } }, match: "(mixin\\s+)([\\w-]+)(?:(\\()\\s*((?:[a-zA-Z_]\\w*\\s*)(?:,\\s*[a-zA-Z_]\\w*\\s*)*)(\\)))?$" }, printed_expression: { begin: "(!?\\=)\\s*", captures: { 1: { name: "constant" } }, end: "(?=\\])|$", name: "source.js", patterns: [{ include: "#js_brackets" }, { include: "source.js" }] }, tag_attribute_name: { captures: { 1: { name: "entity.other.attribute-name.tag.pug" } }, match: "([^\\s(),=/!]+)\\s*" }, tag_attribute_name_paren: { begin: "\\(\\s*", end: "\\)", name: "entity.other.attribute-name.tag.pug", patterns: [{ include: "#tag_attribute_name_paren" }, { include: "#tag_attribute_name" }] }, tag_attributes: { begin: "(\\(\\s*)", captures: { 1: { name: "constant.name.attribute.tag.pug" } }, end: "(\\))", name: "meta.tag.other", patterns: [{ include: "#tag_attribute_name_paren" }, { include: "#tag_attribute_name" }, { match: "!(?!=)", name: "invalid.illegal.tag.pug" }, { begin: "=\\s*", end: "$|(?=,|(?:\\s+[^!%&*\\-+~|<>?/])|\\))", name: "attribute_value", patterns: [{ include: "#js_parens" }, { include: "#js_brackets" }, { include: "#js_braces" }, { include: "source.js" }] }, { begin: "(?<=[%&*\\-+~|<>:?/])\\s+", end: "$|(?=,|(?:\\s+[^!%&*\\-+~|<>?/])|\\))", name: "attribute_value2", patterns: [{ include: "#js_parens" }, { include: "#js_brackets" }, { include: "#js_braces" }, { include: "source.js" }] }] }, tag_classes: { captures: { 1: { name: "invalid.illegal.tag.pug" } }, match: "\\.([^\\w-])?[\\w-]*", name: "meta.selector.css entity.other.attribute-name.class.css.pug" }, tag_id: { match: "#[\\w-]+", name: "meta.selector.css entity.other.attribute-name.id.css.pug" }, tag_mixin_attributes: { begin: "(&attributes\\()", captures: { 1: { name: "entity.name.function.pug" } }, end: "(\\))", name: "meta.tag.other", patterns: [{ match: "attributes(?=\\))", name: "storage.type.keyword.pug" }, { include: "source.js" }] }, tag_name: { begin: "([#!]\\{(?=.*?\\}))|(\\w(([\\w:-]+[\\w-])|([\\w-]*)))", end: "(\\G(?<!\\5[^\\w-]))|\\}|$", name: "meta.tag.other entity.name.tag.pug", patterns: [{ begin: "\\G(?<=\\{)", end: "(?=\\})", name: "meta.tag.other entity.name.tag.pug", patterns: [{ match: "{", name: "invalid.illegal.tag.pug" }, { include: "source.js" }] }] }, tag_text: { begin: "(?=.)", end: "$", patterns: [{ include: "#inline_pug" }, { include: "#embedded_html" }, { include: "#html_entity" }, { include: "#interpolated_value" }, { include: "#interpolated_error" }] }, unbuffered_code: { begin: "(-|(([a-zA-Z0-9_]+)\\s+=))", beginCaptures: { 3: { name: "variable.parameter.javascript.embedded.pug" } }, comment: "name = function() {}", end: "(?=\\])|(({\\s*)?$)", name: "source.js", patterns: [{ include: "#js_brackets" }, { include: "#babel_parens" }, { include: "source.js" }] } }, scopeName: "text.pug", embeddedLangs: ["javascript", "css", "sass", "scss", "stylus", "coffee", "html"], aliases: ["jade"] });
var F = [
  ...e,
  ...n,
  ...p,
  ...m,
  ...c,
  ...j,
  ...t,
  Dn
];
const Zn = Object.freeze({ displayName: "CMake", fileTypes: ["cmake", "CMakeLists.txt"], name: "cmake", patterns: [{ comment: "Variables That Describe the System", match: "\\b(?i:APPLE|BORLAND|(CMAKE_)?(CL_64|COMPILER_2005|HOST_APPLE|HOST_SYSTEM|HOST_SYSTEM_NAME|HOST_SYSTEM_PROCESSOR|HOST_SYSTEM_VERSION|HOST_UNIX|HOST_WIN32|LIBRARY_ARCHITECTURE|LIBRARY_ARCHITECTURE_REGEX|OBJECT_PATH_MAX|SYSTEM|SYSTEM_NAME|SYSTEM_PROCESSOR|SYSTEM_VERSION)|CYGWIN|MSVC|MSVC80|MSVC_IDE|MSVC_VERSION|UNIX|WIN32|XCODE_VERSION|MSVC60|MSVC70|MSVC90|MSVC71)\\b", name: "constant.source.cmake" }, { comment: "cmakeOperators", match: "\\b(?i:ABSOLUTE|AND|BOOL|CACHE|COMMAND|COMMENT|DEFINED|DOC|EQUAL|EXISTS|EXT|FALSE|GREATER|GREATER_EQUAL|INTERNAL|IN_LIST|IS_ABSOLUTE|IS_DIRECTORY|IS_NEWER_THAN|IS_SYMLINK|LESS|LESS_EQUAL|MATCHES|NAME|NAMES|NAME_WE|NOT|OFF|ON|OR|PATH|PATHS|POLICY|PROGRAM|STREQUAL|STRGREATER|STRGREATER_EQUAL|STRING|STRLESS|STRLESS_EQUAL|TARGET|TEST|TRUE|VERSION_EQUAL|VERSION_GREATER|VERSION_GREATER_EQUAL|VERSION_LESS)\\b", name: "keyword.cmake" }, { comment: "Commands", match: "^\\s*\\b(?i:add_compile_options|add_custom_command|add_custom_target|add_definitions|add_dependencies|add_executable|add_library|add_subdirectory|add_test|aux_source_directory|break|build_command|build_name|cmake_host_system_information|cmake_minimum_required|cmake_policy|configure_file|continue|create_test_sourcelist|ctest_build|ctest_configure|ctest_coverage|ctest_empty_binary_directory|ctest_memcheck|ctest_read_custom_files|ctest_run_script|ctest_sleep|ctest_start|ctest_submit|ctest_test|ctest_update|ctest_upload|define_property|else|elseif|enable_language|enable_testing|endforeach|endfunction|endif|endmacro|endwhile|exec_program|execute_process|export|export_library_dependencies|file|find_file|find_library|find_package|find_path|find_program|fltk_wrap_ui|foreach|function|get_cmake_property|get_directory_property|get_filename_component|get_property|get_source_file_property|get_target_property|get_test_property|if|include|include_directories|include_external_msproject|include_regular_expression|install|install_files|install_programs|install_targets|link_directories|link_libraries|list|load_cache|load_command|macro|make_directory|mark_as_advanced|math|message|option|output_required_files|project|qt_wrap_cpp|qt_wrap_ui|remove|remove_definitions|return|separate_arguments|set|set_directory_properties|set_property|set_source_files_properties|set_target_properties|set_tests_properties|site_name|source_group|string|subdir_depends|subdirs|target_compile_definitions|target_compile_features|target_compile_options|target_include_directories|target_link_libraries|target_sources|try_compile|try_run|unset|use_mangled_mesa|utility_source|variable_requires|variable_watch|while|write_file)\\b", name: "keyword.cmake" }, { comment: "Variables That Change Behavior", match: "\\b(?i:BUILD_SHARED_LIBS|(CMAKE_)?(ABSOLUTE_DESTINATION_FILES|AUTOMOC_RELAXED_MODE|BACKWARDS_COMPATIBILITY|BUILD_TYPE|COLOR_MAKEFILE|CONFIGURATION_TYPES|DEBUG_TARGET_PROPERTIES|DISABLE_FIND_PACKAGE_\\w+|FIND_LIBRARY_PREFIXES|FIND_LIBRARY_SUFFIXES|IGNORE_PATH|INCLUDE_PATH|INSTALL_DEFAULT_COMPONENT_NAME|INSTALL_PREFIX|LIBRARY_PATH|MFC_FLAG|MODULE_PATH|NOT_USING_CONFIG_FLAGS|POLICY_DEFAULT_CMP\\w+|PREFIX_PATH|PROGRAM_PATH|SKIP_INSTALL_ALL_DEPENDENCY|SYSTEM_IGNORE_PATH|SYSTEM_INCLUDE_PATH|SYSTEM_LIBRARY_PATH|SYSTEM_PREFIX_PATH|SYSTEM_PROGRAM_PATH|USER_MAKE_RULES_OVERRIDE|WARN_ON_ABSOLUTE_INSTALL_DESTINATION))\\b", name: "variable.source.cmake" }, { match: "\\$\\{\\w+\\}", name: "storage.source.cmake" }, { match: "\\$ENV\\{\\w+\\}", name: "storage.source.cmake" }, { comment: "Variables that Control the Build", match: "\\b(?i:(CMAKE_)?(\\w+_POSTFIX|ARCHIVE_OUTPUT_DIRECTORY|AUTOMOC|AUTOMOC_MOC_OPTIONS|BUILD_WITH_INSTALL_RPATH|DEBUG_POSTFIX|EXE_LINKER_FLAGS|EXE_LINKER_FLAGS_\\w+|Fortran_FORMAT|Fortran_MODULE_DIRECTORY|GNUtoMS|INCLUDE_CURRENT_DIR|INCLUDE_CURRENT_DIR_IN_INTERFACE|INSTALL_NAME_DIR|INSTALL_RPATH|INSTALL_RPATH_USE_LINK_PATH|LIBRARY_OUTPUT_DIRECTORY|LIBRARY_PATH_FLAG|LINK_DEF_FILE_FLAG|LINK_DEPENDS_NO_SHARED|LINK_INTERFACE_LIBRARIES|LINK_LIBRARY_FILE_FLAG|LINK_LIBRARY_FLAG|MACOSX_BUNDLE|NO_BUILTIN_CHRPATH|PDB_OUTPUT_DIRECTORY|POSITION_INDEPENDENT_CODE|RUNTIME_OUTPUT_DIRECTORY|SKIP_BUILD_RPATH|SKIP_INSTALL_RPATH|TRY_COMPILE_CONFIGURATION|USE_RELATIVE_PATHS|WIN32_EXECUTABLE)|EXECUTABLE_OUTPUT_PATH|LIBRARY_OUTPUT_PATH)\\b", name: "variable.source.cmake" }, { comment: "Variables that Provide Information", match: "\\b(?i:CMAKE_(AR|ARGC|ARGV0|BINARY_DIR|BUILD_TOOL|CACHEFILE_DIR|CACHE_MAJOR_VERSION|CACHE_MINOR_VERSION|CACHE_PATCH_VERSION|CFG_INTDIR|COMMAND|CROSSCOMPILING|CTEST_COMMAND|CURRENT_BINARY_DIR|CURRENT_LIST_DIR|CURRENT_LIST_FILE|CURRENT_LIST_LINE|CURRENT_SOURCE_DIR|DL_LIBS|EDIT_COMMAND|EXECUTABLE_SUFFIX|EXTRA_GENERATOR|EXTRA_SHARED_LIBRARY_SUFFIXES|GENERATOR|HOME_DIRECTORY|IMPORT_LIBRARY_PREFIX|IMPORT_LIBRARY_SUFFIX|LINK_LIBRARY_SUFFIX|MAJOR_VERSION|MAKE_PROGRAM|MINOR_VERSION|PARENT_LIST_FILE|PATCH_VERSION|PROJECT_NAME|RANLIB|ROOT|SCRIPT_MODE_FILE|SHARED_LIBRARY_PREFIX|SHARED_LIBRARY_SUFFIX|SHARED_MODULE_PREFIX|SHARED_MODULE_SUFFIX|SIZEOF_VOID_P|SKIP_RPATH|SOURCE_DIR|STANDARD_LIBRARIES|STATIC_LIBRARY_PREFIX|STATIC_LIBRARY_SUFFIX|TWEAK_VERSION|USING_VC_FREE_TOOLS|VERBOSE_MAKEFILE|VERSION)|PROJECT_BINARY_DIR|PROJECT_NAME|PROJECT_SOURCE_DIR|\\w+_BINARY_DIR|\\w+__SOURCE_DIR)\\b", name: "variable.source.cmake" }, { begin: "#\\[(=*)\\[", comment: "BracketArgs", end: "\\]\\1\\]", name: "comment.source.cmake", patterns: [{ match: "\\\\(.|$)", name: "constant.character.escape" }] }, { begin: "\\[(=*)\\[", comment: "BracketArgs", end: "\\]\\1\\]", name: "argument.source.cmake", patterns: [{ match: "\\\\(.|$)", name: "constant.character.escape" }] }, { match: "#+.*$", name: "comment.source.cmake" }, { comment: "Properties on Cache Entries", match: "\\b(?i:ADVANCED|HELPSTRING|MODIFIED|STRINGS|TYPE|VALUE)\\b", name: "entity.source.cmake" }, { comment: "Properties on Source Files", match: "\\b(?i:ABSTRACT|COMPILE_DEFINITIONS|COMPILE_DEFINITIONS_<CONFIG>|COMPILE_FLAGS|EXTERNAL_OBJECT|Fortran_FORMAT|GENERATED|HEADER_FILE_ONLY|KEEP_EXTENSION|LABELS|LANGUAGE|LOCATION|MACOSX_PACKAGE_LOCATION|OBJECT_DEPENDS|OBJECT_OUTPUTS|SYMBOLIC|WRAP_EXCLUDE)\\b", name: "entity.source.cmake" }, { comment: "Properties on Tests", match: "\\b(?i:ATTACHED_FILES|ATTACHED_FILES_ON_FAIL|COST|DEPENDS|ENVIRONMENT|FAIL_REGULAR_EXPRESSION|LABELS|MEASUREMENT|PASS_REGULAR_EXPRESSION|PROCESSORS|REQUIRED_FILES|RESOURCE_LOCK|RUN_SERIAL|TIMEOUT|WILL_FAIL|WORKING_DIRECTORY)\\b", name: "entity.source.cmake" }, { comment: "Properties on Directories", match: "\\b(?i:ADDITIONAL_MAKE_CLEAN_FILES|CACHE_VARIABLES|CLEAN_NO_CUSTOM|COMPILE_DEFINITIONS|COMPILE_DEFINITIONS_\\w+|DEFINITIONS|EXCLUDE_FROM_ALL|IMPLICIT_DEPENDS_INCLUDE_TRANSFORM|INCLUDE_DIRECTORIES|INCLUDE_REGULAR_EXPRESSION|INTERPROCEDURAL_OPTIMIZATION|INTERPROCEDURAL_OPTIMIZATION_\\w+|LINK_DIRECTORIES|LISTFILE_STACK|MACROS|PARENT_DIRECTORY|RULE_LAUNCH_COMPILE|RULE_LAUNCH_CUSTOM|RULE_LAUNCH_LINK|TEST_INCLUDE_FILE|VARIABLES|VS_GLOBAL_SECTION_POST_\\w+|VS_GLOBAL_SECTION_PRE_\\w+)\\b", name: "entity.source.cmake" }, { comment: "Properties of Global Scope", match: "\\b(?i:ALLOW_DUPLICATE_CUSTOM_TARGETS|DEBUG_CONFIGURATIONS|DISABLED_FEATURES|ENABLED_FEATURES|ENABLED_LANGUAGES|FIND_LIBRARY_USE_LIB64_PATHS|FIND_LIBRARY_USE_OPENBSD_VERSIONING|GLOBAL_DEPENDS_DEBUG_MODE|GLOBAL_DEPENDS_NO_CYCLES|IN_TRY_COMPILE|PACKAGES_FOUND|PACKAGES_NOT_FOUND|PREDEFINED_TARGETS_FOLDER|REPORT_UNDEFINED_PROPERTIES|RULE_LAUNCH_COMPILE|RULE_LAUNCH_CUSTOM|RULE_LAUNCH_LINK|RULE_MESSAGES|TARGET_ARCHIVES_MAY_BE_SHARED_LIBS|TARGET_SUPPORTS_SHARED_LIBS|USE_FOLDERS|__CMAKE_DELETE_CACHE_CHANGE_VARS_)\\b", name: "entity.source.cmake" }, { comment: "Properties on Targets", match: "\\b(?i:\\w+_(OUTPUT_NAME|POSTFIX)|ARCHIVE_OUTPUT_(DIRECTORY(_\\w+)?|NAME(_\\w+)?)|AUTOMOC(_MOC_OPTIONS)?|BUILD_WITH_INSTALL_RPATH|BUNDLE|BUNDLE(_EXTENSION)?|COMPATIBLE_INTERFACE_BOOL|COMPATIBLE_INTERFACE_STRING|COMPILE_(DEFINITIONS(_\\w+)?|FLAGS)|DEBUG_POSTFIX|DEFINE_SYMBOL|ENABLE_EXPORTS|EXCLUDE_FROM_ALL|EchoString|FOLDER|FRAMEWORK|Fortran_(FORMAT|MODULE_DIRECTORY)|GENERATOR_FILE_NAME|GNUtoMS|HAS_CXX|IMPLICIT_DEPENDS_INCLUDE_TRANSFORM|IMPORTED|IMPORTED_(CONFIGURATIONS|IMPLIB(_\\w+)?|LINK_DEPENDENT_LIBRARIES(_\\w+)?|LINK_INTERFACE_LANGUAGES(_\\w+)?|LINK_INTERFACE_LIBRARIES(_\\w+)?|LINK_INTERFACE_MULTIPLICITY(_\\w+)?|LOCATION(_\\w+)?|NO_SONAME(_\\w+)?|SONAME(_\\w+)?)|IMPORT_PREFIX|IMPORT_SUFFIX|INSTALL_NAME_DIR|INSTALL_RPATH|INSTALL_RPATH_USE_LINK_PATH|INTERFACE|INTERFACE_COMPILE_DEFINITIONS|INTERFACE_INCLUDE_DIRECTORIES|INTERPROCEDURAL_OPTIMIZATION|INTERPROCEDURAL_OPTIMIZATION_\\w+|LABELS|LIBRARY_OUTPUT_DIRECTORY(_\\w+)?|LIBRARY_OUTPUT_NAME(_\\w+)?|LINKER_LANGUAGE|LINK_DEPENDS|LINK_FLAGS(_\\w+)?|LINK_INTERFACE_LIBRARIES(_\\w+)?|LINK_INTERFACE_MULTIPLICITY(_\\w+)?|LINK_LIBRARIES|LINK_SEARCH_END_STATIC|LINK_SEARCH_START_STATIC|LOCATION(_\\w+)?|MACOSX_BUNDLE|MACOSX_BUNDLE_INFO_PLIST|MACOSX_FRAMEWORK_INFO_PLIST|MAP_IMPORTED_CONFIG_\\w+|NO_SONAME|OSX_ARCHITECTURES(_\\w+)?|OUTPUT_NAME(_\\w+)?|PDB_NAME(_\\w+)?|POST_INSTALL_SCRIPT|PREFIX|PRE_INSTALL_SCRIPT|PRIVATE|PRIVATE_HEADER|PROJECT_LABEL|PUBLIC|PUBLIC_HEADER|RESOURCE|RULE_LAUNCH_(COMPILE|CUSTOM|LINK)|RUNTIME_OUTPUT_(DIRECTORY(_\\w+)?|NAME(_\\w+)?)|SKIP_BUILD_RPATH|SOURCES|SOVERSION|STATIC_LIBRARY_FLAGS(_\\w+)?|SUFFIX|TYPE|VERSION|VS_DOTNET_REFERENCES|VS_GLOBAL_(\\w+|KEYWORD|PROJECT_TYPES)|VS_KEYWORD|VS_SCC_(AUXPATH|LOCALPATH|PROJECTNAME|PROVIDER)|VS_WINRT_EXTENSIONS|VS_WINRT_REFERENCES|WIN32_EXECUTABLE|XCODE_ATTRIBUTE_\\w+)\\b", name: "entity.source.cmake" }, { begin: '\\\\"', comment: "Escaped Strings", end: '\\\\"', name: "string.source.cmake", patterns: [{ match: "\\\\(.|$)", name: "constant.character.escape" }] }, { begin: '"', comment: "Normal Strings", end: '"', name: "string.source.cmake", patterns: [{ match: "\\\\(.|$)", name: "constant.character.escape" }] }, { comment: "Derecated keyword", match: "\\bBUILD_NAME\\b", name: "invalid.deprecated.source.cmake" }, { comment: "Compiler Flags", match: "\\b(?i:(CMAKE_)?(CXX_FLAGS|CMAKE_CXX_FLAGS_DEBUG|CMAKE_CXX_FLAGS_MINSIZEREL|CMAKE_CXX_FLAGS_RELEASE|CMAKE_CXX_FLAGS_RELWITHDEBINFO))\\b", name: "variable.source.cmake" }], repository: {}, scopeName: "source.cmake" });
var Wn = [
  Zn
];
const In = Object.freeze({ displayName: "reStructuredText", name: "rst", patterns: [{ include: "#body" }], repository: { anchor: { match: "^\\.{2}\\s+(_[^:]+:)\\s*", name: "entity.name.tag.anchor" }, block: { begin: "^(\\s*)(\\.{2}\\s+\\S+::)(.*)", beginCaptures: { 2: { name: "keyword.control" }, 3: { name: "variable" } }, end: "^(?!\\1\\s|\\s*$)", patterns: [{ include: "#block-param" }, { include: "#body" }] }, "block-comment": { begin: "^(\\s*)\\.{2}(\\s+|$)", end: "^(?=\\S)|^\\s*$", name: "comment.block", patterns: [{ begin: "^\\s{3,}(?=\\S)", name: "comment.block", while: "^\\s{3}.*|^\\s*$" }] }, "block-param": { patterns: [{ captures: { 1: { name: "keyword.control" }, 2: { name: "variable.parameter" } }, match: "(:param\\s+(.+?):)(?:\\s|$)" }, { captures: { 1: { name: "keyword.control" }, 2: { patterns: [{ match: "\\b(0x[a-fA-F\\d]+|\\d+)\\b", name: "constant.numeric" }, { include: "#inline-markup" }] } }, match: "(:.+?:)(?:$|\\s+(.*))" }] }, blocks: { patterns: [{ include: "#domains" }, { include: "#doctest" }, { include: "#code-block-cpp" }, { include: "#code-block-py" }, { include: "#code-block-console" }, { include: "#code-block-javascript" }, { include: "#code-block-yaml" }, { include: "#code-block-cmake" }, { include: "#code-block-kconfig" }, { include: "#code-block-ruby" }, { include: "#code-block-dts" }, { include: "#code-block" }, { include: "#doctest-block" }, { include: "#raw-html" }, { include: "#block" }, { include: "#literal-block" }, { include: "#block-comment" }] }, body: { patterns: [{ include: "#title" }, { include: "#inline-markup" }, { include: "#anchor" }, { include: "#line-block" }, { include: "#replace-include" }, { include: "#footnote" }, { include: "#substitution" }, { include: "#blocks" }, { include: "#table" }, { include: "#simple-table" }, { include: "#options-list" }] }, bold: { begin: `(?<=[\\s"'(\\[{<]|^)\\*{2}[^\\s*]`, end: "\\*{2}|^\\s*$", name: "markup.bold" }, citation: { applyEndPatternLast: 0, begin: "(?<=[\\s\"'(\\[{<]|^)`[^\\s`]", end: "`_{,2}|^\\s*$", name: "entity.name.tag" }, "code-block": { begin: "^(\\s*)(\\.{2}\\s+(code|code-block)::)", beginCaptures: { 2: { name: "keyword.control" } }, patterns: [{ include: "#block-param" }], while: "^\\1(?=\\s)|^\\s*$" }, "code-block-cmake": { begin: "^(\\s*)(\\.{2}\\s+(code|code-block)::)\\s*(cmake)\\s*$", beginCaptures: { 2: { name: "keyword.control" }, 4: { name: "variable.parameter.codeblock.cmake" } }, patterns: [{ include: "#block-param" }, { include: "source.cmake" }], while: "^\\1(?=\\s)|^\\s*$" }, "code-block-console": { begin: "^(\\s*)(\\.{2}\\s+(code|code-block)::)\\s*(console|shell|bash)\\s*$", beginCaptures: { 2: { name: "keyword.control" }, 4: { name: "variable.parameter.codeblock.console" } }, patterns: [{ include: "#block-param" }, { include: "source.shell" }], while: "^\\1(?=\\s)|^\\s*$" }, "code-block-cpp": { begin: "^(\\s*)(\\.{2}\\s+(code|code-block)::)\\s*(c|c\\+\\+|cpp|C|C\\+\\+|CPP|Cpp)\\s*$", beginCaptures: { 2: { name: "keyword.control" }, 4: { name: "variable.parameter.codeblock.cpp" } }, patterns: [{ include: "#block-param" }, { include: "source.cpp" }], while: "^\\1(?=\\s)|^\\s*$" }, "code-block-dts": { begin: "^(\\s*)(\\.{2}\\s+(code|code-block)::)\\s*(dts|DTS|devicetree)\\s*$", beginCaptures: { 2: { name: "keyword.control" }, 4: { name: "variable.parameter.codeblock.dts" } }, patterns: [{ include: "#block-param" }, { include: "source.dts" }], while: "^\\1(?=\\s)|^\\s*$" }, "code-block-javascript": { begin: "^(\\s*)(\\.{2}\\s+(code|code-block)::)\\s*(javascript)\\s*$", beginCaptures: { 2: { name: "keyword.control" }, 4: { name: "variable.parameter.codeblock.js" } }, patterns: [{ include: "#block-param" }, { include: "source.js" }], while: "^\\1(?=\\s)|^\\s*$" }, "code-block-kconfig": { begin: "^(\\s*)(\\.{2}\\s+(code|code-block)::)\\s*([kK]config)\\s*$", beginCaptures: { 2: { name: "keyword.control" }, 4: { name: "variable.parameter.codeblock.kconfig" } }, patterns: [{ include: "#block-param" }, { include: "source.kconfig" }], while: "^\\1(?=\\s)|^\\s*$" }, "code-block-py": { begin: "^(\\s*)(\\.{2}\\s+(code|code-block)::)\\s*(python)\\s*$", beginCaptures: { 2: { name: "keyword.control" }, 4: { name: "variable.parameter.codeblock.py" } }, patterns: [{ include: "#block-param" }, { include: "source.python" }], while: "^\\1(?=\\s)|^\\s*$" }, "code-block-ruby": { begin: "^(\\s*)(\\.{2}\\s+(code|code-block)::)\\s*(ruby)\\s*$", beginCaptures: { 2: { name: "keyword.control" }, 4: { name: "variable.parameter.codeblock.ruby" } }, patterns: [{ include: "#block-param" }, { include: "source.ruby" }], while: "^\\1(?=\\s)|^\\s*$" }, "code-block-yaml": { begin: "^(\\s*)(\\.{2}\\s+(code|code-block)::)\\s*(ya?ml)\\s*$", beginCaptures: { 2: { name: "keyword.control" }, 4: { name: "variable.parameter.codeblock.yaml" } }, patterns: [{ include: "#block-param" }, { include: "source.yaml" }], while: "^\\1(?=\\s)|^\\s*$" }, doctest: { begin: "^(>>>)\\s*(.*)", beginCaptures: { 1: { name: "keyword.control" }, 2: { patterns: [{ include: "source.python" }] } }, end: "^\\s*$" }, "doctest-block": { begin: "^(\\s*)(\\.{2}\\s+doctest::)\\s*$", beginCaptures: { 2: { name: "keyword.control" } }, patterns: [{ include: "#block-param" }, { include: "source.python" }], while: "^\\1(?=\\s)|^\\s*$" }, "domain-auto": { begin: "^(\\s*)(\\.{2}\\s+auto(?:class|module|exception|function|decorator|data|method|attribute|property)::)\\s*(.*)", beginCaptures: { 2: { name: "keyword.control.py" }, 3: { patterns: [{ include: "source.python" }] } }, patterns: [{ include: "#block-param" }, { include: "#body" }], while: "^\\1(?=\\s)|^\\s*$" }, "domain-cpp": { begin: "^(\\s*)(\\.{2}\\s+(?:cpp|c):(?:class|struct|function|member|var|type|enum|enum-struct|enum-class|enumerator|union|concept)::)\\s*(?:(@\\w+)|(.*))", beginCaptures: { 2: { name: "keyword.control" }, 3: { name: "entity.name.tag" }, 4: { patterns: [{ include: "source.cpp" }] } }, patterns: [{ include: "#block-param" }, { include: "#body" }], while: "^\\1(?=\\s)|^\\s*$" }, "domain-js": { begin: "^(\\s*)(\\.{2}\\s+js:\\w+::)\\s*(.*)", beginCaptures: { 2: { name: "keyword.control" }, 3: { patterns: [{ include: "source.js" }] } }, end: "^(?!\\1[ \\t]|$)", patterns: [{ include: "#block-param" }, { include: "#body" }] }, "domain-py": { begin: "^(\\s*)(\\.{2}\\s+py:(?:module|function|data|exception|class|attribute|property|method|staticmethod|classmethod|decorator|decoratormethod)::)\\s*(.*)", beginCaptures: { 2: { name: "keyword.control" }, 3: { patterns: [{ include: "source.python" }] } }, patterns: [{ include: "#block-param" }, { include: "#body" }], while: "^\\1(?=\\s)|^\\s*$" }, domains: { patterns: [{ include: "#domain-cpp" }, { include: "#domain-py" }, { include: "#domain-auto" }, { include: "#domain-js" }] }, escaped: { match: "\\\\.", name: "constant.character.escape" }, footnote: { match: "^\\s*\\.{2}\\s+\\[(?:[\\w\\.-]+|[#*]|#\\w+)\\]\\s+", name: "entity.name.tag" }, "footnote-ref": { match: "\\[(?:[\\w\\.-]+|[#*])\\]_", name: "entity.name.tag" }, ignore: { patterns: [{ match: "'[`*]+'" }, { match: "<[`*]+>" }, { match: "{[`*]+}" }, { match: "\\([`*]+\\)" }, { match: "\\[[`*]+\\]" }, { match: '"[`*]+"' }] }, "inline-markup": { patterns: [{ include: "#escaped" }, { include: "#ignore" }, { include: "#ref" }, { include: "#literal" }, { include: "#monospaced" }, { include: "#citation" }, { include: "#bold" }, { include: "#italic" }, { include: "#list" }, { include: "#macro" }, { include: "#reference" }, { include: "#footnote-ref" }] }, italic: { begin: `(?<=[\\s"'(\\[{<]|^)\\*[^\\s*]`, end: "\\*|^\\s*$", name: "markup.italic" }, "line-block": { match: "^\\|\\s+", name: "keyword.control" }, list: { match: "^\\s*(\\d+\\.|\\* -|[a-zA-Z#]\\.|[iIvVxXmMcC]+\\.|\\(\\d+\\)|\\d+\\)|[*+-])\\s+", name: "keyword.control" }, literal: { captures: { 1: { name: "keyword.control" }, 2: { name: "entity.name.tag" } }, match: "(:\\S+:)(`.*?`\\\\?)" }, "literal-block": { begin: "^(\\s*)(.*)(::)\\s*$", beginCaptures: { 2: { patterns: [{ include: "#inline-markup" }] }, 3: { name: "keyword.control" } }, while: "^\\1(?=\\s)|^\\s*$" }, macro: { match: "\\|[^\\|]+\\|", name: "entity.name.tag" }, monospaced: { begin: "(?<=[\\s\"'(\\[{<]|^)``[^\\s`]", end: "``|^\\s*$", name: "string.interpolated" }, "options-list": { match: "(?:(?:^|,\\s+)(?:[-+]\\w|--?[a-zA-Z][\\w-]+|/\\w+)(?:[ =](?:\\w+|<[^<>]+?>))?)+(?=  |\\t|$)", name: "variable.parameter" }, "raw-html": { begin: "^(\\s*)(\\.{2}\\s+raw\\s*::)\\s+(html)\\s*$", beginCaptures: { 2: { name: "keyword.control" }, 3: { name: "variable.parameter.html" } }, patterns: [{ include: "#block-param" }, { include: "text.html.derivative" }], while: "^\\1(?=\\s)|^\\s*$" }, ref: { begin: "(:ref:)`", beginCaptures: { 1: { name: "keyword.control" } }, end: "`|^\\s*$", name: "entity.name.tag", patterns: [{ match: "<.*?>", name: "markup.underline.link" }] }, reference: { match: "[\\w-]*[a-zA-Z\\d-]__?\\b", name: "entity.name.tag" }, "replace-include": { captures: { 1: { name: "keyword.control" }, 2: { name: "entity.name.tag" }, 3: { name: "keyword.control" } }, match: "^\\s*(\\.{2})\\s+(\\|[^\\|]+\\|)\\s+(replace::)" }, "simple-table": { match: "^[=\\s]+$", name: "keyword.control.table" }, substitution: { match: "^\\.{2}\\s*\\|([^|]+)\\|", name: "entity.name.tag" }, table: { begin: "^\\s*\\+[=+-]+\\+\\s*$", beginCaptures: { 0: { name: "keyword.control.table" } }, end: "^(?![+|])", patterns: [{ match: "[=+|-]", name: "keyword.control.table" }] }, title: { match: "^(\\*{3,}|#{3,}|\\={3,}|~{3,}|\\+{3,}|-{3,}|`{3,}|\\^{3,}|:{3,}|\"{3,}|_{3,}|'{3,})$", name: "markup.heading" } }, scopeName: "source.rst", embeddedLangs: ["html-derivative", "cpp", "python", "javascript", "shellscript", "yaml", "cmake", "ruby"] });
var Pn = [
  ...C,
  ...k,
  ...f,
  ...e,
  ...o,
  ...u,
  ...Wn,
  ..._,
  In
];
const Rn = Object.freeze({ displayName: "Shell Session", fileTypes: ["sh-session"], name: "shellsession", patterns: [{ captures: { 1: { name: "entity.other.prompt-prefix.shell-session" }, 2: { name: "punctuation.separator.prompt.shell-session" }, 3: { name: "source.shell", patterns: [{ include: "source.shell" }] } }, match: "(?x) ^ (?: ( (?:\\(\\S+\\)\\s*)? (?: sh\\S*?                       | \\w+\\S+[@:]\\S+(?:\\s+\\S+)? | \\[\\S+?[@:][^\\n]+?\\].*? ) ) \\s* )? ( [>$#%❯➜] | \\p{Greek} ) \\s+ (.*) $" }, { match: "^.+$", name: "meta.output.shell-session" }], scopeName: "text.shell-session", embeddedLangs: ["shellscript"], aliases: ["console"] });
var Un = [
  ...o,
  Rn
];
const On = Object.freeze({ displayName: "SSH Config", fileTypes: ["ssh_config", ".ssh/config", "sshd_config"], name: "ssh-config", patterns: [{ match: "\\b(A(cceptEnv|dd(ressFamily|KeysToAgent)|llow(AgentForwarding|Groups|StreamLocalForwarding|TcpForwarding|Users)|uth(enticationMethods|orized((Keys(Command(User)?|File)|Principals(Command(User)?|File)))))|B(anner|atchMode|ind(Address|Interface))|C(anonical(Domains|ize(FallbackLocal|Hostname|MaxDots|PermittedCNAMEs))|ertificateFile|hallengeResponseAuthentication|heckHostIP|hrootDirectory|iphers?|learAllForwardings|ientAlive(CountMax|Interval)|ompression(Level)?|onnect(Timeout|ionAttempts)|ontrolMaster|ontrolPath|ontrolPersist)|D(eny(Groups|Users)|isableForwarding|ynamicForward)|E(nableSSHKeysign|scapeChar|xitOnForwardFailure|xposeAuthInfo)|F(ingerprintHash|orceCommand|orward(Agent|X11(Timeout|Trusted)?))|G(atewayPorts|SSAPI(Authentication|CleanupCredentials|ClientIdentity|DelegateCredentials|KeyExchange|RenewalForcesRekey|ServerIdentity|StrictAcceptorCheck|TrustDns)|atewayPorts|lobalKnownHostsFile)|H(ashKnownHosts|ost(based(AcceptedKeyTypes|Authentication|KeyTypes|UsesNameFromPacketOnly)|Certificate|Key(Agent|Algorithms|Alias)?|Name))|I(dentit(iesOnly|y(Agent|File))|gnore(Rhosts|Unknown|UserKnownHosts)|nclude|PQoS)|K(bdInteractive(Authentication|Devices)|erberos(Authentication|GetAFSToken|OrLocalPasswd|TicketCleanup)|exAlgorithms)|L(istenAddress|ocal(Command|Forward)|oginGraceTime|ogLevel)|M(ACs|atch|ax(AuthTries|Sessions|Startups))|N(oHostAuthenticationForLocalhost|umberOfPasswordPrompts)|P(KCS11Provider|asswordAuthentication|ermit(EmptyPasswords|LocalCommand|Open|RootLogin|TTY|Tunnel|User(Environment|RC))|idFile|ort|referredAuthentications|rint(LastLog|Motd)|rotocol|roxy(Command|Jump|UseFdpass)|ubkey(AcceptedKeyTypes|Authentication))|R(Domain|SAAuthentication|ekeyLimit|emote(Command|Forward)|equestTTY|evoked(HostKeys|Keys)|hostsRSAAuthentication)|S(endEnv|erverAlive(CountMax|Interval)|treamLocalBind(Mask|Unlink)|trict(HostKeyChecking|Modes)|ubsystem|yslogFacility)|T(CPKeepAlive|rustedUserCAKeys|unnel(Device)?)|U(pdateHostKeys|se(BlacklistedKeys|DNS|Keychain|PAM|PrivilegedPort|r(KnownHostsFile)?))|V(erifyHostKeyDNS|ersionAddendum|isualHostKey)|X(11(DisplayOffset|Forwarding|UseLocalhost)|AuthLocation))\\b", name: "keyword.other.ssh-config" }, { begin: "(^[ \\t]+)?(?=#)", beginCaptures: { 1: { name: "punctuation.whitespace.comment.leading.ssh-config" } }, end: "(?!\\G)", patterns: [{ begin: "#", beginCaptures: { 0: { name: "punctuation.definition.comment.ssh-config" } }, end: "\\n", name: "comment.line.number-sign.ssh-config" }] }, { begin: "(^[ \\t]+)?(?=//)", beginCaptures: { 1: { name: "punctuation.whitespace.comment.leading.ssh-config" } }, end: "(?!\\G)", patterns: [{ begin: "//", beginCaptures: { 0: { name: "punctuation.definition.comment.ssh-config" } }, end: "\\n", name: "comment.line.double-slash.ssh-config" }] }, { captures: { 1: { name: "storage.type.ssh-config" }, 2: { name: "entity.name.section.ssh-config" }, 3: { name: "meta.toc-list.ssh-config" } }, match: "(?:^| |\\t)(Host)\\s+((.*))$" }, { match: "\\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b", name: "constant.numeric.ssh-config" }, { match: "\\b[0-9]+\\b", name: "constant.numeric.ssh-config" }, { match: "\\b(yes|no)\\b", name: "constant.language.ssh-config" }, { match: "\\b[A-Z_]+\\b", name: "constant.language.ssh-config" }], scopeName: "source.ssh-config" });
var Bn = [
  On
];
const Gn = Object.freeze({ displayName: "Svelte", fileTypes: ["svelte"], injections: { "L:(meta.script.svelte | meta.style.svelte) (meta.lang.js | meta.lang.javascript) - (meta source)": { patterns: [{ begin: "(?<=>)(?!</)", contentName: "source.js", end: "(?=</)", name: "meta.embedded.block.svelte", patterns: [{ include: "source.js" }] }] }, "L:(meta.script.svelte | meta.style.svelte) (meta.lang.ts | meta.lang.typescript) - (meta source)": { patterns: [{ begin: "(?<=>)(?!</)", contentName: "source.ts", end: "(?=</)", name: "meta.embedded.block.svelte", patterns: [{ include: "source.ts" }] }] }, "L:(meta.script.svelte | meta.style.svelte) meta.lang.coffee - (meta source)": { patterns: [{ begin: "(?<=>)(?!</)", contentName: "source.coffee", end: "(?=</)", name: "meta.embedded.block.svelte", patterns: [{ include: "source.coffee" }] }] }, "L:(source.ts, source.js, source.coffee)": { patterns: [{ match: `(?<![_$./'"[:alnum:]])\\$(?=[_[:alpha:]][_$[:alnum:]]*)`, name: "punctuation.definition.variable.svelte" }, { match: `(?<![_$./'"[:alnum:]])(\\$\\$)(?=props|restProps|slots)`, name: "punctuation.definition.variable.svelte" }] }, "L:meta.script.svelte - meta.lang - (meta source)": { patterns: [{ begin: "(?<=>)(?!</)", contentName: "source.js", end: "(?=</)", name: "meta.embedded.block.svelte", patterns: [{ include: "source.js" }] }] }, "L:meta.style.svelte - meta.lang - (meta source)": { patterns: [{ begin: "(?<=>)(?!</)", contentName: "source.css", end: "(?=</)", name: "meta.embedded.block.svelte", patterns: [{ include: "source.css" }] }] }, "L:meta.style.svelte meta.lang.css - (meta source)": { patterns: [{ begin: "(?<=>)(?!</)", contentName: "source.css", end: "(?=</)", name: "meta.embedded.block.svelte", patterns: [{ include: "source.css" }] }] }, "L:meta.style.svelte meta.lang.less - (meta source)": { patterns: [{ begin: "(?<=>)(?!</)", contentName: "source.css.less", end: "(?=</)", name: "meta.embedded.block.svelte", patterns: [{ include: "source.css.less" }] }] }, "L:meta.style.svelte meta.lang.postcss - (meta source)": { patterns: [{ begin: "(?<=>)(?!</)", contentName: "source.css.postcss", end: "(?=</)", name: "meta.embedded.block.svelte", patterns: [{ include: "source.css.postcss" }] }] }, "L:meta.style.svelte meta.lang.sass - (meta source)": { patterns: [{ begin: "(?<=>)(?!</)", contentName: "source.sass", end: "(?=</)", name: "meta.embedded.block.svelte", patterns: [{ include: "source.sass" }] }] }, "L:meta.style.svelte meta.lang.scss - (meta source)": { patterns: [{ begin: "(?<=>)(?!</)", contentName: "source.css.scss", end: "(?=</)", name: "meta.embedded.block.svelte", patterns: [{ include: "source.css.scss" }] }] }, "L:meta.style.svelte meta.lang.stylus - (meta source)": { patterns: [{ begin: "(?<=>)(?!</)", contentName: "source.stylus", end: "(?=</)", name: "meta.embedded.block.svelte", patterns: [{ include: "source.stylus" }] }] }, "L:meta.template.svelte - meta.lang - (meta source)": { patterns: [{ begin: "(?<=>)\\s", end: "(?=</template)", patterns: [{ include: "#scope" }] }] }, "L:meta.template.svelte meta.lang.pug - (meta source)": { patterns: [{ begin: "(?<=>)(?!</)", contentName: "text.pug", end: "(?=</)", name: "meta.embedded.block.svelte", patterns: [{ include: "text.pug" }] }] } }, name: "svelte", patterns: [{ include: "#scope" }], repository: { attributes: { patterns: [{ include: "#attributes-directives" }, { include: "#attributes-keyvalue" }, { include: "#attributes-interpolated" }] }, "attributes-directives": { begin: "(?<!<)(on|use|bind|transition|in|out|animate|let|class|style)(:)(?:((?:--)?[_$[:alpha:]][_\\-$[:alnum:]]*(?=\\s*=))|((?:--)?[_$[:alpha:]][_\\-$[:alnum:]]*))((\\|\\w+)*)", beginCaptures: { 1: { patterns: [{ include: "#attributes-directives-keywords" }] }, 2: { name: "punctuation.definition.keyword.svelte" }, 3: { patterns: [{ include: "#attributes-directives-types-assigned" }] }, 4: { patterns: [{ include: "#attributes-directives-types" }] }, 5: { patterns: [{ match: "\\w+", name: "support.function.svelte" }, { match: "\\|", name: "punctuation.separator.svelte" }] } }, end: "(?=\\s*+[^=\\s])", name: "meta.directive.$1.svelte", patterns: [{ begin: "=", beginCaptures: { 0: { name: "punctuation.separator.key-value.svelte" } }, end: "(?<=[^\\s=])(?!\\s*=)|(?=/?>)", patterns: [{ include: "#attributes-value" }] }] }, "attributes-directives-keywords": { patterns: [{ match: "on|use|bind", name: "keyword.control.svelte" }, { match: "transition|in|out|animate", name: "keyword.other.animation.svelte" }, { match: "let", name: "storage.type.svelte" }, { match: "class|style", name: "entity.other.attribute-name.svelte" }] }, "attributes-directives-types": { patterns: [{ match: "(?<=(on):).*$", name: "entity.name.type.svelte" }, { match: "(?<=(bind):).*$", name: "variable.parameter.svelte" }, { match: "(?<=(use|transition|in|out|animate):).*$", name: "variable.function.svelte" }, { match: "(?<=(let|class|style):).*$", name: "variable.parameter.svelte" }] }, "attributes-directives-types-assigned": { patterns: [{ match: "(?<=(bind):)this$", name: "variable.language.svelte" }, { match: "(?<=(bind):).*$", name: "entity.name.type.svelte" }, { match: "(?<=(class):).*$", name: "entity.other.attribute-name.class.svelte" }, { match: "(?<=(style):).*$", name: "support.type.property-name.svelte" }, { include: "#attributes-directives-types" }] }, "attributes-generics": { begin: `(generics)(=)(["'])`, beginCaptures: { 1: { name: "entity.other.attribute-name.svelte" }, 2: { name: "punctuation.separator.key-value.svelte" }, 3: { name: "punctuation.definition.string.begin.svelte" } }, contentName: "meta.embedded.expression.svelte source.ts", end: "(\\3)", endCaptures: { 1: { name: "punctuation.definition.string.end.svelte" } }, patterns: [{ include: "#type-parameters" }] }, "attributes-interpolated": { begin: "(?<!:|=)\\s*({)", captures: { 1: { name: "entity.other.attribute-name.svelte" } }, contentName: "meta.embedded.expression.svelte source.ts", end: "(\\})", patterns: [{ include: "source.ts" }] }, "attributes-keyvalue": { begin: "((?:--)?[_$[:alpha:]][_\\-$[:alnum:]]*)", beginCaptures: { 0: { patterns: [{ match: "--.*", name: "support.type.property-name.svelte" }, { match: ".*", name: "entity.other.attribute-name.svelte" }] } }, end: "(?=\\s*+[^=\\s])", name: "meta.attribute.$1.svelte", patterns: [{ begin: "=", beginCaptures: { 0: { name: "punctuation.separator.key-value.svelte" } }, end: "(?<=[^\\s=])(?!\\s*=)|(?=/?>)", patterns: [{ include: "#attributes-value" }] }] }, "attributes-value": { patterns: [{ include: "#interpolation" }, { captures: { 1: { name: "punctuation.definition.string.begin.svelte" }, 2: { name: "constant.numeric.decimal.svelte" }, 3: { name: "punctuation.definition.string.end.svelte" }, 4: { name: "constant.numeric.decimal.svelte" } }, match: `(?:(['"])([0-9._]+[\\w%]{,4})(\\1))|(?:([0-9._]+[\\w%]{,4})(?=\\s|/?>))` }, { match: "([^\\s\"'=<>`/]|/(?!>))+", name: "string.unquoted.svelte", patterns: [{ include: "#interpolation" }] }, { begin: `(['"])`, beginCaptures: { 0: { name: "punctuation.definition.string.begin.svelte" } }, end: "\\1", endCaptures: { 0: { name: "punctuation.definition.string.end.svelte" } }, name: "string.quoted.svelte", patterns: [{ include: "#interpolation" }] }] }, comments: { begin: "<!--", captures: { 0: { name: "punctuation.definition.comment.svelte" } }, end: "-->", name: "comment.block.svelte", patterns: [{ begin: "(@)(component)", beginCaptures: { 1: { name: "punctuation.definition.keyword.svelte" }, 2: { name: "storage.type.class.component.svelte keyword.declaration.class.component.svelte" } }, contentName: "comment.block.documentation.svelte", end: "(?=-->)", patterns: [{ captures: { 0: { patterns: [{ include: "text.html.markdown" }] } }, match: ".*?(?=-->)" }, { include: "text.html.markdown" }] }, { match: "\\G-?>|<!--(?!>)|<!-(?=-->)|--!>", name: "invalid.illegal.characters-not-allowed-here.svelte" }] }, destructuring: { patterns: [{ begin: "(?={)", end: "(?<=})", name: "meta.embedded.expression.svelte source.ts", patterns: [{ include: "source.ts#object-binding-pattern" }] }, { begin: "(?=\\[)", end: "(?<=\\])", name: "meta.embedded.expression.svelte source.ts", patterns: [{ include: "source.ts#array-binding-pattern" }] }] }, "destructuring-const": { patterns: [{ begin: "(?={)", end: "(?<=})", name: "meta.embedded.expression.svelte source.ts", patterns: [{ include: "source.ts#object-binding-pattern-const" }] }, { begin: "(?=\\[)", end: "(?<=\\])", name: "meta.embedded.expression.svelte source.ts", patterns: [{ include: "source.ts#array-binding-pattern-const" }] }] }, interpolation: { patterns: [{ begin: "\\{", beginCaptures: { 0: { name: "punctuation.section.embedded.begin.svelte" } }, contentName: "meta.embedded.expression.svelte source.ts", end: "\\}", endCaptures: { 0: { name: "punctuation.section.embedded.end.svelte" } }, patterns: [{ begin: "\\G\\s*(?={)", end: "(?<=})", patterns: [{ include: "source.ts#object-literal" }] }, { include: "source.ts" }] }] }, scope: { patterns: [{ include: "#comments" }, { include: "#special-tags" }, { include: "#tags" }, { include: "#interpolation" }, { begin: "(?<=>|})", end: "(?=<|{)", name: "text.svelte" }] }, "special-tags": { patterns: [{ include: "#special-tags-void" }, { include: "#special-tags-block-begin" }, { include: "#special-tags-block-end" }] }, "special-tags-block-begin": { begin: "({)\\s*(#([a-z]*))", beginCaptures: { 1: { name: "punctuation.definition.block.begin.svelte" }, 2: { patterns: [{ include: "#special-tags-keywords" }] } }, end: "(})", endCaptures: { 0: { name: "punctuation.definition.block.end.svelte" } }, name: "meta.special.$3.svelte meta.special.start.svelte", patterns: [{ include: "#special-tags-modes" }] }, "special-tags-block-end": { begin: "({)\\s*(/([a-z]*))", beginCaptures: { 1: { name: "punctuation.definition.block.begin.svelte" }, 2: { patterns: [{ include: "#special-tags-keywords" }] } }, end: "(})", endCaptures: { 1: { name: "punctuation.definition.block.end.svelte" } }, name: "meta.special.$3.svelte meta.special.end.svelte" }, "special-tags-keywords": { captures: { 1: { name: "punctuation.definition.keyword.svelte" }, 2: { patterns: [{ match: "if|else\\s+if|else", name: "keyword.control.conditional.svelte" }, { match: "each|key", name: "keyword.control.svelte" }, { match: "await|then|catch", name: "keyword.control.flow.svelte" }, { match: "snippet", name: "keyword.control.svelte" }, { match: "html", name: "keyword.other.svelte" }, { match: "render", name: "keyword.other.svelte" }, { match: "debug", name: "keyword.other.debugger.svelte" }, { match: "const", name: "storage.type.svelte" }] } }, match: "([#@/:])(else\\s+if|[a-z]*)" }, "special-tags-modes": { patterns: [{ begin: "(?<=(if|key|then|catch|snippet|html|render).*?)\\G", end: "(?=})", name: "meta.embedded.expression.svelte source.ts", patterns: [{ include: "source.ts" }] }, { begin: "(?<=const.*?)\\G", end: "(?=})", patterns: [{ include: "#destructuring-const" }, { begin: "\\G\\s*([_$[:alpha:]][_$[:alnum:]]+)\\s*", beginCaptures: { 1: { name: "variable.other.constant.svelte" } }, end: "(?=\\=)" }, { begin: "(?=\\=)", end: "(?=})", name: "meta.embedded.expression.svelte source.ts", patterns: [{ include: "source.ts" }] }] }, { begin: "(?<=each.*?)\\G", end: "(?=})", patterns: [{ begin: "\\G\\s*?(?=\\S)", contentName: "meta.embedded.expression.svelte source.ts", end: "(?=(?:^\\s*|\\s+)(as))", patterns: [{ include: "source.ts" }] }, { begin: "(as)", beginCaptures: { 1: { name: "keyword.control.as.svelte" } }, end: "(?=})", patterns: [{ include: "#destructuring" }, { begin: "\\(", captures: { 0: { name: "meta.brace.round.svelte" } }, contentName: "meta.embedded.expression.svelte source.ts", end: "\\)|(?=})", patterns: [{ include: "source.ts" }] }, { captures: { 1: { name: "meta.embedded.expression.svelte source.ts", patterns: [{ include: "source.ts" }] } }, match: "(\\s*([_$[:alpha:]][_$[:alnum:]]*)\\s*)" }, { match: ",", name: "punctuation.separator.svelte" }] }] }, { begin: "(?<=await.*?)\\G", end: "(?=})", patterns: [{ begin: "\\G\\s*?(?=\\S)", contentName: "meta.embedded.expression.svelte source.ts", end: "\\s+(then)|(?=})", endCaptures: { 1: { name: "keyword.control.flow.svelte" } }, patterns: [{ include: "source.ts" }] }, { begin: "(?<=then\\b)", contentName: "meta.embedded.expression.svelte source.ts", end: "(?=})", patterns: [{ include: "source.ts" }] }] }, { begin: "(?<=debug.*?)\\G", end: "(?=})", patterns: [{ captures: { 0: { name: "meta.embedded.expression.svelte source.ts", patterns: [{ include: "source.ts" }] } }, match: "[_$[:alpha:]][_$[:alnum:]]*" }, { match: ",", name: "punctuation.separator.svelte" }] }] }, "special-tags-void": { begin: "({)\\s*((?:[@:])(else\\s+if|[a-z]*))", beginCaptures: { 1: { name: "punctuation.definition.block.begin.svelte" }, 2: { patterns: [{ include: "#special-tags-keywords" }] } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.block.end.svelte" } }, name: "meta.special.$3.svelte", patterns: [{ include: "#special-tags-modes" }] }, tags: { patterns: [{ include: "#tags-lang" }, { include: "#tags-void" }, { include: "#tags-general-end" }, { include: "#tags-general-start" }] }, "tags-end-node": { captures: { 1: { name: "meta.tag.end.svelte punctuation.definition.tag.begin.svelte" }, 2: { name: "meta.tag.end.svelte", patterns: [{ include: "#tags-name" }] }, 3: { name: "meta.tag.end.svelte punctuation.definition.tag.end.svelte" }, 4: { name: "meta.tag.start.svelte punctuation.definition.tag.end.svelte" } }, match: "(</)(.*?)\\s*(>)|(/>)" }, "tags-general-end": { begin: "(</)([^/\\s>]*)", beginCaptures: { 1: { name: "meta.tag.end.svelte punctuation.definition.tag.begin.svelte" }, 2: { name: "meta.tag.end.svelte", patterns: [{ include: "#tags-name" }] } }, end: "(>)", endCaptures: { 1: { name: "meta.tag.end.svelte punctuation.definition.tag.end.svelte" } }, name: "meta.scope.tag.$2.svelte" }, "tags-general-start": { begin: "(<)([^/\\s>/]*)", beginCaptures: { 0: { patterns: [{ include: "#tags-start-node" }] } }, end: "(/?>)", endCaptures: { 1: { name: "meta.tag.start.svelte punctuation.definition.tag.end.svelte" } }, name: "meta.scope.tag.$2.svelte", patterns: [{ include: "#tags-start-attributes" }] }, "tags-lang": { begin: "<(script|style|template)", beginCaptures: { 0: { patterns: [{ include: "#tags-start-node" }] } }, end: "</\\1\\s*>|/>", endCaptures: { 0: { patterns: [{ include: "#tags-end-node" }] } }, name: "meta.$1.svelte", patterns: [{ begin: `\\G(?=\\s*[^>]*?(type|lang)\\s*=\\s*(['"]|)(?:text/)?(\\w+)\\2)`, end: "(?=</|/>)", name: "meta.lang.$3.svelte", patterns: [{ include: "#tags-lang-start-attributes" }] }, { include: "#tags-lang-start-attributes" }] }, "tags-lang-start-attributes": { begin: "\\G", end: "(?=/>)|>", endCaptures: { 0: { name: "punctuation.definition.tag.end.svelte" } }, name: "meta.tag.start.svelte", patterns: [{ include: "#attributes-generics" }, { include: "#attributes" }] }, "tags-name": { patterns: [{ captures: { 1: { name: "keyword.control.svelte" }, 2: { name: "punctuation.definition.keyword.svelte" }, 3: { name: "entity.name.tag.svelte" } }, match: "(svelte)(:)([a-z][\\w0-9:-]*)" }, { match: "slot", name: "keyword.control.svelte" }, { match: "[A-Z][a-zA-Z0-9_]*", name: "support.class.component.svelte" }, { match: "[a-z][\\w0-9:]*-[\\w0-9:-]*", name: "meta.tag.custom.svelte entity.name.tag.svelte" }, { match: "[a-z][\\w0-9:-]*", name: "entity.name.tag.svelte" }] }, "tags-start-attributes": { begin: "\\G", end: "(?=/?>)", name: "meta.tag.start.svelte", patterns: [{ include: "#attributes" }] }, "tags-start-node": { captures: { 1: { name: "punctuation.definition.tag.begin.svelte" }, 2: { patterns: [{ include: "#tags-name" }] } }, match: "(<)([^/\\s>/]*)", name: "meta.tag.start.svelte" }, "tags-void": { begin: "(<)(area|base|br|col|embed|hr|img|input|link|meta|param|source|track|wbr)(?=\\s|/?>)", beginCaptures: { 1: { name: "punctuation.definition.tag.begin.svelte" }, 2: { name: "entity.name.tag.svelte" } }, end: "/?>", endCaptures: { 0: { name: "punctuation.definition.tag.begin.svelte" } }, name: "meta.tag.void.svelte", patterns: [{ include: "#attributes" }] }, "type-parameters": { name: "meta.type.parameters.ts", patterns: [{ include: "source.ts#comment" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(extends|in|out|const)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "storage.modifier.ts" }, { include: "source.ts#type" }, { include: "source.ts#punctuation-comma" }, { match: "(=)(?!>)", name: "keyword.operator.assignment.ts" }] } }, scopeName: "source.svelte", embeddedLangs: ["javascript", "typescript", "coffee", "stylus", "sass", "css", "scss", "less", "postcss", "pug", "markdown"] });
var Mn = [
  ...e,
  ...r,
  ...j,
  ...c,
  ...p,
  ...n,
  ...m,
  ...l,
  ...h,
  ...F,
  ...A,
  Gn
];
const Hn = Object.freeze({ displayName: "Swift", name: "swift", patterns: [{ include: "#root" }], repository: { "async-throws": { captures: { 1: { name: "invalid.illegal.await-must-precede-throws.swift" }, 2: { name: "storage.modifier.exception.swift" }, 3: { name: "storage.modifier.async.swift" } }, match: "\\b(?:(throws\\s+async|rethrows\\s+async)|(throws|rethrows)|(async))\\b" }, attributes: { patterns: [{ begin: "((@)available)(\\()", beginCaptures: { 1: { name: "storage.modifier.attribute.swift" }, 2: { name: "punctuation.definition.attribute.swift" }, 3: { name: "punctuation.definition.arguments.begin.swift" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.arguments.end.swift" } }, name: "meta.attribute.available.swift", patterns: [{ captures: { 1: { name: "keyword.other.platform.os.swift" }, 2: { name: "constant.numeric.swift" } }, match: "\\b(swift|(?:iOS|macOS|OSX|watchOS|tvOS|visionOS|UIKitForMac)(?:ApplicationExtension)?)\\b(?:\\s+([0-9]+(?:\\.[0-9]+)*\\b))?" }, { begin: "\\b(introduced|deprecated|obsoleted)\\s*(:)\\s*", beginCaptures: { 1: { name: "keyword.other.swift" }, 2: { name: "punctuation.separator.key-value.swift" } }, end: "(?!\\G)", patterns: [{ match: "\\b[0-9]+(?:\\.[0-9]+)*\\b", name: "constant.numeric.swift" }] }, { begin: '\\b(message|renamed)\\s*(:)\\s*(?=")', beginCaptures: { 1: { name: "keyword.other.swift" }, 2: { name: "punctuation.separator.key-value.swift" } }, end: "(?!\\G)", patterns: [{ include: "#literals" }] }, { captures: { 1: { name: "keyword.other.platform.all.swift" }, 2: { name: "keyword.other.swift" }, 3: { name: "invalid.illegal.character-not-allowed-here.swift" } }, match: "(?:(\\*)|\\b(deprecated|unavailable|noasync)\\b)\\s*(.*?)(?=[,)])" }] }, { begin: "((@)objc)(\\()", beginCaptures: { 1: { name: "storage.modifier.attribute.swift" }, 2: { name: "punctuation.definition.attribute.swift" }, 3: { name: "punctuation.definition.arguments.begin.swift" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.arguments.end.swift" } }, name: "meta.attribute.objc.swift", patterns: [{ captures: { 1: { name: "invalid.illegal.missing-colon-after-selector-piece.swift" } }, match: "\\w*(?::(?:\\w*:)*(\\w*))?", name: "entity.name.function.swift" }] }, { begin: "(@)(?<q>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>)", beginCaptures: { 0: { name: "storage.modifier.attribute.swift" }, 1: { name: "punctuation.definition.attribute.swift" }, 2: { name: "punctuation.definition.identifier.swift" }, 3: { name: "punctuation.definition.identifier.swift" } }, comment: "any other attribute", end: "(?!\\G\\()", name: "meta.attribute.swift", patterns: [{ begin: "\\(", beginCaptures: { 0: { name: "punctuation.definition.arguments.begin.swift" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.arguments.end.swift" } }, name: "meta.arguments.attribute.swift", patterns: [{ include: "#expressions" }] }] }] }, "builtin-functions": { patterns: [{ comment: "Member functions in the standard library in Swift 3 which may be used with trailing closures and no parentheses", match: "(?<=\\.)(?:s(?:ort(?:ed)?|plit)|contains|index|partition|f(?:i(?:lter|rst)|orEach|latMap)|with(?:MutableCharacters|CString|U(?:nsafe(?:Mutable(?:BufferPointer|Pointer(?:s|To(?:Header|Elements)))|BufferPointer)|TF8Buffer))|m(?:in|a(?:p|x)))(?=\\s*[({])\\b", name: "support.function.swift" }, { comment: "Member functions in the standard library in Swift 3", match: "(?<=\\.)(?:s(?:ymmetricDifference|t(?:oreBytes|arts|ride)|ortInPlace|u(?:ccessor|ffix|btract(?:ing|InPlace|WithOverflow)?)|quareRoot|amePosition)|h(?:oldsUnique(?:Reference|OrPinnedReference)|as(?:Suffix|Prefix))|ne(?:gate(?:d)?|xt)|c(?:o(?:untByEnumerating|py(?:Bytes)?)|lamp(?:ed)?|reate)|t(?:o(?:IntMax|Opaque|UIntMax)|ake(?:RetainedValue|UnretainedValue)|r(?:uncatingRemainder|a(?:nscodedLength|ilSurrogate)))|i(?:s(?:MutableAndUniquelyReferenced(?:OrPinned)?|S(?:trictSu(?:perset(?:Of)?|bset(?:Of)?)|u(?:perset(?:Of)?|bset(?:Of)?))|Continuation|T(?:otallyOrdered|railSurrogate)|Disjoint(?:With)?|Unique(?:Reference|lyReferenced(?:OrPinned)?)|Equal|Le(?:ss(?:ThanOrEqualTo)?|adSurrogate))|n(?:sert(?:ContentsOf)?|tersect(?:ion|InPlace)?|itialize(?:Memory|From)?|dex(?:Of|ForKey)))|o(?:verlaps|bjectAt)|d(?:i(?:stance(?:To)?|vide(?:d|WithOverflow)?)|e(?:s(?:cendant|troy)|code(?:CString)?|initialize|alloc(?:ate(?:Capacity)?)?)|rop(?:First|Last))|u(?:n(?:ion(?:InPlace)?|derestimateCount|wrappedOrError)|p(?:date(?:Value)?|percased))|join(?:ed|WithSeparator)|p(?:op(?:First|Last)|ass(?:Retained|Unretained)|re(?:decessor|fix))|e(?:scape(?:d)?|n(?:code|umerate(?:d)?)|lementsEqual|xclusiveOr(?:InPlace)?)|f(?:orm(?:Remainder|S(?:ymmetricDifference|quareRoot)|TruncatingRemainder|In(?:tersection|dex)|Union)|latten|rom(?:CString(?:RepairingIllFormedUTF8)?|Opaque))|w(?:i(?:thMemoryRebound|dth)|rite(?:To)?)|l(?:o(?:wercased|ad)|e(?:adSurrogate|xicographical(?:Compare|lyPrecedes)))|a(?:ss(?:ign(?:BackwardFrom|From)?|umingMemoryBound)|d(?:d(?:ing(?:Product)?|Product|WithOverflow)?|vanced(?:By)?)|utorelease|ppend(?:ContentsOf)?|lloc(?:ate)?|bs)|r(?:ound(?:ed)?|e(?:serveCapacity|tain|duce|place(?:Range|Subrange)?|verse(?:d)?|quest(?:NativeBuffer|UniqueMutableBackingBuffer)|lease|m(?:ove(?:Range|Subrange|Value(?:ForKey)?|First|Last|A(?:tIndex|ll))?|ainder(?:WithOverflow)?)))|ge(?:nerate|t(?:Objects|Element))|m(?:in(?:imum(?:Magnitude)?|Element)|ove(?:Initialize(?:Memory|BackwardFrom|From)?|Assign(?:From)?)?|ultipl(?:y(?:WithOverflow)?|ied)|easure|a(?:ke(?:Iterator|Description)|x(?:imum(?:Magnitude)?|Element)))|bindMemory)(?=\\s*\\()", name: "support.function.swift" }, { comment: "Member functions in the standard library in Swift 2 only", match: "(?<=\\.)(?:s(?:uperclassMirror|amePositionIn|tartsWith)|nextObject|c(?:haracterAtIndex|o(?:untByEnumeratingWithState|pyWithZone)|ustom(?:Mirror|PlaygroundQuickLook))|is(?:EmptyInput|ASCII)|object(?:Enumerator|ForKey|AtIndex)|join|put|keyEnumerator|withUnsafeMutablePointerToValue|length|getMirror|m(?:oveInitializeAssignFrom|ember))(?=\\s*\\()", name: "support.function.swift" }] }, "builtin-global-functions": { patterns: [{ begin: "\\b(type)(\\()\\s*(of)(:)", beginCaptures: { 1: { name: "support.function.dynamic-type.swift" }, 2: { name: "punctuation.definition.arguments.begin.swift" }, 3: { name: "support.variable.parameter.swift" }, 4: { name: "punctuation.separator.argument-label.begin.swift" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.arguments.end.swift" } }, patterns: [{ include: "#expressions" }] }, { comment: "Global functions available in Swift 3 which may be used with trailing closures and no parentheses", match: "\\b(?:anyGenerator|autoreleasepool)(?=\\s*[({])\\b", name: "support.function.swift" }, { comment: "Global functions available in Swift 3", match: "\\b(?:s(?:tride(?:of(?:Value)?)?|izeof(?:Value)?|equence|wap)|numericCast|transcode|is(?:UniquelyReferenced(?:NonObjC)?|KnownUniquelyReferenced)|zip|d(?:ump|ebugPrint)|unsafe(?:BitCast|Downcast|Unwrap|Address(?:Of)?)|pr(?:int|econdition(?:Failure)?)|fatalError|with(?:Unsafe(?:MutablePointer|Pointer)|ExtendedLifetime|VaList)|a(?:ssert(?:ionFailure)?|lignof(?:Value)?|bs)|re(?:peatElement|adLine)|getVaList|m(?:in|ax))(?=\\s*\\()", name: "support.function.swift" }, { comment: "Global functions available in Swift 2 only", match: "\\b(?:s(?:ort|uffix|pli(?:ce|t))|insert|overlaps|d(?:istance|rop(?:First|Last))|join|prefix|extend|withUnsafe(?:MutablePointers|Pointers)|lazy|advance|re(?:flect|move(?:Range|Last|A(?:tIndex|ll))))(?=\\s*\\()", name: "support.function.swift" }] }, "builtin-properties": { patterns: [{ comment: "The simpler (?<=\\bProcess\\.|\\bCommandLine\\.) breaks VS Code / Atom, see https://github.com/textmate/swift.tmbundle/issues/29", match: "(?<=^Process\\.|\\WProcess\\.|^CommandLine\\.|\\WCommandLine\\.)(arguments|argc|unsafeArgv)", name: "support.variable.swift" }, { comment: "Properties in the standard library in Swift 3", match: "(?<=\\.)(?:s(?:t(?:artIndex|ri(?:ngValue|de))|i(?:ze|gn(?:BitIndex|ificand(?:Bit(?:Count|Pattern)|Width)?|alingNaN)?)|u(?:perclassMirror|mmary|bscriptBaseAddress))|h(?:eader|as(?:hValue|PointerRepresentation))|n(?:ulTerminatedUTF8|ext(?:Down|Up)|a(?:n|tiveOwner))|c(?:haracters|ount(?:TrailingZeros)?|ustom(?:Mirror|PlaygroundQuickLook)|apacity)|i(?:s(?:S(?:ign(?:Minus|aling(?:NaN)?)|ubnormal)|N(?:ormal|aN)|Canonical|Infinite|Zero|Empty|Finite|ASCII)|n(?:dices|finity)|dentity)|owner|de(?:scription|bugDescription)|u(?:n(?:safelyUnwrapped|icodeScalar(?:s)?|derestimatedCount)|tf(?:16|8(?:Start|C(?:String|odeUnitCount))?)|intValue|ppercaseString|lp(?:OfOne)?)|p(?:i|ointee)|e(?:ndIndex|lements|xponent(?:Bit(?:Count|Pattern))?)|value(?:s)?|keys|quietNaN|f(?:irst(?:ElementAddress(?:IfContiguous)?)?|loatingPointClass)|l(?:ittleEndian|owercaseString|eastNo(?:nzeroMagnitude|rmalMagnitude)|a(?:st|zy))|a(?:l(?:ignment|l(?:ocatedElementCount|Zeros))|rray(?:PropertyIsNativeTypeChecked)?)|ra(?:dix|wValue)|greatestFiniteMagnitude|m(?:in|emory|ax)|b(?:yteS(?:ize|wapped)|i(?:nade|tPattern|gEndian)|uffer|ase(?:Address)?))\\b", name: "support.variable.swift" }, { comment: "Properties in the standard library in Swift 2 only", match: "(?<=\\.)(?:boolValue|disposition|end|objectIdentifier|quickLookObject|start|valueType)\\b", name: "support.variable.swift" }, { comment: "Enum cases in the standard library - note that there is some overlap between these and the properties", match: "(?<=\\.)(?:s(?:calarValue|i(?:ze|gnalingNaN)|o(?:und|me)|uppressed|prite|et)|n(?:one|egative(?:Subnormal|Normal|Infinity|Zero))|c(?:ol(?:or|lection)|ustomized)|t(?:o(?:NearestOr(?:Even|AwayFromZero)|wardZero)|uple|ext)|i(?:nt|mage)|optional|d(?:ictionary|o(?:uble|wn))|u(?:Int|p|rl)|p(?:o(?:sitive(?:Subnormal|Normal|Infinity|Zero)|int)|lus)|e(?:rror|mptyInput)|view|quietNaN|float|a(?:ttributedString|wayFromZero)|r(?:ectangle|ange)|generated|minus|b(?:ool|ezierPath))\\b", name: "support.variable.swift" }] }, "builtin-types": { comment: "Types provided in the standard library", patterns: [{ include: "#builtin-types-builtin-class-type" }, { include: "#builtin-types-builtin-enum-type" }, { include: "#builtin-types-builtin-protocol-type" }, { include: "#builtin-types-builtin-struct-type" }, { include: "#builtin-types-builtin-typealias" }, { match: "\\bAny\\b", name: "support.type.any.swift" }] }, "builtin-types-builtin-class-type": { comment: "Builtin class types", match: "\\b(Managed(Buffer|ProtoBuffer)|NonObjectiveCBase|AnyGenerator)\\b", name: "support.class.swift" }, "builtin-types-builtin-enum-type": { patterns: [{ comment: "CommandLine is an enum, but it acts like a constant", match: "\\b(?:CommandLine|Process(?=\\.))\\b", name: "support.constant.swift" }, { comment: "The return type of a function that never returns", match: "\\bNever\\b", name: "support.constant.never.swift" }, { comment: "Enum types in the standard library in Swift 3", match: "\\b(?:ImplicitlyUnwrappedOptional|Representation|MemoryLayout|FloatingPointClassification|SetIndexRepresentation|SetIteratorRepresentation|FloatingPointRoundingRule|UnicodeDecodingResult|Optional|DictionaryIndexRepresentation|AncestorRepresentation|DisplayStyle|PlaygroundQuickLook|Never|FloatingPointSign|Bit|DictionaryIteratorRepresentation)\\b", name: "support.type.swift" }, { comment: "Enum types in the standard library in Swift 2 only", match: "\\b(?:MirrorDisposition|QuickLookObject)\\b", name: "support.type.swift" }] }, "builtin-types-builtin-protocol-type": { patterns: [{ comment: "Protocols in the standard library in Swift 3", match: "\\b(?:Ra(?:n(?:domAccess(?:Collection|Indexable)|geReplaceable(?:Collection|Indexable))|wRepresentable)|M(?:irrorPath|utable(?:Collection|Indexable))|Bi(?:naryFloatingPoint|twiseOperations|directional(?:Collection|Indexable))|S(?:tr(?:ideable|eamable)|igned(?:Number|Integer)|e(?:tAlgebra|quence))|Hashable|C(?:o(?:llection|mparable)|ustom(?:Reflectable|StringConvertible|DebugStringConvertible|PlaygroundQuickLookable|LeafReflectable)|VarArg)|TextOutputStream|I(?:n(?:teger(?:Arithmetic)?|dexable(?:Base)?)|teratorProtocol)|OptionSet|Un(?:signedInteger|icodeCodec)|E(?:quatable|rror|xpressibleBy(?:BooleanLiteral|String(?:Interpolation|Literal)|NilLiteral|IntegerLiteral|DictionaryLiteral|UnicodeScalarLiteral|ExtendedGraphemeClusterLiteral|FloatLiteral|ArrayLiteral))|FloatingPoint|L(?:osslessStringConvertible|azy(?:SequenceProtocol|CollectionProtocol))|A(?:nyObject|bsoluteValuable))\\b", name: "support.type.swift" }, { comment: "Protocols in the standard library in Swift 2 only", match: "\\b(?:Ran(?:domAccessIndexType|geReplaceableCollectionType)|GeneratorType|M(?:irror(?:Type|PathType)|utable(?:Sliceable|CollectionType))|B(?:i(?:twiseOperationsType|directionalIndexType)|oolean(?:Type|LiteralConvertible))|S(?:tring(?:InterpolationConvertible|LiteralConvertible)|i(?:nkType|gned(?:NumberType|IntegerType))|e(?:tAlgebraType|quenceType)|liceable)|NilLiteralConvertible|C(?:ollectionType|VarArgType)|Inte(?:rvalType|ger(?:Type|LiteralConvertible|ArithmeticType))|O(?:utputStreamType|ptionSetType)|DictionaryLiteralConvertible|Un(?:signedIntegerType|icode(?:ScalarLiteralConvertible|CodecType))|E(?:rrorType|xten(?:sibleCollectionType|dedGraphemeClusterLiteralConvertible))|F(?:orwardIndexType|loat(?:ingPointType|LiteralConvertible))|A(?:nyCollectionType|rrayLiteralConvertible))\\b", name: "support.type.swift" }] }, "builtin-types-builtin-struct-type": { patterns: [{ comment: "Structs in the standard library in Swift 3", match: "\\b(?:R(?:e(?:peat(?:ed)?|versed(?:RandomAccess(?:Collection|Index)|Collection|Index))|an(?:domAccessSlice|ge(?:Replaceable(?:RandomAccessSlice|BidirectionalSlice|Slice)|Generator)?))|Generator(?:Sequence|OfOne)|M(?:irror|utable(?:Ran(?:domAccessSlice|geReplaceable(?:RandomAccessSlice|BidirectionalSlice|Slice))|BidirectionalSlice|Slice)|anagedBufferPointer)|B(?:idirectionalSlice|ool)|S(?:t(?:aticString|ri(?:ng|deT(?:hrough(?:Generator|Iterator)?|o(?:Generator|Iterator)?)))|et(?:I(?:ndex|terator))?|lice)|HalfOpenInterval|C(?:haracter(?:View)?|o(?:ntiguousArray|untable(?:Range|ClosedRange)|llectionOfOne)|OpaquePointer|losed(?:Range(?:I(?:ndex|terator))?|Interval)|VaListPointer)|I(?:n(?:t(?:16|8|32|64)?|d(?:ices|ex(?:ing(?:Generator|Iterator))?))|terator(?:Sequence|OverOne)?)|Zip2(?:Sequence|Iterator)|O(?:paquePointer|bjectIdentifier)|D(?:ictionary(?:I(?:ndex|terator)|Literal)?|ouble|efault(?:RandomAccessIndices|BidirectionalIndices|Indices))|U(?:n(?:safe(?:RawPointer|Mutable(?:RawPointer|BufferPointer|Pointer)|BufferPointer(?:Generator|Iterator)?|Pointer)|icodeScalar(?:View)?|foldSequence|managed)|TF(?:16(?:View)?|8(?:View)?|32)|Int(?:16|8|32|64)?)|Join(?:Generator|ed(?:Sequence|Iterator))|PermutationGenerator|E(?:numerate(?:Generator|Sequence|d(?:Sequence|Iterator))|mpty(?:Generator|Collection|Iterator))|Fl(?:oat(?:80)?|atten(?:Generator|BidirectionalCollection(?:Index)?|Sequence|Collection(?:Index)?|Iterator))|L(?:egacyChildren|azy(?:RandomAccessCollection|Map(?:RandomAccessCollection|Generator|BidirectionalCollection|Sequence|Collection|Iterator)|BidirectionalCollection|Sequence|Collection|Filter(?:Generator|BidirectionalCollection|Sequence|Collection|I(?:ndex|terator))))|A(?:ny(?:RandomAccessCollection|Generator|BidirectionalCollection|Sequence|Hashable|Collection|I(?:ndex|terator))|utoreleasingUnsafeMutablePointer|rray(?:Slice)?))\\b", name: "support.type.swift" }, { comment: "Structs in the standard library in Swift 2 only", match: "\\b(?:R(?:everse(?:RandomAccess(?:Collection|Index)|Collection|Index)|awByte)|Map(?:Generator|Sequence|Collection)|S(?:inkOf|etGenerator)|Zip2Generator|DictionaryGenerator|Filter(?:Generator|Sequence|Collection(?:Index)?)|LazyForwardCollection|Any(?:RandomAccessIndex|BidirectionalIndex|Forward(?:Collection|Index)))\\b", name: "support.type.swift" }] }, "builtin-types-builtin-typealias": { patterns: [{ comment: "Typealiases in the standard library in Swift 3", match: "\\b(?:Raw(?:Significand|Exponent|Value)|B(?:ooleanLiteralType|uffer|ase)|S(?:t(?:orage|r(?:i(?:ngLiteralType|de)|eam(?:1|2)))|ubSequence)|NativeBuffer|C(?:hild(?:ren)?|Bool|S(?:hort|ignedChar)|odeUnit|Char(?:16|32)?|Int|Double|Unsigned(?:Short|Char|Int|Long(?:Long)?)|Float|WideChar|Long(?:Long)?)|I(?:n(?:t(?:Max|egerLiteralType)|d(?:ices|ex(?:Distance)?))|terator)|Distance|U(?:n(?:icodeScalar(?:Type|Index|View|LiteralType)|foldFirstSequence)|TF(?:16(?:Index|View)|8Index)|IntMax)|E(?:lement(?:s)?|x(?:tendedGraphemeCluster(?:Type|LiteralType)|ponent))|V(?:oid|alue)|Key|Float(?:32|LiteralType|64)|AnyClass)\\b", name: "support.type.swift" }, { comment: "Typealiases in the standard library in Swift 2 only", match: "\\b(?:Generator|PlaygroundQuickLook|UWord|Word)\\b", name: "support.type.swift" }] }, "code-block": { begin: "\\{", beginCaptures: { 0: { name: "punctuation.section.scope.begin.swift" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.section.scope.end.swift" } }, patterns: [{ include: "$self" }] }, comments: { patterns: [{ captures: { 1: { name: "punctuation.definition.comment.swift" } }, match: "\\A^(#!).*$\\n?", name: "comment.line.number-sign.swift" }, { begin: "/\\*\\*(?!/)", beginCaptures: { 0: { name: "punctuation.definition.comment.begin.swift" } }, end: "\\*/", endCaptures: { 0: { name: "punctuation.definition.comment.end.swift" } }, name: "comment.block.documentation.swift", patterns: [{ include: "#comments-nested" }] }, { begin: "/\\*:", beginCaptures: { 0: { name: "punctuation.definition.comment.begin.swift" } }, end: "\\*/", endCaptures: { 0: { name: "punctuation.definition.comment.end.swift" } }, name: "comment.block.documentation.playground.swift", patterns: [{ include: "#comments-nested" }] }, { begin: "/\\*", beginCaptures: { 0: { name: "punctuation.definition.comment.begin.swift" } }, end: "\\*/", endCaptures: { 0: { name: "punctuation.definition.comment.end.swift" } }, name: "comment.block.swift", patterns: [{ include: "#comments-nested" }] }, { match: "\\*/", name: "invalid.illegal.unexpected-end-of-block-comment.swift" }, { begin: "(^[ \\t]+)?(?=//)", beginCaptures: { 1: { name: "punctuation.whitespace.comment.leading.swift" } }, end: "(?!\\G)", patterns: [{ begin: "///", beginCaptures: { 0: { name: "punctuation.definition.comment.swift" } }, end: "$", name: "comment.line.triple-slash.documentation.swift" }, { begin: "//:", beginCaptures: { 0: { name: "punctuation.definition.comment.swift" } }, end: "$", name: "comment.line.double-slash.documentation.swift" }, { begin: "//", beginCaptures: { 0: { name: "punctuation.definition.comment.swift" } }, end: "$", name: "comment.line.double-slash.swift" }] }] }, "comments-nested": { begin: "/\\*", end: "\\*/", patterns: [{ include: "#comments-nested" }] }, "compiler-control": { patterns: [{ begin: "^\\s*(#)(if|elseif)\\s+(false)\\b.*?(?=$|//|/\\*)", beginCaptures: { 0: { name: "meta.preprocessor.conditional.swift" }, 1: { name: "punctuation.definition.preprocessor.swift" }, 2: { name: "keyword.control.import.preprocessor.conditional.swift" }, 3: { name: "constant.language.boolean.swift" } }, contentName: "comment.block.preprocessor.swift", end: "(?=^\\s*(#(elseif|else|endif)\\b))" }, { begin: "^\\s*(#)(if|elseif)\\s+", captures: { 1: { name: "punctuation.definition.preprocessor.swift" }, 2: { name: "keyword.control.import.preprocessor.conditional.swift" } }, end: "(?=\\s*(?://|/\\*))|$", name: "meta.preprocessor.conditional.swift", patterns: [{ match: "(&&|\\|\\|)", name: "keyword.operator.logical.swift" }, { match: "\\b(true|false)\\b", name: "constant.language.boolean.swift" }, { captures: { 1: { name: "keyword.other.condition.swift" }, 2: { name: "punctuation.definition.parameters.begin.swift" }, 3: { name: "support.constant.platform.architecture.swift" }, 4: { name: "punctuation.definition.parameters.end.swift" } }, match: "\\b(arch)\\s*(\\()\\s*(?:(arm|arm64|powerpc64|powerpc64le|i386|x86_64|s390x)|\\w+)\\s*(\\))" }, { captures: { 1: { name: "keyword.other.condition.swift" }, 2: { name: "punctuation.definition.parameters.begin.swift" }, 3: { name: "support.constant.platform.os.swift" }, 4: { name: "punctuation.definition.parameters.end.swift" } }, match: "\\b(os)\\s*(\\()\\s*(?:(macOS|OSX|iOS|tvOS|watchOS|visionOS|Android|Linux|FreeBSD|Windows|PS4)|\\w+)\\s*(\\))" }, { captures: { 1: { name: "keyword.other.condition.swift" }, 2: { name: "punctuation.definition.parameters.begin.swift" }, 3: { name: "entity.name.type.module.swift" }, 4: { name: "punctuation.definition.parameters.end.swift" } }, match: "\\b(canImport)\\s*(\\()([\\p{L}_][\\p{L}_\\p{N}\\p{M}]*)(\\))" }, { begin: "\\b(targetEnvironment)\\s*(\\()", beginCaptures: { 1: { name: "keyword.other.condition.swift" }, 2: { name: "punctuation.definition.parameters.begin.swift" } }, end: "(\\))|$", endCaptures: { 1: { name: "punctuation.definition.parameters.end.swift" } }, patterns: [{ match: "\\b(simulator|UIKitForMac)\\b", name: "support.constant.platform.environment.swift" }] }, { begin: "\\b(swift|compiler)\\s*(\\()", beginCaptures: { 1: { name: "keyword.other.condition.swift" }, 2: { name: "punctuation.definition.parameters.begin.swift" } }, end: "(\\))|$", endCaptures: { 1: { name: "punctuation.definition.parameters.end.swift" } }, patterns: [{ match: ">=|<", name: "keyword.operator.comparison.swift" }, { match: "\\b[0-9]+(?:\\.[0-9]+)*\\b", name: "constant.numeric.swift" }] }] }, { captures: { 1: { name: "punctuation.definition.preprocessor.swift" }, 2: { name: "keyword.control.import.preprocessor.conditional.swift" }, 3: { patterns: [{ match: "\\S+", name: "invalid.illegal.character-not-allowed-here.swift" }] } }, match: "^\\s*(#)(else|endif)(.*?)(?=$|//|/\\*)", name: "meta.preprocessor.conditional.swift" }, { captures: { 1: { name: "punctuation.definition.preprocessor.swift" }, 2: { name: "keyword.control.import.preprocessor.sourcelocation.swift" }, 4: { name: "punctuation.definition.parameters.begin.swift" }, 5: { patterns: [{ begin: '(file)\\s*(:)\\s*(?=")', beginCaptures: { 1: { name: "support.variable.parameter.swift" }, 2: { name: "punctuation.separator.key-value.swift" } }, end: "(?!\\G)", patterns: [{ include: "#literals" }] }, { captures: { 1: { name: "support.variable.parameter.swift" }, 2: { name: "punctuation.separator.key-value.swift" }, 3: { name: "constant.numeric.integer.swift" } }, match: "(line)\\s*(:)\\s*([0-9]+)" }, { match: ",", name: "punctuation.separator.parameters.swift" }, { match: "\\S+", name: "invalid.illegal.character-not-allowed-here.swift" }] }, 6: { name: "punctuation.definition.parameters.begin.swift" }, 7: { patterns: [{ match: "\\S+", name: "invalid.illegal.character-not-allowed-here.swift" }] } }, match: "^\\s*(#)(sourceLocation)((\\()([^)]*)(\\)))(.*?)(?=$|//|/\\*)", name: "meta.preprocessor.sourcelocation.swift" }] }, conditionals: { patterns: [{ begin: "(?<!\\.)\\b(if|guard|switch|for)\\b", beginCaptures: { 1: { patterns: [{ include: "#keywords" }] } }, end: "(?=\\{)", patterns: [{ include: "#expressions-without-trailing-closures" }] }, { begin: "(?<!\\.)\\b(while)\\b", beginCaptures: { 1: { patterns: [{ include: "#keywords" }] } }, comment: "while can be the end of a repeat-while statement so doesn't necessarily have braces after it", end: "(?=\\{)|$", patterns: [{ include: "#expressions-without-trailing-closures" }] }] }, declarations: { patterns: [{ include: "#declarations-function" }, { include: "#declarations-function-initializer" }, { include: "#declarations-function-subscript" }, { include: "#declarations-typed-variable-declaration" }, { include: "#declarations-import" }, { include: "#declarations-operator" }, { include: "#declarations-precedencegroup" }, { include: "#declarations-protocol" }, { include: "#declarations-type" }, { include: "#declarations-extension" }, { include: "#declarations-typealias" }, { include: "#declarations-macro" }] }, "declarations-available-types": { patterns: [{ include: "#comments" }, { include: "#builtin-types" }, { include: "#attributes" }, { match: "\\basync\\b", name: "storage.modifier.async.swift" }, { match: "\\b(?:throws|rethrows)\\b", name: "storage.modifier.exception.swift" }, { match: "\\bsome\\b", name: "keyword.other.operator.type.opaque.swift" }, { match: "\\bany\\b", name: "keyword.other.operator.type.existential.swift" }, { match: "\\b(?:repeat|each)\\b", name: "keyword.control.loop.swift" }, { match: "\\b(?:inout|isolated|borrowing|consuming)\\b", name: "storage.modifier.swift" }, { match: "\\bSelf\\b", name: "variable.language.swift" }, { captures: { 1: { name: "keyword.operator.type.function.swift" } }, match: "(?<![/=\\-+!*%<>&|\\^~.])(->)(?![/=\\-+!*%<>&|\\^~.])" }, { captures: { 1: { name: "keyword.operator.type.composition.swift" } }, comment: "Swift 3: A & B", match: "(?<![/=\\-+!*%<>&|\\^~.])(&)(?![/=\\-+!*%<>&|\\^~.])" }, { match: "[?!]", name: "keyword.operator.type.optional.swift" }, { match: "\\.\\.\\.", name: "keyword.operator.function.variadic-parameter.swift" }, { comment: "Swift 2: protocol<A, B>", match: "\\bprotocol\\b", name: "keyword.other.type.composition.swift" }, { match: "(?<=\\.)(?:Protocol|Type)\\b", name: "keyword.other.type.metatype.swift" }, { include: "#declarations-available-types-tuple-type" }, { include: "#declarations-available-types-collection-type" }, { include: "#declarations-generic-argument-clause" }] }, "declarations-available-types-collection-type": { begin: "\\[", beginCaptures: { 0: { name: "punctuation.section.collection-type.begin.swift" } }, comment: "array and dictionary types [Value] and [Key: Value]", end: "\\]|(?=[>){}])", endCaptures: { 0: { name: "punctuation.section.collection-type.end.swift" } }, patterns: [{ include: "#declarations-available-types" }, { begin: ":", beginCaptures: { 0: { name: "punctuation.separator.key-value.swift" } }, end: "(?=\\]|[>){}])", patterns: [{ match: ":", name: "invalid.illegal.extra-colon-in-dictionary-type.swift" }, { include: "#declarations-available-types" }] }] }, "declarations-available-types-tuple-type": { begin: "\\(", beginCaptures: { 0: { name: "punctuation.section.tuple-type.begin.swift" } }, end: "\\)|(?=[>\\]{}])", endCaptures: { 0: { name: "punctuation.section.tuple-type.end.swift" } }, patterns: [{ include: "#declarations-available-types" }] }, "declarations-extension": { begin: "\\b(extension)\\s+((?<q>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>))", beginCaptures: { 1: { name: "storage.type.$1.swift" }, 2: { name: "entity.name.type.swift", patterns: [{ include: "#declarations-available-types" }] }, 3: { name: "punctuation.definition.identifier.swift" }, 4: { name: "punctuation.definition.identifier.swift" } }, end: "(?<=\\})", name: "meta.definition.type.$1.swift", patterns: [{ include: "#comments" }, { comment: "SE-0143: Conditional Conformances", include: "#declarations-generic-where-clause" }, { include: "#declarations-inheritance-clause" }, { begin: "\\{", beginCaptures: { 0: { name: "punctuation.definition.type.begin.swift" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.type.end.swift" } }, name: "meta.definition.type.body.swift", patterns: [{ include: "$self" }] }] }, "declarations-function": { begin: `(?x)
\\b
(func)
\\s+
(
(?<q>\`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>)
| (?:
(
(?<oph>
[/=\\-+!*%<>&|^~?]
| [\\x{00A1}-\\x{00A7}]
| [\\x{00A9}\\x{00AB}]
| [\\x{00AC}\\x{00AE}]
| [\\x{00B0}-\\x{00B1}\\x{00B6}\\x{00BB}\\x{00BF}\\x{00D7}\\x{00F7}]
| [\\x{2016}-\\x{2017}\\x{2020}-\\x{2027}]
| [\\x{2030}-\\x{203E}]
| [\\x{2041}-\\x{2053}]
| [\\x{2055}-\\x{205E}]
| [\\x{2190}-\\x{23FF}]
| [\\x{2500}-\\x{2775}]
| [\\x{2794}-\\x{2BFF}]
| [\\x{2E00}-\\x{2E7F}]
| [\\x{3001}-\\x{3003}]
| [\\x{3008}-\\x{3030}]
)
(
\\g<oph>
| (?<opc>
[\\x{0300}-\\x{036F}]
| [\\x{1DC0}-\\x{1DFF}]
| [\\x{20D0}-\\x{20FF}]
| [\\x{FE00}-\\x{FE0F}]
| [\\x{FE20}-\\x{FE2F}]
| [\\x{E0100}-\\x{E01EF}]
)
)*
)
| ( \\. ( \\g<oph> | \\g<opc> | \\. )+ )
)
)
\\s*
(?=\\(|<)`, beginCaptures: { 1: { name: "storage.type.function.swift" }, 2: { name: "entity.name.function.swift" }, 3: { name: "punctuation.definition.identifier.swift" }, 4: { name: "punctuation.definition.identifier.swift" } }, end: "(?<=\\})|$(?# functions in protocol declarations or generated interfaces have no body)", name: "meta.definition.function.swift", patterns: [{ include: "#comments" }, { include: "#declarations-generic-parameter-clause" }, { include: "#declarations-parameter-clause" }, { include: "#declarations-function-result" }, { include: "#async-throws" }, { comment: "Swift 3: generic constraints after the parameters and return type", include: "#declarations-generic-where-clause" }, { begin: "(\\{)", beginCaptures: { 1: { name: "punctuation.section.function.begin.swift" } }, end: "(\\})", endCaptures: { 1: { name: "punctuation.section.function.end.swift" } }, name: "meta.definition.function.body.swift", patterns: [{ include: "$self" }] }] }, "declarations-function-initializer": { begin: "(?<!\\.)\\b(init[?!]*(?# only one is valid, but we want the in⇥ snippet to produce something that looks good))\\s*(?=\\(|<)", beginCaptures: { 1: { name: "storage.type.function.swift", patterns: [{ match: "(?<=[?!])[?!]+", name: "invalid.illegal.character-not-allowed-here.swift" }] } }, end: "(?<=\\})|$", name: "meta.definition.function.initializer.swift", patterns: [{ include: "#comments" }, { include: "#declarations-generic-parameter-clause" }, { include: "#declarations-parameter-clause" }, { include: "#async-throws" }, { comment: "Swift 3: generic constraints after the parameters and return type", include: "#declarations-generic-where-clause" }, { begin: "(\\{)", beginCaptures: { 1: { name: "punctuation.section.function.begin.swift" } }, end: "(\\})", endCaptures: { 1: { name: "punctuation.section.function.end.swift" } }, name: "meta.definition.function.body.swift", patterns: [{ include: "$self" }] }] }, "declarations-function-result": { begin: "(?<![/=\\-+!*%<>&|\\^~.])(->)(?![/=\\-+!*%<>&|\\^~.])\\s*", beginCaptures: { 1: { name: "keyword.operator.function-result.swift" } }, end: "(?!\\G)(?=\\{|\\bwhere\\b|;|=)|$", name: "meta.function-result.swift", patterns: [{ include: "#declarations-available-types" }] }, "declarations-function-subscript": { begin: "(?<!\\.)\\b(subscript)\\s*(?=\\(|<)", beginCaptures: { 1: { name: "storage.type.function.swift" } }, end: "(?<=\\})|$", name: "meta.definition.function.subscript.swift", patterns: [{ include: "#comments" }, { include: "#declarations-generic-parameter-clause" }, { include: "#declarations-parameter-clause" }, { include: "#declarations-function-result" }, { include: "#async-throws" }, { include: "#declarations-generic-where-clause" }, { begin: "(\\{)", beginCaptures: { 1: { name: "punctuation.section.function.begin.swift" } }, end: "(\\})", endCaptures: { 1: { name: "punctuation.section.function.end.swift" } }, name: "meta.definition.function.body.swift", patterns: [{ include: "$self" }] }] }, "declarations-generic-argument-clause": { begin: "<", beginCaptures: { 0: { name: "punctuation.separator.generic-argument-clause.begin.swift" } }, end: ">|(?=[)\\]{}])", endCaptures: { 0: { name: "punctuation.separator.generic-argument-clause.end.swift" } }, name: "meta.generic-argument-clause.swift", patterns: [{ include: "#declarations-available-types" }] }, "declarations-generic-parameter-clause": { begin: "<", beginCaptures: { 0: { name: "punctuation.separator.generic-parameter-clause.begin.swift" } }, end: ">|(?=[^\\w\\d:<>\\s,=&`])(?# characters besides these are never valid in a generic param list -- even if it's not really a valid clause, we should stop trying to parse it if we see one of them.)", endCaptures: { 0: { name: "punctuation.separator.generic-parameter-clause.end.swift" } }, name: "meta.generic-parameter-clause.swift", patterns: [{ include: "#comments" }, { comment: "Swift 2: constraints inside the generic param list", include: "#declarations-generic-where-clause" }, { match: "\\beach\\b", name: "keyword.control.loop.swift" }, { captures: { 1: { name: "variable.language.generic-parameter.swift" } }, match: "\\b((?!\\d)\\w[\\w\\d]*)\\b" }, { match: ",", name: "punctuation.separator.generic-parameters.swift" }, { begin: "(:)\\s*", beginCaptures: { 1: { name: "punctuation.separator.generic-parameter-constraint.swift" } }, end: "(?=[,>]|(?!\\G)\\bwhere\\b)", name: "meta.generic-parameter-constraint.swift", patterns: [{ begin: "\\G", end: "(?=[,>]|(?!\\G)\\bwhere\\b)", name: "entity.other.inherited-class.swift", patterns: [{ include: "#declarations-type-identifier" }, { include: "#declarations-type-operators" }] }] }] }, "declarations-generic-where-clause": { begin: "\\b(where)\\b\\s*", beginCaptures: { 1: { name: "keyword.other.generic-constraint-introducer.swift" } }, end: "(?!\\G)$|(?=[>{};\\n]|//|/\\*)", name: "meta.generic-where-clause.swift", patterns: [{ include: "#comments" }, { include: "#declarations-generic-where-clause-requirement-list" }] }, "declarations-generic-where-clause-requirement-list": { begin: "\\G|,\\s*", end: "(?=[,>{};\\n]|//|/\\*)", patterns: [{ include: "#comments" }, { include: "#constraint" }, { include: "#declarations-available-types" }, { begin: "(?<![/=\\-+!*%<>&|\\^~.])(==)(?![/=\\-+!*%<>&|\\^~.])", beginCaptures: { 1: { name: "keyword.operator.generic-constraint.same-type.swift" } }, end: "(?=\\s*[,>{};\\n]|//|/\\*)", name: "meta.generic-where-clause.same-type-requirement.swift", patterns: [{ include: "#declarations-available-types" }] }, { begin: "(?<![/=\\-+!*%<>&|\\^~.])(:)(?![/=\\-+!*%<>&|\\^~.])", beginCaptures: { 1: { name: "keyword.operator.generic-constraint.conforms-to.swift" } }, end: "(?=\\s*[,>{};\\n]|//|/\\*)", name: "meta.generic-where-clause.conformance-requirement.swift", patterns: [{ begin: "\\G\\s*", contentName: "entity.other.inherited-class.swift", end: "(?=\\s*[,>{};\\n]|//|/\\*)", patterns: [{ include: "#declarations-available-types" }] }] }] }, "declarations-import": { begin: "(?<!\\.)\\b(import)\\s+", beginCaptures: { 1: { name: "keyword.control.import.swift" } }, end: "(;)|$\\n?|(?=//|/\\*)", endCaptures: { 1: { name: "punctuation.terminator.statement.swift" } }, name: "meta.import.swift", patterns: [{ begin: "\\G(?!;|$|//|/\\*)(?:(typealias|struct|class|actor|enum|protocol|var|func)\\s+)?", beginCaptures: { 1: { name: "storage.modifier.swift" } }, end: "(?=;|$|//|/\\*)", patterns: [{ captures: { 1: { name: "punctuation.definition.identifier.swift" }, 2: { name: "punctuation.definition.identifier.swift" } }, match: `(?x)
(?<=\\G|\\.)
(?<q>\`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>)`, name: "entity.name.type.swift" }, { match: `(?x)
(?<=\\G|\\.)
\\$[0-9]+`, name: "entity.name.type.swift" }, { captures: { 1: { patterns: [{ match: "\\.", name: "invalid.illegal.dot-not-allowed-here.swift" }] } }, match: `(?x)
(?<=\\G|\\.)
(?:
(
(?<oph>
[/=\\-+!*%<>&|^~?]
| [\\x{00A1}-\\x{00A7}]
| [\\x{00A9}\\x{00AB}]
| [\\x{00AC}\\x{00AE}]
| [\\x{00B0}-\\x{00B1}\\x{00B6}\\x{00BB}\\x{00BF}\\x{00D7}\\x{00F7}]
| [\\x{2016}-\\x{2017}\\x{2020}-\\x{2027}]
| [\\x{2030}-\\x{203E}]
| [\\x{2041}-\\x{2053}]
| [\\x{2055}-\\x{205E}]
| [\\x{2190}-\\x{23FF}]
| [\\x{2500}-\\x{2775}]
| [\\x{2794}-\\x{2BFF}]
| [\\x{2E00}-\\x{2E7F}]
| [\\x{3001}-\\x{3003}]
| [\\x{3008}-\\x{3030}]
)
(
\\g<oph>
| (?<opc>
[\\x{0300}-\\x{036F}]
| [\\x{1DC0}-\\x{1DFF}]
| [\\x{20D0}-\\x{20FF}]
| [\\x{FE00}-\\x{FE0F}]
| [\\x{FE20}-\\x{FE2F}]
| [\\x{E0100}-\\x{E01EF}]
)
)*
)
| ( \\. ( \\g<oph> | \\g<opc> | \\. )+ )
)
(?=\\.|;|$|//|/\\*|\\s)`, name: "entity.name.type.swift" }, { match: "\\.", name: "punctuation.separator.import.swift" }, { begin: "(?!\\s*(;|$|//|/\\*))", end: "(?=\\s*(;|$|//|/\\*))", name: "invalid.illegal.character-not-allowed-here.swift" }] }] }, "declarations-inheritance-clause": { begin: "(:)(?=\\s*\\{)|(:)\\s*", beginCaptures: { 1: { name: "invalid.illegal.empty-inheritance-clause.swift" }, 2: { name: "punctuation.separator.inheritance-clause.swift" } }, end: "(?!\\G)$|(?=[={}]|(?!\\G)\\bwhere\\b)", name: "meta.inheritance-clause.swift", patterns: [{ begin: "\\bclass\\b", beginCaptures: { 0: { name: "storage.type.class.swift" } }, end: "(?=[={}]|(?!\\G)\\bwhere\\b)", patterns: [{ include: "#comments" }, { include: "#declarations-inheritance-clause-more-types" }] }, { begin: "\\G", end: "(?!\\G)$|(?=[={}]|(?!\\G)\\bwhere\\b)", patterns: [{ include: "#comments" }, { include: "#declarations-inheritance-clause-inherited-type" }, { include: "#declarations-inheritance-clause-more-types" }, { include: "#declarations-type-operators" }] }] }, "declarations-inheritance-clause-inherited-type": { begin: "(?=[`\\p{L}_])", end: "(?!\\G)", name: "entity.other.inherited-class.swift", patterns: [{ include: "#declarations-type-identifier" }] }, "declarations-inheritance-clause-more-types": { begin: ",\\s*", end: "(?!\\G)(?!//|/\\*)|(?=[,={}]|(?!\\G)\\bwhere\\b)", name: "meta.inheritance-list.more-types", patterns: [{ include: "#comments" }, { include: "#declarations-inheritance-clause-inherited-type" }, { include: "#declarations-inheritance-clause-more-types" }, { include: "#declarations-type-operators" }] }, "declarations-macro": { begin: `(?x)
\\b
(macro)
\\s+
((?<q>\`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>))
\\s*
(?=\\(|<|=)`, beginCaptures: { 1: { name: "storage.type.function.swift" }, 2: { name: "entity.name.function.swift" }, 3: { name: "punctuation.definition.identifier.swift" }, 4: { name: "punctuation.definition.identifier.swift" } }, end: "$|(?=;|//|/\\*|\\}|=)", name: "meta.definition.macro.swift", patterns: [{ include: "#comments" }, { include: "#declarations-generic-parameter-clause" }, { include: "#declarations-parameter-clause" }, { include: "#declarations-function-result" }, { include: "#async-throws" }, { comment: "Swift 3: generic constraints after the parameters and return type", include: "#declarations-generic-where-clause" }] }, "declarations-operator": { begin: `(?x)
(?:
\\b(prefix|infix|postfix)
\\s+
)?
\\b
(operator)
\\s+
(
(
(?<oph>
[/=\\-+!*%<>&|^~?]
| [\\x{00A1}-\\x{00A7}]
| [\\x{00A9}\\x{00AB}]
| [\\x{00AC}\\x{00AE}]
| [\\x{00B0}-\\x{00B1}\\x{00B6}\\x{00BB}\\x{00BF}\\x{00D7}\\x{00F7}]
| [\\x{2016}-\\x{2017}\\x{2020}-\\x{2027}]
| [\\x{2030}-\\x{203E}]
| [\\x{2041}-\\x{2053}]
| [\\x{2055}-\\x{205E}]
| [\\x{2190}-\\x{23FF}]
| [\\x{2500}-\\x{2775}]
| [\\x{2794}-\\x{2BFF}]
| [\\x{2E00}-\\x{2E7F}]
| [\\x{3001}-\\x{3003}]
| [\\x{3008}-\\x{3030}]
)
(
\\g<oph>
| \\.
| (?<opc>
[\\x{0300}-\\x{036F}]
| [\\x{1DC0}-\\x{1DFF}]
| [\\x{20D0}-\\x{20FF}]
| [\\x{FE00}-\\x{FE0F}]
| [\\x{FE20}-\\x{FE2F}]
| [\\x{E0100}-\\x{E01EF}]
)
)*+
)
| ( \\. ( \\g<oph> | \\g<opc> | \\. )++ )
)
\\s*`, beginCaptures: { 1: { name: "storage.modifier.swift" }, 2: { name: "storage.type.function.operator.swift" }, 3: { name: "entity.name.function.operator.swift" }, 4: { comment: "workaround for https://github.com/microsoft/vscode-textmate/issues/140#issuecomment-1793610346", name: "entity.name.function.operator.swift", patterns: [{ match: "\\.", name: "invalid.illegal.dot-not-allowed-here.swift" }] } }, end: "(;)|$\\n?|(?=//|/\\*)", endCaptures: { 1: { name: "punctuation.terminator.statement.swift" } }, name: "meta.definition.operator.swift", patterns: [{ include: "#declarations-operator-swift2" }, { include: "#declarations-operator-swift3" }, { match: "((?!$|;|//|/\\*)\\S)+", name: "invalid.illegal.character-not-allowed-here.swift" }] }, "declarations-operator-swift2": { begin: "\\G(\\{)", beginCaptures: { 1: { name: "punctuation.definition.operator.begin.swift" } }, end: "(\\})", endCaptures: { 1: { name: "punctuation.definition.operator.end.swift" } }, patterns: [{ include: "#comments" }, { captures: { 1: { name: "storage.modifier.swift" }, 2: { name: "keyword.other.operator.associativity.swift" } }, match: "\\b(associativity)\\s+(left|right)\\b" }, { captures: { 1: { name: "storage.modifier.swift" }, 2: { name: "constant.numeric.integer.swift" } }, match: "\\b(precedence)\\s+([0-9]+)\\b" }, { captures: { 1: { name: "storage.modifier.swift" } }, match: "\\b(assignment)\\b" }] }, "declarations-operator-swift3": { captures: { 2: { name: "entity.other.inherited-class.swift", patterns: [{ include: "#declarations-types-precedencegroup" }] }, 3: { name: "punctuation.definition.identifier.swift" }, 4: { name: "punctuation.definition.identifier.swift" } }, match: "\\G(:)\\s*((?<q>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>))" }, "declarations-parameter-clause": { begin: "(\\()", beginCaptures: { 1: { name: "punctuation.definition.parameters.begin.swift" } }, end: "(\\))(?:\\s*(async)\\b)?", endCaptures: { 1: { name: "punctuation.definition.parameters.end.swift" }, 2: { name: "storage.modifier.async.swift" } }, name: "meta.parameter-clause.swift", patterns: [{ include: "#declarations-parameter-list" }] }, "declarations-parameter-list": { patterns: [{ captures: { 1: { name: "entity.name.function.swift" }, 2: { name: "punctuation.definition.identifier.swift" }, 3: { name: "punctuation.definition.identifier.swift" }, 4: { name: "variable.parameter.function.swift" }, 5: { name: "punctuation.definition.identifier.swift" }, 6: { name: "punctuation.definition.identifier.swift" } }, comment: "External parameter labels are considered part of the function name", match: "((?<q1>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q1>))\\s+((?<q2>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q2>))(?=\\s*:)" }, { captures: { 1: { name: "variable.parameter.function.swift" }, 2: { name: "entity.name.function.swift" }, 3: { name: "punctuation.definition.identifier.swift" }, 4: { name: "punctuation.definition.identifier.swift" } }, comment: "If no external label is given, the name is both the external label and the internal variable name", match: "(((?<q>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>)))(?=\\s*:)" }, { begin: ":\\s*(?!\\s)", end: "(?=[,)])", patterns: [{ include: "#declarations-available-types" }, { match: ":", name: "invalid.illegal.extra-colon-in-parameter-list.swift" }, { begin: "=", beginCaptures: { 0: { name: "keyword.operator.assignment.swift" } }, comment: "a parameter's default value", end: "(?=[,)])", patterns: [{ include: "#expressions" }] }] }] }, "declarations-precedencegroup": { begin: "\\b(precedencegroup)\\s+((?<q>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>))\\s*(?=\\{)", beginCaptures: { 1: { name: "storage.type.precedencegroup.swift" }, 2: { name: "entity.name.type.precedencegroup.swift" }, 3: { name: "punctuation.definition.identifier.swift" }, 4: { name: "punctuation.definition.identifier.swift" } }, end: "(?!\\G)", name: "meta.definition.precedencegroup.swift", patterns: [{ begin: "\\{", beginCaptures: { 0: { name: "punctuation.definition.precedencegroup.begin.swift" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.precedencegroup.end.swift" } }, patterns: [{ include: "#comments" }, { captures: { 1: { name: "storage.modifier.swift" }, 2: { name: "entity.other.inherited-class.swift", patterns: [{ include: "#declarations-types-precedencegroup" }] }, 3: { name: "punctuation.definition.identifier.swift" }, 4: { name: "punctuation.definition.identifier.swift" } }, match: "\\b(higherThan|lowerThan)\\s*:\\s*((?<q>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>))" }, { captures: { 1: { name: "storage.modifier.swift" }, 2: { name: "keyword.other.operator.associativity.swift" } }, match: "\\b(associativity)\\b(?:\\s*:\\s*(right|left|none)\\b)?" }, { captures: { 1: { name: "storage.modifier.swift" }, 2: { name: "constant.language.boolean.swift" } }, match: "\\b(assignment)\\b(?:\\s*:\\s*(true|false)\\b)?" }] }] }, "declarations-protocol": { begin: "\\b(protocol)\\s+((?<q>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>))", beginCaptures: { 1: { name: "storage.type.$1.swift" }, 2: { name: "entity.name.type.$1.swift" }, 3: { name: "punctuation.definition.identifier.swift" }, 4: { name: "punctuation.definition.identifier.swift" } }, end: "(?<=\\})", name: "meta.definition.type.protocol.swift", patterns: [{ include: "#comments" }, { include: "#declarations-inheritance-clause" }, { comment: "SE-0142: Permit where clauses to constrain associated types", include: "#declarations-generic-where-clause" }, { begin: "\\{", beginCaptures: { 0: { name: "punctuation.definition.type.begin.swift" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.type.end.swift" } }, name: "meta.definition.type.body.swift", patterns: [{ include: "#declarations-protocol-protocol-method" }, { include: "#declarations-protocol-protocol-initializer" }, { include: "#declarations-protocol-associated-type" }, { include: "$self" }] }] }, "declarations-protocol-associated-type": { begin: "\\b(associatedtype)\\s+((?<q>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>))\\s*", beginCaptures: { 1: { name: "keyword.other.declaration-specifier.swift" }, 2: { name: "variable.language.associatedtype.swift" }, 3: { name: "punctuation.definition.identifier.swift" }, 4: { name: "punctuation.definition.identifier.swift" } }, end: "(?!\\G)$|(?=[;}]|$)", name: "meta.definition.associatedtype.swift", patterns: [{ include: "#declarations-inheritance-clause" }, { comment: "SE-0142: Permit where clauses to constrain associated types", include: "#declarations-generic-where-clause" }, { include: "#declarations-typealias-assignment" }] }, "declarations-protocol-protocol-initializer": { begin: "(?<!\\.)\\b(init[?!]*(?# only one is valid, but we want the in⇥ snippet to produce something that looks good))\\s*(?=\\(|<)", beginCaptures: { 1: { name: "storage.type.function.swift", patterns: [{ match: "(?<=[?!])[?!]+", name: "invalid.illegal.character-not-allowed-here.swift" }] } }, end: "$|(?=;|//|/\\*|\\})", name: "meta.definition.function.initializer.swift", patterns: [{ include: "#comments" }, { include: "#declarations-generic-parameter-clause" }, { include: "#declarations-parameter-clause" }, { include: "#async-throws" }, { comment: "Swift 3: generic constraints after the parameters and return type", include: "#declarations-generic-where-clause" }, { begin: "\\{", beginCaptures: { 0: { name: "punctuation.section.function.begin.swift" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.section.function.end.swift" } }, name: "invalid.illegal.function-body-not-allowed-in-protocol.swift", patterns: [{ include: "$self" }] }] }, "declarations-protocol-protocol-method": { begin: `(?x)
\\b
(func)
\\s+
(
(?<q>\`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>)
| (?:
(
(?<oph>
[/=\\-+!*%<>&|^~?]
| [\\x{00A1}-\\x{00A7}]
| [\\x{00A9}\\x{00AB}]
| [\\x{00AC}\\x{00AE}]
| [\\x{00B0}-\\x{00B1}\\x{00B6}\\x{00BB}\\x{00BF}\\x{00D7}\\x{00F7}]
| [\\x{2016}-\\x{2017}\\x{2020}-\\x{2027}]
| [\\x{2030}-\\x{203E}]
| [\\x{2041}-\\x{2053}]
| [\\x{2055}-\\x{205E}]
| [\\x{2190}-\\x{23FF}]
| [\\x{2500}-\\x{2775}]
| [\\x{2794}-\\x{2BFF}]
| [\\x{2E00}-\\x{2E7F}]
| [\\x{3001}-\\x{3003}]
| [\\x{3008}-\\x{3030}]
)
(
\\g<oph>
| (?<opc>
[\\x{0300}-\\x{036F}]
| [\\x{1DC0}-\\x{1DFF}]
| [\\x{20D0}-\\x{20FF}]
| [\\x{FE00}-\\x{FE0F}]
| [\\x{FE20}-\\x{FE2F}]
| [\\x{E0100}-\\x{E01EF}]
)
)*
)
| ( \\. ( \\g<oph> | \\g<opc> | \\. )+ )
)
)
\\s*
(?=\\(|<)`, beginCaptures: { 1: { name: "storage.type.function.swift" }, 2: { name: "entity.name.function.swift" }, 3: { name: "punctuation.definition.identifier.swift" }, 4: { name: "punctuation.definition.identifier.swift" } }, end: "$|(?=;|//|/\\*|\\})", name: "meta.definition.function.swift", patterns: [{ include: "#comments" }, { include: "#declarations-generic-parameter-clause" }, { include: "#declarations-parameter-clause" }, { include: "#declarations-function-result" }, { include: "#async-throws" }, { comment: "Swift 3: generic constraints after the parameters and return type", include: "#declarations-generic-where-clause" }, { begin: "\\{", beginCaptures: { 0: { name: "punctuation.section.function.begin.swift" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.section.function.end.swift" } }, name: "invalid.illegal.function-body-not-allowed-in-protocol.swift", patterns: [{ include: "$self" }] }] }, "declarations-type": { patterns: [{ begin: "\\b(class(?!\\s+(?:func|var|let)\\b)|struct|actor)\\b\\s*((?<q>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>))", beginCaptures: { 1: { name: "storage.type.$1.swift" }, 2: { name: "entity.name.type.$1.swift" }, 3: { name: "punctuation.definition.identifier.swift" }, 4: { name: "punctuation.definition.identifier.swift" } }, end: "(?<=\\})", name: "meta.definition.type.$1.swift", patterns: [{ include: "#comments" }, { include: "#declarations-generic-parameter-clause" }, { comment: "Swift 3: generic constraints after the generic param list", include: "#declarations-generic-where-clause" }, { include: "#declarations-inheritance-clause" }, { begin: "\\{", beginCaptures: { 0: { name: "punctuation.definition.type.begin.swift" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.type.end.swift" } }, name: "meta.definition.type.body.swift", patterns: [{ include: "$self" }] }] }, { include: "#declarations-type-enum" }] }, "declarations-type-enum": { begin: "\\b(enum)\\s+((?<q>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>))", beginCaptures: { 1: { name: "storage.type.$1.swift" }, 2: { name: "entity.name.type.$1.swift" }, 3: { name: "punctuation.definition.identifier.swift" }, 4: { name: "punctuation.definition.identifier.swift" } }, end: "(?<=\\})", name: "meta.definition.type.$1.swift", patterns: [{ include: "#comments" }, { include: "#declarations-generic-parameter-clause" }, { comment: "Swift 3: generic constraints after the generic param list", include: "#declarations-generic-where-clause" }, { include: "#declarations-inheritance-clause" }, { begin: "\\{", beginCaptures: { 0: { name: "punctuation.definition.type.begin.swift" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.type.end.swift" } }, name: "meta.definition.type.body.swift", patterns: [{ include: "#declarations-type-enum-enum-case-clause" }, { include: "$self" }] }] }, "declarations-type-enum-associated-values": { begin: "\\G\\(", beginCaptures: { 0: { name: "punctuation.definition.parameters.begin.swift" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.parameters.end.swift" } }, patterns: [{ include: "#comments" }, { begin: `(?x)
(?:(_)|((?<q1>\`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*\\k<q1>))
\\s+
(((?<q2>\`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*\\k<q2>))
\\s*(:)`, beginCaptures: { 1: { name: "entity.name.function.swift" }, 2: { name: "invalid.illegal.distinct-labels-not-allowed.swift" }, 5: { name: "variable.parameter.function.swift" }, 7: { name: "punctuation.separator.argument-label.swift" } }, end: "(?=[,)\\]])", patterns: [{ include: "#declarations-available-types" }] }, { begin: "(((?<q>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*\\k<q>))\\s*(:)", beginCaptures: { 1: { name: "entity.name.function.swift" }, 2: { name: "variable.parameter.function.swift" }, 4: { name: "punctuation.separator.argument-label.swift" } }, end: "(?=[,)\\]])", patterns: [{ include: "#declarations-available-types" }] }, { begin: "(?![,)\\]])(?=\\S)", comment: "an element without a label (i.e. anything else)", end: "(?=[,)\\]])", patterns: [{ include: "#declarations-available-types" }, { match: ":", name: "invalid.illegal.extra-colon-in-parameter-list.swift" }] }] }, "declarations-type-enum-enum-case": { begin: "(?x)((?<q>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>))\\s*", beginCaptures: { 1: { name: "variable.other.enummember.swift" } }, end: "(?<=\\))|(?![=(])", patterns: [{ include: "#comments" }, { include: "#declarations-type-enum-associated-values" }, { include: "#declarations-type-enum-raw-value-assignment" }] }, "declarations-type-enum-enum-case-clause": { begin: "\\b(case)\\b\\s*", beginCaptures: { 1: { name: "storage.type.enum.case.swift" } }, end: "(?=[;}])|(?!\\G)(?!//|/\\*)(?=[^\\s,])", patterns: [{ include: "#comments" }, { include: "#declarations-type-enum-enum-case" }, { include: "#declarations-type-enum-more-cases" }] }, "declarations-type-enum-more-cases": { begin: ",\\s*", end: "(?!\\G)(?!//|/\\*)(?=[;}]|[^\\s,])", name: "meta.enum-case.more-cases", patterns: [{ include: "#comments" }, { include: "#declarations-type-enum-enum-case" }, { include: "#declarations-type-enum-more-cases" }] }, "declarations-type-enum-raw-value-assignment": { begin: "(=)\\s*", beginCaptures: { 1: { name: "keyword.operator.assignment.swift" } }, end: "(?!\\G)", patterns: [{ include: "#comments" }, { include: "#literals" }] }, "declarations-type-identifier": { begin: "((?<q>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>))\\s*", beginCaptures: { 1: { name: "meta.type-name.swift", patterns: [{ include: "#builtin-types" }] }, 2: { name: "punctuation.definition.identifier.swift" }, 3: { name: "punctuation.definition.identifier.swift" } }, end: "(?!<)", patterns: [{ begin: "(?=<)", end: "(?!\\G)", patterns: [{ include: "#declarations-generic-argument-clause" }] }] }, "declarations-type-operators": { patterns: [{ captures: { 1: { name: "keyword.operator.type.composition.swift" } }, comment: "Swift 3: A & B", match: "(?<![/=\\-+!*%<>&|\\^~.])(&)(?![/=\\-+!*%<>&|\\^~.])" }, { captures: { 1: { name: "keyword.operator.type.requirement-suppression.swift" } }, comment: "SE-0390: Noncopyable structs and enums", match: "(?<![/=\\-+!*%<>&|\\^~.])(~)(?![/=\\-+!*%<>&|\\^~.])" }] }, "declarations-typealias": { begin: "\\b(typealias)\\s+((?<q>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>))\\s*", beginCaptures: { 1: { name: "keyword.other.declaration-specifier.swift" }, 2: { name: "entity.name.type.typealias.swift" }, 3: { name: "punctuation.definition.identifier.swift" }, 4: { name: "punctuation.definition.identifier.swift" } }, end: "(?!\\G)$|(?=;|//|/\\*|$)", name: "meta.definition.typealias.swift", patterns: [{ begin: "\\G(?=<)", end: "(?!\\G)", patterns: [{ include: "#declarations-generic-parameter-clause" }] }, { include: "#declarations-typealias-assignment" }] }, "declarations-typealias-assignment": { begin: "(=)\\s*", beginCaptures: { 1: { name: "keyword.operator.assignment.swift" } }, end: "(?!\\G)$|(?=;|//|/\\*|$)", patterns: [{ include: "#declarations-available-types" }] }, "declarations-typed-variable-declaration": { begin: `(?x)
\\b(?:(async)\\s+)?(let|var)\\b\\s+
(?<q>\`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>)\\s*
:`, beginCaptures: { 1: { name: "storage.modifier.async.swift" }, 2: { name: "keyword.other.declaration-specifier.swift" } }, end: "(?=$|[={])", patterns: [{ include: "#declarations-available-types" }] }, "declarations-types-precedencegroup": { patterns: [{ comment: "Precedence groups in the standard library", match: "\\b(?:BitwiseShift|Assignment|RangeFormation|Casting|Addition|NilCoalescing|Comparison|LogicalConjunction|LogicalDisjunction|Default|Ternary|Multiplication|FunctionArrow)Precedence\\b", name: "support.type.swift" }] }, expressions: { comment: "trailing closures need to be parsed before other member references", patterns: [{ include: "#expressions-without-trailing-closures-or-member-references" }, { include: "#expressions-trailing-closure" }, { include: "#member-reference" }] }, "expressions-trailing-closure": { patterns: [{ captures: { 1: { name: "support.function.any-method.swift" }, 2: { name: "punctuation.definition.identifier.swift" }, 3: { name: "punctuation.definition.identifier.swift" } }, comment: "foo { body } -- a call with a trailing closure and no argument clause", match: "(#?(?<q>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>))(?=\\s*\\{)", name: "meta.function-call.trailing-closure-only.swift" }, { captures: { 1: { name: "support.function.any-method.trailing-closure-label.swift" }, 2: { name: "punctuation.definition.identifier.swift" }, 3: { name: "punctuation.definition.identifier.swift" }, 4: { name: "punctuation.separator.argument-label.swift" } }, comment: "foo: { body } -- labeled-trailing-closure (SE-0279)", match: "((?<q>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>))\\s*(:)(?=\\s*\\{)" }] }, "expressions-without-trailing-closures": { patterns: [{ include: "#expressions-without-trailing-closures-or-member-references" }, { include: "#member-references" }] }, "expressions-without-trailing-closures-or-member-references": { patterns: [{ include: "#comments" }, { include: "#code-block" }, { include: "#attributes" }, { include: "#expressions-without-trailing-closures-or-member-references-closure-parameter" }, { include: "#literals" }, { include: "#operators" }, { include: "#builtin-types" }, { include: "#builtin-functions" }, { include: "#builtin-global-functions" }, { include: "#builtin-properties" }, { include: "#expressions-without-trailing-closures-or-member-references-compound-name" }, { include: "#conditionals" }, { include: "#keywords" }, { include: "#expressions-without-trailing-closures-or-member-references-availability-condition" }, { include: "#expressions-without-trailing-closures-or-member-references-function-or-macro-call-expression" }, { include: "#expressions-without-trailing-closures-or-member-references-macro-expansion" }, { include: "#expressions-without-trailing-closures-or-member-references-subscript-expression" }, { include: "#expressions-without-trailing-closures-or-member-references-parenthesized-expression" }, { match: "\\b_\\b", name: "support.variable.discard-value.swift" }] }, "expressions-without-trailing-closures-or-member-references-availability-condition": { begin: "\\B(#(?:un)?available)(\\()", beginCaptures: { 1: { name: "support.function.availability-condition.swift" }, 2: { name: "punctuation.definition.arguments.begin.swift" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.arguments.end.swift" } }, patterns: [{ captures: { 1: { name: "keyword.other.platform.os.swift" }, 2: { name: "constant.numeric.swift" } }, match: "\\s*\\b((?:iOS|macOS|OSX|watchOS|tvOS|visionOS|UIKitForMac)(?:ApplicationExtension)?)\\b(?:\\s+([0-9]+(?:\\.[0-9]+)*\\b))" }, { captures: { 1: { name: "keyword.other.platform.all.swift" }, 2: { name: "invalid.illegal.character-not-allowed-here.swift" } }, match: "(\\*)\\s*(.*?)(?=[,)])" }, { match: "[^\\s,)]+", name: "invalid.illegal.character-not-allowed-here.swift" }] }, "expressions-without-trailing-closures-or-member-references-closure-parameter": { match: "\\$[0-9]+", name: "variable.language.closure-parameter.swift" }, "expressions-without-trailing-closures-or-member-references-compound-name": { captures: { 1: { name: "entity.name.function.compound-name.swift" }, 2: { name: "punctuation.definition.entity.swift" }, 3: { name: "punctuation.definition.entity.swift" }, 4: { patterns: [{ captures: { 1: { name: "punctuation.definition.entity.swift" }, 2: { name: "punctuation.definition.entity.swift" } }, match: "(?<q>`?)(?!_:)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>):", name: "entity.name.function.compound-name.swift" }] } }, comment: "a reference to a function with disambiguating argument labels, such as foo(_:), foo(bar:), etc.", match: `(?x)
((?<q1>\`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q1>))
\\(
(
(
((?<q2>\`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q2>))
:
)+
)
\\)` }, "expressions-without-trailing-closures-or-member-references-expression-element-list": { patterns: [{ include: "#comments" }, { begin: "((?<q>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>))\\s*(:)", beginCaptures: { 1: { name: "support.function.any-method.swift" }, 2: { name: "punctuation.definition.identifier.swift" }, 3: { name: "punctuation.definition.identifier.swift" }, 4: { name: "punctuation.separator.argument-label.swift" } }, comment: "an element with a label", end: "(?=[,)\\]])", patterns: [{ include: "#expressions" }] }, { begin: "(?![,)\\]])(?=\\S)", comment: "an element without a label (i.e. anything else)", end: "(?=[,)\\]])", patterns: [{ include: "#expressions" }] }] }, "expressions-without-trailing-closures-or-member-references-function-or-macro-call-expression": { patterns: [{ begin: "(#?(?<q>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>))\\s*(\\()", beginCaptures: { 1: { name: "support.function.any-method.swift" }, 2: { name: "punctuation.definition.identifier.swift" }, 3: { name: "punctuation.definition.identifier.swift" }, 4: { name: "punctuation.definition.arguments.begin.swift" } }, comment: "foo(args) -- a call whose callee is a highlightable name", end: "\\)", endCaptures: { 0: { name: "punctuation.definition.arguments.end.swift" } }, name: "meta.function-call.swift", patterns: [{ include: "#expressions-without-trailing-closures-or-member-references-expression-element-list" }] }, { begin: "(?<=[`\\])}>\\p{L}_\\p{N}\\p{M}])\\s*(\\()", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.swift" } }, comment: "[Int](args) -- a call whose callee is a more complicated expression", end: "\\)", endCaptures: { 0: { name: "punctuation.definition.arguments.end.swift" } }, name: "meta.function-call.swift", patterns: [{ include: "#expressions-without-trailing-closures-or-member-references-expression-element-list" }] }] }, "expressions-without-trailing-closures-or-member-references-macro-expansion": { match: "(#(?<q>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>))", name: "support.function.any-method.swift" }, "expressions-without-trailing-closures-or-member-references-parenthesized-expression": { begin: "\\(", beginCaptures: { 0: { name: "punctuation.section.tuple.begin.swift" } }, comment: 'correctly matching closure expressions is too hard (depends on trailing "in") so we just tack on some basics to the end of parenthesized-expression', end: "(\\))\\s*((?:\\b(?:async|throws|rethrows)\\s)*)", endCaptures: { 1: { name: "punctuation.section.tuple.end.swift" }, 2: { patterns: [{ match: "\\brethrows\\b", name: "invalid.illegal.rethrows-only-allowed-on-function-declarations.swift" }, { include: "#async-throws" }] } }, patterns: [{ include: "#expressions-without-trailing-closures-or-member-references-expression-element-list" }] }, "expressions-without-trailing-closures-or-member-references-subscript-expression": { begin: "(?<=[`\\p{L}_\\p{N}\\p{M}])\\s*(\\[)", beginCaptures: { 1: { name: "punctuation.definition.arguments.begin.swift" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.arguments.end.swift" } }, name: "meta.subscript-expression.swift", patterns: [{ include: "#expressions-without-trailing-closures-or-member-references-expression-element-list" }] }, keywords: { patterns: [{ match: "(?<!\\.)\\b(?:if|else|guard|where|switch|case|default|fallthrough)\\b", name: "keyword.control.branch.swift" }, { match: "(?<!\\.)\\b(?:continue|break|fallthrough|return)\\b", name: "keyword.control.transfer.swift" }, { match: "(?<!\\.)\\b(?:while|for|in|each)\\b", name: "keyword.control.loop.swift" }, { match: "\\bany\\b(?=\\s*`?[\\p{L}_])", name: "keyword.other.operator.type.existential.swift" }, { captures: { 1: { name: "keyword.control.loop.swift" }, 2: { name: "punctuation.whitespace.trailing.repeat.swift" } }, comment: "extra scopes for repeat-while snippet", match: "(?<!\\.)\\b(repeat)\\b(\\s*)" }, { match: "(?<!\\.)\\bdefer\\b", name: "keyword.control.defer.swift" }, { captures: { 1: { name: "invalid.illegal.try-must-precede-await.swift" }, 2: { name: "keyword.control.await.swift" } }, match: "(?<!\\.)\\b(?:(await\\s+try)|(await))\\b" }, { match: "(?<!\\.)\\b(?:catch|throw|try)\\b|\\btry[?!]\\B", name: "keyword.control.exception.swift" }, { match: "(?<!\\.)\\b(?:throws|rethrows)\\b", name: "storage.modifier.exception.swift" }, { captures: { 1: { name: "keyword.control.exception.swift" }, 2: { name: "punctuation.whitespace.trailing.do.swift" } }, comment: "extra scopes for do-catch snippet", match: "(?<!\\.)\\b(do)\\b(\\s*)" }, { captures: { 1: { name: "storage.modifier.async.swift" }, 2: { name: "keyword.other.declaration-specifier.swift" } }, match: "(?<!\\.)\\b(?:(async)\\s+)?(let|var)\\b" }, { match: "(?<!\\.)\\b(?:associatedtype|operator|typealias)\\b", name: "keyword.other.declaration-specifier.swift" }, { match: "(?<!\\.)\\b(class|enum|extension|precedencegroup|protocol|struct|actor)\\b(?=\\s*`?[\\p{L}_])", name: "storage.type.$1.swift" }, { match: "(?<!\\.)\\b(?:inout|static|final|lazy|mutating|nonmutating|optional|indirect|required|override|dynamic|convenience|infix|prefix|postfix|distributed|nonisolated|borrowing|consuming)\\b", name: "storage.modifier.swift" }, { match: "\\binit[?!]|\\binit\\b|(?<!\\.)\\b(?:func|deinit|subscript|didSet|get|set|willSet)\\b", name: "storage.type.function.swift" }, { match: "(?<!\\.)\\b(?:fileprivate|private|internal|public|open|package)\\b", name: "keyword.other.declaration-specifier.accessibility.swift" }, { comment: "matches weak, unowned, unowned(safe), unowned(unsafe)", match: "(?<!\\.)\\bunowned\\((?:safe|unsafe)\\)|(?<!\\.)\\b(?:weak|unowned)\\b", name: "keyword.other.capture-specifier.swift" }, { captures: { 1: { name: "keyword.other.type.swift" }, 2: { name: "keyword.other.type.metatype.swift" } }, match: "(?<=\\.)(?:(dynamicType|self)|(Protocol|Type))\\b" }, { match: "(?<!\\.)\\b(?:super|self|Self)\\b", name: "variable.language.swift" }, { match: "\\B(?:#file|#filePath|#fileID|#line|#column|#function|#dsohandle)\\b|\\b(?:__FILE__|__LINE__|__COLUMN__|__FUNCTION__|__DSO_HANDLE__)\\b", name: "support.variable.swift" }, { match: "(?<!\\.)\\bimport\\b", name: "keyword.control.import.swift" }, { comment: 'SE-0366: "consume behaves as a contextual keyword. In order to avoid interfering with existing code that calls functions named consume, the operand to consume must begin with another identifier, and must consist of an identifier or postfix expression"', match: "(?<!\\.)\\bconsume(?=\\s+`?[\\p{L}_])", name: "keyword.control.consume.swift" }, { comment: 'SE-0377: "copy is a contextual keyword, parsed as an operator if it is immediately followed by an identifier on the same line, like the consume x operator before it"', match: "(?<!\\.)\\bcopy(?=\\s+`?[\\p{L}_])", name: "keyword.control.copy.swift" }] }, literals: { patterns: [{ include: "#literals-boolean" }, { include: "#literals-numeric" }, { include: "#literals-string" }, { match: "\\bnil\\b", name: "constant.language.nil.swift" }, { comment: 'object "literals" used in playgrounds', match: "\\B#(colorLiteral|imageLiteral|fileLiteral)\\b", name: "support.function.object-literal.swift" }, { match: "\\B#externalMacro\\b", name: "support.function.builtin-macro.swift" }, { match: "\\B#keyPath\\b", name: "support.function.key-path.swift" }, { begin: "\\B(#selector)(\\()(?:\\s*(getter|setter)\\s*(:))?", beginCaptures: { 1: { name: "support.function.selector-reference.swift" }, 2: { name: "punctuation.definition.arguments.begin.swift" }, 3: { name: "support.variable.parameter.swift" }, 4: { name: "punctuation.separator.argument-label.swift" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.arguments.end.swift" } }, patterns: [{ include: "#expressions" }] }, { include: "#literals-regular-expression-literal" }] }, "literals-boolean": { match: "\\b(true|false)\\b", name: "constant.language.boolean.swift" }, "literals-numeric": { patterns: [{ comment: "0.1, -4_2.5, 6.022e23, 10E-5", match: "(\\B\\-|\\b)(?<![\\[\\](){}\\p{L}_\\p{N}\\p{M}]\\.)[0-9][0-9_]*(?=\\.[0-9]|[eE])(?:\\.[0-9][0-9_]*)?(?:[eE][-+]?[0-9][0-9_]*)?\\b(?!\\.[0-9])", name: "constant.numeric.float.decimal.swift" }, { comment: "-0x1.ap2_3, 0x31p-4", match: "(\\B\\-|\\b)(?<![\\[\\](){}\\p{L}_\\p{N}\\p{M}]\\.)(0x[0-9a-fA-F][0-9a-fA-F_]*)(?:\\.[0-9a-fA-F][0-9a-fA-F_]*)?[pP][-+]?[0-9][0-9_]*\\b(?!\\.[0-9])", name: "constant.numeric.float.hexadecimal.swift" }, { comment: "0x1p, 0x1p_2, 0x1.5pa, 0x1.1p+1f, 0x1pz", match: "(\\B\\-|\\b)(?<![\\[\\](){}\\p{L}_\\p{N}\\p{M}]\\.)(0x[0-9a-fA-F][0-9a-fA-F_]*)(?:\\.[0-9a-fA-F][0-9a-fA-F_]*)?(?:[pP][-+]?\\w*)\\b(?!\\.[0-9])", name: "invalid.illegal.numeric.float.invalid-exponent.swift" }, { comment: "0x1.5w (note that 0x1.f may be a valid expression)", match: "(\\B\\-|\\b)(?<![\\[\\](){}\\p{L}_\\p{N}\\p{M}]\\.)(0x[0-9a-fA-F][0-9a-fA-F_]*)\\.[0-9][\\w.]*", name: "invalid.illegal.numeric.float.missing-exponent.swift" }, { comment: "-.5, .2f (note that 1.-.5 may be a valid expression)", match: "(?<=\\s|^)\\-?\\.[0-9][\\w.]*", name: "invalid.illegal.numeric.float.missing-leading-zero.swift" }, { comment: "0b_0_1, 0x_1p+3q", match: "(\\B\\-|\\b)0[box]_[0-9a-fA-F_]*(?:[pPeE][+-]?\\w+)?[\\w.]+", name: "invalid.illegal.numeric.leading-underscore.swift" }, { comment: "tuple positional member: not really a numeric literal, but not invalid", match: "(?<=[\\[\\](){}\\p{L}_\\p{N}\\p{M}]\\.)[0-9]+\\b" }, { comment: "0b010, 0b1_0", match: "(\\B\\-|\\b)(?<![\\[\\](){}\\p{L}_\\p{N}\\p{M}]\\.)0b[01][01_]*\\b(?!\\.[0-9])", name: "constant.numeric.integer.binary.swift" }, { comment: "0o1, 0o7_3", match: "(\\B\\-|\\b)(?<![\\[\\](){}\\p{L}_\\p{N}\\p{M}]\\.)0o[0-7][0-7_]*\\b(?!\\.[0-9])", name: "constant.numeric.integer.octal.swift" }, { comment: "02, 3_456", match: "(\\B\\-|\\b)(?<![\\[\\](){}\\p{L}_\\p{N}\\p{M}]\\.)[0-9][0-9_]*\\b(?!\\.[0-9])", name: "constant.numeric.integer.decimal.swift" }, { comment: "0x4, 0xF_7", match: "(\\B\\-|\\b)(?<![\\[\\](){}\\p{L}_\\p{N}\\p{M}]\\.)0x[0-9a-fA-F][0-9a-fA-F_]*\\b(?!\\.[0-9])", name: "constant.numeric.integer.hexadecimal.swift" }, { match: "(\\B\\-|\\b)[0-9][\\w.]*", name: "invalid.illegal.numeric.other.swift" }] }, "literals-regular-expression-literal": { comment: "SE-0354 & SE-0355", patterns: [{ begin: "(#+)/\\n", end: "/\\1", name: "string.regexp.block.swift", patterns: [{ include: "#literals-regular-expression-literal-regex-guts" }, { include: "#literals-regular-expression-literal-line-comment" }] }, { captures: { 0: { patterns: [{ include: "#literals-regular-expression-literal-regex-guts" }] }, 1: { name: "punctuation.definition.string.begin.regexp.swift" }, 12: { name: "punctuation.definition.string.end.regexp.swift" }, 13: { name: "invalid.illegal.returns-not-allowed.regexp" } }, comment: `Single-line regular expression literals must be matched all in one go
 in order to avoid ambiguities with operators, and to adhere to certain
 parsing rules in SE-0354/SE-0355, such as:
 - A regex literal will not be parsed if it contains an unbalanced ).
 - A regex may end with a space only if it began with an escaped space`, match: `(?x)
(((\\#+)?)/)
(?(3)|(?!/))
(?(3)|(?!\\s))
(\\\\\\s)?
(?<guts>
(?>
(?:
\\\\Q
(?:(?!\\\\E)(?!/\\2).)*+
(?:\\\\E

| (?(3)|(?<!\\s))(?=/\\2)
)
| \\\\.
| \\(\\?\\#[^)]*\\)
| \\(\\?

\\{(?<g1>\\{)?+(?<g2>\\{)?+(?<g3>\\{)?+(?<g4>\\{)?+(?<g5>\\{)?+
.+?
\\}(?(<g1>)\\})(?(<g2>)\\})(?(<g3>)\\})(?(<g4>)\\})(?(<g5>)\\})
(?:\\[(?!\\d)\\w+\\])?
[X<>]?
\\)
| (?<class>\\[ (?:\\\\. | [^\\[\\]] | \\g<class>)+ \\])
| \\(\\g<guts>?+\\)
| (?:(?!/\\2)[^()\\[\\\\])+
)+
)
)?+
# may end with a space only if it is an extended literal or contains only a single escaped space
(?(3)|(?(5)(?<!\\s)))
(/\\2)
| \\#+/.+(\\n)`, name: "string.regexp.line.swift" }] }, "literals-regular-expression-literal-backreference-or-subpattern": { comment: "These patterns are separated to work around issues like https://github.com/microsoft/vscode-textmate/issues/164", patterns: [{ captures: { 1: { name: "constant.character.escape.backslash.regexp" }, 2: { name: "variable.other.group-name.regexp" }, 3: { name: "keyword.operator.recursion-level.regexp" }, 4: { name: "constant.numeric.integer.decimal.regexp" }, 5: { name: "constant.numeric.integer.decimal.regexp" }, 6: { name: "keyword.operator.recursion-level.regexp" }, 7: { name: "constant.numeric.integer.decimal.regexp" }, 8: { name: "constant.character.escape.backslash.regexp" } }, comment: "'\\g{' NamedOrNumberRef '}'", match: "(?x)(\\\\g\\{) (?: ((?!\\d)\\w+) (?:([+-])(\\d+))? | ([+-]?\\d+) (?:([+-])(\\d+))? ) (\\})" }, { captures: { 1: { name: "constant.character.escape.backslash.regexp" }, 2: { name: "constant.numeric.integer.decimal.regexp" }, 3: { name: "keyword.operator.recursion-level.regexp" }, 4: { name: "constant.numeric.integer.decimal.regexp" } }, comment: "'\\g' NumberRef", match: "(?x)(\\\\g) ([+-]?\\d+) (?:([+-])(\\d+))?" }, { captures: { 1: { name: "constant.character.escape.backslash.regexp" }, 3: { name: "variable.other.group-name.regexp" }, 4: { name: "keyword.operator.recursion-level.regexp" }, 5: { name: "constant.numeric.integer.decimal.regexp" }, 6: { name: "constant.numeric.integer.decimal.regexp" }, 7: { name: "keyword.operator.recursion-level.regexp" }, 8: { name: "constant.numeric.integer.decimal.regexp" }, 9: { name: "constant.character.escape.backslash.regexp" } }, comment: `'\\k<' NamedOrNumberRef '>'
 "\\k'" NamedOrNumberRef "'"
 '\\g<' NamedOrNumberRef '>'
 "\\g'" NamedOrNumberRef "'"`, match: "(?x)(\\\\[gk](<)|\\\\[gk]') (?: ((?!\\d)\\w+) (?:([+-])(\\d+))? | ([+-]?\\d+) (?:([+-])(\\d+))? ) ((?(2)>|'))" }, { captures: { 1: { name: "constant.character.escape.backslash.regexp" }, 2: { name: "variable.other.group-name.regexp" }, 3: { name: "keyword.operator.recursion-level.regexp" }, 4: { name: "constant.numeric.integer.decimal.regexp" }, 5: { name: "constant.character.escape.backslash.regexp" } }, comment: "'\\k{' NamedRef '}'", match: "(?x)(\\\\k\\{) ((?!\\d)\\w+) (?:([+-])(\\d+))? (\\})" }, { match: "\\\\[1-9][0-9]+", name: "keyword.other.back-reference.regexp" }, { captures: { 1: { name: "keyword.other.back-reference.regexp" }, 2: { name: "variable.other.group-name.regexp" }, 3: { name: "keyword.operator.recursion-level.regexp" }, 4: { name: "constant.numeric.integer.decimal.regexp" }, 5: { name: "keyword.other.back-reference.regexp" } }, comment: "'(?P=' NamedRef ')'", match: "(?x)(\\(\\?(?:P[=>]|&)) ((?!\\d)\\w+) (?:([+-])(\\d+))? (\\))" }, { match: "\\(\\?R\\)", name: "keyword.other.back-reference.regexp" }, { captures: { 1: { name: "keyword.other.back-reference.regexp" }, 2: { name: "constant.numeric.integer.decimal.regexp" }, 3: { name: "keyword.operator.recursion-level.regexp" }, 4: { name: "constant.numeric.integer.decimal.regexp" }, 5: { name: "keyword.other.back-reference.regexp" } }, comment: "'(?' NumberRef ')'", match: "(?x)(\\(\\?) ([+-]?\\d+) (?:([+-])(\\d+))? (\\))" }] }, "literals-regular-expression-literal-backtracking-directive-or-global-matching-option": { captures: { 1: { name: "keyword.control.directive.regexp" }, 2: { name: "keyword.control.directive.regexp" }, 3: { name: "keyword.control.directive.regexp" }, 4: { name: "variable.language.tag.regexp" }, 5: { name: "keyword.control.directive.regexp" }, 6: { name: "keyword.operator.assignment.regexp" }, 7: { name: "constant.numeric.integer.decimal.regexp" }, 8: { name: "keyword.control.directive.regexp" }, 9: { name: "keyword.control.directive.regexp" } }, match: `(?x)
(\\(\\*)
(?:
(ACCEPT|FAIL|F|MARK(?=:)|(?=:)|COMMIT|PRUNE|SKIP|THEN)
(?:(:)([^)]+))?
| (?:(LIMIT_(?:DEPTH|HEAP|MATCH))(=)(\\d+))
| (
CRLF | CR | ANYCRLF | ANY | LF | NUL
| BSR_ANYCRLF | BSR_UNICODE
| NOTEMPTY_ATSTART | NOTEMPTY
| NO_AUTO_POSSESS | NO_DOTSTAR_ANCHOR
| NO_JIT | NO_START_OPT | UTF | UCP
)
)
(\\))` }, "literals-regular-expression-literal-callout": { captures: { 1: { name: "punctuation.definition.group.regexp" }, 2: { name: "keyword.control.callout.regexp" }, 3: { name: "constant.numeric.integer.decimal.regexp" }, 4: { name: "entity.name.function.callout.regexp" }, 5: { name: "entity.name.function.callout.regexp" }, 6: { name: "entity.name.function.callout.regexp" }, 7: { name: "entity.name.function.callout.regexp" }, 8: { name: "entity.name.function.callout.regexp" }, 9: { name: "entity.name.function.callout.regexp" }, 10: { name: "entity.name.function.callout.regexp" }, 11: { name: "entity.name.function.callout.regexp" }, 12: { name: "punctuation.definition.group.regexp" }, 13: { name: "punctuation.definition.group.regexp" }, 14: { name: "keyword.control.callout.regexp" }, 15: { name: "entity.name.function.callout.regexp" }, 16: { name: "variable.language.tag-name.regexp" }, 17: { name: "punctuation.definition.group.regexp" }, 18: { name: "punctuation.definition.group.regexp" }, 19: { name: "keyword.control.callout.regexp" }, 26: { name: "variable.language.tag-name.regexp" }, 27: { name: "keyword.control.callout.regexp" }, 28: { name: "punctuation.definition.group.regexp" } }, match: `(?x)
# PCRECallout
(\\()(?<keyw>\\?C)
(?:
(?<num>\\d+)
| \`(?<name>(?:[^\`]|\`\`)*)\`
| '(?<name>(?:[^']|'')*)'
| "(?<name>(?:[^"]|"")*)"
| \\^(?<name>(?:[^\\^]|\\^\\^)*)\\^
| %(?<name>(?:[^%]|%%)*)%
| \\#(?<name>(?:[^#]|\\#\\#)*)\\#
| \\$(?<name>(?:[^$]|\\$\\$)*)\\$
| \\{(?<name>(?:[^}]|\\}\\})*)\\}
)?
(\\))
# NamedCallout
| (\\()(?<keyw>\\*)
(?<name>(?!\\d)\\w+)
(?:\\[(?<tag>(?!\\d)\\w+)\\])?
(?:\\{ [^,}]+ (?:,[^,}]+)* \\})?
(\\))
# InterpolatedCallout
| (\\()(?<keyw>\\?)

(\\{(?<g1>\\{)?+(?<g2>\\{)?+(?<g3>\\{)?+(?<g4>\\{)?+(?<g5>\\{)?+) .+? \\}(?(<g1>)\\})(?(<g2>)\\})(?(<g3>)\\})(?(<g4>)\\})(?(<g5>)\\})
(?:\\[(?<tag>(?!\\d)\\w+)\\])?
(?<keyw>[X<>]?)
(\\))`, name: "meta.callout.regexp" }, "literals-regular-expression-literal-character-properties": { captures: { 1: { name: "support.variable.character-property.regexp" }, 2: { name: "punctuation.definition.character-class.regexp" }, 3: { name: "support.variable.character-property.regexp" }, 4: { name: "punctuation.definition.character-class.regexp" } }, match: `(?x)
\\\\[pP]\\{ ([\\s\\w-]+(?:=[\\s\\w-]+)?) \\}
| (\\[:) ([\\s\\w-]+(?:=[\\s\\w-]+)?) (:\\])`, name: "constant.other.character-class.set.regexp" }, "literals-regular-expression-literal-custom-char-class": { patterns: [{ begin: "(\\[)(\\^)?", beginCaptures: { 1: { name: "punctuation.definition.character-class.regexp" }, 2: { name: "keyword.operator.negation.regexp" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.character-class.regexp" } }, name: "constant.other.character-class.set.regexp", patterns: [{ include: "#literals-regular-expression-literal-custom-char-class-members" }] }] }, "literals-regular-expression-literal-custom-char-class-members": { comment: "TODO: should also include atoms?", patterns: [{ comment: "\\b inside a character class represents a backspace", match: "\\\\b", name: "constant.character.escape.backslash.regexp" }, { include: "#literals-regular-expression-literal-custom-char-class" }, { include: "#literals-regular-expression-literal-quote" }, { include: "#literals-regular-expression-literal-set-operators" }, { include: "#literals-regular-expression-literal-unicode-scalars" }, { include: "#literals-regular-expression-literal-character-properties" }] }, "literals-regular-expression-literal-group-option-toggle": { comment: 'A matching option sequence may be part of an "isolated group" which has an implicit scope that wraps the remaining elements of the current group', match: `(?x)
\\(\\?
(?:
\\^(?:[iJmnsUxwDPSW]|xx|y\\{[gw]\\})*
| (?:[iJmnsUxwDPSW]|xx|y\\{[gw]\\})+
| (?:[iJmnsUxwDPSW]|xx|y\\{[gw]\\})* - (?:[iJmnsUxwDPSW]|xx|y\\{[gw]\\})*
)
\\)`, name: "keyword.other.option-toggle.regexp" }, "literals-regular-expression-literal-group-or-conditional": { patterns: [{ begin: "(\\()(\\?~)", beginCaptures: { 1: { name: "punctuation.definition.group.regexp" }, 2: { name: "keyword.control.conditional.absent.regexp" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.regexp" } }, name: "meta.group.absent.regexp", patterns: [{ include: "#literals-regular-expression-literal-regex-guts" }] }, { begin: `(?x)
# KnownConditionalStart
(\\() (?<cond>\\?\\()
(?:
(?<NumberRef> (?<num>[+-]?\\d+)(?:(?<op>[+-])(?<num>\\d+))? )
| (?<cond>R) \\g<NumberRef>?
| (?<cond>R&) (?<NamedRef> (?<name>(?!\\d)\\w+) (?:(?<op>[+-])(?<num>\\d+))? )
| (?<cond><) (?:\\g<NamedRef>|\\g<NumberRef>) (?<cond>>)
| (?<cond>') (?:\\g<NamedRef>|\\g<NumberRef>) (?<cond>')
| (?<cond>DEFINE)
| (?<cond>VERSION)(?<compar>>?=)(?<num>\\d+\\.\\d+)
)
(?<cond>\\))
| (\\()(?<cond>\\?)(?=\\()`, beginCaptures: { 1: { name: "punctuation.definition.group.regexp" }, 2: { name: "keyword.control.conditional.regexp" }, 4: { name: "constant.numeric.integer.decimal.regexp" }, 5: { name: "keyword.operator.recursion-level.regexp" }, 6: { name: "constant.numeric.integer.decimal.regexp" }, 7: { name: "keyword.control.conditional.regexp" }, 8: { name: "keyword.control.conditional.regexp" }, 10: { name: "variable.other.group-name.regexp" }, 11: { name: "keyword.operator.recursion-level.regexp" }, 12: { name: "constant.numeric.integer.decimal.regexp" }, 13: { name: "keyword.control.conditional.regexp" }, 14: { name: "keyword.control.conditional.regexp" }, 15: { name: "keyword.control.conditional.regexp" }, 16: { name: "keyword.control.conditional.regexp" }, 17: { name: "keyword.control.conditional.regexp" }, 18: { name: "keyword.control.conditional.regexp" }, 19: { name: "keyword.operator.comparison.regexp" }, 20: { name: "constant.numeric.integer.decimal.regexp" }, 21: { name: "keyword.control.conditional.regexp" }, 22: { name: "punctuation.definition.group.regexp" }, 23: { name: "keyword.control.conditional.regexp" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.regexp" } }, name: "meta.group.conditional.regexp", patterns: [{ include: "#literals-regular-expression-literal-regex-guts" }] }, { begin: `(?x)
(\\()
(

(\\?)
(?:
([:|>=!*] | <[=!*])

| P?< (?:((?!\\d)\\w+) (-))? ((?!\\d)\\w+) >
| ' (?:((?!\\d)\\w+) (-))? ((?!\\d)\\w+) '

| (?:
\\^(?:[iJmnsUxwDPSW]|xx|y\\{[gw]\\})*
| (?:[iJmnsUxwDPSW]|xx|y\\{[gw]\\})+
| (?:[iJmnsUxwDPSW]|xx|y\\{[gw]\\})* - (?:[iJmnsUxwDPSW]|xx|y\\{[gw]\\})*
):
)

| \\*(
atomic
|pla|positive_lookahead
|nla|negative_lookahead
|plb|positive_lookbehind
|nlb|negative_lookbehind
|napla|non_atomic_positive_lookahead
|naplb|non_atomic_positive_lookbehind
|sr|script_run
|asr|atomic_script_run
):
)?+`, beginCaptures: { 1: { name: "punctuation.definition.group.regexp" }, 2: { name: "keyword.other.group-options.regexp" }, 3: { name: "punctuation.definition.group.regexp" }, 4: { name: "punctuation.definition.group.regexp" }, 5: { name: "variable.other.group-name.regexp" }, 6: { name: "keyword.operator.balancing-group.regexp" }, 7: { name: "variable.other.group-name.regexp" }, 8: { name: "variable.other.group-name.regexp" }, 9: { name: "keyword.operator.balancing-group.regexp" }, 10: { name: "variable.other.group-name.regexp" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.group.regexp" } }, name: "meta.group.regexp", patterns: [{ include: "#literals-regular-expression-literal-regex-guts" }] }] }, "literals-regular-expression-literal-line-comment": { captures: { 1: { name: "punctuation.definition.comment.regexp" } }, match: "(\\#).*$", name: "comment.line.regexp" }, "literals-regular-expression-literal-quote": { begin: "\\\\Q", beginCaptures: { 0: { name: "constant.character.escape.backslash.regexp" } }, end: "\\\\E|(\\n)", endCaptures: { 0: { name: "constant.character.escape.backslash.regexp" }, 1: { name: "invalid.illegal.returns-not-allowed.regexp" } }, name: "string.quoted.other.regexp.swift" }, "literals-regular-expression-literal-regex-guts": { patterns: [{ include: "#literals-regular-expression-literal-quote" }, { begin: "\\(\\?\\#", beginCaptures: { 0: { name: "punctuation.definition.comment.begin.regexp" } }, end: "\\)", endCaptures: { 0: { name: "punctuation.definition.comment.end.regexp" } }, name: "comment.block.regexp" }, { begin: "<\\{", beginCaptures: { 0: { name: "punctuation.section.embedded.begin.regexp" } }, end: "\\}>", endCaptures: { 0: { name: "punctuation.section.embedded.end.regexp" } }, name: "meta.embedded.expression.regexp" }, { include: "#literals-regular-expression-literal-unicode-scalars" }, { include: "#literals-regular-expression-literal-character-properties" }, { match: "[$^]|\\\\[AbBGyYzZ]|\\\\K", name: "keyword.control.anchor.regexp" }, { include: "#literals-regular-expression-literal-backtracking-directive-or-global-matching-option" }, { include: "#literals-regular-expression-literal-callout" }, { include: "#literals-regular-expression-literal-backreference-or-subpattern" }, { match: "\\.|\\\\[CdDhHNORsSvVwWX]", name: "constant.character.character-class.regexp" }, { match: "\\\\c.", name: "constant.character.entity.control-character.regexp" }, { match: "\\\\[^c]", name: "constant.character.escape.backslash.regexp" }, { match: "\\|", name: "keyword.operator.or.regexp" }, { match: "[*+?]", name: "keyword.operator.quantifier.regexp" }, { match: "\\{\\s*\\d+\\s*(?:,\\s*\\d*\\s*)?\\}|\\{\\s*,\\s*\\d+\\s*\\}", name: "keyword.operator.quantifier.regexp" }, { include: "#literals-regular-expression-literal-custom-char-class" }, { include: "#literals-regular-expression-literal-group-option-toggle" }, { include: "#literals-regular-expression-literal-group-or-conditional" }] }, "literals-regular-expression-literal-set-operators": { patterns: [{ match: "&&", name: "keyword.operator.intersection.regexp.swift" }, { match: "--", name: "keyword.operator.subtraction.regexp.swift" }, { match: "\\~\\~", name: "keyword.operator.symmetric-difference.regexp.swift" }] }, "literals-regular-expression-literal-unicode-scalars": { match: `(?x)
\\\\u\\{\\s*(?:[0-9a-fA-F]+\\s*)+\\}
| \\\\u[0-9a-fA-F]{4}
| \\\\x\\{[0-9a-fA-F]+\\}
| \\\\x[0-9a-fA-F]{0,2}
| \\\\U[0-9a-fA-F]{8}
| \\\\o\\{[0-7]+\\}
| \\\\0[0-7]{0,3}
| \\\\N\\{(?:U\\+[0-9a-fA-F]{1,8} | [\\s\\w-]+)\\}`, name: "constant.character.numeric.regexp" }, "literals-string": { patterns: [{ begin: '"""', beginCaptures: { 0: { name: "punctuation.definition.string.begin.swift" } }, comment: "SE-0168: Multi-Line String Literals", end: '"""(#*)', endCaptures: { 0: { name: "punctuation.definition.string.end.swift" }, 1: { name: "invalid.illegal.extra-closing-delimiter.swift" } }, name: "string.quoted.double.block.swift", patterns: [{ match: '\\G.+(?=""")|\\G.+', name: "invalid.illegal.content-after-opening-delimiter.swift" }, { match: "\\\\\\s*\\n", name: "constant.character.escape.newline.swift" }, { include: "#literals-string-string-guts" }, { comment: 'Allow \\("""...""") to appear inside a block string', match: '\\S((?!\\\\\\().)*(?=""")', name: "invalid.illegal.content-before-closing-delimiter.swift" }] }, { begin: '#"""', beginCaptures: { 0: { name: "punctuation.definition.string.begin.swift" } }, end: '"""#(#*)', endCaptures: { 0: { name: "punctuation.definition.string.end.swift" }, 1: { name: "invalid.illegal.extra-closing-delimiter.swift" } }, name: "string.quoted.double.block.raw.swift", patterns: [{ match: '\\G.+(?=""")|\\G.+', name: "invalid.illegal.content-after-opening-delimiter.swift" }, { match: "\\\\#\\s*\\n", name: "constant.character.escape.newline.swift" }, { include: "#literals-string-raw-string-guts" }, { comment: 'Allow \\("""...""") to appear inside a block string', match: '\\S((?!\\\\#\\().)*(?=""")', name: "invalid.illegal.content-before-closing-delimiter.swift" }] }, { begin: '(##+)"""', beginCaptures: { 0: { name: "punctuation.definition.string.begin.swift" } }, end: '"""\\1(#*)', endCaptures: { 0: { name: "punctuation.definition.string.end.swift" }, 1: { name: "invalid.illegal.extra-closing-delimiter.swift" } }, name: "string.quoted.double.block.raw.swift", patterns: [{ match: '\\G.+(?=""")|\\G.+', name: "invalid.illegal.content-after-opening-delimiter.swift" }] }, { begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.swift" } }, end: '"(#*)', endCaptures: { 0: { name: "punctuation.definition.string.end.swift" }, 1: { name: "invalid.illegal.extra-closing-delimiter.swift" } }, name: "string.quoted.double.single-line.swift", patterns: [{ match: "\\r|\\n", name: "invalid.illegal.returns-not-allowed.swift" }, { include: "#literals-string-string-guts" }] }, { begin: '(##+)"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.raw.swift" } }, comment: "SE-0168: raw string literals (more than one #, grammar limitations prevent us from supporting escapes)", end: '"\\1(#*)', endCaptures: { 0: { name: "punctuation.definition.string.end.raw.swift" }, 1: { name: "invalid.illegal.extra-closing-delimiter.swift" } }, name: "string.quoted.double.single-line.raw.swift", patterns: [{ match: "\\r|\\n", name: "invalid.illegal.returns-not-allowed.swift" }] }, { begin: '#"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.raw.swift" } }, comment: "SE-0168: raw string literals (one #, escapes supported)", end: '"#(#*)', endCaptures: { 0: { name: "punctuation.definition.string.end.raw.swift" }, 1: { name: "invalid.illegal.extra-closing-delimiter.swift" } }, name: "string.quoted.double.single-line.raw.swift", patterns: [{ match: "\\r|\\n", name: "invalid.illegal.returns-not-allowed.swift" }, { include: "#literals-string-raw-string-guts" }] }] }, "literals-string-raw-string-guts": { comment: "the same as #string-guts but with # in escapes", patterns: [{ match: `\\\\#[0\\\\tnr"']`, name: "constant.character.escape.swift" }, { match: "\\\\#u\\{[0-9a-fA-F]{1,8}\\}", name: "constant.character.escape.unicode.swift" }, { begin: "\\\\#\\(", beginCaptures: { 0: { name: "punctuation.section.embedded.begin.swift" } }, contentName: "source.swift", end: "(\\))", endCaptures: { 0: { name: "punctuation.section.embedded.end.swift" }, 1: { name: "source.swift" } }, name: "meta.embedded.line.swift", patterns: [{ include: "$self" }, { begin: "\\(", comment: "Nested parens", end: "\\)" }] }, { match: "\\\\#.", name: "invalid.illegal.escape-not-recognized" }] }, "literals-string-string-guts": { patterns: [{ match: `\\\\[0\\\\tnr"']`, name: "constant.character.escape.swift" }, { match: "\\\\u\\{[0-9a-fA-F]{1,8}\\}", name: "constant.character.escape.unicode.swift" }, { begin: "\\\\\\(", beginCaptures: { 0: { name: "punctuation.section.embedded.begin.swift" } }, contentName: "source.swift", end: "(\\))", endCaptures: { 0: { name: "punctuation.section.embedded.end.swift" }, 1: { name: "source.swift" } }, name: "meta.embedded.line.swift", patterns: [{ include: "$self" }, { begin: "\\(", comment: "Nested parens", end: "\\)" }] }, { match: "\\\\.", name: "invalid.illegal.escape-not-recognized" }] }, "member-reference": { patterns: [{ captures: { 1: { name: "variable.other.swift" }, 2: { name: "punctuation.definition.identifier.swift" }, 3: { name: "punctuation.definition.identifier.swift" } }, match: "(?<=\\.)((?<q>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>))" }] }, operators: { patterns: [{ comment: "Type casting", match: "\\b(is\\b|as([!?]\\B|\\b))", name: "keyword.operator.type-casting.swift" }, { begin: `(?x)
(?=
(?<oph>
[/=\\-+!*%<>&|^~?]
| [\\x{00A1}-\\x{00A7}]
| [\\x{00A9}\\x{00AB}]
| [\\x{00AC}\\x{00AE}]
| [\\x{00B0}-\\x{00B1}\\x{00B6}\\x{00BB}\\x{00BF}\\x{00D7}\\x{00F7}]
| [\\x{2016}-\\x{2017}\\x{2020}-\\x{2027}]
| [\\x{2030}-\\x{203E}]
| [\\x{2041}-\\x{2053}]
| [\\x{2055}-\\x{205E}]
| [\\x{2190}-\\x{23FF}]
| [\\x{2500}-\\x{2775}]
| [\\x{2794}-\\x{2BFF}]
| [\\x{2E00}-\\x{2E7F}]
| [\\x{3001}-\\x{3003}]
| [\\x{3008}-\\x{3030}]
)
| \\.
(
\\g<oph>
| \\.
| [\\x{0300}-\\x{036F}]
| [\\x{1DC0}-\\x{1DFF}]
| [\\x{20D0}-\\x{20FF}]
| [\\x{FE00}-\\x{FE0F}]
| [\\x{FE20}-\\x{FE2F}]
| [\\x{E0100}-\\x{E01EF}]
)
)`, comment: "This rule helps us speed up the matching.", end: "(?!\\G)", patterns: [{ captures: { 0: { patterns: [{ match: "\\G(\\+\\+|\\-\\-)$", name: "keyword.operator.increment-or-decrement.swift" }, { match: "\\G(\\+|\\-)$", name: "keyword.operator.arithmetic.unary.swift" }, { match: "\\G!$", name: "keyword.operator.logical.not.swift" }, { match: "\\G~$", name: "keyword.operator.bitwise.not.swift" }, { match: ".+", name: "keyword.operator.custom.prefix.swift" }] } }, comment: "Prefix unary operator", match: `(?x)
\\G

(?<=^|[\\s(\\[{,;:])
(
(?!(//|/\\*|\\*/))
(
[/=\\-+!*%<>&|^~?]
| [\\x{00A1}-\\x{00A7}]
| [\\x{00A9}\\x{00AB}]
| [\\x{00AC}\\x{00AE}]
| [\\x{00B0}-\\x{00B1}\\x{00B6}\\x{00BB}\\x{00BF}\\x{00D7}\\x{00F7}]
| [\\x{2016}-\\x{2017}\\x{2020}-\\x{2027}]
| [\\x{2030}-\\x{203E}]
| [\\x{2041}-\\x{2053}]
| [\\x{2055}-\\x{205E}]
| [\\x{2190}-\\x{23FF}]
| [\\x{2500}-\\x{2775}]
| [\\x{2794}-\\x{2BFF}]
| [\\x{2E00}-\\x{2E7F}]
| [\\x{3001}-\\x{3003}]
| [\\x{3008}-\\x{3030}]

| [\\x{0300}-\\x{036F}]
| [\\x{1DC0}-\\x{1DFF}]
| [\\x{20D0}-\\x{20FF}]
| [\\x{FE00}-\\x{FE0F}]
| [\\x{FE20}-\\x{FE2F}]
| [\\x{E0100}-\\x{E01EF}]
)
)++
(?![\\s)\\]},;:]|\\z)` }, { captures: { 0: { patterns: [{ match: "\\G(\\+\\+|\\-\\-)$", name: "keyword.operator.increment-or-decrement.swift" }, { match: "\\G!$", name: "keyword.operator.increment-or-decrement.swift" }, { match: ".+", name: "keyword.operator.custom.postfix.swift" }] } }, comment: "Postfix unary operator", match: `(?x)
\\G

(?<!^|[\\s(\\[{,;:])
(
(?!(//|/\\*|\\*/))
(
[/=\\-+!*%<>&|^~?]
| [\\x{00A1}-\\x{00A7}]
| [\\x{00A9}\\x{00AB}]
| [\\x{00AC}\\x{00AE}]
| [\\x{00B0}-\\x{00B1}\\x{00B6}\\x{00BB}\\x{00BF}\\x{00D7}\\x{00F7}]
| [\\x{2016}-\\x{2017}\\x{2020}-\\x{2027}]
| [\\x{2030}-\\x{203E}]
| [\\x{2041}-\\x{2053}]
| [\\x{2055}-\\x{205E}]
| [\\x{2190}-\\x{23FF}]
| [\\x{2500}-\\x{2775}]
| [\\x{2794}-\\x{2BFF}]
| [\\x{2E00}-\\x{2E7F}]
| [\\x{3001}-\\x{3003}]
| [\\x{3008}-\\x{3030}]

| [\\x{0300}-\\x{036F}]
| [\\x{1DC0}-\\x{1DFF}]
| [\\x{20D0}-\\x{20FF}]
| [\\x{FE00}-\\x{FE0F}]
| [\\x{FE20}-\\x{FE2F}]
| [\\x{E0100}-\\x{E01EF}]
)
)++
(?=[\\s)\\]},;:]|\\z)` }, { captures: { 0: { patterns: [{ match: "\\G=$", name: "keyword.operator.assignment.swift" }, { match: "\\G(\\+|\\-|\\*|/|%|<<|>>|&|\\^|\\||&&|\\|\\|)=$", name: "keyword.operator.assignment.compound.swift" }, { match: "\\G(\\+|\\-|\\*|/)$", name: "keyword.operator.arithmetic.swift" }, { match: "\\G&(\\+|\\-|\\*)$", name: "keyword.operator.arithmetic.overflow.swift" }, { match: "\\G%$", name: "keyword.operator.arithmetic.remainder.swift" }, { match: "\\G(==|!=|>|<|>=|<=|~=)$", name: "keyword.operator.comparison.swift" }, { match: "\\G\\?\\?$", name: "keyword.operator.coalescing.swift" }, { match: "\\G(&&|\\|\\|)$", name: "keyword.operator.logical.swift" }, { match: "\\G(&|\\||\\^|<<|>>)$", name: "keyword.operator.bitwise.swift" }, { match: "\\G(===|!==)$", name: "keyword.operator.bitwise.swift" }, { match: "\\G\\?$", name: "keyword.operator.ternary.swift" }, { match: ".+", name: "keyword.operator.custom.infix.swift" }] } }, comment: "Infix operator", match: `(?x)
\\G

(
(?!(//|/\\*|\\*/))
(
[/=\\-+!*%<>&|^~?]
| [\\x{00A1}-\\x{00A7}]
| [\\x{00A9}\\x{00AB}]
| [\\x{00AC}\\x{00AE}]
| [\\x{00B0}-\\x{00B1}\\x{00B6}\\x{00BB}\\x{00BF}\\x{00D7}\\x{00F7}]
| [\\x{2016}-\\x{2017}\\x{2020}-\\x{2027}]
| [\\x{2030}-\\x{203E}]
| [\\x{2041}-\\x{2053}]
| [\\x{2055}-\\x{205E}]
| [\\x{2190}-\\x{23FF}]
| [\\x{2500}-\\x{2775}]
| [\\x{2794}-\\x{2BFF}]
| [\\x{2E00}-\\x{2E7F}]
| [\\x{3001}-\\x{3003}]
| [\\x{3008}-\\x{3030}]

| [\\x{0300}-\\x{036F}]
| [\\x{1DC0}-\\x{1DFF}]
| [\\x{20D0}-\\x{20FF}]
| [\\x{FE00}-\\x{FE0F}]
| [\\x{FE20}-\\x{FE2F}]
| [\\x{E0100}-\\x{E01EF}]
)
)++` }, { captures: { 0: { patterns: [{ match: ".+", name: "keyword.operator.custom.prefix.dot.swift" }] } }, comment: "Dot prefix unary operator", match: `(?x)
\\G

(?<=^|[\\s(\\[{,;:])
\\.
(
(?!(//|/\\*|\\*/))
(
\\.
| [/=\\-+!*%<>&|^~?]
| [\\x{00A1}-\\x{00A7}]
| [\\x{00A9}\\x{00AB}]
| [\\x{00AC}\\x{00AE}]
| [\\x{00B0}-\\x{00B1}\\x{00B6}\\x{00BB}\\x{00BF}\\x{00D7}\\x{00F7}]
| [\\x{2016}-\\x{2017}\\x{2020}-\\x{2027}]
| [\\x{2030}-\\x{203E}]
| [\\x{2041}-\\x{2053}]
| [\\x{2055}-\\x{205E}]
| [\\x{2190}-\\x{23FF}]
| [\\x{2500}-\\x{2775}]
| [\\x{2794}-\\x{2BFF}]
| [\\x{2E00}-\\x{2E7F}]
| [\\x{3001}-\\x{3003}]
| [\\x{3008}-\\x{3030}]

| [\\x{0300}-\\x{036F}]
| [\\x{1DC0}-\\x{1DFF}]
| [\\x{20D0}-\\x{20FF}]
| [\\x{FE00}-\\x{FE0F}]
| [\\x{FE20}-\\x{FE2F}]
| [\\x{E0100}-\\x{E01EF}]
)
)++
(?![\\s)\\]},;:]|\\z)` }, { captures: { 0: { patterns: [{ match: ".+", name: "keyword.operator.custom.postfix.dot.swift" }] } }, comment: "Dot postfix unary operator", match: `(?x)
\\G

(?<!^|[\\s(\\[{,;:])
\\.
(
(?!(//|/\\*|\\*/))
(
\\.
| [/=\\-+!*%<>&|^~?]
| [\\x{00A1}-\\x{00A7}]
| [\\x{00A9}\\x{00AB}]
| [\\x{00AC}\\x{00AE}]
| [\\x{00B0}-\\x{00B1}\\x{00B6}\\x{00BB}\\x{00BF}\\x{00D7}\\x{00F7}]
| [\\x{2016}-\\x{2017}\\x{2020}-\\x{2027}]
| [\\x{2030}-\\x{203E}]
| [\\x{2041}-\\x{2053}]
| [\\x{2055}-\\x{205E}]
| [\\x{2190}-\\x{23FF}]
| [\\x{2500}-\\x{2775}]
| [\\x{2794}-\\x{2BFF}]
| [\\x{2E00}-\\x{2E7F}]
| [\\x{3001}-\\x{3003}]
| [\\x{3008}-\\x{3030}]

| [\\x{0300}-\\x{036F}]
| [\\x{1DC0}-\\x{1DFF}]
| [\\x{20D0}-\\x{20FF}]
| [\\x{FE00}-\\x{FE0F}]
| [\\x{FE20}-\\x{FE2F}]
| [\\x{E0100}-\\x{E01EF}]
)
)++
(?=[\\s)\\]},;:]|\\z)` }, { captures: { 0: { patterns: [{ match: "\\G\\.\\.[.<]$", name: "keyword.operator.range.swift" }, { match: ".+", name: "keyword.operator.custom.infix.dot.swift" }] } }, comment: "Dot infix operator", match: `(?x)
\\G

\\.
(
(?!(//|/\\*|\\*/))
(
\\.
| [/=\\-+!*%<>&|^~?]
| [\\x{00A1}-\\x{00A7}]
| [\\x{00A9}\\x{00AB}]
| [\\x{00AC}\\x{00AE}]
| [\\x{00B0}-\\x{00B1}\\x{00B6}\\x{00BB}\\x{00BF}\\x{00D7}\\x{00F7}]
| [\\x{2016}-\\x{2017}\\x{2020}-\\x{2027}]
| [\\x{2030}-\\x{203E}]
| [\\x{2041}-\\x{2053}]
| [\\x{2055}-\\x{205E}]
| [\\x{2190}-\\x{23FF}]
| [\\x{2500}-\\x{2775}]
| [\\x{2794}-\\x{2BFF}]
| [\\x{2E00}-\\x{2E7F}]
| [\\x{3001}-\\x{3003}]
| [\\x{3008}-\\x{3030}]

| [\\x{0300}-\\x{036F}]
| [\\x{1DC0}-\\x{1DFF}]
| [\\x{20D0}-\\x{20FF}]
| [\\x{FE00}-\\x{FE0F}]
| [\\x{FE20}-\\x{FE2F}]
| [\\x{E0100}-\\x{E01EF}]
)
)++` }] }, { match: ":", name: "keyword.operator.ternary.swift" }] }, root: { patterns: [{ include: "#compiler-control" }, { include: "#declarations" }, { include: "#expressions" }] } }, scopeName: "source.swift" });
var Xn = [
  Hn
];
const Vn = Object.freeze({ displayName: "Systemd Units", name: "systemd", patterns: [{ include: "#comments" }, { begin: "^\\s*(InaccessableDirectories|InaccessibleDirectories|ReadOnlyDirectories|ReadWriteDirectories|Capabilities|TableId|UseDomainName|IPv6AcceptRouterAdvertisements|SysVStartPriority|StartLimitInterval|RequiresOverridable|RequisiteOverridable|PropagateReloadTo|PropagateReloadFrom|OnFailureIsolate|BindTo)\\s*(=)[ \\t]*", beginCaptures: { 1: { name: "invalid.deprecated" }, 2: { name: "keyword.operator.assignment" } }, end: "(?<!\\\\)\\n", patterns: [{ include: "#comments" }, { include: "#variables" }, { include: "#quotedString" }, { include: "#booleans" }, { include: "#timeSpans" }, { include: "#sizes" }, { include: "#numbers" }] }, { begin: "^\\s*(Environment)\\s*(=)[ \\t]*", beginCaptures: { 1: { name: "entity.name.tag" }, 2: { name: "keyword.operator.assignment" } }, end: "(?<!\\\\)\\n", name: "meta.config-entry.systemd", patterns: [{ include: "#comments" }, { captures: { 1: { name: "variable.parameter" }, 2: { name: "keyword.operator.assignment" } }, match: `(?<=\\G|[\\s"'])([A-Za-z0-9\\_]+)(=)(?=[^\\s"'])` }, { include: "#variables" }, { include: "#booleans" }, { include: "#numbers" }] }, { begin: "^\\s*(OnCalendar)\\s*(=)[ \\t]*", beginCaptures: { 1: { name: "entity.name.tag" }, 2: { name: "keyword.operator.assignment" } }, end: "(?<!\\\\)\\n", name: "meta.config-entry.systemd", patterns: [{ include: "#comments" }, { include: "#variables" }, { include: "#calendarShorthands" }, { include: "#numbers" }] }, { begin: "^\\s*(CapabilityBoundingSet|AmbientCapabilities|AddCapability|DropCapability)\\s*(=)[ \\t]*", beginCaptures: { 1: { name: "entity.name.tag" }, 2: { name: "keyword.operator.assignment" } }, end: "(?<!\\\\)\\n", name: "meta.config-entry.systemd", patterns: [{ include: "#comments" }, { include: "#capabilities" }] }, { begin: "^\\s*(Restart)\\s*(=)[ \\t]*", beginCaptures: { 1: { name: "entity.name.tag" }, 2: { name: "keyword.operator.assignment" } }, end: "(?<!\\\\)\\n", name: "meta.config-entry.systemd", patterns: [{ include: "#comments" }, { include: "#variables" }, { include: "#restartOptions" }] }, { begin: "^\\s*(Type)\\s*(=)[ \\t]*", beginCaptures: { 1: { name: "entity.name.tag" }, 2: { name: "keyword.operator.assignment" } }, end: "(?<!\\\\)\\n", name: "meta.config-entry.systemd", patterns: [{ include: "#comments" }, { include: "#variables" }, { include: "#typeOptions" }] }, { begin: "^\\s*(Exec(?:Start(?:Pre|Post)?|Reload|Stop(?:Post)?))\\s*(=)[ \\t]*", beginCaptures: { 1: { name: "entity.name.tag" }, 2: { name: "keyword.operator.assignment" } }, end: "(?<!\\\\)\\n", name: "meta.config-entry.systemd", patterns: [{ include: "#comments" }, { include: "#executablePrefixes" }, { include: "#variables" }, { include: "#quotedString" }, { include: "#booleans" }, { include: "#numbers" }] }, { begin: "^\\s*([\\w\\-\\.]+)\\s*(=)[ \\t]*", beginCaptures: { 1: { name: "entity.name.tag" }, 2: { name: "keyword.operator.assignment" } }, end: "(?<!\\\\)\\n", name: "meta.config-entry.systemd", patterns: [{ include: "#comments" }, { include: "#variables" }, { include: "#quotedString" }, { include: "#booleans" }, { include: "#timeSpans" }, { include: "#sizes" }, { include: "#numbers" }] }, { include: "#sections" }], repository: { booleans: { patterns: [{ match: "\\b(?<![-\\/\\.])(true|false|on|off|yes|no)(?![-\\/\\.])\\b", name: "constant.language" }] }, calendarShorthands: { patterns: [{ match: "\\b(?:minute|hour|dai|month|week|quarter|semiannual)ly\\b", name: "constant.language" }] }, capabilities: { patterns: [{ match: "\\b(?:CAP_(?:AUDIT_CONTROL|AUDIT_READ|AUDIT_WRITE|BLOCK_SUSPEND|BPF|CHECKPOINT_RESTORE|CHOWN|DAC_OVERRIDE|DAC_READ_SEARCH|FOWNER|FSETID|IPC_LOCK|IPC_OWNER|KILL|LEASE|LINUX_IMMUTABLE|MAC_ADMIN|MAC_OVERRIDE|MKNOD|NET_ADMIN|NET_BIND_SERVICE|NET_BROADCAST|NET_RAW|PERFMON|SETFCAP|SETGID|SETPCAP|SETUID|SYS_ADMIN|SYS_BOOT|SYS_CHROOT|SYS_MODULE|SYS_NICE|SYS_PACCT|SYS_PTRACE|SYS_RAWIO|SYS_RESOURCE|SYS_TIME|SYS_TTY_CONFIG|SYSLOG|WAKE_ALARM))\\b", name: "constant.other.systemd" }] }, comments: { patterns: [{ match: "^\\s*[#;].*\\n", name: "comment.line.number-sign" }] }, executablePrefixes: { patterns: [{ match: "\\G([@\\-\\:]+(?:\\+|\\!\\!?)?|(?:\\+|\\!\\!?)[@\\-\\:]*)", name: "keyword.operator.prefix.systemd" }] }, numbers: { patterns: [{ match: "(?<=\\s|=)\\d+(?:\\.\\d+)?(?=[\\s:]|$)", name: "constant.numeric" }] }, quotedString: { patterns: [{ begin: "(?<=\\G|\\s)'", end: "['\\n]", name: "string.quoted.single", patterns: [{ match: `\\\\(?:[abfnrtvs\\\\"'\\n]|x[0-9A-Fa-f]{2}|[0-8]{3}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})`, name: "constant.character.escape" }] }, { begin: '(?<=\\G|\\s)"', end: '["\\n]', name: "string.quoted.double", patterns: [{ match: `\\\\(?:[abfnrtvs\\\\"'\\n]|x[0-9A-Fa-f]{2}|[0-8]{3}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})`, name: "constant.character.escape" }] }] }, restartOptions: { patterns: [{ match: "\\b(no|always|on\\-(?:success|failure|abnormal|abort|watchdog))\\b", name: "constant.language" }] }, sections: { patterns: [{ match: "^\\s*\\[(Address|Automount|BFIFO|BareUDP|BatmanAdvanced|Bond|Bridge|BridgeFDB|BridgeMDB|BridgeVLAN|CAKE|CAN|Container|Content|ControlledDelay|Coredump|D-BUS Service|DHCP|DHCPPrefixDelegation|DHCPServer|DHCPServerStaticLease|DHCPv4|DHCPv6|DHCPv6PrefixDelegation|DeficitRoundRobinScheduler|DeficitRoundRobinSchedulerClass|Distribution|EnhancedTransmissionSelection|Exec|FairQueueing|FairQueueingControlledDelay|Files|FlowQueuePIE|FooOverUDP|GENEVE|GenericRandomEarlyDetection|HeavyHitterFilter|HierarchyTokenBucket|HierarchyTokenBucketClass|Home|IOCost|IPVLAN|IPVTAP|IPoIB|IPv6AcceptRA|IPv6AddressLabel|IPv6PREF64Prefix|IPv6Prefix|IPv6PrefixDelegation|IPv6RoutePrefix|IPv6SendRA|Image|Install|Journal|Kube|L2TP|L2TPSession|LLDP|Link|Login|MACVLAN|MACVTAP|MACsec|MACsecReceiveAssociation|MACsecReceiveChannel|MACsecTransmitAssociation|Manager|Match|Mount|Neighbor|NetDev|Network|NetworkEmulator|NextHop|OOM|Output|PFIFO|PFIFOFast|PFIFOHeadDrop|PIE|PStore|Packages|Partition|Path|Peer|Pod|QDisc|QuickFairQueueing|QuickFairQueueingClass|Remote|Resolve|Route|RoutingPolicyRule|SR-IOV|Scope|Service|Sleep|Socket|Source|StochasticFairBlue|StochasticFairnessQueueing|Swap|Tap|Target|Time|Timer|TokenBucketFilter|TrafficControlQueueingDiscipline|Transfer|TrivialLinkEqualizer|Tun|Tunnel|UKI|Unit|Upload|VLAN|VRF|VXCAN|VXLAN|Volume|WLAN|WireGuard|WireGuardPeer|Xfrm)\\]", name: "entity.name.section" }, { match: "\\s*\\[[\\w-]+\\]", name: "entity.name.unknown-section" }] }, sizes: { patterns: [{ match: "(?<=\\s|=)\\d+(?:\\.\\d+)?[KMGT](?=[\\s:]|$)", name: "constant.numeric" }, { match: "(?<==)infinity(?=[\\s:]|$)", name: "constant.numeric" }] }, timeSpans: { patterns: [{ match: "\\b(?:\\d+(?:[uμ]s(?:ec)?|ms(?:ec)?|s(?:ec|econds?)?|m(?:in|inutes?)?|h(?:r|ours?)?|d(?:ays?)?|w(?:eeks)?|M|months?|y(?:ears?)?)){1,}\\b", name: "constant.numeric" }] }, typeOptions: { patterns: [{ match: "\\b(?:simple|exec|forking|oneshot|dbus|notify(?:-reload)?|idle|unicast|local|broadcast|anycast|multicast|blackhole|unreachable|prohibit|throw|nat|xresolve|blackhole|unreachable|prohibit|ad-hoc|station|ap(?:-vlan)?|wds|monitor|mesh-point|p2p-(?:client|go|device)|ocb|nan)\\b", name: "constant.language" }] }, variables: { patterns: [{ captures: { 1: { name: "punctuation.definition.variable.systemd" }, 2: { name: "variable.other" } }, match: "(\\$)([A-Za-z0-9\\_]+)\\b" }, { captures: { 1: { name: "punctuation.definition.variable.systemd" }, 2: { name: "variable.other" }, 3: { name: "punctuation.definition.variable.systemd" } }, match: "(\\$\\{)([A-Za-z0-9\\_]+)(\\})" }, { match: "%%", name: "constant.other.placeholder" }, { match: "%[aAbBCEfgGhHiIjJlLmMnNopPsStTuUvVwW]\\b", name: "constant.other.placeholder" }] } }, scopeName: "source.systemd" });
var Yn = [
  Vn
];
const Kn = Object.freeze({ displayName: "TOML", fileTypes: ["toml"], name: "toml", patterns: [{ include: "#comments" }, { include: "#groups" }, { include: "#key_pair" }, { include: "#invalid" }], repository: { comments: { begin: "(^[ \\t]+)?(?=#)", beginCaptures: { 1: { name: "punctuation.whitespace.comment.leading.toml" } }, end: "(?!\\G)", patterns: [{ begin: "#", beginCaptures: { 0: { name: "punctuation.definition.comment.toml" } }, end: "\\n", name: "comment.line.number-sign.toml" }] }, groups: { patterns: [{ captures: { 1: { name: "punctuation.definition.section.begin.toml" }, 2: { patterns: [{ match: "[^\\s.]+", name: "entity.name.section.toml" }] }, 3: { name: "punctuation.definition.section.begin.toml" } }, match: "^\\s*(\\[)([^\\[\\]]*)(\\])", name: "meta.group.toml" }, { captures: { 1: { name: "punctuation.definition.section.begin.toml" }, 2: { patterns: [{ match: "[^\\s.]+", name: "entity.name.section.toml" }] }, 3: { name: "punctuation.definition.section.begin.toml" } }, match: "^\\s*(\\[\\[)([^\\[\\]]*)(\\]\\])", name: "meta.group.double.toml" }] }, invalid: { match: "\\S+(\\s*(?=\\S))?", name: "invalid.illegal.not-allowed-here.toml" }, key_pair: { patterns: [{ begin: "([A-Za-z0-9_-]+)\\s*(=)\\s*", captures: { 1: { name: "variable.other.key.toml" }, 2: { name: "punctuation.separator.key-value.toml" } }, end: "(?<=\\S)(?<!=)|$", patterns: [{ include: "#primatives" }] }, { begin: '((")(.*?)("))\\s*(=)\\s*', captures: { 1: { name: "variable.other.key.toml" }, 2: { name: "punctuation.definition.variable.begin.toml" }, 3: { patterns: [{ match: '\\\\([btnfr"\\\\]|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})', name: "constant.character.escape.toml" }, { match: '\\\\[^btnfr"\\\\]', name: "invalid.illegal.escape.toml" }, { match: '"', name: "invalid.illegal.not-allowed-here.toml" }] }, 4: { name: "punctuation.definition.variable.end.toml" }, 5: { name: "punctuation.separator.key-value.toml" } }, end: "(?<=\\S)(?<!=)|$", patterns: [{ include: "#primatives" }] }, { begin: "((')([^']*)('))\\s*(=)\\s*", captures: { 1: { name: "variable.other.key.toml" }, 2: { name: "punctuation.definition.variable.begin.toml" }, 4: { name: "punctuation.definition.variable.end.toml" }, 5: { name: "punctuation.separator.key-value.toml" } }, end: "(?<=\\S)(?<!=)|$", patterns: [{ include: "#primatives" }] }, { begin: `(?x)
(
(
(?:
[A-Za-z0-9_-]+
| "  (?:[^"\\\\]|\\\\.)* "
| ' [^']*          '
)
(?:
\\s* \\. \\s*
| (?= \\s* =)
)
){2,}
)
\\s*(=)\\s*
`, captures: { 1: { name: "variable.other.key.toml", patterns: [{ match: "\\.", name: "punctuation.separator.variable.toml" }, { captures: { 1: { name: "punctuation.definition.variable.begin.toml" }, 2: { patterns: [{ match: '\\\\([btnfr"\\\\]|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})', name: "constant.character.escape.toml" }, { match: '\\\\[^btnfr"\\\\]', name: "invalid.illegal.escape.toml" }] }, 3: { name: "punctuation.definition.variable.end.toml" } }, match: '(")((?:[^"\\\\]|\\\\.)*)(")' }, { captures: { 1: { name: "punctuation.definition.variable.begin.toml" }, 2: { name: "punctuation.definition.variable.end.toml" } }, match: "(')[^']*(')" }] }, 3: { name: "punctuation.separator.key-value.toml" } }, comment: "Dotted key", end: "(?<=\\S)(?<!=)|$", patterns: [{ include: "#primatives" }] }] }, primatives: { patterns: [{ begin: '\\G"""', beginCaptures: { 0: { name: "punctuation.definition.string.begin.toml" } }, end: '"{3,5}', endCaptures: { 0: { name: "punctuation.definition.string.end.toml" } }, name: "string.quoted.triple.double.toml", patterns: [{ match: '\\\\([btnfr"\\\\]|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})', name: "constant.character.escape.toml" }, { match: '\\\\[^btnfr"\\\\\\n]', name: "invalid.illegal.escape.toml" }] }, { begin: '\\G"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.toml" } }, end: '"', endCaptures: { 0: { name: "punctuation.definition.string.end.toml" } }, name: "string.quoted.double.toml", patterns: [{ match: '\\\\([btnfr"\\\\]|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})', name: "constant.character.escape.toml" }, { match: '\\\\[^btnfr"\\\\]', name: "invalid.illegal.escape.toml" }] }, { begin: "\\G'''", beginCaptures: { 0: { name: "punctuation.definition.string.begin.toml" } }, end: "'{3,5}", endCaptures: { 0: { name: "punctuation.definition.string.end.toml" } }, name: "string.quoted.triple.single.toml" }, { begin: "\\G'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.toml" } }, end: "'", endCaptures: { 0: { name: "punctuation.definition.string.end.toml" } }, name: "string.quoted.single.toml" }, { match: `\\G(?x)
[0-9]{4}
-
(0[1-9]|1[012])
-
(?!00|3[2-9])[0-3][0-9]
(
[Tt ]
(?!2[5-9])[0-2][0-9]
:
[0-5][0-9]
:
(?!6[1-9])[0-6][0-9]
(\\.[0-9]+)?
(
Z
| [+-](?!2[5-9])[0-2][0-9]:[0-5][0-9]
)?
)?
`, name: "constant.other.date.toml" }, { match: `\\G(?x)
(?!2[5-9])[0-2][0-9]
:
[0-5][0-9]
:
(?!6[1-9])[0-6][0-9]
(\\.[0-9]+)?
`, name: "constant.other.time.toml" }, { match: "\\G(true|false)", name: "constant.language.boolean.toml" }, { match: "\\G0x\\h(\\h|_\\h)*", name: "constant.numeric.hex.toml" }, { match: "\\G0o[0-7]([0-7]|_[0-7])*", name: "constant.numeric.octal.toml" }, { match: "\\G0b[01]([01]|_[01])*", name: "constant.numeric.binary.toml" }, { match: "\\G[+-]?(inf|nan)", name: "constant.numeric.toml" }, { match: `(?x)
\\G
(
[+-]?
(
0
| ([1-9](([0-9]|_[0-9])+)?)
)
)
(?=[.eE])
(
\\.
([0-9](([0-9]|_[0-9])+)?)
)?
(
[eE]
([+-]?[0-9](([0-9]|_[0-9])+)?)
)?
`, name: "constant.numeric.float.toml" }, { match: `(?x)
\\G
(
[+-]?
(
0
| ([1-9](([0-9]|_[0-9])+)?)
)
)
`, name: "constant.numeric.integer.toml" }, { begin: "\\G\\[", beginCaptures: { 0: { name: "punctuation.definition.array.begin.toml" } }, end: "\\]", endCaptures: { 0: { name: "punctuation.definition.array.end.toml" } }, name: "meta.array.toml", patterns: [{ begin: `(?=["'']|[+-]?[0-9]|[+-]?(inf|nan)|true|false|\\[|\\{)`, end: ",|(?=])", endCaptures: { 0: { name: "punctuation.separator.array.toml" } }, patterns: [{ include: "#primatives" }, { include: "#comments" }, { include: "#invalid" }] }, { include: "#comments" }, { include: "#invalid" }] }, { begin: "\\G\\{", beginCaptures: { 0: { name: "punctuation.definition.inline-table.begin.toml" } }, end: "\\}", endCaptures: { 0: { name: "punctuation.definition.inline-table.end.toml" } }, name: "meta.inline-table.toml", patterns: [{ begin: "(?=\\S)", end: ",|(?=})", endCaptures: { 0: { name: "punctuation.separator.inline-table.toml" } }, patterns: [{ include: "#key_pair" }] }, { include: "#comments" }] }] } }, scopeName: "source.toml" });
var N = [
  Kn
];
const Qn = Object.freeze({ displayName: "TSV", fileTypes: ["tsv", "tab"], name: "tsv", patterns: [{ captures: { 1: { name: "rainbow1" }, 2: { name: "keyword.rainbow2" }, 3: { name: "entity.name.function.rainbow3" }, 4: { name: "comment.rainbow4" }, 5: { name: "string.rainbow5" }, 6: { name: "variable.parameter.rainbow6" }, 7: { name: "constant.numeric.rainbow7" }, 8: { name: "entity.name.type.rainbow8" }, 9: { name: "markup.bold.rainbow9" }, 10: { name: "invalid.rainbow10" } }, match: "([^\\t]*\\t?)([^\\t]*\\t?)([^\\t]*\\t?)([^\\t]*\\t?)([^\\t]*\\t?)([^\\t]*\\t?)([^\\t]*\\t?)([^\\t]*\\t?)([^\\t]*\\t?)([^\\t]*\\t?)", name: "rainbowgroup" }], scopeName: "text.tsv" });
var Jn = [
  Qn
];
const et = Object.freeze({ fileTypes: [], injectTo: ["text.html.markdown"], injectionSelector: "L:text.html.markdown", name: "markdown-vue", patterns: [{ include: "#vue-code-block" }], repository: { "vue-code-block": { begin: "(^|\\G)(\\s*)(`{3,}|~{3,})\\s*(?i:(vue)((\\s+|:|,|\\{|\\?)[^`~]*)?$)", beginCaptures: { 3: { name: "punctuation.definition.markdown" }, 4: { name: "fenced_code.block.language.markdown" }, 5: { name: "fenced_code.block.language.attributes.markdown", patterns: [] } }, end: "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$", endCaptures: { 3: { name: "punctuation.definition.markdown" } }, name: "markup.fenced_code.block.markdown", patterns: [{ include: "source.vue" }] } }, scopeName: "markdown.vue.codeblock" });
var nt = [
  et
];
const tt = Object.freeze({ fileTypes: [], injectTo: ["source.vue", "text.html.markdown", "text.html.derivative", "text.pug"], injectionSelector: "L:meta.tag -meta.attribute -meta.ng-binding -entity.name.tag.pug -attribute_value -source.tsx -source.js.jsx, L:meta.element -meta.attribute", name: "vue-directives", patterns: [{ include: "source.vue#vue-directives" }], scopeName: "vue.directives" });
var at = [
  tt
];
const it = Object.freeze({ fileTypes: [], injectTo: ["source.vue", "text.html.markdown", "text.html.derivative", "text.pug"], injectionSelector: "L:text.pug -comment -string.comment, L:text.html.derivative -comment.block, L:text.html.markdown -comment.block", name: "vue-interpolations", patterns: [{ include: "source.vue#vue-interpolations" }], scopeName: "vue.interpolations" });
var rt = [
  it
];
const st = Object.freeze({ fileTypes: [], injectTo: ["source.vue"], injectionSelector: "L:source.css -comment, L:source.postcss -comment, L:source.sass -comment, L:source.stylus -comment", name: "vue-sfc-style-variable-injection", patterns: [{ include: "#vue-sfc-style-variable-injection" }], repository: { "vue-sfc-style-variable-injection": { begin: "\\b(v-bind)\\s*\\(", beginCaptures: { 1: { name: "entity.name.function" } }, end: "\\)", name: "vue.sfc.style.variable.injection.v-bind", patterns: [{ begin: `('|")`, beginCaptures: { 1: { name: "punctuation.definition.tag.begin.html" } }, end: "(\\1)", endCaptures: { 1: { name: "punctuation.definition.tag.end.html" } }, name: "source.ts.embedded.html.vue", patterns: [{ include: "source.js" }] }, { include: "source.js" }] } }, scopeName: "vue.sfc.style.variable.injection", embeddedLangs: ["javascript"] });
var ot = [
  ...e,
  st
];
const ct = Object.freeze({ displayName: "Vue", name: "vue", patterns: [{ include: "text.html.basic#comment" }, { include: "#self-closing-tag" }, { begin: "(<)", beginCaptures: { 1: { name: "punctuation.definition.tag.begin.html.vue" } }, end: "(>)", endCaptures: { 1: { name: "punctuation.definition.tag.end.html.vue" } }, patterns: [{ begin: `([a-zA-Z0-9:-]+)\\b(?=[^>]*\\blang\\s*=\\s*(['"]?)md\\b\\2)`, beginCaptures: { 1: { name: "entity.name.tag.$1.html.vue" } }, end: "(</)(\\1)\\s*(?=>)", endCaptures: { 1: { name: "punctuation.definition.tag.begin.html.vue" }, 2: { name: "entity.name.tag.$2.html.vue" } }, patterns: [{ include: "#tag-stuff" }, { begin: "(?<=>)", end: "(?=<\\/)", name: "text.html.markdown", patterns: [{ include: "text.html.markdown" }] }] }, { begin: `([a-zA-Z0-9:-]+)\\b(?=[^>]*\\blang\\s*=\\s*(['"]?)html\\b\\2)`, beginCaptures: { 1: { name: "entity.name.tag.$1.html.vue" } }, end: "(</)(\\1)\\s*(?=>)", endCaptures: { 1: { name: "punctuation.definition.tag.begin.html.vue" }, 2: { name: "entity.name.tag.$2.html.vue" } }, patterns: [{ include: "#tag-stuff" }, { begin: "(?<=>)", end: "(?=<\\/)", name: "text.html.derivative", patterns: [{ include: "#html-stuff" }] }] }, { begin: `([a-zA-Z0-9:-]+)\\b(?=[^>]*\\blang\\s*=\\s*(['"]?)pug\\b\\2)`, beginCaptures: { 1: { name: "entity.name.tag.$1.html.vue" } }, end: "(</)(\\1)\\s*(?=>)", endCaptures: { 1: { name: "punctuation.definition.tag.begin.html.vue" }, 2: { name: "entity.name.tag.$2.html.vue" } }, patterns: [{ include: "#tag-stuff" }, { begin: "(?<=>)", end: "(?=<\\/)", name: "text.pug", patterns: [{ include: "text.pug" }] }] }, { begin: `([a-zA-Z0-9:-]+)\\b(?=[^>]*\\blang\\s*=\\s*(['"]?)stylus\\b\\2)`, beginCaptures: { 1: { name: "entity.name.tag.$1.html.vue" } }, end: "(</)(\\1)\\s*(?=>)", endCaptures: { 1: { name: "punctuation.definition.tag.begin.html.vue" }, 2: { name: "entity.name.tag.$2.html.vue" } }, patterns: [{ include: "#tag-stuff" }, { begin: "(?<=>)", end: "(?=<\\/)", name: "source.stylus", patterns: [{ include: "source.stylus" }] }] }, { begin: `([a-zA-Z0-9:-]+)\\b(?=[^>]*\\blang\\s*=\\s*(['"]?)postcss\\b\\2)`, beginCaptures: { 1: { name: "entity.name.tag.$1.html.vue" } }, end: "(</)(\\1)\\s*(?=>)", endCaptures: { 1: { name: "punctuation.definition.tag.begin.html.vue" }, 2: { name: "entity.name.tag.$2.html.vue" } }, patterns: [{ include: "#tag-stuff" }, { begin: "(?<=>)", end: "(?=<\\/)", name: "source.postcss", patterns: [{ include: "source.postcss" }] }] }, { begin: `([a-zA-Z0-9:-]+)\\b(?=[^>]*\\blang\\s*=\\s*(['"]?)sass\\b\\2)`, beginCaptures: { 1: { name: "entity.name.tag.$1.html.vue" } }, end: "(</)(\\1)\\s*(?=>)", endCaptures: { 1: { name: "punctuation.definition.tag.begin.html.vue" }, 2: { name: "entity.name.tag.$2.html.vue" } }, patterns: [{ include: "#tag-stuff" }, { begin: "(?<=>)", end: "(?=<\\/)", name: "source.sass", patterns: [{ include: "source.sass" }] }] }, { begin: `([a-zA-Z0-9:-]+)\\b(?=[^>]*\\blang\\s*=\\s*(['"]?)css\\b\\2)`, beginCaptures: { 1: { name: "entity.name.tag.$1.html.vue" } }, end: "(</)(\\1)\\s*(?=>)", endCaptures: { 1: { name: "punctuation.definition.tag.begin.html.vue" }, 2: { name: "entity.name.tag.$2.html.vue" } }, patterns: [{ include: "#tag-stuff" }, { begin: "(?<=>)", end: "(?=<\\/)", name: "source.css", patterns: [{ include: "source.css" }] }] }, { begin: `([a-zA-Z0-9:-]+)\\b(?=[^>]*\\blang\\s*=\\s*(['"]?)scss\\b\\2)`, beginCaptures: { 1: { name: "entity.name.tag.$1.html.vue" } }, end: "(</)(\\1)\\s*(?=>)", endCaptures: { 1: { name: "punctuation.definition.tag.begin.html.vue" }, 2: { name: "entity.name.tag.$2.html.vue" } }, patterns: [{ include: "#tag-stuff" }, { begin: "(?<=>)", end: "(?=<\\/)", name: "source.css.scss", patterns: [{ include: "source.css.scss" }] }] }, { begin: `([a-zA-Z0-9:-]+)\\b(?=[^>]*\\blang\\s*=\\s*(['"]?)less\\b\\2)`, beginCaptures: { 1: { name: "entity.name.tag.$1.html.vue" } }, end: "(</)(\\1)\\s*(?=>)", endCaptures: { 1: { name: "punctuation.definition.tag.begin.html.vue" }, 2: { name: "entity.name.tag.$2.html.vue" } }, patterns: [{ include: "#tag-stuff" }, { begin: "(?<=>)", end: "(?=<\\/)", name: "source.css.less", patterns: [{ include: "source.css.less" }] }] }, { begin: `([a-zA-Z0-9:-]+)\\b(?=[^>]*\\blang\\s*=\\s*(['"]?)js\\b\\2)`, beginCaptures: { 1: { name: "entity.name.tag.$1.html.vue" } }, end: "(</)(\\1)\\s*(?=>)", endCaptures: { 1: { name: "punctuation.definition.tag.begin.html.vue" }, 2: { name: "entity.name.tag.$2.html.vue" } }, patterns: [{ include: "#tag-stuff" }, { begin: "(?<=>)", end: "(?=<\\/)", name: "source.js", patterns: [{ include: "source.js" }] }] }, { begin: `([a-zA-Z0-9:-]+)\\b(?=[^>]*\\blang\\s*=\\s*(['"]?)ts\\b\\2)`, beginCaptures: { 1: { name: "entity.name.tag.$1.html.vue" } }, end: "(</)(\\1)\\s*(?=>)", endCaptures: { 1: { name: "punctuation.definition.tag.begin.html.vue" }, 2: { name: "entity.name.tag.$2.html.vue" } }, patterns: [{ include: "#tag-stuff" }, { begin: "(?<=>)", end: "(?=<\\/)", name: "source.ts", patterns: [{ include: "source.ts" }] }] }, { begin: `([a-zA-Z0-9:-]+)\\b(?=[^>]*\\blang\\s*=\\s*(['"]?)jsx\\b\\2)`, beginCaptures: { 1: { name: "entity.name.tag.$1.html.vue" } }, end: "(</)(\\1)\\s*(?=>)", endCaptures: { 1: { name: "punctuation.definition.tag.begin.html.vue" }, 2: { name: "entity.name.tag.$2.html.vue" } }, patterns: [{ include: "#tag-stuff" }, { begin: "(?<=>)", end: "(?=<\\/)", name: "source.js.jsx", patterns: [{ include: "source.js.jsx" }] }] }, { begin: `([a-zA-Z0-9:-]+)\\b(?=[^>]*\\blang\\s*=\\s*(['"]?)tsx\\b\\2)`, beginCaptures: { 1: { name: "entity.name.tag.$1.html.vue" } }, end: "(</)(\\1)\\s*(?=>)", endCaptures: { 1: { name: "punctuation.definition.tag.begin.html.vue" }, 2: { name: "entity.name.tag.$2.html.vue" } }, patterns: [{ include: "#tag-stuff" }, { begin: "(?<=>)", end: "(?=<\\/)", name: "source.tsx", patterns: [{ include: "source.tsx" }] }] }, { begin: `([a-zA-Z0-9:-]+)\\b(?=[^>]*\\blang\\s*=\\s*(['"]?)coffee\\b\\2)`, beginCaptures: { 1: { name: "entity.name.tag.$1.html.vue" } }, end: "(</)(\\1)\\s*(?=>)", endCaptures: { 1: { name: "punctuation.definition.tag.begin.html.vue" }, 2: { name: "entity.name.tag.$2.html.vue" } }, patterns: [{ include: "#tag-stuff" }, { begin: "(?<=>)", end: "(?=<\\/)", name: "source.coffee", patterns: [{ include: "source.coffee" }] }] }, { begin: `([a-zA-Z0-9:-]+)\\b(?=[^>]*\\blang\\s*=\\s*(['"]?)json\\b\\2)`, beginCaptures: { 1: { name: "entity.name.tag.$1.html.vue" } }, end: "(</)(\\1)\\s*(?=>)", endCaptures: { 1: { name: "punctuation.definition.tag.begin.html.vue" }, 2: { name: "entity.name.tag.$2.html.vue" } }, patterns: [{ include: "#tag-stuff" }, { begin: "(?<=>)", end: "(?=<\\/)", name: "source.json", patterns: [{ include: "source.json" }] }] }, { begin: `([a-zA-Z0-9:-]+)\\b(?=[^>]*\\blang\\s*=\\s*(['"]?)jsonc\\b\\2)`, beginCaptures: { 1: { name: "entity.name.tag.$1.html.vue" } }, end: "(</)(\\1)\\s*(?=>)", endCaptures: { 1: { name: "punctuation.definition.tag.begin.html.vue" }, 2: { name: "entity.name.tag.$2.html.vue" } }, patterns: [{ include: "#tag-stuff" }, { begin: "(?<=>)", end: "(?=<\\/)", name: "source.json.comments", patterns: [{ include: "source.json.comments" }] }] }, { begin: `([a-zA-Z0-9:-]+)\\b(?=[^>]*\\blang\\s*=\\s*(['"]?)json5\\b\\2)`, beginCaptures: { 1: { name: "entity.name.tag.$1.html.vue" } }, end: "(</)(\\1)\\s*(?=>)", endCaptures: { 1: { name: "punctuation.definition.tag.begin.html.vue" }, 2: { name: "entity.name.tag.$2.html.vue" } }, patterns: [{ include: "#tag-stuff" }, { begin: "(?<=>)", end: "(?=<\\/)", name: "source.json5", patterns: [{ include: "source.json5" }] }] }, { begin: `([a-zA-Z0-9:-]+)\\b(?=[^>]*\\blang\\s*=\\s*(['"]?)yaml\\b\\2)`, beginCaptures: { 1: { name: "entity.name.tag.$1.html.vue" } }, end: "(</)(\\1)\\s*(?=>)", endCaptures: { 1: { name: "punctuation.definition.tag.begin.html.vue" }, 2: { name: "entity.name.tag.$2.html.vue" } }, patterns: [{ include: "#tag-stuff" }, { begin: "(?<=>)", end: "(?=<\\/)", name: "source.yaml", patterns: [{ include: "source.yaml" }] }] }, { begin: `([a-zA-Z0-9:-]+)\\b(?=[^>]*\\blang\\s*=\\s*(['"]?)toml\\b\\2)`, beginCaptures: { 1: { name: "entity.name.tag.$1.html.vue" } }, end: "(</)(\\1)\\s*(?=>)", endCaptures: { 1: { name: "punctuation.definition.tag.begin.html.vue" }, 2: { name: "entity.name.tag.$2.html.vue" } }, patterns: [{ include: "#tag-stuff" }, { begin: "(?<=>)", end: "(?=<\\/)", name: "source.toml", patterns: [{ include: "source.toml" }] }] }, { begin: `([a-zA-Z0-9:-]+)\\b(?=[^>]*\\blang\\s*=\\s*(['"]?)(gql|graphql)\\b\\2)`, beginCaptures: { 1: { name: "entity.name.tag.$1.html.vue" } }, end: "(</)(\\1)\\s*(?=>)", endCaptures: { 1: { name: "punctuation.definition.tag.begin.html.vue" }, 2: { name: "entity.name.tag.$2.html.vue" } }, patterns: [{ include: "#tag-stuff" }, { begin: "(?<=>)", end: "(?=<\\/)", name: "source.graphql", patterns: [{ include: "source.graphql" }] }] }, { begin: `([a-zA-Z0-9:-]+)\\b(?=[^>]*\\blang\\s*=\\s*(['"]?)vue\\b\\2)`, beginCaptures: { 1: { name: "entity.name.tag.$1.html.vue" } }, end: "(</)(\\1)\\s*(?=>)", endCaptures: { 1: { name: "punctuation.definition.tag.begin.html.vue" }, 2: { name: "entity.name.tag.$2.html.vue" } }, patterns: [{ include: "#tag-stuff" }, { begin: "(?<=>)", end: "(?=<\\/)", name: "source.vue", patterns: [{ include: "source.vue" }] }] }, { begin: "(template)\\b", beginCaptures: { 1: { name: "entity.name.tag.$1.html.vue" } }, end: "(</)(\\1)\\s*(?=>)", endCaptures: { 1: { name: "punctuation.definition.tag.begin.html.vue" }, 2: { name: "entity.name.tag.$2.html.vue" } }, patterns: [{ include: "#tag-stuff" }, { begin: "(?<=>)", end: "(?=<\\/template\\b)", name: "text.html.derivative", patterns: [{ include: "#html-stuff" }] }] }, { begin: "(script)\\b", beginCaptures: { 1: { name: "entity.name.tag.$1.html.vue" } }, end: "(</)(\\1)\\s*(?=>)", endCaptures: { 1: { name: "punctuation.definition.tag.begin.html.vue" }, 2: { name: "entity.name.tag.$2.html.vue" } }, patterns: [{ include: "#tag-stuff" }, { begin: "(?<=>)", end: "(?=<\\/script\\b)", name: "source.js", patterns: [{ include: "source.js" }] }] }, { begin: "(style)\\b", beginCaptures: { 1: { name: "entity.name.tag.$1.html.vue" } }, end: "(</)(\\1)\\s*(?=>)", endCaptures: { 1: { name: "punctuation.definition.tag.begin.html.vue" }, 2: { name: "entity.name.tag.$2.html.vue" } }, patterns: [{ include: "#tag-stuff" }, { begin: "(?<=>)", end: "(?=<\\/style\\b)", name: "source.css", patterns: [{ include: "source.css" }] }] }, { begin: "([a-zA-Z0-9:-]+)", beginCaptures: { 1: { name: "entity.name.tag.$1.html.vue" } }, end: "(</)(\\1)\\s*(?=>)", endCaptures: { 1: { name: "punctuation.definition.tag.begin.html.vue" }, 2: { name: "entity.name.tag.$2.html.vue" } }, patterns: [{ include: "#tag-stuff" }, { begin: "(?<=>)", end: "(?=<\\/)", name: "text" }] }] }], repository: { "html-stuff": { patterns: [{ include: "#template-tag" }, { include: "text.html.derivative" }, { include: "text.html.basic" }] }, "self-closing-tag": { begin: "(<)([a-zA-Z0-9:-]+)(?=([^>]+/>))", beginCaptures: { 1: { name: "punctuation.definition.tag.begin.html.vue" }, 2: { name: "entity.name.tag.$2.html.vue" } }, end: "(/>)", endCaptures: { 1: { name: "punctuation.definition.tag.end.html.vue" } }, name: "self-closing-tag", patterns: [{ include: "#tag-stuff" }] }, "tag-stuff": { begin: "\\G", end: "(?=/>)|(>)", endCaptures: { 1: { name: "punctuation.definition.tag.end.html.vue" } }, name: "meta.tag-stuff", patterns: [{ include: "#vue-directives" }, { include: "text.html.basic#attribute" }] }, "template-tag": { patterns: [{ include: "#template-tag-1" }, { include: "#template-tag-2" }] }, "template-tag-1": { begin: "(<)(template)\\b(>)", beginCaptures: { 1: { name: "punctuation.definition.tag.begin.html.vue" }, 2: { name: "entity.name.tag.$2.html.vue" }, 3: { name: "punctuation.definition.tag.end.html.vue" } }, end: "(/?>)", endCaptures: { 1: { name: "punctuation.definition.tag.end.html.vue" } }, name: "meta.template-tag.start", patterns: [{ begin: "\\G", end: "(?=/>)|((</)(template)\\b)", endCaptures: { 2: { name: "punctuation.definition.tag.begin.html.vue" }, 3: { name: "entity.name.tag.$3.html.vue" } }, name: "meta.template-tag.end", patterns: [{ include: "#html-stuff" }] }] }, "template-tag-2": { begin: "(<)(template)\\b", beginCaptures: { 1: { name: "punctuation.definition.tag.begin.html.vue" }, 2: { name: "entity.name.tag.$2.html.vue" } }, end: "(/?>)", endCaptures: { 1: { name: "punctuation.definition.tag.end.html.vue" } }, name: "meta.template-tag.start", patterns: [{ begin: "\\G", end: "(?=/>)|((</)(template)\\b)", endCaptures: { 2: { name: "punctuation.definition.tag.begin.html.vue" }, 3: { name: "entity.name.tag.$3.html.vue" } }, name: "meta.template-tag.end", patterns: [{ include: "#tag-stuff" }, { include: "#html-stuff" }] }] }, "vue-directives": { patterns: [{ include: "#vue-directives-control" }, { include: "#vue-directives-style-attr" }, { include: "#vue-directives-original" }, { include: "#vue-directives-generic-attr" }] }, "vue-directives-control": { begin: "(v-for)|(v-if|v-else-if|v-else)", captures: { 1: { name: "keyword.control.loop.vue" }, 2: { name: "keyword.control.conditional.vue" } }, end: "(?=\\s*+[^=\\s])", name: "meta.attribute.directive.control.vue", patterns: [{ include: "#vue-directives-expression" }] }, "vue-directives-expression": { patterns: [{ begin: "(=)\\s*('|\"|`)", beginCaptures: { 1: { name: "punctuation.separator.key-value.html.vue" }, 2: { name: "punctuation.definition.string.begin.html.vue" } }, end: "(\\2)", endCaptures: { 1: { name: "punctuation.definition.string.end.html.vue" } }, patterns: [{ begin: "(?<=('|\"|`))", end: "(?=\\1)", name: "source.ts.embedded.html.vue", patterns: [{ include: "source.ts#expression" }] }] }, { begin: "(=)\\s*(?=[^'\"`])", beginCaptures: { 1: { name: "punctuation.separator.key-value.html.vue" } }, end: "(?=(\\s|>|\\/>))", patterns: [{ begin: "(?=[^'\"`])", end: "(?=(\\s|>|\\/>))", name: "source.ts.embedded.html.vue", patterns: [{ include: "source.ts#expression" }] }] }] }, "vue-directives-generic-attr": { begin: "\\b(generic)\\s*(=)", captures: { 1: { name: "entity.other.attribute-name.html.vue" }, 2: { name: "punctuation.separator.key-value.html.vue" } }, end: `(?<='|")`, name: "meta.attribute.generic.vue", patterns: [{ begin: `('|")`, beginCaptures: { 1: { name: "punctuation.definition.string.begin.html.vue" } }, comment: "https://github.com/microsoft/vscode/blob/fd4346210f59135fad81a8b8c4cea7bf5a9ca6b4/extensions/typescript-basics/syntaxes/TypeScript.tmLanguage.json#L4002-L4020", end: "(\\1)", endCaptures: { 1: { name: "punctuation.definition.string.end.html.vue" } }, name: "meta.type.parameters.vue", patterns: [{ include: "source.ts#comment" }, { match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(extends|in|out)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))", name: "storage.modifier.ts" }, { include: "source.ts#type" }, { include: "source.ts#punctuation-comma" }, { match: "(=)(?!>)", name: "keyword.operator.assignment.ts" }] }] }, "vue-directives-original": { begin: "(?:(?:(v-[\\w-]+)(:)?)|([:\\.])|(@)|(#))(?:(?:(\\[)([^\\]]*)(\\]))|([\\w-]+))?", beginCaptures: { 1: { name: "entity.other.attribute-name.html.vue" }, 2: { name: "punctuation.separator.key-value.html.vue" }, 3: { name: "punctuation.attribute-shorthand.bind.html.vue" }, 4: { name: "punctuation.attribute-shorthand.event.html.vue" }, 5: { name: "punctuation.attribute-shorthand.slot.html.vue" }, 6: { name: "punctuation.separator.key-value.html.vue" }, 7: { name: "source.ts.embedded.html.vue", patterns: [{ include: "source.ts#expression" }] }, 8: { name: "punctuation.separator.key-value.html.vue" }, 9: { name: "entity.other.attribute-name.html.vue" } }, end: "(?=\\s*[^=\\s])", endCaptures: { 1: { name: "punctuation.definition.string.end.html.vue" } }, name: "meta.attribute.directive.vue", patterns: [{ 1: { name: "punctuation.separator.key-value.html.vue" }, 2: { name: "entity.other.attribute-name.html.vue" }, match: "(\\.)([\\w-]*)" }, { include: "#vue-directives-expression" }] }, "vue-directives-style-attr": { begin: "\\b(style)\\s*(=)", captures: { 1: { name: "entity.other.attribute-name.html.vue" }, 2: { name: "punctuation.separator.key-value.html.vue" } }, end: `(?<='|")`, name: "meta.attribute.style.vue", patterns: [{ begin: `('|")`, beginCaptures: { 1: { name: "punctuation.definition.string.begin.html.vue" } }, comment: "Copy from source.css#rule-list-innards", end: "(\\1)", endCaptures: { 1: { name: "punctuation.definition.string.end.html.vue" } }, name: "source.css.embedded.html.vue", patterns: [{ include: "source.css#comment-block" }, { include: "source.css#escapes" }, { include: "source.css#font-features" }, { match: `(?x) (?<![\\w-])
--
(?:[-a-zA-Z_]    | [^\\x00-\\x7F])
(?:[-a-zA-Z0-9_] | [^\\x00-\\x7F]
|\\\\(?:[0-9a-fA-F]{1,6}|.)
)*`, name: "variable.css" }, { begin: "(?<![-a-zA-Z])(?=[-a-zA-Z])", end: "$|(?![-a-zA-Z])", name: "meta.property-name.css", patterns: [{ include: "source.css#property-names" }] }, { begin: "(:)\\s*", beginCaptures: { 1: { name: "punctuation.separator.key-value.css" } }, comment: "Modify end to fix #199. TODO: handle ' character.", contentName: "meta.property-value.css", end: `\\s*(;)|\\s*(?='|")`, endCaptures: { 1: { name: "punctuation.terminator.rule.css" } }, patterns: [{ include: "source.css#comment-block" }, { include: "source.css#property-values" }] }, { match: ";", name: "punctuation.terminator.rule.css" }] }] }, "vue-interpolations": { patterns: [{ begin: "(\\{\\{)", beginCaptures: { 1: { name: "punctuation.definition.interpolation.begin.html.vue" } }, end: "(\\}\\})", endCaptures: { 1: { name: "punctuation.definition.interpolation.end.html.vue" } }, name: "expression.embedded.vue", patterns: [{ begin: "\\G", end: "(?=\\}\\})", name: "source.ts.embedded.html.vue", patterns: [{ include: "source.ts#expression" }] }] }] } }, scopeName: "source.vue", embeddedLangs: ["html", "markdown", "pug", "stylus", "sass", "css", "scss", "less", "javascript", "typescript", "jsx", "tsx", "coffee", "json", "jsonc", "json5", "yaml", "toml", "graphql", "html-derivative", "markdown-vue", "vue-directives", "vue-interpolations", "vue-sfc-style-variable-injection"] });
var L = [
  ...t,
  ...A,
  ...F,
  ...c,
  ...p,
  ...n,
  ...m,
  ...l,
  ...e,
  ...r,
  ...v,
  ...d,
  ...j,
  ...i,
  ...q,
  ...E,
  ...u,
  ...N,
  ...$,
  ...C,
  ...nt,
  ...at,
  ...rt,
  ...ot,
  ct
];
const pt = Object.freeze({ displayName: "Vue HTML", fileTypes: [], name: "vue-html", patterns: [{ include: "source.vue#vue-interpolations" }, { begin: "(<)([A-Z][a-zA-Z0-9:-]*)(?=[^>]*></\\2>)", beginCaptures: { 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "support.class.component.html" } }, end: "(>)(<)(/)(\\2)(>)", endCaptures: { 1: { name: "punctuation.definition.tag.end.html" }, 2: { name: "punctuation.definition.tag.begin.html meta.scope.between-tag-pair.html" }, 3: { name: "punctuation.definition.tag.begin.html" }, 4: { name: "support.class.component.html" }, 5: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.any.html", patterns: [{ include: "#tag-stuff" }] }, { begin: "(<)([a-z][a-zA-Z0-9:-]*)(?=[^>]*></\\2>)", beginCaptures: { 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.html" } }, end: "(>)(<)(/)(\\2)(>)", endCaptures: { 1: { name: "punctuation.definition.tag.end.html" }, 2: { name: "punctuation.definition.tag.begin.html meta.scope.between-tag-pair.html" }, 3: { name: "punctuation.definition.tag.begin.html" }, 4: { name: "entity.name.tag.html" }, 5: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.any.html", patterns: [{ include: "#tag-stuff" }] }, { begin: "(<\\?)(xml)", captures: { 1: { name: "punctuation.definition.tag.html" }, 2: { name: "entity.name.tag.xml.html" } }, end: "(\\?>)", name: "meta.tag.preprocessor.xml.html", patterns: [{ include: "#tag-generic-attribute" }, { include: "#string-double-quoted" }, { include: "#string-single-quoted" }] }, { begin: "<!--", captures: { 0: { name: "punctuation.definition.comment.html" } }, end: "-->", name: "comment.block.html" }, { begin: "<!", captures: { 0: { name: "punctuation.definition.tag.html" } }, end: ">", name: "meta.tag.sgml.html", patterns: [{ begin: "(?i:DOCTYPE)", captures: { 1: { name: "entity.name.tag.doctype.html" } }, end: "(?=>)", name: "meta.tag.sgml.doctype.html", patterns: [{ match: '"[^">]*"', name: "string.quoted.double.doctype.identifiers-and-DTDs.html" }] }, { begin: "\\[CDATA\\[", end: "]](?=>)", name: "constant.other.inline-data.html" }, { match: "(\\s*)(?!--|>)\\S(\\s*)", name: "invalid.illegal.bad-comments-or-CDATA.html" }] }, { begin: "(</?)([A-Z][a-zA-Z0-9:-]*\\b)", beginCaptures: { 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "support.class.component.html" } }, end: "(>)", endCaptures: { 1: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.block.any.html", patterns: [{ include: "#tag-stuff" }] }, { begin: "(</?)([a-z][a-zA-Z0-9:-]*\\b)", beginCaptures: { 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.block.any.html" } }, end: "(>)", endCaptures: { 1: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.block.any.html", patterns: [{ include: "#tag-stuff" }] }, { begin: "(</?)((?i:body|head|html)\\b)", captures: { 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.structure.any.html" } }, end: "(>)", endCaptures: { 1: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.structure.any.html", patterns: [{ include: "#tag-stuff" }] }, { begin: "(</?)((?i:address|blockquote|dd|div|dl|dt|fieldset|form|frame|frameset|h1|h2|h3|h4|h5|h6|iframe|noframes|object|ol|p|ul|applet|center|dir|hr|menu|pre)(?!-)\\b)", beginCaptures: { 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.block.any.html" } }, end: "(>)", endCaptures: { 1: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.block.any.html", patterns: [{ include: "#tag-stuff" }] }, { begin: "(</?)((?i:a|abbr|acronym|area|b|base|basefont|bdo|big|br|button|caption|cite|code|col|colgroup|del|dfn|em|font|head|html|i|img|input|ins|isindex|kbd|label|legend|li|link|map|meta|noscript|optgroup|option|param|q|s|samp|script|select|small|span|strike|strong|style|sub|sup|table|tbody|td|textarea|tfoot|th|thead|title|tr|tt|u|var)(?!-)\\b)", beginCaptures: { 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.inline.any.html" } }, end: "(/?>)", endCaptures: { 1: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.inline.any.html", patterns: [{ include: "#tag-stuff" }] }, { begin: "(</?)([a-zA-Z0-9:-]+)", beginCaptures: { 1: { name: "punctuation.definition.tag.begin.html" }, 2: { name: "entity.name.tag.other.html" } }, end: "(/?>)", endCaptures: { 1: { name: "punctuation.definition.tag.end.html" } }, name: "meta.tag.other.html", patterns: [{ include: "#tag-stuff" }] }, { include: "#entities" }, { match: "<>", name: "invalid.illegal.incomplete.html" }, { match: "<", name: "invalid.illegal.bad-angle-bracket.html" }], repository: { entities: { patterns: [{ captures: { 1: { name: "punctuation.definition.entity.html" }, 3: { name: "punctuation.definition.entity.html" } }, match: "(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)", name: "constant.character.entity.html" }, { match: "&", name: "invalid.illegal.bad-ampersand.html" }] }, "string-double-quoted": { begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.html" } }, end: '"', endCaptures: { 0: { name: "punctuation.definition.string.end.html" } }, name: "string.quoted.double.html", patterns: [{ include: "source.vue#vue-interpolations" }, { include: "#entities" }] }, "string-single-quoted": { begin: "'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.html" } }, end: "'", endCaptures: { 0: { name: "punctuation.definition.string.end.html" } }, name: "string.quoted.single.html", patterns: [{ include: "source.vue#vue-interpolations" }, { include: "#entities" }] }, "tag-generic-attribute": { match: "(?<=[^=])\\b([a-zA-Z0-9:\\-_]+)", name: "entity.other.attribute-name.html" }, "tag-id-attribute": { begin: "\\b(id)\\b\\s*(=)", captures: { 1: { name: "entity.other.attribute-name.id.html" }, 2: { name: "punctuation.separator.key-value.html" } }, end: `(?!\\G)(?<='|"|[^\\s<>/])`, name: "meta.attribute-with-value.id.html", patterns: [{ begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.html" } }, contentName: "meta.toc-list.id.html", end: '"', endCaptures: { 0: { name: "punctuation.definition.string.end.html" } }, name: "string.quoted.double.html", patterns: [{ include: "source.vue#vue-interpolations" }, { include: "#entities" }] }, { begin: "'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.html" } }, contentName: "meta.toc-list.id.html", end: "'", endCaptures: { 0: { name: "punctuation.definition.string.end.html" } }, name: "string.quoted.single.html", patterns: [{ include: "source.vue#vue-interpolations" }, { include: "#entities" }] }, { captures: { 0: { name: "meta.toc-list.id.html" } }, match: `(?<==)(?:[^\\s<>/'"]|/(?!>))+`, name: "string.unquoted.html" }] }, "tag-stuff": { patterns: [{ include: "#vue-directives" }, { include: "#tag-id-attribute" }, { include: "#tag-generic-attribute" }, { include: "#string-double-quoted" }, { include: "#string-single-quoted" }, { include: "#unquoted-attribute" }] }, "unquoted-attribute": { match: `(?<==)(?:[^\\s<>/'"]|/(?!>))+`, name: "string.unquoted.html" }, "vue-directives": { begin: "(?:\\b(v-)|(:|@|#))([a-zA-Z0-9\\-_]+)(?:\\:([a-zA-Z\\-_]+))?(?:\\.([a-zA-Z\\-_]+))*\\s*(=)", captures: { 1: { name: "entity.other.attribute-name.html" }, 2: { name: "punctuation.separator.key-value.html" }, 3: { name: "entity.other.attribute-name.html" }, 4: { name: "entity.other.attribute-name.html" }, 5: { name: "entity.other.attribute-name.html" }, 6: { name: "punctuation.separator.key-value.html" } }, end: "(?<='|\")|(?=[\\s<>`])", name: "meta.directive.vue", patterns: [{ begin: "`", beginCaptures: { 0: { name: "punctuation.definition.string.begin.html" } }, end: "`", endCaptures: { 0: { name: "punctuation.definition.string.end.html" } }, name: "source.directive.vue", patterns: [{ include: "source.js#expression" }] }, { begin: '"', beginCaptures: { 0: { name: "punctuation.definition.string.begin.html" } }, end: '"', endCaptures: { 0: { name: "punctuation.definition.string.end.html" } }, name: "source.directive.vue", patterns: [{ include: "source.js#expression" }] }, { begin: "'", beginCaptures: { 0: { name: "punctuation.definition.string.begin.html" } }, end: "'", endCaptures: { 0: { name: "punctuation.definition.string.end.html" } }, name: "source.directive.vue", patterns: [{ include: "source.js#expression" }] }] } }, scopeName: "text.html.vue-html", embeddedLangs: ["vue", "javascript"] });
var mt = [
  ...L,
  ...e,
  pt
];
const ut = [
  M,
  X,
  b,
  k,
  ae,
  n,
  re,
  oe,
  pe,
  ue,
  ye,
  ke,
  ve,
  x,
  Ce,
  $,
  qe,
  Se,
  t,
  C,
  Te,
  Ze,
  w,
  e,
  i,
  E,
  q,
  Re,
  v,
  Oe,
  Ge,
  on,
  l,
  pn,
  g,
  un,
  A,
  bn,
  _n,
  hn,
  xn,
  wn,
  $n,
  An,
  Fn,
  h,
  qn,
  Sn,
  Ln,
  F,
  f,
  y,
  Pn,
  _,
  S,
  p,
  m,
  o,
  Un,
  a,
  Bn,
  c,
  Mn,
  Xn,
  Yn,
  N,
  Jn,
  d,
  r,
  L,
  mt,
  s,
  u
];
export {
  ut as l
};
